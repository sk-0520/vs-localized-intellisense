<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">Stellt Daten für das <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using no parameters.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AddingNewEventArgs" />-Klasse ohne Parameter.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using the specified object as the new item.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AddingNewEventArgs" />-Klasse unter Verwendung des angegebenen Objekts als neuem Element.</summary>
      <param name="newObject" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the new item value.">Ein als neuer Elementwert zu verwendendes <see cref="T:System.Object" />.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary vsli:raw="Gets or sets the object to be added to the binding list.">Ruft das Objekt ab, das der Bindungsliste hinzugefügt werden soll, oder legt dieses fest.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to be added as a new item to the associated collection.">Das <see cref="T:System.Object" />, das der zugeordneten Auflistung als neues Element hinzugefügt werden soll.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">Stellt die Methode zur Behandlung des <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />-Ereignisses dar.</summary>
      <param name="sender" vsli:raw="The source of the event, typically a data container or data-bound collection.">Die Quelle des Ereignisses, i. d. R. ein Datencontainer oder eine datengebundene Auflistung.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.AddingNewEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary vsli:raw="Specifies the value to pass to a property to cause the property to get its value from another source. This is known as ambience. This class cannot be inherited.">Gibt den Wert an, der an eine Eigenschaft übergeben werden soll, damit die Eigenschaft den zugehörigen Wert von einer anderen Quelle abrufen kann. Dies wird als Umgebung bezeichnet. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Boolean value for its value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AmbientValueAttribute" />-Klasse, sofern für ihren Wert ein boolescher Wert angegeben ist.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Der Wert dieses Attributs.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an 8-bit unsigned integer for its value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AmbientValueAttribute" />-Klasse, sofern für ihren Wert eine vorzeichenlose 8-Bit-Ganzzahl angegeben ist.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Der Wert dieses Attributs.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Unicode character for its value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AmbientValueAttribute" />-Klasse, sofern für ihren Wert ein Unicode-Zeichen angegeben ist.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Der Wert dieses Attributs.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a double-precision floating-point number for its value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AmbientValueAttribute" />-Klasse, sofern für ihren Wert eine Gleitkommazahl mit doppelter Genauigkeit angegeben ist.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Der Wert dieses Attributs.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 16-bit signed integer for its value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AmbientValueAttribute" />-Klasse, sofern für ihren Wert eine 16-Bit-Ganzzahl mit Vorzeichen angegeben ist.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Der Wert dieses Attributs.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 32-bit signed integer for its value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AmbientValueAttribute" />-Klasse, sofern für ihren Wert eine 32-Bit-Ganzzahl mit Vorzeichen angegeben ist.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Der Wert dieses Attributs.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 64-bit signed integer for its value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AmbientValueAttribute" />-Klasse, sofern für ihren Wert eine 64-Bit-Ganzzahl mit Vorzeichen angegeben ist.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Der Wert dieses Attributs.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an object for its value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AmbientValueAttribute" />-Klasse, sofern für ihren Wert ein Objekt angegeben ist.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Der Wert dieses Attributs.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a single-precision floating point number for its value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AmbientValueAttribute" />-Klasse, sofern für ihren Wert eine Gleitkommazahl mit einfacher Genauigkeit angegeben ist.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Der Wert dieses Attributs.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a string for its value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AmbientValueAttribute" />-Klasse, sofern für ihren Wert eine Zeichenfolge angegeben ist.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Der Wert dieses Attributs.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given the value and its type.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AmbientValueAttribute" />-Klasse, sofern der Wert und dessen Typ angegeben sind.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Der <see cref="T:System.Type" /> des <paramref name="value" />-Parameters.</param>
      <param name="value" vsli:raw="The value for this attribute.">Der Wert für dieses Attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Bestimmt, ob das angegebene <see cref="T:System.ComponentModel.AmbientValueAttribute" /> und das aktuelle <see cref="T:System.ComponentModel.AmbientValueAttribute" /> gleich sind.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Das <see cref="T:System.ComponentModel.AmbientValueAttribute" />, das mit dem aktuellen <see cref="T:System.ComponentModel.AmbientValueAttribute" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene <see cref="T:System.ComponentModel.AmbientValueAttribute" /> gleich der aktuellen <see cref="T:System.ComponentModel.AmbientValueAttribute" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary vsli:raw="Gets the object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Ruft das Objekt ab, das der Wert dieses <see cref="T:System.ComponentModel.AmbientValueAttribute" /> ist.</summary>
      <returns vsli:raw="The object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Das Objekt, das der Wert dieses <see cref="T:System.ComponentModel.AmbientValueAttribute" /> ist.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Array&quot; /&gt; objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von <see cref="T:System.Array" />-Objekten in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ArrayConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ArrayConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Konvertiert das angegebene Wertobjekt in den angegebenen Zieltyp.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Die Kultur, in die der <paramref name="value" /> konvertiert wird.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Die <see cref="T:System.Type" />-Klasse, in die der Wert konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter.">Ruft eine Auflistung von Eigenschaften für den durch den Wertparameter angegebenen Typ von Array ab.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">Eine <see cref="T:System.Object" />-Klasse, die den Typ von Array angibt, für den die Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Ein Array vom Typ <see cref="T:System.Attribute" />, das als Filter verwendet wird.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for an array, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse mit den Eigenschaften, die für ein Array verfügbar sind, oder <see langword="null" />, wenn keine Eigenschaften verfügbar sind.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties.">Ruft einen Wert ab, der angibt, ob dieses Objekt Eigenschaften unterstützt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, da <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> aufgerufen werden muss, um die Eigenschaften dieses Objekts zu ermitteln. Diese Methode gibt nie <see langword="false" /> zurück.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary vsli:raw="Represents a collection of attributes.">Stellt eine Auflistung von Attributen dar.</summary>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.">Gibt eine leere Auflistung an, die Sie verwenden können, um so keine neue Auflistung erstellen zu müssen. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AttributeCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AttributeCollection" />-Klasse.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection.">Ein Array vom Typ <see cref="T:System.Attribute" />, das die Attribute für diese Auflistung bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributes" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary vsli:raw="Determines whether this collection of attributes has the specified attribute.">Bestimmt, ob das angegebene Attribut in dieser Auflistung von Attributen enthalten ist.</summary>
      <param name="attribute" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">Eine <see cref="T:System.Attribute" />-Klasse, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung das Attribut enthält oder das Standardattribut für den Attributtyp ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary vsli:raw="Determines whether this attribute collection contains all the specified attributes in the attribute array.">Bestimmt, ob diese Auflistung von Attributen sämtliche angegebenen Attribute im Attributarray enthält.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">Ein Array vom Typ <see cref="T:System.Attribute" />, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains all the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung sämtliche Attribute enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the collection to an array, starting at the specified index.">Kopiert die Auflistung in ein Array, wobei am angegebenen Index begonnen wird.</summary>
      <param name="array" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to copy the collection to.">Die <see cref="T:System.Array" />-Klasse, in die die Auflistung kopiert werden soll.</param>
      <param name="index" vsli:raw="The index to start from.">Der Index, ab dem begonnen wird.</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from an existing &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">Erstellt eine neue <see cref="T:System.ComponentModel.AttributeCollection" />-Klasse aus einer vorhandenen <see cref="T:System.ComponentModel.AttributeCollection" />-Klasse.</summary>
      <param name="existing" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from which to create the copy.">Die <see cref="T:System.ComponentModel.AttributeCollection" />-Klasse, aus der die neue Kopie erstellt werden soll.</param>
      <param name="newAttributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection. Can be &lt;see langword=&quot;null&quot; /&gt;.">Ein Array vom Typ <see cref="T:System.Attribute" />, das die Attribute für diese Auflistung bereitstellt. Kann <see langword="null" /> sein.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;existing&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="existing" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that is a copy of &lt;paramref name=&quot;existing&quot; /&gt;.">Eine neue <see cref="T:System.ComponentModel.AttributeCollection" />-Klasse, die eine Kopie von <paramref name="existing" /> darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Gibt die <see cref="T:System.Attribute" />-Standardklasse einer bestimmten <see cref="T:System.Type" />-Klasse zurück.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the attribute to retrieve.">Die <see cref="T:System.Type" />-Klasse des abzurufenden Attributs.</param>
      <returns vsli:raw="The default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;paramref name=&quot;attributeType&quot; /&gt;.">Die <see cref="T:System.Attribute" />-Standardklasse einer bestimmten <paramref name="attributeType" />-Klasse zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this collection.">Ruft einen Enumerator für diese Auflistung ab.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Ein Enumerator vom Typ <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary vsli:raw="Determines whether a specified attribute is the same as an attribute in the collection.">Bestimmt, ob ein angegebenes Attribut mit einem Attribut in der Auflistung identisch ist.</summary>
      <param name="attribute" vsli:raw="An instance of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to compare with the attributes in this collection.">Eine Instanz der <see cref="T:System.Attribute" />-Klasse, die mit den Attributen in dieser Auflistung verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Attribut in der Auflistung enthalten ist und denselben Wert hat wie das Attribut in der Auflistung, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary vsli:raw="Determines whether the attributes in the specified array are the same as the attributes in the collection.">Bestimmt, ob die Attribute im angegebenen Array mit den Attributen in der Auflistung identisch sind.</summary>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; to compare with the attributes in this collection.">Ein Array von <see cref="T:System.CodeDom.MemberAttributes" />, das mit den Attributen in dieser Auflistung verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn sämtliche Attribute im Array in der Auflistung enthalten sind und dieselben Werte haben wie die Attribute in der Auflistung, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Gibt einen <see cref="T:System.Collections.IEnumerator" /> für das <see cref="T:System.Collections.IDictionary" /> zurück.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Ein <see cref="T:System.Collections.IEnumerator" /> für das <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary vsli:raw="Gets the attribute collection.">Ruft die Attributauflistung ab.</summary>
      <returns vsli:raw="The attribute collection.">Die Attributauflistung.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary vsli:raw="Gets the number of attributes.">Ruft die Anzahl der Attribute ab.</summary>
      <returns vsli:raw="The number of attributes.">Die Anzahl der Attribute.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the attribute with the specified index number.">Ruft das Attribut mit der angegebenen Indexnummer ab.</summary>
      <param name="index" vsli:raw="The zero-based index of &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">Der nullbasierte Index der <see cref="T:System.ComponentModel.AttributeCollection" />-Klasse.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified index number.">Die <see cref="T:System.Attribute" />-Klasse mit der angegebenen Indexnummer.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary vsli:raw="Gets the attribute with the specified type.">Ruft das Attribut mit dem angegebenen Typ ab.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to get from the collection.">Die <see cref="T:System.Type" />-Klasse der <see cref="T:System.Attribute" />-Klasse, die aus der Auflistung abgerufen werden soll.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified type or, if the attribute does not exist, the default value for the attribute type.">Die <see cref="T:System.Attribute" />-Klasse mit dem angegebenen Typ oder, wenn das Attribut nicht vorhanden ist, der Standardwert für den Attributtyp.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Ruft die Anzahl der Elemente in der Auflistung ab.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Die Anzahl der in der Auflistung enthaltenen Elemente.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread-safe).">Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung synchronisiert (threadsicher) ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf die Auflistung synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ruft ein Objekt ab, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Ein Objekt, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary vsli:raw="Enables attribute redirection. This class cannot be inherited.">Ermöglicht die Umleitung von Attributen. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AttributeProviderAttribute" />-Klasse mit dem angegebenen Typnamen.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">Der Name des anzugebenden Typs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name and property name.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AttributeProviderAttribute" />-Klasse mit dem angegebenen Typnamen und Eigenschaftenname.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">Der Name des anzugebenden Typs.</param>
      <param name="propertyName" vsli:raw="The name of the property for which attributes will be retrieved.">Der Name der Eigenschaft, für die Attribute abgerufen werden.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.AttributeProviderAttribute" />-Klasse mit dem angegebenen Typ.</summary>
      <param name="type" vsli:raw="The type to specify.">Der anzugebende Typ.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary vsli:raw="Gets the name of the property for which attributes will be retrieved.">Ruft den Namen der Eigenschaft ab, für die Attribute abgerufen werden.</summary>
      <returns vsli:raw="The name of the property for which attributes will be retrieved.">Der Name der Eigenschaft, für die Attribute abgerufen werden.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary vsli:raw="Gets the assembly qualified type name passed into the constructor.">Ruft den durch die Assembly bezeichneten Typnamen ab, der an den Konstruktor übergeben wurde.</summary>
      <returns vsli:raw="The assembly qualified name of the type specified in the constructor.">Der durch die Assembly bezeichnete Name des Typs, der im Konstruktor angegeben wurde.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary vsli:raw="Provides a base type converter for nonfloating-point numerical types.">Stellt einen Basistypkonverter für numerische Typen bereit, die keine Gleitkommawerte sind.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Bestimmt, ob dieser Konverter ein Objekt des angegebenen Quelltyps in den systemeigenen Typ des Konverters konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type from which you want to convert.">Eine <see cref="T:System.Type" />-Klasse, die den Ausgangstyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter den Vorgang durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">Gibt einen Wert zurück, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">Ein <see cref="T:System.Type" />, der den Zieltyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter den Vorgang durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">Konvertiert das angegebene Objekt in den systemeigenen Typ des Konverters.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">Eine <see cref="T:System.Globalization.CultureInfo" />-Klasse, die die Kultur angibt, in der die Zahl dargestellt werden soll.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <exception cref="T:System.Exception" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> ist kein gültiger Wert für den Zieltyp.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">Konvertiert das angegebene Objekt in einen anderen Typ.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">Eine <see cref="T:System.Globalization.CultureInfo" />-Klasse, die die Kultur angibt, in der die Zahl dargestellt werden soll.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Der Typ, in den das Objekt konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary vsli:raw="Specifies whether a member is typically used for binding. This class cannot be inherited.">Gibt an, ob ein Member normalerweise für Bindungen verwendet wird. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.BindableAttribute.No&quot; /&gt;. This field is read-only.">Gibt den Standardwert für das <see cref="T:System.ComponentModel.BindableAttribute" /> an, der <see cref="F:System.ComponentModel.BindableAttribute.No" /> ist. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not typically used for binding. This field is read-only.">Gibt an, dass eine Eigenschaft normalerweise nicht für Bindungen verwendet wird. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is typically used for binding. This field is read-only.">Gibt an, dass eine Eigenschaft normalerweise für Bindungen verwendet wird. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with a Boolean value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.BindableAttribute" />-Klasse mit einem booleschen Wert.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft zum Binden verwendet wird; andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.BindableAttribute" />-Klasse.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft zum Binden verwendet wird; andernfalls <see langword="false" />.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.BindingDirection" />-Werte.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with one of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.BindableAttribute" />-Klasse mit einem der <see cref="T:System.ComponentModel.BindableSupport" />-Werte.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.BindableSupport" />-Werte.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.BindableAttribute" />-Klasse.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.BindableSupport" />-Werte.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.BindingDirection" />-Werte.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; objects are equal.">Bestimmt, ob zwei <see cref="T:System.ComponentModel.BindableAttribute" />-Objekte gleich sind.</summary>
      <param name="obj" vsli:raw="The object to compare.">Das zu vergleichende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if it is not equal.">
        <see langword="true" />, wenn das angegebene <see cref="T:System.ComponentModel.BindableAttribute" /> gleich dem aktuellen <see cref="T:System.ComponentModel.BindableAttribute" /> ist; <see langword="false" />, wenn es nicht gleich ist.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Fungiert als eine Hashfunktion für die <see cref="T:System.ComponentModel.BindableAttribute" />-Klasse.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.BindableAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">Bestimmt, ob dieses Attribut der Standardwert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Attribut der Standardwert für diese Attributklasse ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating that a property is typically used for binding.">Ruft einen Wert ab, der angibt, dass eine Eigenschaft normalerweise für Bindungen verwendet wird.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is typically used for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft normalerweise für Bindungen verwendet wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary vsli:raw="Gets a value indicating the direction or directions of this property's data binding.">Ruft einen Wert ab, der die Richtung bzw. Richtungen der Datenbindung dieser Eigenschaft angibt.</summary>
      <returns vsli:raw="The direction of this property's data binding.">Die Richtung der Datenbindung dieser Eigenschaft.</returns>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary vsli:raw="Specifies values to indicate whether a property can be bound to a data element or another property.">Gibt Werte an, die angeben, ob eine Eigenschaft an ein Datenelement oder an eine andere Eigenschaft gebunden werden kann.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary vsli:raw="The property is set to the default.">Die Eigenschaft ist auf den Standardwert festgelegt.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary vsli:raw="The property is not bindable at design time.">Diese Eigenschaft kann zur Entwurfszeit nicht gebunden werden.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary vsli:raw="The property is bindable at design time.">Diese Eigenschaft kann zur Entwurfszeit gebunden werden.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary vsli:raw="Specifies whether the template can be bound one way or two ways.">Gibt an, ob die Vorlage mit einer oder zwei Methoden gebunden werden kann.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary vsli:raw="The template can only accept property values. Used with a generic &lt;see cref=&quot;T:System.Web.UI.ITemplate&quot; /&gt;.">Die Vorlage kann nur Eigenschaftswerte zulassen. Wird mit einer generischen <see cref="T:System.Web.UI.ITemplate" /> verwendet.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary vsli:raw="The template can accept and expose property values. Used with an &lt;see cref=&quot;T:System.Web.UI.IBindableTemplate&quot; /&gt;.">Die Vorlage kann Eigenschaftswerte zulassen und verfügbar machen. Wird mit einer <see cref="T:System.Web.UI.IBindableTemplate" /> verwendet.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary vsli:raw="Provides a generic collection that supports data binding.">Stellt eine generische Auflistung bereit, die die Datenbindung unterstützt.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Der Typ der Elemente in der Liste</typeparam>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary vsli:raw="Occurs before an item is added to the list.">Tritt ein, bevor der Liste ein Element hinzugefügt wird.</summary>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary vsli:raw="Occurs when the list or an item in the list changes.">Tritt ein, wenn die Liste oder ein Element der Liste geändert wird.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class using default values.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.BindingList`1" />-Klasse unter Verwendung von Standardwerten.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class with the specified list.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.BindingList`1" />-Klasse mit der angegebenen Liste.</summary>
      <param name="list" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; of items to be contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">Eine <see cref="T:System.Collections.Generic.IList`1" /> von Elementen, die in <see cref="T:System.ComponentModel.BindingList`1" /> enthalten sein sollen.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary vsli:raw="Adds a new item to the collection.">Fügt der Auflistung ein neues Element hinzu.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Forms.BindingSource.AllowNew&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A public parameterless constructor could not be found for the current item type.">Die <see cref="P:System.Windows.Forms.BindingSource.AllowNew" />-Eigenschaft ist auf <see langword="false" /> festgelegt.  
  
- oder - 
Für den aktuellen Elementtyp konnte kein öffentlicher parameterloser Konstruktor gefunden werden.</exception>
      <returns vsli:raw="The item added to the list.">Das der Liste hinzugefügte Element.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary vsli:raw="Adds a new item to the end of the collection.">Fügt am Ende der Auflistung ein neues Element hinzu.</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The new item is not the same type as the objects contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">Der Typ des neuen Elements entspricht nicht dem Typ der in <see cref="T:System.ComponentModel.BindingList`1" /> enthaltenen Objekte.</exception>
      <returns vsli:raw="The item that was added to the collection.">Das der Auflistung hinzugefügte Element.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the items if overridden in a derived class; otherwise, throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Sortiert die gegebenenfalls in einer abgeleiteten Klasse überschriebenen Elemente; andernfalls wird eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that specifies the property to sort on.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" />, der die Eigenschaft angibt, nach der sortiert werden soll.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.ListSortDirection" />-Werte.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">Die Methode wird in einer abgeleiteten Klasse nicht überschrieben.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item.">Verwirft ein ausstehendes neues Element.</summary>
      <param name="itemIndex" vsli:raw="The index of the of the new item to be added.">Der Index des neuen hinzuzufügenden Elements.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary vsli:raw="Removes all elements from the collection.">Entfernt alle Elemente aus der Auflistung.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">Übergibt ein anstehendes neues Element an die Auflistung.</summary>
      <param name="itemIndex" vsli:raw="The index of the new item to be added.">Der Index des neuen hinzuzufügenden Elements.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Searches for the index of the item that has the specified property descriptor with the specified value, if searching is implemented in a derived class; otherwise, a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Sucht nach dem Index des Elements, das über den angegebenen Eigenschaftendeskriptor mit dem angegebenen Wert verfügt, wenn der Suchvorgang in einer abgeleiteten Klasse implementiert wird, andernfalls <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search for.">Die zu suchende <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <param name="key" vsli:raw="The value of &lt;paramref name=&quot;prop&quot; /&gt; to match.">Der Wert von <paramref name="prop" />, der übereinstimmen soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; is not overridden in a derived class.">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> wird in einer abgeleiteten Klasse nicht überschrieben.</exception>
      <returns vsli:raw="The zero-based index of the item that matches the property descriptor and contains the specified value.">Der nullbasierte Index des Elements, das dem Eigenschaftendeskriptor entspricht und den angegebenen Wert enthält.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified item in the list at the specified index.">Fügt das angegebene Element am angegebenen Index in die Liste ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the item is to be inserted.">Der nullbasierte Index, an dem das Element eingefügt werden soll.</param>
      <param name="item" vsli:raw="The item to insert in the list.">Das in die Liste einzufügende Element.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.AddingNew&quot; /&gt; event.">Löst das <see cref="E:System.ComponentModel.BindingList`1.AddingNew" />-Ereignis aus.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.AddingNewEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event.">Löst das <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />-Ereignis aus.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.ListChangedEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Entfernt das Element am angegebenen Index.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Der nullbasierte Index des zu entfernenden Elements.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="You are removing a newly added item and &lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowRemove&quot; /&gt; is set to &lt;see langword=&quot;false&quot; /&gt;.">Sie entfernen ein neu hinzugefügtes Element, und <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> ist auf <see langword="false" /> festgelegt.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary vsli:raw="Removes any sort applied with &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; if sorting is implemented in a derived class; otherwise, raises &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Entfernt jede mit <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> angewendete Sortierung, wenn die Sortierung in einer abgeleiteten Klasse implementiert wird; andernfalls wird <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">Die Methode wird in einer abgeleiteten Klasse nicht überschrieben.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.Reset&quot; /&gt;.">Löst ein <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />-Ereignis vom Typ <see cref="F:System.ComponentModel.ListChangedType.Reset" /> aus.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt; for the item at the specified position.">Löst für das Element an der angegebenen Position ein <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />-Ereignis vom Typ <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> aus.</summary>
      <param name="position" vsli:raw="A zero-based index of the item to be reset.">Ein nullbasierter Index des zurückzusetzenden Elements.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Ersetzt das Element im angegebenen Index durch ein angegebenes Element.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to replace.">Der nullbasierte Index des zu ersetzenden Elements.</param>
      <param name="item" vsli:raw="The new value for the item at the specified index. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Der neue Wert für das Element am angegebenen Index. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">
        <paramref name="index" /> ist kleiner als Null.  
  
- oder - 
 <paramref name="index" /> ist größer als <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add as a search criteria.">Der als Suchkriterium hinzuzufügende <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary vsli:raw="Adds a new item to the list. For more information, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">Fügt der Liste ein neues Element hinzu. Weitere Informationen finden Sie unter <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="The item added to the list.">Das der Liste hinzugefügte Element.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;. For a complete description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">Sortiert die Liste entsprechend einem <see cref="T:System.ComponentModel.PropertyDescriptor" /> und einer <see cref="T:System.ComponentModel.ListSortDirection" />. Eine ausführliche Beschreibung dieses Members finden Sie unter <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, nach dem sortiert werden soll.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.ListSortDirection" />-Werte.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, in dem gesucht werden soll.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;prop&quot; /&gt; parameter to search for.">Der Wert des <paramref name="prop" />-Parameters, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Der Index der Zeile mit dem angegebenen <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" />, der aus den für die Suche verwendeten Indizes entfernt werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt;.">Eine Beschreibung dieses Members finden Sie unter der <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />-Methode.</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary vsli:raw="Gets or sets a value indicating whether items in the list can be edited.">Ruft einen Wert ab, der angibt, ob Elemente in der Liste bearbeitet werden können, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn die Listenelemente bearbeitet werden können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary vsli:raw="Gets or sets a value indicating whether you can add items to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">Ruft einen Wert ab, der angibt, ob der Liste mithilfe der <see cref="M:System.ComponentModel.BindingList`1.AddNew" />-Methode neue Elemente hinzugefügt werden können.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see langword="true" />, wenn der Liste mithilfe der <see cref="M:System.ComponentModel.BindingList`1.AddNew" />-Methode neue Elemente hinzugefügt werden können, andernfalls <see langword="false" />. Der Standardwert hängt von dem in der Liste enthaltenen zugrunde liegenden Typ ab.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary vsli:raw="Gets or sets a value indicating whether you can remove items from the collection.">Ruft einen Wert ab, der angibt, ob Elemente aus der Auflistung entfernt werden können, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn Elemente mithilfe der <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" />-Methode aus der Liste entfernt werden können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary vsli:raw="Gets a value indicating whether the list is sorted.">Ruft einen Wert ab, der angibt, ob die Liste sortiert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is sorted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Liste sortiert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary vsli:raw="Gets or sets a value indicating whether adding or removing items within the list raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events.">Ruft den Wert ab, der angibt, ob durch das Hinzufügen oder Entfernen von Elementen in der Liste <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />-Ereignisse ausgelöst werden, oder legt diesen Wert fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if adding or removing items raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn durch das Hinzufügen oder Löschen von Elementen <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />-Ereignisse ausgelöst werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary vsli:raw="Gets the direction the list is sorted.">Ruft die Sortierrichtung der Liste ab.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.ComponentModel.ListSortDirection.Ascending&quot; /&gt;.">Einer der <see cref="T:System.ComponentModel.ListSortDirection" />-Werte. Der Standardwert ist <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary vsli:raw="Gets the property descriptor that is used for sorting the list if sorting is implemented in a derived class; otherwise, returns &lt;see langword=&quot;null&quot; /&gt;.">Ruft den Eigenschaftendeskriptor auf, mit dem die Liste sortiert wird, wenn die Liste in einer abgeleiteten Klasse sortiert wird, andernfalls <see langword="null" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; used for sorting the list.">Der zum Sortieren der Liste verwendete <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary vsli:raw="Gets a value indicating whether &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are enabled.">Ruft einen Wert ab, der angibt, ob <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />-Ereignisse aktiviert sind.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />-Ereignisse unterstützt werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports searching.">Ruft einen Wert ab, der angibt, ob die Liste Suchvorgänge unterstützt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Liste Suchvorgänge unterstützt, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports sorting.">Ruft einen Wert ab, der angibt, ob die Liste Sortiervorgänge unterstützt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Liste die Sortierung unterstützt, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary vsli:raw="Gets a value indicating whether items in the list can be edited.">Ruft einen Wert ab, der angibt, ob Elemente in der Liste bearbeitet werden können.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn die Listenelemente bearbeitet werden können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary vsli:raw="Gets a value indicating whether new items can be added to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">Ruft einen Wert ab, der angibt, ob der Liste mithilfe der <see cref="M:System.ComponentModel.BindingList`1.AddNew" />-Methode neue Elemente hinzugefügt werden können.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see langword="true" />, wenn der Liste mithilfe der <see cref="M:System.ComponentModel.BindingList`1.AddNew" />-Methode neue Elemente hinzugefügt werden können, andernfalls <see langword="false" />. Der Standardwert hängt von dem in der Liste enthaltenen zugrunde liegenden Typ ab.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary vsli:raw="Gets a value indicating whether items can be removed from the list.">Ruft einen Wert ab, der angibt, ob Elemente aus der Liste entfernt werden können.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn Elemente mithilfe der <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" />-Methode aus der Liste entfernt werden können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.IsSorted&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.ComponentModel.IBindingList.IsSorted" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> aufgerufen wurde und <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> nicht aufgerufen wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortDirection&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.ComponentModel.IBindingList.SortDirection" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.ListSortDirection" />-Werte.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortProperty&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.ComponentModel.IBindingList.SortProperty" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, der für die Sortierung verwendet wird.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsChangeNotification&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn bei Änderungen der Liste oder eines Elements ein <see cref="E:System.ComponentModel.IBindingList.ListChanged" />-Ereignis ausgelöst wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Liste die Suche mit der <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />-Methode unterstützt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Liste die Sortierung unterstützt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether item property value changes raise &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt;. This member cannot be overridden in a derived class.">Ruft einen Wert ab, der angibt, ob durch Änderungen des Elementeigenschaftswerts <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />-Ereignisse vom Typ <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> ausgelöst werden. Dieser Member kann in einer abgeleiteten Klasse nicht überschrieben werden.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list type implements &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanged&quot; /&gt;, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> , wenn der Auflistungstyp implementiert <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> , andernfalls <see langword="false" /> . Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Boolean&quot; /&gt; objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von <see cref="T:System.Boolean" />-Objekten in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BooleanConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.BooleanConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Boolean object using the specified context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt vom angegebenen Quelltyp unter Verwendung des angegebenen Kontexts in ein boolesches Objekt konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Eine <see cref="T:System.Type" />-Klasse, die den Ausgangstyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt die Konvertierung ausführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a Boolean object.">Konvertiert das angegebene Wertobjekt in ein boolesches Objekt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Eine <see cref="T:System.Globalization.CultureInfo" />-Klasse, die die Kultur angibt, in die konvertiert werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> ist kein gültiger Wert für den Zieltyp.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten <paramref name="value" />-Parameter darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the Boolean data type.">Ruft eine Auflistung der Standardwerte für den booleschen Datentyp ab.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values.">Eine <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />-Klasse, die einen Standardsatz gültiger Werte enthält.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">Ruft einen Wert ab, der angibt, ob die von der <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />-Methode zurückgegebene Auflistung von Standardwerten eine exklusive Liste darstellt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, da die von der <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />-Methode zurückgegebene <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />-Klasse eine vollständige Liste der möglichen Werte darstellt. Diese Methode gibt nie <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">Ruft einen Wert ab, der angibt, ob dieses Objekt einen Standardsatz von Werten unterstützt, die aus einer Liste ausgewählt werden können.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, da <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> aufgerufen werden muss, um eine vom Objekt unterstützte Standardmenge von Werten zu ermitteln. Diese Methode gibt nie <see langword="false" /> zurück.</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von 8-Bit-Ganzzahlobjekten ohne Vorzeichen in andere und aus anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ByteConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ByteConverter" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary vsli:raw="Represents the method that handles a cancelable event.">Stellt die Methode dar, die ein Ereignis behandelt, das abgebrochen werden kann.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CancelEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.CancelEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary vsli:raw="Provides a type converter to convert Unicode character objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von Unicodezeichenobjekten in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CharConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.CharConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Unicode character object using the specified context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt vom angegebenen Quelltyp unter Verwendung des angegebenen Kontexts in ein Unicode-Zeichenobjekt konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Ein <see cref="T:System.Type" />, der den Typ darstellt, aus dem konvertiert werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a Unicode character object.">Konvertiert das angegebene Objekt in ein Unicode-Zeichenobjekt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Die Kultur, in die der <paramref name="value" /> konvertiert wird.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> ist kein gültiger Wert für den Zieltyp.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten <paramref name="value" />-Parameter darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a Unicode character object using the arguments.">Konvertiert das angegebene Wertobjekt mithilfe der Argumente in ein Unicode-Zeichenobjekt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Die Kultur, in die der <paramref name="value" /> konvertiert wird.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Die <see cref="T:System.Type" />-Klasse, in die der Wert konvertiert werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary vsli:raw="Specifies how the collection is changed.">Gibt an, in welcher Weise die Auflistung geändert wurde.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary vsli:raw="Specifies that an element was added to the collection.">Gibt an, dass der Auflistung ein Element hinzugefügt wurde.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary vsli:raw="Specifies that the entire collection has changed. This is caused by using methods that manipulate the entire collection, such as &lt;see cref=&quot;M:System.Collections.CollectionBase.Clear&quot; /&gt;.">Gibt an, dass sich die gesamte Auflistung geändert hat. Dies wird durch Methoden verursacht, die sich auf die gesamte Auflistung auswirken, z. B. <see cref="M:System.Collections.CollectionBase.Clear" />.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary vsli:raw="Specifies that an element was removed from the collection.">Gibt an, dass ein Element aus der Auflistung entfernt wurde.</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event.">Stellt Daten für das <see cref="E:System.Data.DataColumnCollection.CollectionChanged" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />-Klasse.</summary>
      <param name="action" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values that specifies how the collection changed.">Einer der <see cref="T:System.ComponentModel.CollectionChangeAction" />-Werte, der angibt, in welcher Weise die Auflistung geändert wurde.</param>
      <param name="element" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the instance of the collection where the change occurred.">Ein <see cref="T:System.Object" />, das die Instanz der Auflistung angibt, die geändert wurde.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary vsli:raw="Gets an action that specifies how the collection changed.">Ruft eine Aktion ab, die angibt, in welcher Weise die Auflistung geändert wurde.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.CollectionChangeAction" />-Werte.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary vsli:raw="Gets the instance of the collection with the change.">Ruft die Instanz der Auflistung mit der Änderung ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the instance of the collection with the change, or &lt;see langword=&quot;null&quot; /&gt; if you refresh the collection.">Ein <see cref="T:System.Object" />, das die Instanz der Auflistung mit der Änderung darstellt, oder <see langword="null" />, wenn Sie die Auflistung aktualisieren.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event raised when adding elements to or removing elements from a collection.">Stellt die Methode für die Behandlung des <see cref="E:System.Data.DataColumnCollection.CollectionChanged" />-Ereignisses dar, das beim Hinzufügen oder Entfernen von Elementen in einer Auflistung ausgelöst wird.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary vsli:raw="Provides a type converter to convert collection objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von Auflistungsobjekten in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.CollectionConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Konvertiert das angegebene Wertobjekt in den angegebenen Zieltyp.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="The culture to which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Die Kultur, in die der <paramref name="value" /> konvertiert wird.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This parameter must inherit from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Die zu konvertierende <see cref="T:System.Object" />. Dieser Parameter muss von der <see cref="T:System.Collections.ICollection" />-Schnittstelle erben.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Die <see cref="T:System.Type" />-Klasse, in die der Wert konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter using the specified context and attributes.">Ruft unter Verwendung des angegebenen Kontexts und der angegebenen Attribute eine Auflistung der Eigenschaften für den durch den Wertparameter angegebenen Typ von Array ab.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">Eine <see cref="T:System.Object" />-Klasse, die den Typ von Array angibt, für den die Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Ein Array vom Typ <see cref="T:System.Attribute" />, das als Filter verwendet wird.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit für diesen Datentyp verfügbar gemachten Eigenschaften oder<see langword="null" />, wenn keine Eigenschaften vorhanden sind. Diese Methode gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Ruft einen Wert ab, der angibt, ob dieses Objekt Eigenschaften unterstützt.</summary>
      <param name="context">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns>
        <see langword="false" />, da die <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />-Methode nicht aufgerufen werden darf, um die Eigenschaften dieses Objekts zu ermitteln. Diese Methode gibt nie <see langword="true" /> zurück.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the data source and data member properties for a component that supports complex data binding. This class cannot be inherited.">Gibt die Datenquellen- und Datenmembereigenschaften für eine Komponente an, die die komplexe Datenbindung unterstützt. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class.">Stellt den Standardwert für die <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />-Klasse dar.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using no parameters.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />-Klasse ohne Parameter.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />-Klasse unter Verwendung der angegebenen Datenquelle.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Der Name der Eigenschaft, die als Datenquelle verwendet werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source and data member.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />-Klasse unter Verwendung der angegebenen Datenquelle und des Datenmembers.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Der Name der Eigenschaft, die als Datenquelle verwendet werden soll.</param>
      <param name="dataMember" vsli:raw="The name of the property to be used as the source for data.">Der Name der Eigenschaft, die als Quelle für Daten verwendet werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">Bestimmt, ob das angegebene <see cref="T:System.Object" /> und die aktuelle <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />-Instanz gleich sind.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">Das <see cref="T:System.Object" />, das mit der aktuellen <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />-Instanz verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" />, wenn das Objekt und die aktuelle Instanz gleich sind, andernfalls <see langword="false" />, wenn sie nicht gleicht sind.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary vsli:raw="Gets the name of the data member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Ruft den Namen der Datenmembereigenschaft für die Komponente ab, an die das <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> gebunden ist.</summary>
      <returns vsli:raw="The name of the data member property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Der Name der Datenmembereigenschaft für die Komponente, an die <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> gebunden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Ruft den Namen der Datenquelleneigenschaft für die Komponente ab, an die das <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> gebunden ist.</summary>
      <returns vsli:raw="The name of the data source property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Der Name der Datenquelleneigenschaft für die Komponente, an die <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> gebunden ist.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary vsli:raw="Provides a type converter to convert components to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von Komponenten in andere und aus anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ComponentConverter" />-Klasse.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this component converter.">Ein <see cref="T:System.Type" />, der den Typ darstellt, der diesem Komponentenkonverter zugeordnet werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of component specified by the value parameter.">Ruft eine Auflistung von Eigenschaften für den durch den Wertparameter angegebenen Typ von Komponente ab.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of component to get the properties for.">Ein <see cref="T:System.Object" />, das den Typ von Komponente angibt, für das die Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Ein Array vom Typ <see cref="T:System.Attribute" />, das als Filter verwendet wird.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit den Eigenschaften, die für die Komponente verfügbar sind, oder <see langword="null" />, wenn keine Eigenschaften vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">Ruft einen Wert ab, der angibt, ob dieses Objekt Eigenschaften unter Verwendung des angegebenen Kontexts unterstützt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, da <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> aufgerufen werden muss, um die Eigenschaften dieses Objekts zu ermitteln. Diese Methode gibt nie <see langword="false" /> zurück.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary vsli:raw="Provides the base class for a custom component editor.">Stellt die Basisklasse für einen benutzerdefinierten Komponenten-Editor bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentEditor&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ComponentEditor" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified based upon a given context.">Bearbeitet die Komponente und gibt einen Wert zurück, der angibt, ob die Komponente auf Basis eines angegebenen Kontexts geändert wurde.</summary>
      <param name="context" vsli:raw="An optional context object that can be used to obtain further information about the edit.">Ein optionales Kontextobjekt, mit dem weitere Informationen über den Bearbeitungsvorgang abgerufen werden können.</param>
      <param name="component" vsli:raw="The component to be edited.">Die zu bearbeitende Komponente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Komponente geändert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified.">Bearbeitet die Komponente und gibt einen Wert zurück, der angibt, ob die Komponente geändert wurde.</summary>
      <param name="component" vsli:raw="The component to be edited.">Die zu bearbeitende Komponente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Komponente geändert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary vsli:raw="Provides simple functionality for enumerating resources for a component or object. The &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class is a &lt;see cref=&quot;T:System.Resources.ResourceManager&quot; /&gt;.">Stellt einfache Funktionen zum Auflisten von Ressourcen für eine Komponente oder ein Objekt bereit. Die <see cref="T:System.ComponentModel.ComponentResourceManager" />-Klasse ist ein <see cref="T:System.Resources.ResourceManager" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class with default values.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ComponentResourceManager" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; that looks up resources in satellite assemblies based on information from the specified &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Erstellt einen <see cref="T:System.ComponentModel.ComponentResourceManager" />, der Ressourcen in Satellitenassemblys auf der Grundlage der Informationen aus dem angegebenen <see cref="T:System.Type" /> sucht.</summary>
      <param name="t" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; from which the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; derives all information for finding resource files.">Eine <see cref="T:System.Type" />-Klasse, aus der die <see cref="T:System.ComponentModel.ComponentResourceManager" />-Klasse alle Informationen zum Suchen von Ressourcendateien ableitet.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">Wendet den Wert einer Ressource auf die entsprechende Eigenschaft des Objekts an.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">Eine <see cref="T:System.Object" />-Klasse, die den anzuwendenden Eigenschaftswert enthält.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">Eine <see cref="T:System.String" />-Klasse, die den Namen des Objekts enthält, nach dem in den Ressourcen gesucht werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> oder <paramref name="objectName" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">Wendet den Wert einer Ressource auf die entsprechende Eigenschaft des Objekts an.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">Eine <see cref="T:System.Object" />-Klasse, die den anzuwendenden Eigenschaftswert enthält.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">Eine <see cref="T:System.String" />-Klasse, die den Namen des Objekts enthält, nach dem in den Ressourcen gesucht werden soll.</param>
      <param name="culture" vsli:raw="The culture for which to apply resources.">Die Kultur, auf die Ressourcen angewendet werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> oder <paramref name="objectName" /> ist <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary vsli:raw="Encapsulates zero or more components.">Kapselt 0 (null) oder mehr Komponenten.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Container" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;. The component is unnamed.">Fügt dem <see cref="T:System.ComponentModel.Component" /> die angegebene <see cref="T:System.ComponentModel.Container" /> hinzu. Die Komponente hat keinen Namen.</summary>
      <param name="component" vsli:raw="The component to add.">Die hinzuzufügende Komponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; and assigns it a name.">Fügt dem <see cref="T:System.ComponentModel.Component" /> die angegebene <see cref="T:System.ComponentModel.Container" /> hinzu und weist ihr einen Namen zu.</summary>
      <param name="component" vsli:raw="The component to add.">Die hinzuzufügende Komponente.</param>
      <param name="name" vsli:raw="The unique, case-insensitive name to assign to the component.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt;, which leaves the component unnamed.">Der eindeutige Name für die Komponente, bei dem die Groß- und Kleinschreibung nicht berücksichtigt wird.  
  
- oder - 
 <see langword="null" />, d. h., der Komponente wird kein Name zugewiesen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> ist nicht eindeutig.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; for the given &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and assigns the given name to the site.">Erstellt eine Site <see cref="T:System.ComponentModel.ISite" /> für die angegebene <see cref="T:System.ComponentModel.IComponent" /> und weist der Site den angegebenen Namen zu.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">Die <see cref="T:System.ComponentModel.IComponent" />, für die eine Site erstellt werden soll.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">Der Name, der der <paramref name="component" /> zugewiesen werden soll, oder <see langword="null" />, wenn die Namenszuweisung übersprungen werden soll.</param>
      <returns vsli:raw="The newly created site.">Die neu erstellte Site.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Gibt alle vom <see cref="T:System.ComponentModel.Container" /> verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;, and optionally releases the managed resources.">Gibt die von <see cref="T:System.ComponentModel.Container" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary vsli:raw="Releases unmanaged resources and performs other cleanup operations before the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; is reclaimed by garbage collection.">Gibt nicht verwaltete Ressourcen frei und führt andere Bereinigungsvorgänge durch, bevor die <see cref="T:System.ComponentModel.Container" /> durch die Garbage Collection wieder zugänglich gemacht wird.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">Ruft das Dienstobjekt des angegebenen Typs ab, sofern es verfügbar ist.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">Der <see cref="T:System.Type" /> des abzurufenden Dienstes.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; implementing the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">Ein <see cref="T:System.Object" />, das den angeforderten Dienst implementiert, oder <see langword="null" />, wenn der Dienst nicht ermittelt werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Entfernt eine Komponente aus dem <see cref="T:System.ComponentModel.Container" />.</summary>
      <param name="component" vsli:raw="The component to remove.">Die zu entfernende Komponente.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; without setting &lt;see cref=&quot;P:System.ComponentModel.IComponent.Site&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">Entfernt eine Komponente aus dem <see cref="T:System.ComponentModel.Container" />, ohne <see cref="P:System.ComponentModel.IComponent.Site" /> auf <see langword="null" /> festzulegen.</summary>
      <param name="component" vsli:raw="The component to remove.">Die zu entfernende Komponente.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Determines whether the component name is unique for this container.">Bestimmt, ob der Komponentenname in diesem Container eindeutig ist.</summary>
      <param name="component" vsli:raw="The named component.">Die benannte Komponente.</param>
      <param name="name" vsli:raw="The component name to validate.">Das Komponentenname, dessen Gültigkeit geprüft werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> ist nicht eindeutig.</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary vsli:raw="Gets all the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Ruft alle Komponenten im <see cref="T:System.ComponentModel.Container" /> ab.</summary>
      <returns vsli:raw="A collection that contains the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Eine Auflistung mit den Komponenten im <see cref="T:System.ComponentModel.Container" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary vsli:raw="Provides a base class for the container filter service.">Stellt eine Basisklasse für den Containerfilterdienst bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ContainerFilterService&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ContainerFilterService" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary vsli:raw="Filters the component collection.">Filtert die Komponentenauflistung.</summary>
      <param name="components" vsli:raw="The component collection to filter.">Die zu filternde Komponentenauflistung.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ComponentCollection&quot; /&gt; that represents a modified collection.">Eine <see cref="T:System.ComponentModel.ComponentCollection" />, die eine geänderte Auflistung darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von <see cref="T:System.Globalization.CultureInfo" />-Objekten in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CultureInfoConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.CultureInfoConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; using the specified context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt vom angegebenen Quelltyp unter Verwendung des angegebenen Kontexts in eine <see cref="T:System.Globalization.CultureInfo" />-Struktur konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Eine <see cref="T:System.Type" />-Klasse, die den Ausgangstyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Eine <see cref="T:System.Type" />-Klasse, die den Zieltyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;.">Konvertiert das angegebene Wertobjekt in eine <see cref="T:System.Globalization.CultureInfo" />-Struktur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Eine <see cref="T:System.Globalization.CultureInfo" />-Klasse, die die Kultur angibt, in die konvertiert werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a culture that is not valid.">
        <paramref name="value" /> gibt an, dass die Kultur nicht gültig ist.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Konvertiert das angegebene Wertobjekt in den angegebenen Zieltyp.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Eine <see cref="T:System.Globalization.CultureInfo" />-Klasse, die die Kultur angibt, in die konvertiert werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Die <see cref="T:System.Type" />-Klasse, in die der Wert konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten <paramref name="value" />-Parameter darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary vsli:raw="Retrieves the name of the specified culture.">Ruft den Namen der angegebenen Kultur ab.</summary>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to get the name for.">Eine <see cref="T:System.Globalization.CultureInfo" />, die die Kultur angibt, für die der Name abgerufen werden soll.</param>
      <returns vsli:raw="The name of the specified culture.">Der Name der angegebenen Kultur.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object using the specified context.">Ruft unter Verwendung des angegebenen Kontexts eine Auflistung der Standardwerte für ein <see cref="T:System.Globalization.CultureInfo" />-Objekt ab.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Eine <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, die eine Standardmenge zulässiger Werte enthält, oder <see langword="null" />, wenn der Datentyp keine Standardmenge von Werten unterstützt.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list.">Ruft einen Wert ab, der angibt, ob die von der <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />-Methode zurückgegebene Auflistung von Standardwerten eine vollständige Liste darstellt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is not an exhaustive list of possible values (that is, other values are possible). This method never returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="false" />, da die von <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> zurückgegebene <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />-Klasse keine vollständige Liste möglicher Werte darstellt (d. h., andere Werte sind möglich). Diese Methode gibt nie <see langword="true" /> zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Ruft einen Wert ab, der angibt, ob dieses Objekt eine Standardmenge von Werten unterstützt, die unter Verwendung des angegebenen Kontexts aus einer Liste ausgewählt werden können.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, weil die <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />-Schnittstelle aufgerufen werden muss, um eine vom Objekt unterstützte Standardmenge von Werten zu ermitteln. Diese Methode gibt nie <see langword="false" /> zurück.</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary vsli:raw="Provides a simple default implementation of the &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; interface.">Stellt eine einfache Standardimplementierung der <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.CustomTypeDescriptor" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class using a parent custom type descriptor.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.CustomTypeDescriptor" />-Klasse unter Verwendung eines übergeordneten benutzerdefinierten Typdeskriptors.</summary>
      <param name="parent" vsli:raw="The parent custom type descriptor.">Der übergeordnete benutzerdefinierte Typdeskriptor.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for the type represented by this type descriptor.">Gibt eine Auflistung benutzerdefinierter Attribute für den durch diesen Typdeskriptor dargestellten Typ zurück.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the type. The default is &lt;see cref=&quot;F:System.ComponentModel.AttributeCollection.Empty&quot; /&gt;.">Eine <see cref="T:System.ComponentModel.AttributeCollection" /> mit den Attributen für den Typ. Der Standardwert ist <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the fully qualified name of the class represented by this type descriptor.">Gibt den vollqualifizierten Namen der Klasse zurück, die von diesem Typdeskriptor dargestellt wird.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the fully qualified class name of the type this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">Eine <see cref="T:System.String" /> mit dem vollqualifizierten Klassennamen des Typs, den dieser Typdeskriptor beschreibt. Der Standardwert ist <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of the class represented by this type descriptor.">Gibt den Namen der durch diesen Typdeskriptor dargestellten Klasse zurück.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the component instance this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.String" />, der den Namen der Komponenteninstanz enthält, die diesen Typdeskriptor beschreibt. Der Standardwert ist <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for the type represented by this type descriptor.">Gibt einen Typkonverter für den durch diesen Typdeskriptor dargestellten Typ zurück.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the type represented by this type descriptor. The default is a newly created &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den von diesem Typdeskriptor dargestellten Typ. Der Standard ist ein neu erstellter <see cref="T:System.ComponentModel.TypeConverter" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the event descriptor for the default event of the object represented by this type descriptor.">Gibt die Ereignisbeschreibung für das Standardereignis des von diesem Typdeskriptor dargestellten Objekts zurück.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the default event on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Der <see cref="T:System.ComponentModel.EventDescriptor" /> für das Standardereignis in dem durch diesen Typdeskriptor dargestellten Objekt. Der Standardwert ist <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the property descriptor for the default property of the object represented by this type descriptor.">Gibt die Eigenschaftenbeschreibung für die Standardeigenschaft des von diesem Typdeskriptor dargestellten Objekts zurück.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; for the default property on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" /> für die Standardeigenschaft in dem durch diesen Typdeskriptor dargestellten Objekt. Der Standardwert ist <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.">Gibt einen Editor des angegebenen Typs zurück, der der durch diesen Typdeskriptor dargestellten Klasse zugeordnet werden soll.</summary>
      <param name="editorBaseType" vsli:raw="The base type of the editor to retrieve.">Der Basistyp des abzurufenden Editors.</param>
      <returns vsli:raw="An editor of the given type that is to be associated with the class represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Ein Editor des angegebenen Typs, der der durch diesen Typdeskriptor dargestellten Klasse zugeordnet werden soll. Der Standardwert ist <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns a collection of event descriptors for the object represented by this type descriptor.">Gibt eine Auflistung der Ereignisbeschreibungen für das durch diesen Typdeskriptor dargestellte Objekt zurück.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptors for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">Eine <see cref="T:System.ComponentModel.EventDescriptorCollection" />, die die Ereignisbeschreibungen für das durch diesen Typdeskriptor dargestellte Objekt enthält. Der Standardwert ist <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of event descriptors for the object represented by this type descriptor.">Gibt eine gefilterte Auflistung der Ereignisbeschreibungen für das durch diesen Typdeskriptor dargestellte Objekt zurück.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Attributen, das als Filter verwendet werden soll. Dieser Wert kann <see langword="null" /> sein.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">Eine <see cref="T:System.ComponentModel.EventDescriptorCollection" />, die die Ereignisbeschreibungen für das durch diesen Typdeskriptor dargestellte Objekt enthält. Der Standardwert ist <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns a collection of property descriptors for the object represented by this type descriptor.">Gibt eine Auflistung der Eigenschaftenbeschreibungen für das durch diesen Typdeskriptor dargestellte Objekt zurück.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, die die Eigenschaftenbeschreibungen für das durch diesen Typdeskriptor dargestellte Objekt enthält. Der Standardwert ist <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of property descriptors for the object represented by this type descriptor.">Gibt eine gefilterte Auflistung der Eigenschaftenbeschreibungen für das durch diesen Typdeskriptor dargestellte Objekt zurück.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Attributen, das als Filter verwendet werden soll. Dieser Wert kann <see langword="null" /> sein.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, die die Eigenschaftenbeschreibungen für das durch diesen Typdeskriptor dargestellte Objekt enthält. Der Standardwert ist <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">Gibt ein Objekt zurück, das die Eigenschaft enthält, die durch den Eigenschaftendeskriptor angegeben ist.</summary>
      <param name="pd" vsli:raw="The property descriptor for which to retrieve the owning object.">Der Eigenschaftendeskriptor, für den das besitzende Objekt abgerufen werden soll.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that owns the given property specified by the type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.Object" />, das die vom Typdeskriptor angegebene Eigenschaft besitzt. Der Standardwert ist <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary vsli:raw="Identifies a type as an object suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object. This class cannot be inherited.">Identifiziert einen Typ als ein für die Bindung an ein <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Objekt geeignetes Objekt. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary vsli:raw="Indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Gibt an, dass die Klasse für die Bindung an ein <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Objekt zur Entwurfszeit geeignet ist. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary vsli:raw="Represents the default value of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class, which indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Stellt den Standardwert der <see cref="T:System.ComponentModel.DataObjectAttribute" />-Klasse dar, mit dem angegeben wird, dass die Klasse für die Bindung an ein <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Objekt zur Entwurfszeit geeignet ist. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary vsli:raw="Indicates that the class is not suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Gibt an, dass die Klasse für die Bindung an ein <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Objekt zur Entwurfszeit nicht geeignet ist. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DataObjectAttribute" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class and indicates whether an object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DataObjectAttribute" />-Klasse und gibt an, ob ein Objekt für die Bindung an ein <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Objekt geeignet ist.</summary>
      <param name="isDataObject" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt für die Bindung an ein <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Objekt geeignet ist, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; fits the pattern of another object.">Bestimmt, ob diese Instanz von <see cref="T:System.ComponentModel.DataObjectAttribute" /> dem Muster eines anderen Objekts entspricht.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt;.">Ein Objekt, das mit dieser Instanz von <see cref="T:System.ComponentModel.DataObjectAttribute" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz der vom <paramref name="obj" />-Parameter angegebenen Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Ruft einen Wert ab, der angibt, ob der aktuelle Wert des Attributs dessen Standardwert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der aktuelle Wert des Attributs der Standardwert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary vsli:raw="Gets a value indicating whether an object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time.">Ruft einen Wert ab, der angibt, ob ein Objekt als ein für die Bindung an ein <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Objekt zur Entwurfszeit geeignetes Objekt betrachtet werden soll.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt als ein für die Bindung an ein <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Objekt geeignetes Objekt betrachtet werden soll, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary vsli:raw="Provides metadata for a property representing a data field. This class cannot be inherited.">Stellt Metadaten für eine Eigenschaft bereit, die ein Datenfeld darstellt. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />-Klasse und gibt an, ob das Feld den Primärschlüssel für die Datenzeile darstellt.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass das Feld im Primärschlüssel der Datenzeile ist, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, and whether the field is a database identity field.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />-Klasse und gibt an, ob das Feld den Primärschlüssel für die Datenzeile darstellt und ob das Feld ein Datenbank-Identitätsfeld darstellt.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass das Feld im Primärschlüssel der Datenzeile ist, andernfalls <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass das Feld ein Identitätsfeld darstellt, das die Datenzeile eindeutig identifiziert, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether the field is a database identity field, and whether the field can be null.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />-Klasse und gibt an, ob das Feld den Primärschlüssel für die Datenzeile darstellt, ob das Feld ein Datenbank-Identitätsfeld darstellt und ob das Feld NULL sein kann.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass das Feld im Primärschlüssel der Datenzeile ist, andernfalls <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass das Feld ein Identitätsfeld darstellt, das die Datenzeile eindeutig identifiziert, andernfalls <see langword="false" />.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass das Feld im Datenspeicher NULL sein kann, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether it is a database identity field, and whether it can be null and sets the length of the field.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />-Klasse und gibt an, ob das Feld den Primärschlüssel für die Datenzeile darstellt, ob es ein Datenbank-Identitätsfeld darstellt und ob es NULL sein kann, und legt die Länge des Felds fest.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass das Feld im Primärschlüssel der Datenzeile ist, andernfalls <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass das Feld ein Identitätsfeld darstellt, das die Datenzeile eindeutig identifiziert, andernfalls <see langword="false" />.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass das Feld im Datenspeicher NULL sein kann, andernfalls <see langword="false" />.</param>
      <param name="length" vsli:raw="The length of the field in bytes.">Die Länge des Felds in Bytes.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt;.">Ein Objekt, das mit dieser Instanz von <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz der vom <paramref name="obj" />-Parameter angegebenen Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary vsli:raw="Gets a value indicating whether a property represents an identity field in the underlying data.">Ruft einen Wert ab, der angibt, ob eine Eigenschaft ein Identitätsfeld in den zugrunde liegenden Daten darstellt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents an identity field in the underlying data; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft ein Identitätsfeld in den zugrunde liegenden Daten darstellt, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary vsli:raw="Gets a value indicating whether a property represents a field that can be null in the underlying data store.">Ruft einen Wert ab, der angibt, ob eine Eigenschaft ein Identitätsfeld darstellt, das im zugrunde liegenden Datenspeicher NULL sein kann.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents a field that can be null in the underlying data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft ein Feld darstellt, das im zugrunde liegenden Datenspeicher NULL sein kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary vsli:raw="Gets the length of the property in bytes.">Ruft die Länge der Eigenschaft in Bytes ab.</summary>
      <returns vsli:raw="The length of the property in bytes, or -1 if not set.">Die Länge der Eigenschaft in Bytes oder, falls nicht festgelegt, -1.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary vsli:raw="Gets a value indicating whether a property is in the primary key in the underlying data.">Ruft einen Wert ab, der angibt, ob eine Eigenschaft im Primärschlüssel in den zugrunde liegenden Daten ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is in the primary key of the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft im Primärschlüssel des Datenspeichers ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary vsli:raw="Identifies a data operation method exposed by a type, what type of operation the method performs, and whether the method is the default data method. This class cannot be inherited.">Identifiziert die von einem Typ verfügbar gemachte Datenvorgangsmethode und gibt an, welcher Vorgangstyp von der Methode ausgeführt wird und ob die Methode die Standarddatenmethode darstellt. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class and identifies the type of data operation the method performs.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />-Klasse und identifiziert den Typ des von der Methode ausgeführten Datenvorgangs.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">Einer der <see cref="T:System.ComponentModel.DataObjectMethodType" />-Werte, mit denen der von der Methode ausgeführte Vorgang beschrieben wird.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class, identifies the type of data operation the method performs, and identifies whether the method is the default data method that the data object exposes.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />-Klasse, identifiziert den Typ des von der Methode ausgeführten Datenvorgangs, und gibt an, ob die Methode die vom Datenobjekt verfügbar gemachte Standarddatenmethode darstellt.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">Einer der <see cref="T:System.ComponentModel.DataObjectMethodType" />-Werte, mit denen der von der Methode ausgeführte Vorgang beschrieben wird.</param>
      <param name="isDefault" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the method that the attribute is applied to is the default method of the data object for the specified &lt;paramref name=&quot;methodType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass die Methode, auf die das Attribut angewendet wird, die Standardmethode des Datenobjekts für den angegebenen <paramref name="methodType" /> darstellt, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">Ein Objekt, das mit dieser Instanz von <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz der vom <paramref name="obj" />-Parameter angegebenen Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary vsli:raw="Gets a value indicating whether this instance shares a common pattern with a specified attribute.">Ruft einen Wert ab, der angibt, ob diese Instanz ein allgemeines Muster für ein angegebenes Attribut freigibt.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">Ein Objekt, das mit dieser Instanz von <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz der vom <paramref name="obj" />-Parameter angegebenen Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the method that the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied to is the default data method exposed by the data object for a specific method type.">Ruft einen Wert ab, der angibt, ob die Methode, auf die <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> angewendet wird, die vom Datenobjekt für einen bestimmten Methodentyp verfügbar gemachte Standardwertmethode darstellt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is the default method exposed by the object for a method type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Methode die vom Objekt für einen Methodentyp verfügbar gemachte Standardmethode darstellt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; value indicating the type of data operation the method performs.">Ruft einen <see cref="T:System.ComponentModel.DataObjectMethodType" />-Wert ab, der den Typ des von der Methode ausgeführten Datenvorgangs angibt.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that identifies the type of data operation performed by the method to which the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied.">Einer der <see cref="T:System.ComponentModel.DataObjectMethodType" />-Werte, der den Typ des Datenvorgangs angibt, der von der Methode ausgeführt wird, auf die <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> angewendet wird.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary vsli:raw="Identifies the type of data operation performed by a method, as specified by the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; applied to the method.">Gibt den Typ des von einer Methode ausgeführten Datenvorgangs entsprechend dem auf die Methode angewendeten <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> an.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary vsli:raw="Indicates that a method is used for a data operation that deletes data.">Gibt an, dass eine Methode für einen Datenvorgang verwendet wird, bei dem Daten gelöscht werden.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary vsli:raw="Indicates that a method is used for a data operation that fills a &lt;see cref=&quot;T:System.Data.DataSet&quot; /&gt; object.">Gibt an, dass eine Methode für einen Datenvorgang verwendet wird, bei dem ein <see cref="T:System.Data.DataSet" />-Objekt gefüllt wird.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary vsli:raw="Indicates that a method is used for a data operation that inserts data.">Gibt an, dass eine Methode für einen Datenvorgang verwendet wird, bei dem Daten eingefügt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary vsli:raw="Indicates that a method is used for a data operation that retrieves data.">Gibt an, dass eine Methode für einen Datenvorgang verwendet wird, bei dem Daten abgerufen werden.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary vsli:raw="Indicates that a method is used for a data operation that updates data.">Gibt an, dass eine Methode für einen Datenvorgang verwendet wird, bei dem Daten aktualisiert werden.</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTime&quot; /&gt; objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von <see cref="T:System.DateTime" />-Objekten in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DateTimeConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the specified context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt vom angegebenen Quelltyp unter Verwendung des angegebenen Kontexts in eine <see cref="T:System.DateTime" />-Struktur konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Eine <see cref="T:System.Type" />-Klasse, die den Ausgangstyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt die Konvertierung ausführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Eine <see cref="T:System.Type" />-Klasse, die den Zieltyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Konvertiert den angegebenen Wert in eine <see cref="T:System.DateTime" />-Struktur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Eine optionale <see cref="T:System.Globalization.CultureInfo" />-Klasse. Erfolgt hier keine Angabe, wird die aktuelle Kultur angenommen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> ist kein gültiger Wert für den Zieltyp.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten <paramref name="value" />-Parameter darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the arguments.">Konvertiert das angegebene Wertobjekt mithilfe der Argumente in eine <see cref="T:System.DateTime" />-Struktur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Eine optionale <see cref="T:System.Globalization.CultureInfo" />-Klasse. Erfolgt hier keine Angabe, wird die aktuelle Kultur angenommen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Die <see cref="T:System.Type" />-Klasse, in die der Wert konvertiert werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten <paramref name="value" />-Parameter darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; structures to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von <see cref="T:System.DateTimeOffset" />-Strukturen in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeOffsetConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DateTimeOffsetConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether an object of the specified source type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Gibt einen Wert zurück, der angibt, ob ein Objekt des angegebenen Quelltyps in einen <see cref="T:System.DateTimeOffset" /> konvertiert werden kann.</summary>
      <param name="context" vsli:raw="The date format context.">Der Datenformatkontext.</param>
      <param name="sourceType" vsli:raw="The source type to check.">Der zu überprüfende Quelltyp.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der angegebene Typ in einen <see cref="T:System.DateTimeOffset" /> konvertiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to an object of the specified type.">Gibt einen Wert zurück, der angibt, ob ein <see cref="T:System.DateTimeOffset" /> in ein Objekt vom angegebenen Typ konvertiert werden kann.</summary>
      <param name="context" vsli:raw="The date format context.">Der Datenformatkontext.</param>
      <param name="destinationType" vsli:raw="The destination type to check.">Der zu überprüfende Zieltyp.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn ein <see cref="T:System.DateTimeOffset" /> in den angegebenen Typ konvertiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Konvertiert das angegebene Objekt in eine <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context" vsli:raw="The date format context.">Der Datenformatkontext.</param>
      <param name="culture" vsli:raw="The date culture.">Die Datumskultur.</param>
      <param name="value" vsli:raw="The object to be converted.">Das zu konvertierende Objekt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; that represents the specified object.">Ein <see cref="T:System.DateTimeOffset" />, der das angegebene Objekt darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to an object of the specified type.">Konvertiert einen <see cref="T:System.DateTimeOffset" /> in ein Objekt vom angegebenen Typ.</summary>
      <param name="context" vsli:raw="The date format context.">Der Datenformatkontext.</param>
      <param name="culture" vsli:raw="The date culture.">Die Datumskultur.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">Der zu konvertierende <see cref="T:System.DateTimeOffset" />.</param>
      <param name="destinationType" vsli:raw="The type to convert to.">Der Typ, in den konvertiert werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An object of the specified type that represents the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Ein Objekt vom angegebenen Typ, das den <see cref="T:System.DateTimeOffset" /> darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Decimal&quot; /&gt; objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von <see cref="T:System.Decimal" />-Objekten in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DecimalConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DecimalConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Eine <see cref="T:System.Type" />-Klasse, die den Zieltyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; using the arguments.">Konvertiert das angegebene Wertobjekt mithilfe der Argumente in eine <see cref="T:System.Decimal" />-Struktur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Eine optionale <see cref="T:System.Globalization.CultureInfo" />-Klasse. Erfolgt hier keine Angabe, wird die aktuelle Kultur angenommen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Die <see cref="T:System.Type" />-Klasse, in die der Wert konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary vsli:raw="Specifies the default binding property for a component. This class cannot be inherited.">Gibt die Standardbindungseigenschaft für eine Komponente an. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class.">Stellt den Standardwert für die <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />-Klasse dar.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using no parameters.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />-Klasse ohne Parameter.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using the specified property name.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />-Klasse unter Verwendung des angegebenen Eigenschaftsnamens.</summary>
      <param name="name" vsli:raw="The name of the default binding property.">Der Name der Standardeigenschaft für die Datenbindung.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">Bestimmt, ob das angegebene <see cref="T:System.Object" /> und die aktuelle <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />-Instanz gleich sind.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">Das <see cref="T:System.Object" />, das mit der aktuellen <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />-Instanz verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" />, wenn das Objekt und die aktuelle Instanz gleich sind, andernfalls <see langword="false" />, wenn sie nicht gleicht sind.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">Ruft den Namen der Standardeigenschaft für die Datenbindung für die Komponente ab, an die das <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> gebunden ist.</summary>
      <returns vsli:raw="The name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">Der Name der Standardeigenschaft für die Datenbindung für die Komponente, an die das <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> gebunden ist.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary vsli:raw="Specifies the default event for a component.">Gibt das Standardereignis für eine Komponente an.</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt den Standardwert für das <see cref="T:System.ComponentModel.DefaultEventAttribute" /> an, der <see langword="null" /> ist. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DefaultEventAttribute" />-Klasse.</summary>
      <param name="name" vsli:raw="The name of the default event for the component this attribute is bound to.">Der Name des Standardereignisses für die Komponente, an die das Attribut gebunden ist.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;.">Gibt zurück, ob der Wert des angegebenen Objekts gleich dem aktuellen <see cref="T:System.ComponentModel.DefaultEventAttribute" /> ist.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Das Objekt, dessen Wert auf Gleichheit geprüft werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Wert des angegebenen Objekts dem aktuellen entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary vsli:raw="Gets the name of the default event for the component this attribute is bound to.">Ruft den Namen des Standardereignisses für die Komponente ab, an die das Attribut gebunden ist.</summary>
      <returns vsli:raw="The name of the default event for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Der Name des Standardereignisses für die Komponente, an die das Attribut gebunden ist. Der Standardwert ist <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary vsli:raw="Specifies the default property for a component.">Gibt die Standardeigenschaft für eine Komponente an.</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt den Standardwert für das <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> an, der <see langword="null" /> ist. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />-Klasse.</summary>
      <param name="name" vsli:raw="The name of the default property for the component this attribute is bound to.">Der Name der Standardeigenschaft für die Komponente, an die dieses Attribut gebunden ist.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;.">Gibt zurück, ob der Wert des angegebenen Objekts gleich dem aktuellen <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> ist.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Das Objekt, dessen Wert auf Gleichheit geprüft werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Wert des angegebenen Objekts dem aktuellen entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default property for the component this attribute is bound to.">Ruft den Namen der Standardeigenschaft für die Komponente ab, an die dieses Attribut gebunden ist.</summary>
      <returns vsli:raw="The name of the default property for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Der Name der Standardeigenschaft für die Komponente, an die dieses Attribut gebunden ist. Der Standardwert ist <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner&quot; /&gt; event.">Stellt Daten für das <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />-Klasse.</summary>
      <param name="oldDesigner" vsli:raw="The document that is losing activation.">Das Dokument, das in den deaktivierten Zustand wechselt.</param>
      <param name="newDesigner" vsli:raw="The document that is gaining activation.">Das Dokument, das in den aktivierten Zustand wechselt.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary vsli:raw="Gets the document that is gaining activation.">Ruft das Dokument ab, das in den aktivierten Zustand wechselt.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document gaining activation.">Ein <see cref="T:System.ComponentModel.Design.IDesignerHost" />, der das Dokument darstellt, das in den aktivierten Zustand wechselt.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary vsli:raw="Gets the document that is losing activation.">Ruft das Dokument ab, das in den deaktivierten Zustand wechselt.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document losing activation.">Ein <see cref="T:System.ComponentModel.Design.IDesignerHost" />, der das Dokument darstellt, das in den deaktivierten Zustand wechselt.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged&quot; /&gt; event.">Stellt die Methode zur Behandlung des <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" />-Ereignisses dar.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary vsli:raw="The exception that is thrown when an attempt to check out a file that is checked into a source code management program is canceled or fails.">Die Ausnahme, die ausgelöst wird, wenn das Auschecken einer Datei, die in ein Quellcode-Verwaltungsprogramm eingecheckt ist, abgebrochen wird oder fehlschlägt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class that specifies that the check out was canceled. This field is read-only.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.CheckoutException" />-Klasse, die angibt, dass der Checkout abgebrochen wurde. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with no associated message or error code.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.CheckoutException" />-Klasse ohne eine zugeordnete Meldung und ohne zugeordneten Fehlercode.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class using the specified serialization data and context.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.CheckoutException" />-Klasse mit den angegebenen Serialisierungsdaten und dem angegebenen Kontext.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Die für die Deserialisierung zu verwendende <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Klasse.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Das für die Deserialisierung zu verwendende Ziel.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.CheckoutException" />-Klasse mit der angegebenen Meldung.</summary>
      <param name="message" vsli:raw="A message describing the exception.">Eine Meldung mit einer Beschreibung der Ausnahme.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified detailed description and the specified exception.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.CheckoutException" />-Klasse mit der angegebenen ausführlichen Beschreibung und der angegebenen Ausnahme.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">Eine detaillierte Beschreibung des Fehlers.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">Ein Verweis auf die innere Ausnahme, die dieser Ausnahme zugrunde liegt.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message and error code.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.CheckoutException" />-Klasse mit der angegebenen Meldung und dem angegebenen Fehlercode.</summary>
      <param name="message" vsli:raw="A message describing the exception.">Eine Meldung mit einer Beschreibung der Ausnahme.</param>
      <param name="errorCode" vsli:raw="The error code to pass.">Der zu übergebende Fehlercode.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary vsli:raw="Represents a unique command identifier that consists of a numeric command ID and a GUID menu group identifier.">Stellt einen eindeutigen Befehlsbezeichner dar, der aus einer numerischen Befehls-ID und einem GUID-Menügruppenbezeichner besteht.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; class using the specified menu group GUID and command ID number.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse unter Verwendung der angegebenen Menügruppen-GUID und Befehls-ID-Nummer.</summary>
      <param name="menuGroup" vsli:raw="The GUID of the group that this menu command belongs to.">Die GUID der Gruppe, zu der dieser Menübefehl gehört.</param>
      <param name="commandID" vsli:raw="The numeric identifier of this menu command.">Der numerische Bezeichner dieses Menübefehls.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; instances are equal.">Stellt fest, ob zwei <see cref="T:System.ComponentModel.Design.CommandID" />-Instanzen gleich sind.</summary>
      <param name="obj" vsli:raw="The object to compare.">Das zu vergleichende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is equivalent to this one; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Objekt dieser Klasse entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary vsli:raw="Serves as a hash function for a particular type.">Dient als Hashfunktion für einen bestimmten Typ.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current object.">Gibt eine <see cref="T:System.String" /> zurück, die das aktuelle Objekt darstellt.</summary>
      <returns vsli:raw="A string that contains the command ID information, both the GUID and integer identifier.">Eine Zeichenfolge mit den Befehls-ID-Informationen, d. h. die GUID und die als Bezeichner verwendete ganze Zahl.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary vsli:raw="Gets the GUID of the menu group that the menu command identified by this &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; belongs to.">Ruft die GUID der Menügruppe ab, zu der der Menübefehl gehört, der mit dieser <see cref="T:System.ComponentModel.Design.CommandID" /> bezeichnet wird.</summary>
      <returns vsli:raw="The GUID of the command group for this command.">Die GUID der Befehlsgruppe für diesen Befehl.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary vsli:raw="Gets the numeric command ID.">Ruft die numerische Befehls-ID ab.</summary>
      <returns vsli:raw="The command ID number.">Die Befehls-ID-Nummer.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event. This class cannot be inherited.">Stellt Daten für das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />-Ereignis bereit. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />-Klasse.</summary>
      <param name="component" vsli:raw="The component that was changed.">Die Komponente, die geändert wurde.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that represents the member that was changed.">Ein <see cref="T:System.ComponentModel.MemberDescriptor" />, der den geänderten Member darstellt.</param>
      <param name="oldValue" vsli:raw="The old value of the changed member.">Der alte Wert des geänderten Members.</param>
      <param name="newValue" vsli:raw="The new value of the changed member.">Der neue Wert des geänderten Members.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary vsli:raw="Gets the component that was modified.">Ruft die Komponente ab, die geändert wurde.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the component that was modified.">Ein <see cref="T:System.Object" />, das die geänderte Komponente darstellt.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary vsli:raw="Gets the member that has been changed.">Ruft den Member ab, der geändert wurde.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that indicates the member that has been changed.">Ein <see cref="T:System.ComponentModel.MemberDescriptor" />, der den Member angibt, der geändert wurde.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the new value of the changed member.">Ruft den neuen Wert des geänderten Members ab.</summary>
      <returns vsli:raw="The new value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">Der neue Wert des geänderten Members. Diese Eigenschaft kann <see langword="null" /> sein.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the old value of the changed member.">Ruft den alten Wert des geänderten Members ab.</summary>
      <returns vsli:raw="The old value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">Der alte Wert des geänderten Members. Diese Eigenschaft kann <see langword="null" /> sein.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">Stellt die Methode zur Behandlung eines <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />-Ereignisses dar.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event. This class cannot be inherited.">Stellt Daten für das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />-Ereignis bereit. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />-Klasse.</summary>
      <param name="component" vsli:raw="The component that is about to be changed.">Die Komponente, die geändert wird.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member of the component that is about to be changed.">Ein <see cref="T:System.ComponentModel.MemberDescriptor" />, der den Member der Komponente angibt, der geändert wird.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary vsli:raw="Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.">Ruft die zu ändernde Komponente ab bzw. die Komponente, die den übergeordneten Container des zu ändernden Members darstellt.</summary>
      <returns vsli:raw="The component that is about to have a member changed.">Die Komponente mit dem Member, der geändert wird.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary vsli:raw="Gets the member that is about to be changed.">Ruft den Member ab, der geändert wird.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member that is about to be changed, if known, or &lt;see langword=&quot;null&quot; /&gt; otherwise.">Ein <see cref="T:System.ComponentModel.MemberDescriptor" />, der den zu ändernden Member angibt, wenn der Member bekannt ist, oder <see langword="null" />, wenn der Member nicht bekannt ist.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Stellt die Methode zur Behandlung eines <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />-Ereignisses dar.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; event that contains the event data.">Ein <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />-Ereignis, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt; events.">Stellt Daten für das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />-Ereignis, das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />-Ereignis, das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />-Ereignis und das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />-Klasse.</summary>
      <param name="component" vsli:raw="The component that is the source of the event.">Die Komponente, die die Quelle des Ereignisses ist.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary vsli:raw="Gets the component associated with the event.">Ruft die dem Ereignis zugeordnete Komponente ab.</summary>
      <returns vsli:raw="The component associated with the event.">Die Komponente, die dem Ereignis zugeordnet ist.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt; events raised for component-level events.">Stellt die Methode dar, die für Ereignisse auf Komponentenebene das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />-Ereignis , das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />-Ereignis , das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> und das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />-Ereignis auslöst.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">Stellt Daten für das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />-Klasse.</summary>
      <param name="component" vsli:raw="The component to be renamed.">Die umzubenennende Komponente.</param>
      <param name="oldName" vsli:raw="The old name of the component.">Der frühere Name der Komponente.</param>
      <param name="newName" vsli:raw="The new name of the component.">Der neue Name der Komponente.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary vsli:raw="Gets the component that is being renamed.">Ruft die Komponente ab, die umbenannt wird.</summary>
      <returns vsli:raw="The component that is being renamed.">Die Komponente, die umbenannt wird.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary vsli:raw="Gets the name of the component after the rename event.">Ruft den Namen der Komponente nach dem Umbenennungsereignis ab.</summary>
      <returns vsli:raw="The name of the component after the rename event.">Der Name der Komponente nach dem Umbenennungsereignis.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary vsli:raw="Gets the name of the component before the rename event.">Ruft den Namen der Komponente vor dem Umbenennungsereignis ab.</summary>
      <returns vsli:raw="The previous name of the component.">Der frühere Name der Komponente.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">Stellt die Methode zur Behandlung eines <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />-Ereignisses dar.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary vsli:raw="Represents a collection of designers.">Stellt eine Auflistung von Designern dar.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified set of designers.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerCollection" />-Klasse, die den angegebenen Satz von Designern enthält.</summary>
      <param name="designers" vsli:raw="A list that contains the collection of designers to add.">Eine Liste, die die Auflistung von Designern enthält, die hinzugefügt werden sollen.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified designers.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerCollection" />-Klasse, die die angegebenen Designer enthält.</summary>
      <param name="designers" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; objects to store.">Ein Array von <see cref="T:System.ComponentModel.Design.IDesignerHost" />-Objekten, das gespeichert werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">Ruft einen neuen Enumerator für diese Auflistung ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">Eine <see cref="T:System.Collections.IEnumerator" />-Schnittstelle für die Enumeration der Auflistung.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Kopiert die Elemente der Auflistung in ein <see cref="T:System.Array" />, beginnend bei einem bestimmten <see cref="T:System.Array" />-Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Elemente ist. Für das <see cref="T:System.Array" /> muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">Ruft einen neuen Enumerator für diese Auflistung ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">Eine <see cref="T:System.Collections.IEnumerator" />-Schnittstelle für die Enumeration der Auflistung.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary vsli:raw="Gets the number of designers in the collection.">Ruft die Anzahl der Designer in der Auflistung ab.</summary>
      <returns vsli:raw="The number of designers in the collection.">Die Anzahl der Designer in der Auflistung.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the designer at the specified index.">Ruft den Designer am angegebenen Index ab.</summary>
      <param name="index" vsli:raw="The index of the designer to return.">Der Index des zurückzugebenden Designers.</param>
      <returns vsli:raw="The designer at the specified index.">Der Designer am angegebenen Index.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Ruft die Anzahl der Elemente in der Auflistung ab.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Die Anzahl der in der Auflistung enthaltenen Elemente.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ruft einen Wert ab, der angibt, ob der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ruft ein Objekt ab, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Ein Objekt, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events.">Stellt Daten für das <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" />-Ereignis und das <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />-Klasse.</summary>
      <param name="host" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">Der <see cref="T:System.ComponentModel.Design.IDesignerHost" /> des Dokuments.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary vsli:raw="Gets the host of the document.">Ruft den Host des Dokuments ab.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">Der <see cref="T:System.ComponentModel.Design.IDesignerHost" /> des Dokuments.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events that are raised when a document is created or disposed of.">Stellt die Methode dar, die das <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" />-Ereignis und das <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" />-Ereignis behandelt, die ausgelöst werden, wenn ein Dokument erstellt oder freigegeben wird.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary vsli:raw="Provides a base class for getting and setting option values for a designer.">Stellt eine Basisklasse für Abruf und Festlegung von Optionswerten für einen Designer bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerOptionService" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name and adds it to the given parent.">Erstellt eine neue <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> mit dem angegebenen Namen und fügt es dem gegebenen übergeordneten Element hinzu.</summary>
      <param name="parent" vsli:raw="The parent designer option collection. All collections have a parent except the root object collection.">Die übergeordnete Designeroptionsauflistung. Alle Auflistungen mit Ausnahme der Stammobjektauflistung verfügen über ein übergeordnetes Element.</param>
      <param name="name" vsli:raw="The name of this collection.">Der Name dieser Auflistung.</param>
      <param name="value" vsli:raw="The object providing properties for this collection. Can be &lt;see langword=&quot;null&quot; /&gt; if the collection should not provide any properties.">Das Objekt, das für diese Auflistung Eigenschaften bereitstellt. Der Wert kann <see langword="null" /> sein, wenn die Auflistung keine Eigenschaften bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="parent" /> oder <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is an empty string.">
        <paramref name="name" /> ist eine leere Zeichenfolge.</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name.">Eine neue <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />-Instanz mit dem angegebenen Namen ab.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Populates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Füllt eine <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> auf.</summary>
      <param name="options" vsli:raw="The collection to populate.">Die zu füllende Auflistung.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary vsli:raw="Shows the options dialog box for the given object.">Zeigt das Optionsdialogfeld für das gegebene Objekt an.</summary>
      <param name="options" vsli:raw="The options collection containing the object to be invoked.">Die Optionsauflistung mit dem aufzurufenden Objekt.</param>
      <param name="optionObject" vsli:raw="The actual options object.">Das eigentliche Optionsobjekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box is shown; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Dialogfeld angezeigt wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of an option defined in this package.">Ruft den Wert einer in diesem Paket definierten Option ab.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">Die Seite, an die die Option gebunden ist.</param>
      <param name="valueName" vsli:raw="The name of the option value.">Der Name des Optionswerts.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> oder <paramref name="valueName" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The value of the option named &lt;paramref name=&quot;valueName&quot; /&gt;.">Der Wert der Option mit dem Namen <paramref name="valueName" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of an option defined in this package.">Legt den Wert einer in diesem Paket definierten Option fest.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">Die Seite, an die die Option gebunden ist.</param>
      <param name="valueName" vsli:raw="The name of the option value.">Der Name des Optionswerts.</param>
      <param name="value" vsli:raw="The value of the option.">Der Wert der Option.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> oder <paramref name="valueName" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary vsli:raw="Gets the options collection for this service.">Ruft die Optionsauflistung für diesen Dienst ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; populated with available designer options.">
        <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> mit verfügbaren Designeroptionen.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary vsli:raw="Contains a collection of designer options. This class cannot be inherited.">Enthält eine Auflistung von Designeroptionen. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">Kopiert die gesamte Auflistung in ein kompatibles eindimensionales <see cref="T:System.Array" />, beginnend am angegebenen Index des Zielarrays.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the collection. The &lt;paramref name=&quot;array&quot; /&gt; must have zero-based indexing.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Elemente ist. Für das <paramref name="array" /> muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">Gibt einen <see cref="T:System.Collections.IEnumerator" /> zurück, der zum Durchlaufen dieser Auflistung verwendet werden kann.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">Ein <see cref="T:System.Collections.IEnumerator" />, der zum Durchlaufen dieser Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in a range of this collection.">Gibt den Index des ersten Vorkommens eines angegebenen Werts in einem Bereich dieser Auflistung zurück.</summary>
      <param name="value" vsli:raw="The object to locate in the collection.">Das Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index of the first occurrence of value within the entire collection, if found; otherwise, the lower bound of the collection minus 1.">Der Index des ersten Vorkommens des Werts innerhalb der gesamten Auflistung, sofern gefunden, andernfalls die untere Grenze der Auflistung -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary vsli:raw="Displays a dialog box user interface (UI) with which the user can configure the options in this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Zeigt eine Dialogfeldbenutzeroberfläche an, mit der der Benutzer die Optionen in dieser <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> konfigurieren kann.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box can be displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Dialogfeld angezeigt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Fügt der <see cref="T:System.Collections.IList" /> ein Element hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Das <see cref="T:System.Object" />, das in <see cref="T:System.Collections.IList" /> eingefügt werden soll.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Die Position, an der das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Entfernt alle Elemente aus der Auflistung.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Ermittelt, ob die Auflistung einen bestimmten Wert enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Das <see cref="T:System.Object" />, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die <see cref="T:System.Object" />-Klasse in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">Bestimmt den Index eines bestimmten Elements in der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Die <see cref="T:System.Object" />, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">Fügt ein Element am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">Die in die Auflistung einzufügende <see cref="T:System.Object" />-Klasse.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Entfernt das erste Vorkommen eines bestimmten Objekts aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">Die aus der Auflistung zu entfernende <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the collection item at the specified index.">Entfernt das Auflistungselement am angegebenen Index.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Der nullbasierte Index des zu entfernenden Elements.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary vsli:raw="Gets the number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">Ruft die Anzahl untergeordneter Optionsauflistungen ab, die diese <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> enthält.</summary>
      <returns vsli:raw="The number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">Die Anzahl untergeordneter Optionsauflistungen, die diese <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> enthält.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the child collection at the given index.">Ruft die untergeordnete Auflistung am angegebenen Index ab.</summary>
      <param name="index" vsli:raw="The zero-based index of the child collection to get.">Der nullbasierte Index der abzurufenden untergeordneten Auflistung.</param>
      <returns vsli:raw="The child collection at the specified index.">Die untergeordnete Auflistung am angegebenen Index.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary vsli:raw="Gets the child collection at the given name.">Ruft die untergeordnete Auflistung am angegebenen Namen ab.</summary>
      <param name="name" vsli:raw="The name of the child collection.">Der Name der untergeordneten Auflistung.</param>
      <returns vsli:raw="The child collection with the name specified by the &lt;paramref name=&quot;name&quot; /&gt; parameter, or &lt;see langword=&quot;null&quot; /&gt; if the name is not found.">Die untergeordnete Auflistung mit dem vom <paramref name="name" /> angegebenen Namen oder <see langword="null" />, wenn der Name nicht gefunden wird.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary vsli:raw="Gets the name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Ruft den Namen dieses <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> ab.</summary>
      <returns vsli:raw="The name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Der Name dieses <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary vsli:raw="Gets the parent collection object.">Ruft das übergeordnete Auflistungsobjekt ab.</summary>
      <returns vsli:raw="The parent collection object, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">Das übergeordnete Auflistungsobjekt oder <see langword="null" />, wenn es kein übergeordnetes Element gibt.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary vsli:raw="Gets the collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">Ruft die Auflistung von Eigenschaften dieser <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> zusammen mit all ihren untergeordneten Elementen ab.</summary>
      <returns vsli:raw="The collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">Die Auflistung von Eigenschaften dieser <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> zusammen mit all ihren untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized and, therefore, thread safe.">Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung synchronisiert und daher threadsicher ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf die Auflistung synchronisiert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ruft ein Objekt ab, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Ein Objekt, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Ruft einen Wert ab, der angibt, ob die Auflistung eine feste Größe aufweist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung eine feste Größe hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Ruft das Element am angegebenen Index ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Der nullbasierte Index des Elements, das abgerufen oder festgelegt werden soll.</param>
      <returns vsli:raw="The element at the specified index.">Das Element am angegebenen Index.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary vsli:raw="Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.">Stellt ein Verfahren zum Gruppieren einer Reihe von Entwurfszeitaktionen bereit, um die Leistung zu verbessern und das Rückgängigmachen der meisten Arten von Änderungen zu ermöglichen.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class with no description.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerTransaction" />-Klasse ohne Beschreibung.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class using the specified transaction description.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerTransaction" />-Klasse mit der angegebenen Transaktionsbeschreibung.</summary>
      <param name="description" vsli:raw="A description for this transaction.">Eine Beschreibung für diese Transaktion.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary vsli:raw="Cancels the transaction and attempts to roll back the changes made by the events of the transaction.">Bricht die Transaktion ab und versucht, einen Rollback der Änderungen durchzuführen, die von den Ereignissen der Transaktion vorgenommen wurden.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary vsli:raw="Commits this transaction.">Führt diese Transaktion durch.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; and optionally releases the managed resources.">Gibt die von <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary vsli:raw="Releases the resources associated with this object. This override commits this transaction if it was not already committed.">Gibt die diesem Objekt zugeordneten Ressourcen frei. Falls noch kein Commit für diese Transaktion ausgeführt wurde, wird er durch diese Überschreibung ausgeführt.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Cancel&quot; /&gt; event.">Löst das <see langword="Cancel" />-Ereignis aus.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary vsli:raw="Performs the actual work of committing a transaction.">Führt den eigentlichen Commit einer Transaktion aus.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;.">Gibt alle vom <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> verwendeten Ressourcen frei.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary vsli:raw="Gets a value indicating whether the transaction was canceled.">Ruft einen Wert ab, der angibt, ob die Transaktion abgebrochen wurde.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was canceled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Transaktion abgebrochen wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary vsli:raw="Gets a value indicating whether the transaction was committed.">Ruft einen Wert ab, der angibt, ob die Transaktion durchgeführt wurde.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was committed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Transaktion durchgeführt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary vsli:raw="Gets a description for the transaction.">Ruft eine Beschreibung für diese Transaktion ab.</summary>
      <returns vsli:raw="A description for the transaction.">Eine Beschreibung für die Transaktion.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events.">Stellt Daten für das <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />-Ereignis und das <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class, using the specified value that indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />-Klasse unter Verwendung des angegebenen Werts, der angibt, ob der Designer eine <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />-Methode für die Transaktion aufgerufen hat.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">Ein Wert, der angibt, ob die Transaktion durchgeführt wurde.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />-Klasse.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">Ein Wert, der angibt, ob die Transaktion durchgeführt wurde.</param>
      <param name="lastTransaction" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn es sich um die letzte zu schließende Transaktion handelt, andernfalls <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary vsli:raw="Gets a value indicating whether this is the last transaction to close.">Ruft einen Wert ab, der angibt, ob dies die letzte zu schließende Transaktion ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn es sich um die letzte zu schließende Transaktion handelt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary vsli:raw="Indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">Gibt an, ob der Designer eine <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />-Methode für die Transaktion aufgerufen hat.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Designer eine <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />-Methode für die Transaktion aufgerufen hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events of a designer.">Stellt die Methode dar, die das <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />-Ereignis und das <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />-Ereignis eines Designers behandelt.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary vsli:raw="Represents a verb that can be invoked from a designer.">Stellt ein Verb dar, das aus einem Designer aufgerufen werden kann.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerVerb" />-Klasse.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">Der Text des Menübefehls, der für Benutzer angezeigt wird.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">Der Ereignishandler, der die Aktionen des Verbs ausführt.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerVerb" />-Klasse.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">Der Text des Menübefehls, der für Benutzer angezeigt wird.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">Der Ereignishandler, der die Aktionen des Verbs ausführt.</param>
      <param name="startCommandID" vsli:raw="The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.">Die Startbefehls-ID dieses Verbs. In der Standardeinstellung reserviert die Designerarchitektur einen Bereich für Befehls-IDs von Verben. Dies kann durch Angabe einer benutzerdefinierten Befehls-ID überschrieben werden.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary vsli:raw="Overrides &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt;.">Überschreibt <see cref="M:System.Object.ToString" />.</summary>
      <returns vsli:raw="The verb's text, or an empty string (&quot;&quot;) if the text field is empty.">Der Text des Verbs oder eine leere Zeichenfolge (""), wenn das Textfeld leer ist.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary vsli:raw="Gets or sets the description of the menu item for the verb.">Ruft die Beschreibung des Menüelements für das Verb ab oder legt diese fest.</summary>
      <returns vsli:raw="A string describing the menu item.">Eine Zeichenfolge, die das Menüelement beschreibt.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary vsli:raw="Gets the text description for the verb command on the menu.">Ruft die Textbeschreibung für den Verbbefehl im Menü ab.</summary>
      <returns vsli:raw="A description for the verb command.">Eine Beschreibung für den Verbbefehl.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.ComponentModel.Design.DesignerVerb" />-Objekten dar.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class using the specified array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />-Klasse unter Verwendung des angegebenen Arrays von <see cref="T:System.ComponentModel.Design.DesignerVerb" />-Objekten.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array that indicates the verbs to contain within the collection.">Ein <see cref="T:System.ComponentModel.Design.DesignerVerb" />-Array, das die Verben angibt, die in der Auflistung enthalten sein sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to the collection.">Fügt der Auflistung den angegebenen <see cref="T:System.ComponentModel.Design.DesignerVerb" /> hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add to the collection.">Der der Auflistung hinzuzufügende <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
      <returns vsli:raw="The index in the collection at which the verb was added.">Der Index in der Auflistung, an dem das Verb hinzugefügt wurde.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Adds the specified set of designer verbs to the collection.">Fügt den angegebenen Satz von Designerverben der Auflistung hinzu.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects to add to the collection.">Ein Array von <see cref="T:System.ComponentModel.Design.DesignerVerb" />-Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary vsli:raw="Adds the specified collection of designer verbs to the collection.">Fügt die angegebene Auflistung von Designerverben der Auflistung hinzu.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; to add to the collection.">Eine der Auflistung hinzuzufügende <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets a value indicating whether the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; exists in the collection.">Ruft einen Wert ab, der angibt, ob das angegebene <see cref="T:System.ComponentModel.Design.DesignerVerb" /> in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to search for in the collection.">Das <see cref="T:System.ComponentModel.Design.DesignerVerb" />, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object exists in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn angegebene Objekt in der Auflistung vorhanden ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary vsli:raw="Copies the collection members to the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array beginning at the specified destination index.">Kopiert die Auflistungsmember in das angegebene <see cref="T:System.ComponentModel.Design.DesignerVerb" />-Array, beginnend am angegebenen Zielindex.</summary>
      <param name="array" vsli:raw="The array to copy collection members to.">Das Array, in das Auflistungsmember kopiert werden sollen.</param>
      <param name="index" vsli:raw="The destination index to begin copying to.">Das Zielindex, an dem der Kopiervorgang begonnen werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">Ruft den Index der angegebenen <see cref="T:System.ComponentModel.Design.DesignerVerb" /> ab.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; whose index to get in the collection.">Das <see cref="T:System.ComponentModel.Design.DesignerVerb" />, dessen Index in der Auflistung abgerufen werden soll.</param>
      <returns vsli:raw="The index of the specified object if it is found in the list; otherwise, -1.">Der Index des angegeben Objekts, wenn es in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">Fügt das angegebene <see cref="T:System.ComponentModel.Design.DesignerVerb" /> am angegebenen Index ein.</summary>
      <param name="index" vsli:raw="The index in the collection at which to insert the verb.">Der Index in der Auflistung, an dem das Verb eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to insert in the collection.">Das in der Auflistung einzufügende <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>Löst das <see langword="Clear" />-Ereignis aus.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>Löst das <see langword="Insert" />-Ereignis aus.</summary>
      <param name="index">Der Index, an dem ein Element eingefügt werden soll.</param>
      <param name="value">Das einzufügende Objekt.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>Löst das <see langword="Remove" />-Ereignis aus.</summary>
      <param name="index">Der Index, an dem das Element entfernt werden soll.</param>
      <param name="value">Das zu entfernende Objekt.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Löst das <see langword="Set" />-Ereignis aus.</summary>
      <param name="index">Der Index, an dem das Element festgelegt werden soll.</param>
      <param name="oldValue">Das alte Objekt.</param>
      <param name="newValue">Das neue Objekt.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Validate&quot; /&gt; event.">Löst das <see langword="Validate" />-Ereignis aus.</summary>
      <param name="value" vsli:raw="The object to validate.">Das Objekt, dessen Gültigkeit überprüft werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; from the collection.">Entfernt den angegebenen <see cref="T:System.ComponentModel.Design.DesignerVerb" /> aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove from the collection.">Die aus der Auflistung zu entfernende <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">Ruft die <see cref="T:System.ComponentModel.Design.DesignerVerb" />-Klasse am angegebenen Index ab oder legt diese fest.</summary>
      <param name="index" vsli:raw="The index at which to get or set the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">Der Index, an dem das <see cref="T:System.ComponentModel.Design.DesignerVerb" /> abgerufen oder festgelegt werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at each valid index in the collection.">Ein <see cref="T:System.ComponentModel.Design.DesignerVerb" /> an jedem gültigen Index in der Auflistung.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary vsli:raw="Represents a design-time license context that can support a license provider at design time.">Stellt einen Entwurfszeit-Lizenzkontext für die Unterstützung eines Lizenzgebers zur Entwurfszeit dar.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="Gets a saved license key.">Ruft einen gespeicherten Lizenzschlüssel ab.</summary>
      <param name="type" vsli:raw="The type of the license key.">Der Typ des Lizenzschlüssels.</param>
      <param name="resourceAssembly" vsli:raw="The assembly to get the key from.">Die Assembly, von der der Schlüssel abzurufen ist.</param>
      <returns vsli:raw="The saved license key that matches the specified type.">Der gespeicherte Lizenzschlüssel, der mit dem angegebenen Typ übereinstimmt.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="Sets a saved license key.">Legt einen gespeicherten Lizenzschlüssel fest.</summary>
      <param name="type" vsli:raw="The type of the license key.">Der Typ des Lizenzschlüssels.</param>
      <param name="key" vsli:raw="The license key.">Der Lizenzschlüssel.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary vsli:raw="Gets the license usage mode.">Ruft den Modus der Lizenzverwendung ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; indicating the licensing mode for the context.">Eine <see cref="T:System.ComponentModel.LicenseUsageMode" />-Enumeration, die den Lizenzmodus des Kontexts angibt.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary vsli:raw="Provides support for design-time license context serialization.">Ermöglicht eine Unterstützung für die Serialisierung des Entwurfszeit-Lizenzkontexts.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary vsli:raw="Serializes the licenses within the specified design-time license context using the specified key and output stream.">Serialisiert die Lizenzen innerhalb des angegebenen Entwurfszeit-Lizenzkontexts mithilfe des angegebenen Schlüssels und Ausgabestreams.</summary>
      <param name="o" vsli:raw="The stream to output to.">Der Stream für die Ausgabe.</param>
      <param name="cryptoKey" vsli:raw="The key to use for encryption.">Der bei der Verschlüsselung zu verwendende Schlüssel.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; indicating the license context.">Ein <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />, der den Lizenzkontext angibt.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary vsli:raw="Defines identifiers that indicate information about the context in which a request for Help information originated.">Definiert Bezeichner, die Informationen über den Kontext liefern, aus dem eine Hilfeanforderung stammt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary vsli:raw="A general context.">Ein allgemeiner Kontext.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary vsli:raw="A selection.">Eine Auswahl.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary vsli:raw="A tool window selection.">Eine Auswahl in einem Toolfenster.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary vsli:raw="A window.">Ein Fenster.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary vsli:raw="Specifies the context keyword for a class or member. This class cannot be inherited.">Gibt das Kontextschlüsselwort für eine Klasse oder ein Element an. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;. This field is read-only.">Stellt den Standardwert für <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> dar. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />-Klasse.</summary>
      <param name="keyword" vsli:raw="The Help keyword value.">Der Wert des Hilfeschlüsselworts.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyword&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyword" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class from the given type.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />-Klasse für den angegebenen Typ.</summary>
      <param name="t" vsli:raw="The type from which the Help keyword will be taken.">Der Typ, von dem das Hilfeschlüsselwort übernommen wird.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; instances are equal.">Stellt fest, ob zwei <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />-Instanzen gleich sind.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">Das <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />, das mit dem aktuellen <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> gleich der aktuellen <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines whether the Help keyword is &lt;see langword=&quot;null&quot; /&gt;.">Bestimmt, ob das Hilfeschlüsselwort <see langword="null" /> lautet.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the Help keyword is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Hilfeschlüsselwort <see langword="null" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary vsli:raw="Gets the Help keyword supplied by this attribute.">Ruft das von diesem Attribut angegebene Hilfeschlüsselwort ab.</summary>
      <returns vsli:raw="The Help keyword supplied by this attribute.">Das von diesem Attribut angegebene Hilfeschlüsselwort.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary vsli:raw="Defines identifiers that indicate the type of a Help keyword.">Definiert Bezeichner, die den Typ eines Hilfestichwortes angeben.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary vsli:raw="A keyword that F1 was pressed to request help about.">Ein Schlüsselwort, für das durch Drücken von F1 Hilfe angefordert wurde.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary vsli:raw="A filter keyword.">Ein Filterschlüsselwort.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary vsli:raw="A general keyword.">Ein allgemeines Schlüsselwort.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary vsli:raw="Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; or &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Bietet eine Schnittstelle zum Hinzufügen und Entfernen von Handlern für Ereignisse, die Komponenten hinzufügen, ändern, entfernen oder umbenennen, sowie Methoden zum Auslösen eines <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />-Ereignisses oder eines <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />-Ereignisses.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary vsli:raw="Occurs when a component has been added.">Tritt ein, wenn eine Komponente hinzugefügt wurde.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary vsli:raw="Occurs when a component is in the process of being added.">Tritt während des Hinzufügens einer Komponente ein.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary vsli:raw="Occurs when a component has been changed.">Tritt ein, wenn eine Komponente geändert wurde.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary vsli:raw="Occurs when a component is in the process of being changed.">Tritt während der Änderung einer Komponente ein.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary vsli:raw="Occurs when a component has been removed.">Tritt ein, wenn eine Komponente entfernt wurde.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary vsli:raw="Occurs when a component is in the process of being removed.">Tritt während des Entfernens einer Komponente ein.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary vsli:raw="Occurs when a component is renamed.">Tritt beim Umbenennen einer Komponente ein.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Announces to the component change service that a particular component has changed.">Teilt dem Komponentenänderungsdienst mit, dass eine bestimmte Komponente geändert wurde.</summary>
      <param name="component" vsli:raw="The component that has changed.">Die Komponente, die geändert wurde.</param>
      <param name="member" vsli:raw="The member that has changed. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">Der Member, der geändert wurde. Der Wert ist <see langword="null" />, wenn sich die Änderung nicht auf einen einzelnen Member bezieht.</param>
      <param name="oldValue" vsli:raw="The old value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">Der alte Wert des Members. Dieser ist nur gültig, wenn der Member nicht <see langword="null" /> ist.</param>
      <param name="newValue" vsli:raw="The new value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">Der neue Wert des Members. Dieser ist nur gültig, wenn der Member nicht <see langword="null" /> ist.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Announces to the component change service that a particular component is changing.">Teilt dem Komponentenänderungsdienst mit, dass eine bestimmte Komponente gerade geändert wird.</summary>
      <param name="component" vsli:raw="The component that is about to change.">Die Komponente, die gerade geändert wird.</param>
      <param name="member" vsli:raw="The member that is changing. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">Der Member, der gerade geändert wird. Der Wert ist <see langword="null" />, wenn sich die Änderung nicht auf einen einzelnen Member bezieht.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary vsli:raw="Enables enumeration of components at design time.">Ermöglicht die Enumeration von Komponenten zur Entwurfszeit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary vsli:raw="Gets the list of available component types.">Ruft die Liste der verfügbaren Komponententypen ab.</summary>
      <param name="designerHost" vsli:raw="The designer host providing design-time services. Can be &lt;see langword=&quot;null&quot; /&gt;.">Der Designerhost, der Entwurfszeitdienste bereitstellt. Kann <see langword="null" /> sein.</param>
      <param name="baseType" vsli:raw="The base type specifying the components to retrieve. Can be &lt;see langword=&quot;null&quot; /&gt;.">Der Basistyp, der die abzurufenden Komponenten angibt. Kann <see langword="null" /> sein.</param>
      <returns vsli:raw="The list of available component types.">Die Liste der verfügbaren Komponententypen.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary vsli:raw="Provides a set of recommended default values during component creation.">Stellt während der Komponentenerstellung einen Satz empfohlener Standardwerte bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Restores an instance of a component to its default state.">Stellt eine Instanz einer Komponente im Standardzustand wieder her.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to reset the component's state.">Ein Wörterbuch der Standardeigenschaftswerte in Form von Name-Wert-Paaren, mit denen der Zustand der Komponente zurückgesetzt wird.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Initializes a new component using a set of recommended values.">Initialisiert mithilfe eines Satzes empfohlener Werte eine neue Komponente.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to initialize the component's state.">Ein Wörterbuch der Standardeigenschaftswerte in Form von Name-Wert-Paaren, mit denen der Zustand der Komponente initialisiert wird.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary vsli:raw="Provides the basic framework for building a custom designer.">Stellt das grundlegende Framework für das Erstellen eines benutzerdefinierten Designers bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary vsli:raw="Performs the default action for this designer.">Führt die Standardaktion für diesen Designer durch.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes the designer with the specified component.">Initialisiert den Designer mit der angegebenen Komponente.</summary>
      <param name="component" vsli:raw="The component to associate with this designer.">Die Komponente, die diesem Designer zugeordnet werden soll.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary vsli:raw="Gets the base component that this designer is designing.">Ruft die von diesem Designer entworfene Basiskomponente ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; indicating the base component that this designer is designing.">Eine <see cref="T:System.ComponentModel.IComponent" />, die die von diesem Designer entworfene Basiskomponente angibt.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary vsli:raw="Gets a collection of the design-time verbs supported by the designer.">Ruft eine Auflistung der Entwurfszeitverben ab, die vom Designer unterstützt werden.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the verbs supported by the designer, or &lt;see langword=&quot;null&quot; /&gt; if the component has no verbs.">Eine <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> mit den Verben, die vom Designer unterstützt werden, oder <see langword="null" />, wenn die Komponente keine Verben besitzt.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary vsli:raw="Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.">Stellt Ereignisbenachrichtungen bereit, wenn Stammdesigner hinzugefügt und entfernt werden und wenn eine ausgewählte Komponente oder der aktuelle Stammdesigner geändert werden.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary vsli:raw="Occurs when the current root designer changes.">Tritt ein, wenn sich der aktuelle Stammdesigner ändert.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary vsli:raw="Occurs when a root designer is created.">Tritt beim Erstellen eines Stammdesigners ein.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary vsli:raw="Occurs when a root designer for a document is disposed.">Tritt ein, wenn ein Stammdesigner für ein Dokument freigegeben wird.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary vsli:raw="Occurs when the current design-view selection changes.">Tritt ein, wenn die aktuelle Auswahl für die Entwurfsansicht geändert wird.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary vsli:raw="Gets the root designer for the currently active document.">Ruft den Stammdesigner für das aktuell aktive Dokument ab.</summary>
      <returns vsli:raw="The currently active document, or &lt;see langword=&quot;null&quot; /&gt; if there is no active document.">Das gegenwärtig aktive Dokument oder <see langword="null" />, wenn kein aktives Dokument vorhanden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary vsli:raw="Gets a collection of root designers for design documents that are currently active in the development environment.">Ruft eine Auflistung von Stammdesignern für Entwurfsdokumente ab, die in der Entwicklungsumgebung zur Zeit aktiv sind.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; containing the root designers that have been created and not yet disposed.">Eine <see cref="T:System.ComponentModel.Design.DesignerCollection" />, die die Stammdesigner enthält, die erstellt und noch nicht freigegeben wurden.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary vsli:raw="Provides an interface that enables a designer to access and filter the dictionaries of a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.">Stellt eine Schnittstelle bereit, die einem Designer den Zugriff auf und das Filtern von Wörterbüchern eines <see cref="T:System.ComponentModel.TypeDescriptor" /> ermöglicht, der Eigenschafts-, Attribut- und Ereignisdeskriptoren enthält, die ein Komponenten-Designer für die Entwurfszeitumgebung verfügbar machen kann.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Ermöglicht es einem Designer, beim Überschreiben in einer abgeleiteten Klasse Elemente in der über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Attributgruppe zu ändern oder zu entfernen.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">Die <see cref="T:System.Attribute" />-Objekte für die Klasse der Komponente. Die Schlüssel im Attributwörterbuch sind die <see cref="P:System.Attribute.TypeId" />-Werte der Attribute.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Ermöglicht einem Designer, beim Überschreiben in einer abgeleiteten Klasse Elemente in der über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Menge von Ereignissen zu ändern oder daraus entfernen.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">Die <see cref="T:System.ComponentModel.EventDescriptor" />-Objekte, die die Ereignisse der Klasse der Komponente darstellen. Die Schlüssel im Ereigniswörterbuch sind Ereignisnamen.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Ermöglicht einem Designer, beim Überschreiben in einer abgeleiteten Klasse Elemente in der über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Menge von Eigenschaften zu ändern oder daraus entfernen.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">Die <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte, die die Eigenschaften der Klasse der Komponente darstellen. Die Schlüssel im Eigenschaftenwörterbuch sind Eigenschaftennamen.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Ermöglicht es einem Designer, beim Überschreiben in einer abgeleiteten Klasse den über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Attributen Elemente hinzuzufügen.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">Die <see cref="T:System.Attribute" />-Objekte für die Klasse der Komponente. Die Schlüssel im Attributwörterbuch sind die <see cref="P:System.Attribute.TypeId" />-Werte der Attribute.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Ermöglicht es einem Designer, beim Überschreiben in einer abgeleiteten Klasse der über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Gruppe von Ereignissen Elemente hinzuzufügen.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">Die <see cref="T:System.ComponentModel.EventDescriptor" />-Objekte, die die Ereignisse der Klasse der Komponente darstellen. Die Schlüssel im Ereigniswörterbuch sind Ereignisnamen.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Ermöglicht es einem Designer, beim Überschreiben in einer abgeleiteten Klasse der über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Gruppe von Eigenschaften Elemente hinzuzufügen.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">Die <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte, die die Eigenschaften der Klasse der Komponente darstellen. Die Schlüssel im Eigenschaftenwörterbuch sind Eigenschaftennamen.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary vsli:raw="Provides an interface for managing designer transactions and components.">Stellt eine Schnittstelle zum Verwalten von Designertransaktionen und Komponenten bereit.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary vsli:raw="Occurs when this designer is activated.">Tritt beim Aktivieren dieses Designers ein.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary vsli:raw="Occurs when this designer is deactivated.">Tritt beim Deaktivieren dieses Designers ein.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary vsli:raw="Occurs when this designer completes loading its document.">Tritt ein, wenn dieser Designer sein Dokument lädt.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; event.">Fügt einen Ereignishandler für das <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />-Ereignis hinzu.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; event.">Fügt einen Ereignishandler für das <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />-Ereignis hinzu.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpened&quot; /&gt; event.">Fügt einen Ereignishandler für das <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" />-Ereignis hinzu.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpening&quot; /&gt; event.">Fügt einen Ereignishandler für das <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" />-Ereignis hinzu.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary vsli:raw="Activates the designer that this host is hosting.">Aktiviert den Designer auf diesem Host.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary vsli:raw="Creates a component of the specified type and adds it to the design document.">Erstellt eine Komponente des angegebenen Typs und fügt diese dem Entwurfsdokument hinzu.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">Der Typ der zu erstellenden Komponente.</param>
      <returns vsli:raw="The newly created component.">Die neu erstellte Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary vsli:raw="Creates a component of the specified type and name, and adds it to the design document.">Erstellt eine Komponente des angegebenen Typs und Namens und fügt diese dem Entwurfsdokument hinzu.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">Der Typ der zu erstellenden Komponente.</param>
      <param name="name" vsli:raw="The name for the component.">Der Name für die Komponente.</param>
      <returns vsli:raw="The newly created component.">Die neu erstellte Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality.">Erstellt eine <see cref="T:System.ComponentModel.Design.DesignerTransaction" />, die Ereignissequenzen kapseln kann, um dadurch die Leistung zu erhöhen und die Unterstützungsfunktionen von Aktionen zum Rückgängigmachen und Wiederherstellen zu aktivieren.</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you complete the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">Eine neue Instanz von <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Nach Abschluss aller Transaktionsschritte müssen Sie für dieses Objekt <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> aufrufen.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality, using the specified transaction description.">Erstellt eine <see cref="T:System.ComponentModel.Design.DesignerTransaction" />, die Ereignissequenzen unter Verwendung der angegebenen Transaktionsbeschreibung kapseln kann, um die Leistung zu erhöhen und um die Unterstützungsfunktionen für Aktionen zum Rückgängigmachen und Wiederherstellen zu aktivieren.</summary>
      <param name="description" vsli:raw="A title or description for the newly created transaction.">Ein Titel oder eine Beschreibung für die neu erstellte Transaktion.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you have completed the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">Ein neuer <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Nach Abschluss aller Transaktionsschritte müssen Sie für dieses Objekt <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> aufrufen.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary vsli:raw="Destroys the specified component and removes it from the designer container.">Zerstört die angegebene Komponente und entfernt sie aus dem Designercontainer.</summary>
      <param name="component" vsli:raw="The component to destroy.">Die Komponente, die zerstört werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the designer instance that contains the specified component.">Ruft die Designerinstanz ab, die die angegebene Komponente enthält.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to retrieve the designer for.">Die <see cref="T:System.ComponentModel.IComponent" />, für die der Designer abgerufen werden soll.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if there is no designer for the specified component.">Ein <see cref="T:System.ComponentModel.Design.IDesigner" /> oder <see langword="null" />, wenn für die angegebene Komponente kein Designer vorhanden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary vsli:raw="Gets an instance of the specified, fully qualified type name.">Ruft eine Instanz des angegebenen voll gekennzeichneten Typnamens ab.</summary>
      <param name="typeName" vsli:raw="The name of the type to load.">Der Name des zu ladenden Typs.</param>
      <returns vsli:raw="The type object for the specified type name, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be found.">Das Typobjekt für den angegebenen Typnamen oder <see langword="null" />, wenn der Typ nicht gefunden werden kann.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary vsli:raw="Gets the container for this designer host.">Ruft den Container für diesen Designerhost ab.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; for this host.">Der <see cref="T:System.ComponentModel.IContainer" /> für diesen Host.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently in a transaction.">Ruft einen Wert ab, der angibt, ob sich der Designerhost gegenwärtig in einer Transaktion befindet.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn gegenwärtig eine Transaktion ausgeführt wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently loading the document.">Ruft einen Wert ab, der angibt, ob der Designerhost gegenwärtig das Dokument lädt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer host is currently loading the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Designerhost gegenwärtig das Dokument lädt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary vsli:raw="Gets the instance of the base class used as the root component for the current design.">Ruft die Instanz der Basisklasse ab, die als Stammkomponente für den aktuellen Entwurf verwendet wird.</summary>
      <returns vsli:raw="The instance of the root component class.">Die Instanz der Stammkomponentenklasse.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary vsli:raw="Gets the fully qualified name of the class being designed.">Ruft den voll gekennzeichneten Namen der Klasse ab, die entworfen wird.</summary>
      <returns vsli:raw="The fully qualified name of the base component class.">Der voll gekennzeichnete Name der Basiskomponentenklasse.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary vsli:raw="Gets the description of the current transaction.">Ruft die Beschreibung der aktuellen Transaktion ab.</summary>
      <returns vsli:raw="A description of the current transaction.">Eine Beschreibung der aktuellen Transaktion.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary vsli:raw="Specifies methods for the designer host to report on the state of transactions.">Gibt Methoden an, mit denen der Designerhost den Zustand von Transaktionen melden kann.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is closing a transaction.">Ruft einen Wert ab, der angibt, ob der Designerhost gegenwärtig eine Transaktion beendet.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is closing a transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Designer gegenwärtig eine Transaktion beendet, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary vsli:raw="Provides access to the designer options located on the Tools menu under the Options command in the Visual Studio development environment.">Ermöglicht den Zugriff auf die Designeroptionen, die sich in der Visual Studio-Entwicklungsumgebung im Menü Extras unter dem Befehl Optionen befinden.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of the specified Windows Forms Designer option.">Ruft den Wert der angegebenen Windows Forms-Designer-Option ab.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">Der Name der Seite, die die Option definiert.</param>
      <param name="valueName" vsli:raw="The name of the option property.">Der Name der Optionseigenschaft.</param>
      <returns vsli:raw="The value of the specified option.">Der Wert der angegebenen Option.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of the specified Windows Forms Designer option.">Legt den Wert der angegebenen Windows Forms-Designer-Option fest.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">Der Name der Seite, die die Option definiert.</param>
      <param name="valueName" vsli:raw="The name of the option property.">Der Name der Optionseigenschaft.</param>
      <param name="value" vsli:raw="The new value.">Der neue Wert.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary vsli:raw="Provides a basic, component site-specific, key-value pair dictionary through a service that a designer can use to store user-defined data.">Stellt über einen Dienst, mit dem ein Designer benutzerdefinierte Daten speichern kann, ein einfaches, komponentensitespezifisches Wörterbuch mit Schlüssel-Wert-Paaren bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary vsli:raw="Gets the key corresponding to the specified value.">Ruft den Schlüssel ab, der dem angegebenen Wert entspricht.</summary>
      <param name="value" vsli:raw="The value to look up in the dictionary.">Der Wert, nach dem im Wörterbuch gesucht werden soll.</param>
      <returns vsli:raw="The associated key, or &lt;see langword=&quot;null&quot; /&gt; if no key exists.">Der zugeordnete Schlüssel oder <see langword="null" />, wenn kein Schlüssel vorhanden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary vsli:raw="Gets the value corresponding to the specified key.">Ruft den Wert ab, der dem angegebenen Schlüssel entspricht.</summary>
      <param name="key" vsli:raw="The key to look up the value for.">Der Schlüssel, für den der Wert gesucht werden soll.</param>
      <returns vsli:raw="The associated value, or &lt;see langword=&quot;null&quot; /&gt; if no value exists.">Der zugeordnete Wert oder <see langword="null" />, wenn kein Wert vorhanden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets the specified key-value pair.">Legt das angegebene Schlüssel-Wert-Paar fest.</summary>
      <param name="key" vsli:raw="An object to use as the key to associate the value with.">Ein Objekt, das als Schlüssel verwendet und dem der Wert zugeordnet werden soll.</param>
      <param name="value" vsli:raw="The value to store.">Der zu speichernde Wert.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary vsli:raw="Provides a service for registering event handlers for component events.">Stellt einen Dienst zum Registrieren von Ereignishandlern für Komponentenereignisse bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Creates a unique name for an event-handler method for the specified component and event.">Erstellt einen eindeutigen Namen einer Ereignishandlermethode für die angegebene Komponente und das angegebene Ereignis.</summary>
      <param name="component" vsli:raw="The component instance the event is connected to.">Die Komponenteninstanz, mit dem das Ereignis verbunden ist.</param>
      <param name="e" vsli:raw="The event to create a name for.">Das Ereignis, für das ein Name erstellt werden soll.</param>
      <returns vsli:raw="The recommended name for the event-handler method for this event.">Der empfohlene Name der Ereignishandlermethode für dieses Ereignis.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Gets a collection of event-handler methods that have a method signature compatible with the specified event.">Ruft eine Auflistung von Ereignishandlermethoden ab, die über eine mit dem angegebenen Ereignis kompatible Methodensignatur verfügen.</summary>
      <param name="e" vsli:raw="The event to get the compatible event-handler methods for.">Das Ereignis, für das die kompatiblen Ereignishandlermethoden abgerufen werden sollen.</param>
      <returns vsli:raw="A collection of strings.">Eine Auflistung von Zeichenfolgen.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the specified property descriptor represents, if it represents an event.">Ruft einen <see cref="T:System.ComponentModel.EventDescriptor" /> für das Ereignis ab, das vom angegebenen Eigenschaftenbezeichner dargestellt wird, sofern dieser ein Ereignis darstellt.</summary>
      <param name="property" vsli:raw="The property that represents an event.">Die Eigenschaft, die ein Ereignis darstellt.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the property represents, or &lt;see langword=&quot;null&quot; /&gt; if the property does not represent an event.">Ein <see cref="T:System.ComponentModel.EventDescriptor" /> für das Ereignis, das die Eigenschaft darstellt, oder <see langword="null" />, wenn die Eigenschaft kein Ereignis darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary vsli:raw="Converts a set of event descriptors to a set of property descriptors.">Konvertiert eine Gruppe von Ereignisdeskriptoren in eine Gruppe von Eigenschaftenbezeichnern.</summary>
      <param name="events" vsli:raw="The events to convert to properties.">Die Ereignisse, die zu Eigenschaften konvertiert werden sollen.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that describe the event set.">Ein Array von <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekten, die die Ereignisgruppe beschreiben.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Converts a single event descriptor to a property descriptor.">Konvertiert einen einzelnen Ereignisdeskriptor in einen Eigenschaftenbezeichner.</summary>
      <param name="e" vsli:raw="The event to convert.">Das zu konvertierende Ereignis.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the event.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" />, der das Ereignis beschreibt.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary vsli:raw="Displays the user code for the designer.">Zeigt den Benutzercode für den Designer an.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Code angezeigt wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Displays the user code for the specified event.">Zeigt den Benutzercode für das angegebene Ereignis an.</summary>
      <param name="component" vsli:raw="The component that the event is connected to.">Die Komponente, mit der das Ereignis verbunden ist.</param>
      <param name="e" vsli:raw="The event to display.">Das anzuzeigende Ereignis.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Code angezeigt wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary vsli:raw="Displays the user code for the designer at the specified line.">Zeigt den Benutzercode für den Designer in der angegebenen Zeile an.</summary>
      <param name="lineNumber" vsli:raw="The line number to place the caret on.">Die Nummer der Zeile, in die die Einfügemarke gesetzt werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Code angezeigt wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary vsli:raw="Provides an interface that can list extender providers.">Stellt eine Schnittstelle bereit, die Extenderanbieter auflisten kann.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary vsli:raw="Gets the set of extender providers for the component.">Ruft die Gruppe von Extenderanbietern für die Komponente ab.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that lists the active extender providers. If there are no providers, an empty array is returned.">Ein Array vom Typ <see cref="T:System.ComponentModel.IExtenderProvider" />, das die aktiven Extenderanbieter auflistet. Wenn keine Extenderanbieter vorhanden sind, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary vsli:raw="Provides an interface for adding and removing extender providers at design time.">Stellt eine Schnittstelle zum Hinzufügen und Entfernen von Extenderanbietern zur Entwurfszeit bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Adds the specified extender provider.">Fügt den angegebenen Extenderanbieter hinzu.</summary>
      <param name="provider" vsli:raw="The extender provider to add.">Der hinzuzufügende Extenderanbieter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Removes the specified extender provider.">Entfernt den angegebenen Extenderanbieter.</summary>
      <param name="provider" vsli:raw="The extender provider to remove.">Der zu entfernende Extenderanbieter.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary vsli:raw="Provides methods for showing Help topics and adding and removing Help keywords at design time.">Stellt Methoden zum Anzeigen von Hilfethemen sowie zum Hinzufügen und Entfernen von Hilfeschlüsselwörtern zur Entwurfszeit bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary vsli:raw="Adds a context attribute to the document.">Fügt dem Dokument ein Kontextattribut hinzu.</summary>
      <param name="name" vsli:raw="The name of the attribute to add.">Der Name des hinzuzufügenden Attributs.</param>
      <param name="value" vsli:raw="The value of the attribute.">Der Wert des Attributs.</param>
      <param name="keywordType" vsli:raw="The type of the keyword, from the enumeration &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordType&quot; /&gt;.">Der Typ des Schlüsselwortes aus der <see cref="T:System.ComponentModel.Design.HelpKeywordType" />-Enumeration.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary vsli:raw="Removes all existing context attributes from the document.">Entfernt alle vorhandenen Kontextattribute aus dem Dokument.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary vsli:raw="Creates a local &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to manage subcontexts.">Erstellt einen lokalen <see cref="T:System.ComponentModel.Design.IHelpService" /> zum Verwalten von untergeordneten Kontexten.</summary>
      <param name="contextType" vsli:raw="The priority type of the subcontext to add.">Der Prioritätstyp des hinzuzufügenden untergeordneten Kontexts.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt;.">Der neu erstellte <see cref="T:System.ComponentModel.Design.IHelpService" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary vsli:raw="Removes a previously added context attribute.">Entfernt ein zuvor hinzugefügtes Kontextattribut.</summary>
      <param name="name" vsli:raw="The name of the attribute to remove.">Der Name des zu entfernenden Attributs.</param>
      <param name="value" vsli:raw="The value of the attribute to remove.">Der Wert des zu entfernenden Attributs.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary vsli:raw="Removes a context created with &lt;see cref=&quot;M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)&quot; /&gt;.">Entfernt einen Kontext, der mit einem <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" /> erstellt wurde.</summary>
      <param name="localContext" vsli:raw="The local context &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to remove.">Der zu entfernende lokale Kontext <see cref="T:System.ComponentModel.Design.IHelpService" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified keyword.">Zeigt das Hilfethema an, das dem angegebenen Schlüsselwort entspricht.</summary>
      <param name="helpKeyword" vsli:raw="The keyword of the Help topic to display.">Das Schlüsselwort des anzuzeigenden Hilfethemas.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified URL.">Zeigt das Hilfethema an, das der angegebenen URL entspricht.</summary>
      <param name="helpUrl" vsli:raw="The URL of the Help topic to display.">Die URL des anzuzeigenden Hilfethemas.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary vsli:raw="Provides methods for identifying the components of a component.">Stellt Methoden zum Bestimmen der Komponenten einer Komponente bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary vsli:raw="Searches the specified component for fields that implement the &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; interface and adds each to the specified container, storing the inheritance level of each which can be retrieved using the &lt;see cref=&quot;M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)&quot; /&gt; method.">Durchsucht die angegebene Komponente auf Felder, die die <see cref="T:System.ComponentModel.IComponent" />-Schnittstelle implementieren, und fügt diese jeweils dem angegebenen Container hinzu, wobei die jeweilige Vererbungsebene gespeichert wird. Diese kann mithilfe der <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" />-Methode abgerufen werden.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to search. Searching begins with this component.">Die <see cref="T:System.ComponentModel.IComponent" />, die durchsucht werden soll. Der Suchvorgang beginnt mit dieser Komponente.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to add components to.">Der <see cref="T:System.ComponentModel.IContainer" />, dem Komponenten hinzugefügt werden sollen.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the inheritance attribute for the specified component.">Ruft das Vererbungsattribut für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for which to retrieve the inheritance attribute.">Die <see cref="T:System.ComponentModel.IComponent" />, für die das Vererbungsattribut abgerufen werden soll.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; that describes the level of inheritance of the specified component.">Eine Instanz von <see cref="T:System.ComponentModel.InheritanceAttribute" />, das die Vererbungsebene der angegebenen Komponente beschreibt.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary vsli:raw="Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.">Stellt Methoden bereit, mit denen Sie die im Entwurfsmodus verfügbaren globalen Designerverben und Menübefehle verwalten sowie einige Typen von Kontextmenüs anzeigen können.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Adds the specified standard menu command to the menu.">Fügt dem Menü den angegebenen Standardmenübefehl hinzu.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.ComponentModel.Design.MenuCommand" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; is already present on a menu.">Die <see cref="T:System.ComponentModel.Design.CommandID" /> des angegebenen <see cref="T:System.ComponentModel.Design.MenuCommand" /> ist bereits in einem Menü vorhanden.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified designer verb to the set of global designer verbs.">Fügt das angegebene Designerverb der Gruppe der globalen Designerverben hinzu.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Searches for the specified command ID and returns the menu command associated with it.">Sucht nach der angegebenen Befehls-ID und gibt den zugeordneten Menübefehl zurück.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; to search for.">Die zu suchende <see cref="T:System.ComponentModel.Design.CommandID" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; associated with the command ID, or &lt;see langword=&quot;null&quot; /&gt; if no command is found.">Der <see cref="T:System.ComponentModel.Design.MenuCommand" />, dem diese Befehls-ID zugeordnet ist, oder <see langword="null" />, wenn kein Befehl gefunden wird.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Invokes a menu or designer verb command matching the specified command ID.">Ruft einen der angegebenen Befehls-ID entsprechenden Menübefehl oder Designerverbbefehl auf.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the command to search for and execute.">Die <see cref="T:System.ComponentModel.Design.CommandID" /> des zu suchenden und auszuführenden Befehls.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the command was found and invoked successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Befehl gefunden und erfolgreich aufgerufen wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Removes the specified standard menu command from the menu.">Entfernt den angegebenen Standardmenübefehl aus dem Menü.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to remove.">Das zu entfernende <see cref="T:System.ComponentModel.Design.MenuCommand" />-Element.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified designer verb from the collection of global designer verbs.">Entfernt das angegebene Designerverb aus der Auflistung von globalen Designerverben.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove.">Das zu entfernende <see cref="T:System.ComponentModel.Design.DesignerVerb" />-Element.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary vsli:raw="Shows the specified shortcut menu at the specified location.">Zeigt das angegebene Kontextmenü an der angegebenen Position an.</summary>
      <param name="menuID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the shortcut menu to show.">Die <see cref="T:System.ComponentModel.Design.CommandID" /> für das anzuzeigende Kontextmenü.</param>
      <param name="x" vsli:raw="The x-coordinate at which to display the menu, in screen coordinates.">Die x-Koordinate in Bildschirmkoordinaten, an der das Menü angezeigt werden soll.</param>
      <param name="y" vsli:raw="The y-coordinate at which to display the menu, in screen coordinates.">Die y-Koordinate in Bildschirmkoordinaten, an der das Menü angezeigt werden soll.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary vsli:raw="Gets a collection of the designer verbs that are currently available.">Ruft eine Auflistung der aktuell verfügbaren Designerverben ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the designer verbs that are currently available.">Eine <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />, die die aktuell verfügbaren Designerverben enthält.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary vsli:raw="Provides an interface for obtaining references to objects within a project by name or type, obtaining the name of a specified object, and for locating the parent of a specified object within a designer project.">Stellt eine Schnittstelle bereit, mit der Sie Verweise auf Objekte innerhalb eines Projekts anhand des Namens oder Typs abrufen, den Namen eines angegebenen Objekts abrufen und innerhalb eines Designerprojekts nach dem übergeordneten Element eines angegebenen Objekts suchen können.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary vsli:raw="Gets the component that contains the specified component.">Ruft die Komponente ab, die die angegebene Komponente enthält.</summary>
      <param name="reference" vsli:raw="The object to retrieve the parent component for.">Das Objekt, dessen übergeordnete Komponente abgerufen werden soll.</param>
      <returns vsli:raw="The base &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that contains the specified object, or &lt;see langword=&quot;null&quot; /&gt; if no parent component exists.">Die Basis-<see cref="T:System.ComponentModel.IComponent" />, die das angegebene Objekt enthält, oder <see langword="null" />, wenn keine übergeordnete Komponente vorhanden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">Ruft den Namen der angegebenen Komponente ab.</summary>
      <param name="reference" vsli:raw="The object to return the name of.">Das Objekt, dessen Name zurückgegeben werden soll.</param>
      <returns vsli:raw="The name of the object referenced, or &lt;see langword=&quot;null&quot; /&gt; if the object reference is not valid.">Der Name des Objekts, auf das verwiesen wird, oder <see langword="null" />, wenn der Objektverweis nicht gültig ist.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary vsli:raw="Gets a reference to the component whose name matches the specified name.">Ruft einen Verweis auf die Komponente ab, deren Name mit dem angegebenen Namen übereinstimmt.</summary>
      <param name="name" vsli:raw="The name of the component to return a reference to.">Der Name der Komponente, an die ein Verweis zurückgegeben werden soll.</param>
      <returns vsli:raw="An object the specified name refers to, or &lt;see langword=&quot;null&quot; /&gt; if no reference is found.">Ein Objekt, auf das der angegebene Name verweist, oder <see langword="null" />, wenn kein Verweis gefunden wird.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary vsli:raw="Gets all available references to project components.">Ruft alle verfügbaren Verweise auf Projektkomponenten ab.</summary>
      <returns vsli:raw="An array of all objects with references available to the &lt;see cref=&quot;T:System.ComponentModel.Design.IReferenceService&quot; /&gt;.">Ein Array aller Objekte mit Verweisen, die für <see cref="T:System.ComponentModel.Design.IReferenceService" /> verfügbar sind.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary vsli:raw="Gets all available references to components of the specified type.">Ruft alle verfügbaren Verweise auf Komponenten des angegebenen Typs ab.</summary>
      <param name="baseType" vsli:raw="The type of object to return references to instances of.">Der Typ des Objekts, für das Verweise auf dessen Instanzen zurückgegeben werden sollen.</param>
      <returns vsli:raw="An array of all available objects of the specified type.">Ein Array aller verfügbaren Objekte des angegebenen Typs.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary vsli:raw="Provides an interface for designers to access resource readers and writers for specific &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; resource types.">Stellt eine Schnittstelle für Designer bereit, mit der Sie auf Ressourcenreader und -writer für bestimmte <see cref="T:System.Globalization.CultureInfo" />-Ressourcentypen zugreifen können.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource reader for the specified culture and returns it.">Sucht den Ressourcenreader für die angegebene Kultur und gibt diesen zurück.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to retrieve a resource reader.">Die <see cref="T:System.Globalization.CultureInfo" /> der Ressource, für die ein Ressourcenreader abgerufen werden soll.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceReader&quot; /&gt; interface that contains the resources for the culture, or &lt;see langword=&quot;null&quot; /&gt; if no resources for the culture exist.">Eine <see cref="T:System.Resources.IResourceReader" />-Schnittstelle, die die Ressourcen für die Kultur enthält, oder <see langword="null" />, wenn keine Ressourcen für die Kultur vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource writer for the specified culture and returns it.">Sucht den Ressourcenwriter für die angegebene Kultur und gibt diesen zurück.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to create a resource writer.">Die <see cref="T:System.Globalization.CultureInfo" /> der Ressource, für die ein Ressourcenwriter erstellt werden soll.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceWriter&quot; /&gt; interface for the specified culture.">Die <see cref="T:System.Resources.IResourceWriter" />-Schnittstelle für die angegebene Kultur.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary vsli:raw="Provides support for root-level designer view technologies.">Unterstützt Ansichtstechnologien für Designer auf Stammebene.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary vsli:raw="Gets a view object for the specified view technology.">Ruft ein Ansichtsobjekt für die angegebene Ansichtstechnologie ab.</summary>
      <param name="technology" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; that indicates a particular view technology.">Eine <see cref="T:System.ComponentModel.Design.ViewTechnology" />, die eine bestimmte Ansichtstechnologie angibt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified view technology is not supported or does not exist.">Die angegebene Ansichtstechnologie wird nicht unterstützt oder ist nicht vorhanden.</exception>
      <returns vsli:raw="An object that represents the view for this designer.">Ein Objekt, das die Ansicht für diesen Designer darstellt.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary vsli:raw="Gets the set of technologies that this designer can support for its display.">Ruft den Satz von Technologien ab, die dieser Designer für die Anzeige unterstützen kann.</summary>
      <returns vsli:raw="An array of supported &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; values.">Ein Array von unterstützten <see cref="T:System.ComponentModel.Design.ViewTechnology" />-Werten.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary vsli:raw="Provides an interface for a designer to select components.">Stellt für einen Designer eine Schnittstelle zum Auswählen von Komponenten bereit.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary vsli:raw="Occurs when the current selection changes.">Tritt auf, wenn sich die aktuelle Auswahl ändert.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary vsli:raw="Occurs when the current selection is about to change.">Tritt ein, wenn sich die aktuelle Auswahl gerade ändert.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary vsli:raw="Gets a value indicating whether the specified component is currently selected.">Ruft einen Wert ab, der angibt, ob die angegebene Komponente momentan ausgewählt ist.</summary>
      <param name="component" vsli:raw="The component to test.">Die zu prüfende Komponente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is part of the user's current selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Komponente Teil der aktuellen Auswahl des Benutzers ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary vsli:raw="Gets a collection of components that are currently selected.">Ruft eine Auflistung der Komponenten ab, die momentan ausgewählt sind.</summary>
      <returns vsli:raw="A collection that represents the current set of components that are selected.">Eine Auflistung, die den Satz der momentan ausgewählten Komponenten darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary vsli:raw="Selects the specified collection of components.">Wählt die angegebene Auflistung von Komponenten aus.</summary>
      <param name="components" vsli:raw="The collection of components to select.">Die Auflistung der auszuwählenden Komponenten.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary vsli:raw="Selects the components from within the specified collection of components that match the specified selection type.">Wählt in der angegebenen Komponentenauflistung die Komponenten aus, die dem angegebenen Auswahltyp entsprechen.</summary>
      <param name="components" vsli:raw="The collection of components to select.">Die Auflistung der auszuwählenden Komponenten.</param>
      <param name="selectionType" vsli:raw="A value from the &lt;see cref=&quot;T:System.ComponentModel.Design.SelectionTypes&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;.">Ein Wert aus der <see cref="T:System.ComponentModel.Design.SelectionTypes" />-Enumeration. Der Standardwert ist <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary vsli:raw="Gets the object that is currently the primary selected object.">Ruft das Objekt ab, das gegenwärtig das primäre ausgewählte Objekt ist.</summary>
      <returns vsli:raw="The object that is currently the primary selected object.">Das Objekt, das gegenwärtig das primäre ausgewählte Objekt ist.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary vsli:raw="Gets the count of selected objects.">Ruft den Zähler der ausgewählten Objekte ab.</summary>
      <returns vsli:raw="The number of selected objects.">Die Anzahl der ausgewählten Objekte.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary vsli:raw="Provides a container for services.">Stellt einen Container für Dienste bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">Fügt dem Dienstcontainer den angegebenen Dienst hinzu.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Der hinzuzufügende Diensttyp.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">Ein Rückrufobjekt, das zur Diensterstellung verwendet wird. Über dieses Objekt kann ein Dienst als verfügbar deklariert werden, die Objekterstellung wird jedoch bis zur Dienstanforderung verzögert.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to parent service containers.">Fügt dem Dienstcontainer den angegebenen Dienst hinzu und stuft den Dienst optional auf übergeordnete Dienstcontainer hoch.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Der hinzuzufügende Diensttyp.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">Ein Rückrufobjekt, das zur Diensterstellung verwendet wird. Über dieses Objekt kann ein Dienst als verfügbar deklariert werden, die Objekterstellung wird jedoch bis zur Dienstanforderung verzögert.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Anforderung auf einen beliebigen übergeordneten Dienstcontainer hochgestuft wird, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">Fügt dem Dienstcontainer den angegebenen Dienst hinzu.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Der hinzuzufügende Diensttyp.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Eine Instanz des hinzuzufügenden Diensttyps. Eine Instanz des hinzuzufügenden Dienstes. Dabei muss es sich um ein Objekt handeln, das den mit dem <paramref name="serviceType" />-Parameter angegebenen Typ implementiert oder von diesem erbt.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to any parent service containers.">Fügt dem Dienstcontainer den angegebenen Dienst hinzu und stuft den Dienst optional auf einen beliebigen übergeordneten Dienstcontainer hoch.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Der hinzuzufügende Diensttyp.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Eine Instanz des hinzuzufügenden Diensttyps. Eine Instanz des hinzuzufügenden Dienstes. Dabei muss es sich um ein Objekt handeln, das den mit dem <paramref name="serviceType" />-Parameter angegebenen Typ implementiert oder von diesem erbt.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Anforderung auf einen beliebigen übergeordneten Dienstcontainer hochgestuft wird, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">Entfernt den angegebenen Diensttyp aus dem Dienstcontainer.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Der Typ des zu entfernenden Diensts.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container, and optionally promotes the service to parent service containers.">Entfernt den angegebenen Diensttyp aus dem Dienstcontainer und stuft den Dienst optional auf übergeordnete Dienstcontainer hoch.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Der Typ des zu entfernenden Diensts.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Anforderung auf einen beliebigen übergeordneten Dienstcontainer hochgestuft wird, andernfalls <see langword="false" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary vsli:raw="Provides support for building a set of related custom designers.">Stellt Unterstützung für das Erstellen eines Satzes verwandter, benutzerdefinierter Designer bereit.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary vsli:raw="Gets a collection of child designers.">Ruft eine Auflistung untergeordneter Designer ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;, containing the collection of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; child objects of the current designer.">Eine <see cref="T:System.Collections.ICollection" />, die die Auflistung untergeordneter <see cref="T:System.ComponentModel.Design.IDesigner" /> des aktuellen Designers enthält.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary vsli:raw="Gets the parent designer.">Ruft den übergeordneten Designer ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; representing the parent designer, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">Ein <see cref="T:System.ComponentModel.Design.IDesigner" />, der den übergeordneten Designer darstellt, oder <see langword="null" />, wenn kein übergeordneter Designer vorhanden ist.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary vsli:raw="Provides an interface to modify the set of member descriptors for a component in design mode.">Stellt eine Schnittstelle bereit, mit der der Satz der Memberdeskriptoren für eine Komponente im Entwurfsmodus bearbeitet werden kann.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the attributes that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtert die Attribute, die eine Komponente über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar macht.</summary>
      <param name="component" vsli:raw="The component to filter the attributes of.">Die Komponente, deren Attribute gefiltert werden sollen.</param>
      <param name="attributes" vsli:raw="A dictionary of attributes that can be modified.">Ein Attributwörterbuch, das geändert werden kann.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered attributes is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" />, wenn der Satz von gefilterten Attributen zwischengespeichert werden soll; <see langword="false" />, wenn der Filterdienst eine weitere Abfrage ausführen muss.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the events that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtert die Ereignisse, die eine Komponente über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar macht.</summary>
      <param name="component" vsli:raw="The component to filter events for.">Die Komponente, deren Ereignisse gefiltert werden sollen.</param>
      <param name="events" vsli:raw="A dictionary of events that can be modified.">Ein Ereigniswörterbuch, das geändert werden kann.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered events is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" />, wenn der Satz von gefilterten Ereignissen zwischengespeichert werden soll; <see langword="false" />, wenn der Filterdienst eine neue Abfrage ausführen muss.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the properties that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtert die Eigenschaften, die eine Komponente über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar macht.</summary>
      <param name="component" vsli:raw="The component to filter properties for.">Die Komponente, deren Eigenschaften gefiltert werden sollen.</param>
      <param name="properties" vsli:raw="A dictionary of properties that can be modified.">Ein Eigenschaftenwörterbuch, das geändert werden kann.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered properties is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" />, wenn der Satz von gefilterten Eigenschaften zwischengespeichert werden soll; <see langword="false" />, wenn der Filterdienst eine neue Abfrage ausführen muss.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary vsli:raw="Discovers available types at design time.">Ermittelt zur Entwurfszeit verfügbare Typen.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary vsli:raw="Retrieves the list of available types.">Ruft die Liste der verfügbaren Typen ab.</summary>
      <param name="baseType" vsli:raw="The base type to match. Can be &lt;see langword=&quot;null&quot; /&gt;.">Der Basistyp, mit dem eine Übereinstimmung gefunden werden soll. Kann <see langword="null" /> sein.</param>
      <param name="excludeGlobalTypes" vsli:raw="Indicates whether types from all referenced assemblies should be checked.">Gibt an, ob Typen von allen Assemblys, auf die verwiesen wird, überprüft werden sollen.</param>
      <returns vsli:raw="A collection of types that match the criteria specified by &lt;paramref name=&quot;baseType&quot; /&gt; and &lt;paramref name=&quot;excludeGlobalTypes&quot; /&gt;.">Eine Auflistung der Typen, die die von <paramref name="baseType" /> und <paramref name="excludeGlobalTypes" /> angegebenen Kriterien erfüllen.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary vsli:raw="Provides an interface to retrieve an assembly or type by name.">Stellt eine Schnittstelle bereit, mit der eine Assembly oder ein Typ anhand des Namens abgerufen werden kann.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the requested assembly.">Ruft die angeforderte Assembly ab.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">Der Name der abzurufenden Assembly.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">Eine Instanz der angeforderten Assembly oder <see langword="null" />, falls keine Assembly gefunden werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary vsli:raw="Gets the requested assembly.">Ruft die angeforderte Assembly ab.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">Der Name der abzurufenden Assembly.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" />, wenn diese Methode eine Ausnahme auslösen soll, falls die Assembly nicht gefunden werden kann, andernfalls <see langword="false" />, und die Methode gibt <see langword="null" /> zurück, falls die Assembly nicht gefunden werden kann.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">Eine Instanz der angeforderten Assembly oder <see langword="null" />, falls keine Assembly gefunden werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the path to the file from which the assembly was loaded.">Ruft den Pfad der Datei ab, aus der die Assembly geladen wurde.</summary>
      <param name="name" vsli:raw="The name of the assembly.">Der Name der Assembly.</param>
      <returns vsli:raw="The path to the file from which the assembly was loaded.">Der Pfad der Datei, aus der die Assembly geladen wurde.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary vsli:raw="Loads a type with the specified name.">Lädt einen Typ mit dem angegebenen Namen.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Der Name des Typs. Wenn der Typname nicht voll gekennzeichnet ist und keine Assembly angibt, durchsucht dieser Dienst seinen internen Satz von Assemblys nach den Assemblys, auf die Verweise vorhanden sind.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Eine Instanz von <see cref="T:System.Type" />, die mit dem angegebenen Namen übereinstimmt, oder <see langword="null" />, falls kein Typ gefunden werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">Lädt einen Typ mit dem angegebenen Namen.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Der Name des Typs. Wenn der Typname nicht voll gekennzeichnet ist und keine Assembly angibt, durchsucht dieser Dienst seinen internen Satz von Assemblys nach den Assemblys, auf die Verweise vorhanden sind.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" />, wenn diese Methode eine Ausnahme auslösen soll, falls die Assembly nicht gefunden werden kann, andernfalls <see langword="false" />, und die Methode gibt <see langword="null" /> zurück, falls die Assembly nicht gefunden werden kann.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Eine Instanz von <see cref="T:System.Type" />, die mit dem angegebenen Namen übereinstimmt, oder <see langword="null" />, falls kein Typ gefunden werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">Lädt einen Typ mit dem angegebenen Namen.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Der Name des Typs. Wenn der Typname nicht voll gekennzeichnet ist und keine Assembly angibt, durchsucht dieser Dienst seinen internen Satz von Assemblys nach den Assemblys, auf die Verweise vorhanden sind.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" />, wenn diese Methode eine Ausnahme auslösen soll, falls die Assembly nicht gefunden werden kann, andernfalls <see langword="false" />, und die Methode gibt <see langword="null" /> zurück, falls die Assembly nicht gefunden werden kann.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore case when searching for types; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um die Groß- und Kleinschreibung bei der Suche nach Typen zu ignorieren, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Eine Instanz von <see cref="T:System.Type" />, die mit dem angegebenen Namen übereinstimmt, oder <see langword="null" />, falls kein Typ gefunden werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Adds a reference to the specified assembly.">Fügt einen Verweis auf die angegebene Assembly hinzu.</summary>
      <param name="name" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that indicates the assembly to reference.">Ein <see cref="T:System.Reflection.AssemblyName" />, der die Assembly angibt, auf die verwiesen werden soll.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary vsli:raw="Represents a Windows menu or toolbar command item.">Stellt einen Befehl in einem Windows-Menü oder auf einer Windows-Symbolleiste dar.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary vsli:raw="Occurs when the menu command changes.">Tritt bei einer Änderung des Menübefehls ein.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.MenuCommand" />-Klasse.</summary>
      <param name="handler" vsli:raw="The event to raise when the user selects the menu item or toolbar button.">Das Ereignis, das ausgelöst werden soll, wenn der Benutzer den Menübefehl oder die Symbolleisten-Schaltfläche auswählt.</param>
      <param name="command" vsli:raw="The unique command ID that links this menu command to the environment's menu.">Die eindeutige Befehls-ID, durch die dieser Menübefehl mit dem Umgebungsmenü verknüpft ist.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary vsli:raw="Invokes the command.">Ruft den Befehl auf.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary vsli:raw="Invokes the command with the given parameter.">Ruft den Befehl mit dem angegebenen Parameter auf.</summary>
      <param name="arg" vsli:raw="An optional argument for use by the command.">Ein optionales Argument für die Verwendung durch den Befehl.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.MenuCommand.CommandChanged&quot; /&gt; event.">Löst das <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" />-Ereignis aus.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary vsli:raw="Returns a string representation of this menu command.">Gibt eine Zeichenfolgendarstellung dieses Menübefehls zurück.</summary>
      <returns vsli:raw="A string containing the value of the &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.CommandID&quot; /&gt; property appended with the names of any flags that are set, separated by pipe bars (|). These flag properties include &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Checked&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Enabled&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Supported&quot; /&gt;, and &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Visible&quot; /&gt;.">Eine Zeichenfolge, die den Wert der <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" />-Eigenschaft enthält, auf die die Namen sämtlicher festgelegter Flags folgen, die getrennt sind durch das Symbol (| Zu diesen Flageigenschaften gehören <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> und <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is checked.">Ruft einen Wert ab, der angibt, ob dieses Menüelement aktiviert ist, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is checked; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Element aktiviert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with this menu command.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse ab, die diesem Menübefehl zugeordnet ist.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with the menu command.">Die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse, die dem Menübefehl zugeordnet ist.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary vsli:raw="Gets a value indicating whether this menu item is available.">Ruft einen Wert ab, der angibt, ob dieses Menüelement verfügbar ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Element aktiviert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary vsli:raw="Gets the OLE command status code for this menu item.">Ruft den OLE-Befehlsstatus für dieses Menüelement ab.</summary>
      <returns vsli:raw="An integer containing a mixture of status flags that reflect the state of this menu item.">Eine ganze Zahl, die eine Kombination von Statusflags enthält, die den Zustand dieses Menübefehls wiedergeben.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary vsli:raw="Gets the public properties associated with the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">Ruft die öffentlichen Eigenschaften ab, die der <see cref="T:System.ComponentModel.Design.MenuCommand" />-Klasse zugeordnet sind.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing the public properties of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">Eine <see cref="T:System.Collections.IDictionary" />-Schnittstelle mit den öffentlichen Eigenschaften der <see cref="T:System.ComponentModel.Design.MenuCommand" />-Klasse.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is supported.">Ruft einen Wert ab, der angibt, ob dieses Menüelement unterstützt wird, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is supported, which is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Element unterstützt wird (Standardeinstellung), andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is visible.">Ruft einen Wert ab, der angibt, ob dieses Menüelement sichtbar ist, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is visible; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Element sichtbar ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary vsli:raw="Defines identifiers that indicate the type of a selection.">Definiert Bezeichner, die den Typ einer Auswahl angeben.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary vsli:raw="Represents an add selection that adds the selected components to the current selection, maintaining the current set of selected components.">Stellt eine hinzuzufügende Auswahl dar, die die ausgewählten Komponenten der aktuellen Auswahl hinzufügt, wobei die aktuelle Gruppe ausgewählter Komponenten beibehalten wird.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">Stellt eine normale Auswahl dar. Der Auswahldienst reagiert auf die STRG-TASTE und die UMSCHALTTASTE, um das Hinzufügen von Komponenten zur Auswahl oder das Entfernen von Komponenten aus der Auswahl zu unterstützen.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary vsli:raw="Represents a selection that occurs when a user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">Stellt eine Auswahl dar, die eintritt, wenn ein Benutzer auf eine Komponente klickt. Wenn die entprechende Komponente bereits ausgewählt ist, wird die Auswahl nicht abgebrochen, sondern die Komponente wird zur primären ausgewählten Komponente.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary vsli:raw="Represents a selection that occurs when the user presses on the mouse button while the mouse pointer is over a component. If the component under the pointer is already selected, it is promoted to become the primary selected component rather than being canceled.">Stellt eine Auswahl dar, die eintritt, wenn ein Benutzer die Maustaste drückt, während sich der Mauszeiger über einer Komponente befindet. Wenn die entprechende Komponente bereits ausgewählt ist, wird die Auswahl nicht abgebrochen, sondern die Komponente wird zur primären ausgewählten Komponente.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary vsli:raw="Represents a selection that occurs when the user releases the mouse button immediately after a component has been selected. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">Stellt eine Auswahl dar, die eintritt, wenn der Benutzer die Maustaste unmittelbar nach dem Auswählen einer Komponente loslässt. Wenn die entprechende Komponente bereits ausgewählt ist, wird die Auswahl nicht abgebrochen, sondern die Komponente wird zur primären ausgewählten Komponente.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">Stellt eine normale Auswahl dar. Der Auswahldienst reagiert auf die STRG-TASTE und die UMSCHALTTASTE, um das Hinzufügen von Komponenten zur Auswahl oder das Entfernen von Komponenten aus der Auswahl zu unterstützen.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary vsli:raw="Represents a primary selection that occurs when a user clicks on a component. If a component in the selection list is already selected, the component is promoted to be the primary selection.">Stellt eine primäre Auswahl dar, die eintritt, wenn ein Benutzer auf eine Komponente klickt. Wenn in der Auswahlliste bereits eine Komponente ausgewählt ist, wird die Komponente zur primären Auswahl.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary vsli:raw="Represents a remove selection that removes the selected components from the current selection, maintaining the current set of selected components.">Stellt eine zu entfernende Auswahl dar, die die ausgewählten Komponenten aus der aktuellen Auswahl entfernt, wobei die aktuelle Gruppe ausgewählter Komponenten beibehalten wird.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary vsli:raw="Represents a selection that occurs when the content of a selection is replaced. The selection service replaces the current selection with the replacement.">Stellt eine Auswahl dar, die eintritt, wenn der Inhalt einer Auswahl ersetzt wird. Der Auswahldienst ersetzt die aktuelle Auswahl durch die Ersetzung.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary vsli:raw="Represents a toggle selection that switches between the current selection and the provided selection. If a component is already selected and is passed into &lt;see cref=&quot;Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents&quot; /&gt; with a selection type of &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Toggle&quot; /&gt;, the component selection will be canceled.">Stellt eine wechselweise Auswahl dar, die zwischen der aktuellen Auswahl und der bereitgestellten Auswahl wechselt. Wenn eine Komponente bereits ausgewählt ist und mit dem Auswahltyp <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> an <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" /> übergeben wird, wird die Komponentenauswahl abgebrochen.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary vsli:raw="Identifies the valid selection types as &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Replace&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseDown&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseUp&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Click&quot; /&gt;.">Kennzeichnet die gültigen Auswahltypen wie <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> oder <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary vsli:raw="Provides the base class for serializing a set of components or serializable objects into a serialization store.">Stellt die Basisklasse bereit, mit der ein Satz von Komponenten oder serialisierbaren Objekten in einen Serialisierungsspeicher serialisiert werden kann.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Erstellt einen neuen <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <returns vsli:raw="A new created serialization store.">Ein neuer erstellter Serialisierungsspeicher.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary vsli:raw="Deserializes the given store to produce a collection of objects.">Deserialisiert den angegebenen Speicher, um eine Auflistung von Objekten zu erstellen.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">Die zu deserialisierende <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> enthält keine Daten in einem Format, das der Serialisierungscontainer verarbeiten kann.</exception>
      <returns vsli:raw="A collection of objects created according to the stored state.">Eine Auflistung von Objekten, die auf der Grundlage des gespeicherten Zustands erstellt wird.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given store and populates the given &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with deserialized &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects.">Deserialisiert den angegebenen Speicher und füllt den angegebenen <see cref="T:System.ComponentModel.IContainer" /> mit deserialisierten <see cref="T:System.ComponentModel.IComponent" />-Objekten.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">Die zu deserialisierende <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Der <see cref="T:System.ComponentModel.IContainer" />, dem die <see cref="T:System.ComponentModel.IComponent" />-Objekte hinzugefügt werden.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> oder <paramref name="container" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> enthält keine Daten in einem Format, das der Serialisierungscontainer verarbeiten kann.</exception>
      <returns vsli:raw="A collection of objects created according to the stored state.">Eine Auflistung von Objekten, die auf der Grundlage des gespeicherten Zustands erstellt wird.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container.">Deserialisiert den angegebenen <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> in den angegebenen Container.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">Die zu deserialisierende <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Der Container, dem die <see cref="T:System.ComponentModel.IComponent" />-Objekte hinzugefügt werden.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> oder <paramref name="container" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> enthält keine Daten in einem Format, das der Serialisierungscontainer verarbeiten kann.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally validating recycled types.">Deserialisiert den angegebenen <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> in den angegebenen Container und überprüft optional wiederverwendete Typen.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">Die zu deserialisierende <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Der Container, dem die <see cref="T:System.ComponentModel.IComponent" />-Objekte hinzugefügt werden.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">
        <see langword="true" />, um zu gewährleisten, dass die Deserialisierung nur dann ausgeführt wird, wenn sie auf ein Objekt desselben Typs angewendet wird.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> oder <paramref name="container" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> enthält keine Daten in einem Format, das der Serialisierungscontainer verarbeiten kann.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally applying default property values.">Deserialisiert den angegebenen <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> in den angegebenen Container und wendet optional Standardeigenschaftswerte an.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">Die zu deserialisierende <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Der Container, dem die <see cref="T:System.ComponentModel.IComponent" />-Objekte hinzugefügt werden.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">
        <see langword="true" />, um zu gewährleisten, dass die Deserialisierung nur dann ausgeführt wird, wenn sie auf ein Objekt desselben Typs angewendet wird.</param>
      <param name="applyDefaults" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the default property values should be applied.">
        <see langword="true" />, um anzugeben, dass die Standardeigenschaftswerte angewendet werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> oder <paramref name="container" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> enthält keine Daten in einem Format, das der Serialisierungscontainer verarbeiten kann.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; from a stream.">Lädt <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> aus einem Stream.</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which the store will be loaded.">Der <see cref="T:System.IO.Stream" />, aus dem der Speicher geladen wird.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; does not contain data saved by a previous call to &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)&quot; /&gt;.">
        <paramref name="stream" /> enthält keine Daten, die bei einem vorherigen Aufruf von <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" /> gespeichert wurden.</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; instance.">Eine neue <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />-Instanz.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object to the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Serialisiert das angegebene Objekt in den angegebenen <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be written.">Der <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, in den der Zustand von <paramref name="value" /> geschrieben wird.</param>
      <param name="value" vsli:raw="The object to serialize.">Das zu serialisierende Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> oder <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> wird geschlossen, oder <paramref name="store" /> ist kein unterstützter Typ des Serialisierungsspeichers. Verwenden Sie einen von <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> zurückgegebenen Speicher.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object, accounting for default property values.">Serialisiert das angegebene Objekt unter Berücksichtigung von Standardeigenschaftswerten.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be serialized.">Der <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, in den der Zustand von <paramref name="value" /> serialisiert wird.</param>
      <param name="value" vsli:raw="The object to serialize.">Das zu serialisierende Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> oder <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> wird geschlossen, oder <paramref name="store" /> ist kein unterstützter Typ des Serialisierungsspeichers. Verwenden Sie einen von <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> zurückgegebenen Speicher.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object.">Serialisiert den angegebenen Member für das angegebene Objekt.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">Der <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, in den der Zustand von <paramref name="member" /> serialisiert wird.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">Das Objekt, an das <paramref name="member" /> angefügt ist.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; specifying the member to serialize.">Ein <see cref="T:System.ComponentModel.MemberDescriptor" />, der den zu serialisierenden Member angibt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> oder <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> wird geschlossen, oder <paramref name="store" /> ist kein unterstützter Typ des Serialisierungsspeichers. Verwenden Sie einen von <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> zurückgegebenen Speicher.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object, accounting for the default property value.">Serialisiert den angegebenen Member für das angegebene Objekt unter Berücksichtigung des Standardeigenschaftswerts.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">Der <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, in den der Zustand von <paramref name="member" /> serialisiert wird.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">Das Objekt, an das <paramref name="member" /> angefügt ist.</param>
      <param name="member" vsli:raw="The member to serialize.">Der zu serialisierende Member.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> oder <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> wird geschlossen, oder <paramref name="store" /> ist kein unterstützter Typ des Serialisierungsspeichers. Verwenden Sie einen von <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> zurückgegebenen Speicher.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary vsli:raw="Provides a stack object that can be used by a serializer to make information available to nested serializers.">Stellt ein Stapelobjekt zur Verfügung, das von einem Serialisierungsprogramm verwendet werden kann, um geschachtelten Serialisierungsprogrammen Informationen zur Verfügung zu stellen.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary vsli:raw="Appends an object to the end of the stack, rather than pushing it onto the top of the stack.">Hängt ein Objekt an das Ende des Stapels an, anstatt es auf der obersten Ebene des Stapels abzulegen.</summary>
      <param name="context" vsli:raw="A context object to append to the stack.">Ein Kontextobjekt, das an den Stapel angehängt werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary vsli:raw="Removes the current object off of the stack, returning its value.">Entfernt das aktuelle Objekt vom Stapel und gibt seinen Wert zurück.</summary>
      <returns vsli:raw="The object removed from the stack; &lt;see langword=&quot;null&quot; /&gt; if no objects are on the stack.">Das aus dem Stapel entfernte Objekt; <see langword="null" />, wenn keine Objekte auf dem Stapel vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary vsli:raw="Pushes, or places, the specified object onto the stack.">Legt das angegebene Objekt auf dem Stapel ab.</summary>
      <param name="context" vsli:raw="The context object to push onto the stack.">Das Kontextobjekt, das auf dem Stapel abgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary vsli:raw="Gets the current object on the stack.">Ruft das aktuelle Objekt auf dem Stapel ab.</summary>
      <returns vsli:raw="The current object on the stack, or &lt;see langword=&quot;null&quot; /&gt; if no objects were pushed.">Das aktuelle Objekt auf dem Stapel oder <see langword="null" />, wenn keine Objekte abgelegt wurden.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary vsli:raw="Gets the object on the stack at the specified level.">Ruft das Objekt im Stapel auf der angegebenen Ebene ab.</summary>
      <param name="level" vsli:raw="The level of the object to retrieve on the stack. Level 0 is the top of the stack, level 1 is the next down, and so on. This level must be 0 or greater. If level is greater than the number of levels on the stack, it returns &lt;see langword=&quot;null&quot; /&gt;.">Die Ebene des abzurufenden Objekts im Stapel. Ebene 0 (null) ist die oberste Ebene des Stapels, darauf folgt Ebene 1, usw. Diese Ebene muss 0 (null) oder größer sein. Wenn die Ebene größer als die Anzahl der Ebenen im Stapel ist, wird <see langword="null" /> zurückgegeben.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;level&quot; /&gt; is less than 0.">
        <paramref name="level" /> ist kleiner als 0.</exception>
      <returns vsli:raw="The object on the stack at the specified level, or &lt;see langword=&quot;null&quot; /&gt; if no object exists at that level.">Das Objekt im Stapel auf der angegebenen Ebene oder <see langword="null" />, wenn kein Objekt auf dieser Ebene vorhanden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary vsli:raw="Gets the first object on the stack that inherits from or implements the specified type.">Ruft das erste Objekt auf dem Stapel ab, das vom angegebenen Typ erbt oder diesen implementiert.</summary>
      <param name="type" vsli:raw="A type to retrieve from the context stack.">Ein Typ, der vom Kontextstapel abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The first object on the stack that inherits from or implements the specified type, or &lt;see langword=&quot;null&quot; /&gt; if no object on the stack implements the type.">Das erste Objekt auf dem Stapel, das von dem angegebenen Typ erbt oder diesen implementiert, oder <see langword="null" />, wenn kein Objekt im Stapel den Typ implementiert.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; attribute is placed on a serializer to indicate the class to use as a default provider of that type of serializer.">Das <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" />-Attribut wird in einem Serialisierungsprogramm platziert, um die Klasse anzugeben, die für diesen Serialisierungsprogrammtyp als Standardanbieter verwendet werden soll.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the named provider type.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" />-Klasse mit dem benannten Anbietertyp.</summary>
      <param name="providerTypeName" vsli:raw="The name of the serialization provider type.">Der Name des Serialisierungsanbietertyps.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerTypeName" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the given provider type.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" />-Klasse mit dem angegebenen Anbietertyp.</summary>
      <param name="providerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the serialization provider.">Der <see cref="T:System.Type" /> des Serialisierungsanbieters.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerType" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary vsli:raw="Gets the type name of the serialization provider.">Ruft den Typnamen des Serialisierungsanbieters ab.</summary>
      <returns vsli:raw="A string containing the name of the provider.">Eine Zeichenfolge mit dem Namen des Anbieters.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary vsli:raw="Provides a basic designer loader interface that can be used to implement a custom designer loader.">Stellt eine grundlegende Schnittstelle für ein Designerladeprogramm bereit, mit der ein benutzerdefiniertes Designerladeprogramm implementiert werden kann.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary vsli:raw="Begins loading a designer.">Startet mit dem Laden eines Designers.</summary>
      <param name="host" vsli:raw="The loader host through which this loader loads components.">Der Ladeprogrammhost, über den dieses Ladeprogramm Komponenten lädt.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt;.">Gibt alle vom <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary vsli:raw="Writes cached changes to the location that the designer was loaded from.">Schreibt zwischengespeicherte Änderungen an den Speicherort, von dem aus der Designer geladen wurde.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary vsli:raw="Gets a value indicating whether the loader is currently loading a document.">Ruft einen Wert ab, der angibt, ob das Ladeprogramm gegenwärtig ein Dokument lädt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the loader is currently loading a document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Ladeprogramm gegenwärtig ein Dokument lädt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary vsli:raw="Provides an interface that can extend a designer host to support loading from a serialized state.">Stellt eine Schnittstelle bereit, die einen Designerhost erweitern kann, um das Laden aus einem serialisierten Zustand zu unterstützen.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Ends the designer loading operation.">Beendet den Ladevorgang des Designers.</summary>
      <param name="baseClassName" vsli:raw="The fully qualified name of the base class of the document that this designer is designing.">Der voll gekennzeichnete Name der Basisklasse des Dokuments, das von dieser Designerklasse entworfen wird.</param>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is successfully loaded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Designer erfolgreich geladen wurde, andernfalls <see langword="false" />.</param>
      <param name="errorCollection" vsli:raw="A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">Eine Auflistung, die, wenn zutreffend, die während des Ladevorgangs aufgetretenen Fehler enthält. Wenn keine Fehler aufgetreten sind, übergeben Sie eine leere Auflistung oder <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary vsli:raw="Reloads the design document.">Lädt das Entwurfsdokument erneut.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary vsli:raw="Provides an interface that extends &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&quot; /&gt; to specify whether errors are tolerated while loading a design document.">Stellt eine Schnittstelle bereit, die <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> erweitert, um anzugeben, ob während des Ladens eines Entwurfsdokuments Fehler toleriert werden.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary vsli:raw="Gets or sets a value indicating whether it is possible to reload with errors.">Ruft einen Wert ab, der angibt, ob das erneute Laden mit Fehlern möglich ist, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader can reload the design document when errors are detected; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Designerladeprogramm das Entwurfsdokument erneut laden kann, wenn Fehler auftreten, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary vsli:raw="Gets or sets a value indicating whether errors should be ignored when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload&quot; /&gt; is called.">Ruft ab einen Wert ab, der angibt, ob beim Aufruf von <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> Fehler ignoriert werden sollen, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader will ignore errors when it reloads; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Designerladeprogramm beim erneuten Laden Fehler ignoriert, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary vsli:raw="Provides an interface that can extend a designer loader to support asynchronous loading of external components.">Stellt eine Schnittstelle bereit, die ein Designerladeprogramm erweitern kann, um das asynchrone Laden externer Komponenten zu unterstützen.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary vsli:raw="Registers an external component as part of the load process managed by this interface.">Registriert eine externe Komponente als Teil des Ladeprozesses, der von dieser Schnittstelle verwaltet wird.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Signals that a dependent load has finished.">Signalisiert, dass ein abhängiger Ladevorgang beendet wurde.</summary>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the load of the designer is successful; &lt;see langword=&quot;false&quot; /&gt; if errors prevented the load from finishing.">
        <see langword="true" />, wenn das Laden des Designers erfolgreich war, <see langword="false" />, wenn der Ladevorgang aufgrund von Fehlern nicht beendet werden konnte.</param>
      <param name="errorCollection" vsli:raw="A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">Eine Auflistung, die, wenn zutreffend, die während des Ladevorgangs aufgetretenen Fehler enthält. Wenn keine Fehler aufgetreten sind, übergeben Sie eine leere Auflistung oder <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary vsli:raw="Reloads the design document.">Lädt das Entwurfsdokument erneut.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reload request is accepted, or &lt;see langword=&quot;false&quot; /&gt; if the loader does not allow the reload.">
        <see langword="true" />, wenn die Anforderung nach einem erneuten Ladevorgang akzeptiert wird, oder <see langword="false" />, wenn das Ladeprogramm den erneuten Ladevorgang nicht zulässt.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary vsli:raw="Provides an interface that can manage design-time serialization.">Stellt eine Schnittstelle bereit, mit der die Serialisierung zur Entwurfszeit verwaltet werden kann.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)&quot; /&gt; cannot locate the specified name in the serialization manager's name table.">Tritt ein, wenn <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> den angegebenen Namen in der Namenstabelle des Serialisierungs-Managers nicht finden kann.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary vsli:raw="Occurs when serialization is complete.">Tritt ein, wenn die Serialisierung abgeschlossen ist.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Adds the specified serialization provider to the serialization manager.">Fügt dem Serialisierungs-Manager den angegebenen Serialisierungsprovider hinzu.</summary>
      <param name="provider" vsli:raw="The serialization provider to add.">Der hinzuzufügende Serialisierungsprovider.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary vsli:raw="Creates an instance of the specified type and adds it to a collection of named instances.">Erstellt eine Instanz des angegebenen Typs und fügt sie einer Auflistung benannter Instanzen hinzu.</summary>
      <param name="type" vsli:raw="The data type to create.">Der zu erstellende Datentyp.</param>
      <param name="arguments" vsli:raw="The arguments to pass to the constructor for this type.">Die an den Konstruktor für diesen Typ zu übergebenden Argumente.</param>
      <param name="name" vsli:raw="The name of the object. This name can be used to access the object later through &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the object is still created but cannot be accessed by name.">Der Name des Objekts. Mit diesem Namen kann später über <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" /> auf das Objekt zugegriffen werden. Wenn <see langword="null" /> übergeben wird, dann wird das Objekt dennoch erstellt, jedoch kann darauf nicht über den Namen zugegriffen werden.</param>
      <param name="addToContainer" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, this object is added to the design container. The object must implement &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for this to have any effect.">Wird <see langword="true" /> übergeben, dann wird dieses Objekt dem Entwurfscontainer hinzugefügt. Dies wirkt sich nur dann aus, wenn das Objekt <see cref="T:System.ComponentModel.IComponent" /> implementiert.</param>
      <returns vsli:raw="The newly created object instance.">Die neu erstellte Objektinstanz.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary vsli:raw="Gets an instance of a created object of the specified name, or &lt;see langword=&quot;null&quot; /&gt; if that object does not exist.">Ruft eine Instanz eines erstellten Objekts mit dem angegebenen Namen ab oder <see langword="null" />, wenn dieses Objekt nicht vorhanden ist.</summary>
      <param name="name" vsli:raw="The name of the object to retrieve.">Der Name des abzurufenden Objekts.</param>
      <returns vsli:raw="An instance of the object with the given name, or &lt;see langword=&quot;null&quot; /&gt; if no object by that name can be found.">Eine Instanz des Objekts mit dem angegebenen Namen oder <see langword="null" />, wenn kein Objekt mit diesem Namen gefunden wird.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified object, or &lt;see langword=&quot;null&quot; /&gt; if the object has no name.">Ruft den Namen des angegebenen Objekts ab oder <see langword="null" />, wenn dem Objekt kein Name zugewiesen ist.</summary>
      <param name="value" vsli:raw="The object to retrieve the name for.">Das Objekt, dessen Name abgerufen werden soll.</param>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object is unnamed.">Der Name des Objekts oder <see langword="null" />, wenn das Objekt unbenannt ist.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer of the requested type for the specified object type.">Ruft ein Serialisierungsprogramm vom angeforderten Typ für den angegebenen Objekttyp ab.</summary>
      <param name="objectType" vsli:raw="The type of the object to get the serializer for.">Der Typ des Objekts, für das das Serialisierungsprogramm abgerufen werden soll.</param>
      <param name="serializerType" vsli:raw="The type of the serializer to retrieve.">Der Typ des abzurufenden Serialisierungsprogramms.</param>
      <returns vsli:raw="An instance of the requested serializer, or &lt;see langword=&quot;null&quot; /&gt; if no appropriate serializer can be located.">Eine Instanz des angeforderten Serialisierungsprogramms oder <see langword="null" />, falls kein entsprechendes Serialisierungsprogramm gefunden werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary vsli:raw="Gets a type of the specified name.">Ruft einen Typ mit dem angegebenen Namen ab.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the type to load.">Der voll gekennzeichnete Name des zu ladenden Typs.</param>
      <returns vsli:raw="An instance of the type, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be loaded.">Eine Instanz des Typs oder <see langword="null" />, wenn der Typ nicht geladen werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Removes a custom serialization provider from the serialization manager.">Entfernt einen benutzerdefinierten Serialisierungsprovider aus dem Serialisierungs-Manager.</summary>
      <param name="provider" vsli:raw="The provider to remove. This object must have been added using &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)&quot; /&gt;.">Der zu entfernende Provider. Dieses Objekt muss mithilfe von <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" /> hinzugefügt worden sein.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary vsli:raw="Reports an error in serialization.">Meldet einen Fehler bei der Serialisierung.</summary>
      <param name="errorInformation" vsli:raw="The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; is called to display the information to the user.">Der zu meldende Fehler. Dieses Informationsobjekt kann einem beliebigen Objekttyp aufweisen. Wenn es sich um eine Ausnahme handelt, wird die Meldung der Ausnahme extrahiert und dem Benutzer angezeigt. Wenn es sich um einen anderen Typ handelt, wird <see cref="M:System.Object.ToString" /> aufgerufen, um dem Benutzer die Informationen anzuzeigen.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary vsli:raw="Sets the name of the specified existing object.">Legt den Namen des angegebenen vorhandenen Objekts fest.</summary>
      <param name="instance" vsli:raw="The object instance to name.">Die zu benennende Objektinstanz.</param>
      <param name="name" vsli:raw="The name to give the instance.">Der Name, der der Instanz gegeben werden soll.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary vsli:raw="Gets a stack-based, user-defined storage area that is useful for communication between serializers.">Ruft einen stapelbasierten, benutzerdefinierten Speicherbereich ab, der die Kommunikation zwischen Serialisierungsprogrammen erleichtert.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; that stores data.">Ein <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />, in dem Daten gespeichert werden.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary vsli:raw="Indicates custom properties that can be serializable with available serializers.">Gibt benutzerdefinierte Eigenschaften an, die mit verfügbaren Serialisierungsprogrammen serialisiert werden können.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties to be serialized.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, die die zu serialisierenden Eigenschaften enthält.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary vsli:raw="Provides an interface that enables access to a serializer.">Stellt eine Schnittstelle bereit, die den Zugriff auf ein Serialisierungsprogramm ermöglicht.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer using the specified attributes.">Ruft mithilfe der angegebenen Attribute ein Serialisierungsprogramm ab.</summary>
      <param name="manager" vsli:raw="The serialization manager requesting the serializer.">Der Serialisierungs-Manager, der das Serialisierungsprogramm anfordert.</param>
      <param name="currentSerializer" vsli:raw="An instance of the current serializer of the specified type. This can be &lt;see langword=&quot;null&quot; /&gt; if no serializer of the specified type exists.">Eine Instanz des aktuellen Serialisierungsprogramms vom angegebenen Typ. Dies kann <see langword="null" /> sein, wenn kein Serialisierungsprogramm vom angegebenen Typ vorhanden ist.</param>
      <param name="objectType" vsli:raw="The data type of the object to serialize.">Der Datentyp des zu serialisierenden Objekts.</param>
      <param name="serializerType" vsli:raw="The data type of the serializer to create.">Der Datentyp des zu erstellenden Serialisierungsprogramms.</param>
      <returns vsli:raw="An instance of a serializer of the type requested, or &lt;see langword=&quot;null&quot; /&gt; if the request cannot be satisfied.">Eine Instanz eines Serialisierungsprogramms vom angeforderten Typ oder <see langword="null" />, wenn die Anforderung nicht erfüllt werden kann.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary vsli:raw="Provides an interface that can invoke serialization and deserialization.">Stellt eine Schnittstelle bereit, die Serialisierung und Deserialisierung aufrufen kann.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary vsli:raw="Deserializes the specified serialization data object and returns a collection of objects represented by that data.">Deserialisiert das angegebene Serialisierungsdatenobjekt und gibt eine Auflistung von Objekten zurück, die von diesen Daten dargestellt werden.</summary>
      <param name="serializationData" vsli:raw="An object consisting of serialized data.">Ein Objekt, das aus serialisierten Daten besteht.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of objects rebuilt from the specified serialization data object.">Eine <see cref="T:System.Collections.ICollection" /> von Objekten, die aus dem angegebenen Serialisierungsdatenobjekt neu erstellt werden.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary vsli:raw="Serializes the specified collection of objects and stores them in a serialization data object.">Serialisiert die angegebene Auflistung von Objekten und speichert sie in einem Serialisierungsdatenobjekt.</summary>
      <param name="objects" vsli:raw="A collection of objects to serialize.">Eine Auflistung zu serialisierender Objekte.</param>
      <returns vsli:raw="An object that contains the serialized state of the specified collection of objects.">Ein Objekt, das den serialisierten Zustand der angegebenen Auflistung von Objekten enthält.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary vsli:raw="Provides a service that can generate unique names for objects.">Stellt einen Dienst bereit, der eindeutige Namen für Objekte generieren kann.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary vsli:raw="Creates a new name that is unique to all components in the specified container.">Erstellt einen neuen Namen, der für sämtliche Komponenten im angegebenen Container eindeutig ist.</summary>
      <param name="container" vsli:raw="The container where the new object is added.">Der Container, in dem das neue Objekt hinzugefügt wird.</param>
      <param name="dataType" vsli:raw="The data type of the object that receives the name.">Der Datentyp des Objekts, das den Namen erhält.</param>
      <returns vsli:raw="A unique name for the data type.">Ein eindeutiger Name für den Datentyp.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">Ruft einen Wert ab, der angibt, ob der angegebene Name gültig ist.</summary>
      <param name="name" vsli:raw="The name to validate.">Der Name, dessen Gültigkeit validiert werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name is valid; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Name gültig ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">Ruft einen Wert ab, der angibt, ob der angegebene Name gültig ist.</summary>
      <param name="name" vsli:raw="The name to validate.">Der Name, dessen Gültigkeit validiert werden soll.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary vsli:raw="Provides the information necessary to create an instance of an object. This class cannot be inherited.">Stellt die für das Erstellen einer Objektinstanz notwendigen Informationen bereit. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information and arguments.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />-Klasse unter Verwendung der angegebenen Memberinformationen und Argumente.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">Die Memberinformationen für den Deskriptor. Dies kann <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> oder <see cref="T:System.Reflection.PropertyInfo" /> sein. Wenn es sich um <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> oder <see cref="T:System.Reflection.PropertyInfo" /> handelt, muss hierdurch ein <see langword="static" />-Member dargestellt werden.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">Die Auflistung der an den Member zu übergebenden Argumente. Dieser Parameter kann <see langword="null" /> sein oder eine leere Auflistung, wenn keine Argumente vorhanden sind. Die Auflistung kann auch aus anderen Instanzen von <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> bestehen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> ist vom Typ <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> oder <see cref="T:System.Reflection.PropertyInfo" /> und stellt keinen <see langword="static" />-Member dar.  

- oder - 
<paramref name="member" /> ist vom Typ <see cref="T:System.Reflection.PropertyInfo" /> und kann nicht gelesen werden.  

- oder - 
<paramref name="member" /> ist vom Typ <see cref="T:System.Reflection.MethodInfo" /> oder <see cref="T:System.Reflection.ConstructorInfo" />, und die Anzahl der Argumente in <paramref name="arguments" /> entspricht nicht der Signatur von <paramref name="member" />.

- oder -

<paramref name="member" /> ist vom Typ <see cref="T:System.Reflection.ConstructorInfo" /> und stellt einen <see langword="static" />-Member dar.  

- oder - 
<paramref name="member" /> ist vom Typ <see cref="T:System.Reflection.FieldInfo" />, und die Anzahl der Argumente in <paramref name="arguments" /> ist nicht 0 (null).</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />-Klasse unter Verwendung der angegebenen Memberinformationen und Argumente sowie des Werts, der angibt, ob die angegebenen Informationen die Instanz vollständig beschreiben.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">Die Memberinformationen für den Deskriptor. Dies kann <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> oder <see cref="T:System.Reflection.PropertyInfo" /> sein. Wenn es sich um <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> oder <see cref="T:System.Reflection.PropertyInfo" /> handelt, muss hierdurch ein <see langword="static" />-Member dargestellt werden.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">Die Auflistung der an den Member zu übergebenden Argumente. Dieser Parameter kann <see langword="null" /> sein oder eine leere Auflistung, wenn keine Argumente vorhanden sind. Die Auflistung kann auch aus anderen Instanzen von <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> bestehen.</param>
      <param name="isComplete" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified information completely describes the instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die angegebenen Informationen die Instanz vollständig beschreiben, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> ist vom Typ <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> oder <see cref="T:System.Reflection.PropertyInfo" /> und stellt keinen <see langword="static" />-Member dar. 
 <paramref name="member" /> ist vom Typ <see cref="T:System.Reflection.PropertyInfo" /> und kann nicht gelesen werden.  
  
 <paramref name="member" /> ist vom Typ <see cref="T:System.Reflection.MethodInfo" /> oder <see cref="T:System.Reflection.ConstructorInfo" />, und die Anzahl der Argumente in <paramref name="arguments" /> entspricht nicht der Signatur von <paramref name="member" />.  
  
 <paramref name="member" /> ist vom Typ <see cref="T:System.Reflection.ConstructorInfo" /> und stellt einen <see langword="static" />-Member dar. 
 <paramref name="member" /> ist vom Typ <see cref="T:System.Reflection.FieldInfo" />, und die Anzahl der Argumente in <paramref name="arguments" /> ist nicht 0 (null).</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary vsli:raw="Invokes this instance descriptor and returns the object the descriptor describes.">Ruft den Deskriptor dieser Instanz auf und gibt das vom Deskriptor beschriebene Objekt zurück.</summary>
      <returns vsli:raw="The object this instance descriptor describes.">Das Objekt, das vom Deskriptor dieser Instanz beschrieben wird.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary vsli:raw="Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.">Ruft eine Auflistung von Argumenten ab, mit der eine Instanz des Objekts neu erstellt werden kann, das der Deskriptor dieser Instanz darstellt.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of arguments that can be used to create the object.">Eine <see cref="T:System.Collections.ICollection" /> von Argumenten, mit der das Objekt erstellt werden kann.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary vsli:raw="Gets a value indicating whether the contents of this &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; completely identify the instance.">Ruft einen Wert ab, der angibt, ob der Inhalt dieses <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> die Instanz vollständig beschreibt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance is completely described; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Instanz vollständig beschrieben wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary vsli:raw="Gets the member information that describes the instance this descriptor is associated with.">Ruft die Memberinformationen ab, die die Instanz beschreiben, der dieser Deskriptor zugeordnet ist.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the instance that this object is associated with.">Eine <see cref="T:System.Reflection.MemberInfo" />, die die Instanz beschreibt, der dieses Objekt zugeordnet ist.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary vsli:raw="Represents a single relationship between an object and a member.">Stellt eine einzelne Beziehung zwischen einem Objekt und einem Member dar.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary vsli:raw="Represents the empty member relationship. This field is read-only.">Stellt die leere Memberbeziehung dar. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />-Klasse.</summary>
      <param name="owner" vsli:raw="The object that owns &lt;paramref name=&quot;member&quot; /&gt;.">Das Objekt, das Besitzer von <paramref name="member" /> ist.</param>
      <param name="member" vsli:raw="The member which is to be related to &lt;paramref name=&quot;owner&quot; /&gt;.">Der Member, für den eine Beziehung zu <paramref name="owner" /> erstellt werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; or &lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> oder <paramref name="member" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance is equal to the specified object representing a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance.">Stellt fest, ob zwei <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />-Instanzen gleich sind.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">Das <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, das mit dem aktuellen <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance and is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> gleich der aktuellen <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equivalent.">Überprüft, ob zwei angegebene <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />-Strukturen äquivalent sind.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the equality operator.">Die <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />-Struktur auf der linken Seite des Gleichheitsoperators.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the equality operator.">Die <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />-Struktur auf der rechten Seite des Gleichheitsoperators.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Dieser Operator gibt <see langword="true" /> zurück, wenn die beiden <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />-Strukturen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different.">Überprüft, ob zwei angegebene <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />-Strukturen unterschiedlich sind.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the inequality operator.">Die <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />-Struktur auf der linken Seite des Ungleichheitsoperators.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the inequality operator.">Die <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />-Struktur auf der rechten Seite des Ungleichheitsoperators.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Dieser Operator gibt <see langword="true" /> zurück, wenn die beiden <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />-Strukturen unterschiedlich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship.">Ruft einen Wert ab, der angibt, ob diese Beziehung der <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />-Beziehung entspricht.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Beziehung der angegebenen <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />-Beziehung entspricht; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary vsli:raw="Gets the related member.">Ruft den zugehörigen Member ab.</summary>
      <returns vsli:raw="The member that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">Der Member, der an <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> übergeben wird.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary vsli:raw="Gets the owning object.">Ruft das besitzende Objekt ab.</summary>
      <returns vsli:raw="The owning object that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">Das besitzende Objekt, das an <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> übergeben wird.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary vsli:raw="Provides the base class for relating one member to another.">Stellt die Basisklasse zum Erstellen von Beziehungen zwischen Membern bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationshipService&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a relationship to the given source relationship.">Ruft eine Beziehung für die angegebene Quellbeziehung ab.</summary>
      <param name="source" vsli:raw="The source relationship.">Die Quellbeziehung.</param>
      <returns vsli:raw="A relationship to &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if no relationship exists.">Eine Beziehung zu <paramref name="source" /> oder <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />, wenn keine Beziehung vorhanden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Creates a relationship between the source object and target relationship.">Erstellt zwischen der Quellobjekt- und der Zielbeziehung eine Beziehung.</summary>
      <param name="source" vsli:raw="The source relationship.">Die Quellbeziehung.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">Die für die Quelle festzulegende Beziehung.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The relationship is not supported by the service.">Die Beziehung wird von dem Dienst nicht unterstützt.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a value indicating whether the given relationship is supported.">Ruft einen Wert ab, der angibt, ob die angegebene Beziehung unterstützt wird.</summary>
      <param name="source" vsli:raw="The source relationship.">Die Quellbeziehung.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">Die für die Quelle festzulegende Beziehung.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a relationship between the given two objects is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine Beziehung zwischen den beiden angegebenen Objekten unterstützt wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">Stellt eine Beziehung zwischen einem Quell- und einem Zielobjekt her.</summary>
      <param name="source" vsli:raw="The source relationship. This is the left-hand side of a relationship assignment.">Die Quellbeziehung. Dabei handelt es sich um die linke Seite einer Beziehungszuweisung.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="source" /> ist leer, oder die Beziehung wird nicht vom Dienst unterstützt.</exception>
      <returns vsli:raw="The current relationship associated with &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if there is no relationship.">Die aktuelle <paramref name="source" /> zugeordnete Beziehung oder <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />, falls keine Beziehung vorhanden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">Stellt eine Beziehung zwischen einem Quell- und einem Zielobjekt her.</summary>
      <param name="sourceOwner" vsli:raw="The owner of a source relationship.">Der Besitzer einer Quellbeziehung.</param>
      <param name="sourceMember" vsli:raw="The member of a source relationship.">Der Member einer Quellbeziehung.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceOwner" /> oder <paramref name="sourceMember" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="sourceOwner" /> oder <paramref name="sourceMember" /> ist leer, oder die Beziehung wird nicht vom Dienst unterstützt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure encapsulating the relationship between a source and target object, or &lt;see langword=&quot;null&quot; /&gt; if there is no relationship.">Eine <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />-Struktur, die die Beziehung zwischen einem Quell- und einem Zielobjekt kapselt, oder <see langword="null" />, falls keine Beziehung vorhanden ist.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event.">Stellt Daten für das <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />-Klasse.</summary>
      <param name="name" vsli:raw="The name to resolve.">Der aufzulösende Name.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary vsli:raw="Gets the name of the object to resolve.">Ruft den Namen des aufzulösenden Objekts ab.</summary>
      <returns vsli:raw="The name of the object to resolve.">Der Name des aufzulösenden Objekts.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary vsli:raw="Gets or sets the object that matches the name.">Ruft das Objekt ab, das mit dem Namen übereinstimmt, oder legt dieses fest.</summary>
      <returns vsli:raw="The object that the name is associated with.">Das Objekt, dem der Name zugeordnet ist.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event of a serialization manager.">Stellt die Methode für die Behandlung des <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />-Ereignisses eines Serialisierungs-Managers dar.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary vsli:raw="Indicates the base serializer to use for a root designer object. This class cannot be inherited.">Gibt das für ein Stammdesignerobjekt zu verwendende Basisserialisierungsprogramm an. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" />-Klasse unter Verwendung der angegebenen Attribute.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">Der voll gekennzeichnete Name des Datentyps des Serialisierungsprogramms.</param>
      <param name="baseSerializerTypeName" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.">Der Name des Basistyps dieses Serialisierungsprogramms. Eine Klasse kann mehrere Serialisierungsprogramme enthalten, da diese verschiedene Basistypen aufweisen.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Serialisierungsprogramm das dynamische Neuladen des Dokuments unterstützt, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" />-Klasse unter Verwendung der angegebenen Attribute.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">Der voll gekennzeichnete Name des Datentyps des Serialisierungsprogramms.</param>
      <param name="baseSerializerType" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.">Der Name des Basistyps dieses Serialisierungsprogramms. Eine Klasse kann mehrere Serialisierungsprogramme enthalten, da diese verschiedene Basistypen aufweisen.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Serialisierungsprogramm das dynamische Neuladen des Dokuments unterstützt, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" />-Klasse unter Verwendung der angegebenen Attribute.</summary>
      <param name="serializerType" vsli:raw="The data type of the serializer.">Der Datentyp des Serialisierungsprogramms.</param>
      <param name="baseSerializerType" vsli:raw="The base type of the serializer. A class can include multiple serializers as they all have different base types.">Der Basistyp des Serialisierungsprogramms. Eine Klasse kann mehrere Serialisierungsprogramme enthalten, da diese verschiedene Basistypen aufweisen.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Serialisierungsprogramm das dynamische Neuladen des Dokuments unterstützt, andernfalls <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary vsli:raw="Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.">Ruft einen Wert ab, der angibt, ob das Stammserialisierungsprogramm das Neuladen des Entwurfsdokuments ohne vorherige Freigabe des Designerhosts unterstützt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root serializer supports reloading; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Stammserialisierungsprogramm das Neuladen unterstützt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the base type of the serializer.">Ruft den voll gekennzeichneten Typnamen für den Basistyp des Serialisierungsprogramms ab.</summary>
      <returns vsli:raw="The name of the base type of the serializer.">Der Name des Basistyps dieses Serialisierungsprogramms.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the serializer.">Ruft den voll gekennzeichneten Typnamen des Serialisierungsprogramms ab.</summary>
      <returns vsli:raw="The name of the type of the serializer.">Der Name des Typs des Serialisierungsprogramms.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary vsli:raw="Gets a unique ID for this attribute type.">Ruft eine eindeutige ID für diesen Attributtyp ab.</summary>
      <returns vsli:raw="An object containing a unique ID for this attribute type.">Ein Objekt, das eine eindeutige ID für diesen Attributtyp enthält.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary vsli:raw="Provides the base class for storing serialization data for the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt;.">Stellt die Basisklasse zum Speichern von Serialisierungsdaten für <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary vsli:raw="Closes the serialization store.">Schließt den Serialisierungsspeicher.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; and optionally releases the managed resources.">Gibt die von <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary vsli:raw="Saves the store to the given stream.">Speichert den Speicher in den angegebenen Stream.</summary>
      <param name="stream" vsli:raw="The stream to which the store will be serialized.">Der Stream, in den der Speicher serialisiert wird.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Gibt alle vom <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> verwendeten Ressourcen frei.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary vsli:raw="Gets a collection of errors that occurred during serialization or deserialization.">Ruft eine Auflistung von Fehlern ab, die während der Serialisierung oder Deserialisierung aufgetreten sind.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains errors that occurred during serialization or deserialization.">Eine <see cref="T:System.Collections.ICollection" /> mit Fehlern, die bei der Serialisierung oder Deserialisierung aufgetreten sind.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary vsli:raw="Provides a simple implementation of the &lt;see cref=&quot;T:System.ComponentModel.Design.IServiceContainer&quot; /&gt; interface. This class cannot be inherited.">Stellt eine einfache Implementierung der <see cref="T:System.ComponentModel.Design.IServiceContainer" />-Schnittstelle bereit. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.ServiceContainer" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class using the specified parent service provider.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.ServiceContainer" />-Klasse unter Verwendung des angegebenen übergeordneten Dienstanbieters.</summary>
      <param name="parentProvider" vsli:raw="A parent service provider.">Ein übergeordneter Dienstanbieter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">Fügt dem Dienstcontainer den angegebenen Dienst hinzu.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Der hinzuzufügende Diensttyp.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">Ein Rückrufobjekt, das den Dienst erstellen kann. Dadurch kann ein Dienst als verfügbar deklariert werden, die Erstellung des Objekts wird jedoch bis zur Anforderung des Dienstes verzögert.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> oder <paramref name="callback" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Ein Dienst vom Typ <paramref name="serviceType" /> ist bereits im Container vorhanden.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">Fügt dem Dienstcontainer den angegebenen Dienst hinzu.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Der hinzuzufügende Diensttyp.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">Ein Rückrufobjekt, das den Dienst erstellen kann. Dadurch kann ein Dienst als verfügbar deklariert werden, die Erstellung des Objekts wird jedoch bis zur Anforderung des Dienstes verzögert.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Dienst allen übergeordneten Dienstcontainern hinzugefügt werden soll, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> oder <paramref name="callback" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Ein Dienst vom Typ <paramref name="serviceType" /> ist bereits im Container vorhanden.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">Fügt dem Dienstcontainer den angegebenen Dienst hinzu.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Der hinzuzufügende Diensttyp.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Eine Instanz des hinzuzufügenden Diensts. Eine Instanz des hinzuzufügenden Dienstes. Dabei muss es sich um ein Objekt handeln, das den mit dem <paramref name="serviceType" />-Parameter angegebenen Typ implementiert oder von diesem erbt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> oder <paramref name="serviceInstance" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Ein Dienst vom Typ <paramref name="serviceType" /> ist bereits im Container vorhanden.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">Fügt dem Dienstcontainer den angegebenen Dienst hinzu.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Der hinzuzufügende Diensttyp.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Eine Instanz des hinzuzufügenden Diensttyps. Eine Instanz des hinzuzufügenden Dienstes. Dabei muss es sich um ein Objekt handeln, das den mit dem <paramref name="serviceType" />-Parameter angegebenen Typ implementiert oder von diesem erbt.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Dienst allen übergeordneten Dienstcontainern hinzugefügt werden soll, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> oder <paramref name="serviceInstance" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Ein Dienst vom Typ <paramref name="serviceType" /> ist bereits im Container vorhanden.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary vsli:raw="Disposes this service container.">Verwirft diesen Dienstcontainer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Disposes this service container.">Verwirft diesen Dienstcontainer.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; is in the process of being disposed of; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der <see cref="T:System.ComponentModel.Design.ServiceContainer" /> gerade verworfen werden soll, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service.">Ruft den angeforderten Dienst ab.</summary>
      <param name="serviceType" vsli:raw="The type of service to retrieve.">Der Typ des abzurufenden Diensts.</param>
      <returns vsli:raw="An instance of the service if it could be found, or &lt;see langword=&quot;null&quot; /&gt; if it could not be found.">Eine Instanz des Dienstes, wenn eine solche gefunden werden konnte, andernfalls <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">Entfernt den angegebenen Diensttyp aus dem Dienstcontainer.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Der Typ des zu entfernenden Diensts.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container.">Entfernt den angegebenen Diensttyp aus dem Dienstcontainer.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Der Typ des zu entfernenden Diensts.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be removed from any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Dienst aus allen übergeordneten Dienstcontainern entfernt werden soll, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary vsli:raw="Gets the default services implemented directly by &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt;.">Ruft die direkt von <see cref="T:System.ComponentModel.Design.ServiceContainer" /> implementierten Standarddienste ab.</summary>
      <returns vsli:raw="The default services.">Die Standarddienste.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary vsli:raw="Provides a callback mechanism that can create an instance of a service on demand.">Stellt einen Rückrufmechanismus bereit, der bei Bedarf eine Instanz eines Dienstes erstellen kann.</summary>
      <param name="container" vsli:raw="The service container that requested the creation of the service.">Der Dienstcontainer, der die Erstellung des Dienstes angefordert hat.</param>
      <param name="serviceType" vsli:raw="The type of service to create.">Der Typ des zu erstellenden Dienstes.</param>
      <returns vsli:raw="The service specified by &lt;paramref name=&quot;serviceType&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the service could not be created.">Der durch <paramref name="serviceType" /> angegebene Dienst oder <see langword="null" />, wenn der Dienst nicht erstellt werden konnte.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary vsli:raw="Defines identifiers for the standard set of commands that are available to most applications.">Definiert Bezeichner für einen Standardsatz von Befehlen, die den meisten Anwendungen zur Verfügung stehen.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignBottom command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl AlignBottom ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignHorizontalCenters command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl AlignHorizontalCenters ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignLeft command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl AlignLeft ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignRight command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl AlignRight ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignToGrid command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl AlignToGrid ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignTop command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl AlignTop ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignVerticalCenters command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl AlignVerticalCenters ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeBottom command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl ArrangeBottom ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeIcons command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl ArrangeIcons ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeRight command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl ArrangeRight ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringForward command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl BringForward ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringToFront command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl BringToFront ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterHorizontally command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl CenterHorizontally ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterVertically command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl CenterVertically ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Copy command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl Copy ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Cut command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl Cut ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Delete command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl Delete ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Document Outline command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl Document Outline ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the F1Help command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl F1Help ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Group command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl Group ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceConcatenate command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl HorizSpaceConcatenate ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceDecrease command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl HorizSpaceDecrease ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceIncrease command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl HorizSpaceIncrease ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceMakeEqual command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl HorizSpaceMakeEqual ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LineupIcons command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl LineupIcons ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LockControls command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl LockControls ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelRedo command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl MultiLevelRedo ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelUndo command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl MultiLevelUndo ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Paste command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl Paste ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Properties command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl Properties ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the PropertiesWindow command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl PropertiesWindow ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Redo command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl Redo ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Replace command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl Replace ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SelectAll command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl SelectAll ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendBackward command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl SendBackward ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendToBack command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl SendToBack ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowGrid command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl ShowGrid ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowLargeIcons command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl ShowLargeIcons ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControl command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl SizeToControl ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlHeight command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl SizeToControlHeight ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlWidth command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl SizeToControlWidth ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToFit command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl SizeToFit ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToGrid command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl SizeToGrid ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SnapToGrid command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl SnapToGrid ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the TabOrder command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl TabOrder ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Undo command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl Undo ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Ungroup command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl Ungroup ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary vsli:raw="Gets the first of a set of verbs. This field is read-only.">Ruft das erste Verb einer Gruppe von Verben ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary vsli:raw="Gets the last of a set of verbs. This field is read-only.">Ruft das letzte Verb einer Gruppe von Verben ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceConcatenate command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl VertSpaceConcatenate ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceDecrease command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl VertSpaceDecrease ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceIncrease command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl VertSpaceIncrease ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceMakeEqual command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl VertSpaceMakeEqual ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewCode command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl ViewCode ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewGrid command. This field is read-only.">Ruft die <see cref="T:System.ComponentModel.Design.CommandID" />-Klasse für den Befehl ViewGrid ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardCommands&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.StandardCommands" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary vsli:raw="Defines GUID identifiers that correspond to the standard set of tool windows that are available in the design environment.">Definiert GUID-Bezeichner, die dem Standardsatz von Toolfenstern entsprechen, die in der Entwurfsumgebung zur Verfügung stehen.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary vsli:raw="Gets the GUID for the object browser. This field is read-only.">Ruft die GUID für den Objektkatalog ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary vsli:raw="Gets the GUID for the output window. This field is read-only.">Ruft die GUID für das Ausgabefenster ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary vsli:raw="Gets the GUID for the solution explorer. This field is read-only.">Ruft die GUID für den Projektmappen-Explorer ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary vsli:raw="Gets the GUID for the Properties window. This field is read-only.">Ruft die GUID für das Eigenschaftenfenster ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary vsli:raw="Gets the GUID for the related links frame. This field is read-only.">Ruft die GUID für den Frame mit verwandten Links ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary vsli:raw="Gets the GUID for the server explorer. This field is read-only.">Ruft die GUID für den Server-Explorer ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary vsli:raw="Gets the GUID for the task list. This field is read-only.">Ruft die GUID für die Aufgabenliste ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary vsli:raw="Gets the GUID for the Toolbox. This field is read-only.">Ruft die GUID für die Toolbox ab. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardToolWindows&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.StandardToolWindows" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary vsli:raw="Provides a type description provider for a specified type.">Stellt einen Typbeschreibungsanbieter für einen angegebenen Typ bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.TypeDescriptionProviderService&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary vsli:raw="Gets a type description provider for the specified object.">Ruft einen Typbeschreibungsanbieter für das angegebene Objekt ab.</summary>
      <param name="instance" vsli:raw="The object to get a type description provider for.">Das Objekt, für das ein Typbeschreibungsanbieter abgerufen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;instance&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, der <paramref name="instance" /> entspricht.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary vsli:raw="Gets a type description provider for the specified type.">Ruft einen Typbeschreibungsanbieter für den angegebenen Typ ab.</summary>
      <param name="type" vsli:raw="The type to get a type description provider for.">Der Typ, für den ein Typbeschreibungsanbieter abgerufen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;type&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, der <paramref name="type" /> entspricht.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary vsli:raw="Defines identifiers for a set of technologies that designer hosts support.">Definiert Bezeichner für eine Gruppe von Technologien, die von Designerhosts unterstützt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary vsli:raw="Specifies the default view technology support.&#xA;        &#xA;The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as Visual Studio provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a &lt;see cref=&quot;T:System.Windows.Forms.Control&quot; /&gt; instance.">Gibt die Standardunterstützung für die Ansichtstechnologie an.
        
Der Stammdesigner kann Objekte jedes Typs zurückgeben, aber das Objekt muss mit einem Adapter für die Technologie des Hosts kompatibel sein. Hostumgebungen wie Visual Studio ermöglichen das Einbinden neuer Ansichtstechnologieadapter. Das Standardansichtsobjekt für den Windows Forms-Designer ist eine <see cref="T:System.Windows.Forms.Control" />-Instanz.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary vsli:raw="Represents a mode in which the view object is passed directly to the development environment.&#xA;        &#xA;The view object must implement any interfaces the development environment requires. The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through the Visual Studio VSI (Visual Studio Integration) program. The Visual Studio development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.">Stellt einen Modus dar, in dem das Ansichtsobjekt direkt an die Entwicklungsumgebung übergeben wird.
        
Das Ansichtsobjekt muss alle Schnittstellen implementieren, die die Entwicklungsumgebung erfordert. Die Visual Studio-Entwicklungsumgebung unterstützt Ansichtsobjekte, bei denen es sich entweder um ein ActiveX-Steuerelement, ein aktives Dokument oder ein Objekt handelt, das die IVsWindowPane-Schnittstelle implementiert, die über das Visual Studio-VSI-Programm (Visual Studio Integration) verfügbar ist. Die Entwicklungsumgebung von Visual Studio bietet Unterstützung für diese Ansichtstechnologie. Diese Ansichtstechnologie wird nicht unbedingt in allen Entwicklungsumgebungen unterstützt.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary vsli:raw="Represents a mode in which a Windows Forms control object provides the display for the root designer. The designer host fills the development environment document window with the Windows Forms control.">Stellt einen Modus dar, in dem ein Windows Forms-Steuerelementobjekt die Anzeige für den Stammdesigner bereitstellt. Der Designerhost füllt das Dokumentfenster der Entwicklungsumgebung mit dem Windows Forms-Steuerelement.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary vsli:raw="&lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; marks a component's visibility. If &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Yes&quot; /&gt; is present, a visual designer can show this component on a designer.">
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> markiert die Sichtbarkeit einer Komponente. Wenn <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" /> vorhanden ist, kann ein visueller Designer diese Komponente in einem Designer anzeigen.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary vsli:raw="The default visibility which is &lt;see langword=&quot;Yes&quot; /&gt;.">Die Standardsichtbarkeit <see langword="Yes" />.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary vsli:raw="Marks a component as not visible in a visual designer.">Markiert eine Komponente in einem visuellen Designer als nicht sichtbar.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary vsli:raw="Marks a component as visible in a visual designer.">Markiert eine Komponente in einem visuellen Designer als sichtbar.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; set to the default value of &lt;see langword=&quot;false&quot; /&gt;.">Erstellt ein neues <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />-Element, das auf den Standardwert <see langword="false" /> festgelegt ist.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; with the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property set to the given value in &lt;paramref name=&quot;visible&quot; /&gt;.">Erstellt ein neues <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />, dessen <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" />-Eigenschaft auf den in <paramref name="visible" /> angegebenen Wert festgelegt ist.</summary>
      <param name="visible" vsli:raw="The value that the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property will be set against.">Der Wert, auf den die <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" />-Eigenschaft festgelegt wird.</param>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <param name="obj" vsli:raw="An Object to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Ein Objekt für den Vergleich mit dieser Instanz oder ein Nullverweis (<see langword="Nothing" /> in Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> dem Typ und dem Wert dieser Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value.">Ruft einen Wert ab, der angibt, ob diese Instanz gleich dem <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />-Wert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz gleich dem <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />-Wert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary vsli:raw="Gets or sets whether the component should be shown at design time.">Ruft ab oder legt fest, ob die Komponente zur Entwurfszeit angezeigt werden soll.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this component should be shown at design time, or &lt;see langword=&quot;false&quot; /&gt; if it shouldn't.">
        <see langword="true" />, wenn diese Komponente zur Entwurfszeit angezeigt werden soll, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary vsli:raw="Provides a type converter to convert double-precision, floating point number objects to and from various other representations.">Stellt einen Typkonverter bereit, mit dem Objekte für Gleitkommazahlen doppelter Genauigkeit in andere und aus anderen Darstellungen konvertiert werden können.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DoubleConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.DoubleConverter" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Enum&quot; /&gt; objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von <see cref="T:System.Enum" />-Objekten in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EnumConverter&quot; /&gt; class for the given type.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.EnumConverter" />-Klasse für den angegebenen Typ.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of enumeration to associate with this enumeration converter.">Eine <see cref="T:System.Type" />-Klasse, die den Typ der Enumeration darstellt, der diesem Enumerationskonverter zugeordnet werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to an enumeration object using the specified context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt vom angegebenen Quelltyp unter Verwendung des angegebenen Kontexts in ein Enumerationsobjekt konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Eine <see cref="T:System.Type" />-Klasse, die den Ausgangstyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Eine <see cref="T:System.Type" />-Klasse, die den Zieltyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to an enumeration object.">Konvertiert das angegebene Wertobjekt in ein Enumerationsobjekt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Eine optionale <see cref="T:System.Globalization.CultureInfo" />-Klasse. Erfolgt hier keine Angabe, wird die aktuelle Kultur angenommen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> ist kein gültiger Wert für den Zieltyp.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten <paramref name="value" />-Parameter darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Konvertiert das angegebene Wertobjekt in den angegebenen Zieltyp.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Eine optionale <see cref="T:System.Globalization.CultureInfo" />-Klasse. Erfolgt hier keine Angabe, wird die aktuelle Kultur angenommen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Die <see cref="T:System.Type" />-Klasse, in die der Wert konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the enumeration.">
        <paramref name="value" /> ist kein gültiger Wert für die Enumeration.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten <paramref name="value" />-Parameter darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">Ruft eine Auflistung von Standardwerten für den Datentyp ab, für den diese Bestätigung vorgesehen ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Eine <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, die einen Standardsatz gültiger Werte enthält, oder <see langword="null" />, wenn der Datentyp einen Standardsatz von Werten nicht unterstützt.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list using the specified context.">Ruft einen Wert ab, der angibt, ob die unter Verwendung des angegebenen Kontexts von der <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />-Methode zurückgegebene Auflistung von Standardwerten eine exklusive Liste darstellt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" />, wenn die von der <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />-Methode zurückgegebene <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> eine vollständige Liste möglicher Werte darstellt, oder <see langword="false" />, wenn andere Werte möglich sind.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Ruft einen Wert ab, der angibt, ob dieses Objekt eine Standardmenge von Werten unterstützt, die unter Verwendung des angegebenen Kontexts aus einer Liste ausgewählt werden können.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, weil die <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />-Schnittstelle aufgerufen werden muss, um eine vom Objekt unterstützte Standardmenge von Werten zu ermitteln. Diese Methode gibt nie <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Gets a value indicating whether the given object value is valid for this type.">Ruft einen Wert ab, der angibt, ob der für das Objekt angegebene Wert für diesen Typ gültig ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test.">Der zu überprüfende <see cref="T:System.Object" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der angegebene Wert für dieses Objekt gültig ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; that can be used to sort the values of the enumeration.">Ruft eine <see cref="T:System.Collections.IComparer" />-Schnittstelle ab, mit der die Werte der Enumeration sortiert werden können.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; for sorting the enumeration values.">Eine <see cref="T:System.Collections.IComparer" />-Schnittstelle für das Sortieren der Enumerationswerte.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary vsli:raw="Specifies the type of the enumerator this converter is associated with.">Gibt den Typ des Enumerators an, dem dieser Konverter zugeordnet wurde.</summary>
      <returns vsli:raw="The type of the enumerator this converter is associated with.">Der Typ des Enumerators, dem dieser Konverter zugeordnet wurde.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">Ruft eine <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />-Klasse auf, die die möglichen Werte für die Enumeration angibt, oder legt eine solche Klasse fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">Eine <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />-Klasse, die die möglichen Werte für die Enumeration angibt.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary vsli:raw="Provides information about an event.">Enthält Informationen über ein Ereignis.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse mit dem Namen und den Attributen im angegebenen <see cref="T:System.ComponentModel.MemberDescriptor" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the event and its attributes.">Ein <see cref="T:System.ComponentModel.MemberDescriptor" />, der den Namen des Ereignisses und dessen Attribute enthält.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse mit dem Namen im angegebenen <see cref="T:System.ComponentModel.MemberDescriptor" /> und den Attributen im <see cref="T:System.ComponentModel.MemberDescriptor" /> sowie dem <see cref="T:System.Attribute" />-Array.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">Eine <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse mit dem Namen des Members und dessen Attributen.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes you want to add to this event description.">Ein <see cref="T:System.Attribute" />-Array mit den Attributen, die Sie dieser Ereignisbeschreibung hinzufügen möchten.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the specified name and attribute array.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse mit dem angegebenen Namen und Attributarray.</summary>
      <param name="name" vsli:raw="The name of the event.">Der Name des Ereignisses.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the event attributes.">Ein Array vom Typ <see cref="T:System.Attribute" />, das die Ereignisattribute enthält.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, binds the event to the component.">Bindet beim Überschreiben in einer abgeleiteten Klasse das Ereignis an die Komponente.</summary>
      <param name="component" vsli:raw="A component that provides events to the delegate.">Eine Komponente, die Ereignisse für den Delegaten bereitstellt.</param>
      <param name="value" vsli:raw="A delegate that represents the method that handles the event.">Ein Delegat, der die Methode für die Ereignisbehandlung darstellt.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.">Hebt beim Überschreiben in einer abgeleiteten Klasse die Bindung des Delegaten mit der Komponente auf, sodass der Delegat keine weiteren Ereignisse von der Komponente empfängt.</summary>
      <param name="component" vsli:raw="The component that the delegate is bound to.">Die Komponente, an die der Delegat gebunden ist.</param>
      <param name="value" vsli:raw="The delegate to unbind from the component.">Der Delegat, dessen Bindung an die Komponente aufgehoben werden soll.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of component this event is bound to.">Ruft beim Überschreiben in einer abgeleiteten Klasse den Typ der Komponente ab, an die dieses Ereignis gebunden ist.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component the event is bound to.">Ein <see cref="T:System.Type" />, der den Typ der Komponente darstellt, an die das Ereignis gebunden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary vsli:raw="When overridden in a derived class, gets the type of delegate for the event.">Ruft beim Überschreiben in einer abgeleiteten Klasse den Typ des Delegaten für das Ereignis ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of delegate for the event.">Ein <see cref="T:System.Type" />, der den Typ des Delegaten für das Ereignis darstellt.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.">Ruft beim Überschreiben in einer abgeleiteten Klasse einen Wert ab, der angibt, ob der Ereignisdelegat ein Multicastdelegat ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event delegate is multicast; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Ereignisdelegat ein Multicastdelegat ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.ComponentModel.EventDescriptor" />-Objekten dar.</summary>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection to use, rather than creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt eine leere Auflistung an, die Sie verwenden können, um so keine neue Auflistung ohne Elemente erstellen zu müssen. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.EventDescriptorCollection" />-Klasse mit dem angegebenen Array von <see cref="T:System.ComponentModel.EventDescriptor" />-Objekten.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">Ein Array vom Typ <see cref="T:System.ComponentModel.EventDescriptor" />, das die Ereignisse für diese Auflistung bereitstellt.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects. The collection is optionally read-only.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.EventDescriptorCollection" />-Klasse mit dem angegebenen Array von <see cref="T:System.ComponentModel.EventDescriptor" />-Objekten. Die Auflistung kann bei Bedarf mit Schreibschutz versehen werden.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">Ein Array vom Typ <see cref="T:System.ComponentModel.EventDescriptor" />, das die Ereignisse für diese Auflistung bereitstellt.</param>
      <param name="readOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify a read-only collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Auflistung schreibgeschützt sein soll, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the end of the collection.">Fügt am Ende der Auflistung eine <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse hinzu.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to add to the collection.">Eine der Auflistung hinzuzufügende <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
      <returns vsli:raw="The position of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">Die Position der <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse in der Auflistung.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary vsli:raw="Removes all objects from the collection.">Entfernt alle Objekte aus der Auflistung.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Gibt zurück, ob die Auflistung die angegebene <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">Die in der Auflistung zu suchende <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the &lt;paramref name=&quot;value&quot; /&gt; parameter given; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung den angegebenen <paramref name="value" />-Parameter enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Gets the description of the event with the specified name in the collection.">Ruft die Beschreibung des Ereignisses mit dem angegebenen Namen in der Auflistung ab.</summary>
      <param name="name" vsli:raw="The name of the event to get from the collection.">Der Name des Ereignisses, das aus der Auflistung abgerufen werden soll.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Groß- und Kleinschreibung des Ereignisses ignoriert werden soll, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">Die <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse mit dem angegebenen Namen oder <see langword="null" />, wenn das Ereignis nicht vorhanden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Ruft einen Enumerator für diese <see cref="T:System.ComponentModel.EventDescriptorCollection" /> ab.</summary>
      <returns vsli:raw="An enumerator that implements &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Ein Enumerator, der <see cref="T:System.Collections.IEnumerator" /> implementiert.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Gibt den Index des angegebenen <see cref="T:System.ComponentModel.EventDescriptor" /> zurück.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">Die in der Auflistung zu suchende <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">Der Index der angegebenen <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse in der Auflistung.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Inserts an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the collection at a specified index.">Fügt in der Auflistung eine <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse am angegebenen Index ein.</summary>
      <param name="index" vsli:raw="The index within the collection in which to insert the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Der Index in der Auflistung, an dem der <paramref name="value" />-Parameter eingefügt werden soll.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to insert into the collection.">Eine <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse, die in die Auflistung eingefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Sortiert die Member dieser <see cref="T:System.ComponentModel.EventDescriptorCollection" />-Klasse unter Verwendung der angegebenen <see cref="T:System.Collections.IComparer" />-Schnittstelle.</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Ein Comparer zum Sortieren der <see cref="T:System.ComponentModel.EventDescriptor" />-Objekte in dieser Auflistung.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Sortiert die Member dieser <see cref="T:System.ComponentModel.EventDescriptorCollection" />-Auflistung. Die angegebene Reihenfolge wird zuerst angewendet, darauf folgt die Standardsortierung für diese Auflistung, die i. d. R. alphabetisch erfolgt.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Ein Array von Zeichenfolgen, das die Sortierreihenfolge der <see cref="T:System.ComponentModel.EventDescriptor" />-Objekte in dieser Auflistung beschreibt.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; from the collection.">Entfernt den angegebenen <see cref="T:System.ComponentModel.EventDescriptor" /> aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove from the collection.">Die aus der Auflistung zu entfernende <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; at the specified index from the collection.">Entfernt <see cref="T:System.ComponentModel.EventDescriptor" /> am angegebenen Index aus der Auflistung.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove.">Der Index der zu entfernenden <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the default sort for this collection, which is usually alphabetical.">Sortiert die Member dieser <see cref="T:System.ComponentModel.EventDescriptorCollection" />-Auflistung unter Verwendung der Standardsortierung für diese Auflistung, die i. d. R. alphabetisch ist.</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Die neue <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Sortiert die Member dieser <see cref="T:System.ComponentModel.EventDescriptorCollection" />-Klasse unter Verwendung der angegebenen <see cref="T:System.Collections.IComparer" />-Schnittstelle.</summary>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Eine <see cref="T:System.Collections.IComparer" />-Schnittstelle, die zum Sortieren der <see cref="T:System.ComponentModel.EventDescriptor" />-Objekte in dieser Auflistung verwendet werden soll.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Die neue <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order.">Sortiert die Member dieser <see cref="T:System.ComponentModel.EventDescriptorCollection" />-Auflistung, wenn eine Sortierreihenfolge angegeben ist.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">Ein Array von Zeichenfolgen, das die Sortierreihenfolge für die <see cref="T:System.ComponentModel.EventDescriptor" />-Objekte in der Auflistung beschreibt.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Die neue <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order and an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Sortiert die Member dieser <see cref="T:System.ComponentModel.EventDescriptorCollection" />-Auflistung, wenn eine Sortierreihenfolge und eine <see cref="T:System.Collections.IComparer" />-Schnittstelle angegeben sind.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">Ein Array von Zeichenfolgen, das die Sortierreihenfolge für die <see cref="T:System.ComponentModel.EventDescriptor" />-Objekte in der Auflistung beschreibt.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Eine <see cref="T:System.Collections.IComparer" />-Schnittstelle, die zum Sortieren der <see cref="T:System.ComponentModel.EventDescriptor" />-Objekte in dieser Auflistung verwendet werden soll.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Die neue <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Kopiert die Elemente der Auflistung in ein <see cref="T:System.Array" />, beginnend bei einem bestimmten <see cref="T:System.Array" />-Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Elemente ist. Für das <see cref="T:System.Array" /> muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Ein <see cref="T:System.Collections.IEnumerator" />, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">Fügt der Auflistung ein Element hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the collection.">Der der Auflistung hinzuzufügende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
      <returns vsli:raw="The position into which the new element was inserted.">Die Position, an der das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all the items from the collection.">Entfernt alle Elemente aus der Auflistung.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Ermittelt, ob die Auflistung einen bestimmten Wert enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Die <see cref="T:System.Object" />, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die <see cref="T:System.Object" />-Klasse in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">Bestimmt den Index eines bestimmten Elements in der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Die <see cref="T:System.Object" />, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the collection at the specified index.">Fügt am angegebenen Index ein Element in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">Die in die Auflistung einzufügende <see cref="T:System.Object" />-Klasse.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Entfernt das erste Vorkommen eines bestimmten Objekts aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">Die aus der Auflistung zu entfernende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Entfernt das Element am angegebenen Index.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Der nullbasierte Index des zu entfernenden Elements.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of event descriptors in the collection.">Ruft die Anzahl der Ereignisdeskriptoren in der Auflistung ab.</summary>
      <returns vsli:raw="The number of event descriptors in the collection.">Die Anzahl der Ereignisdeskriptoren in der Auflistung.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the event with the specified index number.">Ruft das Ereignis mit der angegebenen Indexnummer ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The zero-based index number of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">Die nullbasierte Indexnummer des <see cref="T:System.ComponentModel.EventDescriptor" />, der abgerufen oder festgelegt werden soll.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" /> ist kein gültiger Index für <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified index number.">Die <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse mit der angegebenen Indexnummer.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the event with the specified name.">Ruft das Ereignis mit dem angegebenen Namen ab oder legt dieses fest.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">Der Name des abzurufenden oder festzulegenden <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">Die <see cref="T:System.ComponentModel.EventDescriptor" />-Klasse mit dem angegebenen Namen oder <see langword="null" />, wenn das Ereignis nicht vorhanden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Ruft die Anzahl der Elemente in der Auflistung ab.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Die Anzahl der in der Auflistung enthaltenen Elemente.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized.">Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung synchronisiert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf die Auflistung synchronisiert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ruft ein Objekt ab, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Ein Objekt, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Ruft einen Wert ab, der angibt, ob die Auflistung eine feste Größe aufweist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung eine feste Größe hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Ruft das Element am angegebenen Index ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Der nullbasierte Index des Elements, das abgerufen oder festgelegt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> ist kleiner als 0.  
  
- oder - 
 <paramref name="index" /> ist größer oder gleich <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
      <returns vsli:raw="The element at the specified index.">Das Element am angegebenen Index.</returns>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary vsli:raw="Provides a type converter to convert expandable objects to and from various other representations.">Stellt einen Typkonverter bereit, um erweiterbare Objekte in andere und aus anderen Darstellungen zu konvertieren.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExpandableObjectConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ExpandableObjectConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of object specified by the value parameter.">Ruft eine Auflistung von Eigenschaften für den durch den Wertparameter angegebenen Typ von Objekt ab.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of object to get the properties for.">Ein <see cref="T:System.Object" />, das den Typ von Objekt angibt, für das die Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Ein Array vom Typ <see cref="T:System.Attribute" />, das als Filter verwendet wird.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit den Eigenschaften, die für die Komponente verfügbar sind, oder <see langword="null" />, wenn keine Eigenschaften vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">Ruft einen Wert ab, der angibt, ob dieses Objekt Eigenschaften unter Verwendung des angegebenen Kontexts unterstützt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, da <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> aufgerufen werden muss, um die Eigenschaften dieses Objekts zu ermitteln. Diese Methode gibt nie <see langword="false" /> zurück.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary vsli:raw="Specifies a property that is offered by an extender provider. This class cannot be inherited.">Gibt eine Eigenschaft an, die von einem Extenderanbieter angeboten wird. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExtenderProvidedPropertyAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Ein <see cref="T:System.Object" /> für den Vergleich mit dieser Instanz oder ein Nullverweis (<see langword="Nothing" /> in Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> dem Typ und dem Wert dieser Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary vsli:raw="Provides an indication whether the value of this instance is the default value for the derived class.">Gibt an, ob der Wert dieser Instanz der Standardwert für die abgeleitete Klasse ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz das Standardattribut für die Klasse ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary vsli:raw="Gets the property that is being provided.">Ruft die Eigenschaft ab, die bereitgestellt wird.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; encapsulating the property that is being provided.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" />, der die Eigenschaft kapselt, die bereitgestellt wird.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary vsli:raw="Gets the extender provider that is providing the property.">Ruft den Extenderanbieter ab, der die Eigenschaft bereitstellt.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that is providing the property.">Der <see cref="T:System.ComponentModel.IExtenderProvider" />, der die Eigenschaft bereitstellt.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary vsli:raw="Gets the type of object that can receive the property.">Ruft den Objekttyp ab, der die Eigenschaft empfangen kann.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; describing the type of object that can receive the property.">Ein <see cref="T:System.Type" />, der den Objekttyp beschreibt, der die Eigenschaft empfangen kann.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Guid&quot; /&gt; objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von <see cref="T:System.Guid" />-Objekten in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.GuidConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.GuidConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a GUID object using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt vom angegebenen Quelltyp unter Verwendung des Kontexts in ein GUID-Objekt konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Eine <see cref="T:System.Type" />-Klasse, die den Ausgangstyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Eine <see cref="T:System.Type" />-Klasse, die den Zieltyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a GUID object.">Konvertiert das angegebene Objekt in ein GUID-Objekt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Eine optionale <see cref="T:System.Globalization.CultureInfo" />-Klasse. Erfolgt hier keine Angabe, wird die aktuelle Kultur angenommen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten <paramref name="value" />-Parameter darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">Konvertiert das angegebene Objekt in einen anderen Typ.</summary>
      <param name="context" vsli:raw="A formatter context.">Ein Formatierungskontext.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Die Kultur, in die der <paramref name="value" /> konvertiert wird.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Der Typ, in den das Objekt konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="The converted object.">Das konvertierte Objekt.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary vsli:raw="Provides data for events that can be handled completely in an event handler.">Stellt Daten für Ereignisse bereit, die vollständig in einem Ereignishandler behandelt werden können.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with a default &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property value of &lt;see langword=&quot;false&quot; /&gt;.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.HandledEventArgs" />-Klasse mit dem <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />-Standardeigenschaftswert <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with the specified default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.HandledEventArgs" />-Klasse mit dem angegebenen Standardwert für die <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />-Eigenschaft.</summary>
      <param name="defaultHandledValue" vsli:raw="The default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">Der Standardwert für die <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />-Eigenschaft.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.">Ruft einen Wert ab, der angibt, ob der Ereignishandler das Ereignis vollständig behandelt hat oder ob das System mit der eigenen Verarbeitung fortfahren soll, oder legt diesen Wert fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been completely handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Ereignis vollständig behandelt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary vsli:raw="Represents a method that can handle events which may or may not require further processing after the event handler has returned.">Stellt eine Methode dar, die Ereignisse behandeln kann, für die nach der Rückgabe des Ereignishandlers eine weitere Verarbeitung erforderlich bzw. nicht erforderlich ist.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.HandledEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary vsli:raw="Provides the features required to support both complex and simple scenarios when binding to a data source.">Stellt die Features bereit, die für die Unterstützung komplexer wie auch einfacher Szenarien mit Bindung an eine Datenquelle erforderlich sind.</summary>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary vsli:raw="Occurs when the list changes or an item in the list changes.">Tritt ein, wenn die Liste oder ein Element der Liste geändert wird.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the indexes used for searching.">Fügt den Indizes, die für die Suche verwendet werden, den <see cref="T:System.ComponentModel.PropertyDescriptor" /> hinzu.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the indexes used for searching.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, der den Indizes hinzugefügt werden soll, die für die Suche verwendet werden.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary vsli:raw="Adds a new item to the list.">Fügt der Liste ein neues Element hinzu.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowNew&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> ist <see langword="false" />.</exception>
      <returns vsli:raw="The item added to the list.">Das der Liste hinzugefügte Element.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;.">Sortiert die Liste entsprechend einem <see cref="T:System.ComponentModel.PropertyDescriptor" /> und einer <see cref="T:System.ComponentModel.ListSortDirection" />.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, nach dem sortiert werden soll.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.ListSortDirection" />-Werte.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> ist <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Returns the index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Gibt den Index der Zeile mit dem angegebenen <see cref="T:System.ComponentModel.PropertyDescriptor" /> zurück.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, in dem gesucht werden soll.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;property&quot; /&gt; parameter to search for.">Der Wert des <paramref name="property" />-Parameters, nach dem gesucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> ist <see langword="false" />.</exception>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Der Index der Zeile mit dem angegebenen <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the indexes used for searching.">Entfernt den <see cref="T:System.ComponentModel.PropertyDescriptor" /> aus den Indizes, die für die Suche verwendet werden.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, der aus den für die Suche verwendeten Indizes entfernt werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary vsli:raw="Removes any sort applied using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">Entfernt alle Sortierungen, die unter Verwendung von <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> angewendet wurden.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> ist <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary vsli:raw="Gets whether you can update items in the list.">Ruft ab, ob Elemente der Liste aktualisiert werden können.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can update the items in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Elemente der Liste aktualisiert werden können, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary vsli:raw="Gets whether you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">Ruft ab, ob der Liste mithilfe von <see cref="M:System.ComponentModel.IBindingList.AddNew" /> Elemente hinzugefügt werden können.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Sie der Liste mithilfe von <see cref="M:System.ComponentModel.IBindingList.AddNew" /> Elemente hinzufügen können, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary vsli:raw="Gets whether you can remove items from the list, using &lt;see cref=&quot;M:System.Collections.IList.Remove(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.Collections.IList.RemoveAt(System.Int32)&quot; /&gt;.">Ruft ab, ob Elemente unter Verwendung von <see cref="M:System.Collections.IList.Remove(System.Object)" /> oder <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" /> aus der Liste entfernt werden können.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Elemente aus der Liste entfernt werden können, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary vsli:raw="Gets whether the items in the list are sorted.">Ruft ab, ob die Element in der Liste sortiert werden.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> ist <see langword="false" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> aufgerufen wurde und <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> nicht aufgerufen wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary vsli:raw="Gets the direction of the sort.">Ruft die Sortierrichtung ab.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> ist <see langword="false" />.</exception>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.ListSortDirection" />-Werte.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">Ruft den <see cref="T:System.ComponentModel.PropertyDescriptor" /> ab, der für die Sortierung verwendet wird.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> ist <see langword="false" />.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, der für die Sortierung verwendet wird.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary vsli:raw="Gets whether a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or an item in the list changes.">Ruft ab, ob bei Änderungen der Liste oder eines Elements ein <see cref="E:System.ComponentModel.IBindingList.ListChanged" />-Ereignis ausgelöst wird.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn bei Änderungen der Liste oder eines Elements ein <see cref="E:System.ComponentModel.IBindingList.ListChanged" />-Ereignis ausgelöst wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary vsli:raw="Gets whether the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method.">Ruft ab, ob die Liste die Suche mit der <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />-Methode unterstützt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Liste die Suche mit der <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />-Methode unterstützt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary vsli:raw="Gets whether the list supports sorting.">Ruft ab, ob die Liste die Sortierung unterstützt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Liste die Sortierung unterstützt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary vsli:raw="Extends the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; interface by providing advanced sorting and filtering capabilities.">Erweitert die <see cref="T:System.ComponentModel.IBindingList" />-Schnittstelle durch die Bereitstellung erweiterter Sortier- und Filterfunktionen.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary vsli:raw="Sorts the data source based on the given &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">Sortiert die Daten anhand der angegebenen <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
      <param name="sorts" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; containing the sorts to apply to the data source.">Die <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> mit den Sortierbeschreibungen, die auf die Datenquelle angewendet werden sollen.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary vsli:raw="Removes the current filter applied to the data source.">Entfernt den gegenwärtig auf die Datenquelle angewendeten Filter.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary vsli:raw="Gets or sets the filter to be used to exclude items from the collection of items returned by the data source.">Ruft den Filter ab, mit dem Elemente aus der Sammlung von Elementen, die von der Datenquelle zurückgegeben wird, ausgeschlossen werden, oder legt diesen fest.</summary>
      <returns vsli:raw="The string used to filter items out in the item collection returned by the data source.">Die Zeichenfolge, anhand derer die Elemente in der Auflistung von Elementen, die von der Datenquelle zurückgegeben wird, ausgefiltert werden.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary vsli:raw="Gets the collection of sort descriptions currently applied to the data source.">Ruft die Auflistung der momentan auf die Datenquelle angewendeten Sortierbeschreibungen ab.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; currently applied to the data source.">Die momentan auf die Datenquelle angewendete <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary vsli:raw="Gets a value indicating whether the data source supports advanced sorting.">Ruft einen Wert ab, der angibt, ob die Datenquelle erweiterte Sortierung unterstützt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports advanced sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Datenquelle erweiterte Sortierung unterstützt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary vsli:raw="Gets a value indicating whether the data source supports filtering.">Ruft einen Wert ab, der angibt, ob die Datenquelle die Filterung unterstützt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports filtering; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Datenquelle Filterung unterstützt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary vsli:raw="Adds transactional capability when adding a new item to a collection.">Fügt beim Erweitern einer Auflistung um ein neues Element Transaktionsfähigkeit hinzu.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item from the collection.">Entfernt ein anstehendes neues Element aus der Auflistung.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">Der Index des Elements, das der Auflistung hinzugefügt wurde.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">Übergibt ein anstehendes neues Element an die Auflistung.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">Der Index des Elements, das der Auflistung hinzugefügt wurde.</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary vsli:raw="Provides a top-level mapping layer between a COM object and a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Stellt eine Zuordnungsebene auf oberster Ebene zwischen einem COM-Objekt und <see cref="T:System.ComponentModel.TypeDescriptor" /> bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary vsli:raw="Gets the attributes for the specified component.">Ruft die Attribute für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The component to get attributes for.">Die Komponente, für die Attribute abgerufen werden sollen.</param>
      <returns vsli:raw="A collection of attributes for &lt;paramref name=&quot;component&quot; /&gt;.">Eine Auflistung von Attributen für <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary vsli:raw="Gets the class name for the specified component.">Ruft den Klassennamen für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The component to get the class name for.">Die Komponente, für die der Klassenname abgerufen werden soll.</param>
      <returns vsli:raw="The name of the class that corresponds with &lt;paramref name=&quot;component&quot; /&gt;.">Der Name der Klasse, die <paramref name="component" /> entspricht.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary vsli:raw="Gets the type converter for the specified component.">Ruft den Typkonverter für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The component to get the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for.">Die Komponente, für die der <see cref="T:System.ComponentModel.TypeConverter" /> abgerufen werden soll.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for &lt;paramref name=&quot;component&quot; /&gt;.">Das <see cref="T:System.ComponentModel.TypeConverter" /> für <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Gets the default event for the specified component.">Ruft das Standardereignis für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The component to get the default event for.">Die Komponente, für die das Standardereignis abgerufen werden soll.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default event.">Ein <see cref="T:System.ComponentModel.EventDescriptor" />, der den Standardwert von <paramref name="component" /> darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Gets the default property for the specified component.">Ruft die Standardeigenschaft für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Die Komponente, für die die Standardeigenschaft abgerufen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default property.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" />, der die Standardeigenschaft von <paramref name="component" /> darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets the editor for the specified component.">Ruft den Editor für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Die Komponente, für die der Editor abgerufen werden soll.</param>
      <param name="baseEditorType" vsli:raw="The base type of the editor for &lt;paramref name=&quot;component&quot; /&gt;.">Der Basistyp des Editors für <paramref name="component" />.</param>
      <returns vsli:raw="The editor for &lt;paramref name=&quot;component&quot; /&gt;.">Der Editor für <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary vsli:raw="Gets the events for the specified component.">Ruft die Ereignisse für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The component to get events for.">Die Komponente, für die die Ereignisse abgerufen werden sollen.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Eine Auflistung von Ereignisdeskriptoren für <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the events with the specified attributes for the specified component.">Ruft die Ereignisse mit den angegebenen Attributen für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The component to get events for.">Die Komponente, für die die Ereignisse abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="The attributes used to filter events.">Die Attribute, mit denen Ereignisse gefiltert werden.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Eine Auflistung von Ereignisdeskriptoren für <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">Ruft den Namen der angegebenen Komponente ab.</summary>
      <param name="component" vsli:raw="The component to get the name of.">Der Komponente, deren Name abgerufen werden soll.</param>
      <returns vsli:raw="The name of &lt;paramref name=&quot;component&quot; /&gt;.">Der Name von <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the properties with the specified attributes for the specified component.">Ruft die Eigenschaften mit den angegebenen Attributen für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The component to get events for.">Die Komponente, für die die Ereignisse abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="The attributes used to filter properties.">Die Attribute, mit denen Eigenschaften gefiltert werden.</param>
      <returns vsli:raw="A collection of property descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Eine Auflistung von Eigenschaftendeskriptoren für <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified dispatch identifier.">Ruft den Wert der Eigenschaft ab, die über den angegebenen Dispatchbezeichner verfügt.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">Das Objekt, zu dem die Eigenschaft gehört.</param>
      <param name="dispid" vsli:raw="The dispatch identifier.">Der Dispatchbezeichner.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">Ein als Verweis übergebener <see cref="T:System.Boolean" />, der darstellt, ob die Eigenschaft abgerufen wurde.</param>
      <returns vsli:raw="The value of the property that has the specified dispatch identifier.">Der Wert der Eigenschaft, die über den angegebenen Dispatchbezeichner verfügt.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified name.">Ruft den Wert der Eigenschaft mit dem angegebenen Namen ab.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">Das Objekt, zu dem die Eigenschaft gehört.</param>
      <param name="propertyName" vsli:raw="The name of the property.">Den Namen der Eigenschaft.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">Ein als Verweis übergebener <see cref="T:System.Boolean" />, der darstellt, ob die Eigenschaft abgerufen wurde.</param>
      <returns vsli:raw="The value of the property that has the specified name.">Der Wert der Eigenschaft mit dem angegebenen Namen.</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary vsli:raw="Provides an interface that supplies dynamic custom type information for an object.">Stellt eine Schnittstelle bereit, die dynamische benutzerdefinierte Typinformationen für ein Objekt angibt.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for this instance of a component.">Gibt eine Auflistung benutzerdefinierter Attribute für diese Instanz einer Komponente zurück.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for this object.">Eine <see cref="T:System.ComponentModel.AttributeCollection" />, die die Attribute für dieses Objekt enthält.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the class name of this instance of a component.">Gibt den Klassennamen dieser Instanz einer Komponente zurück.</summary>
      <returns vsli:raw="The class name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the class does not have a name.">Der Klassenname des Objekts oder <see langword="null" />, wenn die Klasse keinen Namen besitzt.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of this instance of a component.">Gibt den Namen dieser Instanz einer Komponente zurück.</summary>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object does not have a name.">Der Name des Objekts oder <see langword="null" />, wenn das Objekt keinen Namen besitzt.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for this instance of a component.">Gibt einen Typkonverter für diese Instanz einer Komponente zurück.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is the converter for this object, or &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for this object.">Ein <see cref="T:System.ComponentModel.TypeConverter" />, der der Konverter für dieses Objekt ist, oder <see langword="null" />, wenn für dieses Objekt kein <see cref="T:System.ComponentModel.TypeConverter" /> vorhanden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the default event for this instance of a component.">Gibt das Standardereignis für diese Instanz einer Komponente zurück.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents the default event for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have events.">Ein <see cref="T:System.ComponentModel.EventDescriptor" />, das das Standardereignis für dieses Objekt darstellt, oder <see langword="null" />, wenn dieses Objekt keine Ereignisse aufweist.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the default property for this instance of a component.">Gibt die Standardeigenschaft für diese Instanz einer Komponente zurück.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the default property for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have properties.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" />, der die Standardeigenschaft für dieses Objekt darstellt, oder <see langword="null" />, wenn dieses Objekt keine Eigenschaften hat.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type for this instance of a component.">Gibt einen Editor des angegebenen Typs für diese Instanz einer Komponente zurück.</summary>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the editor for this object.">Ein <see cref="T:System.Type" />, der den Editor für dieses Objekt darstellt.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type that is the editor for this object, or &lt;see langword=&quot;null&quot; /&gt; if the editor cannot be found.">Ein <see cref="T:System.Object" /> des angegebenen Typs, das den Editor für dieses Objekt darstellt, oder <see langword="null" /> wenn der Editor nicht gefunden wird.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns the events for this instance of a component.">Gibt die Ereignisse für diese Instanz einer Komponente zurück.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the events for this component instance.">Eine <see cref="T:System.ComponentModel.EventDescriptorCollection" />, die die Ereignisse für diese Komponenteninstanz darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns the events for this instance of a component using the specified attribute array as a filter.">Gibt die Ereignisse für diese Instanz einer Komponente zurück, wobei das angegebene Attributarray als Filter verwendet wird.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, das als Filter verwendet wird.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the filtered events for this component instance.">Eine <see cref="T:System.ComponentModel.EventDescriptorCollection" />, die die gefilterten Ereignisse für diese Komponenteninstanz darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns the properties for this instance of a component.">Gibt die Eigenschaften für diese Instanz einer Komponente zurück.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties for this component instance.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, die die Eigenschaften für diese Komponenteninstanz darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns the properties for this instance of a component using the attribute array as a filter.">Gibt die Eigenschaften für diese Instanz einer Komponente zurück, wobei das Attributarray als Filter verwendet wird.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, das als Filter verwendet wird.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the filtered properties for this component instance.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, die die gefilterten Eigenschaften für diese Komponenteninstanz darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">Gibt ein Objekt zurück, das die Eigenschaft enthält, die durch den Eigenschaftendeskriptor angegeben ist.</summary>
      <param name="pd" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the property whose owner is to be found.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" />, der die Eigenschaft angibt, nach deren Besitzer gesucht werden soll.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the owner of the specified property.">Ein <see cref="T:System.Object" />, das den Besitzer der angegebenen Eigenschaft darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary vsli:raw="Provides the functionality to offer custom error information that a user interface can bind to.">Stellt Funktionen für die Unterstützung benutzerdefinierter Fehlerinformationen bereit, an die eine Benutzeroberfläche gebunden werden kann.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary vsli:raw="Gets an error message indicating what is wrong with this object.">Ruft eine Fehlermeldung ab, die den Fehler in diesem Objekt angibt.</summary>
      <returns vsli:raw="An error message indicating what is wrong with this object. The default is an empty string (&quot;&quot;).">Eine Fehlermeldung, die den Fehler in diesem Objekt angibt. Der Standardwert ist eine leere Zeichenfolge ("").</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary vsli:raw="Gets the error message for the property with the given name.">Ruft die Fehlermeldung für die Eigenschaft mit dem angegebenen Namen ab.</summary>
      <param name="columnName" vsli:raw="The name of the property whose error message to get.">Der Name der Eigenschaft, deren Fehlermeldung abgerufen werden soll.</param>
      <returns vsli:raw="The error message for the property. The default is an empty string (&quot;&quot;).">Die Fehlermeldung für die Eigenschaft. Der Standardwert ist eine leere Zeichenfolge ("").</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary vsli:raw="Defines the interface for extending properties to other components in a container.">Definiert die Schnittstelle für das Erweitern von Eigenschaften auf andere Komponenten in einem Container.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary vsli:raw="Specifies whether this object can provide its extender properties to the specified object.">Gibt an, ob dieses Objekt dem angegebenen Objekt seine Extendereigenschaften zur Verfügung stellen kann.</summary>
      <param name="extendee" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to receive the extender properties.">Das <see cref="T:System.Object" />, das Extendereigenschaften empfangen soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can provide extender properties to the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt seine Extendereigenschaften für das angegebene Objekt bereitstellen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary vsli:raw="Provides an interface to facilitate the retrieval of the builder's name and to display the builder.">Stellt eine Schnittstelle bereit, um das Abrufen des Generatornamens zu erleichtern und den Generator anzuzeigen.</summary>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary vsli:raw="Shows the builder.">Zeigt den Generator an.</summary>
      <param name="language" vsli:raw="The language service that is calling the builder.">Der Sprachdienst, der den Generator aufruft.</param>
      <param name="value" vsli:raw="The expression being edited.">Der Ausdruck, der bearbeitet wird.</param>
      <param name="newValue" vsli:raw="The new value.">Der neue Wert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value should be replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt; (if the user cancels, for example).">
        <see langword="true" />, wenn der Wert durch <paramref name="newValue" /> ersetzt werden soll; andernfalls <see langword="false" /> (z. B., wenn der Benutzer den Vorgang abbricht).</returns>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary vsli:raw="Gets a localized name.">Ruft einen lokalisierten Namen ab.</summary>
      <returns vsli:raw="A localized name.">Ein lokalisierter Name.</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary vsli:raw="Provides functionality to an object to return a list that can be bound to a data source.">Stellt Funktionen für ein Objekt bereit, mit denen dieses eine Liste zurückgeben kann, die an eine Datenquelle gebunden werden kann.</summary>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from an object that does not implement an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; itself.">Gibt eine <see cref="T:System.Collections.IList" /> zurück, die an eine Datenquelle eines Objekts gebunden werden kann, das selbst keine <see cref="T:System.Collections.IList" /> implementiert.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from the object.">Eine <see cref="T:System.Collections.IList" />, die an eine Datenquelle eines Objekts gebunden werden kann.</returns>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary vsli:raw="Gets a value indicating whether the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects.">Ruft einen Wert ab, der angibt, ob die Auflistung eine <see cref="T:System.Collections.IList" />-Objektauflistung ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung eine Auflistung von <see cref="T:System.Collections.IList" />-Objekten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary vsli:raw="Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.">Stellt Funktionalität für geschachtelte Container bereit, die logisch 0 (null) oder mehr Komponenten enthalten und von einer übergeordneten Komponente besessen werden.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for the nested container.">Ruft die besitzende Komponente für den geschachtelten Container ab.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns the nested container.">Die <see cref="T:System.ComponentModel.IComponent" />, die den geschachtelten Container besitzt.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary vsli:raw="Provides the ability to retrieve the full nested name of a component.">Ermöglicht das Abrufen des vollen geschachtelten Namens einer Komponente.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary vsli:raw="Gets the full name of the component in this site.">Ruft den vollständigen Namen der Komponente in dieser Site ab.</summary>
      <returns vsli:raw="The full name of the component in this site.">Der vollständige Name der Komponente in dieser Site.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary vsli:raw="Indicates whether the component associated with this attribute has been inherited from a base class. This class cannot be inherited.">Gibt an, ob die diesem Attribut zugeordnete Komponente von einer Basisklasse vererbt wurde. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary vsli:raw="Specifies that the default value for &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; is &lt;see cref=&quot;F:System.ComponentModel.InheritanceAttribute.NotInherited&quot; /&gt;. This field is read-only.">Gibt an, dass <see cref="T:System.ComponentModel.InheritanceAttribute" /> der Standardwert für <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" /> ist. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary vsli:raw="Specifies that the component is inherited. This field is read-only.">Gibt an, dass die Komponente vererbt ist. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary vsli:raw="Specifies that the component is inherited and is read-only. This field is read-only.">Gibt an, dass die Komponente vererbt und schreibgeschützt ist. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary vsli:raw="Specifies that the component is not inherited. This field is read-only.">Gibt an, dass die Komponente nicht vererbt ist. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.InheritanceAttribute" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class with the specified inheritance level.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.InheritanceAttribute" />-Klasse mit der angegebenen Vererbungsebene.</summary>
      <param name="inheritanceLevel" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; that indicates the level of inheritance to set this attribute to.">Ein <see cref="T:System.ComponentModel.InheritanceLevel" />, das die Vererbungsebene angibt, auf die dieses Attribut festgelegt werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary vsli:raw="Override to test for equality.">Überschreiben Sie diesen Member, um auf Gleichheit zu prüfen.</summary>
      <param name="value" vsli:raw="The object to test.">Das zu überprüfende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is the same; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt gleich ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">Gibt den Hashcode für dieses Objekt zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.InheritanceAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Ruft einen Wert ab, der angibt, ob der aktuelle Wert des Attributs dessen Standardwert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der aktuelle Wert des Attributs der Standardwert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary vsli:raw="Converts this attribute to a string.">Konvertiert dieses Attribut in eine Zeichenfolge.</summary>
      <returns vsli:raw="A string that represents this &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">Eine Zeichenfolge, die diese <see cref="T:System.ComponentModel.InheritanceAttribute" /> darstellt.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary vsli:raw="Gets or sets the current inheritance level stored in this attribute.">Ruft die in diesem Attribut gespeicherte aktuelle Vererbungsebene ab oder legt diese fest.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; stored in this attribute.">Das in diesem Attribut gespeicherte <see cref="T:System.ComponentModel.InheritanceLevel" />.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary vsli:raw="Defines identifiers for types of inheritance levels.">Definiert Bezeichner für Typen von Vererbungsebenen.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary vsli:raw="The object is inherited.">Das Objekt ist vererbt.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary vsli:raw="The object is inherited, but has read-only access.">Das Objekt ist vererbt, aber mit Schreibschutz versehen.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary vsli:raw="The object is not inherited.">Das Objekt ist nicht vererbt.</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary vsli:raw="Specifies the installer for a type that installs components.">Gibt das Installationsprogramm für einen Typ an, das Komponenten installiert.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class with the name of the component's installer type.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.InstallerTypeAttribute" />-Klasse mit dem Namen des Installationsprogrammtyps für die Komponente.</summary>
      <param name="typeName" vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">Der Name eines <see cref="T:System.Type" />, der das Installationsprogramm für die Komponente darstellt, an die dieses Attribut gebunden ist. Diese Klasse muss <see cref="T:System.ComponentModel.Design.IDesigner" /> implementieren.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class, when given a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for a component.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.InstallerTypeAttribute" />-Klasse, wenn ein <see cref="T:System.Type" /> angegeben wird, der das Installationsprogramm für eine Komponente darstellt.</summary>
      <param name="installerType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">Ein <see cref="T:System.Type" />, der das Installationsprogramm für die Komponente darstellt, an die dieses Attribut gebunden ist. Diese Klasse muss <see cref="T:System.ComponentModel.Design.IDesigner" /> implementieren.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">Gibt zurück, ob der Wert des angegebenen Objekts gleich dem aktuellen <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> ist.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Das Objekt, dessen Wert auf Gleichheit geprüft werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Wert des angegebenen Objekts dem aktuellen entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">Gibt den Hashcode für dieses Objekt zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.InstallerTypeAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary vsli:raw="Gets the type of installer associated with this attribute.">Ruft den Typ des Installationsprogramms ab, das diesem Attribut zugeordnet ist.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of installer associated with this attribute, or &lt;see langword=&quot;null&quot; /&gt; if an installer does not exist.">Ein <see cref="T:System.Type" />, der den Typ des Installationsprogramms darstellt, das diesem Attribut zugeordnet ist, oder <see langword="null" />, wenn kein Installationsprogramm vorhanden ist.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary vsli:raw="Creates an instance of a particular type of property from a drop-down box within the &lt;see cref=&quot;T:System.Windows.Forms.PropertyGrid&quot; /&gt;.">Erstellt eine Instanz eines bestimmten Eigenschaftentyps aus einem Dropdown-Listenfeld innerhalb von <see cref="T:System.Windows.Forms.PropertyGrid" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstanceCreationEditor&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.InstanceCreationEditor" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="When overridden in a derived class, returns an instance of the specified type.">Gibt beim Überschreiben in einer abgeleiteten Klasse eine Instanz des angegebenen Typs zurück.</summary>
      <param name="context" vsli:raw="The context information.">Die Kontextinformationen.</param>
      <param name="instanceType" vsli:raw="The specified type.">Der angegebene Typ.</param>
      <returns vsli:raw="An instance of the specified type or &lt;see langword=&quot;null&quot; /&gt;.">Eine Instanz des angegebenen Typs oder <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary vsli:raw="Gets the specified text.">Ruft den angegebenen Text ab.</summary>
      <returns vsli:raw="The specified text.">Der angegebene Text.</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit signed integer objects to and from other representations.">Stellt einen Typkonverter für das Konvertieren von 16-Bit-Ganzzahlobjekten mit Vorzeichen in und von anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int16Converter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Int16Converter" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit signed integer objects to and from other representations.">Stellt einen Typkonverter für das Konvertieren von 32-Bit-Objekten, die ganze Zahlen mit Vorzeichen sind, in andere und aus anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int32Converter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Int32Converter" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit signed integer objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von 64-Bit-Objekten, die ganze Zahlen mit Vorzeichen sind, in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int64Converter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Int64Converter" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary vsli:raw="Indicates whether a class converts property change events to &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">Gibt an, ob eine Klasse Eigenschaftenänderungsereignisse in <see cref="E:System.ComponentModel.IBindingList.ListChanged" />-Ereignisse konvertiert.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" />-Objekt <see cref="E:System.ComponentModel.IBindingList.ListChanged" />-Ereignisse auslöst.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events when one of its property values changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" />-Objekt bei der Änderung einer seiner Eigenschaftswerte ein <see cref="E:System.ComponentModel.IBindingList.ListChanged" />-Ereignis auslöst, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary vsli:raw="Allows coordination of initialization for a component and its dependent properties.">Ermöglicht die Koordination der Initialisierung einer Komponente und ihrer abhängigen Eigenschaften.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary vsli:raw="Occurs when initialization of the component is completed.">Tritt ein, wenn die Initialisierung der Komponente abgeschlossen ist.</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary vsli:raw="Gets a value indicating whether the component is initialized.">Ruft einen Wert ab, der angibt, ob die Komponente initialisiert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the component has completed initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass die Komponente die Initialisierung abgeschlossen hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary vsli:raw="Provides contextual information about a component, such as its container and property descriptor.">Stellt Kontextinformationen über eine Komponente bereit, z. B. den zugehörigen Container und Eigenschaftendeskriptor.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">Löst das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />-Ereignis aus.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Löst das <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />-Ereignis aus.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be changed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt geändert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary vsli:raw="Gets the container representing this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; request.">Ruft den Container ab, der diese <see cref="T:System.ComponentModel.TypeDescriptor" />-Anforderung darstellt.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with the set of objects for this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no container or if the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; does not use outside objects.">Ein <see cref="T:System.ComponentModel.IContainer" /> mit der Gruppe von Objekten für diesen <see cref="T:System.ComponentModel.TypeDescriptor" />, andernfalls <see langword="null" />, wenn kein Container vorhanden ist oder der <see cref="T:System.ComponentModel.TypeDescriptor" /> keine externen Objekte verwendet.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary vsli:raw="Gets the object that is connected with this type descriptor request.">Ruft das Objekt ab, das mit dieser Typdeskriptoranforderung verbunden ist.</summary>
      <returns vsli:raw="The object that invokes the method on the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no object responsible for the call.">Das Objekt, das die Methode für den <see cref="T:System.ComponentModel.TypeDescriptor" /> aufruft, andernfalls <see langword="null" />, wenn kein für den Aufruf verantwortliches Objekt vorhanden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is associated with the given context item.">Ruft den <see cref="T:System.ComponentModel.PropertyDescriptor" /> ab, der dem angegebenen Kontextelement zugeordnet ist.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the given context item; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; responsible for the call.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, der das angegebene Kontextelement beschreibt, andernfalls <see langword="null" />, wenn kein für den Aufruf verantwortlicher <see cref="T:System.ComponentModel.PropertyDescriptor" /> vorhanden ist.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary vsli:raw="Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.">Stellt Funktionen bereit, mit denen das Schema für eine bindbare Liste ermittelt werden kann, in der für die Bindung verfügbare Eigenschaften von den öffentlichen Eigenschaften des Objekts, an das gebunden werden soll, unterschieden werden.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">Gibt die <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse zurück, die die Eigenschaften auf jedem Element darstellt, das zum Binden von Daten verwendet wird.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to find in the collection as bindable. This can be &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekten, die in der Sammlung als bindbar gesucht werden. Dieser Wert kann <see langword="null" /> sein.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">Die <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, die die Eigenschaften auf jedem Element darstellt, das zum Binden von Daten verwendet wird.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the name of the list.">Gibt den Namen der Liste zurück.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects, for which the list name is returned. This can be &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekten, für die der Listenname zurückgegeben wird. Dieser Wert kann <see langword="null" /> sein.</param>
      <returns vsli:raw="The name of the list.">Der Name der Liste.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for all licenses. A license is granted to a specific instance of a component.">Stellt die <see langword="abstract" />-Basisklasse für alle Lizenzen bereit. Eine Lizenz wird einer bestimmten Instanz einer Komponente erteilt.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.License" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary vsli:raw="When overridden in a derived class, disposes of the resources used by the license.">Gibt beim Überschreiben in einer abgeleiteten Klasse die von der Lizenz verwendeten Ressource frei.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary vsli:raw="When overridden in a derived class, gets the license key granted to this component.">Ruft beim Überschreiben in einer abgeleiteten Klasse den für diese Komponente erteilten Lizenzschlüssel ab.</summary>
      <returns vsli:raw="A license key granted to this component.">Ein für diese Komponente erteilter Lizenzschlüssel.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary vsli:raw="Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.">Gibt an, wann ein lizenziertes Objekt verwendet werden kann, und bietet eine Möglichkeit, zusätzliche Dienste für die Unterstützung der Lizenzen zu erhalten, die in der entsprechenden Domäne ausgeführt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicenseContext" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.">Gibt beim Überschreiben in einer abgeleiteten Klasse einen gespeicherten Lizenzschlüssel für den angegebenen Typ aus der angegebenen Ressourcenassembly zurück.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component.">Ein <see cref="T:System.Type" />, der den Typ der Komponente darstellt.</param>
      <param name="resourceAssembly" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; with the license key.">Eine <see cref="T:System.Reflection.Assembly" /> mit dem Lizenzschlüssel.</param>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type. This method returns &lt;see langword=&quot;null&quot; /&gt; unless you override it.">Der <see cref="P:System.ComponentModel.License.LicenseKey" /> für den angegebenen Typ. Diese Methode gibt <see langword="null" /> zurück, sofern sie nicht überschrieben wird.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service, if it is available.">Ruft den angeforderten Dienst ab, wenn dieser verfügbar ist.</summary>
      <param name="type" vsli:raw="The type of service to retrieve.">Der Typ des abzurufenden Diensts.</param>
      <returns vsli:raw="An instance of the service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be found.">Eine Instanz des Dienstes oder <see langword="null" />, wenn der Dienst nicht gefunden werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="When overridden in a derived class, sets a license key for the specified type.">Legt beim Überschreiben in einer abgeleiteten Klasse einen Lizenzschlüssel für den angegebenen Typ fest.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component associated with the license key.">Ein <see cref="T:System.Type" />, der die Komponente darstellt, die dem Lizenzschlüssel zugeordnet ist.</param>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to save for the type of component.">Der <see cref="P:System.ComponentModel.License.LicenseKey" />, der für den Komponententyp gespeichert werden soll.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary vsli:raw="When overridden in a derived class, gets a value that specifies when you can use a license.">Ruft beim Überschreiben in einer abgeleiteten Klasse einen Wert ab, der angibt, wann eine Lizenz verwendet werden kann.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values that specifies when you can use a license. The default is &lt;see cref=&quot;F:System.ComponentModel.LicenseUsageMode.Runtime&quot; /&gt;.">Einer der <see cref="T:System.ComponentModel.LicenseUsageMode" />-Werte, der angibt, wann eine Lizenz verwendet werden kann. Der Standardwert ist <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary vsli:raw="Represents the exception thrown when a component cannot be granted a license.">Stellt die Ausnahme dar, die ausgelöst wird, wenn einer Komponente keine Lizenz erteilt werden kann.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class with the given &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicenseException" />-Klasse mit der angegebenen <see cref="T:System.Runtime.Serialization.SerializationInfo" /> und dem angegebenen <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Die für die Deserialisierung zu verwendende <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Klasse.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Das für die Deserialisierung zu verwendende Ziel.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type of component that was denied a license.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicenseException" />-Klasse für den Komponententyp, dem die Lizenz verweigert wurde.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Eine <see cref="T:System.Type" />-Klasse, die den Komponententyp darstellt, dem keine Lizenz erteilt wurde.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicenseException" />-Klasse für den Typ und die Instanz der Komponente, der die Lizenz verweigert wurde.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Eine <see cref="T:System.Type" />-Klasse, die den Komponententyp darstellt, dem keine Lizenz erteilt wurde.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Die Instanz der Komponente, der keine Lizenz erteilt wurde.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicenseException" />-Klasse für den Typ und die Instanz der Komponente, der die Lizenz verweigert wurde, sowie eine anzuzeigende Meldung.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Eine <see cref="T:System.Type" />-Klasse, die den Komponententyp darstellt, dem keine Lizenz erteilt wurde.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Die Instanz der Komponente, der keine Lizenz erteilt wurde.</param>
      <param name="message" vsli:raw="The exception message to display.">Die anzuzeigende Ausnahmemeldung.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display and the original exception thrown.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicenseException" />-Klasse für den Typ und die Instanz der Komponente, der die Lizenz verweigert wurde, sowie eine anzuzeigende Meldung und die ursprünglich ausgelöste Ausnahme.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Eine <see cref="T:System.Type" />-Klasse, die den Komponententyp darstellt, dem keine Lizenz erteilt wurde.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Die Instanz der Komponente, der keine Lizenz erteilt wurde.</param>
      <param name="message" vsli:raw="The exception message to display.">Die anzuzeigende Ausnahmemeldung.</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the original exception.">Eine <see cref="T:System.Exception" />-Klasse, die die ursprüngliche Ausnahme darstellt.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">Legt <see cref="T:System.Runtime.Serialization.SerializationInfo" /> mit Informationen zur Ausnahme fest.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Die für die Deserialisierung zu verwendende <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Klasse.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Das für die Deserialisierung zu verwendende Ziel.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary vsli:raw="Gets the type of the component that was not granted a license.">Ruft den Typ der Komponente ab, der keine Lizenz erteilt wurde.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Eine <see cref="T:System.Type" />-Klasse, die den Komponententyp darstellt, dem keine Lizenz erteilt wurde.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary vsli:raw="Provides properties and methods to add a license to a component and to manage a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. This class cannot be inherited.">Stellt Eigenschaften und Methoden zur Verfügung, um eine Lizenz zu einer Komponente hinzuzufügen und einen <see cref="T:System.ComponentModel.LicenseProvider" /> zu verwalten. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary vsli:raw="Creates an instance of the specified type, given a context in which you can use the licensed instance.">Erstellt eine Instanz des angegebenen Typs, wenn ein Kontext angegeben ist, in dem Sie die lizenzierte Instanz verwenden können.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Eine <see cref="T:System.Type" />-Klasse, die den zu erstellenden Typ darstellt.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">Eine <see cref="T:System.ComponentModel.LicenseContext" />-Klasse, die angibt, wann Sie die lizenzierte Instanz verwenden können.</param>
      <returns vsli:raw="An instance of the specified type.">Eine Instanz des angegebenen Typs.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary vsli:raw="Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.">Erstellt eine Instanz des angegebenen Typs mit den angegebenen Argumenten, wenn ein Kontext vorhanden ist, in dem Sie die lizenzierte Instanz verwenden können.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Eine <see cref="T:System.Type" />-Klasse, die den zu erstellenden Typ darstellt.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">Eine <see cref="T:System.ComponentModel.LicenseContext" />-Klasse, die angibt, wann Sie die lizenzierte Instanz verwenden können.</param>
      <param name="args" vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the arguments for the type.">Ein Array vom Typ <see cref="T:System.Object" />, das die Argumente für den Typ darstellt.</param>
      <returns vsli:raw="An instance of the specified type with the given array of arguments.">Eine Instanz des angegebenen Typs mit dem angegebenen Array von Argumenten.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary vsli:raw="Returns whether the given type has a valid license.">Gibt zurück, ob der angegebene Typ über eine gültige Lizenz verfügt.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to find a valid license for.">Die <see cref="T:System.Type" />-Klasse, für die eine gültige Lizenz gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given type is licensed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der angegebene Typ lizenziert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified type.">Bestimmt, ob für den angegebenen Typ eine gültige Lizenz erteilt werden kann.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Die <see cref="T:System.Type" />-Klasse, die den Typ des Objekts darstellt, das die <see cref="T:System.ComponentModel.License" />-Klasse anfordert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid license can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine gültige Lizenz erteilt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Bestimmt, ob für die angegebene Instanz des Typs eine gültige Lizenz erteilt werden kann. Diese Methode erstellt eine gültige <see cref="T:System.ComponentModel.License" />-Klasse.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Eine <see cref="T:System.Type" />-Klasse, die den Typ des Objekts darstellt, das die Lizenz anfordert.</param>
      <param name="instance" vsli:raw="An object of the specified type or a type derived from the specified type.">Ein Objekt vom angegebenen Typ oder einem Typ, der vom angegebenen Typ abgeleitet ist.</param>
      <param name="license" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; that is a valid license, or &lt;see langword=&quot;null&quot; /&gt; if a valid license cannot be granted.">Eine <see cref="T:System.ComponentModel.License" />-Klasse, die eine gültige Lizenz darstellt, oder <see langword="null" />, wenn keine gültige Lizenz erteilt werden kann.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine gültige <see cref="T:System.ComponentModel.License" />-Klasse aufgerufen werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary vsli:raw="Prevents changes being made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">Verhindert Änderungen an der aktuellen <see cref="T:System.ComponentModel.LicenseContext" />-Klasse des angegebenen Objekts.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to lock.">Das Objekt, dessen aktuellen Kontext Sie sperren möchten.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The context is already locked.">Der Kontext ist bereits gesperrt.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary vsli:raw="Allows changes to be made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">Ermöglicht Änderungen an der aktuellen <see cref="T:System.ComponentModel.LicenseContext" />-Klasse des angegebenen Objekts.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to unlock.">Das Objekt, dessen aktuellen Kontext Sie entsperren möchten.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;contextUser&quot; /&gt; represents a different user than the one specified in a previous call to &lt;see cref=&quot;M:System.ComponentModel.LicenseManager.LockContext(System.Object)&quot; /&gt;.">Der <paramref name="contextUser" />-Parameter stellt einen anderen Benutzer dar als den in einem vorherigen Aufruf der <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />-Methode angegebenen Benutzer.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary vsli:raw="Determines whether a license can be granted for the specified type.">Bestimmt, ob für den angegebenen Typ eine Lizenz erteilt werden kann.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Eine <see cref="T:System.Type" />-Klasse, die den Typ des Objekts darstellt, das die Lizenz anfordert.</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">Eine <see cref="T:System.ComponentModel.License" />-Klasse kann nicht aufgerufen werden.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary vsli:raw="Determines whether a license can be granted for the instance of the specified type.">Bestimmt, ob für die Instanz des angegebenen Typs eine Lizenz erteilt werden kann.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Eine <see cref="T:System.Type" />-Klasse, die den Typ des Objekts darstellt, das die Lizenz anfordert.</param>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type or a type derived from the specified type.">Eine <see cref="T:System.Object" />-Klasse vom angegebenen Typ oder einem Typ, der vom angegebenen Typ abgeleitet ist.</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="The type is licensed, but a &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">Der Typ ist lizenziert, aber es konnte keine <see cref="T:System.ComponentModel.License" />-Klasse aufgerufen werden.</exception>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Ein gültiges <see cref="T:System.ComponentModel.License" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary vsli:raw="Gets or sets the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt;, which specifies when you can use the licensed object.">Ruft die aktuelle <see cref="T:System.ComponentModel.LicenseContext" />-Klasse ab, die angibt, wann Sie das lizenzierte Objekt verwenden können, oder legt diese fest.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property is currently locked and cannot be changed.">Die <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />-Eigenschaft ist gegenwärtig gesperrt und kann nicht geändert werden.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed object.">Eine <see cref="T:System.ComponentModel.LicenseContext" />-Klasse, die angibt, wann Sie das lizenzierte Objekt verwenden können.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; which specifies when you can use the licensed object for the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt;.">Ruft die <see cref="T:System.ComponentModel.LicenseUsageMode" />-Enumeration ab, die angibt, wann Sie das lizenzierte Objekt für die <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />-Eigenschaft verwenden können.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values, as specified in the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property.">Einer der <see cref="T:System.ComponentModel.LicenseUsageMode" />-Werte, wie in der <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />-Eigenschaft angegeben.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for implementing a license provider.">Stellt die <see langword="abstract" />-Basisklasse für die Implementierung eines Lizenzgebers bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicenseProvider" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.">Ruft beim Überschreiben in einer abgeleiteten Klasse eine Lizenz für eine Instanz oder einen Typ einer Komponente ab, wenn ein Kontext vorhanden und angegeben ist, ob bei einer Lizenzverweigerung eine Ausnahme ausgelöst wird.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">Ein <see cref="T:System.ComponentModel.LicenseContext" />, der angibt, wo Sie das lizenzierte Objekt verwenden können.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the license.">Ein <see cref="T:System.Type" />, der die Komponente darstellt, die die Lizenz anfordert.</param>
      <param name="instance" vsli:raw="An object that is requesting the license.">Ein Objekt, das die Lizenz anfordert.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when the component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine <see cref="T:System.ComponentModel.LicenseException" /> ausgelöst werden soll, wenn der Komponente keine Lizenz erteilt werden kann, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Ein gültiges <see cref="T:System.ComponentModel.License" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary vsli:raw="Specifies the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; to use with a class. This class cannot be inherited.">Gibt den mit einer Klasse zu verwendenden <see cref="T:System.ComponentModel.LicenseProvider" /> an. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary vsli:raw="Specifies the default value, which is no provider. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt den Standardwert an, der kein Anbieter ist. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class without a license provider.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicenseProviderAttribute" />-Klasse ohne Lizenzgeber.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicenseProviderAttribute" />-Klasse mit dem angegebenen Typ.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the license provider class.">Der voll gekennzeichnete Name der Lizenzgeber-Klasse.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type of license provider.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicenseProviderAttribute" />-Klasse mit dem angegebenen Typ eines Lizenzgebers.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider class.">Ein <see cref="T:System.Type" />, der den Typ der Lizenzgeber-Klasse darstellt.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">Gibt an, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
      <param name="value" vsli:raw="Another object to compare to.">Ein weiteres Objekt für den Vergleich.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="value" /> gleich dieser Instanz ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.LicenseProviderAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary vsli:raw="Gets the license provider that must be used with the associated class.">Ruft den Lizenzgeber ab, der für die zugeordnete Klasse verwendet werden muss.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.Type" />, der den Typ des Lizenzgebers darstellt. Der Standardwert ist <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary vsli:raw="Indicates a unique ID for this attribute type.">Gibt eine eindeutige ID für diesen Attributtyp an.</summary>
      <returns vsli:raw="A unique ID for this attribute type.">Eine eindeutige ID für diesen Attributtyp.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary vsli:raw="Specifies when the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be used.">Gibt an, wann <see cref="T:System.ComponentModel.License" /> verwendet werden kann.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary vsli:raw="Used during design time by a visual designer or the compiler.">Wird zur Entwurfszeit von einem visuellen Designer oder dem Compiler verwendet.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary vsli:raw="Used during runtime.">Wird zur Laufzeit verwendet.</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary vsli:raw="Provides an implementation of a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.">Stellt eine Implementierung eines <see cref="T:System.ComponentModel.LicenseProvider" /> bereit. Die Funktionsweise des Lizenzgebers weist große Ähnlichkeit mit der des Standardlizenzierungsmodells von Microsoft .NET Framework auf.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicFileLicenseProvider&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicFileLicenseProvider" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary vsli:raw="Returns a key for the specified type.">Gibt einen Schlüssel für den angegebenen Typ zurück.</summary>
      <param name="type" vsli:raw="The object type to return the key.">Der Objekttyp, der den Schlüssel zurückgeben soll.</param>
      <returns vsli:raw="A confirmation that the &lt;paramref name=&quot;type&quot; /&gt; parameter is licensed.">Eine Bestätigung, dass der <paramref name="type" />-Parameter lizenziert ist.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Returns a license for the instance of the component, if one is available.">Gibt eine ggf. verfügbare Lizenz für die Instanz der Komponente zurück.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">Ein <see cref="T:System.ComponentModel.LicenseContext" />, der angibt, wo Sie das lizenzierte Objekt verwenden können.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Ein <see cref="T:System.Type" />, der die Komponente darstellt, die die <see cref="T:System.ComponentModel.License" /> anfordert.</param>
      <param name="instance" vsli:raw="An object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Ein Objekt, das die <see cref="T:System.ComponentModel.License" /> anfordert.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when a component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine <see cref="T:System.ComponentModel.LicenseException" /> ausgelöst werden soll, sobald einer Komponente keine Lizenz erteilt werden kann, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;. If this method cannot find a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; or a valid &lt;paramref name=&quot;context&quot; /&gt; parameter, it returns &lt;see langword=&quot;null&quot; /&gt;.">Ein gültiges <see cref="T:System.ComponentModel.License" />. Wenn diese Methode keine gültige <see cref="T:System.ComponentModel.License" /> oder keinen gültigen <paramref name="context" />-Parameter findet, wird <see langword="null" /> zurückgegeben.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary vsli:raw="Determines whether the key that the &lt;see cref=&quot;M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)&quot; /&gt; method retrieves is valid for the specified type.">Bestimmt, ob der durch die <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" />-Methode abgerufene Schlüssel für den angegebenen Typ gültig ist.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to check.">Der zu überprüfende <see cref="P:System.ComponentModel.License.LicenseKey" />.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Ein <see cref="T:System.Type" />, der die Komponente darstellt, die die <see cref="T:System.ComponentModel.License" /> anfordert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is a valid &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Schlüssel ein gültiger <see cref="P:System.ComponentModel.License.LicenseKey" /> für den angegebenen Typ ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary vsli:raw="Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.">Gibt an, dass eine Liste als Datenquelle verwendet werden kann. Ein visueller Designer ermittelt mithilfe dieses Attributs, ob eine bestimmte Liste in einer Datenbindungsauswahl angezeigt werden soll. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Stellt den Standardwert für <see cref="T:System.ComponentModel.ListBindableAttribute" /> dar.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary vsli:raw="Specifies that the list is not bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt an, dass die Liste nicht bindbar ist. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary vsli:raw="Specifies that the list is bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt an, dass die Liste bindbar ist. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using a value to indicate whether the list is bindable.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ListBindableAttribute" />-Klasse, wobei durch einen Wert angegeben wird, ob die Liste bindbar ist.</summary>
      <param name="listBindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Liste bindbar ist, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; to indicate whether the list is bindable.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ListBindableAttribute" />-Klasse, wobei <see cref="T:System.ComponentModel.BindableSupport" /> angibt, ob die Liste bindbar ist.</summary>
      <param name="flags" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; that indicates whether the list is bindable.">Ein <see cref="T:System.ComponentModel.BindableSupport" />, der angibt, ob die Liste bindbar ist.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Gibt zurück, ob das übergebene Objekt gleich diesem <see cref="T:System.ComponentModel.ListBindableAttribute" /> ist.</summary>
      <param name="obj" vsli:raw="The object to test equality with.">Das Objekt, das auf Gleichheit überprüft wird.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das übergebene Objekt gleich diesem <see cref="T:System.ComponentModel.ListBindableAttribute" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.ListBindableAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns whether &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value.">Gibt zurück, ob <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> auf den Standardwert festgelegt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> auf den Standardwert festgelegt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary vsli:raw="Gets whether the list is bindable.">Ruft ab, ob die Liste bindbar ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Liste bindbar ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event.">Stellt Daten für das <see cref="E:System.ComponentModel.IBindingList.ListChanged" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ListChangedEventArgs" />-Klasse bei angegebenem Typ der Änderung und betroffenem <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Ein <see cref="T:System.ComponentModel.ListChangedType" />-Wert, der den Typ der Änderung angibt.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, removed, or changed.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, der hinzugefügt, entfernt oder geändert wurde.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the index of the affected item.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ListChangedEventArgs" />-Klasse bei angegebenem Typ der Änderung und Index des betroffenen Elements.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Ein <see cref="T:System.ComponentModel.ListChangedType" />-Wert, der den Typ der Änderung angibt.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added, changed, or removed.">Der Index des Elements, das hinzugefügt, geändert oder entfernt wurde.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change, the index of the affected item, and a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the affected item.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ListChangedEventArgs" />-Klasse bei angegebenem Typ der Änderung, Index des betroffenen Elements und einem <see cref="T:System.ComponentModel.PropertyDescriptor" />, der das betroffene Element beschreibt.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Ein <see cref="T:System.ComponentModel.ListChangedType" />-Wert, der den Typ der Änderung angibt.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added or changed.">Der Index des Elements, das hinzugefügt oder geändert wurde.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the item.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, der das Element beschreibt.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the old and new index of the item that was moved.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ListChangedEventArgs" />-Klasse bei angegebenem Typ der Änderung und altem und neuen Index des Elements, das verschoben wurde.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Ein <see cref="T:System.ComponentModel.ListChangedType" />-Wert, der den Typ der Änderung angibt.</param>
      <param name="newIndex" vsli:raw="The new index of the item that was moved.">Der neue Index des Elements, das verschoben wurde.</param>
      <param name="oldIndex" vsli:raw="The old index of the item that was moved.">Der alte Index des Elements, das verschoben wurde.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary vsli:raw="Gets the type of change.">Ruft den Typ der Änderung ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Ein <see cref="T:System.ComponentModel.ListChangedType" />-Wert, der den Typ der Änderung angibt.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary vsli:raw="Gets the index of the item affected by the change.">Ruft den Index des von der Änderung betroffenen Elements ab.</summary>
      <returns vsli:raw="The index of the affected by the change.">Der Index der von der Änderung betroffenen Elements.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary vsli:raw="Gets the old index of an item that has been moved.">Ruft den alten Index eines Elements ab, das verschoben wurde.</summary>
      <returns vsli:raw="The old index of the moved item.">Der alte Index des verschobenen Elements.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, changed, or deleted.">Ruft den <see cref="T:System.ComponentModel.PropertyDescriptor" /> ab, der hinzugefügt, geändert oder gelöscht wurde.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected by the change.">Der von der Änderung betroffene <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event of the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; class.">Stellt die Methode dar, die das <see cref="E:System.ComponentModel.IBindingList.ListChanged" />-Ereignis der <see cref="T:System.ComponentModel.IBindingList" />-Klasse behandelt.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.ComponentModel.ListChangedEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary vsli:raw="Specifies how the list changed.">Gibt an, in welcher Weise die Liste geändert wurde.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary vsli:raw="An item added to the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was added.">Ein der Liste hinzugefügtes Element. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> enthält den Index des hinzugefügten Elements.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary vsli:raw="An item changed in the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was changed.">Ein Listenelement, das geändert wurde. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> enthält den Index des geänderten Elements.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary vsli:raw="An item deleted from the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was deleted.">Ein Element, das aus der Liste entfernt wurde. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> enthält den Index des gelöschten Elements.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary vsli:raw="An item moved within the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.OldIndex&quot; /&gt; contains the previous index for the item, whereas &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the new index for the item.">Ein Element, das innerhalb der Liste verschoben wurde. <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> enthält den vorherigen Index des Elements, und <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> enthält den neuen Index des Elements.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was added, which changed the schema.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" /> wurde hinzugefügt, wobei eine Änderung des Schemas stattfand.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was changed, which changed the schema.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" /> wurde geändert, wobei eine Änderung des Schemas stattfand.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was deleted, which changed the schema.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" /> wurde gelöscht, wobei eine Änderung des Schemas stattfand.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary vsli:raw="Much of the list has changed. Any listening controls should refresh all their data from the list.">An der Liste wurde sehr viel geändert. Jedes überwachende Steuerelement muss seine gesamten Daten aus der Liste aktualisieren.</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary vsli:raw="Provides a description of the sort operation applied to a data source.">Stellt eine Beschreibung des Sortiervorgangs bereit, der auf eine Datenquelle angewendet wird.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; class with the specified property description and direction.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ListSortDescription" />-Klasse mit der angegebenen Eigenschaftsbeschreibung und -richtung.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the property by which the data source is sorted.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, der die Eigenschaft beschreibt, anhand derer die Datenquelle sortiert wird.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.ListSortDescription" />-Werte.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary vsli:raw="Gets or sets the abstract description of a class property associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Ruft die abstrakte Beschreibung einer Klasseneigenschaft ab, die dieser <see cref="T:System.ComponentModel.ListSortDescription" /> zugeordnet ist, oder legt diese fest.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Das dieser <see cref="T:System.ComponentModel.PropertyDescriptor" /> zugeordnete <see cref="T:System.ComponentModel.ListSortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary vsli:raw="Gets or sets the direction of the sort operation associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Ruft die Richtung des Sortiervorgangs ab, der dieser <see cref="T:System.ComponentModel.ListSortDescription" /> zugeordnet ist, oder legt diese fest.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Einer der <see cref="T:System.ComponentModel.ListSortDirection" />-Werte.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.ComponentModel.ListSortDescription" />-Objekten dar.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class with the specified array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />-Klasse mit dem angegebenen Array von <see cref="T:System.ComponentModel.ListSortDescription" />-Objekten.</summary>
      <param name="sorts" vsli:raw="The array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects to be contained in the collection.">Das Array von <see cref="T:System.ComponentModel.ListSortDescription" />-Objekten, die in der Auflistung enthalten sein sollen.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary vsli:raw="Determines if the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; contains a specific value.">Ermittelt, ob das <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> einen bestimmten Wert enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Die <see cref="T:System.Object" />, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die <see cref="T:System.Object" />-Klasse in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to the specified array, starting at the specified destination array index.">Kopiert den Inhalt der Auflistung in das angegebene Array, wobei am angegebenen Index des Zielarrays begonnen wird.</summary>
      <param name="array" vsli:raw="The destination array for the items copied from the collection.">Das Zielarray für die aus der Auflistung kopierten Elemente.</param>
      <param name="index" vsli:raw="The index of the destination array at which copying begins.">Der Index des Zielarrays, an dem der Kopiervorgang beginnen soll.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary vsli:raw="Returns the index of the specified item in the collection.">Gibt den Index des angegebenen Elements in der Auflistung zurück.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Die <see cref="T:System.Object" />, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Ruft einen <see cref="T:System.Collections.IEnumerator" /> ab, mit dem die Auflistung durchlaufen werden kann.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Ein <see cref="T:System.Collections.IEnumerator" />, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">Fügt der Auflistung ein Element hinzu.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">Das Element, das der Auflistung hinzugefügt werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="The position into which the new element was inserted.">Die Position, an der das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Entfernt alle Elemente aus der Auflistung.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In allen Fällen.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">Fügt ein Element am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">Der nullbasierte Index der <see cref="T:System.ComponentModel.ListSortDescription" /> in der Auflistung, die abgerufen oder festgelegt werden soll</param>
      <param name="value" vsli:raw="The item to insert into the collection.">Das Element, das in die Auflistung eingefügt werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In allen Fällen.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of an item from the collection.">Entfernt das erste Vorkommen eines Elements aus der Auflistung.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">Das Element, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In allen Fällen.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes an item from the collection at a specified index.">Entfernt ein Element am angegebenen Index aus der Auflistung.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to remove from the collection.">Der nullbasierte Index des aus der Auflistung zu entfernenden <see cref="T:System.ComponentModel.ListSortDescription" /></param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In allen Fällen.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary vsli:raw="Gets the number of items in the collection.">Ruft die Anzahl der Elemente in der Auflistung ab.</summary>
      <returns vsli:raw="The number of items in the collection.">Die Anzahl der Elemente in der Auflistung.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Ruft den angegebenen <see cref="T:System.ComponentModel.ListSortDescription" /> ab oder legt diesen fest.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">Der nullbasierte Index des <see cref="T:System.ComponentModel.ListSortDescription" />-Objekts in der Auflistung, das abgerufen oder festgelegt werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An item is set in the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;, which is read-only.">In der schreibgeschützten <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> wird ein Element festgelegt.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">Das <see cref="T:System.ComponentModel.ListSortDescription" /> mit dem angegebenen Index.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is thread safe.">Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung threadsicher ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the current instance that can be used to synchronize access to the collection.">Ruft die aktuelle Instanz ab, mit der der Zugriff auf die Auflistung synchronisiert werden kann.</summary>
      <returns vsli:raw="The current instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">Die aktuelle Instanz der <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Ruft einen Wert ab, der angibt, ob die Auflistung eine feste Größe aufweist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Ruft die angegebene <see cref="T:System.ComponentModel.ListSortDescription" /> ab.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get in the collection.">Der nullbasierte Index der <see cref="T:System.ComponentModel.ListSortDescription" />, die aus der Auflistung abgerufen werden soll</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">Das <see cref="T:System.ComponentModel.ListSortDescription" /> mit dem angegebenen Index.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary vsli:raw="Specifies the direction of a sort operation.">Gibt die Reihenfolge eines Sortiervorgangs an.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary vsli:raw="Sorts in ascending order.">Sortiert in aufsteigender Reihenfolge.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary vsli:raw="Sorts in descending order.">Sortiert in absteigender Reihenfolge.</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the properties that support lookup-based binding. This class cannot be inherited.">Gibt die Eigenschaften an, die eine suchbasierte Bindung unterstützen. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">Stellt den Standardwert für die <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />-Klasse dar.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class using no parameters.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />-Klasse ohne Parameter.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />-Klasse.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Der Name der Eigenschaft, die als Datenquelle verwendet werden soll.</param>
      <param name="displayMember" vsli:raw="The name of the property to be used for the display name.">Der Name der Eigenschaft, der für den Anzeigenamen verwendet werden soll.</param>
      <param name="valueMember" vsli:raw="The name of the property to be used as the source for values.">Der Name der Eigenschaft, die als Quelle für Werte verwendet werden soll.</param>
      <param name="lookupMember" vsli:raw="The name of the property to be used for lookups.">Der Name der Eigenschaft, der für Suchvorgänge verwendet werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">Bestimmt, ob das angegebene <see cref="T:System.Object" /> und die aktuelle <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />-Instanz gleich sind.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">Das <see cref="T:System.Object" />, das mit der aktuellen <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />-Instanz verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" />, wenn das Objekt und die aktuelle Instanz gleich sind, andernfalls <see langword="false" />, wenn sie nicht gleicht sind.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Ruft den Namen der Datenquelleneigenschaft für die Komponente ab, an die das <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> gebunden ist.</summary>
      <returns vsli:raw="The data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Die Datenquelleneigenschaft für die Komponente, an die das <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> gebunden wird.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary vsli:raw="Gets the name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Ruft den Namen der Anzeigemembereigenschaft für die Komponente ab, an die das <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> gebunden ist.</summary>
      <returns vsli:raw="The name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Der Name der Anzeigemembereigenschaft für die Komponente, an die das <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> gebunden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary vsli:raw="Gets the name of the lookup member for the component to which this attribute is bound.">Ruft den Namen des Suchmembers für die Komponente ab, an die das Attribut gebunden ist.</summary>
      <returns vsli:raw="The name of the lookup member for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Der Name des Suchmembers für die Komponente, an die das <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> gebunden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary vsli:raw="Gets the name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Ruft den Namen der Wertmembereigenschaft für die Komponente ab, an die das <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> gebunden ist.</summary>
      <returns vsli:raw="The name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Der Name der Wertmembereigenschaft für die Komponente, an die das <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> gebunden ist.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary vsli:raw="Implements &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and provides the base implementation for remotable components that are marshaled by value (a copy of the serialized object is passed).">Implementiert <see cref="T:System.ComponentModel.IComponent" /> und stellt die Basisimplementierung für remotefähige Komponenten bereit, die als Wert gemarshallt werden (eine Kopie des serialisierten Objekts wird übergeben).</summary>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary vsli:raw="Adds an event handler to listen to the &lt;see cref=&quot;E:System.ComponentModel.MarshalByValueComponent.Disposed&quot; /&gt; event on the component.">Fügt einen Ereignishandler hinzu, der auf das <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" />-Ereignis für die Komponente lauscht.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.MarshalByValueComponent" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt;.">Gibt alle vom <see cref="T:System.ComponentModel.MarshalByValueComponent" /> verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; and optionally releases the managed resources.">Gibt die von <see cref="T:System.ComponentModel.MarshalByValueComponent" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary vsli:raw="Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.">Gibt einem Objekt Gelegenheit zu dem Versuch, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor es von der Garbage Collection freigegeben wird.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary vsli:raw="Gets the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">Ruft die Implementierung von <see cref="T:System.IServiceProvider" /> ab.</summary>
      <param name="service" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of service you want.">Ein <see cref="T:System.Type" />, der den Typ des gewünschten Dienstes darstellt.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">Ein <see cref="T:System.Object" />, das die Implementierung von <see cref="T:System.IServiceProvider" /> darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any. This method should not be overridden.">Gibt einen <see cref="T:System.String" /> zurück, der den Namen der <see cref="T:System.ComponentModel.Component" /> enthält (sofern vorhanden). Diese Methode darf nicht überschrieben werden.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any.  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; is unnamed.">Ein <see cref="T:System.String" />, der den Namen dieser <see cref="T:System.ComponentModel.Component" /> enthält, sofern vorhanden.  
  
 <see langword="null" />, wenn die <see cref="T:System.ComponentModel.Component" /> unbenannt ist.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary vsli:raw="Gets the container for the component.">Ruft den Container für die Komponente ab.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; interface that represents the component's container, or &lt;see langword=&quot;null&quot; /&gt; if the component does not have a site.">Ein Objekt, das die <see cref="T:System.ComponentModel.IContainer" />-Schnittstelle implementiert, die den Container der Komponente darstellt, oder <see langword="null" />, wenn die Komponente keine Site besitzt.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary vsli:raw="Gets a value indicating whether the component is currently in design mode.">Ruft einen Wert ab, der angibt, ob sich die Komponente gegenwärtig im Entwurfsmodus befindet.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is in design mode; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn sich die Komponente im Entwurfsmodus befindet, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary vsli:raw="Gets the list of event handlers that are attached to this component.">Ruft die Liste der an diese Komponente angefügten Ereignishandler ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventHandlerList&quot; /&gt; that provides the delegates for this component.">Eine <see cref="T:System.ComponentModel.EventHandlerList" />, die die Delegaten für diese Komponente bereitstellt.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary vsli:raw="Gets or sets the site of the component.">Ruft die Site der Komponente ab oder legt sie fest.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface that represents the site of the component.">Ein Objekt, das die <see cref="T:System.ComponentModel.ISite" />-Schnittstelle implementiert, die die Site der Komponente darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary vsli:raw="Represents a mask-parsing service that can be used by any number of controls that support masking, such as the &lt;see cref=&quot;T:System.Windows.Forms.MaskedTextBox&quot; /&gt; control.">Stellt einen Maskenanalysedienst dar, der von einer beliebigen Anzahl von Steuerelementen, die Maskierung unterstützen, verwendet werden kann, z. B. dem <see cref="T:System.Windows.Forms.MaskedTextBox" />-Steuerelement.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.MaskedTextProvider" />-Klasse unter Verwendung der angegebenen Maske.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Ein <see cref="T:System.String" />, der die Eingabemaske darstellt.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and ASCII restriction value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.MaskedTextProvider" />-Klasse unter Verwendung der angegebenen Maske und des angegebenen ASCII-Einschränkungswerts.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Ein <see cref="T:System.String" />, der die Eingabemaske darstellt.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" />, um die Eingabe auf ASCII-kompatible Zeichen zu beschränken, andernfalls <see langword="false" />, um den gesamten Unicode-Satz zuzulassen.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, password character, and prompt usage value.">Initialisiert unter Verwendung der angegebenen Maske, des angegebenen Kennwortzeichens und des Aufforderungsverwendungswerts eine neue Instanz der <see cref="T:System.ComponentModel.MaskedTextProvider" />-Klasse.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Ein <see cref="T:System.String" />, der die Eingabemaske darstellt.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Ein <see cref="T:System.Char" />, der für in eine Kennwortzeichenfolge eingegebene Zeichen angezeigt wird.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um die Eingabe des Aufforderungszeichens zuzulassen, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and culture.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.MaskedTextProvider" />-Klasse unter Verwendung der angegebenen Maske und der angegebenen Kultur.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Ein <see cref="T:System.String" />, der die Eingabemaske darstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Eine <see cref="T:System.Globalization.CultureInfo" />, mit deren Hilfe regionsabhängige Trennzeichen festgelegt werden.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, and ASCII restriction value.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.MaskedTextProvider" />-Klasse unter Verwendung der angegebenen Maske und Kultur sowie des angegebenen ASCII-Einschränkungswerts.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Ein <see cref="T:System.String" />, der die Eingabemaske darstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Eine <see cref="T:System.Globalization.CultureInfo" />, mit deren Hilfe regionsabhängige Trennzeichen festgelegt werden.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" />, um die Eingabe auf ASCII-kompatible Zeichen zu beschränken, andernfalls <see langword="false" />, um den gesamten Unicode-Satz zuzulassen.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.">Initialisiert unter Verwendung der angegebenen Maske und Kultur, des angegebenen Aufforderungsverwendungswerts, des Kennwortzeichens und des ASCII-Einschränkungswerts eine neue Instanz der <see cref="T:System.ComponentModel.MaskedTextProvider" />-Klasse.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Ein <see cref="T:System.String" />, der die Eingabemaske darstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Eine <see cref="T:System.Globalization.CultureInfo" />, mit deren Hilfe regionsabhängige Trennzeichen festgelegt werden.</param>
      <param name="allowPromptAsInput" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value that specifies whether the prompt character should be allowed as a valid input character.">Ein <see cref="T:System.Boolean" />-Wert, der angibt, ob das Aufforderungszeichen als gültiges Eingabezeichen zugelassen werden soll.</param>
      <param name="promptChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed as a placeholder for user input.">Ein <see cref="T:System.Char" />, der als Platzhalter für Benutzereingaben angezeigt wird.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Ein <see cref="T:System.Char" />, der für in eine Kennwortzeichenfolge eingegebene Zeichen angezeigt wird.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" />, um die Eingabe auf ASCII-kompatible Zeichen zu beschränken, andernfalls <see langword="false" />, um den gesamten Unicode-Satz zuzulassen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The mask parameter is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The mask contains one or more non-printable characters.">Der Maskenparameter hat den Wert <see langword="null" /> oder <see cref="F:System.String.Empty" />.  
  
- oder - 
Die Maske enthält ein oder mehrere nicht druckbare Zeichen.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, password character, and prompt usage value.">Initialisiert unter Verwendung der angegebenen Maske und Kultur, des angegebenen Kennwortzeichens und des Aufforderungsverwendungswerts eine neue Instanz der <see cref="T:System.ComponentModel.MaskedTextProvider" />-Klasse.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Ein <see cref="T:System.String" />, der die Eingabemaske darstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Eine <see cref="T:System.Globalization.CultureInfo" />, mit deren Hilfe regionsabhängige Trennzeichen festgelegt werden.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Ein <see cref="T:System.Char" />, der für in eine Kennwortzeichenfolge eingegebene Zeichen angezeigt wird.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um die Eingabe des Aufforderungszeichens zuzulassen, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string.">Fügt das angegebene Eingabezeichen am Ende der formatierten Zeichenfolge hinzu.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">Ein <see cref="T:System.Char" />-Wert, der an die formatierte Zeichenfolge angefügt werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Eingabezeichen erfolgreich hinzugefügt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information.">Fügt das angegebene Eingabezeichen am Ende der formatierten Zeichenfolge hinzu und gibt dann Positions- und beschreibende Informationen aus.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">Ein <see cref="T:System.Char" />-Wert, der an die formatierte Zeichenfolge angefügt werden soll.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">Die nullbasierte Position in der formatierten Zeichenfolge, an der versucht wurde, das Zeichen hinzuzufügen. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis des Vorgangs kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Eingabezeichen erfolgreich hinzugefügt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string.">Fügt die Zeichen aus der angegebenen Eingabezeichenfolge am Ende der formatierten Zeichenfolge hinzu.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">Ein <see cref="T:System.String" /> mit Zeichenwerten, die an die formatierte Zeichenfolge angefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="input" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">
        <see langword="true" />, wenn alle Zeichen aus der Eingabezeichenfolge erfolgreich hinzugefügt wurden, andernfalls <see langword="false" />, um anzugeben, dass keine Zeichen hinzugefügt wurden.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information.">Fügt die Zeichen aus der angegebenen Eingabezeichenfolge am Ende der formatierten Zeichenfolge hinzu und gibt dann Positions- und beschreibende Informationen aus.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">Ein <see cref="T:System.String" /> mit Zeichenwerten, die an die formatierte Zeichenfolge angefügt werden sollen.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">Die nullbasierte Position in der formatierten Zeichenfolge, an der versucht wurde, das Zeichen hinzuzufügen. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis des Vorgangs kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">
        <see langword="true" />, wenn alle Zeichen aus der Eingabezeichenfolge erfolgreich hinzugefügt wurden, andernfalls <see langword="false" />, um anzugeben, dass keine Zeichen hinzugefügt wurden.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters.">Löscht alle bearbeitbaren Eingabezeichen aus der formatierten Zeichenfolge und ersetzt sie durch Aufforderungszeichen.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information.">Löscht alle bearbeitbaren Eingabezeichen aus der formatierten Zeichenfolge, ersetzt sie durch Aufforderungszeichen und gibt dann beschreibende Informationen aus.</summary>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis des Vorgangs kurz beschrieben wird. Ein Ausgabeparameter.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary vsli:raw="Creates a copy of the current &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt;.">Erstellt eine Kopie der aktuellen <see cref="T:System.ComponentModel.MaskedTextProvider" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; object this method creates, cast as an object.">Das von dieser Methode erstellte <see cref="T:System.ComponentModel.MaskedTextProvider" />-Objekt, umgewandelt in ein Objekt.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position after the specified position using the specified search direction.">Gibt die Position der ersten zugewiesenen bearbeitbaren Position nach der angegebenen Position in der angegebenen Suchrichtung zurück.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche gestartet werden soll.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Ein <see cref="T:System.Boolean" />, der die Suchrichtung angibt: <see langword="true" />, um vorwärts zu suchen, oder <see langword="false" />, um rückwärts zu suchen.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Bei erfolgreicher Suche ein <see cref="T:System.Int32" />, der die nullbasierte Position der ersten zugewiesenen bearbeitbaren Position darstellt, die gefunden wurde, andernfalls <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position between the specified positions using the specified search direction.">Gibt die Position der ersten zugewiesenen bearbeitbaren Position zwischen den angegebenen Positionen in der angegebenen Suchrichtung zurück.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche beginnt.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche endet.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Ein <see cref="T:System.Boolean" />, der die Suchrichtung angibt: <see langword="true" />, um vorwärts zu suchen, oder <see langword="false" />, um rückwärts zu suchen.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Bei erfolgreicher Suche ein <see cref="T:System.Int32" />, der die nullbasierte Position der ersten zugewiesenen bearbeitbaren Position darstellt, die gefunden wurde, andernfalls <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position after the specified position using the specified search direction.">Gibt die Position der ersten bearbeitbaren Position nach der angegebenen Position in der angegebenen Suchrichtung zurück.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche gestartet werden soll.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Ein <see cref="T:System.Boolean" />, der die Suchrichtung angibt: <see langword="true" />, um vorwärts zu suchen, oder <see langword="false" />, um rückwärts zu suchen.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Bei erfolgreicher Suche ein <see cref="T:System.Int32" />, der die nullbasierte Position der ersten bearbeitbaren Position darstellt, die gefunden wurde, andernfalls <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position between the specified positions using the specified search direction.">Gibt die Position der ersten bearbeitbaren Position zwischen den angegebenen Positionen in der angegebenen Suchrichtung zurück.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche beginnt.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche endet.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Ein <see cref="T:System.Boolean" />, der die Suchrichtung angibt: <see langword="true" />, um vorwärts zu suchen, oder <see langword="false" />, um rückwärts zu suchen.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Bei erfolgreicher Suche ein <see cref="T:System.Int32" />, der die nullbasierte Position der ersten bearbeitbaren Position darstellt, die gefunden wurde, andernfalls <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position after the specified position using the specified search direction.">Gibt die Position der ersten nicht-bearbeitbaren Position nach der angegebenen Position in der angegebenen Suchrichtung zurück.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche gestartet werden soll.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Ein <see cref="T:System.Boolean" />, der die Suchrichtung angibt: <see langword="true" />, um vorwärts zu suchen, oder <see langword="false" />, um rückwärts zu suchen.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Bei erfolgreicher Suche ein <see cref="T:System.Int32" />, der die nullbasierte Position der ersten gefundenen Literalposition darstellt, andernfalls <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position between the specified positions using the specified search direction.">Gibt die Position der ersten nicht-bearbeitbaren Position zwischen den angegebenen Positionen in der angegebenen Suchrichtung zurück.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche beginnt.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche endet.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Ein <see cref="T:System.Boolean" />, der die Suchrichtung angibt: <see langword="true" />, um vorwärts zu suchen, oder <see langword="false" />, um rückwärts zu suchen.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Bei erfolgreicher Suche ein <see cref="T:System.Int32" />, der die nullbasierte Position der ersten gefundenen Literalposition darstellt, andernfalls <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position after the specified position using the specified search direction.">Gibt die Position der ersten nicht zugewiesenen bearbeitbaren Position nach der angegebenen Position in der angegebenen Suchrichtung zurück.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche gestartet werden soll.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Ein <see cref="T:System.Boolean" />, der die Suchrichtung angibt: <see langword="true" />, um vorwärts zu suchen, oder <see langword="false" />, um rückwärts zu suchen.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Bei erfolgreicher Suche ein <see cref="T:System.Int32" />, der die nullbasierte Position der ersten nicht zugewiesenen bearbeitbaren Position darstellt, die gefunden wurde, andernfalls <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position between the specified positions using the specified search direction.">Gibt die Position der ersten nicht zugewiesenen bearbeitbaren Position zwischen den angegebenen Positionen in der angegebenen Suchrichtung zurück.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche beginnt.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Suche endet.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Ein <see cref="T:System.Boolean" />, der die Suchrichtung angibt: <see langword="true" />, um vorwärts zu suchen, oder <see langword="false" />, um rückwärts zu suchen.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Bei erfolgreicher Suche ein <see cref="T:System.Int32" />, der die nullbasierte Position der ersten nicht zugewiesenen bearbeitbaren Position darstellt, die gefunden wurde, andernfalls <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; denotes success or failure.">Bestimmt, ob der angegebene <see cref="T:System.ComponentModel.MaskedTextResultHint" /> einen Erfolg oder ein Fehlschlagen anzeigt.</summary>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value typically obtained as an output parameter from a previous operation.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />-Wert, der i. d. R. als Ausgabeparameter eines vorherigen Vorgangs abgerufen wird.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value represents a success; otherwise, &lt;see langword=&quot;false&quot; /&gt; if it represents failure.">
        <see langword="true" />, wenn der angegebene <see cref="T:System.ComponentModel.MaskedTextResultHint" />-Wert einen Erfolg darstellt, andernfalls <see langword="false" />, wenn er ein Fehlschlagen darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string.">Fügt das angegebene Zeichen an der angegebenen Position innerhalb der formatierten Zeichenfolge ein.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">Das einzufügende <see cref="T:System.Char" />-Objekt.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">Die nullbasierte Position in der formatierten Zeichenfolge, an der das Zeichen eingefügt werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Einfügung erfolgreich war, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation.">Fügt das angegebene Zeichen an der angegebenen Position innerhalb der formatierten Zeichenfolge ein und gibt die letzte Einfügeposition sowie den Status des Vorgangs zurück.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">Das einzufügende <see cref="T:System.Char" />-Objekt.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">Die nullbasierte Position in der formatierten Zeichenfolge, an der das Zeichen eingefügt werden soll.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">Bei Erfolg der Methode die Position, an der zuletzt ein Zeichen eingefügt wurde, andernfalls die erste Position, an der die Einfügung fehlgeschlagen ist. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis des Einfügevorgangs kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Einfügung erfolgreich war, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string.">Fügt die angegebene Zeichenfolge an einer angegebenen Position innerhalb der formatierten Zeichenfolge ein.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">Das einzufügende <see cref="T:System.String" />-Objekt.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Eingabezeichenfolge eingefügt werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="input" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Einfügung erfolgreich war, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation.">Fügt die angegebene Zeichenfolge an einer angegebenen Position innerhalb der formatierten Zeichenfolge ein und gibt die letzte Einfügeposition sowie den Status des Vorgangs zurück.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">Das einzufügende <see cref="T:System.String" />-Objekt.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Eingabezeichenfolge eingefügt werden soll.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">Bei Erfolg der Methode die Position, an der zuletzt ein Zeichen eingefügt wurde, andernfalls die erste Position, an der die Einfügung fehlgeschlagen ist. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis des Einfügevorgangs kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="input" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Einfügung erfolgreich war, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is available for assignment.">Bestimmt, ob die angegebene Position zugewiesen werden kann.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">Die zu überprüfende nullbasierte Position in der Maske.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable and has not been assigned to yet; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die angegebene Position in der formatierten Zeichenfolge bearbeitbar ist und noch nicht zugewiesen wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is editable.">Bestimmt, ob die angegebene Position bearbeitbar ist.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">Die zu überprüfende nullbasierte Position in der Maske.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die angegebene Position in der formatierten Zeichenfolge bearbeitbar ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid input character.">Bestimmt, ob das angegebene Zeichen ein gültiges Eingabezeichen ist.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Der zu testende <see cref="T:System.Char" />-Wert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid input value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Zeichen einen gültigen Eingabewert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid mask character.">Bestimmt, ob das angegebene Zeichen ein gültiges Maskenzeichen ist.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Der zu testende <see cref="T:System.Char" />-Wert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid mask value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Zeichen einen gültigen Maskenwert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid password character.">Bestimmt, ob das angegebene Zeichen ein gültiges Kennwortzeichen ist.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Der zu testende <see cref="T:System.Char" />-Wert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid password value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Zeichen einen gültigen Kennwortwert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary vsli:raw="Removes the last assigned character from the formatted string.">Entfernt das zuletzt zugewiesene Zeichen aus der formatierten Zeichenfolge.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Zeichen erfolgreich entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information.">Entfernt das zuletzt zugewiesene Zeichen aus der formatierten Zeichenfolge und gibt dann die Löschposition sowie beschreibende Informationen aus.</summary>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the character was actually removed. An output parameter.">Die nullbasierte Position in der formatierten Zeichenfolge, an der das Zeichen entfernt wurde. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis des Vorgangs kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Zeichen erfolgreich entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the assigned character at the specified position from the formatted string.">Entfernt das zugewiesene Zeichen an der angegebenen Position aus der formatierten Zeichenfolge.</summary>
      <param name="position" vsli:raw="The zero-based position of the assigned character to remove.">Die nullbasierte Position des zu entfernenden zugewiesenen Zeichens.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Zeichen erfolgreich entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string.">Entfernt die zugewiesenen Zeichen zwischen den angegebenen Positionen aus der formatierten Zeichenfolge.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">Der nullbasierte Index des zuerst zu entfernenden zugewiesenen Zeichens.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">Der nullbasierte Index des zuletzt zu entfernenden zugewiesenen Zeichens.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Zeichen erfolgreich entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information.">Entfernt die zwischen den angegebenen Positionen zugewiesenen Zeichen aus der formatierten Zeichenfolge und gibt dann die Löschposition sowie beschreibende Informationen aus.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">Der nullbasierte Index des zuerst zu entfernenden zugewiesenen Zeichens.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">Der nullbasierte Index des zuletzt zu entfernenden zugewiesenen Zeichens.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter.">Bei Erfolg die nullbasierte Position in der formatierten Zeichenfolge, an der die Zeichen entfernt wurden, andernfalls die erste Position, an der der Vorgang fehlgeschlagen ist. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis des Vorgangs kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Zeichen erfolgreich entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value.">Ersetzt ein einzelnes Zeichen an oder hinter der angegebenen Position durch den angegebenen Zeichenwert.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Der <see cref="T:System.Char" />-Wert, der den vorhandenen Wert ersetzt.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Die nullbasierte Position, an der nach dem ersten zu ersetzenden bearbeitbaren Zeichen gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Zeichen erfolgreich ersetzt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information.">Ersetzt ein einzelnes Zeichen zwischen der angegebenen Anfangs- und Endposition durch den angegebenen Zeichenwert und gibt dann die Löschposition sowie beschreibende Informationen aus.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Der <see cref="T:System.Char" />-Wert, der den vorhandenen Wert ersetzt.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Ersetzung beginnt.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Ersetzung endet.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">Bei Erfolg die nullbasierte Position in der formatierten Zeichenfolge, an der das letzte Zeichen ersetzt wurde, andernfalls die erste Position, an der der Vorgang fehlgeschlagen ist. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis der Ersetzung kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Zeichen erfolgreich ersetzt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information.">Ersetzt ein einzelnes Zeichen an oder hinter der angegebenen Position durch den angegebenen Zeichenwert und gibt dann die Löschposition sowie beschreibende Informationen aus.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Der <see cref="T:System.Char" />-Wert, der den vorhandenen Wert ersetzt.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Die nullbasierte Position, an der nach dem ersten zu ersetzenden bearbeitbaren Zeichen gesucht werden soll.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">Bei Erfolg die nullbasierte Position in der formatierten Zeichenfolge, an der das letzte Zeichen ersetzt wurde, andernfalls die erste Position, an der der Vorgang fehlgeschlagen ist. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis der Ersetzung kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Zeichen erfolgreich ersetzt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string.">Ersetzt einen Bereich bearbeitbarer Zeichen und beginnt dabei an der angegebenen Position sowie mit der angegebenen Zeichenfolge.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Der <see cref="T:System.String" />-Wert, durch den die vorhandenen bearbeitbaren Zeichen ersetzt werden.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Die nullbasierte Position, an der nach dem ersten zu ersetzenden bearbeitbaren Zeichen gesucht werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="input" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn alle Zeichen erfolgreich ersetzt wurden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information.">Ersetzt einen Bereich bearbeitbarer Zeichen zwischen der angegebenen Anfangs- und Endposition durch die angegebene Zeichenfolge und gibt dann die Löschposition sowie beschreibende Informationen aus.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Der <see cref="T:System.String" />-Wert, durch den die vorhandenen bearbeitbaren Zeichen ersetzt werden.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Ersetzung beginnt.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Ersetzung endet.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">Bei Erfolg die nullbasierte Position in der formatierten Zeichenfolge, an der das letzte Zeichen ersetzt wurde, andernfalls die erste Position, an der der Vorgang fehlgeschlagen ist. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis der Ersetzung kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn alle Zeichen erfolgreich ersetzt wurden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information.">Ersetzt einen Bereich bearbeitbarer Zeichen beginnend an der angegebenen Position und mit der angegebenen Zeichenfolge und gibt dann die Löschposition sowie beschreibende Informationen aus.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Der <see cref="T:System.String" />-Wert, durch den die vorhandenen bearbeitbaren Zeichen ersetzt werden.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Die nullbasierte Position, an der nach dem ersten zu ersetzenden bearbeitbaren Zeichen gesucht werden soll.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">Bei Erfolg die nullbasierte Position in der formatierten Zeichenfolge, an der das letzte Zeichen ersetzt wurde, andernfalls die erste Position, an der der Vorgang fehlgeschlagen ist. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis der Ersetzung kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn alle Zeichen erfolgreich ersetzt wurden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary vsli:raw="Sets the formatted string to the specified input string.">Legt die formatierte Zeichenfolge auf die angegebene Eingabezeichenfolge fest.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">Der <see cref="T:System.String" />-Wert, über den die formatierte Zeichenfolge festgelegt wird.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="input" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn alle Zeichen erfolgreich festgelegt wurden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information.">Legt die formatierte Zeichenfolge auf die angegebene Eingabezeichenfolge fest und gibt anschließend die Löschposition sowie beschreibende Informationen aus.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">Der <see cref="T:System.String" />-Wert, über den die formatierte Zeichenfolge festgelegt wird.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter.">Bei Erfolg die nullbasierte Position in der formatierten Zeichenfolge, an der das letzte Zeichen festgelegt wurde, andernfalls die erste Position, an der der Vorgang fehlgeschlagen ist. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the set operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis des Festlegungsvorgangs kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="input" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn alle Zeichen erfolgreich festgelegt wurden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary vsli:raw="Returns the formatted string in a displayable form.">Gibt die formatierte Zeichenfolge in anzeigbarer Form zurück.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes prompts and mask literals.">Der formatierte <see cref="T:System.String" /> mit Aufforderungszeichen und Maskenliteralzeichen.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary vsli:raw="Returns the formatted string that includes all the assigned character values.">Gibt die formatierte Zeichenfolge zurück, die alle zugewiesenen Zeichenwerte umfasst.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values.">Der formatierte <see cref="T:System.String" />, der alle zugewiesenen Zeichenwerte umfasst.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including password characters.">Gibt die formatierte Zeichenfolge (optional einschließlich von Kennwortzeichen) zurück.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" />, um die tatsächlich bearbeitbaren Zeichen zurückzugeben, andernfalls <see langword="false" />, um anzugeben, dass die <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />-Eigenschaft zu beachten ist.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes literals, prompts, and optionally password characters.">Der formatierte <see cref="T:System.String" />, der Literalzeichen, Aufforderungszeichen und optional auch Kennwortzeichen umfasst.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including prompt and literal characters.">Gibt die formatierte Zeichenfolge (optional einschließlich Aufforderungs- und Literalzeichen) zurück.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um Aufforderungszeichen in die Rückgabezeichenfolge einzuschließen, andernfalls <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um Literalzeichen in die Rückgabezeichenfolge einzuschließen, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values and optionally includes literals and prompts.">Der formatierte <see cref="T:System.String" />, der alle zugewiesenen Zeichenwerte und optional Literal- und Aufforderungszeichen umfasst.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt, literal, and password characters.">Gibt eine Teilzeichenfolge der formatierten Zeichenfolge (optional einschließlich Aufforderungs-, Literal- und Kennwortzeichen) zurück.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" />, um die tatsächlich bearbeitbaren Zeichen zurückzugeben, andernfalls <see langword="false" />, um anzugeben, dass die <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />-Eigenschaft zu beachten ist.</param>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um Aufforderungszeichen in die Rückgabezeichenfolge einzuschließen, andernfalls <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um Literalzeichen in die Rückgabezeichenfolge einzuschließen, andernfalls <see langword="false" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Ausgabe beginnt.</param>
      <param name="length" vsli:raw="The number of characters to return.">Die Anzahl der zu zurückzugebenden Zeichen</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">Bei Erfolg eine Teilzeichenfolge des formatierten <see cref="T:System.String" />, die alle zugewiesenen Zeichenwerte und optional Literal-, Aufforderungs- und Kennwortzeichen umfasst, andernfalls die <see cref="F:System.String.Empty" />-Zeichenfolge.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt and literal characters.">Gibt eine Teilzeichenfolge der formatierten Zeichenfolge (optional einschließlich Aufforderungs- und Literalzeichen) zurück.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um Aufforderungszeichen in die Rückgabezeichenfolge einzuschließen, andernfalls <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um Literalzeichen in die Rückgabezeichenfolge einzuschließen, andernfalls <see langword="false" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Ausgabe beginnt.</param>
      <param name="length" vsli:raw="The number of characters to return.">Die Anzahl der zu zurückzugebenden Zeichen</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals and prompts; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">Bei Erfolg eine Teilzeichenfolge des formatierten <see cref="T:System.String" />, die alle zugewiesenen Zeichenwerte und optional Literal- und Aufforderungszeichen umfasst, andernfalls die <see cref="F:System.String.Empty" />-Zeichenfolge.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including password characters.">Gibt eine Teilzeichenfolge der formatierten Zeichenfolge (optional einschließlich von Kennwortzeichen) zurück.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" />, um die tatsächlich bearbeitbaren Zeichen zurückzugeben, andernfalls <see langword="false" />, um anzugeben, dass die <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />-Eigenschaft zu beachten ist.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Ausgabe beginnt.</param>
      <param name="length" vsli:raw="The number of characters to return.">Die Anzahl der zu zurückzugebenden Zeichen</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes literals, prompts, and optionally password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">Bei Erfolg eine Teilzeichenfolge des formatierten <see cref="T:System.String" />, die Literal-, Aufforderungs- und optional Kennwortzeichen einschließt, andernfalls die <see cref="F:System.String.Empty" />-Zeichenfolge.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string.">Gibt eine Teilzeichenfolge der formatierten Zeichenfolge zurück.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Die nullbasierte Position in der formatierten Zeichenfolge, an der die Ausgabe beginnt.</param>
      <param name="length" vsli:raw="The number of characters to return.">Die Anzahl der zu zurückzugebenden Zeichen</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">Bei Erfolg eine Teilzeichenfolge des formatierten <see cref="T:System.String" />, die alle zugewiesenen Zeichenwerte umfasst, andernfalls die <see cref="F:System.String.Empty" />-Zeichenfolge.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified character could be set successfully at the specified position.">Prüft, ob das angegebene Zeichen erfolgreich an der angegebenen Position festgelegt werden konnte.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Der zu testende <see cref="T:System.Char" />-Wert.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">Die Position in der Maske, gegen die das Eingabezeichen geprüft werden soll.</param>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis des Vorgangs kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character is valid for the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Zeichen für die angegebene Position gültig ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary vsli:raw="Tests whether the specified character would be escaped at the specified position.">Prüft, ob das angegebene Zeichen an der angegebenen Position mit Escapezeichen versehen werden würde.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Der zu testende <see cref="T:System.Char" />-Wert.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">Die Position in der Maske, gegen die das Eingabezeichen geprüft werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character would be escaped at the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Zeichen an der angegebenen Position mit Escapezeichen versehen werden würde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary vsli:raw="Tests whether the specified string could be set successfully.">Prüft, ob die angegebene Zeichenfolge erfolgreich festgelegt werden konnte.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">Der zu testende <see cref="T:System.String" />-Wert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die angegebene Zeichenfolge eine gültige Eingabe ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified string could be set successfully, and then outputs position and descriptive information.">Prüft, ob die angegebene Zeichenfolge erfolgreich festgelegt werden konnte, und gibt dann die Position und beschreibende Informationen aus.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">Der zu testende <see cref="T:System.String" />-Wert.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter.">Bei Erfolg die nullbasierte Position des zuletzt geprüften Zeichens, andernfalls die erste Position, an der die Prüfung fehlschlug. Ein Ausgabeparameter.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the test operation. An output parameter.">Ein <see cref="T:System.ComponentModel.MaskedTextResultHint" />, mit dem das Ergebnis der Prüfung kurz beschrieben wird. Ein Ausgabeparameter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die angegebene Zeichenfolge eine gültige Eingabe ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary vsli:raw="Gets a value indicating whether the prompt character should be treated as a valid input character or not.">Ruft einen Wert ab, der angibt, ob das Aufforderungszeichen als gültiges Eingabezeichen behandelt werden soll.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the user can enter &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt; into the control; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn der Benutzer <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> im Steuerelement eingeben darf, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary vsli:raw="Gets a value indicating whether the mask accepts characters outside of the ASCII character set.">Ruft einen Wert ab, der angibt, ob die Maske Zeichen akzeptiert, die nicht dem ASCII-Zeichensatz angehören.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if only ASCII is accepted; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; can accept any arbitrary Unicode character. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn nur ASCII akzeptiert wird, und <see langword="false" />, wenn <see cref="T:System.ComponentModel.MaskedTextProvider" /> jedes beliebige Unicode-Zeichen akzeptieren darf. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions that have already been successfully assigned an input value.">Ruft die Anzahl von bearbeitbaren Zeichenpositionen ab, denen bereits erfolgreich ein Eingabewert zugewiesen wurde.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions in the input mask that have already been assigned a character value in the formatted string.">Ein <see cref="T:System.Int32" /> mit der Anzahl der in der Eingabemaske enthaltenen bearbeitbaren Zeichenpositionen, denen bereits ein Zeichenwert in der formatierten Zeichenfolge zugewiesen wurde.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions in the input mask that have not yet been assigned an input value.">Ruft die Anzahl der bearbeitbaren Zeichenpositionen in der Eingabemaske ab, denen bisher noch kein Eingabewert zugewiesen wurde.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions that not yet been assigned a character value.">Ein <see cref="T:System.Int32" /> mit der Anzahl der bearbeitbaren Zeichenpositionen, denen bisher noch kein Zeichenwert zugewiesen wurde.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary vsli:raw="Gets the culture that determines the value of the localizable separators and placeholders in the input mask.">Ruft die Kultur ab, die den Wert der lokalisierbaren Trennzeichen und Platzhalter in der Eingabemaske bestimmt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; containing the culture information associated with the input mask.">Ein <see cref="T:System.Globalization.CultureInfo" /> mit den der Eingabemaske zugeordneten Kulturinformationen.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary vsli:raw="Gets the default password character used obscure user input.">Ruft das zur Verdeckung von Benutzereingaben verwendete Standardkennwortzeichen ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that represents the default password character.">Ein <see cref="T:System.Char" />, der das Standardkennwortzeichen darstellt.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary vsli:raw="Gets the number of editable positions in the formatted string.">Ruft die Anzahl der bearbeitbaren Positionen in der formatierten Zeichenfolge ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable positions in the formatted string.">Ein <see cref="T:System.Int32" /> mit der Anzahl der bearbeitbaren Positionen in der formatierten Zeichenfolge.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary vsli:raw="Gets a newly created enumerator for the editable positions in the formatted string.">Ruft einen neu erstellten Enumerator für die bearbeitbaren Positionen in der formatierten Zeichenfolge ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that supports enumeration over the editable positions in the formatted string.">Ein <see cref="T:System.Collections.IEnumerator" />, der Enumeration über die bearbeitbaren Positionen in der formatierten Zeichenfolge unterstützt.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary vsli:raw="Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.">Ruft einen Wert ab, der angibt, ob in der Eingabemaske vorhandene Literalzeichen in die formatierte Zeichenfolge aufgenommen werden, oder legt diesen Wert fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if literals are included; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn Literalzeichen aufgenommen werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary vsli:raw="Gets or sets a value indicating whether &lt;see cref=&quot;P:System.Windows.Forms.MaskedTextBox.PromptChar&quot; /&gt; is used to represent the absence of user input when displaying the formatted string.">Ruft einen Wert ab, der angibt, ob mithilfe von <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> bei der Anzeige der formatierten Zeichenfolge das Nichtvorhandensein von Benutzereingaben angegeben wird, oder legt diesen Wert fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character is used to represent the positions where no user input was provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn das Aufforderungszeichen zur Darstellung der Positionen verwendet wird, an denen keine Benutzereingaben vorgenommen wurden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary vsli:raw="Gets the upper bound of the range of invalid indexes.">Ruft die Obergrenze des ungültigen Indexbereichs ab.</summary>
      <returns vsli:raw="A value representing the largest invalid index, as determined by the provider implementation. For example, if the lowest valid index is 0, this property will return -1.">Ein Wert, der den von der Anbieterimplementierung bestimmten größten ungültigen Index darstellt. Wenn beispielsweise der niedrigste gültige Index 0 ist, gibt diese Eigenschaft -1 zurück.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary vsli:raw="Gets or sets a value that determines whether password protection should be applied to the formatted string.">Ruft einen Wert ab, der bestimmt, ob auf die formatierte Zeichenfolge Kennwortschutz angewendet werden soll, oder legt einen solchen Wert fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input string is to be treated as a password string; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eingabezeichenfolge als Kennwortzeichenfolge behandelt werden soll, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified position in the formatted string.">Ruft das Element an der angegebenen Position in der formatierten Zeichenfolge ab.</summary>
      <param name="index" vsli:raw="A zero-based index of the element to retrieve.">Ein nullbasierter Index des abzurufenden Elements.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero or greater than or equal to the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.Length&quot; /&gt; of the mask.">
        <paramref name="index" /> ist kleiner als 0 (null) oder größer oder gleich der <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> der Maske.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; at the specified position in the formatted string.">Der <see cref="T:System.Char" /> an der angegebenen Position in der formatierten Zeichenfolge.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary vsli:raw="Gets the index in the mask of the rightmost input character that has been assigned to the mask.">Ruft in der Maske den Index des ganz rechts stehenden, der Maske zugeordneten Eingabezeichens ab.</summary>
      <returns vsli:raw="If at least one input character has been assigned to the mask, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the index of rightmost assigned position; otherwise, if no position has been assigned, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Wenn der Maske mindestens ein Eingabezeichen zugeordnet wurde, ein <see cref="T:System.Int32" /> mit dem Index der am weitesten rechts zugeordneten Position, andernfalls<see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />, wenn keine Position zugeordnet wurde.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary vsli:raw="Gets the length of the mask, absent any mask modifier characters.">Ruft die Länge der Maske ohne Maskenmodifiziererzeichen ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of positions in the mask, excluding characters that modify mask input.">Ein <see cref="T:System.Int32" /> mit der Anzahl der in der Maske enthaltenen Positionen mit Ausnahme von Zeichen zur Änderung der Maskeneingabe.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary vsli:raw="Gets the input mask.">Ruft die Eingabemaske ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the full mask.">Ein <see cref="T:System.String" /> mit der vollständigen Maske.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary vsli:raw="Gets a value indicating whether all required inputs have been entered into the formatted string.">Ruft einen Wert ab, der angibt, ob in der formatierten Zeichenfolge alle erforderlichen Eingaben erfolgt sind.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required input has been entered into the mask; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn alle erforderlichen Eingaben in der Maske erfolgt sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary vsli:raw="Gets a value indicating whether all required and optional inputs have been entered into the formatted string.">Ruft einen Wert ab, der angibt, ob in der formatierten Zeichenfolge alle erforderlichen und optionalen Eingaben erfolgt sind.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required and optional inputs have been entered; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn alle erforderlichen und optionalen Eingaben erfolgt sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary vsli:raw="Gets or sets the character to be substituted for the actual input characters.">Ruft das Zeichen ab, das das eigentliche Eingabezeichen ersetzen soll, oder legt dieses fest.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The password character specified when setting this property is the same as the current prompt character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt;. The two are required to be different.">Das bei der Festlegung dieser Eigenschaft angegebene Kennwortzeichen entspricht dem aktuellen Aufforderungszeichen <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />. Die zwei Zeichen müssen unterschiedlich sein.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">Das bei der Festlegung dieser Eigenschaft angegebene Zeichen ist kein durch die <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />-Methode festgelegtes gültiges Kennwortzeichen.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value used as the password character.">Der als Kennwortzeichen verwendete <see cref="T:System.Char" />-Wert.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary vsli:raw="Gets or sets the character used to represent the absence of user input for all available edit positions.">Ruft das Zeichen ab, mit dem das Nichtvorhandensein von Benutzereingaben für alle verfügbaren Bearbeitungspositionen dargestellt wird, oder legt dieses Zeichen fest.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The prompt character specified when setting this property is the same as the current password character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt;. The two are required to be different.">Das bei der Festlegung dieser Eigenschaft angegebene Aufforderungszeichen entspricht dem aktuellen Kennwortzeichen <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />. Die zwei Zeichen müssen unterschiedlich sein.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">Das bei der Festlegung dieser Eigenschaft angegebene Zeichen ist kein durch die <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />-Methode festgelegtes gültiges Kennwortzeichen.</exception>
      <returns vsli:raw="The character used to prompt the user for input. The default is an underscore (_).">Das Zeichen, über das der Benutzer zur Eingabe aufgefordert wird. Der Standardwert ist ein Unterstrich (_).</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary vsli:raw="Gets or sets a value that determines how an input character that matches the prompt character should be handled.">Ruft einen Wert ab, der bestimmt, wie ein dem Aufforderungszeichen entsprechendes Eingabezeichen behandelt werden soll, oder legt diesen Wert fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the prompt character is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn die Eingabe des Aufforderungszeichens die Zurücksetzung der aktuellen bearbeitbaren Position in der Maske zur Folge hat, andernfalls <see langword="false" />, um anzugeben, dass das Aufforderungszeichen wie ein normales Eingabezeichen verarbeitet werden soll. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary vsli:raw="Gets or sets a value that determines how a space input character should be handled.">Ruft einen Wert ab, der bestimmt, wie ein eingegebenes Leerzeichen zu behandeln ist, oder legt diesen Wert fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the space input character causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that it is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn die Eingabe des Leerzeichens die Zurücksetzung der aktuellen bearbeitbaren Position in der Maske zur Folge hat, andernfalls <see langword="false" />, um anzugeben, dass das Leerzeichen wie ein normales Eingabezeichen verarbeitet werden soll. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary vsli:raw="Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.">Ruft einen Wert ab, der angibt, ob Literalzeichenpositionen in der Maske durch ihnen entsprechende Werte überschrieben werden dürfen, oder legt einen solchen Wert fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow literals to be added back; otherwise, &lt;see langword=&quot;false&quot; /&gt; to not allow the user to overwrite literal characters. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, um das Wiederhinzufügen von Literalzeichen zuzulassen, andernfalls <see langword="false" />, wenn das Überschreiben von Literalzeichen durch den Benutzer nicht erlaubt werden soll. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary vsli:raw="Specifies values that succinctly describe the results of a masked text parsing operation.">Gibt Werte an, mit denen die Ergebnisse einer Analyseoperation für maskierten Text kurz beschrieben werden.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not alphanumeric. .">Der Vorgang war erfolglos. Ein nicht alphanumerisches Eingabezeichen wurde gefunden. .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not a member of the ASCII character set.">Der Vorgang war erfolglos. Ein Eingabezeichen wurde gefunden, bei dem es sich nicht um einen Bestandteil des ASCII-Zeichensatzes handelte.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary vsli:raw="Success. The operation succeeded because a literal, prompt or space character was an escaped character. For more information about escaped characters, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)&quot; /&gt; method.">Erfolgreich. Der Vorgang war erfolgreich, da ein Literalzeichen, ein Aufforderungszeichen oder ein Leerzeichen ein Escapezeichen war. Weitere Informationen über Escapezeichen finden Sie unter der <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" />-Methode.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a digit.">Der Vorgang war erfolglos. Ein Eingabezeichen wurde gefunden, bei dem es sich nicht um eine Ziffer handelte.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary vsli:raw="Operation did not succeed. The program encountered an input character that was not valid. For more information about characters that are not valid, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)&quot; /&gt; method.">Der Vorgang war erfolglos. Vom Programm wurde ein ungültiges Eingabezeichen gefunden. Weitere Informationen über ungültige Zeichen finden Sie unter der <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />-Methode.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a letter.">Der Vorgang war erfolglos. Ein Eingabezeichen wurde gefunden, bei dem es sich nicht um einen Buchstaben handelte.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed; therefore, no side effect was produced.">Erfolgreich. Der primäre Vorgang wurde nicht ausgeführt, da er nicht erforderlich war. Daher wurde kein Nebeneffekt erzeugt.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary vsli:raw="Operation did not succeed. The current position in the formatted string is a literal character.">Der Vorgang war erfolglos. Die aktuelle Position in der formatierten Zeichenfolge ist ein Literalzeichen.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary vsli:raw="Operation did not succeed. The specified position is not in the range of the target string; typically it is either less than zero or greater then the length of the target string.">Der Vorgang war erfolglos. Die angegebene Position liegt außerhalb des Bereichs der Zielzeichenfolge. Sie ist dann normalerweise entweder kleiner als 0 (null) oder länger als die Zielzeichenfolge.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary vsli:raw="Operation did not succeed. The prompt character is not valid at input, perhaps because the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">Der Vorgang war erfolglos. Die Eingabe des Aufforderungszeichens ist ungültig, da möglicherweise die <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" />-Eigenschaft auf <see langword="false" /> festgelegt ist.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed, but the method produced a side effect. For example, the &lt;see cref=&quot;Overload:System.ComponentModel.MaskedTextProvider.RemoveAt&quot; /&gt; method can delete an unassigned edit position, which causes left-shifting of subsequent characters in the formatted string.">Erfolgreich. Der primäre Vorgang wurde nicht ausgeführt, da er nicht erforderlich war. Die Methode hat jedoch einen Nebeneffekt erzeugt. Die <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />-Methode kann z. B. eine nicht zugewiesene Bearbeitungsposition löschen, was zu einer Linksverschiebung der Folgezeichen in der formatierten Zeichenfolge führt.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a signed digit.">Der Vorgang war erfolglos. Ein Eingabezeichen wurde gefunden, bei dem es sich nicht um eine Ziffer mit Vorzeichen handelte.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary vsli:raw="Success. The primary operation succeeded.">Erfolgreich. Der primäre Vorgang war erfolgreich.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary vsli:raw="Operation did not succeed. There were not enough edit positions available to fulfill the request.">Der Vorgang war erfolglos. Es waren nicht genügend Bearbeitungspositionen zur Bearbeitung der Anforderung verfügbar.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary vsli:raw="Unknown. The result of the operation could not be determined.">Unbekannt. Das Ergebnis des Vorgangs konnte nicht bestimmt werden.</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary vsli:raw="Represents a class member, such as a property or event. This is an abstract base class.">Stellt einen Klassenmember dar, z. B. eine Eigenschaft oder ein Ereignis. Dies ist eine abstrakte Basisklasse.</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse mit der angegebenen <see cref="T:System.ComponentModel.MemberDescriptor" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the member and its attributes.">Eine <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse, die den Namen des Members und dessen Attribute enthält.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the old &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse mit dem Namen in der angegebenen <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse und den Attributen in der alten <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse und im <see cref="T:System.Attribute" />-Array.</summary>
      <param name="oldMemberDescriptor" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">Eine <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse mit dem Namen des Members und dessen Attributen.</param>
      <param name="newAttributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects with the attributes you want to add to the member.">Ein Array von <see cref="T:System.Attribute" />-Objekten mit den Attributen, die dem Member hinzugefügt werden sollen.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse mit dem angegebenen Namen des Members.</summary>
      <param name="name" vsli:raw="The name of the member.">Der Name des Members.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">Der Name ist eine leere Zeichenfolge ("") oder <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member and an array of attributes.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse mit dem angegebenen Namen des Members und einem Array von Attributen.</summary>
      <param name="name" vsli:raw="The name of the member.">Der Name des Members.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the member attributes.">Ein Array vom Typ <see cref="T:System.Attribute" />, das die Memberattribute enthält.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">Der Name ist eine leere Zeichenfolge ("") oder <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary vsli:raw="Creates a collection of attributes using the array of attributes passed to the constructor.">Erstellt eine Auflistung von Attributen, wobei das Array von Attributen verwendet wird, das an den Konstruktor übergeben wurde.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that contains the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt; attributes.">Eine neue <see cref="T:System.ComponentModel.AttributeCollection" />-Klasse, die die <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />-Attribute enthält.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this instance to the given object to see if they are equivalent.">Vergleicht diese Instanz und das angegebene Objekt auf Äquivalenz.</summary>
      <param name="obj" vsli:raw="The object to compare to the current instance.">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> bei Äquivalenz, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="When overridden in a derived class, adds the attributes of the inheriting class to the specified list of attributes in the parent class.">Fügt beim Überschreiben in einer abgeleiteten Klasse der angegebenen Attributliste in der übergeordneten Klasse die Attribute der erbenden Klasse hinzu.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">Eine <see cref="T:System.Collections.IList" />-Schnittstelle, in der die Attribute in der übergeordneten Klasse aufgeführt sind. Diese ist zunächst leer.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary vsli:raw="Finds the given method through reflection, searching only for public methods.">Sucht die angegebene Methode mithilfe von Reflektion, wobei nur nach öffentlichen Methoden gesucht wird.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">Die Komponente, die die Methode enthält.</param>
      <param name="name" vsli:raw="The name of the method to find.">Der Name der zu suchenden Methode.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">Ein Array von Parametern für die Methode, mit dessen Hilfe zwischen überladenen Methoden ausgewählt werden kann.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">Der Typ, der für die Methode zurückgegeben wird.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">Eine <see cref="T:System.Reflection.MethodInfo" />-Klasse, die die Methode darstellt, oder <see langword="null" />, wenn die Methode nicht gefunden wird.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Finds the given method through reflection, with an option to search only public methods.">Sucht die angegebene Methode mithilfe von Reflektion, wobei nur nach öffentlichen Methoden gesucht wird.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">Die Komponente, die die Methode enthält.</param>
      <param name="name" vsli:raw="The name of the method to find.">Der Name der zu suchenden Methode.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">Ein Array von Parametern für die Methode, mit dessen Hilfe zwischen überladenen Methoden ausgewählt werden kann.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">Der Typ, der für die Methode zurückgegeben wird.</param>
      <param name="publicOnly" vsli:raw="Whether to restrict search to public methods.">Legt fest, ob die Suche auf öffentliche Methoden beschränkt bleiben soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">Eine <see cref="T:System.Reflection.MethodInfo" />-Klasse, die die Methode darstellt, oder <see langword="null" />, wenn die Methode nicht gefunden wird.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.MemberDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="Retrieves the object that should be used during invocation of members.">Ruft das Objekt ab, das beim Aufrufen der Member verwendet werden soll.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">Die <see cref="T:System.Type" />-Klasse des Aufrufziels.</param>
      <param name="instance" vsli:raw="The potential invocation target.">Das potenzielle Aufrufziel.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> oder <paramref name="instance" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The object to be used during member invocations.">Das Objekt, das beim Aufrufen der Member verwendet werden soll.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary vsli:raw="Gets the component on which to invoke a method.">Ruft die Komponente ab, für die eine Methode aufgerufen werden soll.</summary>
      <param name="componentClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of component this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; is bound to. For example, if this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; describes a property, this parameter should be the class that the property is declared on.">Eine <see cref="T:System.Type" />-Klasse, die den Komponententyp darstellt, an den diese <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse gebunden ist. Wenn diese <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse z. B. eine Eigenschaft beschreibt, muss es sich bei diesem Parameter um die Klasse handeln, für die die Eigenschaft deklariert ist.</param>
      <param name="component" vsli:raw="An instance of the object to call.">Eine Instanz des aufzurufenden Objekts.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentClass&quot; /&gt; or &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentClass" /> oder <paramref name="component" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="An instance of the component to invoke. This method returns a visual designer when the property is attached to a visual designer.">Eine Instanz der aufzurufenden Komponente. Diese Methode gibt einen visuellen Designer zurück, sofern sie einem visuellen Designer zugeordnet ist.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary vsli:raw="Gets a component site for the given component.">Ruft eine Komponentensite für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The component for which you want to find a site.">Die Komponente, für die eine Site gesucht werden soll.</param>
      <returns vsli:raw="The site of the component, or &lt;see langword=&quot;null&quot; /&gt; if a site does not exist.">Die Site der Komponente oder <see langword="null" />, wenn keine Site vorhanden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary vsli:raw="Gets or sets an array of attributes.">Ruft ein Array von Attributen ab oder legt es fest.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the attributes of this member.">Ein Array vom Typ <see cref="T:System.Attribute" />, das die Attribute dieses Members enthält.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary vsli:raw="Gets the collection of attributes for this member.">Ruft die Auflistung von Attributen für diesen Member ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that provides the attributes for this member, or an empty collection if there are no attributes in the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt;.">Eine <see cref="T:System.ComponentModel.AttributeCollection" />-Klasse, die die Attribute für diesen Member bereitstellt, oder eine leere Auflistung, wenn in der <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />-Eigenschaft keine Attribute vorhanden sind.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary vsli:raw="Gets the name of the category to which the member belongs, as specified in the &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;.">Ruft den Namen der Kategorie ab, zu der der Member gehört. Dieser ist in der <see cref="T:System.ComponentModel.CategoryAttribute" />-Klasse angegeben.</summary>
      <returns vsli:raw="The name of the category to which the member belongs. If there is no &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;, the category name is set to the default category, &lt;see langword=&quot;Misc&quot; /&gt;.">Der Name der Kategorie, zu der der Member gehört. Wenn keine <see cref="T:System.ComponentModel.CategoryAttribute" />-Klasse vorhanden ist, wird der Kategoriename auf die Standardkategorie <see langword="Misc" /> festgelegt.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary vsli:raw="Gets the description of the member, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;.">Ruft die Beschreibung des Members ab, die in der <see cref="T:System.ComponentModel.DescriptionAttribute" />-Klasse angegeben ist.</summary>
      <returns vsli:raw="The description of the member. If there is no &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;, the property value is set to the default, which is an empty string (&quot;&quot;).">Die Beschreibung des Members. Wenn keine <see cref="T:System.ComponentModel.DescriptionAttribute" />-Klasse vorhanden ist, wird der Eigenschaftswert auf die Standardeinstellung, eine leere Zeichenfolge (""), festgelegt.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary vsli:raw="Gets whether this member should be set only at design time, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;.">Ruft ab, ob dieser Member nur zur Entwurfszeit festgelegt werden darf. Dies ist in der <see cref="T:System.ComponentModel.DesignOnlyAttribute" />-Klasse angegeben.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this member should be set only at design time; &lt;see langword=&quot;false&quot; /&gt; if the member can be set during run time.">
        <see langword="true" />, wenn dieser Member nur zur Entwurfszeit festgelegt werden darf, <see langword="false" />, wenn der Member zur Laufzeit festgelegt werden kann.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary vsli:raw="Gets the name that can be displayed in a window, such as a Properties window.">Ruft den Namen ab, der in einem Fenster, z. B. im Eigenschaftenfenster, angezeigt werden kann.</summary>
      <returns vsli:raw="The name to display for the member.">Der Name, der für den Member angezeigt wird.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary vsli:raw="Gets a value indicating whether the member is browsable, as specified in the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;.">Ruft einen Wert ab, der angibt, ob der Member durchsucht werden kann. Dies ist in der <see cref="T:System.ComponentModel.BrowsableAttribute" />-Klasse angegeben.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is browsable; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If there is no &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;, the property value is set to the default, which is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn der Member durchsucht werden kann, andernfalls <see langword="false" />. Wenn keine <see cref="T:System.ComponentModel.BrowsableAttribute" />-Klasse vorhanden ist, wird der Eigenschaftswert auf die Standardeinstellung <see langword="true" /> festgelegt.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary vsli:raw="Gets the name of the member.">Ruft den Namen des Members ab.</summary>
      <returns vsli:raw="The name of the member.">Der Name des Members.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary vsli:raw="Gets the hash code for the name of the member, as specified in &lt;see cref=&quot;M:System.String.GetHashCode&quot; /&gt;.">Ruft den Hashcode für den Namen des Members ab, der in <see cref="M:System.String.GetHashCode" /> angegeben ist.</summary>
      <returns vsli:raw="The hash code for the name of the member.">Der Hashcode für den Namen des Members.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary vsli:raw="Provides a type converter to convert multiline strings to a simple string.">Stellt einen Typkonverter zum Konvertieren mehrzeiliger Zeichenfolgen in eine einfache Zeichenfolge bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MultilineStringConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.MultilineStringConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Konvertiert das angegebene Wertobjekt in den angegebenen Typ mit dem angegebenen Kontext und Kulturinformationen.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Ein <see cref="T:System.Globalization.CultureInfo" />. Wenn <see langword="null" /> übergeben wird, wird von der aktuellen Kultur ausgegangen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Der <see cref="T:System.Type" />, in den der Wertparameter konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the &lt;paramref name=&quot;value&quot; /&gt; parameter, using the specified context and attributes.">Gibt unter Verwendung des angegebenen Kontexts und der angegebenen Attribute eine Auflistung der Eigenschaften für den Arraytyp zurück, der durch den <paramref name="value" />-Parameter angegeben ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Ein <see cref="T:System.Object" />, die den Typ des Arrays angibt, für den Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, das als Filter verwendet wird.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit für diesen Datentyp verfügbar gemachten Eigenschaften oder<see langword="null" />, wenn keine Eigenschaften vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Gibt zurück, ob dieses Objekt Eigenschaften unter Verwendung des angegebenen Kontexts unterstützt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.ComponentModel.MultilineStringConverter.GetProperties&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" /> aufgerufen werden muss, um die Eigenschaften dieses Objekts zu ermitteln, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary vsli:raw="Provides the base implementation for the &lt;see cref=&quot;T:System.ComponentModel.INestedContainer&quot; /&gt; interface, which enables containers to have an owning component.">Stellt die Basisimplementierung für die <see cref="T:System.ComponentModel.INestedContainer" />-Schnittstelle bereit, die es Containern ermöglicht, über eine besitzende Komponente zu verfügen.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NestedContainer&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.NestedContainer" />-Klasse.</summary>
      <param name="owner" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">Die <see cref="T:System.ComponentModel.IComponent" />, die den geschachtelten Container besitzt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site for the component within the container.">Erstellt eine Site für die Komponente im Container.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">Die <see cref="T:System.ComponentModel.IComponent" />, für die eine Site erstellt werden soll.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">Der Name, der der <paramref name="component" /> zugewiesen werden soll, oder <see langword="null" />, wenn die Namenszuweisung übersprungen werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt;.">Der neu erstellte <see cref="T:System.ComponentModel.ISite" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the resources used by the nested container.">Gibt die vom geschachtelten Container verwendeten Ressourcen frei.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">Ruft das Dienstobjekt des angegebenen Typs ab, sofern es verfügbar ist.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">Der <see cref="T:System.Type" /> des abzurufenden Dienstes.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that implements the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">Ein <see cref="T:System.Object" />, das den angeforderten Dienst implementiert, oder <see langword="null" />, wenn der Dienst nicht ermittelt werden kann.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for this nested container.">Ruft die besitzende Komponente für diesen geschachtelten Container ab.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">Die <see cref="T:System.ComponentModel.IComponent" />, die den geschachtelten Container besitzt.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary vsli:raw="Gets the name of the owning component.">Ruft den Namen der besitzenden Komponente ab.</summary>
      <returns vsli:raw="The name of the owning component.">Der Name der besitzenden Komponente.</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary vsli:raw="Provides automatic conversion between a nullable type and its underlying primitive type.">Stellt die automatische Konvertierung zwischen dem Nullable-Typ und dessen zugrunde liegendem primitiven Typ bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NullableConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.NullableConverter" />-Klasse.</summary>
      <param name="type" vsli:raw="The specified nullable type.">Der angegebene Typ, der NULL-Werte zulässt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a nullable type.">
        <paramref name="type" /> ist kein Typ, der NULL-Werte zulässt.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">Gibt zurück, ob dieser Konverter ein Objekt vom angegebenen Typ unter Verwendung des angegebenen Kontexts in den Typ dieses Konverters konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Ein <see cref="T:System.Type" />, der den Typ darstellt, aus dem konvertiert werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Gibt zurück, ob dieser Konverter das Objekt mithilfe des angegebenen Kontexts in den angegebenen Typ umwandeln kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Ein <see cref="T:System.Type" />, der den Typ darstellt, in den konvertiert werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Konvertiert das angegebene Objekt in den Typ dieses Konverters mit dem angegebenen Kontext und Kulturinformationen.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Die <see cref="T:System.Globalization.CultureInfo" />, die als aktuelle Kultur verwendet werden sollen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Konvertiert das angegebene Wertobjekt in den angegebenen Typ mit dem angegebenen Kontext und Kulturinformationen.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Die <see cref="T:System.Globalization.CultureInfo" />, die als aktuelle Kultur verwendet werden sollen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Der <see cref="T:System.Type" />, in den der Wertparameter konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">Erstellt über den angegebenen Kontext, der aus einer angegebenen Menge von Eigenschaftswerten für das Objekt besteht, eine Instanz des Typs, der dieser <see cref="T:System.ComponentModel.TypeConverter" />-Klasse zugeordnet ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">Ein <see cref="T:System.Collections.IDictionary" /> mit neuen Eigenschaftswerten.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.Object" />, das das angegebene <see cref="T:System.Collections.IDictionary" /> darstellt, oder <see langword="null" />, wenn das Objekt nicht erstellt werden kann. Diese Methode gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">Gibt zurück, ob bei Ändern eines Werts für dieses Objekt ein Aufruf von <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> zum Erstellen eines neuen Werts mit dem angegebenen Kontext erforderlich ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn bei Ändern einer Eigenschaft für dieses Objekt ein Aufruf von <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> zum Erstellen eines neuen Werts erforderlich ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">Gibt unter Verwendung des angegebenen Kontexts und der angegebenen Attribute eine Auflistung der Eigenschaften für den Arraytyp zurück, der durch den Wertparameter angegeben ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Ein <see cref="T:System.Object" />, die den Typ des Arrays angibt, für den Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, das als Filter verwendet wird.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit für diesen Datentyp verfügbar gemachten Eigenschaften oder<see langword="null" />, wenn keine Eigenschaften vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Gibt zurück, ob dieses Objekt Eigenschaften unter Verwendung des angegebenen Kontexts unterstützt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> aufgerufen werden muss, um die Eigenschaften dieses Objekts zu ermitteln, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">Gibt eine Auflistung von Standardwerten für den Datentyp zurück, auf den dieser Typkonverter ausgelegt ist, wenn ein Formatkontext bereitgestellt wird.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatkontext bereitstellt, der zum Extrahieren von weiteren Informationen über die Umgebung verwendet werden kann, aus der dieser Konverter aufgerufen wurde. Dieser Parameter oder Eigenschaften dieses Parameters können gleich <see langword="null" /> sein.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Eine <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, die einen Standardsatz gültiger Werte enthält, oder <see langword="null" />, wenn der Datentyp einen Standardsatz von Werten nicht unterstützt.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;Overload:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">Gibt zurück, ob die Auflistung von Standardwerten, die von der <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" />-Methode unter Verwendung des angegebenen Kontexts zurückgegeben werden, eine exklusive Liste von möglichen Werten darstellt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" />, wenn die von der <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />-Methode zurückgegebene <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> eine vollständige Liste möglicher Werte darstellt, oder <see langword="false" />, wenn andere Werte möglich sind.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">Gibt zurück, ob dieses Objekt einen Standardsatz von Werten unterstützt, die unter Verwendung des angegebenen Kontexts aus einer Liste ausgewählt werden können.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> aufgerufen werden muss, um eine vom Objekt unterstützte Standardmenge von Werten zu ermitteln, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">Gibt zurück, ob das angegebene Wertobjekt für diesen Typ und den angegebenen Kontext gültig ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">Das auf Gültigkeit zu prüfende <see cref="T:System.Object" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der angegebene Wert für dieses Objekt gültig ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary vsli:raw="Gets the nullable type.">Ruft den Typ ab, der NULL-Werte zulässt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the nullable type.">Ein <see cref="T:System.Type" />, der den Typ darstellt, der NULL-Werte zulässt.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary vsli:raw="Gets the underlying type.">Ruft den zugrunde liegenden Typ ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the underlying type.">Ein <see cref="T:System.Type" />, der den zugrunde liegenden Typ darstellt.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary vsli:raw="Gets the underlying type converter.">Ruft den zugrunde liegenden Typkonverter ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that represents the underlying type converter.">Ein <see cref="T:System.ComponentModel.TypeConverter" />, der den zugrunde liegenden Typkonverter darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary vsli:raw="Indicates that an object's text representation is obscured by characters such as asterisks. This class cannot be inherited.">Gibt an, dass die Textdarstellung eines Objekts von Zeichen wie Sternchen verdeckt wird. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Gibt den Standardwert für das <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> an.</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary vsli:raw="Specifies that a text property is not used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">Gibt an, dass eine Texteigenschaft nicht als Kennwort verwendet wird. Dieses <see langword="static" /> (<see langword="Shared" /> in Visual Basic) Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary vsli:raw="Specifies that a text property is used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">Gibt an, dass eine Texteigenschaft als Kennwort verwendet wird. Dieses <see langword="static" /> (<see langword="Shared" /> in Visual Basic) Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class, optionally showing password text.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />-Klasse, wobei optional Kennworttext angezeigt wird.</summary>
      <param name="password" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass die Eigenschaft als Kennworttext angezeigt werden sollte; andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; instances are equal.">Stellt fest, ob zwei <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />-Instanzen gleich sind.</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Das <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />, das mit dem aktuellen <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> gleich der aktuellen <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns an indication whether the value of this instance is the default value.">Gibt die Angabe zurück, ob der Wert dieser Instanz der Standardwert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz das Standardattribut für die Klasse ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary vsli:raw="Gets a value indicating if the property for which the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is defined should be shown as password text.">Ruft einen Wert ab, der angibt, ob die Eigenschaft, für die das <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> definiert wird, als Kennworttext angezeigt werden soll.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft als Kennworttext angezeigt werden soll; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary vsli:raw="Provides an abstraction of a property on a class.">Stellt eine Abstraktion einer Eigenschaft für eine Klasse bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse mit dem Namen und den Attributen im angegebenen <see cref="T:System.ComponentModel.MemberDescriptor" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the property and its attributes.">Eine <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse, die den Namen der Eigenschaft und ihre Attribute enthält.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse mit dem Namen im angegebenen <see cref="T:System.ComponentModel.MemberDescriptor" /> und den Attributen im <see cref="T:System.ComponentModel.MemberDescriptor" /> sowie dem <see cref="T:System.Attribute" />-Array.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; containing the name of the member and its attributes.">Eine <see cref="T:System.ComponentModel.MemberDescriptor" />-Klasse, die den Namen des Members und seiner Attribute enthält.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array containing the attributes you want to associate with the property.">Ein <see cref="T:System.Attribute" />-Array mit den Attributen, die der Eigenschaft zugewiesen werden sollen.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the specified name and attributes.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse mit dem angegebenen Namen und den angegebenen Attributen.</summary>
      <param name="name" vsli:raw="The name of the property.">Den Namen der Eigenschaft.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the property attributes.">Ein Array vom Typ <see cref="T:System.Attribute" />, das die Eigenschaftsattribute enthält.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">Ermöglicht es, andere Objekte zu benachrichtigen, wenn sich diese Eigenschaft ändert.</summary>
      <param name="component" vsli:raw="The component to add the handler for.">Die Komponente, für die der Handler hinzugefügt wird.</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">Der Delegat, der als Listener hinzugefügt wird.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> oder <paramref name="handler" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, returns whether resetting an object changes its value.">Gibt beim Überschreiben in einer abgeleiteten Klasse zurück, ob beim Zurücksetzen eines Objekts dessen Wert geändert wird.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">Die Komponente, die auf die Fähigkeit des Zurücksetzens zu prüfen ist.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes its value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn durch Zurücksetzen der Komponente deren Wert geändert wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary vsli:raw="Creates an instance of the specified type.">Erstellt eine Instanz des angegebenen Typs.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Eine <see cref="T:System.Type" />-Klasse, die den zu erstellenden Typ darstellt.</param>
      <returns vsli:raw="A new instance of the type.">Eine neue Instanz des Typs.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this to another object to see if they are equivalent.">Vergleicht dieses Objekt mit einem anderen auf Äquivalenz.</summary>
      <param name="obj" vsli:raw="The object to compare to this &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Das mit diesem <see cref="T:System.ComponentModel.PropertyDescriptor" /> zu vergleichende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Objekte äquivalent sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="Adds the attributes of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the specified list of attributes in the parent class.">Fügt der angegebenen Liste der Attribute in der übergeordneten Klasse die Attribute der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse hinzu.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">Eine <see cref="T:System.Collections.IList" />-Schnittstelle, in der die Attribute in der übergeordneten Klasse aufgeführt sind. Diese ist zunächst leer.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt;.">Gibt die als Standard festgelegte <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse zurück.</summary>
      <returns vsli:raw="A collection of property descriptor.">Eine Auflistung von Eigenschaftendeskriptoren.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; using a specified array of attributes as a filter.">Gibt eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse unter Verwendung eines angegebenen Arrays von Attributen als Filter zurück.</summary>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, der als Filter verwendet werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse mit den Eigenschaften, die mit den angegebenen Attributen übereinstimmen.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object.">Gibt eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse für ein angegebenes Objekt zurück.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">Eine Komponente, deren Eigenschaften abgerufen werden sollen.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit den Eigenschaften für die angegebene Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object using a specified array of attributes as a filter.">Gibt eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse für ein angegebenes Objekt zurück, wobei ein angegebenes Array von Attributen als Filter verwendet wird.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">Eine Komponente, deren Eigenschaften abgerufen werden sollen.</param>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, der als Filter verwendet werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit den Eigenschaften, die mit den angegebenen Attributen für die angegebene Komponente übereinstimmen.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Gets an editor of the specified type.">Ruft einen Editor des angegebenen Typs ab.</summary>
      <param name="editorBaseType" vsli:raw="The base type of editor, which is used to differentiate between multiple editors that a property supports.">Der Basistyp des Editors, der für die Unterscheidung mehrerer von einer Eigenschaft unterstützten Editoren verwendet wird.</param>
      <returns vsli:raw="An instance of the requested editor type, or &lt;see langword=&quot;null&quot; /&gt; if an editor cannot be found.">Eine Instanz des angeforderten Editor-Typs oder <see langword="null" />, wenn kein Editor gefunden wird.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">Gibt den Hashcode für dieses Objekt zurück.</summary>
      <returns vsli:raw="The hash code for this object.">Der Hashcode für dieses Objekt.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="This method returns the object that should be used during invocation of members.">Diese Methode gibt das Objekt zurück, das beim Aufrufen der Member verwendet werden sollte.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">Die <see cref="T:System.Type" />-Klasse des Aufrufziels.</param>
      <param name="instance" vsli:raw="The potential invocation target.">Das potenzielle Aufrufziel.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; that should be used during invocation of members.">Die <see cref="T:System.Object" />-Klasse, die beim Aufrufen der Member verwendet werden soll.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary vsli:raw="Returns a type using its name.">Gibt einen Typ unter Verwendung seines Namens zurück.</summary>
      <param name="typeName" vsli:raw="The assembly-qualified name of the type to retrieve.">Der durch die Assembly bezeichnete Name des abzurufenden Typs.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that matches the given type name, or &lt;see langword=&quot;null&quot; /&gt; if a match cannot be found.">Eine <see cref="T:System.Type" />-Klasse, die mit dem angegebenen Typnamen übereinstimmt, oder <see langword="null" />, wenn keine Übereinstimmung gefunden wird.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, gets the current value of the property on a component.">Ruft beim Überschreiben in einer abgeleiteten Klasse den aktuellen Wert der Eigenschaft einer Komponente ab.</summary>
      <param name="component" vsli:raw="The component with the property for which to retrieve the value.">Die Komponente mit der Eigenschaft, deren Wert abgerufen werden soll.</param>
      <returns vsli:raw="The value of a property for a given component.">Der Wert einer Eigenschaft für eine angegebenen Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary vsli:raw="Retrieves the current set of &lt;c&gt;ValueChanged&lt;/c&gt; event handlers for a specific component.">Ruft die aktuellen <c>ValueChanged</c>-Ereignishandler für eine bestimmte Komponente ab.</summary>
      <param name="component" vsli:raw="The component for which to retrieve event handlers.">Die Komponente, für die Ereignishandler abgerufen werden sollen.</param>
      <returns vsli:raw="A combined multicast event handler, or &lt;see langword=&quot;null&quot; /&gt; if no event handlers are currently assigned to &lt;paramref name=&quot;component&quot; /&gt;.">Ein kombinierter Multicast-Ereignishandler oder <see langword="null" />, wenn <paramref name="component" /> gegenwärtig keine Ereignishandler zugeordnet sind.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary vsli:raw="Raises the &lt;c&gt;ValueChanged&lt;/c&gt; event that you implemented.">Löst das <c>ValueChanged</c>-Ereignis aus, das Sie implementiert haben.</summary>
      <param name="component" vsli:raw="The object that raises the event.">Das Objekt, das das Ereignis auslöst.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">Ermöglicht es, andere Objekte zu benachrichtigen, wenn sich diese Eigenschaft ändert.</summary>
      <param name="component" vsli:raw="The component to remove the handler for.">Die Komponente, für die der Handler entfernt wird.</param>
      <param name="handler" vsli:raw="The delegate to remove as a listener.">Der Delegat, der als Listener entfernt wird.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> oder <paramref name="handler" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, resets the value for this property of the component to the default value.">Setzt beim Überschreiben in einer abgeleiteten Klasse den Wert dieser Komponenteneigenschaft auf den Standardwert zurück.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be reset to the default value.">Die Komponente mit dem Eigenschaftswert, der auf den Standardwert zurückgesetzt werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary vsli:raw="When overridden in a derived class, sets the value of the component to a different value.">Legt beim Überschreiben in einer abgeleiteten Klasse den Wert der Komponente auf einen anderen Wert fest.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be set.">Die Komponente mit dem Eigenschaftswert, der festgelegt werden soll.</param>
      <param name="value" vsli:raw="The new value.">Der neue Wert.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.">Bestimmt beim Überschreiben in einer abgeleiteten Klasse einen Wert, der angibt, ob der Wert dieser Eigenschaft beibehalten werden muss.</summary>
      <param name="component" vsli:raw="The component with the property to be examined for persistence.">Die Komponente mit der Eigenschaft, die auf Dauerhaftigkeit überprüft werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be persisted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft beibehalten werden soll, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the component this property is bound to.">Ruft beim Überschreiben in einer abgeleiteten Klasse den Typ der Komponente ab, an die diese Eigenschaft gebunden ist.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component this property is bound to. When the &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt; methods are invoked, the object specified might be an instance of this type.">Eine <see cref="T:System.Type" />-Klasse, die den Typ der Komponente darstellt, an die diese Eigenschaft gebunden ist. Wenn die <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" />-Methode oder die <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" />-Methode aufgerufen wird, kann das angegebene Objekt eine Instanz dieses Typs sein.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary vsli:raw="Gets the type converter for this property.">Ruft den Typkonverter für diese Eigenschaft ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is used to convert the &lt;see cref=&quot;T:System.Type&quot; /&gt; of this property.">Eine <see cref="T:System.ComponentModel.TypeConverter" />-Klasse, die zum Konvertieren der <see cref="T:System.Type" />-Klasse dieser Eigenschaft verwendet wird.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary vsli:raw="Gets a value indicating whether this property should be localized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt;.">Ruft einen Wert ab, der angibt, ob diese Eigenschaft gemäß den Angaben in <see cref="T:System.ComponentModel.LocalizableAttribute" /> lokalisiert werden soll.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is marked with the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Member mit der auf <see langword="true" /> festgelegten <see cref="T:System.ComponentModel.LocalizableAttribute" />-Klasse gekennzeichnet ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether this property is read-only.">Ruft beim Überschreiben in einer abgeleiteten Klasse einen Wert ab, der angibt, ob diese Eigenschaft schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the property.">Ruft beim Überschreiben in einer abgeleiteten Klasse den Typ der Eigenschaft ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">Ein <see cref="T:System.Type" />, der den Typ der Eigenschaft darstellt.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary vsli:raw="Gets a value indicating whether this property should be serialized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibilityAttribute&quot; /&gt;.">Ruft einen Wert ab, der angibt, ob diese Eigenschaft gemäß den Angaben in <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> serialisiert werden soll.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration values that specifies whether this property should be serialized.">Einer der <see cref="T:System.ComponentModel.DesignerSerializationVisibility" />-Enumerationswerte, die angeben, ob diese Eigenschaft serialisiert werden soll.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary vsli:raw="Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.">Ruft einen Wert ab, der angibt, ob Wertänderungsbenachrichtigungen für diese Eigenschaft von außerhalb des Eigenschaftendeskriptors stammen dürfen.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if value change notifications may originate from outside the property descriptor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Wertänderungsbenachrichtigungen von außerhalb des Eigenschaftendeskriptors stammen dürfen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Stellt eine Auflistung von <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekten dar.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use instead of creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt eine leere Auflistung an, sodass Sie keine neue Auflistung ohne Elemente erstellen müssen. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">Ein Array vom Typ <see cref="T:System.ComponentModel.PropertyDescriptor" />, das die Eigenschaften für diese Auflistung bereitstellt.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class, which is optionally read-only.">Initialisiert eine neue, ggf. schreibgeschützte Instanz der <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">Ein Array vom Typ <see cref="T:System.ComponentModel.PropertyDescriptor" />, das die Eigenschaften für diese Auflistung bereitstellt.</param>
      <param name="readOnly" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, specifies that the collection cannot be modified.">Wenn <see langword="true" /> angegeben ist, kann die Auflistung nicht geändert werden.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection.">Fügt der Auflistung den angegebenen <see cref="T:System.ComponentModel.PropertyDescriptor" /> hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">Der der Auflistung hinzuzufügende <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
      <returns vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added to the collection.">Der Index von <see cref="T:System.ComponentModel.PropertyDescriptor" />, der der Auflistung hinzugefügt werden soll.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary vsli:raw="Removes all &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects from the collection.">Entfernt alle <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte aus der Auflistung.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Gibt zurück, ob die Auflistung die angegebene <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to find in the collection.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, der in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung die angegebene <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to an array, starting at the specified index number.">Kopiert die vollständige Auflistung in ein Array, wobei an der angegebenen Indexnummer begonnen wird.</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to copy elements of the collection to.">Ein Array von <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekten, in das Elemente der Auflistung kopiert werden sollen.</param>
      <param name="index" vsli:raw="The index of the &lt;paramref name=&quot;array&quot; /&gt; parameter at which copying begins.">Der Index des <paramref name="array" />-Parameters, ab dem kopiert wird.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, using a Boolean to indicate whether to ignore case.">Gibt die <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse mit dem angegebenen Namen zurück. Mithilfe eines booleschen Werts wird angegeben, ob die Groß- und Kleinschreibung unberücksichtigt bleibt.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return from the collection.">Der Name der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse, die aus der Auflistung zurückgegeben werden soll.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the property name; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Groß- und Kleinschreibung des Eigenschaftennamens nicht berücksichtigt werden soll, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">Eine <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse mit dem angegebenen Namen oder <see langword="null" />, wenn die Eigenschaft nicht vorhanden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">Gibt einen Enumerator für diese Klasse zurück.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Ein Enumerator vom Typ <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Gibt den Index des angegebenen <see cref="T:System.ComponentModel.PropertyDescriptor" /> zurück.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return the index of.">Der <see cref="T:System.ComponentModel.PropertyDescriptor" />, dessen Index zurückgegeben werden soll.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Der Index des angegebenen <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection at the specified index number.">Fügt der Auflistung die <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse an der angegebenen Indexnummer hinzu.</summary>
      <param name="index" vsli:raw="The index at which to add the &lt;paramref name=&quot;value&quot; /&gt; parameter to the collection.">Der Index, an dem der <paramref name="value" />-Parameter der Auflistung hinzugefügt wird.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">Der der Auflistung hinzuzufügende <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Sortiert die Member dieser Auflistung unter Verwendung der angegebenen <see cref="T:System.Collections.IComparer" />-Schnittstelle.</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Ein Comparer zum Sortieren der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte in dieser Auflistung.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Sortiert die Member dieser Auflistung. Die angegebene Reihenfolge wird zuerst angewendet, darauf folgt die Standardsortierung für diese Auflistung, die i. d. R. alphabetisch erfolgt.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Ein Array von Zeichenfolgen, das die Sortierreihenfolge der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte in dieser Auflistung beschreibt.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the collection.">Entfernt den angegebenen <see cref="T:System.ComponentModel.PropertyDescriptor" /> aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">Die aus der Auflistung zu entfernende <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index from the collection.">Entfernt <see cref="T:System.ComponentModel.PropertyDescriptor" /> am angegebenen Index aus der Auflistung.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">Der Index der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse, die aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.">Sortiert die Member dieser Auflistung unter Verwendung der Standardsortierung für diese Auflistung, die i. d. R. alphabetisch erfolgt.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Eine neue <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse, die die sortierten <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte enthält.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Sortiert die Member dieser Auflistung unter Verwendung der angegebenen <see cref="T:System.Collections.IComparer" />-Schnittstelle.</summary>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Ein Comparer zum Sortieren der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte in dieser Auflistung.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Eine neue <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse, die die sortierten <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte enthält.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Sortiert die Member dieser Auflistung. Die angegebene Reihenfolge wird zuerst angewendet, darauf folgt die Standardsortierung für diese Auflistung, die i. d. R. alphabetisch erfolgt.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Ein Array von Zeichenfolgen, das die Sortierreihenfolge der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte in dieser Auflistung beschreibt.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Eine neue <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse, die die sortierten <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte enthält.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Sortiert die Member dieser Auflistung. Die angegebene Reihenfolge wird zuerst angewendet, darauf folgt die Sortierung mit der angegebenen <see cref="T:System.Collections.IComparer" />-Schnittstelle.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Ein Array von Zeichenfolgen, das die Sortierreihenfolge der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte in dieser Auflistung beschreibt.</param>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Ein Comparer zum Sortieren der <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte in dieser Auflistung.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Eine neue <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse, die die sortierten <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte enthält.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Fügt der <see cref="T:System.Collections.IDictionary" />-Schnittstelle ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">Das <see cref="T:System.Object" />, das als Schlüssel für das hinzuzufügende Element verwendet werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">Das <see cref="T:System.Object" />, das als Wert für das hinzuzufügende Element verwendet werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Entfernt alle Elemente aus der <see cref="T:System.Collections.IDictionary" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">Ermittelt, ob das <see cref="T:System.Collections.IDictionary" /> ein Element mit dem angegebenen Schlüssel enthält.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Der im <see cref="T:System.Collections.IDictionary" /> zu suchende Schlüssel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.IDictionary" /> ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">Gibt einen Enumerator für diese Klasse zurück.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Ein Enumerator vom Typ <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Entfernt das Element mit dem angegebenen Schlüssel aus dem <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Der Schlüssel des zu entfernenden Elements.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Gibt einen <see cref="T:System.Collections.IEnumerator" /> für das <see cref="T:System.Collections.IDictionary" /> zurück.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Ein <see cref="T:System.Collections.IEnumerator" /> für das <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Fügt der <see cref="T:System.Collections.IList" /> ein Element hinzu.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">Das Element, das der Auflistung hinzugefügt werden soll.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Die Position, an der das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Entfernt alle Elemente aus der Auflistung.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Ermittelt, ob die Auflistung einen bestimmten Wert enthält.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">Das Element, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn sich das Element in der Auflistung befindet, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specified item in the collection.">Bestimmt den Index eines angegebenen Elements in der Auflistung.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">Das Element, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list, otherwise -1.">Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">Fügt ein Element am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</param>
      <param name="value" vsli:raw="The item to insert into the collection.">Das Element, das in die Auflistung eingefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specified value from the collection.">Entfernt das erste Vorkommen des angegebenen Werts aus der Auflistung.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">Das Element, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Entfernt das Element am angegebenen Index.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Der nullbasierte Index des zu entfernenden Elements.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of property descriptors in the collection.">Ruft die Anzahl der Eigenschaftenbezeichner in der Auflistung ab.</summary>
      <returns vsli:raw="The number of property descriptors in the collection.">Die Anzahl der Eigenschaftenbezeichner in der Auflistung.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index number.">Ruft den <see cref="T:System.ComponentModel.PropertyDescriptor" /> an der angegebenen Indexnummer ab oder legt diesen fest.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get or set.">Der nullbasierte Index von <see cref="T:System.ComponentModel.PropertyDescriptor" />, der abgerufen oder festgelegt werden soll.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)&quot; /&gt;.">Der <paramref name="index" />-Parameter ist kein gültiger Index für <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" />.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified index number.">Die <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse mit der angegebenen Indexnummer.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name.">Ruft den <see cref="T:System.ComponentModel.PropertyDescriptor" /> mit dem angegebenen Namen ab oder legt diesen fest.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get from the collection.">Der Name des <see cref="T:System.ComponentModel.PropertyDescriptor" />, das aus der Auflistung abgerufen werden soll.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">Die <see cref="T:System.ComponentModel.PropertyDescriptor" />-Klasse mit dem angegebenen Namen oder <see langword="null" />, wenn die Eigenschaft nicht vorhanden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Ruft die Anzahl der Elemente in der Auflistung ab.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Die Anzahl der in der Auflistung enthaltenen Elemente.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung synchronisiert ist (threadsicher).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf die Auflistung synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ruft ein Objekt ab, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Ein Objekt, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IDictionary" /> eine feste Größe aufweist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Ist <see langword="true" />, wenn die <see cref="T:System.Collections.IDictionary" /> eine feste Größe aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IDictionary" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.IDictionary" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ruft das Element mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">Der Schlüssel des Elements, das abgerufen oder festgelegt werden soll.</param>
      <returns vsli:raw="The element with the specified key.">Das Element mit dem angegebenen Schlüssel.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Ruft eine <see cref="T:System.Collections.ICollection" /> ab, die die Schlüssel des <see cref="T:System.Collections.IDictionary" /> enthält.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Eine <see cref="T:System.Collections.ICollection" />, die die Schlüssel des <see cref="T:System.Collections.IDictionary" /> enthält.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Ruft eine <see cref="T:System.Collections.ICollection" /> ab, die die Werte im <see cref="T:System.Collections.IDictionary" /> enthält.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Eine <see cref="T:System.Collections.ICollection" />, die die Werte im <see cref="T:System.Collections.IDictionary" /> enthält.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Ruft einen Wert ab, der angibt, ob die Auflistung eine feste Größe aufweist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung eine feste Größe hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets an item from the collection at a specified index.">Ruft ein Element am angegebenen Index aus der Auflistung ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to get or set.">Der nullbasierte Index des Elements, das abgerufen oder festgelegt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Die Auflistung ist schreibgeschützt.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">
        <paramref name="value" /> ist keine <see cref="T:System.ComponentModel.PropertyDescriptor" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> ist kleiner als 0.  
  
- oder - 
 <paramref name="index" /> ist größer oder gleich <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
      <returns vsli:raw="The element at the specified index.">Das Element am angegebenen Index.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary vsli:raw="Identifies the property tab or tabs to display for the specified class or classes.">Gibt die Registerkarten für Eigenschaften an, die für die angegebenen Klassen angezeigt werden sollen.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.PropertyTabAttribute" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.PropertyTabAttribute" />-Klasse mit dem angegebenen Klassennamen der Registerkarte.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">Der durch die Assembly bezeichnete Name des zu erstellenden Registerkartentyps. Ein Beispiel für diese Formatkonvention finden Sie unter der <see cref="P:System.Type.AssemblyQualifiedName" />-Eigenschaft.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name and tab scope.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.PropertyTabAttribute" />-Klasse mit dem angegebenen Klassennamen und Gültigkeitsbereich der Registerkarte.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">Der durch die Assembly bezeichnete Name des zu erstellenden Registerkartentyps. Ein Beispiel für diese Formatkonvention finden Sie unter der <see cref="P:System.Type.AssemblyQualifiedName" />-Eigenschaft.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Ein <see cref="T:System.ComponentModel.PropertyTabScope" /> , der den Gültigkeitsbereich dieser Registerkarte angibt. Wenn der Gültigkeitsbereich ist <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> , wird er nur für Komponenten mit dem entsprechenden angezeigt <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . Wenn dieser Gültigkeitsbereich <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ist, wird er für alle Komponenten im Dokument angezeigt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> ist nicht <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> oder <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.PropertyTabAttribute" />-Klasse unter Verwendung des angegebenen Registerkartentyps.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">Der Typ der zu erstellenden Registerkarte.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab and tab scope.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.PropertyTabAttribute" />-Klasse mit dem angegebenen Typ und Gültigkeitsbereich der Registerkarte.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">Der Typ der zu erstellenden Registerkarte.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Ein <see cref="T:System.ComponentModel.PropertyTabScope" /> , der den Gültigkeitsbereich dieser Registerkarte angibt. Wenn der Gültigkeitsbereich ist <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> , wird er nur für Komponenten mit dem entsprechenden angezeigt <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . Wenn dieser Gültigkeitsbereich <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ist, wird er für alle Komponenten im Dokument angezeigt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> ist nicht <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> oder <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified attribute.">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Attribut ist.</summary>
      <param name="other" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Eine <see cref="T:System.ComponentModel.PropertyTabAttribute" />-Klasse, um einen Vergleich mit dieser Instanz durchzuführen, oder <see langword="null" />.</param>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter cannot be found.">Die durch die <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" />-Eigenschaft des <paramref name="other" />-Parameters angegebenen Typen können nicht gefunden werden.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die <see cref="T:System.ComponentModel.PropertyTabAttribute" />-Instanzen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <param name="other" vsli:raw="An object to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Ein Objekt, das mit dieser Instanz verglichen werden soll, oder <see langword="null" />.</param>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter could not be found.">Die durch die <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" />-Eigenschaft des <paramref name="other" />-Parameters angegebenen Typen konnten nicht gefunden werden.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; refers to the same &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="other" /> auf die gleiche <see cref="T:System.ComponentModel.PropertyTabAttribute" />-Instanz verweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary vsli:raw="Gets the hash code for this object.">Ruft den Hashcode für dieses Objekt ab.</summary>
      <returns vsli:raw="The hash code for the object the attribute belongs to.">Der Hashcode für das Objekt, zu dem das Attribut gehört.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">Initialisiert das Attribut unter Verwendung der angegebenen Namen der Registerkartenklassen und des Arrays der Gültigkeitsbereiche für Registerkarten.</summary>
      <param name="tabClassNames" vsli:raw="An array of fully qualified type names of the types to create for tabs on the Properties window.">Ein Array von vollqualifizierten Typennamen der Typen, die für Registerkarten im Eigenschaftenfenster erstellt werden.</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Der Gültigkeitsbereich der einzelnen Registerkarten. Wenn der Gültigkeitsbereich ist <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> , wird er nur für Komponenten mit dem entsprechenden angezeigt <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . Wenn dieser Gültigkeitsbereich <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ist, wird er für alle Komponenten im Dokument angezeigt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Mindestens ein Wert in <paramref name="tabScopes" /> ist nicht <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> oder <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  
  
- oder - 
Die Länge des <paramref name="tabClassNames" />-Arrays und die Länge des <paramref name="tabScopes" />-Arrays stimmen nicht überein.  
  
- oder - 
 <paramref name="tabClassNames" /> oder <paramref name="tabScopes" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">Initialisiert das Attribut unter Verwendung der angegebenen Namen der Registerkartenklassen und des Arrays der Gültigkeitsbereiche für Registerkarten.</summary>
      <param name="tabClasses" vsli:raw="The types of tabs to create.">Die Typen der zu erstellenden Registerkarten.</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Der Gültigkeitsbereich der einzelnen Registerkarten. Wenn der Gültigkeitsbereich ist <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> , wird er nur für Komponenten mit dem entsprechenden angezeigt <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . Wenn dieser Gültigkeitsbereich <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ist, wird er für alle Komponenten im Dokument angezeigt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Mindestens ein Wert in <paramref name="tabScopes" /> ist nicht <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> oder <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  
  
- oder - 
Die Länge des <paramref name="tabClassNames" />-Arrays und die Länge des <paramref name="tabScopes" />-Arrays stimmen nicht überein.  
  
- oder - 
 <paramref name="tabClassNames" /> oder <paramref name="tabScopes" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary vsli:raw="Gets the types of tabs that this attribute uses.">Ruft die Typen von Registerkarten ab, die von diesem Attribut verwendet werden.</summary>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property could not be found.">Die durch die <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" />-Eigenschaft angegebenen Typen konnten nicht gefunden werden.</exception>
      <returns vsli:raw="An array of types indicating the types of tabs that this attribute uses.">Ein Array von Typen, das die von diesem Attribut verwendeten Typen von Registerkarten angibt.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary vsli:raw="Gets the names of the tab classes that this attribute uses.">Ruft die Namen der Registerkartenklassen ab, die dieses Attribut verwendet.</summary>
      <returns vsli:raw="The names of the tab classes that this attribute uses.">Die Namen der Registerkartenklassen, die dieses Attribut verwendet.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary vsli:raw="Gets an array of tab scopes of each tab of this &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;.">Ruft für jede Registerkarte dieser <see cref="T:System.ComponentModel.PropertyTabAttribute" />-Klasse ein Array von Gültigkeitsbereichen ab.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; objects that indicate the scopes of the tabs.">Ein Array von <see cref="T:System.ComponentModel.PropertyTabScope" />-Objekten, die die Gültigkeitsbereiche der Registerkarten angeben.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary vsli:raw="Defines identifiers that indicate the persistence scope of a tab in the Properties window.">Definiert Bezeichner, die den Gültigkeitsbereich einer Registerkarte im Eigenschaftenfenster angeben.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary vsli:raw="This tab is specific to the current component. This tab is added to the Properties window for the current component only and is removed when the component is no longer selected.">Diese Registerkarte ist spezifisch für die aktuelle Komponente. Diese Registerkarte wird nur dem Eigenschaftenfenster für die aktuelle Komponente hinzugefügt und wird entfernt, wenn die Komponente nicht mehr ausgewählt ist.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary vsli:raw="This tab is specific to the current document. This tab is added to the Properties window and is removed when the currently selected document changes.">Diese Registerkarte ist spezifisch für das aktuelle Dokument. Sie wird dem Eigenschaftenfenster hinzugefügt und bei Änderung des aktuell ausgewählten Dokuments entfernt.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary vsli:raw="This tab is added to the Properties window and can only be removed explicitly by a parent component.">Diese Registerkarte wird dem Eigenschaftenfenster hinzugefügt und kann nur explizit von einer übergeordneten Komponente entfernt werden.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary vsli:raw="This tab is added to the Properties window and cannot be removed.">Diese Registerkarte wird dem Eigenschaftenfenster hinzugefügt und kann nicht entfernt werden.</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary vsli:raw="Specifies the name of the property that an implementer of &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; offers to other components. This class cannot be inherited.">Gibt den Namen der Eigenschaft an, die ein Implementierer von <see cref="T:System.ComponentModel.IExtenderProvider" /> für andere Komponenten bereitstellt. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and the type of its receiver.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />-Klasse mit dem Namen der Eigenschaft und dem Typ des Empfängers.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">Der Name der Eigenschaft, die auf ein Objekt vom angegebenen Typ erweitert wird.</param>
      <param name="receiverTypeName" vsli:raw="The name of the data type this property can extend.">Der Name des Datentyps, den diese Eigenschaft erweitern kann.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and its &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />-Klasse mit dem Namen der Eigenschaft und deren <see cref="T:System.Type" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">Der Name der Eigenschaft, die auf ein Objekt vom angegebenen Typ erweitert wird.</param>
      <param name="receiverType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the data type of the object that can receive the property.">Der <see cref="T:System.Type" /> des Datentyps von dem Objekt, das die Eigenschaft erhalten kann.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">Gibt zurück, ob der Wert des angegebenen Objekts gleich dem aktuellen <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> ist.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Das Objekt, dessen Wert auf Gleichheit geprüft werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Wert des angegebenen Objekts dem aktuellen entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary vsli:raw="Gets the name of a property that this class provides.">Ruft den Namen einer Eigenschaft ab, die von dieser Klasse bereitgestellt wird.</summary>
      <returns vsli:raw="The name of a property that this class provides.">Der Name einer Eigenschaft, die von dieser Klasse bereitgestellt wird.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary vsli:raw="Gets the name of the data type this property can extend.">Ruft den Namen des Datentyps ab, den diese Eigenschaft erweitern kann.</summary>
      <returns vsli:raw="The name of the data type this property can extend.">Der Name des Datentyps, den diese Eigenschaft erweitern kann.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">Ruft einen eindeutigen Bezeichner für dieses Attribut ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that is a unique identifier for the attribute.">Ein <see cref="T:System.Object" />, das ein eindeutiger Bezeichner für dieses Attribut ist.</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary vsli:raw="Specifies that the property can be used as an application setting.">Gibt an, dass die Eigenschaft als Anwendungseinstellung verwendet werden kann.</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.RecommendedAsConfigurableAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt den Standardwert für das <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> an, der <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" /> ist. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary vsli:raw="Specifies that a property cannot be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt an, dass eine Eigenschaft nicht als Anwendungseinstellung verwendet werden kann. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary vsli:raw="Specifies that a property can be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt an, dass eine Eigenschaft als Anwendungseinstellung verwendet werden kann. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />-Klasse.</summary>
      <param name="recommendedAsConfigurable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft, an die dieses Attribut gebunden ist, als Anwendungseinstellung verwendet werden kann, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">Gibt an, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
      <param name="obj" vsli:raw="Another object to compare to.">Ein weiteres Objekt für den Vergleich.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> gleich dieser Instanz ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Indicates whether the value of this instance is the default value for the class.">Gibt an, ob der Wert dieser Instanz der Standardwert für die Klasse ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz das Standardattribut für die Klasse ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary vsli:raw="Gets a value indicating whether the property this attribute is bound to can be used as an application setting.">Ruft einen Wert ab, der angibt, ob die Eigenschaft, an die dieses Attribut gebunden ist, als Anwendungseinstellung verwendet werden kann.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft, an die dieses Attribut gebunden ist, als Anwendungseinstellung verwendet werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary vsli:raw="Provides a type converter to convert object references to and from other representations.">Stellt einen Typkonverter bereit, um Objektverweise in andere und aus anderen Darstellungen zu konvertieren.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ReferenceConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ReferenceConverter" />-Klasse.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this reference converter.">Eine <see cref="T:System.Type" />-Klasse, die den diesem Verweiskonverter zuzuordnenden Typ darstellt.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a reference object using the specified context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt vom angegebenen Quelltyp unter Verwendung des angegebenen Kontexts in ein Verweisobjekt konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Eine <see cref="T:System.Type" />-Klasse, die den Ausgangstyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt die Konvertierung ausführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the reference type.">Konvertiert das angegebene Objekt in den Referenztyp.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Eine <see cref="T:System.Globalization.CultureInfo" />-Klasse, die die Kultur angibt, mit der die Schriftart dargestellt wird.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten <paramref name="value" />-Parameter darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the reference type using the specified context and arguments.">Konvertiert das angegebene Wertobjekt mithilfe des angegebenen Kontexts und der angegebenen Argumente in den angegebenen Referenztyp.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Eine <see cref="T:System.Globalization.CultureInfo" />-Klasse, die die Kultur angibt, mit der die Schriftart dargestellt wird.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Der Typ, in den das Objekt konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="The converted object.">Das konvertierte Objekt.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the reference data type.">Ruft eine Auflistung der Standardwerte für den Verweisdatentyp ab.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Eine <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, die einen Standardsatz gültiger Werte enthält, oder <see langword="null" />, wenn der Datentyp einen Standardsatz von Werten nicht unterstützt.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exclusive list.">Ruft einen Wert ab, der angibt, ob die von der <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />-Methode zurückgegebene Auflistung von Standardwerten eine exklusive Liste darstellt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, da die von der <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />-Methode zurückgegebene <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />-Klasse eine vollständige Liste der möglichen Werte darstellt. Diese Methode gibt nie <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">Ruft einen Wert ab, der angibt, ob dieses Objekt einen Standardsatz von Werten unterstützt, die aus einer Liste ausgewählt werden können.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, da <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> aufgerufen werden muss, um eine vom Objekt unterstützte Standardmenge von Werten zu ermitteln. Diese Methode gibt nie <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value indicating whether a particular value can be added to the standard values collection.">Gibt einen Wert zurück, der angibt, ob ein bestimmter Wert der Auflistung von Standardwerten hinzugefügt werden kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides an additional context.">Eine <see cref="T:System.ComponentModel.ITypeDescriptorContext" />-Schnittstelle, die einen zusätzlichen Kontext bereitstellt.</param>
      <param name="value" vsli:raw="The value to check.">Der zu überprüfende Wert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is allowed and can be added to the standard values collection; &lt;see langword=&quot;false&quot; /&gt; if the value cannot be added to the standard values collection.">
        <see langword="true" />, wenn der Wert zulässig ist und der Auflistung der Standardwerte hinzugefügt werden kann, <see langword="false" />, wenn der Wert der Auflistung der Standardwerte nicht hinzugefügt werden kann.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event.">Stellt Daten für das <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the component that has changed.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.RefreshEventArgs" />-Klasse mit der Komponente, die geändert wurde.</summary>
      <param name="componentChanged" vsli:raw="The component that changed.">Die Komponente, die geändert wurde.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the type of component that has changed.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.RefreshEventArgs" />-Klasse mit dem Komponententyp, der geändert wurde.</summary>
      <param name="typeChanged" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">Der <see cref="T:System.Type" />, der geändert wurde.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary vsli:raw="Gets the component that changed its properties, events, or extenders.">Ruft die Komponente ab, deren Eigenschaften, Ereignisse oder Extender sich geändert haben.</summary>
      <returns vsli:raw="The component that changed its properties, events, or extenders, or &lt;see langword=&quot;null&quot; /&gt; if all components of the same type have changed.">Die Komponente, deren Eigenschaften, Ereignisse oder Extender sich geändert haben, oder <see langword="null" />, wenn sich alle Komponenten desselben Typs geändert haben.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">Ruft den <see cref="T:System.Type" /> ab, dessen Eigenschaften oder Ereignisse sich geändert haben.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">Der <see cref="T:System.Type" />, dessen Eigenschaften oder Ereignisse sich geändert haben.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event raised when a &lt;see cref=&quot;T:System.Type&quot; /&gt; or component is changed during design time.">Stellt die Methode für die Behandlung des <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" />-Ereignisses dar, das beim Ändern eines <see cref="T:System.Type" /> oder einer Komponente zur Entwurfszeit ausgelöst wird.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; that contains the component or &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">Ein <see cref="T:System.ComponentModel.RefreshEventArgs" />, das die geänderte Komponente oder den geänderten <see cref="T:System.Type" /> enthält.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary vsli:raw="Specifies whether the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed.">Gibt an, ob bei der Installation der Assembly der Installer für benutzerdefinierte Aktionen von Visual Studio oder Installutil.exe (Installationstool) aufgerufen werden soll.</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary vsli:raw="Specifies the default visibility, which is &lt;see cref=&quot;F:System.ComponentModel.RunInstallerAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt die Standardsichtbarkeit an, die <see cref="F:System.ComponentModel.RunInstallerAttribute.No" /> ist. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should not be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt an, dass bei der Installation der Assembly der Installer für benutzerdefinierte Aktionen von Visual Studio oder Installutil.exe (Installationstool) nicht aufgerufen werden soll. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Gibt an, dass bei der Installation der Assembly der Installer für benutzerdefinierte Aktionen von Visual Studio oder Installutil.exe (Installationstool) aufgerufen werden soll. Dieses <see langword="static" />-Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.RunInstallerAttribute" />-Klasse.</summary>
      <param name="runInstaller" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn bei der Installation einer Assembly ein Installer aufgerufen werden soll, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the value of the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Bestimmt, ob der Wert des angegebenen <see cref="T:System.ComponentModel.RunInstallerAttribute" /> gleich dem aktuellen <see cref="T:System.ComponentModel.RunInstallerAttribute" /> ist.</summary>
      <param name="obj" vsli:raw="The object to compare.">Das zu vergleichende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene <see cref="T:System.ComponentModel.RunInstallerAttribute" /> gleich der aktuellen <see cref="T:System.ComponentModel.RunInstallerAttribute" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary vsli:raw="Generates a hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Generiert einen Hashcode für das aktuelle <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Ein Hashcode für die aktuelle <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">Bestimmt, ob dieses Attribut der Standardwert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Attribut der Standardwert für diese Attributklasse ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary vsli:raw="Gets a value indicating whether an installer should be invoked during installation of an assembly.">Ruft einen Wert ab, der angibt, ob während der Installation einer Assembly ein Installer aufgerufen werden soll.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn bei der Installation einer Assembly ein Installer aufgerufen werden soll, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from a string.">Stellt einen Typkonverter für das Konvertieren von 8-Bit-Objekten, die ganze Zahlen ohne Vorzeichen sind, in eine und aus einer Zeichenfolge bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SByteConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.SByteConverter" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary vsli:raw="Specifies when a component property can be bound to an application setting.">Gibt an, wann eine Komponenteneigenschaft an eine Anwendungseinstellung gebunden werden kann.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not appropriate to bind settings to.">Gibt an, dass eine Eigenschaft nicht zum Binden von Einstellungen geeignet ist.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is appropriate to bind settings to.">Gibt an, dass eine Eigenschaft zum Binden von Eigenschaften geeignet ist.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SettingsBindableAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.SettingsBindableAttribute" />-Klasse.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that a property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass eine Eigenschaft zum Binden von Einstellungen geeignet ist, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Ein <see cref="T:System.Object" /> für den Vergleich mit dieser Instanz oder ein Nullverweis (<see langword="Nothing" /> in Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> dem Typ und dem Wert dieser Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating whether a property is appropriate to bind settings to.">Ruft einen Wert ab, der angibt, ob eine Eigenschaft zum Binden von Einstellungen geeignet ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft zum Binden von Einstellungen geeignet ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary vsli:raw="Provides a type converter to convert single-precision, floating point number objects to and from various other representations.">Stellt einen Typkonverter bereit, um Gleitkommazahlobjekte mit einfacher Genauigkeit in andere und aus anderen Darstellungen zu konvertieren.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SingleConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.SingleConverter" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary vsli:raw="Provides a type converter to convert string objects to and from other representations.">Stellt einen Typkonverter für das Konvertieren von Zeichenfolgenobjekten in andere und aus anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.StringConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.StringConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt vom angegebenen Quelltyp unter Verwendung des angegebenen Kontexts in eine Zeichenfolge konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Eine <see cref="T:System.Type" />-Klasse, die den Ausgangstyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">Konvertiert das angegebene Wertobjekt in ein <see cref="T:System.String" />-Objekt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use.">Der zu verwendende <see cref="T:System.Globalization.CultureInfo" />.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">Die Konvertierung konnte nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary vsli:raw="Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.">Stellt Methoden bereit, mit denen überprüft werden kann, ob der Computername und Pfad einer bestimmten Syntax entsprechen. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary vsli:raw="Checks the syntax of the machine name to confirm that it does not contain &quot;\&quot;.">Überprüft die Syntax des Computernamens, um sicherzustellen, dass er kein „\“ enthält.</summary>
      <param name="value" vsli:raw="A string containing the machine name to check.">Eine Zeichenfolge mit dem zu überprüfenden Computernamen.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper machine name format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="value" /> dem korrekten Format für Computernamen entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see whether it starts with &quot;\\&quot;.">Überprüft die Syntax des Pfades darauf, ob er mit „\\“ beginnt.</summary>
      <param name="value" vsli:raw="A string containing the path to check.">Eine Zeichenfolge mit dem zu überprüfenden Pfad.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="value" /> dem korrekten Format für Pfade entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see if it starts with &quot;\&quot; or drive letter &quot;C:&quot;.">Überprüft die Syntax des Pfades darauf, ob er mit „\“ oder dem Laufwerkbuchstaben „C:“ beginnt.</summary>
      <param name="value" vsli:raw="A string containing the path to check.">Eine Zeichenfolge mit dem zu überprüfenden Pfad.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="value" /> dem korrekten Format für Pfade entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; objects to and from other representations.">Stellt einen Typkonverter zum Konvertieren von <see cref="T:System.TimeSpan" />-Objekten in andere und aus anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TimeSpanConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.TimeSpanConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; using the specified context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt vom angegebenen Quelltyp unter Verwendung des angegebenen Kontexts in eine <see cref="T:System.TimeSpan" />-Struktur konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Eine <see cref="T:System.Type" />-Klasse, die den Ausgangstyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Eine <see cref="T:System.Type" />-Klasse, die den Zieltyp der Konvertierung darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> ist kein gültiger Wert für den Zieltyp.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">Konvertiert das angegebene Objekt in eine <see cref="T:System.TimeSpan" />-Struktur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Eine optionale <see cref="T:System.Globalization.CultureInfo" />-Klasse. Erfolgt hier keine Angabe, wird die aktuelle Kultur angenommen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> ist kein gültiger Wert für den Zieltyp.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">Konvertiert das angegebene Objekt in einen anderen Typ.</summary>
      <param name="context" vsli:raw="A formatter context.">Ein Formatierungskontext.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Die Kultur, in die der <paramref name="value" /> konvertiert wird.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Der Typ, in den das Objekt konvertiert werden soll.</param>
      <returns vsli:raw="The converted object.">Das konvertierte Objekt.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary vsli:raw="Represents an attribute of a toolbox item.">Stellt ein Attribut eines Werkzeugkastenelements dar.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to the default, &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;. This field is read-only.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ToolboxItemAttribute" />-Klasse und legt den Typ auf die Standardeinstellung <see cref="T:System.Drawing.Design.ToolboxItem" /> fest. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to &lt;see langword=&quot;null&quot; /&gt;. This field is read-only.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ToolboxItemAttribute" />-Klasse und legt den Typ auf <see langword="null" /> fest. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and specifies whether to use default initialization values.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ToolboxItemAttribute" />-Klasse und gibt an, ob Standardinitialisierungswerte verwendet werden sollen.</summary>
      <param name="defaultType" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to create a toolbox item attribute for a default type; &lt;see langword=&quot;false&quot; /&gt; to associate no default toolbox item support for this attribute.">
        <see langword="true" />, wenn ein Toolboxelementattribut für einen Standardtyp erstellt werden soll, <see langword="false" />, wenn diesem Attribut keine Unterstützung von Standardtoolboxelementen zugeordnet werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified name of the type.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ToolboxItemAttribute" />-Klasse unter Verwendung des angegebenen Typnamens.</summary>
      <param name="toolboxItemTypeName" vsli:raw="The names of the type of the toolbox item and of the assembly that contains the type.">Der Name des Toolboxelementtyps und der Assembly, die den Typ enthält.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified type of the toolbox item.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ToolboxItemAttribute" />-Klasse unter Verwendung des angegebenen Typs des Toolboxelements.</summary>
      <param name="toolboxItemType" vsli:raw="The type of the toolbox item.">Der Typ des Toolboxelements.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Ein <see cref="T:System.Object" /> für den Vergleich mit dieser Instanz oder ein Nullverweis (<see langword="Nothing" /> in Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> dem Typ und dem Wert dieser Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Ruft einen Wert ab, der angibt, ob der aktuelle Wert des Attributs dessen Standardwert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der aktuelle Wert des Attributs der Standardwert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary vsli:raw="Gets or sets the type of the toolbox item.">Ruft den Typ des Toolboxelements ab oder legt diesen fest.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The type cannot be found.">Der Typ kann nicht gefunden werden.</exception>
      <returns vsli:raw="The type of the toolbox item.">Der Typ des Toolboxelements.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary vsli:raw="Gets or sets the name of the type of the current &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;.">Ruft den Namen des Typs der aktuellen <see cref="T:System.Drawing.Design.ToolboxItem" />-Klasse ab.</summary>
      <returns vsli:raw="The fully qualified type name of the current toolbox item.">Der vollqualifizierte Typname des aktuellen Toolboxelements.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary vsli:raw="Specifies the filter string and filter type to use for a toolbox item.">Gibt die für ein Toolboxelement zu verwendende Filterzeichenfolge und den Filtertyp an.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />-Klasse unter Verwendung der angegebenen Filterzeichenfolge.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">Die Filterzeichenfolge für das Toolboxelement.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string and type.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />-Klasse unter Verwendung der angegebenen Filterzeichenfolge und des Filtertyps.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">Die Filterzeichenfolge für das Toolboxelement.</param>
      <param name="filterType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; indicating the type of the filter.">Ein <see cref="T:System.ComponentModel.ToolboxItemFilterType" />, der den Filtertyp angibt.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Ein <see cref="T:System.Object" /> für den Vergleich mit dieser Instanz oder ein Nullverweis (<see langword="Nothing" /> in Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> dem Typ und dem Wert dieser Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary vsli:raw="Indicates whether the specified object has a matching filter string.">Gibt an, ob das angegebene Objekt über eine entsprechende Filterzeichenfolge verfügt.</summary>
      <param name="obj" vsli:raw="The object to test for a matching filter string.">Das Objekt, das auf eine entsprechende Filterzeichenfolge getestet werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object has a matching filter string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Objekt über eine entsprechende Filterzeichenfolge verfügt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary vsli:raw="Returns a string that represents the current object.">Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns vsli:raw="A string that represents the current object.">Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary vsli:raw="Gets the filter string for the toolbox item.">Ruft die Filterzeichenfolge für das Toolboxelement ab.</summary>
      <returns vsli:raw="The filter string for the toolbox item.">Die Filterzeichenfolge für das Toolboxelement.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary vsli:raw="Gets the type of the filter.">Ruft den Typ des Filters ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; that indicates the type of the filter.">Ein <see cref="T:System.ComponentModel.ToolboxItemFilterType" />, der den Typ des Filters angibt.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary vsli:raw="Gets the type ID for the attribute.">Ruft die Typ-ID für das Attribut ab.</summary>
      <returns vsli:raw="The type ID for this attribute. All &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; objects with the same filter string return the same type ID.">Die Typ-ID für dieses Attribut. Alle <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />-Objekte mit derselben Filterzeichenfolge geben die gleiche Typ-ID zurück.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary vsli:raw="Defines identifiers used to indicate the type of filter that a &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; uses.">Definiert Bezeichner, mit denen der durch ein <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> verwendete Filtertyp angegeben wird.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary vsli:raw="Indicates that a toolbox item filter string is allowed, but not required.">Gibt an, dass eine Filterzeichenfolge für ein Toolboxelement zulässig, aber nicht erforderlich ist.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary vsli:raw="Indicates that custom processing is required to determine whether to use a toolbox item filter string. It is typically specified on a root designer class to indicate that the designer wishes to accept or reject a toolbox item through code. The designer must implement the &lt;see cref=&quot;M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)&quot; /&gt; method of the &lt;see cref=&quot;T:System.Drawing.Design.IToolboxUser&quot; /&gt; interface.">Gibt an, dass eine benutzerdefinierte Verarbeitung erforderlich ist, um zu bestimmen, ob eine Filterzeichenfolge für ein Toolboxelement verwendet werden soll. Es wird in der Regel für eine Stammdesignerklasse angegeben, um anzugeben, dass der Designer ein Toolboxelement mittels Code annehmen oder ablehnen möchte. Der Designer muss die <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" />-Methode der <see cref="T:System.Drawing.Design.IToolboxUser" />-Schnittstelle implementieren.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary vsli:raw="Indicates that a toolbox item filter string is not allowed. If a designer and a component class both have a filter string and the value of one is &lt;c&gt;ToolboxItemFilterType.Prevent&lt;/c&gt;, the toolbox item will not be available.">Gibt an, dass eine Filterzeichenfolge für ein Toolboxelement nicht zulässig ist. Wenn ein Designer und eine Komponentenklasse jeweils über eine Filterzeichenfolge verfügen, und eine davon den Wert <c>ToolboxItemFilterType.Prevent</c> hat, steht das Toolboxelement nicht zur Verfügung.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary vsli:raw="Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.  For a toolbox item with a filter type of &lt;c&gt;Require&lt;/c&gt; to be enabled, the designer and the component class must have a matching filter string. Additionally, neither the designer or component class can have a filter type of &lt;c&gt;Prevent&lt;/c&gt; for the toolbox item to be enabled.">Gibt an, dass eine Filterzeichenfolge für ein Toolboxelement vorhanden sein muss, um ein Toolboxelement zu aktivieren.  Damit ein Toolboxelement mit dem Filtertyp <c>Require</c> aktiviert ist, müssen Designer und Komponentenklasse eine übereinstimmende Filterzeichenfolge besitzen. Darüber hinaus darf weder für den Designer noch die Komponentenklasse ein <c>Prevent</c>-Filtertyp für das Toolboxelement aktiviert sein.</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary vsli:raw="Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.">Stellt eine einheitliche Methode zum Konvertieren von Werttypen in andere Typen sowie zum Zugreifen auf Standardwerte und Untereigenschaften bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.TypeConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">Gibt zurück, ob dieser Konverter ein Objekt vom angegebenen Typ unter Verwendung des angegebenen Kontexts in den Typ dieses Konverters konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Ein <see cref="T:System.Type" />, der den Typ darstellt, aus dem konvertiert werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">Gibt zurück, ob dieser Konverter ein Objekt des angegebenen Typs in den Typ dieses Konverters konvertieren kann.</summary>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Ein <see cref="T:System.Type" />, der den Typ darstellt, aus dem konvertiert werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Gibt zurück, ob dieser Konverter das Objekt mithilfe des angegebenen Kontexts in den angegebenen Typ umwandeln kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Ein <see cref="T:System.Type" />, der den Typ darstellt, in den konvertiert werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">Gibt zurück, ob dieser Konverter das Objekt in den angegebenen Typ konvertieren kann.</summary>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Ein <see cref="T:System.Type" />, der den Typ darstellt, in den konvertiert werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Konvertiert das angegebene Objekt in den Typ dieses Konverters mit dem angegebenen Kontext und Kulturinformationen.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Die <see cref="T:System.Globalization.CultureInfo" />, die als aktuelle Kultur verwendet werden sollen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary vsli:raw="Converts the given value to the type of this converter.">Konvertiert den angegebenen Wert in den Typ dieses Konverters.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture and the specified context.">Konvertiert die angegebene Zeichenfolge unter Verwendung der invarianten Kultur und des angegebenen Kontexts in den Typ dieses Konverters.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.String" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten Text darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture.">Konvertiert die angegebene Zeichenfolge unter Verwendung der invarianten Kultur in einen Typ dieses Konverters.</summary>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.String" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten Text darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context and culture information.">Konvertiert den angegebenen Text unter Verwendung des angegebenen Kontexts und der angegebenen Kulturinformationen in ein Objekt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Ein <see cref="T:System.Globalization.CultureInfo" />. Wenn <see langword="null" /> übergeben wird, wird von der aktuellen Kultur ausgegangen.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.String" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten Text darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context.">Konvertiert den angegebenen Text unter Verwendung des angegebenen Kontexts in ein Objekt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.String" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten Text darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary vsli:raw="Converts the specified text to an object.">Konvertiert den angegebenen Text in ein Objekt.</summary>
      <param name="text" vsli:raw="The text representation of the object to convert.">Die Textdarstellung des zu konvertierenden Objekts.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The string cannot be converted into the appropriate object.">Die Zeichenfolge kann nicht in das entsprechende Objekt konvertiert werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten Text darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Konvertiert das angegebene Wertobjekt in den angegebenen Typ mit dem angegebenen Kontext und Kulturinformationen.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Ein <see cref="T:System.Globalization.CultureInfo" />. Wenn <see langword="null" /> übergeben wird, wird von der aktuellen Kultur ausgegangen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">Der <see cref="T:System.Type" />, in den der <paramref name="value" />-Parameter konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="destinationType" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the arguments.">Konvertiert das angegebene Wertobjekt unter Verwendung der Argumente in den angegebenen Typ.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">Der <see cref="T:System.Type" />, in den der <paramref name="value" />-Parameter konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="destinationType" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation, using the specified context.">Konvertiert den angegebenen Wert unter Verwendung des angegebenen Kontexts in eine Zeichenfolgendarstellung mit invarianter Kultur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">Eine <see cref="T:System.String" />-Klasse, die den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation.">Konvertiert den angegebenen Wert in eine Zeichenfolgendarstellung mit invarianter Kultur.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">Eine <see cref="T:System.String" />-Klasse, die den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the specified context and culture information.">Konvertiert den angegebenen Wert unter Verwendung des angegebenen Kontexts und der angegebenen Kulturinformationen in eine Zeichenfolgendarstellung.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Ein <see cref="T:System.Globalization.CultureInfo" />. Wenn <see langword="null" /> übergeben wird, wird von der aktuellen Kultur ausgegangen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the given context.">Konvertiert den angegebenen Wert unter Verwendung des angegebenen Kontexts in eine Zeichenfolgendarstellung.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary vsli:raw="Converts the specified value to a string representation.">Konvertiert den angegebenen Wert in eine Zeichenfolgendarstellung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary vsli:raw="Re-creates an &lt;see cref=&quot;T:System.Object&quot; /&gt; given a set of property values for the object.">Erstellt eine <see cref="T:System.Object" />-Klasse mit einer angegebenen Menge von Eigenschaftswerten für das Objekt neu.</summary>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that represents a dictionary of new property values.">Eine <see cref="T:System.Collections.IDictionary" />-Schnittstelle, die ein Wörterbuch mit neuen Eigenschaftswerten darstellt.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.Object" />, das das angegebene <see cref="T:System.Collections.IDictionary" /> darstellt, oder <see langword="null" />, wenn das Objekt nicht erstellt werden kann. Diese Methode gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">Erstellt über den angegebenen Kontext, der aus einer angegebenen Menge von Eigenschaftswerten für das Objekt besteht, eine Instanz des Typs, der dieser <see cref="T:System.ComponentModel.TypeConverter" />-Klasse zugeordnet ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">Ein <see cref="T:System.Collections.IDictionary" /> mit neuen Eigenschaftswerten.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.Object" />, das das angegebene <see cref="T:System.Collections.IDictionary" /> darstellt, oder <see langword="null" />, wenn das Objekt nicht erstellt werden kann. Diese Methode gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">Gibt eine Ausnahme zurück, wenn eine Konvertierung nicht erfolgen kann.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">Die zu konvertierende <see cref="T:System.Object" />-Klasse oder <see langword="null" />, wenn das Objekt nicht verfügbar ist.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">Wird automatisch durch diese Methode ausgelöst.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">Eine <see cref="T:System.Exception" />-Klasse, die die Ausnahme darstellt, die ausgelöst wird, wenn eine Konvertierung nicht durchgeführt werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">Gibt eine Ausnahme zurück, wenn eine Konvertierung nicht erfolgen kann.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">Die zu konvertierende <see cref="T:System.Object" />-Klasse oder <see langword="null" />, wenn das Objekt nicht verfügbar ist.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type the conversion was trying to convert to.">Eine <see cref="T:System.Type" />-Klasse, die den Typ darstellt, in den konvertiert werden sollte.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">Wird automatisch durch diese Methode ausgelöst.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">Eine <see cref="T:System.Exception" />-Klasse, die die Ausnahme darstellt, die ausgelöst wird, wenn eine Konvertierung nicht durchgeführt werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to the &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; method to create a new value.">Gibt zurück, ob zum Ändern eines Werts für dieses Objekt ein Aufruf der <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />-Methode erforderlich ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn bei Ändern einer Eigenschaft für dieses Objekt ein Aufruf von <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> zum Erstellen eines neuen Werts erforderlich ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">Gibt zurück, ob bei Ändern eines Werts für dieses Objekt ein Aufruf von <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> zum Erstellen eines neuen Werts mit dem angegebenen Kontext erforderlich ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn bei Ändern einer Eigenschaft für dieses Objekt ein Aufruf von <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> zum Erstellen eines neuen Werts erforderlich ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context.">Gibt unter Verwendung des angegebenen Kontexts eine Auflistung der Eigenschaften für den Typ von Array zurück, der durch den Wertparameter angegeben ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Ein <see cref="T:System.Object" />, die den Typ des Arrays angibt, für den Eigenschaften abgerufen werden sollen.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit für diesen Datentyp verfügbar gemachten Eigenschaften oder<see langword="null" />, wenn keine Eigenschaften vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">Gibt unter Verwendung des angegebenen Kontexts und der angegebenen Attribute eine Auflistung der Eigenschaften für den Arraytyp zurück, der durch den Wertparameter angegeben ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Ein <see cref="T:System.Object" />, die den Typ des Arrays angibt, für den Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, das als Filter verwendet wird.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit für diesen Datentyp verfügbar gemachten Eigenschaften oder<see langword="null" />, wenn keine Eigenschaften vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter.">Gibt eine Auflistung von Eigenschaften für den Typ Array zurück, der durch den Wertparameter angegeben ist.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Ein <see cref="T:System.Object" />, die den Typ des Arrays angibt, für den Eigenschaften abgerufen werden sollen.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit für diesen Datentyp verfügbar gemachten Eigenschaften oder<see langword="null" />, wenn keine Eigenschaften vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary vsli:raw="Returns whether this object supports properties.">Gibt zurück, ob dieses Objekt Eigenschaften unterstützt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> aufgerufen werden muss, um die Eigenschaften dieses Objekts zu ermitteln, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Gibt zurück, ob dieses Objekt Eigenschaften unter Verwendung des angegebenen Kontexts unterstützt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> aufgerufen werden muss, um die Eigenschaften dieses Objekts zu ermitteln, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary vsli:raw="Returns a collection of standard values from the default context for the data type this type converter is designed for.">Gibt eine Auflistung von Standardwerten aus dem Standardkontext für den Datentyp zurück, für den dieser Typkonverter vorgesehen ist.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Eine <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, die eine Standardmenge zulässiger Werte enthält, oder <see langword="null" />, wenn der Datentyp keine Standardmenge von Werten unterstützt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">Gibt eine Auflistung von Standardwerten für den Datentyp zurück, auf den dieser Typkonverter ausgelegt ist, wenn ein Formatkontext bereitgestellt wird.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatkontext bereitstellt, der zum Extrahieren von weiteren Informationen über die Umgebung verwendet werden kann, aus der dieser Konverter aufgerufen wurde. Dieser Parameter oder Eigenschaften dieses Parameters können gleich <see langword="null" /> sein.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Eine <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, die einen Standardsatz gültiger Werte enthält, oder <see langword="null" />, wenn der Datentyp einen Standardsatz von Werten nicht unterstützt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list.">Gibt zurück, ob die von <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> zurückgegebene Auflistung von Standardwerten eine exklusive Liste darstellt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" />, wenn die von der <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />-Methode zurückgegebene <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> eine vollständige Liste möglicher Werte darstellt, oder <see langword="false" />, wenn andere Werte möglich sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">Gibt zurück, ob die Auflistung von Standardwerten, die von der <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />-Methode unter Verwendung des angegebenen Kontexts zurückgegeben werden, eine exklusive Liste von möglichen Werten darstellt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" />, wenn die von der <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />-Methode zurückgegebene <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> eine vollständige Liste möglicher Werte darstellt, oder <see langword="false" />, wenn andere Werte möglich sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list.">Gibt zurück, ob dieses Objekt einen Standardsatz von Werten unterstützt, die aus einer Liste ausgewählt werden können.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> aufgerufen werden muss, um eine vom Objekt unterstützte Standardmenge von Werten zu ermitteln, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">Gibt zurück, ob dieses Objekt einen Standardsatz von Werten unterstützt, die unter Verwendung des angegebenen Kontexts aus einer Liste ausgewählt werden können.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> aufgerufen werden muss, um eine vom Objekt unterstützte Standardmenge von Werten zu ermitteln, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">Gibt zurück, ob das angegebene Wertobjekt für diesen Typ und den angegebenen Kontext gültig ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">Das auf Gültigkeit zu prüfende <see cref="T:System.Object" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der angegebene Wert für dieses Objekt gültig ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type.">Ruft ab, ob das angegebene Werteobjekt für diesen Typ gültig ist.</summary>
      <param name="value" vsli:raw="The object to test for validity.">Das auf Gültigkeit zu prüfende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der angegebene Wert für dieses Objekt gültig ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary vsli:raw="Sorts a collection of properties.">Sortiert eine Auflistung von Eigenschaften.</summary>
      <param name="props" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that has the properties to sort.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse mit den zu sortierenden Eigenschaften.</param>
      <param name="names" vsli:raw="An array of names in the order you want the properties to appear in the collection.">Ein Array von Namen in der Reihenfolge, in der die Eigenschaften in der Auflistung angezeigt werden sollen.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted properties.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />-Klasse mit den sortierten Eigenschaften.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary vsli:raw="Represents an &lt;see langword=&quot;abstract&quot; /&gt; class that provides properties for objects that do not have properties.">Stellt eine <see langword="abstract" />-Klasse dar, die Eigenschaften für Objekte bereitstellt, die über keine Eigenschaften verfügen.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />-Klasse.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">Ein <see cref="T:System.Type" />, der den Komponententyp darstellt, an den dieser Eigenschaftenbezeichner gebunden ist.</param>
      <param name="name" vsli:raw="The name of the property.">Den Namen der Eigenschaft.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">Ein <see cref="T:System.Type" />, der den Datentyp für diese Eigenschaft darstellt.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />-Klasse.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">Ein <see cref="T:System.Type" />, der den Komponententyp darstellt, an den dieser Eigenschaftenbezeichner gebunden ist.</param>
      <param name="name" vsli:raw="The name of the property.">Den Namen der Eigenschaft.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">Ein <see cref="T:System.Type" />, der den Datentyp für diese Eigenschaft darstellt.</param>
      <param name="attributes" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes to associate with the property.">Ein <see cref="T:System.Attribute" />-Array mit den der Eigenschaft zuzuweisenden Attributen.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="Returns whether resetting the component changes the value of the component.">Gibt zurück, ob das Zurücksetzen der Komponente deren Wert ändert.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">Die Komponente, die auf die Fähigkeit des Zurücksetzens zu prüfen ist.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes the value of the component; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn durch Zurücksetzen der Komponente deren Wert geändert wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="Resets the value for this property of the component.">Setzt den Wert für diese Eigenschaft der Komponente zurück.</summary>
      <param name="component" vsli:raw="The component with the property value to be reset.">Die Komponente mit dem Eigenschaftswert, der zurückgesetzt werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Returns whether the value of this property can persist.">Gibt zurück, ob der Wert dieser Eigenschaft beibehalten werden kann.</summary>
      <param name="component" vsli:raw="The component with the property that is to be examined for persistence.">Die Komponente mit der Eigenschaft, die auf Dauerhaftigkeit überprüft werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the property can persist; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Wert der Eigenschaft beibehalten werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary vsli:raw="Gets the type of component to which this property description binds.">Ruft den Komponententyp ab, an den dieser Eigenschaftenbezeichner gebunden ist.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property binds.">Ein <see cref="T:System.Type" />, der den Komponententyp darstellt, an den diese Eigenschaft gebunden ist.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this property is read-only.">Ruft einen Wert ab, der angibt, ob diese Eigenschaft schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; &lt;see langword=&quot;false&quot; /&gt; if the property is read/write.">
        <see langword="true" />, wenn die Eigenschaft schreibgeschützt ist, <see langword="false" />, wenn für die Eigenschaft Lese-/Schreibzugriff festgelegt ist.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary vsli:raw="Gets the type of the property.">Ruft den Typ der Eigenschaft ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">Ein <see cref="T:System.Type" />, der den Typ der Eigenschaft darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary vsli:raw="Represents a collection of values.">Stellt eine Auflistung von Werten dar.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />-Klasse.</summary>
      <param name="values" vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that represents the objects to put into the collection.">Eine <see cref="T:System.Collections.ICollection" />, die die Objekte darstellt, die in die Auflistung aufgenommen werden sollen.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of this collection to an array.">Kopiert den Inhalt dieser Auflistung in ein Array.</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Array&quot; /&gt; that represents the array to copy to.">Ein <see cref="T:System.Array" />, das das Array darstellt, in das kopiert werden soll.</param>
      <param name="index" vsli:raw="The index to start from.">Der Index, ab dem begonnen wird.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this collection.">Gibt einen Enumerator für diese Auflistung zurück.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Ein Enumerator vom Typ <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary vsli:raw="Gets the number of objects in the collection.">Ruft die Anzahl der Objekte in der Auflistung ab.</summary>
      <returns vsli:raw="The number of objects in the collection.">Die Anzahl der -Objekte in der -Auflistung.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the object at the specified index number.">Ruft das Objekt an der angegebenen Indexnummer ab.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.Object&quot; /&gt; to get from the collection.">Der aus der Auflistung abzurufende nullbasierte Index des <see cref="T:System.Object" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; with the specified index.">Das <see cref="T:System.Object" /> mit dem angegebenen Index.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.IsSynchronized&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">
        <see langword="false" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.SyncRoot&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;null&quot; /&gt; in all cases.">
        <see langword="null" /> in allen Fällen.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary vsli:raw="Provides supplemental metadata to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Stellt ergänzende Metadaten für <see cref="T:System.ComponentModel.TypeDescriptor" /> bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.TypeDescriptionProvider" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class using a parent type description provider.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.TypeDescriptionProvider" />-Klasse unter Verwendung eines übergeordneten Typbeschreibungsanbieters.</summary>
      <param name="parent" vsli:raw="The parent type description provider.">Der übergeordnete Typbeschreibungsanbieter.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">Erstellt ein Objekt, das einen anderen Datentyp ersetzen kann.</summary>
      <param name="provider" vsli:raw="An optional service provider.">Ein optionaler Dienstanbieter.</param>
      <param name="objectType" vsli:raw="The type of object to create. This parameter is never &lt;see langword=&quot;null&quot; /&gt;.">Der Typ des zu erstellenden Objekts. Dieser Parameter ist nie <see langword="null" />.</param>
      <param name="argTypes" vsli:raw="An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be &lt;see langword=&quot;null&quot; /&gt; or of zero length.">Ein optionales Array von Typen, die die Parametertypen darstellen, die an den Konstruktor des Objekts übergeben werden sollen. Dieses Array kann <see langword="null" /> sein oder die Länge 0 haben.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor.">Ein optionales Array von Parameterwerten, die an den Konstruktor des Objekts übergeben werden.</param>
      <returns vsli:raw="The substitute &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Das ersetzende <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary vsli:raw="Gets a per-object cache, accessed as an &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of key/value pairs.">Ruft einen objektbezogenen Cache ab, auf den als <see cref="T:System.Collections.IDictionary" /> der Schlüssel-Wert-Paare zugegriffen wird.</summary>
      <param name="instance" vsli:raw="The object for which to get the cache.">Das Objekt, für das der Cache abgerufen werden soll.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; if the provided object supports caching; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.Collections.IDictionary" />, wenn das bereitgestellte Objekt das Zwischenspeichern unterstützt; andernfalls <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets an extended custom type descriptor for the given object.">Ruft einen erweiterten benutzerdefinierten Typdeskriptor für das gegebene Objekt ab.</summary>
      <param name="instance" vsli:raw="The object for which to get the extended type descriptor.">Das Objekt, für das der erweiterte Typdeskriptor abgerufen wird.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide extended metadata for the object.">Ein <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, der erweiterte Metadaten für das Objekt enthalten kann.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary vsli:raw="Gets the extender providers for the specified object.">Ruft die Extenderanbieter für das angegebene Objekt ab.</summary>
      <param name="instance" vsli:raw="The object to get extender providers for.">Das Objekt, für das Extenderanbieter abgerufen werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="An array of extender providers for &lt;paramref name=&quot;instance&quot; /&gt;.">Ein Array von Extenderanbietern für <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">Ruft den Namen der angegebenen Komponente ab, oder <see langword="null" />, wenn der Komponente kein Name zugewiesen ist.</summary>
      <param name="component" vsli:raw="The specified component.">Die angegebene Komponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The name of the specified component.">Der Name der angegebenen Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object.">Führt normale Reflektion eines gegebenen Objekts aus.</summary>
      <param name="instance" vsli:raw="An instance of the type (should not be &lt;see langword=&quot;null&quot; /&gt;).">Eine Instanz des Typs (sollte nicht <see langword="null" /> sein).</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;instance&quot; /&gt;.">Der Typ der Reflexion für dieses <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary vsli:raw="Performs normal reflection against a type.">Führt normale Reflektion eines Typs aus.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">Der Objekttyp, für den <see cref="T:System.Reflection.IReflect" /> abgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">Der Typ der Reflexion für dieses <paramref name="objectType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object with the given type.">Führt normale Reflektion eines gegebenen Objekts mit dem gegebenen Typ aus.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">Der Objekttyp, für den <see cref="T:System.Reflection.IReflect" /> abgerufen wird.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt;.">Eine Instanz des Typs. Kann <see langword="null" /> sein.</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">Der Typ der Reflexion für dieses <paramref name="objectType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary vsli:raw="Converts a reflection type into a runtime type.">Konvertiert einen Reflektionstyp in einen Laufzeittyp.</summary>
      <param name="reflectionType" vsli:raw="The type to convert to its runtime equivalent.">Der Typ, der in seine Laufzeitentsprechung konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reflectionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reflectionType" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the runtime equivalent of &lt;paramref name=&quot;reflectionType&quot; /&gt;.">Ein <see cref="T:System.Type" />, der die Laufzeitentsprechung von <paramref name="reflectionType" /> darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given object.">Ruft einen benutzerdefinierten Typdeskriptor für das gegebene Objekt ab.</summary>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Eine Instanz des Typs. Kann <see langword="null" /> sein, wenn keine Instanz an den <see cref="T:System.ComponentModel.TypeDescriptor" /> übergeben würde.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Ein <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, der Metadaten für den Typ bereitstellen kann.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary vsli:raw="Gets a custom type descriptor for the given type.">Ruft einen benutzerdefinierten Typdeskriptor für den gegebenen Typ ab.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">Der Objekttyp, für den der Typdeskriptor abgerufen wird.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Ein <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, der Metadaten für den Typ bereitstellen kann.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given type and object.">Ruft einen benutzerdefinierten Typdeskriptor für den gegebenen Typ und das gegebene Objekt ab.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">Der Objekttyp, für den der Typdeskriptor abgerufen wird.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Eine Instanz des Typs. Kann <see langword="null" /> sein, wenn keine Instanz an den <see cref="T:System.ComponentModel.TypeDescriptor" /> übergeben würde.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Ein <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, der Metadaten für den Typ bereitstellen kann.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.">Ruft einen Wert ab, der angibt, ob der angegebene Typ mit der Typbeschreibung und der Kette von Typbeschreibungsanbietern kompatibel ist.</summary>
      <param name="type" vsli:raw="The type to test for compatibility.">Der Typ, der auf Kompatibilität überprüft werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;type&quot; /&gt; is compatible with the type description and its chain of type description providers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="type" /> mit der Typbeschreibung und der Kette von Typbeschreibungsanbietern kompatibel ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary vsli:raw="Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.">Stellt Informationen zu den Merkmalen für eine Komponente bereit, z.B. zu Attributen, Eigenschaften und Ereignissen. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary vsli:raw="Occurs when the cache for a component is cleared.">Tritt auf, wenn der Cache für eine Komponente gelöscht wird.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component instance.">Fügt Attribute auf Klassenebene zur Zielkomponenteninstanz hinzu.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Eine Instanz der Zielkomponente.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">Ein Array von <see cref="T:System.Attribute" />-Objekten, die zur Klasse der Komponente hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">Das neu erstellte <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, das zum Hinzufügen der angegebenen Attribute verwendet wurde.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component type.">Fügt Attribute auf Klassenebene zum Zielkomponententyp hinzu.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">Ein Array von <see cref="T:System.Attribute" />-Objekten, die zur Klasse der Komponente hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">Das neu erstellte <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, das zum Hinzufügen der angegebenen Attribute verwendet wurde.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary vsli:raw="Adds an editor table for the given editor base type.">Fügt eine Editor-Tabelle für den angegebenen Editor-Basistyp hinzu.</summary>
      <param name="editorBaseType" vsli:raw="The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.">Der Editor-Basistyp, für den die Editor-Tabelle hinzugefügt wird. Wenn für diesen Typ bereits eine Tabelle vorhanden ist, führt diese Methode keine Aktion aus.</param>
      <param name="table" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Hashtable&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.Collections.Hashtable" />.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">Fügt einen Typbeschreibungsanbieter für eine einzelne Instanz einer Komponente hinzu.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Eine Instanz der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">Fügt einen Typbeschreibungsanbieter für eine Komponentenklasse hinzu.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">Fügt einen Typbeschreibungsanbieter für eine einzelne Instanz einer Komponente hinzu.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Eine Instanz der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">Fügt einen Typbeschreibungsanbieter für eine Komponentenklasse hinzu.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary vsli:raw="Creates a primary-secondary association between two objects.">Erstellt eine Primär-/Sekundär-Zuordnung zwischen zwei Objekten.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Das primäre <see cref="T:System.Object" />.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Das sekundäre <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is equal to &lt;paramref name=&quot;secondary&quot; /&gt;.">
        <paramref name="primary" /> ist gleich <paramref name="secondary" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary vsli:raw="Creates an instance of the designer associated with the specified component and of the specified type of designer.">Erstellt eine Instanz des angegebenen Designers, der der angegebenen Komponente zugeordnet ist, und des angegebenen Typs des Designers.</summary>
      <param name="component" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that specifies the component to associate with the designer.">Eine <see cref="T:System.ComponentModel.IComponent" />, die die Komponente angibt, die dem Designer zugeordnet werden soll.</param>
      <param name="designerBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of designer to create.">Ein <see cref="T:System.Type" />, der den Typ des zu erstellenden Designers darstellt.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; that is an instance of the designer for the component, or &lt;see langword=&quot;null&quot; /&gt; if no designer can be found.">Ein <see cref="T:System.ComponentModel.Design.IDesigner" />, der eine Instanz des Designers für die Komponente oder <see langword="null" /> ist, falls kein Designer gefunden werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Erstellt einen neuen Ereignisdeskriptor, der mit einem vorhandenen Ereignisdeskriptor identisch ist, wenn der vorhandene <see cref="T:System.ComponentModel.EventDescriptor" /> übergeben wird.</summary>
      <param name="componentType" vsli:raw="The type of the component for which to create the new event.">Der Typ der Komponente, für die das neue Ereignis erstellt werden soll.</param>
      <param name="oldEventDescriptor" vsli:raw="The existing event information.">Die vorhandenen Ereignisinformationen.</param>
      <param name="attributes" vsli:raw="The new attributes.">Die neuen Attribute.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that has merged the specified metadata attributes with the existing metadata attributes.">Ein neuer <see cref="T:System.ComponentModel.EventDescriptor" />, der die angegebenen Metadatenattribute und die vorhandenen Metadatenattributen zusammengeführt hat.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.">Erstellt einen neuen Ereignisdeskriptor, der mit einem vorhandenen Ereignisdeskriptor identisch ist, indem die Deskriptorinformationen aus einem angegebenen Ereignis für einen Typ dynamisch erzeugt werden.</summary>
      <param name="componentType" vsli:raw="The type of the component the event lives on.">Der Typ der Komponente, in der das Ereignis vorhanden ist.</param>
      <param name="name" vsli:raw="The name of the event.">Der Name des Ereignisses.</param>
      <param name="type" vsli:raw="The type of the delegate that handles the event.">Der Typ des Delegaten, der das Ereignis behandelt.</param>
      <param name="attributes" vsli:raw="The attributes for this event.">Die Attribute für dieses Ereignis.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that is bound to a type.">Ein <see cref="T:System.ComponentModel.EventDescriptor" />, das an einen Typ gebunden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">Erstellt ein Objekt, das einen anderen Datentyp ersetzen kann.</summary>
      <param name="provider" vsli:raw="The service provider that provides a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; service. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Der Dienstanbieter, der einen <see cref="T:System.ComponentModel.TypeDescriptionProvider" />-Dienst bereitstellt. Dieser Parameter kann <see langword="null" /> sein.</param>
      <param name="objectType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of object to create.">Der <see cref="T:System.Type" /> des zu erstellenden Objekts.</param>
      <param name="argTypes" vsli:raw="An optional array of parameter types to be passed to the object's constructor. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an array of zero length.">Ein optionales Array von Parametertypen, die an den Konstruktor des Objekts übergeben werden sollen. Dieser Parameter kann <see langword="null" /> oder ein Array der Länge 0 (null) sein.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor. If not &lt;see langword=&quot;null&quot; /&gt;, the number of elements must be the same as &lt;paramref name=&quot;argTypes&quot; /&gt;.">Ein optionales Array von Parameterwerten, die an den Konstruktor des Objekts übergeben werden. Wenn der Wert nicht <see langword="null" /> ist, muss die Anzahl der Elemente dem Wert <paramref name="argTypes" /> entsprechen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or &lt;paramref name=&quot;args&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; when &lt;paramref name=&quot;argTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> ist <see langword="null" />, oder <paramref name="args" /> ist <see langword="null" />, wenn <paramref name="argTypes" /> nicht <see langword="null" /> ist.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;argTypes&quot; /&gt; and &lt;paramref name=&quot;args&quot; /&gt; have different number of elements.">
        <paramref name="argTypes" /> und <paramref name="args" /> weisen eine unterschiedliche Anzahl von Elementen auf.</exception>
      <returns vsli:raw="An instance of the substitute data type if an associated &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Eine Instanz des Ersatzdatentyps, wenn ein zugeordneter <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> gefunden wurde, andernfalls <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new property descriptor from an existing property descriptor, using the specified existing &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and attribute array.">Erstellt einen neuen Eigenschaftendeskriptor aus einem vorhandenen Eigenschaftendeskriptor mithilfe des angegebenen vorhandenen <see cref="T:System.ComponentModel.PropertyDescriptor" /> und Attributarrays.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">Der <see cref="T:System.Type" /> der Komponente, der die Eigenschaft angehört.</param>
      <param name="oldPropertyDescriptor" vsli:raw="The existing property descriptor.">Der vorhandene Eigenschaftendeskriptor.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">Die neuen Attribute für diese Eigenschaft.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that has the specified metadata attributes merged with the existing metadata attributes.">Ein neuer <see cref="T:System.ComponentModel.PropertyDescriptor" />, bei dem die angegebenen Metadatenattribute mit den vorhandenen Metadatenattributen zusammengeführt sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.">Erstellt eine Eigenschaftsbeschreibung und bindet diese dynamisch an einen Typ. Dazu werden der angegebene Eigenschaftenname, der Typ und das Attributarray verwendet.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">Der <see cref="T:System.Type" /> der Komponente, der die Eigenschaft angehört.</param>
      <param name="name" vsli:raw="The name of the property.">Den Namen der Eigenschaft.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the property.">Der <see cref="T:System.Type" /> der Eigenschaft.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">Die neuen Attribute für diese Eigenschaft.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is bound to the specified type and that has the specified metadata attributes merged with the existing metadata attributes.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" />, der an den angegebenen Typ gebunden ist und bei dem die angegebenen Metadatenattribute mit den vorhandenen Metadatenattributen zusammengeführt sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary vsli:raw="Returns an instance of the type associated with the specified primary object.">Gibt eine Instanz des Typs zurück, der dem angegebenen primären Objekt zugeordnet ist.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <param name="primary" vsli:raw="The primary object of the association.">Das primäre Objekt der Zuordnung.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
      <returns vsli:raw="An instance of the secondary type that has been associated with the primary object if an association exists; otherwise, &lt;paramref name=&quot;primary&quot; /&gt; if no specified association exists.">Eine Instanz des sekundären Typs, der dem primären Objekt zugeordnet ist, sofern eine Zuordnung vorhanden ist, andernfalls <paramref name="primary" />, wenn keine angegebene Zuordnung vorhanden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary vsli:raw="Returns the collection of attributes for the specified component.">Gibt eine Auflistung von Attributen für die angegebene Komponente zurück.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">Die Komponente, für die Sie Attribute abrufen möchten.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the component. If &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Eine <see cref="T:System.ComponentModel.AttributeCollection" />, die die Attribute für diese Komponente enthält. Wenn <paramref name="component" /><see langword="null" /> ist, gibt diese Methode eine leere Auflistung zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.">Gibt eine Auflistung von Attributen für die angegebene Komponente und einen booleschen Wert zurück, der angibt, dass ein Deskriptor mit benutzerdefiniertem Typ erstellt wurde.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">Die Komponente, für die Sie Attribute abrufen möchten.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a baseline set of attributes from the custom type descriptor if &lt;paramref name=&quot;component&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um einen Basissatz von Attributen des benutzerdefinierten Typdeskriptors zu verwenden, wenn <paramref name="component" /> den Typ <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> besitzt, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Ein <see cref="T:System.ComponentModel.AttributeCollection" /> mit den Attributen für die Komponente. Wenn die Komponente <see langword="null" /> ist, gibt diese Methode eine leere Auflistung zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary vsli:raw="Returns a collection of attributes for the specified type of component.">Gibt eine Auflistung von Attributen für den angegebenen Typ der Komponente zurück.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the type of the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Ein <see cref="T:System.ComponentModel.AttributeCollection" /> mit den Attributen für den Typ der Komponente. Wenn die Komponente <see langword="null" /> ist, gibt diese Methode eine leere Auflistung zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary vsli:raw="Returns the name of the class for the specified component using the default type descriptor.">Gibt den Namen der Klasse für die angegebene Komponente zurück. Dazu wird der Standardtypdeskriptor verwendet.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Das <see cref="T:System.Object" />, für das Sie den Klassennamen abrufen möchten.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">Ein <see cref="T:System.String" />, der den Namen der Klasse für die angegebene Komponente enthält.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the class for the specified component using a custom type descriptor.">Gibt den Namen der Klasse für die angegebene Komponente mithilfe eines benutzerdefinierten Typdeskriptors zurück.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Das <see cref="T:System.Object" />, für das Sie den Klassennamen abrufen möchten.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um benutzerdefinierte Typbeschreibungsinformationen zu berücksichtigen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">Ein <see cref="T:System.String" />, der den Namen der Klasse für die angegebene Komponente enthält.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary vsli:raw="Returns the name of the class for the specified type.">Gibt den Namen der Klasse für den angegebenen Typ zurück.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component type.">Eine <see cref="T:System.String" />, die den Namen der Klasse für den angegebenen Komponententyp enthält.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary vsli:raw="Returns the name of the specified component using the default type descriptor.">Gibt den Namen der angegebenen Komponente zurück. Dazu wird der Standardtypdeskriptor verwendet.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Das <see cref="T:System.Object" />, für das Sie den Klassennamen abrufen möchten.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">Ein <see cref="T:System.String" /> mit dem Namen der angegebenen Komponente, oder <see langword="null" />, wenn kein Komponentenname vorhanden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the specified component using a custom type descriptor.">Gibt den Namen der angegebenen Komponente zurück. Dazu wird ein benutzerdefinierter Typdeskriptor verwendet.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Das <see cref="T:System.Object" />, für das Sie den Klassennamen abrufen möchten.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um benutzerdefinierte Typbeschreibungsinformationen zu berücksichtigen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="The name of the class for the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">Der Name der Klasse für die angegebene Komponente oder <see langword="null" />, wenn kein Komponentenname vorhanden ist.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary vsli:raw="Returns a type converter for the type of the specified component.">Gibt einen Typkonverter für den Typ der angegebenen Komponente zurück.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">Eine Komponente, für die der Konverter abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">Ein <see cref="T:System.ComponentModel.TypeConverter" /> für die angegebene Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a type converter for the type of the specified component with a custom type descriptor.">Gibt einen Typkonverter für den Typ der angegebenen Komponente mit einem benutzerdefinierten Typdeskriptor zurück.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">Eine Komponente, für die der Konverter abgerufen werden soll.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um benutzerdefinierte Typbeschreibungsinformationen zu berücksichtigen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">Ein <see cref="T:System.ComponentModel.TypeConverter" /> für die angegebene Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary vsli:raw="Returns a type converter for the specified type.">Gibt für den angegebenen Typ einen Typkonverter zurück.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Typ.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Returns the default event for the specified component.">Gibt das Standardereignis für die  angegebene Komponente zurück.</summary>
      <param name="component" vsli:raw="The component to get the event for.">Die Komponente, für die das Ereignis abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Ein <see cref="T:System.ComponentModel.EventDescriptor" /> mit dem Standardereignis oder <see langword="null" />, wenn keine Ereignisse vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default event for a component with a custom type descriptor.">Gibt das Standardereignis für eine Komponente mit einem benutzerdefinierten Typdeskriptor zurück.</summary>
      <param name="component" vsli:raw="The component to get the event for.">Die Komponente, für die das Ereignis abgerufen werden soll.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um benutzerdefinierte Typbeschreibungsinformationen zu berücksichtigen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Ein <see cref="T:System.ComponentModel.EventDescriptor" /> mit dem Standardereignis oder <see langword="null" />, wenn keine Ereignisse vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary vsli:raw="Returns the default event for the specified type of component.">Gibt das Standardereignis für den angegebenen Typ der Komponente zurück.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Ein <see cref="T:System.ComponentModel.EventDescriptor" /> mit dem Standardereignis oder <see langword="null" />, wenn keine Ereignisse vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Returns the default property for the specified component.">Gibt die Standardeigenschaft für die angegebene Komponente zurück.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Die Komponente, für die die Standardeigenschaft abgerufen werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" /> mit der Standardeigenschaft oder <see langword="null" />, wenn keine Eigenschaften vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default property for the specified component with a custom type descriptor.">Gibt die Standardeigenschaft für die angegebene Komponente mit einem benutzerdefinierten Typdeskriptor zurück.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Die Komponente, für die die Standardeigenschaft abgerufen werden soll.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um benutzerdefinierte Typbeschreibungsinformationen zu berücksichtigen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" /> mit der Standardeigenschaft oder <see langword="null" />, wenn keine Eigenschaften vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary vsli:raw="Returns the default property for the specified type of component.">Gibt die Standardeigenschaft für den angegebenen Komponententyp zurück.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the class to get the property for.">Ein <see cref="T:System.Type" />, der die Klasse darstellt, für die die Eigenschaft abgerufen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Ein <see cref="T:System.ComponentModel.PropertyDescriptor" /> mit der Standardeigenschaft oder <see langword="null" />, wenn keine Eigenschaften vorhanden sind.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets an editor with the specified base type for the specified component.">Ruft einen Editor mit dem angegebenen Basistyp für die angegebene Komponente ab.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Die Komponente, für die der Editor abgerufen werden soll.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">Ein <see cref="T:System.Type" />, der den Basistyp des Editors darstellt, den Sie suchen möchten.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> oder <paramref name="editorBaseType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Eine Instanz des Editors, die in den angegebenen Editortyp umgewandelt werden kann, oder <see langword="null" />, falls kein Editor des angeforderten Typs gefunden wird.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary vsli:raw="Returns an editor with the specified base type and with a custom type descriptor for the specified component.">Gibt einen Editor mit dem angegebenen Basistyp und mit einem benutzerdefinierten Typdeskriptor für die angegebene Komponente zurück.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Die Komponente, für die der Editor abgerufen werden soll.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">Ein <see cref="T:System.Type" />, der den Basistyp des Editors darstellt, den Sie suchen möchten.</param>
      <param name="noCustomTypeDesc" vsli:raw="A flag indicating whether custom type description information should be considered.">Ein Flag, das angibt, ob benutzerdefinierte Typbeschreibungsinformationen berücksichtigt werden sollten.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> oder <paramref name="editorBaseType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Eine Instanz des Editors, die in den angegebenen Editortyp umgewandelt werden kann, oder <see langword="null" />, falls kein Editor des angeforderten Typs gefunden wird.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary vsli:raw="Returns an editor with the specified base type for the specified type.">Gibt einen Editor mit dem angegebenen Basistyp für den angegebenen Typ zurück.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you are trying to find.">Ein <see cref="T:System.Type" />, der den Basistyp des Editors darstellt, den Sie zu finden versuchen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> oder <paramref name="editorBaseType" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="An instance of the editor object that can be cast to the given base type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Eine Instanz des Editorobjekts, die in den angegebenen Basistyp oder in <see langword="null" /> umgewandelt werden kann, falls kein Editor des angeforderten Typs gefunden werden kann.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary vsli:raw="Returns the collection of events for the specified component.">Gibt eine Auflistung von Ereignissen für die angegebene Komponente zurück.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Eine Komponente, für die die Ereignisse abgerufen werden sollen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Eine <see cref="T:System.ComponentModel.EventDescriptorCollection" /> mit den Ereignissen für diese Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter.">Gibt die Auflistung der Ereignisse für eine angegebene Komponente zurück. Hierbei wird ein angegebenes Array von Attributen als Filter verwendet.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Eine Komponente, für die die Ereignisse abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, das Sie als Filter verwenden können.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Eine <see cref="T:System.ComponentModel.EventDescriptorCollection" /> mit den Ereignissen, die mit den angegebenen Attributen für diese Komponente übereinstimmen.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">Gibt die Auflistung von Ereignissen für eine angegebene Komponente zurück. Hierbei wird ein angegebenes Array von Attributen als Filter und ein benutzerdefinierter Typdeskriptor verwendet.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Eine Komponente, für die die Ereignisse abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, der als Filter verwendet werden soll.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um benutzerdefinierte Typbeschreibungsinformationen zu berücksichtigen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Eine <see cref="T:System.ComponentModel.EventDescriptorCollection" /> mit den Ereignissen, die mit den angegebenen Attributen für diese Komponente übereinstimmen.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component with a custom type descriptor.">Gibt die Auflistung von Eigenschaften für eine angegebene Komponente mit einem benutzerdefinierten Typdeskriptor zurück.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Eine Komponente, für die die Ereignisse abgerufen werden sollen.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um benutzerdefinierte Typbeschreibungsinformationen zu berücksichtigen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Eine <see cref="T:System.ComponentModel.EventDescriptorCollection" /> mit den Ereignissen für diese Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary vsli:raw="Returns the collection of events for a specified type of component.">Gibt die Auflistung von Ereignissen für einen angegebenen Komponententyp zurück.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Eine <see cref="T:System.ComponentModel.EventDescriptorCollection" /> mit den Ereignissen für diese Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified type of component using a specified array of attributes as a filter.">Gibt die Auflistung der Ereignisse für einen angegebenen Komponententyp zurück. Hierbei wird ein angegebenes Array von Attributen als Filter verwendet.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, das Sie als Filter verwenden können.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Eine <see cref="T:System.ComponentModel.EventDescriptorCollection" /> mit den Ereignissen, die mit den angegebenen Attributen für diese Komponente übereinstimmen.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary vsli:raw="Returns the fully qualified name of the component.">Gibt den vollqualifizierten Namen der Komponente zurück.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to find the name for.">Das <see cref="T:System.ComponentModel.Component" />, für das der Name gesucht wird.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The fully qualified name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">Der vollqualifizierte Name der angegebenen Komponente, oder <see langword="null" />, wenn die Komponente keinen Namen besitzt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary vsli:raw="Returns the collection of properties for a specified component.">Gibt die Auflistung von Eigenschaften für eine angegebene Komponente zurück.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Eine Komponente, deren Eigenschaften abgerufen werden sollen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit den Eigenschaften für die angegebene Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter.">Gibt die Auflistung der Eigenschaften für eine angegebene Komponente zurück. Hierbei wird ein angegebenes Array von Attributen als Filter verwendet.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Eine Komponente, deren Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, der als Filter verwendet werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit den Eigenschaften, die mit den angegebenen Attributen für die angegebene Komponente übereinstimmen.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">Gibt die Auflistung der Eigenschaften für eine angegebene Komponente zurück. Hierbei wird ein angegebenes Array von Attributen als Filter sowie ein benutzerdefinierter Typdeskriptor verwendet.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Eine Komponente, deren Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, der als Filter verwendet werden soll.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um benutzerdefinierte Typbeschreibungsinformationen zu berücksichtigen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the events that match the specified attributes for the specified component.">Ein <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit den Ereignissen, die mit den angegebenen Attributen für die angegebene Komponente übereinstimmen.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using the default type descriptor.">Gibt die Auflistung von Eigenschaften für eine angegebene Komponente zurück. Dazu wird der Standardtypdeskriptor verwendet.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Eine Komponente, deren Eigenschaften abgerufen werden sollen.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um benutzerdefinierte Typbeschreibungsinformationen nicht zu berücksichtigen; anderenfalls <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> ist ein prozessübergreifendes Remoteobjekt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified component.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit den Eigenschaften für eine angegebene Komponente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary vsli:raw="Returns the collection of properties for a specified type of component.">Gibt die Auflistung von Eigenschaften für einen angegebenen Komponententyp zurück.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component to get properties for.">Ein <see cref="T:System.Type" />, der die Komponente darstellt, für die Eigenschaften abgerufen werden sollen.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified type of component.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit den Eigenschaften für einen angegebenen Komponententyp.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.">Gibt die Auflistung der Eigenschaften für einen angegebenen Komponententyp zurück. Hierbei wird ein angegebenes Array von Attributen als Filter verwendet.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Ein Array des Typs <see cref="T:System.Attribute" />, der als Filter verwendet werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for this type of component.">Ein <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> mit den Eigenschaften, die mit den angegebenen Attributen für diesen Komponententyp übereinstimmen.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary vsli:raw="Returns the type description provider for the specified component.">Gibt den Typbeschreibungsanbieter für die angegebene Komponente zurück.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Eine Instanz der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified component.">Ein <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, der der angegebenen Komponente zugeordnet ist.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary vsli:raw="Returns the type description provider for the specified type.">Gibt den Typbeschreibungsanbieter für den angegebenen Typ zurück.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified type.">Ein <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, der dem angegebenen Typ zugeordnet ist.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given an object.">Gibt einen <see cref="T:System.Type" /> zurück, der zum Durchführen der Reflektion bei Angabe eines Objekts verwendet werden kann.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Eine Instanz der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; for the specified object.">Ein <see cref="T:System.Type" /> für das angegebene Objekt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given a class type.">Gibt einen <see cref="T:System.Type" /> zurück, der zum Durchführen der Reflektion bei Angabe eines Klassentyps verwendet werden kann.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; of the specified class.">Ein <see cref="T:System.Type" /> der angegebenen Klasse.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary vsli:raw="Clears the properties and events for the specified component from the cache.">Löscht die Eigenschaften und Ereignisse für die angegebene Komponente aus dem Cache.</summary>
      <param name="component" vsli:raw="A component for which the properties or events have changed.">Eine Komponente, für die die Eigenschaften oder Ereignisse geändert wurden.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary vsli:raw="Clears the properties and events for the specified assembly from the cache.">Löscht die Eigenschaften und Ereignisse für die angegebene Assembly aus dem Cache.</summary>
      <param name="assembly" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that represents the assembly to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this assembly will be refreshed.">Das <see cref="T:System.Reflection.Assembly" />, das die zu aktualisierende Assembly darstellt. Jedes <see cref="T:System.Type" /> in dieser Assembly wird aktualisiert.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary vsli:raw="Clears the properties and events for the specified module from the cache.">Löscht die Eigenschaften und Ereignisse für das angegebene Modul aus dem Cache.</summary>
      <param name="module" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the module to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this module will be refreshed.">Das <see cref="T:System.Reflection.Module" />, das das zu aktualisierende Modul darstellt. Jeder <see cref="T:System.Type" /> in diesem Modul wird aktualisiert.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary vsli:raw="Clears the properties and events for the specified type of component from the cache.">Löscht die Eigenschaften und Ereignisse für die angegebene Art von Komponente aus dem Cache.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary vsli:raw="Removes an association between two objects.">Entfernt eine Zuordnung zwischen zwei Objekten.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Das primäre <see cref="T:System.Object" />.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Das sekundäre <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary vsli:raw="Removes all associations for a primary object.">Entfernt alle Zuordnungen für ein primäres Objekt.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt; in an association.">Das primäre <see cref="T:System.Object" /> in einer Zuordnung.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="primary" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">Entfernt einen zuvor hinzugefügten Typbeschreibungsanbieter, der dem angegebenen Objekt zugeordnet ist.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Das zu entfernende <see cref="T:System.ComponentModel.TypeDescriptionProvider" />-Element.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Eine Instanz der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">Entfernt einen zuvor hinzugefügten Typbeschreibungsanbieter, der dem angegebenen Typ zugeordnet ist.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Das zu entfernende <see cref="T:System.ComponentModel.TypeDescriptionProvider" />-Element.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">Entfernt einen zuvor hinzugefügten Typbeschreibungsanbieter, der dem angegebenen Objekt zugeordnet ist.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Das zu entfernende <see cref="T:System.ComponentModel.TypeDescriptionProvider" />-Element.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Eine Instanz der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">Entfernt einen zuvor hinzugefügten Typbeschreibungsanbieter, der dem angegebenen Typ zugeordnet ist.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Das zu entfernende <see cref="T:System.ComponentModel.TypeDescriptionProvider" />-Element.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Der <see cref="T:System.Type" /> der Zielkomponente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Ein oder beide Parameter sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary vsli:raw="Sorts descriptors using the name of the descriptor.">Sortiert Deskriptoren anhand der Namen der Deskriptoren.</summary>
      <param name="infos" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that contains the descriptors to sort.">Ein <see cref="T:System.Collections.IList" />-Objekt, das die zu sortierenden Deskriptoren enthält.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;infos&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="infos" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary vsli:raw="Gets or sets the provider for the Component Object Model (COM) type information for the target component.">Ruft den Anbieter für COM-Typinformationen (Component Object Model) für die Zielkomponente ab oder legt diesen fest.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComNativeDescriptorHandler&quot; /&gt; instance representing the COM type information provider.">Eine <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" />-Instanz, die den Anbieter von COM-Typinformationen darstellt.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary vsli:raw="Gets the type of the Component Object Model (COM) object represented by the target component.">Ruft den Typ des COM-Objekts (Component Object Model) ab, das durch die Zielkomponente dargestellt wird.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the COM object represented by this component, or &lt;see langword=&quot;null&quot; /&gt; for non-COM objects.">Das <see cref="T:System.Type" /> des COM-Objekts, das von dieser Komponente dargestellt wird, oder <see langword="null" /> für Nicht-COM-Objekte.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary vsli:raw="Gets a type that represents a type description provider for all interface types.">Ruft einen Typ ab, der einen Typbeschreibungsanbieter für alle Schnittstellentypen darstellt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a custom type description provider for all interface types.">Ein <see cref="T:System.Type" />, der einen benutzerdefinierten Typbeschreibungsanbieter für alle Schnittstellentypen darstellt.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary vsli:raw="Provides a type converter that can be used to populate a list box with available types.">Stellt einen Typkonverter, der zum Auffüllen eines Listenfelds mit verfügbaren Typen verwendet werden kann.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeListConverter&quot; /&gt; class using the type array as the available types.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.TypeListConverter" />-Klasse, unter Verwendung des Typarrays als verfügbare Typen.</summary>
      <param name="types" vsli:raw="The array of type &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as the available types.">Das Array vom Typ <see cref="T:System.Type" />, das als verfügbare Typen verwendet werden soll.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object using the given context.">Ruft einen Wert ab, der angibt, ob der Konverter die angegebene <see cref="T:System.Type" />-Klasse des Quellobjekts mithilfe des angegebenen Kontexts konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object.">Die <see cref="T:System.Type" />-Klasse des Quellobjekts.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Eine <see cref="T:System.Type" />-Klasse, die den Zieltyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the native type of the converter.">Konvertiert das angegebene Objekt in den systemeigenen Typ des Konverters.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Eine <see cref="T:System.Globalization.CultureInfo" />-Klasse, die die Kultur angibt, mit der die Schriftart dargestellt wird.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Konvertiert das angegebene Wertobjekt in den angegebenen Zieltyp.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Eine optionale <see cref="T:System.Globalization.CultureInfo" />-Klasse. Erfolgt hier keine Angabe, wird die aktuelle Kultur angenommen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Die <see cref="T:System.Type" />-Klasse, in die der Wert konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Eine <see cref="T:System.Object" />-Klasse, die den konvertierten <paramref name="value" />-Parameter darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">Ruft eine Auflistung von Standardwerten für den Datentyp ab, für den diese Bestätigung vorgesehen ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Eine <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, die einen Standardsatz gültiger Werte enthält, oder <see langword="null" />, wenn der Datentyp einen Standardsatz von Werten nicht unterstützt.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">Ruft einen Wert ab, der angibt, ob die von der <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />-Methode zurückgegebene Auflistung von Standardwerten eine exklusive Liste darstellt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, da die von der <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />-Methode zurückgegebene <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />-Klasse eine vollständige Liste der möglichen Werte darstellt. Diese Methode gibt nie <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Ruft einen Wert ab, der angibt, ob dieses Objekt eine Standardmenge von Werten unterstützt, die unter Verwendung des angegebenen Kontexts aus einer Liste ausgewählt werden können.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, weil die <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />-Schnittstelle aufgerufen werden muss, um eine vom Objekt unterstützte Standardmenge von Werten zu ermitteln. Diese Methode gibt nie <see langword="false" /> zurück.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit unsigned integer objects to and from other representations.">Stellt einen Typkonverter für das Konvertieren von 16-Bit-Objekten, die ganze Zahlen ohne Vorzeichen sind, in andere und aus anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt16Converter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.UInt16Converter" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit unsigned integer objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von 32-Bit-Objekten, die ganze Zahlen ohne Vorzeichen sind, in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt32Converter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.UInt32Converter" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit unsigned integer objects to and from other representations.">Stellt einen Typkonverter für das Konvertieren von 64-Bit-Ganzzahlobjekten mit Vorzeichen in und von anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt64Converter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.UInt64Converter" />-Klasse.</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Version&quot; /&gt; objects to and from various other representations.">Stellt einen Typkonverter für das Konvertieren von <see cref="T:System.Version" />-Objekten in verschiedene andere und aus verschiedenen anderen Darstellungen bereit.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.VersionConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.VersionConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt vom angegebenen Quelltyp in eine <see cref="T:System.Version" /> konvertieren kann.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Ein Objekt, das Kontextinformationen bereitstellt.</param>
      <param name="sourceType" vsli:raw="The type of the object to be converted.">Der Typ des zu konvertierenden Objekts.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can convert sourceType to a &lt;see cref=&quot;T:System.Version&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn sourceType vom Konverter in <see cref="T:System.Version" /> konvertiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Ein Objekt, das Kontextinformationen bereitstellt.</param>
      <param name="destinationType" vsli:raw="The target type for the conversion.">Der Zieltyp für die Konvertierung.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can convert an object to the given destination type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Konverter ein Objekt in den angegebenen Zieltyp konvertieren kann; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Konvertiert das angegebene Objekt in eine <see cref="T:System.Version" />.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Ein Objekt, das Kontextinformationen bereitstellt.</param>
      <param name="culture" vsli:raw="The culture to use for the conversion.">Die für die Konvertierung zu verwendende Kultur.</param>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Der Wert, der in einen <see cref="T:System.Version" /> konvertiert werden soll.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Version&quot; /&gt; string.">
        <paramref name="value" /> ist keine gültige <see cref="T:System.Version" />-Zeichenfolge.</exception>
      <returns vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; converted to a &lt;see cref=&quot;T:System.Version&quot; /&gt; value.">
        <paramref name="value" /> wird in einen <see cref="T:System.Version" />-Wert konvertiert.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified value to the specified destination type using the specified context and arguments.">Konvertiert den angegebenen Wert mithilfe des angegebenen Kontexts und der angegebenen Argumente in den angegebenen Zieltyp.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="The culture that supplies formatting information for the conversion.">Die Kultur, die Formatierungsinformationen für die Konvertierung liefert.</param>
      <param name="value" vsli:raw="The value to be converted.">Der zu konvertierende Wert.</param>
      <param name="destinationType" vsli:raw="The type to convert the value parameter to.">Der Typ, in den der value-Parameter konvertiert werden soll.</param>
      <returns vsli:raw="An object that represents the converted value.">Ein Objekt, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the given value object is valid for this type and for the specified context.">Gibt einen Wert zurück, der angibt, ob das angegebene Wertobjekt für diesen Typ und den angegebenen Kontext gültig ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="The object to test for validity.">Das auf Gültigkeit zu prüfende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der angegebene Wert für dieses Objekt gültig ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary vsli:raw="Specifies an exception that is handled as a warning instead of an error.">Gibt eine Ausnahme an, die nicht als Fehler, sondern als Warnung behandelt wird.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.WarningException" />-Klasse.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class using the specified serialization data and context.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.WarningException" />-Klasse mit den angegebenen Serialisierungsdaten und dem angegebenen Kontext.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Die für die Deserialisierung zu verwendende <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Klasse.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Das für die Deserialisierung zu verwendende Ziel.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message and no Help file.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.WarningException" />-Klasse mit der angegebenen Meldung und ohne Hilfedatei.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Die Meldung, die dem Endbenutzer angezeigt wird.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified detailed description and the specified exception.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.WarningException" />-Klasse mit der angegebenen ausführlichen Beschreibung und der angegebenen Ausnahme.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">Eine detaillierte Beschreibung des Fehlers.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">Ein Verweis auf die innere Ausnahme, die dieser Ausnahme zugrunde liegt.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.WarningException" />-Klasse mit der angegebenen Meldung und mit Zugriff auf die angegebene Hilfedatei.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Die Meldung, die dem Endbenutzer angezeigt wird.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">Die Hilfedatei, die den Benutzern bei Anforderung von Hilfe angezeigt wird.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file and topic.">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.WarningException" />-Klasse mit der angegebenen Meldung und mit Zugriff auf die angegebene Hilfedatei und das angegebene Hilfethema.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Die Meldung, die dem Endbenutzer angezeigt wird.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">Die Hilfedatei, die den Benutzern bei Anforderung von Hilfe angezeigt wird.</param>
      <param name="helpTopic" vsli:raw="The Help topic to display if the user requests help.">Das Hilfethema, das den Benutzern bei Anforderung von Hilfe angezeigt wird.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with the parameter name and additional exception information.">Legt die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> mit dem Parameternamen und zusätzlichen Informationen über die Ausnahme fest.</summary>
      <param name="info" vsli:raw="Stores the data that was being used to serialize or deserialize the object that the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.CodeDomSerializer&quot; /&gt; was serializing or deserializing.">Speichert die Daten, die zum Serialisieren oder Deserialisieren eines vom <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> serialisierten oder deserialisierten Objekts verwendet wurden.</param>
      <param name="context" vsli:raw="Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.">Beschreibt Quelle und Ziel des Streams, der die Ausnahme generiert hat, und die Möglichkeit, bei der Serialisierung diesen Kontext und einen zusätzlichen, vom Aufrufer definierten Kontext beizubehalten.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary vsli:raw="Gets the Help topic associated with the warning.">Ruft das der Warnung zugeordnete Hilfethema ab.</summary>
      <returns vsli:raw="The Help topic associated with the warning.">Das der Warnung zugeordnete Hilfethema.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary vsli:raw="Gets the Help file associated with the warning.">Ruft die der Warnung zugeordnete Hilfedatei ab.</summary>
      <returns vsli:raw="The Help file associated with the warning.">Die der Warnung zugeordnete Hilfedatei.</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary vsli:raw="Converts colors from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Konvertiert Farben aus einem Datentyp in einen anderen. Greifen Sie auf diese Klasse über <see cref="T:System.ComponentModel.TypeDescriptor" /> zu.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.ColorConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Drawing.ColorConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Bestimmt, ob dieser Konverter ein Objekt des angegebenen Quelltyps in den systemeigenen Typ des Konverters konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt. Sie können mit diesem Objekt zusätzliche Informationen zu der Umgebung abrufen, aus der der Konverter aufgerufen wird.</param>
      <param name="sourceType" vsli:raw="The type from which you want to convert.">Der Typ, aus dem Sie konvertieren möchten.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt die Konvertierung ausführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">Gibt einen Wert zurück, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">Ein <see cref="T:System.Type" />, der den Zieltyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter den Vorgang durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">Konvertiert das angegebene Objekt in den systemeigenen Typ des Konverters.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">Ein <see cref="T:System.ComponentModel.TypeDescriptor" />, der einen Formatierungskontext bereitstellt. Sie können mit diesem Objekt zusätzliche Informationen zu der Umgebung abrufen, aus der der Konverter aufgerufen wird.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">Eine <see cref="T:System.Globalization.CultureInfo" />, die die Kultur angibt, in der die Farbe dargestellt werden soll.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">Konvertiert das angegebene Objekt in einen anderen Typ.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">Ein Formatierungskontext. Sie können mit diesem Objekt zusätzliche Informationen zu der Umgebung abrufen, aus der der Konverter aufgerufen wird. Überprüfen Sie immer, ob dieser Wert <see langword="null" /> ist. Außerdem geben die Eigenschaften des Kontextobjekts möglicherweise <see langword="null" /> zurück.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">Eine <see cref="T:System.Globalization.CultureInfo" />, die die Kultur angibt, in der die Farbe dargestellt werden soll.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Der Typ, in den das Objekt konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationtype" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Ruft eine Auflistung mit einer Gruppe von Standardwerten für den Datentyp ab, für den dieses Validierungssteuerelement entworfen wurde. Dadurch wird <see langword="null" /> zurückgegeben, wenn der Datentyp keinen Standardsatz von Werten unterstützt.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">Ein Formatierungskontext. Sie können mit diesem Objekt zusätzliche Informationen zu der Umgebung abrufen, aus der der Konverter aufgerufen wird. Überprüfen Sie immer, ob dieser Wert <see langword="null" /> ist. Außerdem geben die Eigenschaften des Kontextobjekts möglicherweise <see langword="null" /> zurück.</param>
      <returns vsli:raw="A collection containing &lt;see langword=&quot;null&quot; /&gt; or a standard set of valid values. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Eine Auflistung, die <see langword="null" /> oder eine Standardgruppe zulässiger Werte enthält. Die Standardimplementierung gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports a standard set of values that can be chosen from a list.">Bestimmt, ob dieses Objekt eine Standardgruppe von Werten unterstützt, die aus einer Liste ausgewählt werden können.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Ein <see cref="T:System.ComponentModel.TypeDescriptor" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.Drawing.ColorConverter.GetStandardValues&quot; /&gt; must be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> aufgerufen werden muss, damit eine vom Objekt unterstützte Standardgruppe von Werten ermittelt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object from one data type to another.">Konvertiert ein <see cref="T:System.Drawing.Point" />-Objekt aus einem Datentyp in einen anderen.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.PointConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Drawing.PointConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Bestimmt, ob dieser Konverter ein Objekt des angegebenen Quelltyps in den systemeigenen Typ des Konverters konvertieren kann.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Ein Formatierungskontext. Dieses Objekt kann zum Abrufen zusätzlicher Informationen über die Umgebung verwendet werden, aus der dieser Konverter aufgerufen wird. Der Wert hierfür kann <see langword="null" /> sein. Eine Überprüfung ist daher ratsam. Außerdem kann für die Eigenschaften des Kontextobjekts ebenfalls <see langword="null" /> zurückgegeben werden.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Der Typ, aus dem Sie konvertieren möchten.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt die Konvertierung ausführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />-Objekt, das einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">Ein <see cref="T:System.Type" />-Objekt, das den Zieltyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object.">Konvertiert das angegebene Objekt in ein <see cref="T:System.Drawing.Point" />-Objekt.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Ein Formatierungskontext. Dieses Objekt kann zum Abrufen zusätzlicher Informationen über die Umgebung verwendet werden, aus der dieser Konverter aufgerufen wird. Der Wert hierfür kann <see langword="null" /> sein. Eine Überprüfung ist daher ratsam. Außerdem kann für die Eigenschaften des Kontextobjekts ebenfalls <see langword="null" /> zurückgegeben werden.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Ein Objekt, das kulturabhängige Informationen enthält, z. B. die Sprache, den Kalender und die kulturellen Konventionen, die einer Kultur zugeordnet sind. Es beruht auf dem Standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Die Konvertierung kann nicht vollständig durchgeführt werden.</exception>
      <returns vsli:raw="The converted object.">Das konvertierte Objekt.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Konvertiert das angegebene Objekt in den angegebenen Typ.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Ein Formatierungskontext. Dieses Objekt kann zum Abrufen zusätzlicher Informationen über die Umgebung verwendet werden, aus der dieser Konverter aufgerufen wird. Der Wert hierfür kann <see langword="null" /> sein. Eine Überprüfung ist daher ratsam. Außerdem kann für die Eigenschaften des Kontextobjekts ebenfalls <see langword="null" /> zurückgegeben werden.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Ein Objekt, das kulturabhängige Informationen enthält, z. B. die Sprache, den Kalender und die kulturellen Konventionen, die einer Kultur zugeordnet sind. Es beruht auf dem Standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Der Typ, in den das Objekt konvertiert werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Die Konvertierung kann nicht vollständig durchgeführt werden.</exception>
      <returns vsli:raw="The converted object.">Das konvertierte Objekt.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object.">Erstellt eine Instanz dieses Typs, wenn eine Gruppe von Eigenschaftswerten für das Objekt vorhanden ist.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Ein Typdeskriptor, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt;.">Ein Wörterbuch mit neuen Eigenschaftswerten. Das Wörterbuch enthält für jede von <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> zurückgegebene Eigenschaft jeweils ein Name-Wert-Paar.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Das neu erstellte Objekt oder <see langword="null" />, wenn das Objekt nicht erstellt werden konnte. Die Standardimplementierung gibt <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">Bestimmt, ob beim Ändern eines Werts für dieses Objekt ein Aufruf von <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> zum Erstellen eines neuen Werts erforderlich ist.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Ein <see cref="T:System.ComponentModel.TypeDescriptor" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />-Methode beim Ändern einer oder mehrerer Eigenschaften dieses Objekts aufgerufen werden soll, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">Ruft die Gruppe der Eigenschaften für diesen Typ ab. Standardmäßig gibt ein Typ keine Eigenschaften zurück.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Ein Typdeskriptor, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Der Wert des Objekts, für das die Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Ein Array von <see cref="T:System.Attribute" />-Objekten, die die Eigenschaften beschreiben.</param>
      <returns vsli:raw="The set of properties that are exposed for this data type. If no properties are exposed, this method might return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Die Gruppe von Eigenschaften, die für diesen Datentyp verfügbar gemacht werden. Wenn keine Eigenschaften verfügbar gemacht werden, gibt diese Methode eventuell <see langword="null" /> zurück. Die Standardimplementierung gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Bestimmt, ob dieses Objekt Eigenschaften unterstützt. Die Standardeinstellung ist <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Ein <see cref="T:System.ComponentModel.TypeDescriptor" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> aufgerufen werden muss, um die Eigenschaften dieses Objekts zu ermitteln, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary vsli:raw="Converts rectangles from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Konvertiert Rechtecke aus einem Datentyp in einen anderen. Greifen Sie auf diese Klasse über <see cref="T:System.ComponentModel.TypeDescriptor" /> zu.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.RectangleConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Drawing.RectangleConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Bestimmt, ob dieser Konverter ein Objekt des angegebenen Quelltyps in den systemeigenen Typ des Konverters konvertieren kann.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Ein Formatierungskontext. Dieses Objekt kann zum Abrufen zusätzlicher Informationen über die Umgebung verwendet werden, aus der dieser Konverter aufgerufen wird. Der Wert hierfür kann <see langword="null" /> sein. Eine Überprüfung ist daher ratsam. Außerdem kann für die Eigenschaften des Kontextobjekts ebenfalls <see langword="null" /> zurückgegeben werden.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Der Typ, aus dem Sie konvertieren möchten.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Diese Methode gibt <see langword="true" /> zurück, wenn dieses Objekt die Konvertierung ausführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context. This can be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object can also return &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />-Objekt, das einen Formatierungskontext bereitstellt. Der Wert hierfür kann <see langword="null" /> sein. Eine Überprüfung ist daher ratsam. Außerdem können die Eigenschaften des Kontextobjekts <see langword="null" /> zurückgeben.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">Ein <see cref="T:System.Type" />-Objekt, das den Zieltyp der Konvertierung darstellt.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Diese Methode gibt <see langword="true" /> zurück, wenn dieser Konverter die Konvertierung ausführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.Drawing.Rectangle&quot; /&gt; object.">Konvertiert das angegebene Objekt in ein <see cref="T:System.Drawing.Rectangle" />-Objekt.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der zum Abrufen zusätzlicher Informationen über die Umgebung, aus der dieser Konverter aufgerufen wird, verwendet werden kann. Der Wert hierfür kann <see langword="null" /> sein. Eine Überprüfung ist daher ratsam. Außerdem kann für die Eigenschaften des Kontextobjekts ebenfalls <see langword="null" /> zurückgegeben werden.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Eine <see cref="T:System.Globalization.CultureInfo" />, die kulturabhängige Informationen enthält, z. B. die Sprache, den Kalender und die kulturellen Konventionen, die einer Kultur zugeordnet sind. Es beruht auf dem Standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Die Konvertierung kann nicht vollständig durchgeführt werden.</exception>
      <returns vsli:raw="The converted object.">Das konvertierte Objekt.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Konvertiert das angegebene Objekt in den angegebenen Typ.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der zum Abrufen zusätzlicher Informationen über die Umgebung, aus der dieser Konverter aufgerufen wird, verwendet werden kann. Der Wert hierfür kann <see langword="null" /> sein. Eine Überprüfung ist daher ratsam. Außerdem kann für die Eigenschaften des Kontextobjekts ebenfalls <see langword="null" /> zurückgegeben werden.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Eine <see cref="T:System.Globalization.CultureInfo" />, die kulturabhängige Informationen enthält, z. B. die Sprache, den Kalender und die kulturellen Konventionen, die einer Kultur zugeordnet sind. Es beruht auf dem Standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Der Typ, in den das Objekt konvertiert werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Die Konvertierung kann nicht vollständig durchgeführt werden.</exception>
      <returns vsli:raw="The converted object.">Das konvertierte Objekt.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.">Erstellt eine Instanz dieses Typs, wenn eine Gruppe von Eigenschaftswerten für das Objekt vorhanden ist. Dies bietet sich für unveränderliche Objekte an, deren Eigenschaften jedoch veränderlich sein sollen.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">Ein Wörterbuch mit neuen Eigenschaftswerten. Das Wörterbuch enthält für jede beim Aufruf der <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />-Methode zurückgegebene Eigenschaft jeweils ein Name-Wert-Paar.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Das neu erstellte Objekt oder <see langword="null" />, wenn das Objekt nicht erstellt werden konnte. Die Standardimplementierung gibt <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">Bestimmt, ob beim Ändern eines Werts für dieses Objekt ein Aufruf von <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> zum Erstellen eines neuen Werts erforderlich ist.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Ein Typdeskriptor, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Diese Methode gibt <see langword="true" /> zurück, wenn <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> beim Ändern einer oder mehrerer Eigenschaften dieses Objekts aufgerufen werden soll, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">Ruft die Gruppe der Eigenschaften für diesen Typ ab. Standardmäßig gibt ein Typ keine Eigenschaften zurück.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Der Wert des Objekts, für das die Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Ein Array von <see cref="T:System.Attribute" />-Objekten, die die Eigenschaften beschreiben.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Die Gruppe von Eigenschaften, die für diesen Datentyp verfügbar gemacht werden sollen. Wenn keine Eigenschaften verfügbar gemacht werden dürfen, wird eventuell <see langword="null" /> zurückgegeben. Die Standardimplementierung gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Bestimmt, ob dieses Objekt Eigenschaften unterstützt. Die Standardeinstellung ist <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Diese Methode gibt <see langword="true" /> zurück, wenn <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> aufgerufen werden soll, um die Eigenschaften dieses Objekts zu ermitteln, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; class is used to convert from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; object.">Mit der <see cref="T:System.Drawing.SizeConverter" />-Klasse können Datentypen in andere Datentypen konvertiert werden. Greifen Sie auf diese Klasse über das <see cref="T:System.ComponentModel.TypeDescriptor" />-Objekt zu.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; object.">Initialisiert ein neues <see cref="T:System.Drawing.SizeConverter" />-Objekt.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether this converter can convert an object in the specified source type to the native type of the converter.">Bestimmt, ob dieser Konverter ein Objekt des angegebenen Quelltyps in den systemeigenen Typ des Konverters konvertieren kann.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der zum Abrufen zusätzlicher Informationen über die Umgebung, aus der dieser Konverter aufgerufen wird, verwendet werden kann. Der Wert hierfür kann <see langword="null" /> sein. Eine Überprüfung ist daher ratsam. Außerdem kann für die Eigenschaften des Kontextobjekts ebenfalls <see langword="null" /> zurückgegeben werden.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Der Typ, aus dem Sie konvertieren möchten.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion.">Diese Methode gibt <see langword="true" /> zurück, wenn dieses Objekt die Konvertierung ausführen kann.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ruft einen Wert ab, der angibt, ob dieser Konverter ein Objekt unter Verwendung des Kontexts in den angegebenen Zieltyp konvertieren kann.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This can be &lt;see langword=&quot;null&quot; /&gt;, so always check. Also, properties on the context object can return &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der zum Abrufen zusätzlicher Informationen über die Umgebung, aus der dieser Konverter aufgerufen wird, verwendet werden kann. Dieser Parameter kann <see langword="null" /> sein und muss daher immer überprüft werden. Außerdem können die Eigenschaften des Kontextobjekts <see langword="null" /> zurückgeben.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Ein <see cref="T:System.Type" />, der den Typ darstellt, in den konvertiert werden soll.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Diese Methode gibt <see langword="true" /> zurück, wenn dieser Konverter die Konvertierung ausführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the converter's native type.">Konvertiert das angegebene Objekt in den systemeigenen Typ des Konverters.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der zum Abrufen zusätzlicher Informationen über die Umgebung, aus der dieser Konverter aufgerufen wird, verwendet werden kann. Der Wert hierfür kann <see langword="null" /> sein. Eine Überprüfung ist daher ratsam. Außerdem kann für die Eigenschaften des Kontextobjekts ebenfalls <see langword="null" /> zurückgegeben werden.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das kulturabhängige Informationen enthält, z. B. die Sprache, den Kalender und die kulturellen Konventionen, die einer Kultur zugeordnet sind. Es beruht auf dem Standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Die Konvertierung kann nicht vollständig durchgeführt werden.</exception>
      <returns vsli:raw="The converted object.">Das konvertierte Objekt.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Konvertiert das angegebene Objekt in den angegebenen Typ.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der zum Abrufen zusätzlicher Informationen über die Umgebung, aus der dieser Konverter aufgerufen wird, verwendet werden kann. Der Wert hierfür kann <see langword="null" /> sein. Eine Überprüfung ist daher ratsam. Außerdem kann für die Eigenschaften des Kontextobjekts ebenfalls <see langword="null" /> zurückgegeben werden.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das kulturabhängige Informationen enthält, z. B. die Sprache, den Kalender und die kulturellen Konventionen, die einer Kultur zugeordnet sind. Es beruht auf dem Standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Der Typ, in den das Objekt konvertiert werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Die Konvertierung kann nicht vollständig durchgeführt werden.</exception>
      <returns vsli:raw="The converted object.">Das konvertierte Objekt.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an object of this type by using a specified set of property values for the object. This is useful for creating non-changeable objects that have changeable properties.">Erstellt ein Objekt dieses Typs mithilfe eines angegebenen Satzes von Eigenschaftswerten für das Objekt. Dies bietet sich für das Erstellen unveränderlicher Objekte an, die über veränderliche Eigenschaften verfügen.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Ein <see cref="T:System.ComponentModel.TypeDescriptor" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">Ein Wörterbuch mit neuen Eigenschaftswerten. Das Wörterbuch enthält für jede von der <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />-Methode zurückgegebene Eigenschaft ein Name-Wert-Paar.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Das neu erstellte Objekt oder <see langword="null" />, wenn das Objekt nicht erstellt werden konnte. Die Standardimplementierung gibt <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether changing a value on this object should require a call to the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method to create a new value.">Bestimmt, ob für das Ändern eines Werts dieses Objekts ein Aufruf der <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />-Methode zum Erstellen eines neuen Werts erforderlich sein soll.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Ein <see cref="T:System.ComponentModel.TypeDescriptor" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; object should be called when a change is made to one or more properties of this object.">
        <see langword="true" />, wenn das <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />-Objekt beim Ändern einer oder mehrerer Eigenschaften dieses Objekts aufgerufen werden soll.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not have any properties to return.">Ruft die Gruppe der Eigenschaften für diesen Typ ab. In der Standardeinstellung gibt ein Typ keine Eigenschaften zurück.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Ein <see cref="T:System.ComponentModel.TypeDescriptor" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Der Wert des Objekts, für das die Eigenschaften abgerufen werden sollen.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Ein Array von <see cref="T:System.Attribute" />-Objekten, die die Eigenschaften beschreiben.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Die Gruppe von Eigenschaften, die für diesen Datentyp verfügbar gemacht werden sollen. Wenn keine Eigenschaften verfügbar gemacht werden dürfen, wird eventuell <see langword="null" /> zurückgegeben. Die Standardimplementierung gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Bestimmt, ob dieses Objekt Eigenschaften unterstützt. Die Standardeinstellung ist <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Ein <see cref="T:System.ComponentModel.TypeDescriptor" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method should be called to find the properties of this object.">
        <see langword="true" />, wenn die <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />-Methode aufgerufen werden muss, um die Eigenschaften dieses Objekts zu ermitteln.</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary vsli:raw="Converts &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; objects from one type to another.">Konvertiert <see cref="T:System.Drawing.SizeF" />-Objekte aus einem Typ in einen anderen.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Drawing.SizeFConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the converter can convert from the type specified to the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type, using the specified context.">Gibt einen Wert zurück, der angibt, ob der Konverter mithilfe des angegebenen Kontexts aus dem angegebenen Typ in den <see cref="T:System.Drawing.SizeF" />-Typ konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; the represents the type you wish to convert from.">Ein <see cref="T:System.Type" />, der den Ausgangstyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the conversion can be performed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass die Konvertierung ausgeführt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; can convert a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; to the specified type.">Gibt einen Wert zurück, der angibt, ob der <see cref="T:System.Drawing.SizeFConverter" /> eine<see cref="T:System.Drawing.SizeF" /> in den angegebenen Typ konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Ein <see cref="T:System.Type" />, der den Typ darstellt, aus dem konvertiert werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung ausführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Konvertiert das angegebene Objekt in den Typ dieses Konverters mit dem angegebenen Kontext und Kulturinformationen.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Die <see cref="T:System.Globalization.CultureInfo" />, die als aktuelle Kultur verwendet werden sollen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Konvertiert das angegebene Wertobjekt in den angegebenen Typ mit dem angegebenen Kontext und Kulturinformationen.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If null is passed, the current culture is assumed.">Ein <see cref="T:System.Globalization.CultureInfo" />. Wenn „Null“ übergeben wird, wird von der aktuellen Kultur ausgegangen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Der <see cref="T:System.Type" />, in den der Wertparameter konvertiert werden soll.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; with the specified property values using the specified context.">Erstellt eine Instanz von <see cref="T:System.Drawing.SizeF" /> mit den angegebenen Eigenschaftswerten unter Verwendung des angegebenen Kontexts.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing property names and values.">Ein <see cref="T:System.Collections.IDictionary" /> mit Eigenschaftennamen und -werten.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the new &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created.">Ein <see cref="T:System.Object" />, das die neue <see cref="T:System.Drawing.SizeF" /> darstellt, oder <see langword="null" />, wenn das Objekt nicht erstellt werden kann.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a value indicating whether changing a value on this object requires a call to the &lt;see cref=&quot;Overload:System.Drawing.SizeFConverter.CreateInstance&quot; /&gt; method to create a new value.">Gibt einen Wert zurück, der angibt, ob beim Ändern eines Werts für dieses Objekt ein Aufruf der <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" />-Methode zum Erstellen eines neuen Werts erforderlich ist.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. This may be &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt. Dieser Wert kann <see langword="null" /> sein.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">Gibt immer <see langword="true" /> zurück.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves a set of properties for the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type using the specified context and attributes.">Ruft Eigenschaften für den <see cref="T:System.Drawing.SizeF" />-Typ mit dem angegebenen Kontext und den angegebenen Attributen ab.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to return properties for.">Das <see cref="T:System.Object" />, für das Eigenschaften zurückgegeben werden sollen.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Ein Array von <see cref="T:System.Attribute" />-Objekten, die die Eigenschaften beschreiben.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties.">Eine <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, die die Eigenschaften enthält.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type supports properties.">Gibt zurück, ob der <see cref="T:System.Drawing.SizeF" />-Typ Eigenschaften unterstützt.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, mit dem zusätzlicher Kontext bereitgestellt werden kann.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">Gibt immer <see langword="true" /> zurück.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class represents the type converter for extended protection policy used by the server to validate incoming client connections.">Die <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" />-Klasse stellt den Typkonverter für erweiterte Schutzrichtlinien dar, die vom Server zum Überprüfen eingehender Clientverbindungen verwendet werden.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">Gibt zurück, ob dieser Konverter das Objekt in den angegebenen Typ konvertieren kann.</summary>
      <param name="context" vsli:raw="The object to convert.">Das zu konvertierende Objekt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Ein <see cref="T:System.Type" />, der den Typ darstellt, in den konvertiert werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Konverter die Konvertierung durchführen kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Convert the object to the specified type.">Konvertiert das Objekt in den angegebenen Typ.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt. Wenn <see langword="null" /> übergeben wird, wird von der aktuellen Kultur ausgegangen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This should be a &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot; /&gt; object.">Die zu konvertierende <see cref="T:System.Object" />. Dies sollte ein <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> -Objekt sein.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Der <see cref="T:System.Type" />, in den der Wertparameter konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="destinationType" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">Die Konvertierung konnte nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt; parameter.">Ein <see cref="T:System.Object" />, das den konvertierten <paramref name="value" />-Parameter darstellt.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Stellt Daten für das <see cref="E:System.Timers.Timer.Elapsed" />-Ereignis bereit.</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary vsli:raw="Gets the date/time when the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">Ruft das Datum/die Uhrzeit ab, zu der das <see cref="E:System.Timers.Timer.Elapsed" />-Ereignis ausgelöst wurde.</summary>
      <returns vsli:raw="The time the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">Die Zeit, zu der das <see cref="E:System.Timers.Timer.Elapsed" />-Ereignis ausgelöst wurde.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Stellt die Methode zur Behandlung des <see cref="E:System.Timers.Timer.Elapsed" />-Ereignisses eines <see cref="T:System.Timers.Timer" />-Objekts dar.</summary>
      <param name="sender" vsli:raw="The source of the event.">Die Quelle des Ereignisses.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.Timers.ElapsedEventArgs&quot; /&gt; object that contains the event data.">Ein <see cref="T:System.Timers.ElapsedEventArgs" />-Objekt, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary vsli:raw="Generates an event after a set interval, with an option to generate recurring events.">Generiert nach Ablauf eines festgelegten Intervalls ein Ereignis. Bietet auch die Option zum Generieren wiederkehrender Ereignisse.</summary>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary vsli:raw="Occurs when the interval elapses.">Tritt ein, wenn das Intervall abläuft.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets all the properties to their initial values.">Initialisiert eine neue Instanz der <see cref="T:System.Timers.Timer" />-Klasse und legt alle Eigenschaften auf die Anfangswerte fest.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets the &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property to the specified number of milliseconds.">Initialisiert eine neue Instanz der <see cref="T:System.Timers.Timer" />-Klasse, wobei die <see cref="P:System.Timers.Timer.Interval" />-Eigenschaft auf den angegebenen Wert (in Millisekunden) festgelegt ist.</summary>
      <param name="interval" vsli:raw="The time, in milliseconds, between events. The value must be greater than zero and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Die Zeit zwischen den Ereignissen in Millisekunden. Der Wert muss größer als 0 (null) und kleiner als oder gleich <see cref="F:System.Int32.MaxValue" /> sein.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The value of the &lt;paramref name=&quot;interval&quot; /&gt; parameter is less than or equal to zero, or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Der Wert des <paramref name="interval" />-Parameters muss größer oder gleich 0 (null) oder größer als <see cref="F:System.Int32.MaxValue" /> sein.</exception>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary vsli:raw="Begins the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">Beginnt die Laufzeitinitialisierung eines <see cref="T:System.Timers.Timer" />, der in einem Formular oder von einer anderen Komponente verwendet wird.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary vsli:raw="Releases the resources used by the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Gibt die von der <see cref="T:System.Timers.Timer" /> verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Gibt alle von der aktuellen <see cref="T:System.Timers.Timer" />-Klasse verwendeten Ressourcen frei.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary vsli:raw="Ends the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">Beendet die Laufzeitinitialisierung eines <see cref="T:System.Timers.Timer" />, der in einem Formular oder von einer anderen Komponente verwendet wird.</summary>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary vsli:raw="Starts raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;.">Beginnt mit dem Auslösen des <see cref="E:System.Timers.Timer.Elapsed" />-Ereignisses durch Festlegen von <see cref="P:System.Timers.Timer.Enabled" /> auf <see langword="true" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; is created with an interval equal to or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; + 1, or set to an interval less than zero.">Der <see cref="T:System.Timers.Timer" /> wird mit einem Intervall erstellt, das größer gleich <see cref="F:System.Int32.MaxValue" /> + 1 ist, oder auf ein Intervall kleiner als 0 (null) festgelegt.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary vsli:raw="Stops raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">Unterbricht das Auslösen des <see cref="E:System.Timers.Timer.Elapsed" />-Ereignisses durch Festlegen von <see cref="P:System.Timers.Timer.Enabled" /> auf <see langword="false" />.</summary>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary vsli:raw="Gets or sets a Boolean indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once (&lt;see langword=&quot;false&quot; /&gt;) or repeatedly (&lt;see langword=&quot;true&quot; /&gt;).">Ruft einen booleschen Wert ab, der angibt, ob der <see cref="T:System.Timers.Timer" /> das <see cref="E:System.Timers.Timer.Elapsed" />-Ereignis nur einmal (<see langword="false" />) oder wiederholt (<see langword="true" />) auslösen soll, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event each time the interval elapses; &lt;see langword=&quot;false&quot; /&gt; if it should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once, after the first time the interval elapses. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn der <see cref="T:System.Timers.Timer" /> das <see cref="E:System.Timers.Timer.Elapsed" />-Ereignis immer auslösen soll, wenn das Intervall abläuft, <see langword="false" />, wenn das <see cref="E:System.Timers.Timer.Elapsed" />-Ereignis nur einmal nach dem ersten Ablaufen des Intervalls ausgelöst werden soll. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Timers.Timer" /> das <see cref="E:System.Timers.Timer.Elapsed" />-Ereignis auslösen soll, oder legt diesen fest.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This property cannot be set because the timer has been disposed.">Diese Eigenschaft kann nicht festgelegt werden, da der Zeitgeber freigegeben wurde.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property was set to a value greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; before the timer was enabled.">Die <see cref="P:System.Timers.Timer.Interval" />-Eigenschaft wurde auf einen größeren Wert als <see cref="F:System.Int32.MaxValue" /> festgelegt, bevor der Timer aktiviert wurde.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="T:System.Timers.Timer" /> das <see cref="E:System.Timers.Timer.Elapsed" />-Ereignis auslösen soll, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary vsli:raw="Gets or sets the interval, expressed in milliseconds, at which to raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Ruft das Intervall in Millisekunden ab, in dem das <see cref="E:System.Timers.Timer.Elapsed" />-Ereignis ausgelöst wird, oder legt dieses fest.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The interval is less than or equal to zero.&#xA;&#xA; -or-&#xA;&#xA; The interval is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)">Das Intervall ist kleiner oder gleich 0 (null).  
  
- oder - 
Das Intervall ist größer als <see cref="F:System.Int32.MaxValue" />, und der Zeitgeber ist gegenwärtig aktiviert. (Wenn der Zeitgeber nicht gerade aktiviert ist, wird keine Ausnahme ausgelöst, bis er aktiviert wird.)</exception>
      <returns vsli:raw="The time, in milliseconds, between &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; events. The value must be greater than zero, and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;. The default is 100 milliseconds.">Die Zeit zwischen den <see cref="E:System.Timers.Timer.Elapsed" />-Ereignissen in Millisekunden. Der Wert muss größer als 0 (null) und kleiner als oder gleich <see cref="F:System.Int32.MaxValue" /> sein. Der Standardwert ist 100 Millisekunden.</returns>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary vsli:raw="Gets or sets the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; to its container in design mode.">Ruft die Site ab, die die <see cref="T:System.Timers.Timer" />-Klasse im Entwurfsmodus an ihren Container bindet, oder legt diese fest.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface representing the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; object to its container.">Eine <see cref="T:System.ComponentModel.ISite" />-Schnittstelle, die die Site darstellt, die das <see cref="T:System.Timers.Timer" />-Objekt an ihren Container bindet.</returns>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary vsli:raw="Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.">Ruft das Objekt ab, das zum Marshallen von Ereignishandleraufrufen verwendet wird, die nach Ablauf eines Intervalls ausgegeben werden, oder legt dieses fest.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ISynchronizeInvoke&quot; /&gt; representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is &lt;see langword=&quot;null&quot; /&gt;.">Die <see cref="T:System.ComponentModel.ISynchronizeInvoke" />-Schnittstelle, die das Objekt zum Marshallen von Ereignishandleraufrufen darstellt, die nach Ablauf eines Intervalls ausgegeben werden. Der Standardwert ist <see langword="null" />.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary vsli:raw="Sets the description that visual designers can display when referencing an event, extender, or property.">Legt die Beschreibung fest, die visuelle Designer bei Verweisen auf ein Ereignis, einen Extender oder eine Eigenschaft anzeigen können.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.TimersDescriptionAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Timers.TimersDescriptionAttribute" />-Klasse.</summary>
      <param name="description" vsli:raw="The description to use.">Die zu verwendende Beschreibung.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary vsli:raw="Gets the description that visual designers can display when referencing an event, extender, or property.">Ruft die Beschreibung ab, die visuelle Designer bei Verweisen auf ein Ereignis, einen Extender oder eine Eigenschaft anzeigen können.</summary>
      <returns vsli:raw="The description for the event, extender, or property.">Die Beschreibung für das Ereignis, den Extender oder die Eigenschaft.</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; type to a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type, and vice versa.">Konvertiert einen <see cref="T:System.String" />-Typ in einen <see cref="T:System.Uri" />-Typ und umgekehrt.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.UriTypeConverter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.UriTypeConverter" />-Klasse.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">Gibt zurück, ob dieser Konverter ein Objekt des angegebenen Typs in den Typ dieses Konverters konvertieren kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert from.">Ein <see cref="T:System.Type" />, der den Ausgangstyp der Konvertierung darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;sourceType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="sourceType" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is a &lt;see cref=&quot;T:System.String&quot; /&gt; type or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type can be assigned from &lt;paramref name=&quot;sourceType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="sourceType" /> ein <see cref="T:System.String" />-Typ ist oder wenn ein <see cref="T:System.Uri" />-Typ von <paramref name="sourceType" /> zugewiesen werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Gibt zurück, ob dieser Konverter das Objekt mithilfe des angegebenen Kontexts in den angegebenen Typ umwandeln kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert to.">Eine <see cref="T:System.Type" />-Klasse, die den Zieltyp der Konvertierung darstellt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Uri&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="destinationType" /> vom Typ <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, <see cref="T:System.String" /> oder <see cref="T:System.Uri" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Konvertiert das angegebene Objekt in den Typ dieses Konverters mit dem angegebenen Kontext und Kulturinformationen.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Die <see cref="T:System.Globalization.CultureInfo" />, die als aktuelle Kultur verwendet werden sollen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a given value object to the specified type, using the specified context and culture information.">Konvertiert ein angegebenes Wertobjekt unter Verwendung des angegebenen Kontexts und der angegebenen Kulturinformationen in den angegebenen Typ.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Ein <see cref="T:System.Globalization.CultureInfo" />. Wenn <see langword="null" /> übergeben wird, wird von der aktuellen Kultur ausgegangen.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Die zu konvertierende <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">Der <see cref="T:System.Type" />, in den der <paramref name="value" />-Parameter konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="destinationType" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Die Konvertierung kann nicht durchgeführt werden.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Ein <see cref="T:System.Object" />, das den konvertierten Wert darstellt.</returns>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created from it.">Gibt zurück, ob das angegebene Wertobjekt ein <see cref="T:System.Uri" /> ist oder aus diesem ein <see cref="T:System.Uri" /> erstellt werden kann.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">Das auf Gültigkeit zu prüfende <see cref="T:System.Object" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.String&quot; /&gt; from which a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="value" /> ein <see cref="T:System.Uri" /> ist oder ein <see cref="T:System.String" /> ist, aus dem ein <see cref="T:System.Uri" /> erstellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
  </members>
</doc>
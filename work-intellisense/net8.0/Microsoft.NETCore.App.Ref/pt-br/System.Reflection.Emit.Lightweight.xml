<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary vsli:raw="Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.">Dá suporte a modos alternativos de gerar o MSIL (Microsoft Intermediate Language) e metadados para um método dinâmico, incluindo métodos para criar tokens e para inserir os blobs de assinatura de variável local, tratamento de exceção e código.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing the signature for the associated dynamic method.">Obtém um token, válido no escopo do <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual, representando a assinatura do método dinâmico associado.</summary>
      <param name="signature" vsli:raw="An array that contains the signature.">Uma matriz que contém a assinatura.</param>
      <returns vsli:raw="A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.">Um token que pode ser inserido em metadados e o fluxo MSIL para o método dinâmico associado.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a dynamic method to be called from the associated method.">Obtém um token, válido no escopo do <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual, representando um método dinâmico a ser chamado do método associado.</summary>
      <param name="method" vsli:raw="The dynamic method to call.">O método dinâmico a ser chamado.</param>
      <returns vsli:raw="A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.">Um token que pode ser inserido em um fluxo MSIL para o método dinâmico associado, como o destino de uma instrução MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a field to be accessed from the associated dynamic method.">Obtém um token válido no escopo atual <see cref="T:System.Reflection.Emit.DynamicILInfo" />, que representa um campo para ser acessado do método dinâmico associado.</summary>
      <param name="field" vsli:raw="The field to be accessed.">O campo a ser acessado.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Um token que pode ser usado como o operando de uma instrução MSIL que acessa os campos no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.">Obtém um token válido no escopo atual <see cref="T:System.Reflection.Emit.DynamicILInfo" />, que representa um campo para ser acessado do método dinâmico associado, o campo está no tipo genérico especificado.</summary>
      <param name="field" vsli:raw="The field to be accessed.">O campo a ser acessado.</param>
      <param name="contextType" vsli:raw="The generic type the field belongs to.">O tipo genérico ao qual o campo pertence.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Um token que pode ser usado como o operando de uma instrução MSIL que acessa os campos no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a method to be accessed from the associated dynamic method.">Obtém um token válido no escopo atual <see cref="T:System.Reflection.Emit.DynamicILInfo" />, que representa um método para ser acessado do método dinâmico associado.</summary>
      <param name="method" vsli:raw="The method to be accessed.">O método a ser acessado.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt; or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Ldtoken&quot; /&gt;, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Um token que pode ser usado como o operando de uma instrução MSIL que acessa os métodos, como <see cref="F:System.Reflection.Emit.OpCodes.Call" /> ou <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a method on a generic type.">Obtém um token válido no escopo do <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual, que representa um método em um tipo genérico.</summary>
      <param name="method" vsli:raw="The method.">O método.</param>
      <param name="contextType" vsli:raw="The generic type the method belongs to.">O tipo genérico ao qual o método pertence.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt; or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Ldtoken&quot; /&gt;, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Um token que pode ser usado como o operando de uma instrução MSIL que acessa os métodos, como <see cref="F:System.Reflection.Emit.OpCodes.Call" /> ou <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a type to be used in the associated dynamic method.">Obtém um token válido no escopo do <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual, representando um tipo a ser usado no método dinâmico associado.</summary>
      <param name="type" vsli:raw="The type to be used.">O tipo a ser usado.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Um token que pode ser usado como o operando de uma instrução MSIL que exige um tipo no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a string literal to be used in the associated dynamic method.">Obtém um token válido no escopo do <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual, representando um literal de cadeia de caracteres a ser usado no método dinâmico associado.</summary>
      <param name="literal" vsli:raw="The string to be used.">A cadeia de caracteres a ser usada.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Um token que pode ser usado como o operando de uma instrução MSIL que exige uma cadeia de caracteres no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary vsli:raw="Sets the code body of the associated dynamic method.">Define o corpo de código do método dinâmico associado.</summary>
      <param name="code" vsli:raw="A pointer to a byte array containing the MSIL stream.">Um ponteiro para uma matriz de bytes que contém o fluxo MSIL.</param>
      <param name="codeSize" vsli:raw="The number of bytes in the MSIL stream.">O número de bytes no fluxo MSIL.</param>
      <param name="maxStackSize" vsli:raw="The maximum number of items on the operand stack when the method is executing.">O número máximo de itens na pilha de operando quando o método está sendo executado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;code&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;codeSize&quot; /&gt; is greater than 0.">
        <paramref name="code" /> é <see langword="null" /> e <paramref name="codeSize" /> é maior que 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;codeSize&quot; /&gt; is less than 0.">
        <paramref name="codeSize" /> é menor que 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary vsli:raw="Sets the code body of the associated dynamic method.">Define o corpo de código do método dinâmico associado.</summary>
      <param name="code" vsli:raw="An array that contains the MSIL stream.">Uma matriz que contém o fluxo MSIL.</param>
      <param name="maxStackSize" vsli:raw="The maximum number of items on the operand stack when the method is executing.">O número máximo de itens na pilha de operando quando o método está sendo executado.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary vsli:raw="Sets the exception metadata for the associated dynamic method.">Define os metadados de exceção para o método dinâmico associado.</summary>
      <param name="exceptions" vsli:raw="A pointer to a byte array containing the exception metadata.">Um ponteiro para uma matriz de bytes que contém os metadados de exceção.</param>
      <param name="exceptionsSize" vsli:raw="The number of bytes of exception metadata.">O número de bytes de metadados de exceção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;exceptionSize&quot; /&gt; is greater than 0.">
        <paramref name="exceptions" /> é <see langword="null" /> e <paramref name="exceptionSize" /> é maior que 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;exceptionSize&quot; /&gt; is less than 0.">
        <paramref name="exceptionSize" /> é menor que 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary vsli:raw="Sets the exception metadata for the associated dynamic method.">Define os metadados de exceção para o método dinâmico associado.</summary>
      <param name="exceptions" vsli:raw="An array that contains the exception metadata.">Uma matriz que contém os metadados de exceção.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary vsli:raw="Sets the local variable signature that describes the layout of local variables for the associated dynamic method.">Define a assinatura de variável local que descreve o layout de variáveis locais para o método dinâmico associado.</summary>
      <param name="localSignature" vsli:raw="An array that contains the layout of local variables for the associated &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Uma matriz que contém o layout de variáveis locais para o <see cref="T:System.Reflection.Emit.DynamicMethod" /> associado.</param>
      <param name="signatureSize" vsli:raw="The number of bytes in the signature.">O número de bytes na assinatura.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localSignature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;signatureSize&quot; /&gt; is greater than 0.">
        <paramref name="localSignature" /> é <see langword="null" /> e <paramref name="signatureSize" /> é maior que 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;signatureSize&quot; /&gt; is less than 0.">
        <paramref name="signatureSize" /> é menor que 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary vsli:raw="Sets the local variable signature that describes the layout of local variables for the associated dynamic method.">Define a assinatura de variável local que descreve o layout de variáveis locais para o método dinâmico associado.</summary>
      <param name="localSignature" vsli:raw="An array that contains the layout of local variables for the associated &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Uma matriz que contém o layout de variáveis locais para o <see cref="T:System.Reflection.Emit.DynamicMethod" /> associado.</param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary vsli:raw="Gets the dynamic method whose body is generated by the current instance.">Obtém o método dinâmico cujo corpo é gerado pela instância atual.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt; object representing the dynamic method for which the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object is generating code.">Um <see cref="T:System.Reflection.Emit.DynamicMethod" /> objeto que representa o método dinâmico para o qual o <see cref="T:System.Reflection.Emit.DynamicILInfo" /> objeto atual está gerando código.</returns>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary vsli:raw="Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.">Define e representa um método dinâmico que pode ser compilado, executado e descartado. Os métodos descartados estão disponíveis para coleta de lixo.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Cria um método dinâmico que é global para um módulo, especificando o nome do método, os atributos, a convenção de chamada, o tipo de retorno, os tipos de parâmetro, o módulo e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para os tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values that specifies the attributes of the dynamic method. The only combination allowed is &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Uma combinação bit a bit de valores <see cref="T:System.Reflection.MethodAttributes" /> que especifica os atributos do método dinâmico. A única combinação permitida é <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the dynamic method. Must be &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">A convenção de chamada para o método dinâmico. Deve ser <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">Um <see cref="T:System.Reflection.Module" /> que representa o módulo com o qual o método dinâmico deve ser logicamente associado.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="m" /> é um módulo que fornece hospedagem anônima para métodos dinâmicos.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="m" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is a combination of flags other than &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;callingConvention&quot; /&gt; is not &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="attributes" /> é uma combinação de sinalizadores diferente de <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.  
  
- ou - 
 <paramref name="callingConvention" /> não é <see cref="F:System.Reflection.CallingConventions.Standard" />.  
  
- ou - 
 <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Cria um método dinâmico, especificando o nome do método, os atributos, a convenção de chamada, o tipo de retorno, os tipos de parâmetro, o tipo como qual o método dinâmico é logicamente associado e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values that specifies the attributes of the dynamic method. The only combination allowed is &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Uma combinação bit a bit de valores <see cref="T:System.Reflection.MethodAttributes" /> que especifica os atributos do método dinâmico. A única combinação permitida é <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the dynamic method. Must be &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">A convenção de chamada para o método dinâmico. Deve ser <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">Um <see cref="T:System.Type" /> ao qual o método dinâmico está logicamente associado. O método dinâmico tem acesso a todos os membros do tipo.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="owner" /> é uma interface, uma matriz, um tipo genérico aberto ou um parâmetro de tipo de um método ou tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="owner" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is a combination of flags other than &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;callingConvention&quot; /&gt; is not &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="attributes" /> é uma combinação de sinalizadores diferente de <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.  
  
- ou - 
 <paramref name="callingConvention" /> não é <see cref="F:System.Reflection.CallingConventions.Standard" />.  
  
- ou - 
 <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary vsli:raw="Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.">Inicializa um método dinâmico hospedado anonimamente, especificando o nome do método, o tipo de retorno e os tipos de parâmetro.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary vsli:raw="Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Inicializa um método dinâmico hospedado anonimamente, especificando o nome do método, o tipo de retorno, os tipos de parâmetro e se as verificações de visibilidade JIT (Just-In-Time) devem ser ignoradas para os tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="restrictedSkipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, com essa restrição: o nível de confiança dos assemblies que contêm esses tipos e membros deve ser igual ou menor do que o nível de confiança da pilha de chamadas que emite o método dinâmico, caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.">Cria um método dinâmico global para um módulo, especificando o nome do método, o tipo de retorno, os tipos de parâmetro e o módulo.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">Um <see cref="T:System.Reflection.Module" /> que representa o módulo com o qual o método dinâmico deve ser logicamente associado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="m" /> é um módulo que fornece hospedagem anônima para métodos dinâmicos.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="m" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Cria um método dinâmico que é global para um módulo, especificando o nome do método, o tipo de retorno, os tipos de parâmetro, o módulo e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para os tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">Um <see cref="T:System.Reflection.Module" /> que representa o módulo com o qual o método dinâmico deve ser logicamente associado.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.">
        <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="m" /> é um módulo que fornece hospedagem anônima para métodos dinâmicos.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="m" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.">Cria um método dinâmico, especificando o nome do método, o tipo de retorno, os tipos de parâmetro e o tipo ao qual o método dinâmico está logicamente associado.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">Um <see cref="T:System.Type" /> ao qual o método dinâmico está logicamente associado. O método dinâmico tem acesso a todos os membros do tipo.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="owner" /> é uma interface, uma matriz, um tipo genérico aberto ou um parâmetro de tipo de um método ou tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="owner" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> é <see langword="null" /> ou é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Cria um método dinâmico, especificando o nome do método, o tipo de retorno, os tipos de parâmetro, o tipo como qual o método dinâmico é logicamente associado e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">Um <see cref="T:System.Type" /> ao qual o método dinâmico está logicamente associado. O método dinâmico tem acesso a todos os membros do tipo.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="owner" /> é uma interface, uma matriz, um tipo genérico aberto ou um parâmetro de tipo de um método ou tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="owner" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> é <see langword="null" /> ou é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary vsli:raw="Completes the dynamic method and creates a delegate that can be used to execute it.">Conclui o método dinâmico e cria um delegado que pode ser usado para executá-lo.</summary>
      <param name="delegateType" vsli:raw="A delegate type whose signature matches that of the dynamic method.">Um tipo de delegado cuja assinatura corresponde à do método dinâmico.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method has no method body.">O método dinâmico não tem nenhum corpo de método.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; has the wrong number of parameters or the wrong parameter types.">
        <paramref name="delegateType" /> tem o número de parâmetros incorreto ou tipos de parâmetro incorretos.</exception>
      <returns vsli:raw="A delegate of the specified type, which can be used to execute the dynamic method.">Um delegado do tipo especificado, que pode ser usado para executar o método dinâmico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary vsli:raw="Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.">Conclui o método dinâmico e cria um delegado que pode ser usado para executá-lo, especificando o tipo de delegado e um objeto ao qual o delegado está associado.</summary>
      <param name="delegateType" vsli:raw="A delegate type whose signature matches that of the dynamic method, minus the first parameter.">Um tipo de delegado cuja assinatura corresponde à do método dinâmico, menos o primeiro parâmetro.</param>
      <param name="target" vsli:raw="An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.">Um objeto ao qual o delegado está associado. Deve ser do mesmo tipo que o primeiro parâmetro do método dinâmico.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method has no method body.">O método dinâmico não tem nenhum corpo de método.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is not the same type as the first parameter of the dynamic method, and is not assignable to that type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;delegateType&quot; /&gt; has the wrong number of parameters or the wrong parameter types.">
        <paramref name="target" /> não é do mesmo tipo que o primeiro parâmetro do método dinâmico e não é atribuível a esse tipo.  
  
- ou - 
 <paramref name="delegateType" /> tem o número de parâmetros incorreto ou tipos de parâmetro incorretos.</exception>
      <returns vsli:raw="A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.">Um delegado do tipo especificado, que pode ser usado para executar o método dinâmico com o objeto de destino especificado.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Defines a parameter of the dynamic method.">Define um parâmetro do método dinâmico.</summary>
      <param name="position" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.">A posição do parâmetro na lista de parâmetros. Os parâmetros são indexados começando com o número 1 para o primeiro parâmetro.</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.ParameterAttributes&quot; /&gt; values that specifies the attributes of the parameter.">Uma combinação bit a bit de valores <see cref="T:System.Reflection.ParameterAttributes" /> que especifica os atributos do parâmetro.</param>
      <param name="parameterName" vsli:raw="The name of the parameter. The name can be a zero-length string.">O nome do parâmetro. O nome pode ser uma cadeia de caracteres de comprimento zero.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The method has no parameters.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is greater than the number of the method's parameters.">O método não tem parâmetros.  
  
- ou - 
 <paramref name="position" /> é menor que 0.  
  
- ou - 
 <paramref name="position" /> é maior que o número de parâmetros do método.</exception>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">Sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary vsli:raw="Returns the base implementation for the method.">Retorna a implementação base para o método.</summary>
      <returns vsli:raw="The base implementation of the method.">A implementação base do método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for the method.">Retorna todos os atributos personalizados definidos para o método.</summary>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> para pesquisar a cadeia de herança do método para encontrar os atributos personalizados, <see langword="false" /> para verificar apenas o método atual.</param>
      <returns vsli:raw="An array of objects representing all the custom attributes of the method.">Uma matriz de objetos que representam todos os atributos personalizados do método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes of the specified type that have been applied to the method.">Retorna os atributos personalizados do tipo especificado que foram aplicados ao método.</summary>
      <param name="attributeType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of custom attribute to return.">Um <see cref="T:System.Type" /> que representa o tipo de atributo personalizado a ser retornado.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> para pesquisar a cadeia de herança do método para encontrar os atributos personalizados, <see langword="false" /> para verificar apenas o método atual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An array of objects representing the attributes of the method that are of type &lt;paramref name=&quot;attributeType&quot; /&gt; or derive from type &lt;paramref name=&quot;attributeType&quot; /&gt;.">Uma matriz de objetos que representa os atributos do método que são do tipo <paramref name="attributeType" /> ou derivados do tipo <paramref name="attributeType" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.">Retorna um <see cref="T:System.Reflection.Emit.DynamicILInfo" /> objeto que pode ser usado para gerar um corpo de método de tokens de metadados, escopos e fluxos MSIL (Microsoft Intermediate Language).</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.">Um objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> que pode ser usado para gerar um corpo de método de tokens de metadados, escopos e fluxos MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary vsli:raw="Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.">Retorna um gerador de MSIL (Microsoft Intermediate Language) para o método com um tamanho de fluxo MSIL padrão de 64 bytes.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for the method.">Um objeto <see cref="T:System.Reflection.Emit.ILGenerator" /> para o método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary vsli:raw="Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.">Retorna um gerador de MSIL (Microsoft Intermediate Language) para o método com o tamanho do fluxo MSIL especificado.</summary>
      <param name="streamSize" vsli:raw="The size of the MSIL stream, in bytes.">O tamanho do fluxo MSIL, em bytes.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for the method, with the specified MSIL stream size.">Um objeto <see cref="T:System.Reflection.Emit.ILGenerator" /> para o método, com o tamanho do fluxo MSIL especificado.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the implementation flags for the method.">Retorna os sinalizadores de implementação para o método.</summary>
      <returns vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; values representing the implementation flags for the method.">Uma combinação bit a bit de valores <see cref="T:System.Reflection.MethodImplAttributes" /> que representam os sinalizadores de implementação para o método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary vsli:raw="Returns the parameters of the dynamic method.">Retorna os parâmetros do método dinâmico.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; objects that represent the parameters of the dynamic method.">Uma matriz de objetos <see cref="T:System.Reflection.ParameterInfo" /> que representam os parâmetros do método dinâmico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.">Invoca o método dinâmico usando os parâmetros especificados, sob as restrições do associador especificado e com as informações de cultura especificadas.</summary>
      <param name="obj" vsli:raw="This parameter is ignored for dynamic methods, because they are static. Specify &lt;see langword=&quot;null&quot; /&gt;.">Esse parâmetro é ignorado para métodos dinâmicos, pois é estático. Especifique <see langword="null" />.</param>
      <param name="invokeAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values.">Uma combinação bit a bit dos valores <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="binder" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt; object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects through reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. For more details, see &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Um objeto <see cref="T:System.Reflection.Binder" /> que permite a associação, coerção de tipos de argumento, invocação de membros e recuperação de objetos <see cref="T:System.Reflection.MemberInfo" /> por meio da reflexão. Caso <paramref name="binder" /> seja <see langword="null" />, o associador padrão é usado. Para obter mais detalhes, confira <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this parameter should be &lt;see langword=&quot;null&quot; /&gt;.">Uma lista de argumentos. Essa é uma matriz de argumentos com o mesmo número, ordem e tipo que os parâmetros do método a ser invocado. Se não houver nenhum parâmetro, esse parâmetro deverá ser <see langword="null" />.</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. For example, this information is needed to correctly convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, because 1000 is represented differently by different cultures.">Uma instância de <see cref="T:System.Globalization.CultureInfo" /> usada para determinar a coerção de tipos. Se isso for <see langword="null" />, será usado o <see cref="T:System.Globalization.CultureInfo" /> para o thread atual. Por exemplo, essas informações são necessárias para converter corretamente um <see cref="T:System.String" /> que representa 1000 em um valor <see cref="T:System.Double" />, pois 1000 é representado de forma diferente por diferentes culturas.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; calling convention is not supported.">Não há suporte para a convenção de chamada <see cref="F:System.Reflection.CallingConventions.VarArgs" />.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException" vsli:raw="The number of elements in &lt;paramref name=&quot;parameters&quot; /&gt; does not match the number of parameters in the dynamic method.">O número de elementos em <paramref name="parameters" /> não corresponde ao número de parâmetros no método dinâmico.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of one or more elements of &lt;paramref name=&quot;parameters&quot; /&gt; does not match the type of the corresponding parameter of the dynamic method.">O tipo de um ou mais elementos de <paramref name="parameters" /> não corresponde ao tipo do parâmetro correspondente do método dinâmico.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="The dynamic method is associated with a module, is not anonymously hosted, and was constructed with &lt;paramref name=&quot;skipVisibility&quot; /&gt; set to &lt;see langword=&quot;false&quot; /&gt;, but the dynamic method accesses members that are not &lt;see langword=&quot;public&quot; /&gt; or &lt;see langword=&quot;internal&quot; /&gt; (&lt;see langword=&quot;Friend&quot; /&gt; in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The dynamic method is anonymously hosted and was constructed with &lt;paramref name=&quot;skipVisibility&quot; /&gt; set to &lt;see langword=&quot;false&quot; /&gt;, but it accesses members that are not &lt;see langword=&quot;public&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The dynamic method contains unverifiable code. See the &quot;Verification&quot; section in Remarks for &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">O método dinâmico está associado a um módulo, não é hospedado anonimamente e foi construído com <paramref name="skipVisibility" /> definido como <see langword="false" />, mas acessa membros que não são <see langword="public" /> nem <see langword="internal" /> (<see langword="Friend" /> no Visual Basic).  
  
- ou - 
O método dinâmico é hospedado anonimamente e foi construído com <paramref name="skipVisibility" /> definido como <see langword="false" />, mas acessa membros que não são <see langword="public" />.  
  
- ou - 
O método dinâmico contém um código não verificável. Consulte a seção “Verificação” em Comentários de <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Object&quot; /&gt; containing the return value of the invoked method.">Um <see cref="T:System.Object" /> que contém o valor retornado do método invocado.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether the specified custom attribute type is defined.">Indica se o tipo de atributo personalizado especificado é definido.</summary>
      <param name="attributeType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of custom attribute to search for.">Um <see cref="T:System.Type" /> que representa o tipo de atributo personalizado a ser pesquisado.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> para pesquisar a cadeia de herança do método para encontrar os atributos personalizados, <see langword="false" /> para verificar apenas o método atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o tipo de atributo personalizado especificado estiver definido, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary vsli:raw="Returns the signature of the method, represented as a string.">Retorna a assinatura do método, representada como uma cadeia de caracteres.</summary>
      <returns vsli:raw="A string representing the method signature.">Uma cadeia de caracteres que representa a assinatura do método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary vsli:raw="Gets the attributes specified when the dynamic method was created.">Obtém os atributos especificados quando o método dinâmico foi criado.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values representing the attributes for the method.">Uma combinação de bits de bit <see cref="T:System.Reflection.MethodAttributes" /> que representa os atributos para o método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary vsli:raw="Gets the calling convention specified when the dynamic method was created.">Obtém a convenção de chamada especificada quando o método dinâmico foi criado.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Reflection.CallingConventions&quot; /&gt; values that indicates the calling convention of the method.">Um dos <see cref="T:System.Reflection.CallingConventions" /> valores que indica a Convenção de chamada do método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary vsli:raw="Gets the type that declares the method, which is always &lt;see langword=&quot;null&quot; /&gt; for dynamic methods.">Obtém o tipo que declara o método, que é sempre <see langword="null" /> para métodos dinâmicos.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">Sempre <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary vsli:raw="Gets or sets a value indicating whether the local variables in the method are zero-initialized.">Obtém ou define um valor que indica se as variáveis locais no método são inicializadas em zero.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the local variables in the method are zero-initialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> Se as variáveis locais no método forem inicializadas com zero; caso contrário, <see langword="false" /> . O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.">Obtém um valor que indica se o método dinâmico atual é crítico para segurança ou crítico para segurança e disponível no código transparente e, portanto, pode executar operações críticas.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">O método dinâmico não tem um corpo de método.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current dynamic method is security-critical or security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is transparent.">
        <see langword="true" /> Se o método dinâmico atual for de segurança crítica ou segura para segurança, <see langword="false" /> se for transparente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.">Obtém um valor que indica se o método dinâmico é crítico para segurança e disponível no código transparente no nível de confiança atual; ou seja, se ele pode realizar operações críticas e ser acessado pelo código transparente.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">O método dinâmico não tem um corpo de método.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic method is security-safe-critical at the current trust level; &lt;see langword=&quot;false&quot; /&gt; if it is security-critical or transparent.">
        <see langword="true" /> Se o método dinâmico for de segurança crítica no nível de confiança atual; <see langword="false" /> se for de segurança crítica ou transparente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.">Obtém um valor que indica que se o método dinâmico atual é transparente no nível de confiança atual e, portanto, não é pode realizar operações críticas.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">O método dinâmico não tem um corpo de método.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic method is security-transparent at the current trust level; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> Se o método dinâmico for de segurança transparente no nível de confiança atual; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary vsli:raw="Not supported for dynamic methods.">Não tem suporte para métodos dinâmicos.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Not allowed for dynamic methods.">Não é permitido para métodos dinâmicos.</exception>
      <returns vsli:raw="Not supported for dynamic methods.">Não tem suporte para métodos dinâmicos.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary vsli:raw="Gets the module with which the dynamic method is logically associated.">Obtém o módulo ao qual o método dinâmico está logicamente associado.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; with which the current dynamic method is associated.">O <see cref="T:System.Reflection.Module" /> com o qual o método dinâmico atual está associado.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary vsli:raw="Gets the name of the dynamic method.">Obtém o nome do método dinâmico.</summary>
      <returns vsli:raw="The simple name of the method.">O nome simples do método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary vsli:raw="Gets the class that was used in reflection to obtain the method.">Obtém a classe que foi usada na reflexão para obter o método.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">Sempre <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary vsli:raw="Gets the return parameter of the dynamic method.">Obtém o parâmetro de retorno do método dinâmico.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">Sempre <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary vsli:raw="Gets the type of return value for the dynamic method.">Obtém o tipo de valor retornado do método dinâmico.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of the return value of the current method; &lt;see cref=&quot;T:System.Void&quot; /&gt; if the method has no return type.">Um <see cref="T:System.Type" /> que representa o tipo do valor de retorno do método atual; <see cref="T:System.Void" /> se o método não tiver nenhum tipo de retorno.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the return type for the dynamic method.">Obtém os atributos personalizados do tipo de retorno para o método dinâmico.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; representing the custom attributes of the return type for the dynamic method.">Um <see cref="T:System.Reflection.ICustomAttributeProvider" /> que representa os atributos personalizados do tipo de retorno para o método dinâmico.</returns>
    </member>
  </members>
</doc>
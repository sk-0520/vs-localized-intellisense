<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary vsli:raw="Describes how an instruction alters the flow of control.">Décrit comment une instruction modifie le flux de contrôle.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary vsli:raw="Branch instruction.">Instruction de branchement.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary vsli:raw="Break instruction.">Instruction de rupture.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary vsli:raw="Call instruction.">Instruction d'appel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary vsli:raw="Conditional branch instruction.">Instruction de branchement conditionnel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary vsli:raw="Provides information about a subsequent instruction. For example, the &lt;see langword=&quot;Unaligned&quot; /&gt; instruction of &lt;see langword=&quot;Reflection.Emit.Opcodes&quot; /&gt; has &lt;see langword=&quot;FlowControl.Meta&quot; /&gt; and specifies that the subsequent pointer instruction might be unaligned.">Fournit des informations sur une instruction ultérieure. Par exemple, l'instruction <see langword="Unaligned" /> de <see langword="Reflection.Emit.Opcodes" /> comporte <see langword="FlowControl.Meta" /> et spécifie que l'instruction de pointeur qui suit peut ne pas être alignée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary vsli:raw="Normal flow of control.">Flux de contrôle normal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Phi">
      <summary vsli:raw="This enumerator value is reserved and should not be used.">Cette valeur de l'énumérateur est réservée et ne doit pas être utilisée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary vsli:raw="Return instruction.">Instruction de retour.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary vsli:raw="Exception throw instruction.">Instruction de levée d'exception.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary vsli:raw="Describes an intermediate language (IL) instruction.">Décrit une instruction en langage intermédiaire (IL, intermediate language).</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary vsli:raw="Tests whether the given object is equal to this &lt;see langword=&quot;Opcode&quot; /&gt;.">Vérifie si l'objet donné est égal à ce <see langword="Opcode" />.</summary>
      <param name="obj" vsli:raw="The object to compare to this object.">Objet à comparer à cet objet.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Opcode&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est une instance de <see langword="Opcode" /> et s’il est égal à cet objet ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt;.">Détermine si l'instance actuelle est égale à l'objet <see cref="T:System.Reflection.Emit.OpCode" /> spécifié.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to the current instance.">
        <see cref="T:System.Reflection.Emit.OpCode" /> à comparer à l'instance en cours.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de <paramref name="obj" /> est égale à la valeur de l'instance actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary vsli:raw="Returns the generated hash code for this &lt;see langword=&quot;Opcode&quot; /&gt;.">Retourne le code de hachage généré pour ce <see langword="Opcode" />.</summary>
      <returns vsli:raw="The hash code for this instance.">Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; structures are equal.">Indique si deux structures <see cref="T:System.Reflection.Emit.OpCode" /> sont égales.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.OpCode" /> à comparer à <paramref name="b" />.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.OpCode" /> à comparer à <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="a" /> est égal à <paramref name="b" /> ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; structures are not equal.">Indique si deux structures <see cref="T:System.Reflection.Emit.OpCode" /> ne sont pas égales.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.OpCode" /> à comparer à <paramref name="b" />.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.OpCode" /> à comparer à <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="a" /> n'est pas égal à <paramref name="b" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary vsli:raw="Returns this &lt;see langword=&quot;Opcode&quot; /&gt; as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Retourne ce <see langword="Opcode" /> en tant que <see cref="T:System.String" />.</summary>
      <returns vsli:raw="A string containing the name of this &lt;see langword=&quot;Opcode&quot; /&gt;.">Chaîne contenant le nom de cet <see langword="Opcode" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary vsli:raw="The flow control characteristics of the intermediate language (IL) instruction.">Caractéristiques du contrôle de flux de l’instruction en langage intermédiaire (IL, intermediate language).</summary>
      <returns vsli:raw="Read-only. The type of flow control.">Lecture seule. Type de contrôle de flux.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary vsli:raw="The name of the intermediate language (IL) instruction.">Nom de l’instruction en langage intermédiaire (IL, intermediate language).</summary>
      <returns vsli:raw="Read-only. The name of the IL instruction.">Lecture seule. Nom de l'instruction IL.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary vsli:raw="The type of intermediate language (IL) instruction.">Type de l’instruction en langage intermédiaire (IL, intermediate language).</summary>
      <returns vsli:raw="Read-only. The type of intermediate language (IL) instruction.">Lecture seule. Type de l’instruction en langage intermédiaire (IL, intermediate language).</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary vsli:raw="The operand type of an intermediate language (IL) instruction.">Type d’opérande d’une instruction en langage intermédiaire (IL, intermediate language).</summary>
      <returns vsli:raw="Read-only. The operand type of an IL instruction.">Lecture seule. Type d’opérande d’une instruction IL.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary vsli:raw="The size of the intermediate language (IL) instruction.">Taille de l’instruction en langage intermédiaire (IL, intermediate language).</summary>
      <returns vsli:raw="Read-only. The size of the IL instruction.">Lecture seule. Taille de l'instruction IL.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary vsli:raw="How the intermediate language (IL) instruction pops the stack.">Manière dont l’instruction en langage intermédiaire (IL, intermediate language) dépile la pile.</summary>
      <returns vsli:raw="Read-only. The way the IL instruction pops the stack.">Lecture seule. Manière dont l'instruction IL dépile la pile.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary vsli:raw="How the intermediate language (IL) instruction pushes operand onto the stack.">Manière dont l’instruction en langage intermédiaire (IL, intermediate language) exécute un push de l’opérande dans la pile.</summary>
      <returns vsli:raw="Read-only. The way the IL instruction pushes operand onto the stack.">Lecture seule. Manière dont l'instruction IL exécute un push de l'opérande dans la pile.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary vsli:raw="Gets the numeric value of the intermediate language (IL) instruction.">Obtient la valeur numérique de l’instruction en langage intermédiaire (IL).</summary>
      <returns vsli:raw="Read-only. The numeric value of the IL instruction.">Lecture seule. Valeur numérique de l'instruction IL.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary vsli:raw="Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class members (such as &lt;see cref=&quot;M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)&quot; /&gt;).">Fournit les représentations des champs des instructions MSIL (Microsoft Intermediate Language) pour l'émission par les membres de classe <see cref="T:System.Reflection.Emit.ILGenerator" /> (par exemple, <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary vsli:raw="Adds two values and pushes the result onto the evaluation stack.">Ajoute deux valeurs et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary vsli:raw="Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.">Ajoute deux entiers, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary vsli:raw="Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.">Ajoute deux valeurs entières non signées, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary vsli:raw="Computes the bitwise AND of two values and pushes the result onto the evaluation stack.">Calcule l'opération de bits AND de deux valeurs et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary vsli:raw="Returns an unmanaged pointer to the argument list of the current method.">Retourne un pointeur non managé vers la liste d'arguments de la méthode actuelle.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary vsli:raw="Transfers control to a target instruction if two values are equal.">Transfère le contrôle à une instruction cible si les deux valeurs sont égales.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if two values are equal.">Transfère le contrôle à une instruction cible (forme abrégée) si les deux valeurs sont égales.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than or equal to the second value.">Transfère le contrôle à une instruction cible si la première valeur est supérieure ou égale à la deuxième.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est supérieure ou égale à la deuxième.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Transfère le contrôle à une instruction cible si la première valeur est supérieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est supérieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value.">Transfère le contrôle à une instruction cible si la première valeur est supérieure à la deuxième.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value.">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est supérieure à la deuxième.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Transfère le contrôle à une instruction cible si la première valeur est supérieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est supérieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than or equal to the second value.">Transfère le contrôle à une instruction cible si la première valeur est inférieure ou égale à la deuxième.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est inférieure ou égale à la deuxième.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.">Transfère le contrôle à une instruction cible si la première valeur est inférieure ou égale à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est inférieure ou égale à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than the second value.">Transfère le contrôle à une instruction cible si la première valeur est inférieure à la deuxième.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than the second value.">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est inférieure à la deuxième.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.">Transfère le contrôle à une instruction cible si la première valeur est inférieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est inférieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary vsli:raw="Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.">Transfère le contrôle à une instruction cible lorsque deux valeurs entières non signées ou valeurs float non ordonnées ne sont pas égales.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.">Transfère le contrôle à une instruction cible lorsque deux valeurs entières non signées ou valeurs float non ordonnées ne sont pas égales.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary vsli:raw="Converts a value type to an object reference (type &lt;see langword=&quot;O&quot; /&gt;).">Convertit un type valeur en référence d'objet (type <see langword="O" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary vsli:raw="Unconditionally transfers control to a target instruction.">Transfère le contrôle à une instruction cible de manière non conditionnelle.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary vsli:raw="Unconditionally transfers control to a target instruction (short form).">Transfère le contrôle à une instruction cible de manière non conditionnelle (forme abrégée).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary vsli:raw="Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.">Active l'infrastructure CLI de façon à informer le débogueur qu'un point d'arrêt a été dépassé.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic), or zero.">Transfère le contrôle à une instruction cible si <paramref name="value" /> est <see langword="false" />, une référence null (<see langword="Nothing" /> en Visual Basic) ou zéro.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, a null reference, or zero.">Transfère le contrôle à une instruction cible si <paramref name="value" /> est <see langword="false" />, une référence null ou zéro.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, not null, or non-zero.">Transfère le contrôle à une instruction cible si <paramref name="value" /> est <see langword="true" />, non null ou différent de zéro.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, not null, or non-zero.">Transfère le contrôle à une instruction cible (forme abrégée) si <paramref name="value" /> est <see langword="true" />, non null ou différent de zéro.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary vsli:raw="Calls the method indicated by the passed method descriptor.">Appelle la méthode indiquée par le descripteur de méthode passé.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary vsli:raw="Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.">Appelle la méthode indiquée dans la pile d'évaluation (sous la forme d'un pointeur vers un point d'entrée) avec les arguments décrits par une convention d'appel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary vsli:raw="Calls a late-bound method on an object, pushing the return value onto the evaluation stack.">Appelle une méthode à liaison tardive sur un objet, en exécutant un push de la valeur de retour dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary vsli:raw="Attempts to cast an object passed by reference to the specified class.">Tente d'effectuer un cast d'un objet passé par référence en classe spécifiée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary vsli:raw="Compares two values. If they are equal, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Compare deux valeurs. Si elles sont égales, la valeur entière 1 (<see langword="(int32" />) fait l'objet d'un push dans la pile d'évaluation ; sinon, le push est exécuté sur la valeur 0 (<see langword="int32" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary vsli:raw="Compares two values. If the first value is greater than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Compare deux valeurs. Si la première valeur est supérieure à la deuxième, la valeur entière 1 (<see langword="(int32" />) fait l'objet d'un push dans la pile d'évaluation ; sinon, le push est exécuté sur la valeur 0 (<see langword="int32" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary vsli:raw="Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Compare deux valeurs non signées ou non ordonnées. Si la première valeur est supérieure à la deuxième, la valeur entière 1 (<see langword="(int32" />) fait l'objet d'un push dans la pile d'évaluation ; sinon, le push est exécuté sur la valeur 0 (<see langword="int32" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.ArithmeticException&quot; /&gt; if value is not a finite number.">Lève <see cref="T:System.ArithmeticException" /> si la valeur n'est pas un nombre fini.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary vsli:raw="Compares two values. If the first value is less than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Compare deux valeurs. Si la première valeur est inférieure à la deuxième, la valeur entière 1 (<see langword="(int32" />) fait l'objet d'un push dans la pile d'évaluation ; sinon, le push est exécuté sur la valeur 0 (<see langword="int32" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary vsli:raw="Compares the unsigned or unordered values &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;. If &lt;paramref name=&quot;value1&quot; /&gt; is less than &lt;paramref name=&quot;value2&quot; /&gt;, then the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Compare les valeurs non signées ou non ordonnées <paramref name="value1" /> et <paramref name="value2" />. Si <paramref name="value1" /> est inférieur à <paramref name="value2" />, la valeur entière 1 (<see langword="(int32" />) fait alors l'objet d'un push dans la pile d'évaluation ; sinon, le push est exécuté sur la valeur 0 (<see langword="int32" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
      <summary vsli:raw="Constrains the type on which a virtual method call is made.">Contraint le type sur lequel un appel à une méthode virtuelle est effectué.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;native int&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int8&quot; /&gt;, then extends (pads) it to &lt;see langword=&quot;int32&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="int8" /> et l'étend (remplit) à <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int16&quot; /&gt;, then extends (pads) it to &lt;see langword=&quot;int32&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="int16" /> et l'étend (remplit) à <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int32&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int64&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="native int" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="native int" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur signée située en haut de la pile d’évaluation en <see langword="int8" /> signé et l’étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="int8" /> signé et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int16&quot; /&gt; and extending it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="int16" /> signé et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="int16" /> signé et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="int32" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="int32" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="int64" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="int64" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="unsigned native int" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="unsigned native int" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="unsigned int8" /> et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="unsigned int8" /> et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="unsigned int16" /> et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="unsigned int16" /> et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="unsigned int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="unsigned int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="unsigned int64" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="unsigned int64" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary vsli:raw="Converts the unsigned integer value on top of the evaluation stack to &lt;see langword=&quot;float32&quot; /&gt;.">Convertit la valeur entière non signée située en haut de la pile d'évaluation en <see langword="float32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;float32&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="float32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;float64&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="float64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, and extends it to &lt;see langword=&quot;native int&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="unsigned native int" /> et l'étend à <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="unsigned int8" /> et l'étend à <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="unsigned int16" /> et l'étend à <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="unsigned int32" /> et l'étend à <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, and extends it to &lt;see langword=&quot;int64&quot; /&gt;.">Convertit la valeur située en haut de la pile d'évaluation en <see langword="unsigned int64" /> et l'étend à <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary vsli:raw="Copies a specified number bytes from a source address to a destination address.">Copie un nombre d'octets spécifié d'une adresse source vers une adresse de destination.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary vsli:raw="Copies the value type located at the address of an object (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;, &lt;see langword=&quot;*&quot; /&gt; or &lt;see langword=&quot;native int&quot; /&gt;) to the address of the destination object (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;, &lt;see langword=&quot;*&quot; /&gt; or &lt;see langword=&quot;native int&quot; /&gt;).">Copie le type valeur situé à l'adresse d'un objet (type <see langword="&amp;" />, <see langword="*" /> ou <see langword="native int" />) à l'adresse de l'objet de destination (type <see langword="&amp;" />, <see langword="*" /> ou <see langword="native int" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary vsli:raw="Divides two values and pushes the result as a floating-point (type &lt;see langword=&quot;F&quot; /&gt;) or quotient (type &lt;see langword=&quot;int32&quot; /&gt;) onto the evaluation stack.">Divise une valeur par une autre et exécute un push du résultat en tant que valeur à virgule flottante (type <see langword="F" />) ou quotient (type <see langword="int32" />) dans la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary vsli:raw="Divides two unsigned integer values and pushes the result (&lt;see langword=&quot;int32&quot; /&gt;) onto the evaluation stack.">Divise une valeur entière non signée par une autre et exécute un push du résultat (<see langword="int32" />) dans la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary vsli:raw="Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.">Copie la valeur actuelle la plus haute dans la pile d'évaluation et exécute un push de la copie dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary vsli:raw="Transfers control from the &lt;see langword=&quot;filter&quot; /&gt; clause of an exception back to the Common Language Infrastructure (CLI) exception handler.">Transfère à nouveau le contrôle de la clause <see langword="filter" /> d'une exception au gestionnaire d'exceptions CLI.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary vsli:raw="Transfers control from the &lt;see langword=&quot;fault&quot; /&gt; or &lt;see langword=&quot;finally&quot; /&gt; clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.">Transfère à nouveau le contrôle de la clause <see langword="fault" /> ou <see langword="finally" /> d'un bloc d'exception au gestionnaire d'exceptions CLI.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary vsli:raw="Initializes a specified block of memory at a specific address to a given size and initial value.">Initialise un bloc de mémoire spécifié situé à une adresse spécifique en utilisant une taille et une valeur initiale données.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary vsli:raw="Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.">Initialise tous les champs du type de valeur figurant à l'adresse spécifiée en utilisant la référence null ou la valeur 0 du type primitif qui convient.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary vsli:raw="Tests whether an object reference (type &lt;see langword=&quot;O&quot; /&gt;) is an instance of a particular class.">Vérifie si une référence d'objet (type <see langword="O" />) est une instance d'une classe particulière.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary vsli:raw="Exits current method and jumps to specified method.">Quitte la méthode actuelle et passe à la méthode spécifiée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary vsli:raw="Loads an argument (referenced by a specified index value) onto the stack.">Charge un argument (référencé par une valeur d'index spécifiée) dans la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary vsli:raw="Loads the argument at index 0 onto the evaluation stack.">Charge l’argument à l’index 0 dans la pile d’évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary vsli:raw="Loads the argument at index 1 onto the evaluation stack.">Charge l’argument à l’index 1 dans la pile d’évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary vsli:raw="Loads the argument at index 2 onto the evaluation stack.">Charge l'argument à l'index 2 dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary vsli:raw="Loads the argument at index 3 onto the evaluation stack.">Charge l’argument à l’index 3 dans la pile d’évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary vsli:raw="Loads the argument (referenced by a specified short form index) onto the evaluation stack.">Charge l’argument (référencé par un index sous la forme abrégée) dans la pile d’évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary vsli:raw="Load an argument address onto the evaluation stack.">Charge une adresse d'argument dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary vsli:raw="Load an argument address, in short form, onto the evaluation stack.">Charge une adresse d’argument, sous la forme abrégée, dans la pile d’évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Exécute un push d'une valeur fournie de type <see langword="int32" /> dans la pile d'évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary vsli:raw="Pushes the integer value of 0 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Exécute un push de la valeur entière 0 dans la pile d'évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary vsli:raw="Pushes the integer value of 1 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Exécute un envoi (push) de la valeur entière 1 dans la pile d’évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary vsli:raw="Pushes the integer value of 2 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Exécute un envoi (push) de la valeur entière 2 dans la pile d’évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary vsli:raw="Pushes the integer value of 3 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Exécute un envoi (push) de la valeur entière 3 dans la pile d’évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary vsli:raw="Pushes the integer value of 4 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Exécute un envoi (push) de la valeur entière 4 dans la pile d’évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary vsli:raw="Pushes the integer value of 5 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Exécute un envoi (push) de la valeur entière 5 dans la pile d’évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary vsli:raw="Pushes the integer value of 6 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Exécute un envoi (push) de la valeur entière 6 dans la pile d’évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary vsli:raw="Pushes the integer value of 7 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Exécute un envoi (push) de la valeur entière 7 dans la pile d’évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary vsli:raw="Pushes the integer value of 8 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Exécute un envoi (push) de la valeur entière 8 dans la pile d’évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary vsli:raw="Pushes the integer value of -1 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Exécute un envoi (push) de la valeur entière -1 dans la pile d’évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary vsli:raw="Pushes the supplied &lt;see langword=&quot;int8&quot; /&gt; value onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;, short form.">Exécute un push de la valeur fournie <see langword="int8" /> dans la pile d'évaluation en tant que <see langword="int32" /> (forme abrégée).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;int64&quot; /&gt; onto the evaluation stack as an &lt;see langword=&quot;int64&quot; /&gt;.">Exécute un push d'une valeur fournie de type <see langword="int64" /> dans la pile d'évaluation en tant que <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;float32&quot; /&gt; onto the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Exécute un push d'une valeur fournie de type <see langword="float32" /> dans la pile d'évaluation en tant que type <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;float64&quot; /&gt; onto the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Exécute un push d'une valeur fournie de type <see langword="float64" /> dans la pile d'évaluation en tant que type <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
      <summary vsli:raw="Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.">Charge l'élément à un index de tableau spécifié en haut de la pile d'évaluation en tant que type spécifié par l'instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;native int&quot; /&gt; at a specified array index onto the top of the evaluation stack as a &lt;see langword=&quot;native int&quot; /&gt;.">Charge l'élément avec le type <see langword="native int" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int8&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Charge l'élément avec le type <see langword="int8" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int16&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Charge l'élément avec le type <see langword="int16" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int32&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Charge l'élément avec le type <see langword="int32" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int64&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int64&quot; /&gt;.">Charge l'élément avec le type <see langword="int64" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;float32&quot; /&gt; at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Charge l'élément avec le type <see langword="float32" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que type <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;float64&quot; /&gt; at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Charge l'élément avec le type <see langword="float64" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que type <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary vsli:raw="Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;O&quot; /&gt; (object reference).">Charge l'élément contenant une référence d'objet à un index de tableau spécifié en haut de la pile d'évaluation en tant que type <see langword="O" /> (référence d'objet).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int8&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Charge l'élément avec le type <see langword="unsigned int8" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int16&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Charge l'élément avec le type <see langword="unsigned int16" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int32&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Charge l'élément avec le type <see langword="unsigned int32" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary vsli:raw="Loads the address of the array element at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;&amp;amp;&quot; /&gt; (managed pointer).">Charge l'adresse de l'élément de tableau situé à un index de tableau spécifié en haut de la pile d'évaluation en tant que type <see langword="&amp;" /> (pointeur managé).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary vsli:raw="Finds the value of a field in the object whose reference is currently on the evaluation stack.">Recherche la valeur d'un champ dans l'objet dont la référence est actuellement située dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary vsli:raw="Finds the address of a field in the object whose reference is currently on the evaluation stack.">Recherche l'adresse d'un champ dans l'objet dont la référence est actuellement située dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary vsli:raw="Pushes an unmanaged pointer (type &lt;see langword=&quot;native int&quot; /&gt;) to the native code implementing a specific method onto the evaluation stack.">Exécute un push d'un pointeur non managé (type <see langword="native int" />) sur le code natif implémentant une méthode spécifique dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;native int&quot; /&gt; as a &lt;see langword=&quot;native int&quot; /&gt; onto the evaluation stack indirectly.">Charge indirectement une valeur de type <see langword="native int" /> en tant que <see langword="native int" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int8&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Charge indirectement une valeur de type <see langword="int8" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int16&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Charge indirectement une valeur de type <see langword="int16" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int32&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Charge indirectement une valeur de type <see langword="int32" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int64&quot; /&gt; as an &lt;see langword=&quot;int64&quot; /&gt; onto the evaluation stack indirectly.">Charge indirectement une valeur de type <see langword="int64" /> en tant que <see langword="int64" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;float32&quot; /&gt; as a type &lt;see langword=&quot;F&quot; /&gt; (float) onto the evaluation stack indirectly.">Charge indirectement une valeur de type <see langword="float32" /> en tant que type <see langword="F" /> (float) dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;float64&quot; /&gt; as a type &lt;see langword=&quot;F&quot; /&gt; (float) onto the evaluation stack indirectly.">Charge indirectement une valeur de type <see langword="float64" /> en tant que type <see langword="F" /> (float) dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary vsli:raw="Loads an object reference as a type &lt;see langword=&quot;O&quot; /&gt; (object reference) onto the evaluation stack indirectly.">Charge indirectement une référence d'objet en tant que type <see langword="O" /> (référence d'objet) dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int8&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Charge indirectement une valeur de type <see langword="unsigned int8" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int16&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Charge indirectement une valeur de type <see langword="unsigned int16" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int32&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Charge indirectement une valeur de type <see langword="unsigned int32" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary vsli:raw="Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.">Exécute un push du nombre d'éléments d'un tableau unidimensionnel de base zéro dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary vsli:raw="Loads the local variable at a specific index onto the evaluation stack.">Charge la variable locale à un index spécifique dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary vsli:raw="Loads the local variable at index 0 onto the evaluation stack.">Charge la variable locale à l'index 0 dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary vsli:raw="Loads the local variable at index 1 onto the evaluation stack.">Charge la variable locale à l’index 1 dans la pile d’évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary vsli:raw="Loads the local variable at index 2 onto the evaluation stack.">Charge la variable locale à l’index 2 dans la pile d’évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary vsli:raw="Loads the local variable at index 3 onto the evaluation stack.">Charge la variable locale à l’index 3 dans la pile d’évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary vsli:raw="Loads the local variable at a specific index onto the evaluation stack, short form.">Charge la variable locale à un index spécifique dans la pile d'évaluation (forme abrégée).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary vsli:raw="Loads the address of the local variable at a specific index onto the evaluation stack.">Charge l'adresse de la variable locale à un index spécifique dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary vsli:raw="Loads the address of the local variable at a specific index onto the evaluation stack, short form.">Charge l'adresse de la variable locale à un index spécifique dans la pile d'évaluation (forme abrégée).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary vsli:raw="Pushes a null reference (type &lt;see langword=&quot;O&quot; /&gt;) onto the evaluation stack.">Exécute un push d'une référence null (type <see langword="O" />) dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary vsli:raw="Copies the value type object pointed to by an address to the top of the evaluation stack.">Copie l'objet de type de valeur sur lequel pointe une adresse en haut de la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary vsli:raw="Pushes the value of a static field onto the evaluation stack.">Exécute un push de la valeur d’un champ static dans la pile d’évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary vsli:raw="Pushes the address of a static field onto the evaluation stack.">Exécute un push de l’adresse d’un champ static dans la pile d’évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary vsli:raw="Pushes a new object reference to a string literal stored in the metadata.">Exécute un push d'une nouvelle référence d'objet à un littéral de chaîne stocké dans les métadonnées.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary vsli:raw="Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.">Convertit un jeton de métadonnées en sa représentation runtime et exécute un push de cette représentation dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary vsli:raw="Pushes an unmanaged pointer (type &lt;see langword=&quot;native int&quot; /&gt;) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.">Exécute un push d'un pointeur non managé (type <see langword="native int" />) sur le code natif implémentant une méthode virtuelle spécifique associée à un objet spécifié dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary vsli:raw="Exits a protected region of code, unconditionally transferring control to a specific target instruction.">Quitte une région de code protégée, en transférant le contrôle à une instruction cible spécifique de manière non conditionnelle.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary vsli:raw="Exits a protected region of code, unconditionally transferring control to a target instruction (short form).">Quitte une région de code protégée, en transférant le contrôle à une instruction cible (forme abrégée) de manière non conditionnelle.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary vsli:raw="Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type &lt;see langword=&quot;*&quot; /&gt;) of the first allocated byte onto the evaluation stack.">Alloue un certain nombre d'octets à partir du pool de mémoires dynamique local et exécute un push de l'adresse (pointeur transitoire, type <see langword="*" />) du premier octet alloué dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary vsli:raw="Pushes a typed reference to an instance of a specific type onto the evaluation stack.">Exécute un push d'une référence typée à une instance d'un type spécifique dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary vsli:raw="Multiplies two values and pushes the result on the evaluation stack.">Multiplie deux valeurs et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary vsli:raw="Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.">Multiplie deux valeurs entières, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary vsli:raw="Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.">Multiplie deux valeurs entières non signées, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary vsli:raw="Negates a value and pushes the result onto the evaluation stack.">Met en négatif une valeur et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary vsli:raw="Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.">Exécute un push dans la pile d'évaluation sur une référence d'objet à un nouveau tableau unidimensionnel de base zéro dont les éléments sont d'un type spécifique.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary vsli:raw="Creates a new object or a new instance of a value type, pushing an object reference (type &lt;see langword=&quot;O&quot; /&gt;) onto the evaluation stack.">Crée un nouvel objet ou une nouvelle instance d'un type valeur, en exécutant un push d'une référence d'objet (type <see langword="O" />) dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary vsli:raw="Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.">Remplit l’espace si les opcodes sont corrigés. Aucune opération significative n'est exécutée bien qu'un cycle de traitement puisse être utilisé.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary vsli:raw="Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.">Calcule le complément de bits de la valeur entière située en haut de la pile et exécute un push du résultat dans la pile d'évaluation en tant que type identique.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary vsli:raw="Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.">Calcule le complément de bits de deux valeurs entières situées en haut de la pile et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary vsli:raw="Removes the value currently on top of the evaluation stack.">Supprime la valeur actuellement située en haut de la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
      <summary vsli:raw="This is a reserved instruction.">Cette instruction est réservée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
      <summary vsli:raw="This is a reserved instruction.">Cette instruction est réservée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
      <summary vsli:raw="This is a reserved instruction.">Cette instruction est réservée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
      <summary vsli:raw="This is a reserved instruction.">Cette instruction est réservée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
      <summary vsli:raw="This is a reserved instruction.">Cette instruction est réservée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
      <summary vsli:raw="This is a reserved instruction.">Cette instruction est réservée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
      <summary vsli:raw="This is a reserved instruction.">Cette instruction est réservée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
      <summary vsli:raw="This is a reserved instruction.">Cette instruction est réservée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
      <summary vsli:raw="Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.">Spécifie que l'opération d'adresse de tableau suivante n'exécute aucun contrôle de type au moment de l'exécution et qu'il retourne un pointeur managé dont la mutabilité est restreinte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary vsli:raw="Retrieves the type token embedded in a typed reference.">Récupère le jeton de type incorporé dans une référence typée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary vsli:raw="Retrieves the address (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;) embedded in a typed reference.">Récupère l'adresse (type <see langword="&amp;" />) incorporée dans une référence typée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary vsli:raw="Divides two values and pushes the remainder onto the evaluation stack.">Divise une valeur par une autre et exécute un push du reste dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary vsli:raw="Divides two unsigned values and pushes the remainder onto the evaluation stack.">Divise une valeur non signée par une autre et exécute un push du reste dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary vsli:raw="Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.">Effectue un retour à partir de la méthode actuelle en exécutant un push d'une valeur de retour (si elle existe) à partir de la pile d'évaluation de l'appelé dans celle de l'appelant.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary vsli:raw="Rethrows the current exception.">Lève de nouveau l'exception actuelle.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary vsli:raw="Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.">Déplace une valeur entière vers la gauche (décalage des zéros) d'un nombre de bits spécifié, en exécutant un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary vsli:raw="Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.">Déplace une valeur entière (dans le signe) vers la droite d'un nombre de bits spécifié, en exécutant un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary vsli:raw="Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.">Déplace une valeur entière non signée (décalage des zéros) vers la droite d'un nombre de bits spécifié, en exécutant un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary vsli:raw="Pushes the size, in bytes, of a supplied value type onto the evaluation stack.">Exécute un push de la taille (en octets) d'un type de valeur fourni dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary vsli:raw="Stores the value on top of the evaluation stack in the argument slot at a specified index.">Stocke la valeur en haut de la pile d’évaluation à l’emplacement d’argument situé à un index spécifié.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary vsli:raw="Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.">Stocke la valeur en haut de la pile d’évaluation à l’emplacement d’argument situé à un index spécifié (forme abrégée).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
      <summary vsli:raw="Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.">Remplace l'élément de tableau à un index donné par la valeur de la pile d'évaluation dont le type est spécifié dans l'instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;native int&quot; /&gt; value on the evaluation stack.">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="native int" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int8&quot; /&gt; value on the evaluation stack.">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="int8" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int16&quot; /&gt; value on the evaluation stack.">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="int16" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int32&quot; /&gt; value on the evaluation stack.">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="int32" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int64&quot; /&gt; value on the evaluation stack.">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="int64" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;float32&quot; /&gt; value on the evaluation stack.">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="float32" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;float64&quot; /&gt; value on the evaluation stack.">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="float64" /> dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary vsli:raw="Replaces the array element at a given index with the object ref value (type &lt;see langword=&quot;O&quot; /&gt;) on the evaluation stack.">Remplace l'élément de tableau situé à un index donné par la valeur de référence d'objet (type <see langword="O" />) dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary vsli:raw="Replaces the value stored in the field of an object reference or pointer with a new value.">Remplace la valeur stockée dans le champ d'une référence d'objet ou d'un pointeur par une nouvelle valeur.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;native int&quot; /&gt; at a supplied address.">Stocke une valeur de type <see langword="native int" /> à une adresse fournie.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int8&quot; /&gt; at a supplied address.">Stocke une valeur de type <see langword="int8" /> à une adresse fournie.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int16&quot; /&gt; at a supplied address.">Stocke une valeur de type <see langword="int16" /> à une adresse fournie.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int32&quot; /&gt; at a supplied address.">Stocke une valeur de type <see langword="int32" /> à une adresse fournie.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int64&quot; /&gt; at a supplied address.">Stocke une valeur de type <see langword="int64" /> à une adresse fournie.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;float32&quot; /&gt; at a supplied address.">Stocke une valeur de type <see langword="float32" /> à une adresse fournie.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;float64&quot; /&gt; at a supplied address.">Stocke une valeur de type <see langword="float64" /> à une adresse fournie.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary vsli:raw="Stores a object reference value at a supplied address.">Stocke une valeur de référence d'objet à une adresse fournie.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at a specified index.">Dépile la valeur actuelle du haut de la pile d'évaluation et la stocke dans la liste de variables locales à un index spécifié.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 0.">Dépile la valeur actuelle du haut de la pile d'évaluation et la stocke dans la liste de variables locales à l'index 0.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 1.">Dépile la valeur actuelle du haut de la pile d’évaluation et la stocke dans la liste de variables locales à l’index 1.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 2.">Dépile la valeur actuelle du haut de la pile d’évaluation et la stocke dans la liste de variables locales à l’index 2.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 3.">Dépile la valeur actuelle du haut de la pile d’évaluation et la stocke dans la liste de variables locales à l’index 3.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at &lt;paramref name=&quot;index&quot; /&gt; (short form).">Dépile la valeur actuelle du haut de la pile d'évaluation et la stocke dans la liste de variables locales à <paramref name="index" /> (forme abrégée).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary vsli:raw="Copies a value of a specified type from the evaluation stack into a supplied memory address.">Copie une valeur d'un type spécifié de la pile d'évaluation vers une adresse mémoire fournie.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary vsli:raw="Replaces the value of a static field with a value from the evaluation stack.">Remplace la valeur d’un champ static par une valeur de la pile d’évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary vsli:raw="Subtracts one value from another and pushes the result onto the evaluation stack.">Soustrait une valeur d'une autre et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary vsli:raw="Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.">Soustrait une valeur entière d'une autre, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary vsli:raw="Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.">Soustrait une valeur entière non signée d'une autre, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary vsli:raw="Implements a jump table.">Implémente un tableau de saut.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary vsli:raw="Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.">Exécute une instruction d'appel de méthode suffixée afin que le frame de pile de la méthode actuelle soit supprimé avant cette exécution.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary vsli:raw="Throws the exception object currently on the evaluation stack.">Lève l'objet exception actuellement situé dans la pile d'évaluation.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary vsli:raw="Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following &lt;see langword=&quot;ldind&quot; /&gt;, &lt;see langword=&quot;stind&quot; /&gt;, &lt;see langword=&quot;ldfld&quot; /&gt;, &lt;see langword=&quot;stfld&quot; /&gt;, &lt;see langword=&quot;ldobj&quot; /&gt;, &lt;see langword=&quot;stobj&quot; /&gt;, &lt;see langword=&quot;initblk&quot; /&gt;, or &lt;see langword=&quot;cpblk&quot; /&gt; instruction.">Indique qu'une adresse actuellement située en haut de la pile d'évaluation peut ne pas être alignée avec la taille naturelle de l'instruction <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" /> ou <see langword="cpblk" /> qui suit immédiatement.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary vsli:raw="Converts the boxed representation of a value type to its unboxed form.">Convertit la représentation boxed d'un type de valeur dans sa forme unboxed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
      <summary vsli:raw="Converts the boxed representation of a type specified in the instruction to its unboxed form.">Convertit la représentation boxed d'un type spécifié dans l'instruction en forme unboxed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary vsli:raw="Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.">Spécifie qu'une adresse actuellement située en haut de la pile d'évaluation peut être volatile et que les résultats de la lecture de cet emplacement ne peuvent pas être mis en cache ou que plusieurs magasins situés à cet emplacement ne peuvent pas être supprimés.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary vsli:raw="Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.">Calcule l'opération de bits XOR des deux premières valeurs de la pile d'évaluation en exécutant un push du résultat dans la pile d'évaluation.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Returns true or false if the supplied opcode takes a single byte argument.">Retourne true ou false si l’opcode fourni utilise un argument à octet unique.</summary>
      <param name="inst" vsli:raw="An instance of an Opcode object.">Instance d'un objet Opcode.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> ou <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary vsli:raw="Describes the types of the Microsoft intermediate language (MSIL) instructions.">Décrit les types d'instructions MSIL (Microsoft Intermediate Language).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Annotation">
      <summary vsli:raw="This enumerator value is reserved and should not be used.">Cette valeur de l'énumérateur est réservée et ne doit pas être utilisée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary vsli:raw="These are Microsoft intermediate language (MSIL) instructions that are used as a synonym for other MSIL instructions. For example, &lt;see langword=&quot;ldarg.0&quot; /&gt; represents the &lt;see langword=&quot;ldarg&quot; /&gt; instruction with an argument of 0.">Il s'agit d'instructions MSIL (Microsoft Intermediate Language) utilisées pour représenter d'autres instructions MSIL. Par exemple, <see langword="ldarg.0" /> représente l'instruction <see langword="ldarg" /> avec un argument de 0.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary vsli:raw="Describes a reserved Microsoft intermediate language (MSIL) instruction.">Décrit une instruction MSIL (Microsoft Intermediate Language) réservée.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary vsli:raw="Describes a Microsoft intermediate language (MSIL) instruction that applies to objects.">Décrit une instruction MSIL qui s'applique aux objets.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary vsli:raw="Describes a prefix instruction that modifies the behavior of the following instruction.">Décrit une instruction de préfixe qui modifie le comportement de l'instruction suivante.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary vsli:raw="Describes a built-in instruction.">Décrit une instruction intégrée.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary vsli:raw="Describes the operand type of Microsoft intermediate language (MSIL) instruction.">Décrit le type d'opérande d'une instruction MSIL (Microsoft Intermediate Language).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary vsli:raw="The operand is a 32-bit integer branch target.">L'opérande est une cible de branchement entier 32 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary vsli:raw="The operand is a 32-bit metadata token.">L'opérande est un jeton de métadonnées 32 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary vsli:raw="The operand is a 32-bit integer.">L'opérande est un entier 32 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary vsli:raw="The operand is a 64-bit integer.">L’opérande est un entier 64 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary vsli:raw="The operand is a 32-bit metadata token.">L'opérande est un jeton de métadonnées 32 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary vsli:raw="No operand.">Aucun opérande.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlinePhi">
      <summary vsli:raw="The operand is reserved and should not be used.">L'opérande est réservé et ne doit pas être utilisé.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary vsli:raw="The operand is a 64-bit IEEE floating point number.">L'opérande est un nombre à virgule flottante IEEE 64 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary vsli:raw="The operand is a 32-bit metadata signature token.">L'opérande est un jeton de signature de métadonnées 32 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary vsli:raw="The operand is a 32-bit metadata string token.">L'opérande est un jeton de chaîne de métadonnées 32 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary vsli:raw="The operand is the 32-bit integer argument to a switch instruction.">L'opérande est l'argument entier 32 bits d'une instruction switch.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary vsli:raw="The operand is a &lt;see langword=&quot;FieldRef&quot; /&gt;, &lt;see langword=&quot;MethodRef&quot; /&gt;, or &lt;see langword=&quot;TypeRef&quot; /&gt; token.">L'opérande est un jeton <see langword="FieldRef" />, <see langword="MethodRef" /> ou <see langword="TypeRef" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary vsli:raw="The operand is a 32-bit metadata token.">L'opérande est un jeton de métadonnées 32 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary vsli:raw="The operand is 16-bit integer containing the ordinal of a local variable or an argument.">L'opérande est un entier 16 bits contenant le nombre ordinal d'une variable locale ou d'un argument.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary vsli:raw="The operand is an 8-bit integer branch target.">L'opérande est une cible de branchement entier 8 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary vsli:raw="The operand is an 8-bit integer.">L'opérande est un entier 8 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary vsli:raw="The operand is a 32-bit IEEE floating point number.">L’opérande est un nombre à virgule flottante IEEE 32 bits.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary vsli:raw="The operand is an 8-bit integer containing the ordinal of a local variable or an argumenta.">L'opérande est un entier 8 bits contenant le nombre ordinal d'une variable locale ou d'un argument.</summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary vsli:raw="Specifies one of two factors that determine the memory alignment of fields when a type is marshaled.">Spécifie l'un des deux facteurs qui déterminent l'alignement de mémoire des champs lorsqu'un type est marshalé.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary vsli:raw="The packing size is 1 byte.">La taille de compactage est égale à 1 octet.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
      <summary vsli:raw="The packing size is 128 bytes.">La taille de compactage est égale à 128 octets.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary vsli:raw="The packing size is 16 bytes.">La taille de compression est égale à 16 octets.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary vsli:raw="The packing size is 2 bytes.">La taille de compression est égale à 2 octets.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
      <summary vsli:raw="The packing size is 32 bytes.">La taille de compression est égale à 32 octets.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary vsli:raw="The packing size is 4 bytes.">La taille de compression est égale à 4 octets.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
      <summary vsli:raw="The packing size is 64 bytes.">La taille de compression est égale à 64 octets.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary vsli:raw="The packing size is 8 bytes.">La taille de compression est égale à 8 octets.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary vsli:raw="The packing size is not specified.">La taille de compactage n'est pas spécifiée.</summary>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary vsli:raw="Describes how values are pushed onto a stack or popped off a stack.">Décrit comment les valeurs font l'objet d'un push sur une pile ou sont dépilés.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary vsli:raw="No values are popped off the stack.">Aucune valeur n'est dépilée de la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary vsli:raw="Pops one value off the stack.">Dépile une valeur de la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary vsli:raw="Pops 1 value off the stack for the first operand, and 1 value of the stack for the second operand.">Dépile une valeur de la pile pour les premier et deuxième opérandes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack.">Dépile un entier 32 bits de la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a value off the stack for the second operand.">Dépile un entier 32 bits de la pile pour les premier et deuxième opérandes, respectivement.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 32-bit integer off the stack for the second operand.">Dépile un entier 32 bits de la pile pour les premier et deuxième opérandes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, a 32-bit integer off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">Dépile un entier 32 bits de la pile pour le premier, le deuxième et le troisième opérande.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 64-bit integer off the stack for the second operand.">Dépile un entier 32 bits de la pile pour le premier opérande et un entier 64 bits pour le deuxième opérande.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 32-bit floating point number off the stack for the second operand.">Dépile un entier 32 bits et un nombre à virgule flottante 32 bits de la pile pour les premier et deuxième opérandes, respectivement.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 64-bit floating point number off the stack for the second operand.">Dépile un entier 32 bits de la pile pour le premier opérande et un nombre à virgule flottante 64 bits pour le deuxième opérande.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary vsli:raw="Pops a reference off the stack.">Dépile une référence de la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary vsli:raw="Pops a reference off the stack for the first operand, and a value off the stack for the second operand.">Dépile une référence et une valeur de la pile pour les premier et deuxième opérandes, respectivement.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary vsli:raw="Pops a reference off the stack for the first operand, and a 32-bit integer off the stack for the second operand.">Dépile une référence et un entier 32 bits de la pile pour les premier et deuxième opérandes, respectivement.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">Dépile une réference de la pile pour le premier opérande, une valeur pour le deuxième opérande et un entier 32 bits pour le troisième opérande.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a value off the stack for the third operand.">Dépile une référence de la pile pour le premier opérande et une valeur pour les deuxième et troisième opérandes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit integer off the stack for the third operand.">Dépile une référence de la pile pour le premier opérande, une valeur pour le deuxième opérande et un entier 64 bits pour le troisième opérande.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">Dépile une réference de la pile pour le premier opérande, une valeur pour le deuxième opérande et un entier 32 bits pour le troisième opérande.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit floating point number off the stack for the third operand.">Dépile une référence de la pile pour le premier opérande, une valeur pour le deuxième opérande et un nombre à virgule flottante 64 bits pour le troisième opérande.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a reference off the stack for the third operand.">Dépile une référence de la pile pour le premier opérande, une valeur pour le deuxième opérande et une référence pour le troisième opérande.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary vsli:raw="No values are pushed onto the stack.">Aucune valeur ne fait l'objet d'un push sur la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary vsli:raw="Pushes one value onto the stack.">Exécute un push sur une valeur sur la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary vsli:raw="Pushes 1 value onto the stack for the first operand, and 1 value onto the stack for the second operand.">Exécute un push sur une valeur sur la pile pour le premier et le deuxième opérande.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary vsli:raw="Pushes a 32-bit integer onto the stack.">Exécute un push sur un entier 32 bits sur la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary vsli:raw="Pushes a 64-bit integer onto the stack.">Exécute un envoi (push) d’un entier 64 bits sur la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary vsli:raw="Pushes a 32-bit floating point number onto the stack.">Exécute un push sur un nombre à virgule flottante 32 bits sur la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary vsli:raw="Pushes a 64-bit floating point number onto the stack.">Exécute un envoi (push) d’un nombre à virgule flottante 64 bits sur la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary vsli:raw="Pushes a reference onto the stack.">Exécute un push sur une référence sur la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary vsli:raw="Pops a variable off the stack.">Dépile une référence de la pile.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary vsli:raw="Pushes a variable onto the stack.">Exécute un push sur une référence sur la pile.</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.Serialization.Xml</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.DataContractResolver">
      <summary vsli:raw="Provides a mechanism for dynamically mapping types to and from &lt;see langword=&quot;xsi:type&quot; /&gt; representations during serialization and deserialization.">提供一种机制，用于在序列化和反序列化期间在类型和 <see langword="xsi:type" /> 表示形式之间动态进行相互映射。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractResolver.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractResolver&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary vsli:raw="Override this method to map the specified &lt;see langword=&quot;xsi:type&quot; /&gt; name and namespace to a data contract type during deserialization.">在反序列化期间，重写此方法以将指定的 <see langword="xsi:type" /> 名称和命名空间映射到数据协定类型。</summary>
      <param name="typeName" vsli:raw="The &lt;see langword=&quot;xsi:type&quot; /&gt; name to map.">要映射的 <see langword="xsi:type" /> 名称。</param>
      <param name="typeNamespace" vsli:raw="The &lt;see langword=&quot;xsi:type&quot; /&gt; namespace to map.">要映射的 <see langword="xsi:type" /> 命名空间。</param>
      <param name="declaredType" vsli:raw="The type declared in the data contract.">在数据协定中声明的类型。</param>
      <param name="knownTypeResolver" vsli:raw="The known type resolver.">已知类型的解析器。</param>
      <returns vsli:raw="The type the &lt;see langword=&quot;xsi:type&quot; /&gt; name and namespace is mapped to.">
        <see langword="xsi:type" /> 名称和命名空间映射到的类型。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Override this method to map a data contract type to an &lt;see langword=&quot;xsi:type&quot; /&gt; name and namespace during serialization.">在序列化期间，重写此方法以将数据协定类型映射到 <see langword="xsi:type" /> 名称和命名空间。</summary>
      <param name="type" vsli:raw="The type to map.">要映射的类型。</param>
      <param name="declaredType" vsli:raw="The type declared in the data contract.">在数据协定中声明的类型。</param>
      <param name="knownTypeResolver" vsli:raw="The known type resolver.">已知类型的解析器。</param>
      <param name="typeName" vsli:raw="The xsi:type name.">xsi:type 名称。</param>
      <param name="typeNamespace" vsli:raw="The xsi:type namespace.">xsi:type 命名空间。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if mapping succeeded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果映射成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractSerializer">
      <summary vsli:raw="Serializes and deserializes an instance of a type into an XML stream or document using a supplied data contract. This class cannot be inherited.">使用提供的数据协定，将类型实例序列化和反序列化为 XML 流或文档。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type.">初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。</summary>
      <param name="type" vsli:raw="The type of the instances that are serialized or deserialized.">序列化或反序列化的实例的类型。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type, and a collection of known types that may be present in the object graph.">初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象以及可在对象图中呈现的已知类型的集合。</summary>
      <param name="type" vsli:raw="The type of the instances that are serialized or deserialized.">序列化或反序列化的实例的类型。</param>
      <param name="knownTypes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the types that may be present in the object graph.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的一个 <see cref="T:System.Type" />，其中包含可在对象图中呈现的类型。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Runtime.Serialization.DataContractSerializerSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type and settings.">初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型和设置的对象。</summary>
      <param name="type" vsli:raw="The type of the instance to serialize or deserialize.">被序列化或反序列化的实例类型。</param>
      <param name="settings" vsli:raw="The serializer settings.">序列化程序设置。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type using the supplied XML root element and namespace.">使用提供的 XML 根元素和命名空间初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。</summary>
      <param name="type" vsli:raw="The type of the instances that are serialized or deserialized.">序列化或反序列化的实例的类型。</param>
      <param name="rootName" vsli:raw="The name of the XML element that encloses the content to serialize or deserialize.">XML 元素的名称，该元素包含要序列化或反序列化的内容。</param>
      <param name="rootNamespace" vsli:raw="The namespace of the XML element that encloses the content to serialize or deserialize.">XML 元素的命名空间，该元素包含要序列化或反序列化的内容。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two string parameters as well as a list of known types that may be present in the object graph.">初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还在两个字符串参数中指定根 XML 元素和命名空间，并指定了可在对象图中呈现的已知类型的列表。</summary>
      <param name="type" vsli:raw="The type of the instances that are serialized or deserialized.">序列化或反序列化的实例的类型。</param>
      <param name="rootName" vsli:raw="The root element name of the content.">内容的根元素名称。</param>
      <param name="rootNamespace" vsli:raw="The namespace of the root element.">根元素的命名空间。</param>
      <param name="knownTypes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the types that may be present in the object graph.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的一个 <see cref="T:System.Type" />，其中包含可在对象图中呈现的类型。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type using the XML root element and namespace specified through the parameters of type &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;.">使用通过类型为 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 的参数指定的 XML 根元素和命名空间初始化 <see cref="T:System.Xml.XmlDictionaryString" /> 类的新实例，以便序列化或反序列化指定类型的对象。</summary>
      <param name="type" vsli:raw="The type of the instances that are serialized or deserialized.">序列化或反序列化的实例的类型。</param>
      <param name="rootName" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that contains the root element name of the content.">一个包含内容的根元素名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="rootNamespace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that contains the namespace of the root element.">一个包含根元素的命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; parameters as well as a list of known types that may be present in the object graph.">初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还在两个 <see cref="T:System.Xml.XmlDictionaryString" /> 参数中指定根 XML 元素和命名空间，并指定了可在对象图中呈现的已知类型的列表。</summary>
      <param name="type" vsli:raw="The type of the instances that are serialized or deserialized.">序列化或反序列化的实例的类型。</param>
      <param name="rootName" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that contains the root element name of the content.">一个包含内容的根元素名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="rootNamespace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that contains the namespace of the root element.">一个包含根元素的命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="knownTypes" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the known types that may be present in the object graph.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的一个 <see cref="T:System.Type" />，其中包含可在对象图中呈现的已知类型。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; is positioned on an object that can be deserialized.">确定是否将 <see cref="T:System.Xml.XmlDictionaryReader" /> 定位在可反序列化的对象上。</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; used to read the XML stream.">一个用于读取 XML 流的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is at the start element of the stream to read; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果读取器位于要读取的流的开始元素处，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is positioned on an object that can be deserialized.">确定是否将 <see cref="T:System.Xml.XmlReader" /> 定位在可反序列化的对象上。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML stream.">用于读取 XML 流的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is at the start element of the stream to read; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果读取器位于要读取的流的开始元素处，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary vsli:raw="Reads the XML stream with an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value.">使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取 XML 流并返回反序列化的对象，并且还指定在读取其值之前是否进行检查以验证对象名称。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; used to read the XML stream.">用于读取 XML 流的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="verifyObjectName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">要检查对象名称是否与构造函数中提供的根名称值相对应，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;paramref name=&quot;verifyObjectName&quot; /&gt; parameter is set to &lt;see langword=&quot;true&quot; /&gt;, and the element name and namespace do not correspond to the values set in the constructor.">如果将 <paramref name="verifyObjectName" /> 参数设置为 <see langword="true" />，则元素名称和命名空间与构造函数中设置的值不对应。</exception>
      <returns vsli:raw="The deserialized object.">已反序列化的对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean,System.Runtime.Serialization.DataContractResolver)">
      <summary vsli:raw="Reads an XML document or document stream and returns the deserialized object.  The method includes a parameter to specify whether the object name is verified is validated, and a resolver for mapping &lt;see langword=&quot;xsi:type&quot; /&gt; declarations at runtime.">读取一个 XML 文档或文档流，并返回反序列化的对象。  此方法包括用于指定是否验证对象名称的参数和用于在运行时映射 <see langword="xsi:type" /> 声明的解析器。</summary>
      <param name="reader" vsli:raw="The XML reader used to read the content.">用于读取内容的 XML 阅读器。</param>
      <param name="verifyObjectName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to verify the object name; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要验证对象名称，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="dataContractResolver" vsli:raw="An implementation of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractResolver&quot; /&gt; to map &lt;see langword=&quot;xsi:type&quot; /&gt; declarations to data contract types.">用于将 <see langword="xsi:type" /> 声明映射到数据协定类型的 <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 的实现。</param>
      <returns vsli:raw="The deserialized object.">已反序列化的对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader)">
      <summary vsli:raw="Reads the XML stream with an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and returns the deserialized object.">使用 <see cref="T:System.Xml.XmlReader" /> 读取 XML 流，并返回反序列化的对象。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML stream.">用于读取 XML 流的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns vsli:raw="The deserialized object.">已反序列化的对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="Reads the XML stream with an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value.">使用 <see cref="T:System.Xml.XmlReader" /> 读取 XML 流并返回反序列化的对象，并且还指定在读取其值之前是否进行检查以验证对象名称。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML stream.">用于读取 XML 流的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="verifyObjectName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">要检查对象名称是否与构造函数中提供的根名称值相对应，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;paramref name=&quot;verifyObjectName&quot; /&gt; parameter is set to &lt;see langword=&quot;true&quot; /&gt;, and the element name and namespace do not correspond to the values set in the constructor.">如果将 <paramref name="verifyObjectName" /> 参数设置为 <see langword="true" />，则元素名称和命名空间与构造函数中设置的值不对应。</exception>
      <returns vsli:raw="The deserialized object.">已反序列化的对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary vsli:raw="Writes the closing XML element using an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入结束 XML 元素。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the stream.">用于写入流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">正在写入的实例出现问题。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary vsli:raw="Writes the closing XML element using an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlWriter" /> 写入结束 XML 元素。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the stream.">用于写入流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">正在写入的实例出现问题。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object,System.Runtime.Serialization.DataContractResolver)">
      <summary vsli:raw="Writes all the object data (starting XML element, content, and enclosing element) to an XML document or stream  using the specified XmlDictionaryWriter. The method includes a resolver for mapping &lt;see langword=&quot;xsi:type&quot; /&gt; declarations at runtime.">使用指定的 XmlDictionaryWriter 将所有对象数据（开始 XML 元素、内容和结束元素）写入 XML 文档或流。 此方法包含用于在运行时映射 <see langword="xsi:type" /> 声明的解析器。</summary>
      <param name="writer" vsli:raw="An XmlDictionaryWriter used to write the content to the XML document or stream.">用于将内容写入 XML 文档或流的 XmlDictionaryWriter。</param>
      <param name="graph" vsli:raw="The object that contains the content to write.">包含要写入的内容的对象。</param>
      <param name="dataContractResolver" vsli:raw="An implementation of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractResolver&quot; /&gt; used to map &lt;see langword=&quot;xsi:type&quot; /&gt; declarations to known data contracts.">用于将 <see langword="xsi:type" /> 声明映射到已知数据协定的 <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 的实现。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Writes all the object data (starting XML element, content, and closing element) to an XML document or stream with an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlWriter" /> 将所有对象数据（开始 XML 元素、内容和结束元素）写入 XML 文档或流。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML document or stream.">用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph" vsli:raw="The object that contains the data to write to the stream.">包含要写入流的数据的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">正在写入的实例出现问题。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary vsli:raw="Writes the XML content using an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入 XML 内容。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the stream.">用于写入流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph" vsli:raw="The object to write to the stream.">要写入到流的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">正在写入的实例出现问题。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Writes the XML content using an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlWriter" /> 写入 XML 内容。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the stream.">用于写入流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph" vsli:raw="The object to write to the stream.">要写入到流的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">正在写入的实例出现问题。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary vsli:raw="Writes the opening XML element using an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入开始 XML 元素。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the XML start element.">用于写入 XML 开始元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph" vsli:raw="The object to write.">要写入的对象。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Writes the opening XML element using an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlWriter" /> 写入开始 XML 元素。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML start element.">用于写入 XML 开始元素的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph" vsli:raw="The object to write.">要写入的对象。</param>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.DataContractResolver">
      <summary vsli:raw="Gets the component used to dynamically map &lt;see langword=&quot;xsi:type&quot; /&gt; declarations to known contract types.">获取用于动态将 <see langword="xsi:type" /> 声明映射到已知协定类型的组件。</summary>
      <returns vsli:raw="An implementation of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractResolver&quot; /&gt; class.">
        <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 类的一个实现。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.IgnoreExtensionDataObject">
      <summary vsli:raw="Gets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.">获取一个值，指定在对类进行序列化或反序列化时是否忽略类扩展提供的数据。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to omit the extension data; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要省略扩展数据，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.KnownTypes">
      <summary vsli:raw="Gets a collection of types that may be present in the object graph serialized using this instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializer&quot; /&gt;.">获取一个类型集合，这些类型可能出现在使用此 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 实例序列化的对象图中。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; that contains the expected types passed in as known types to the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializer&quot; /&gt; constructor.">一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含作为已知类型传入 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 构造函数的预期类型。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph">
      <summary vsli:raw="Gets the maximum number of items in an object graph to serialize or deserialize.">获取对象图中要序列化或反序列化的最大项数。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The number of items exceeds the maximum value.">项数超出了最大值。</exception>
      <returns vsli:raw="The maximum number of items to serialize or deserialize. The default is &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">要序列化或反序列化的最大项数。 默认值为 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences">
      <summary vsli:raw="Gets a value that specifies whether to use non-standard XML constructs to preserve object reference data.">获取一个值，指定是否使用非标准的 XML 结构来保留对象引用数据。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to keep the references; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要保留引用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.SerializeReadOnlyTypes">
      <summary vsli:raw="Gets a value that specifies whether read-only types are serialized.">获取指定只读类型是否序列化的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only types are serialized; &lt;see langword=&quot;false&quot; /&gt; if all types are serialized.">如果序列化只读类型，则为 <see langword="true" />；如果序列化所有类型，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractSerializerExtensions">
      <summary vsli:raw="Extends the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializer&quot; /&gt; class by providing methods for setting and getting an &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializationSurrogateProvider&quot; /&gt;.">通过提供用于设置和获取 <see cref="T:System.Runtime.Serialization.ISerializationSurrogateProvider" /> 的方法来扩展 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializerExtensions.GetSerializationSurrogateProvider(System.Runtime.Serialization.DataContractSerializer)">
      <summary vsli:raw="Returns the surrogate serialization provider for this serializer.">返回用于此序列化程序的代理项序列化提供程序。</summary>
      <param name="serializer" vsli:raw="The serializer which is being surrogated.">正在作为代理项的序列化程序。</param>
      <returns vsli:raw="The surrogate serializer.">代理项序列化程序。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializerExtensions.SetSerializationSurrogateProvider(System.Runtime.Serialization.DataContractSerializer,System.Runtime.Serialization.ISerializationSurrogateProvider)">
      <summary vsli:raw="Specifies a surrogate serialization provider for this &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializer&quot; /&gt;.">指定用于此 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 的代理项序列化提供程序。</summary>
      <param name="serializer" vsli:raw="The serializer which is being surrogated.">正在作为代理项的序列化程序。</param>
      <param name="provider" vsli:raw="The surrogate serialization provider.">代理项序列化提供程序。</param>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractSerializerSettings">
      <summary vsli:raw="Specifies data contract serializer settings.">指定数据协定序列化程序设置。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializerSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractSerializerSettings&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializerSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.DataContractResolver">
      <summary vsli:raw="Gets or sets the component used to dynamically map xsi:type declarations to known contract types.">获取或设置用于动态将 xsi:type 声明映射到已知协定类型的组件。</summary>
      <returns vsli:raw="The component used to dynamically map xsi:type declarations to known contract types.">用于动态将 xsi:type 声明映射到已知协定类型的组件。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.IgnoreExtensionDataObject">
      <summary vsli:raw="Gets or sets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.">获取或设置一个值，该值指定在对类进行序列化或反序列化时是否要忽略由该类扩展提供的数据。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore data supplied by an extension of the class when the class is being serialized or deserialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在对该类进行序列化或反序列化时忽略由该类的扩展提供的数据，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.KnownTypes">
      <summary vsli:raw="Gets or sets a collection of types that may be present in the object graph serialized using this instance of the DataContractSerializerSettings.">获取或设置可能存在于通过使用此实例 DataContractSerializerSettings 所序列化的对象关系图中的类型集合。</summary>
      <returns vsli:raw="A collection of types that may be present in the object graph serialized using this instance of the DataContractSerializerSettings.">一个类型集合，这些类型可能出现在使用此 DataContractSerializerSettings 实例序列化的对象图中。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.MaxItemsInObjectGraph">
      <summary vsli:raw="Gets or sets the maximum number of items in an object graph to serialize or deserialize.">获取或设置一个要序列化或反序列化的对象图中的最大项数。</summary>
      <returns vsli:raw="The maximum number of items in an object graph to serialize or deserialize.">要序列化或反序列化的对象图中的最大项数。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.PreserveObjectReferences">
      <summary vsli:raw="Gets or sets a value that specifies whether to use non-standard XML constructs to preserve object reference data.">获取或设置一个值，该值指定是否使用非标准的 XML 构造来保留对象引用数据。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use non-standard XML constructs to preserve object reference data; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">要使用非标准的 XML 结构来保留对象引用数据，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.RootName">
      <summary vsli:raw="Gets or sets the root name of the selected object.">获取或设置选定对象的根名称。</summary>
      <returns vsli:raw="The root name of the selected object.">选中对象的根名称。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.RootNamespace">
      <summary vsli:raw="Gets or sets the root namespace for the specified object.">获取或设置指定对象的根命名空间。</summary>
      <returns vsli:raw="The root namespace for the specified object.">指定对象的根命名空间。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.SerializeReadOnlyTypes">
      <summary vsli:raw="Gets or sets a value that specifies whether to serialize read only types.">获取或设置指定是否序列化只读类型的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to serialize read only types; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">仅序列化读取类型，则为 <see langword="true" />；否则 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ExportOptions">
      <summary vsli:raw="Represents the options that can be set for an &lt;see cref=&quot;T:System.Runtime.Serialization.XsdDataContractExporter&quot; /&gt;.">表示可为 <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> 设置的选项。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ExportOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.ExportOptions&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.Serialization.ExportOptions" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.ExportOptions.KnownTypes">
      <summary vsli:raw="Gets the collection of types that may be encountered during serialization or deserialization.">获取在序列化或反序列化过程中可能会遇到的类型的集合。</summary>
      <returns vsli:raw="A &lt;see langword=&quot;KnownTypes&quot; /&gt; collection that contains types that may be encountered during serialization or deserialization. XML schema representations are exported for all the types specified in this collection by the &lt;see cref=&quot;T:System.Runtime.Serialization.XsdDataContractExporter&quot; /&gt;.">一个 <see langword="KnownTypes" /> 集合，它包含在序列化或反序列化过程中可能会遇到的类型。 将为此集合中由 <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> 指定的所有类型导出 XML 架构表示形式。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ExtensionDataObject">
      <summary vsli:raw="Stores data from a versioned data contract that has been extended by adding new members.">存储已经通过添加新成员扩展的版本化数据协定中的数据。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.IExtensibleDataObject">
      <summary vsli:raw="Provides a data structure to store extra data encountered by the &lt;see cref=&quot;T:System.Runtime.Serialization.XmlObjectSerializer&quot; /&gt; during deserialization of a type marked with the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute.">提供一个数据结构，用于存储 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 在反序列化一个用 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 属性标记的类型期间遇到的额外数据。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.IExtensibleDataObject.ExtensionData">
      <summary vsli:raw="Gets or sets the structure that contains extra data.">获取或设置包含额外数据的结构。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Runtime.Serialization.ExtensionDataObject&quot; /&gt; that contains data that is not recognized as belonging to the data contract.">一个 <see cref="T:System.Runtime.Serialization.ExtensionDataObject" />，该值包含未标识为属于数据约定的数据。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.XmlObjectSerializer">
      <summary vsli:raw="Provides the base class used to serialize objects as XML streams or documents. This class is abstract.">提供用于将对象序列化为 XML 流或文档的基类。 此类为抽象类。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.XmlObjectSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary vsli:raw="Gets a value that specifies whether the &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; is positioned over an XML element that can be read.">获取一个值，该值指定 <see cref="T:System.Xml.XmlDictionaryReader" /> 是否定位于可读取的 XML 元素上。</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; used to read the XML stream or document.">一个用于读取 XML 流或文档的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can read the data; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果读取器可读取数据则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary vsli:raw="Gets a value that specifies whether the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is positioned over an XML element that can be read.">获取一个值，该值指定 <see cref="T:System.Xml.XmlReader" /> 是否定位于可读取的 XML 元素上。</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML stream or document.">一个用于读取 XML 流或文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned over the starting element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果读取器定位于开始元素上，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.IO.Stream)">
      <summary vsli:raw="Reads the XML stream or document with a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; and returns the deserialized object.">使用 <see cref="T:System.IO.Stream" /> 读取 XML 流或文档，然后返回反序列化的对象。</summary>
      <param name="stream" vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; used to read the XML stream or document.">用于读取 XML 流或文档的 <see cref="T:System.IO.Stream" />。</param>
      <returns vsli:raw="The deserialized object.">已反序列化的对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary vsli:raw="Reads the XML document or stream with an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; and returns the deserialized object.">使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取 XML 文档或流，然后返回反序列化的对象。</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; used to read the XML document.">一个用于读取 XML 文档的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <returns vsli:raw="The deserialized object.">已反序列化的对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary vsli:raw="Reads the XML stream or document with an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; and returns the deserialized object; it also enables you to specify whether the serializer can read the data before attempting to read it.">使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取 XML 流或文档并返回反序列化的对象；它还可用于在序列化器尝试读取数据之前指定它是否可以读取数据。</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; used to read the XML document.">一个用于读取 XML 文档的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="verifyObjectName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; otherwise, &lt;see langword=&quot;false&quot; /&gt; to skip the verification.">如果为 <see langword="true" />，则检查外层 XML 元素名和命名空间是否对应于根名称和根命名空间；否则为 <see langword="false" /> 以跳过验证。</param>
      <returns vsli:raw="The deserialized object.">已反序列化的对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader)">
      <summary vsli:raw="Reads the XML document or stream with an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and returns the deserialized object.">使用 <see cref="T:System.Xml.XmlReader" /> 读取 XML 文档或流，然后返回反序列化的对象。</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML stream or document.">一个用于读取 XML 流或文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns vsli:raw="The deserialized object.">已反序列化的对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="Reads the XML document or stream with an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and returns the deserialized object; it also enables you to specify whether the serializer can read the data before attempting to read it.">使用 <see cref="T:System.Xml.XmlReader" /> 读取 XML 文档或流并返回反序列化的对象；它还可用于在序列化器尝试读取数据之前指定它是否可以读取数据。</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML document or stream.">用于读取 XML 文档或流的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="verifyObjectName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; &lt;see langword=&quot;false&quot; /&gt; to skip the verification.">如果为 <see langword="true" />，则检查外层 XML 元素名和命名空间是否对应于根名称和根命名空间；若为 <see langword="false" /> 则跳过验证。</param>
      <returns vsli:raw="The deserialized object.">已反序列化的对象。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary vsli:raw="Writes the end of the object data as a closing XML element to the XML document or stream with an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 将对象数据的结束作为结束 XML 元素写入 XML 文档或流。</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the XML document or stream.">一个用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="the type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="there is a problem with the instance being serialized.">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="the maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary vsli:raw="Writes the end of the object data as a closing XML element to the XML document or stream with an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlWriter" /> 将对象数据的结束作为结束 XML 元素写入 XML 文档或流。</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML document or stream.">一个用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="the type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="there is a problem with the instance being serialized.">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="the maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary vsli:raw="Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">使用指定的 <see cref="T:System.IO.Stream" /> 将对象的完整内容（开始、内容和结束）写入 XML 文档或流。</summary>
      <param name="stream" vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; used to write the XML document or stream.">用于写入 XML 文档或流的 <see cref="T:System.IO.Stream" />。</param>
      <param name="graph" vsli:raw="The object that contains the data to write to the stream.">包含要写入流的数据的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="the type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="there is a problem with the instance being serialized.">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="the maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary vsli:raw="Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 将对象的完整内容（开始、内容和结束）写入 XML 文档或流。</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the content to the XML document or stream.">用于将内容写入 XML 文档或流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph" vsli:raw="The object that contains the content to write.">包含要写入的内容的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="the type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="there is a problem with the instance being serialized.">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="the maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlWriter" /> 将对象的完整内容（开始、内容和结束）写入 XML 文档或流。</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML document or stream.">一个用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph" vsli:raw="The object that contains the content to write.">包含要写入的内容的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="the type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="there is a problem with the instance being serialized.">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="the maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary vsli:raw="Writes only the content of the object to the XML document or stream using the specified &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 仅将对象的内容写入 XML 文档或流。</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the XML document or stream.">一个用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph" vsli:raw="The object that contains the content to write.">包含要写入的内容的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="the type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="there is a problem with the instance being serialized.">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="the maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Writes only the content of the object to the XML document or stream with the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlWriter" /> 仅将对象的内容写入 XML 文档或流。</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML document or stream.">一个用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph" vsli:raw="The object that contains the content to write.">包含要写入的内容的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="the type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="there is a problem with the instance being serialized.">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="the maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary vsli:raw="Writes the start of the object's data as an opening XML element using the specified &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 将对象数据的开始作为开始 XML 元素写入。</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the XML document.">用于写入 XML 文档的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph" vsli:raw="The object to serialize.">要序列化的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="the type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="there is a problem with the instance being serialized.">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="the maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Writes the start of the object's data as an opening XML element using the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlWriter" /> 将对象数据的开始作为开始 XML 元素写入。</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML document.">用于写入 XML 文档的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph" vsli:raw="The object to serialize.">要序列化的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="the type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="there is a problem with the instance being serialized.">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="the maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.XmlSerializableServices">
      <summary vsli:raw="Contains methods for reading and writing XML.">包含用于读取和编写 XML 的方法。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XmlSerializableServices.AddDefaultSchema(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Generates a default schema type given the specified type name and adds it to the specified schema set.">生成具有指定类型名称的默认架构类型，并将它添加到指定的架构集中。</summary>
      <param name="schemas" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; to add the generated schema type to.">要向其添加生成的架构类型的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <param name="typeQName" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; that specifies the type name to assign the schema to.">一个 <see cref="T:System.Xml.XmlQualifiedName" />，它指定要向其分配架构的类型名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;schemas&quot; /&gt; or &lt;paramref name=&quot;typeQName&quot; /&gt; argument is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemas" /> 或 <paramref name="typeQName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlSerializableServices.ReadNodes(System.Xml.XmlReader)">
      <summary vsli:raw="Reads a set of XML nodes from the specified reader and returns the result.">从指定的读取器读取 XML 节点集，并返回结果。</summary>
      <param name="xmlReader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used for reading.">一个用于执行读取操作的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;xmlReader&quot; /&gt; argument is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="While reading, a &lt;see langword=&quot;null&quot; /&gt; node was encountered.">读取时遇到 <see langword="null" /> 节点。</exception>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNode" /> 类型的数组。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XmlSerializableServices.WriteNodes(System.Xml.XmlWriter,System.Xml.XmlNode[])">
      <summary vsli:raw="Writes the supplied nodes using the specified writer.">使用指定的编写器编写提供的节点。</summary>
      <param name="xmlWriter" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used for writing.">一个用于执行编写操作的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="nodes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to write.">一个要编写的 <see cref="T:System.Xml.XmlNode" /> 类型数组。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;xmlWriter&quot; /&gt; argument is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlWriter" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.XPathQueryGenerator">
      <summary vsli:raw="When given a class representing a data contract, and metadata representing a member of the contract, produces an XPath query for the member.">给定表示数据协定的类和表示此协定的某个成员的元数据时，会为该成员生成 Xpath 查询。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer(System.Type,System.Reflection.MemberInfo[],System.Text.StringBuilder,System.Xml.XmlNamespaceManager@)">
      <summary vsli:raw="Creates an XPath from a data contract using the specified contract data type, array of metadata elements, the top level element, and namespaces.">通过使用指定的协定数据类型、元数据元素数组、顶级元素和命名空间，根据数据协定创建 XPath。</summary>
      <param name="type" vsli:raw="The type that represents a data contract.">表示数据协定的类型。</param>
      <param name="pathToMember" vsli:raw="The metadata, generated using the &lt;see cref=&quot;Overload:System.Type.GetMember&quot; /&gt; method of the &lt;see cref=&quot;T:System.Type&quot; /&gt; class, that points to the specific data member used to generate the query.">元数据，是使用 <see cref="Overload:System.Type.GetMember" /> 类的 <see cref="T:System.Type" /> 方法生成，指向用于生成此查询的特定数据成员。</param>
      <param name="rootElementXpath" vsli:raw="The top level element in the xpath.">xpath 中的顶级元素。</param>
      <param name="namespaces" vsli:raw="The XML namespaces and their prefixes found in the data contract.">在数据协定中找到的 XML 命名空间及其前缀。</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt;  &#xA;  &#xA; The XPath generated from the type and member data.">
        <see cref="T:System.String" />  
  
根据此类型和成员数据生成的 XPath。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer(System.Type,System.Reflection.MemberInfo[],System.Xml.XmlNamespaceManager@)">
      <summary vsli:raw="Creates an XPath from a data contract using the specified data contract type, array of metadata elements, and namespaces.">通过使用指定的数据协定类型、元数据元素数组和命名空间，根据数据协定创建 XPath。</summary>
      <param name="type" vsli:raw="The type that represents a data contract.">表示数据协定的类型。</param>
      <param name="pathToMember" vsli:raw="The metadata, generated using the &lt;see cref=&quot;Overload:System.Type.GetMember&quot; /&gt; method of the &lt;see cref=&quot;T:System.Type&quot; /&gt; class, that points to the specific data member used to generate the query.">元数据，是使用 <see cref="Overload:System.Type.GetMember" /> 类的 <see cref="T:System.Type" /> 方法生成，指向用于生成此查询的特定数据成员。</param>
      <param name="namespaces" vsli:raw="The XML namespaces and their prefixes found in the data contract.">在数据协定中找到的 XML 命名空间及其前缀。</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt;  &#xA;  &#xA; The XPath generated from the type and member data.">
        <see cref="T:System.String" />  
  
根据此类型和成员数据生成的 XPath。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.XsdDataContractExporter">
      <summary vsli:raw="Allows the transformation of a set of .NET types that are used in data contracts into an XML schema file (.xsd).">用于将数据协定中使用的一组 .NET Framework 类型转换成 XML 架构文件 (.xsd)。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.XsdDataContractExporter&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.#ctor(System.Xml.Schema.XmlSchemaSet)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.XsdDataContractExporter&quot; /&gt; class with the specified set of schemas.">使用指定的架构集初始化 <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> 类的新实例。</summary>
      <param name="schemas" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; that contains the schemas to be exported.">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含要导出的架构。</param>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Reflection.Assembly})">
      <summary vsli:raw="Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a set of assemblies can be exported.">获取一个值，该值指示一组程序集中包含的公共语言运行库 (CLR) 类型集是否可以导出。</summary>
      <param name="assemblies" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that contains the assemblies with the types to export.">一个由 <see cref="T:System.Collections.Generic.ICollection`1" /> 组成的 <see cref="T:System.Reflection.Assembly" />，其中包含具有要导出的类型的程序集。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the types can be exported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果类型可以导出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Type})">
      <summary vsli:raw="Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; can be exported.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的公共语言运行时 (CLR) 类型集是否可以导出。</summary>
      <param name="types" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; that contains the specified types to export.">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含要导出的指定类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the types can be exported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果类型可以导出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether the specified common language runtime (CLR) type can be exported.">获取一个值，该值指示指定的公共语言运行时 (CLR) 类型是否可以导出。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to export.">要导出的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be exported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果类型可以导出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Reflection.Assembly})">
      <summary vsli:raw="Transforms the types contained in the specified collection of assemblies.">对指定的程序集集合中包含的类型进行转换。</summary>
      <param name="assemblies" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; (of &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt;) that contains the types to export.">一个由 <see cref="T:System.Collections.Generic.ICollection`1" /> 组成的 <see cref="T:System.Reflection.Assembly" />，其中包含要导出的类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;assemblies&quot; /&gt; argument is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="assemblies" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; in the collection is &lt;see langword=&quot;null&quot; /&gt;.">集合中的一个 <see cref="T:System.Reflection.Assembly" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Type})">
      <summary vsli:raw="Transforms the types contained in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; passed to this method.">对传递给该方法的 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的类型进行转换。</summary>
      <param name="types" vsli:raw="A  &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; (of &lt;see cref=&quot;T:System.Type&quot; /&gt;) that contains the types to export.">一个由 <see cref="T:System.Type" /> 组成的 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含要导出的类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;types&quot; /&gt; argument is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="types" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A type in the collection is &lt;see langword=&quot;null&quot; /&gt;.">集合中的一个类型为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Type)">
      <summary vsli:raw="Transforms the specified .NET Framework type into an XML schema definition language (XSD) schema.">将指定的 .NET Framework 类型转换成 XML 架构定义语言 (XSD) 架构。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to transform into an XML schema.">要转换成 XML 架构的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; argument is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName(System.Type)">
      <summary vsli:raw="Returns the top-level name and namespace for the &lt;see cref=&quot;T:System.Type&quot; /&gt;.">返回 <see cref="T:System.Type" /> 的顶级名称和命名空间。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to query.">要查询的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; argument is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; that represents the top-level name and namespace for this &lt;see cref=&quot;T:System.Type&quot; /&gt;, which is written to the stream when writing this object.">表示此 <see cref="T:System.Xml.XmlQualifiedName" /> 的顶级名称和命名空间的 <see cref="T:System.Type" />，它在写入此对象时被写入到流中。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType(System.Type)">
      <summary vsli:raw="Returns the XML schema type for the specified type.">返回指定类型的 XML 架构类型。</summary>
      <param name="type" vsli:raw="The type to return a schema for.">要为其返回架构的类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; argument is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; that contains the XML schema.">一个包含 XML 架构的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName(System.Type)">
      <summary vsli:raw="Returns the contract name and contract namespace for the &lt;see cref=&quot;T:System.Type&quot; /&gt;.">返回 <see cref="T:System.Type" /> 的协定名称和协定命名空间。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that was exported.">所导出的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; argument is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; that represents the contract name of the type and its namespace.">一个 <see cref="T:System.Xml.XmlQualifiedName" />，表示该类型的协定名称及其命名空间。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.XsdDataContractExporter.Options">
      <summary vsli:raw="Gets or sets an &lt;see cref=&quot;T:System.Runtime.Serialization.ExportOptions&quot; /&gt; that contains options that can be set for the export operation.">获取或设置一个 <see cref="T:System.Runtime.Serialization.ExportOptions" />，其中包含可为导出操作设置的选项。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Runtime.Serialization.ExportOptions&quot; /&gt; that contains options used to customize how types are exported to schemas.">一个 <see cref="T:System.Runtime.Serialization.ExportOptions" />，它包含用于自定义将类型导出到架构的方式的选项。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.XsdDataContractExporter.Schemas">
      <summary vsli:raw="Gets the collection of exported XML schemas.">获取导出的 XML 架构的集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; that contains the schemas transformed from the set of common language runtime (CLR) types after calling the &lt;see cref=&quot;Overload:System.Runtime.Serialization.XsdDataContractExporter.Export&quot; /&gt; method.">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含在调用 <see cref="Overload:System.Runtime.Serialization.XsdDataContractExporter.Export" /> 方法后从公共语言运行库 (CLR) 类型集转换而来的架构。</returns>
    </member>
    <member name="T:System.Xml.IFragmentCapableXmlDictionaryWriter">
      <summary vsli:raw="Contains properties and methods that when implemented by a &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;, allows processing of XML fragments.">包含由 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实现时允许处理 XML 片段的属性和方法。</summary>
    </member>
    <member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment">
      <summary vsli:raw="Ends the processing of an XML fragment.">结束 XML 片段的处理。</summary>
    </member>
    <member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)">
      <summary vsli:raw="Starts the processing of an XML fragment.">开始 XML 片段的处理。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <param name="generateSelfContainedTextFragment" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, any namespaces declared outside the fragment is declared again if used inside of it; if &lt;see langword=&quot;false&quot; /&gt; the namespaces are not declared again.">如果为 <see langword="true" />，则在片段内部使用在片段外部声明的命名空间时，会在片段内部重新声明命名空间；如果为 <see langword="false" />，则不重新声明命名空间。</param>
    </member>
    <member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes an XML fragment to the underlying stream of the writer.">将 XML 片段写入编写器的基础流。</summary>
      <param name="buffer" vsli:raw="The buffer to write to.">要写入的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to write in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始写入数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes to be written to the &lt;paramref name=&quot;buffer&quot; /&gt;.">要写入 <paramref name="buffer" /> 的字节数。</param>
    </member>
    <member name="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; can process XML fragments.">获取一个值，该值指示此 <see cref="T:System.Xml.XmlDictionaryWriter" /> 是否能够处理 XML 片段。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; can process XML fragments; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xml.XmlDictionaryWriter" /> 能够处理 XML 片段，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xml.IStreamProvider">
      <summary vsli:raw="Represents an interface that can be implemented by classes providing streams.">表示一个可以由提供流的类来实现的接口。</summary>
    </member>
    <member name="M:System.Xml.IStreamProvider.GetStream">
      <summary vsli:raw="Gets a stream.">获取流。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; object.">
        <see cref="T:System.IO.Stream" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)">
      <summary vsli:raw="Releases a stream to output.">将流释放到输出。</summary>
      <param name="stream" vsli:raw="The stream being released.">正在发布的流。</param>
    </member>
    <member name="T:System.Xml.IXmlBinaryReaderInitializer">
      <summary vsli:raw="Provides methods for reinitializing a binary reader to read a new document.">提供重新初始化二进制读取器以读取新文档的方法。</summary>
    </member>
    <member name="M:System.Xml.IXmlBinaryReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Reinitializes the binary reader using the given input buffer.">使用给定的输入缓冲区重新初始化二进制读取器。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="Starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="Number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="dictionary" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="quotas" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="session" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlBinaryReaderSession&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlBinaryReaderSession" />。</param>
      <param name="onClose" vsli:raw="Delegate to call when the reader is closed.">读取器关闭时调用的委托。</param>
    </member>
    <member name="M:System.Xml.IXmlBinaryReaderInitializer.SetInput(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Reinitializes the binary reader using the given input stream.">使用给定的输入流重新初始化二进制读取器。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="dictionary" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="quotas" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="session" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlBinaryReaderSession&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlBinaryReaderSession" />。</param>
      <param name="onClose" vsli:raw="Delegate to call when the reader is closed.">读取器关闭时调用的委托。</param>
    </member>
    <member name="T:System.Xml.IXmlBinaryWriterInitializer">
      <summary vsli:raw="Specifies implementation requirements for XML binary writers that derive from this interface.">指定从此接口派生的 XML 二进制编写器的实现要求。</summary>
    </member>
    <member name="M:System.Xml.IXmlBinaryWriterInitializer.SetOutput(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)">
      <summary vsli:raw="Specifies initialization requirements for XML binary writers that implement this method.">指定实现此方法的 XML 二进制编写器的初始化要求。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="session" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlBinaryWriterSession&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlBinaryWriterSession" />。</param>
      <param name="ownsStream" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the stream is closed by the writer when done; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指示完成时编写器关闭流，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="T:System.Xml.IXmlDictionary">
      <summary vsli:raw="An &lt;see langword=&quot;interface&quot; /&gt; that defines the contract that an Xml dictionary must implement to be used by &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; implementations.">一个定义必须实现 XML 字典以由 <see langword="interface" /> 和 <see cref="T:System.Xml.XmlDictionaryReader" /> 实现使用这一协定的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</summary>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Attempts to look up an entry in the dictionary.">尝试在字典中查找项。</summary>
      <param name="key" vsli:raw="Key to look up.">要查找的键。</param>
      <param name="result" vsli:raw="If &lt;paramref name=&quot;key&quot; /&gt; is defined, the &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that is mapped to the key; otherwise &lt;see langword=&quot;null&quot; /&gt;.">如果已定义 <paramref name="key" />，则 <see cref="T:System.Xml.XmlDictionaryString" /> 映射到该键；否则为 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if key is in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果键在字典中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Checks the dictionary for a specified string value.">检查字典中是否有指定的字符串值。</summary>
      <param name="value" vsli:raw="String value being checked for.">要检查的字符串值。</param>
      <param name="result" vsli:raw="The corresponding &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果找到，则为相应的 <see cref="T:System.Xml.XmlDictionaryString" />；否则为 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if value is in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果值在字典中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Checks the dictionary for a specified &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;.">检查字典中是否有指定的 <see cref="T:System.Xml.XmlDictionaryString" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; being checked for.">要检查的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="result" vsli:raw="The matching &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果找到，则为匹配的 <see cref="T:System.Xml.XmlDictionaryString" />；否则为 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; is in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 在字典中，则为 <see cref="T:System.Xml.XmlDictionaryString" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xml.IXmlTextReaderInitializer">
      <summary vsli:raw="Specifies implementation requirements for XML text readers that derive from this interface.">指定从此接口派生的 XML 文本读取器的实现要求。</summary>
    </member>
    <member name="M:System.Xml.IXmlTextReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Specifies initialization requirements for XML text readers that read a buffer.">指定读取缓冲区的 XML 文本读取器的初始化要求。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encoding" vsli:raw="The character encoding of the stream.">流的字符编码。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose" vsli:raw="The delegate to be called when the reader is closed.">读取器关闭时要调用的委托。</param>
    </member>
    <member name="M:System.Xml.IXmlTextReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Specifies initialization requirements for XML text readers that read a stream.">指定读取流的 XML 文本读取器的初始化要求。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="encoding" vsli:raw="The character encoding of the stream.">流的字符编码。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose" vsli:raw="The delegate to be called when the reader is closed.">读取器关闭时要调用的委托。</param>
    </member>
    <member name="T:System.Xml.IXmlTextWriterInitializer">
      <summary vsli:raw="Specifies implementation requirements for XML text writers that derive from this interface.">指定从此接口派生的 XML 文本编写器的实现要求。</summary>
    </member>
    <member name="M:System.Xml.IXmlTextWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary vsli:raw="Specifies initialization requirements for XML text writers that implement this method.">指定实现此方法的 XML 文本编写器的初始化要求。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <param name="encoding" vsli:raw="The character encoding of the stream.">流的字符编码。</param>
      <param name="ownsStream" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the stream is closed by the writer when done; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指示完成时编写器关闭流，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="T:System.Xml.OnXmlDictionaryReaderClose">
      <summary vsli:raw="&lt;see langword=&quot;delegate&quot; /&gt; for a callback method when closing the reader.">关闭读取器时回调方法的 <see langword="delegate" />。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that fires the &lt;c&gt;OnClose&lt;/c&gt; event.">触发 <c>OnClose</c> 事件的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="T:System.Xml.UniqueId">
      <summary vsli:raw="A unique identifier optimized for Guids.">为 GUID 优化的唯一标识符。</summary>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor">
      <summary vsli:raw="Creates a new instance of this class with a new, unique Guid.">使用新的唯一 GUID 创建此类的新实例。</summary>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Byte[])">
      <summary vsli:raw="Creates a new instance of this class using a byte array that represents a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">使用表示 <see cref="T:System.Guid" /> 的字节数组创建此类的新实例。</summary>
      <param name="guid" vsli:raw="A byte array that represents a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">一个表示 <see cref="T:System.Guid" /> 的字节数组。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;guid&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="guid" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;guid&quot; /&gt; provides less than 16 valid bytes.">
        <paramref name="guid" /> 提供少于 16 个有效字节。</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Byte[],System.Int32)">
      <summary vsli:raw="Creates a new instance of this class starting from an offset within a &lt;see langword=&quot;byte&quot; /&gt; array that represents a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">从表示 <see langword="byte" /> 的 <see cref="T:System.Guid" /> 数组中的某一偏移量开始，创建此类的新实例。</summary>
      <param name="guid" vsli:raw="A &lt;see langword=&quot;byte&quot; /&gt; array that represents a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">表示 <see langword="byte" /> 的 <see cref="T:System.Guid" /> 数组。</param>
      <param name="offset" vsli:raw="Offset position within the &lt;see langword=&quot;byte&quot; /&gt; array that represents a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">
        <see langword="byte" /> 数组中表示 <see cref="T:System.Guid" /> 的偏移位置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;guid&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="guid" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; less than zero or greater than the length of the array.">
        <paramref name="offset" /> 小于零或大于数组的长度。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;guid&quot; /&gt; and &lt;paramref name=&quot;offset&quot; /&gt; provide less than 16 valid bytes.">
        <paramref name="guid" /> 和 <paramref name="offset" /> 提供少于 16 个的有效字节。</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new instance of this class starting from an offset within a &lt;see langword=&quot;char&quot; /&gt; using a specified number of entries.">使用指定项数，从 <see langword="char" /> 中的某一偏移量开始，创建此类的新实例。</summary>
      <param name="chars" vsli:raw="A &lt;see langword=&quot;char&quot; /&gt; array that represents a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">表示 <see langword="char" /> 的 <see cref="T:System.Guid" /> 数组。</param>
      <param name="offset" vsli:raw="Offset position within the &lt;see langword=&quot;char&quot; /&gt; array that represents a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">
        <see langword="char" /> 数组中表示 <see cref="T:System.Guid" /> 的偏移位置。</param>
      <param name="count" vsli:raw="Number of array entries to use, starting from &lt;paramref name=&quot;offset&quot; /&gt;.">要使用的数组项数，从 <paramref name="offset" /> 开始。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;chars&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; less than zero or greater than the length of the array.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; less than zero or greater than the length of the array minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> 小于零或大于数组的长度。

- 或 -

<paramref name="count" /> 小于零或大于数组长度减去 <paramref name="offset" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; equals zero.">
        <paramref name="count" /> 等于零。</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Guid)">
      <summary vsli:raw="Creates a new instance of this class using a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">使用 <see cref="T:System.Guid" /> 创建此类的新实例。</summary>
      <param name="guid" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">
        <see cref="T:System.Guid" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;guid&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="guid" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.String)">
      <summary vsli:raw="Creates a new instance of this class using a string.">使用字符串创建此类的新实例。</summary>
      <param name="value" vsli:raw="A string used to generate the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;.">用于生成 <see cref="T:System.Xml.UniqueId" /> 的字符串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="Length of &lt;paramref name=&quot;value&quot; /&gt; is zero.">
        <paramref name="value" /> 的长度为零。</exception>
    </member>
    <member name="M:System.Xml.UniqueId.Equals(System.Object)">
      <summary vsli:raw="Tests whether an object equals this &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;.">测试某一对象是否等于此 <see cref="T:System.Xml.UniqueId" />。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object equals this &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果对象等于此 <see cref="T:System.Xml.UniqueId" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.UniqueId.GetHashCode">
      <summary vsli:raw="Creates a hash-code representation of this &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;.">创建此 <see cref="T:System.Xml.UniqueId" /> 的哈希代码表示形式。</summary>
      <returns vsli:raw="An integer hash-code representation of this &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;.">此 <see cref="T:System.Xml.UniqueId" /> 的整数哈希代码表示形式。</returns>
    </member>
    <member name="M:System.Xml.UniqueId.op_Equality(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary vsli:raw="Overrides the equality operator to test for equality of two &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;s.">重写相等运算符以测试两个 <see cref="T:System.Xml.UniqueId" /> 是否相等。</summary>
      <param name="id1" vsli:raw="The first &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;.">第一个 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="id2" vsli:raw="The second &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;.">第二个 <see cref="T:System.Xml.UniqueId" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;s are equal, or are both &lt;see langword=&quot;null&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if they are not equal, or if only one of them is &lt;see langword=&quot;null&quot; /&gt;.">如果两个 <see langword="true" /> 相等或都为 <see cref="T:System.Xml.UniqueId" />，则为 <see langword="null" />；如果它们不相等或如果其中只有一个为 <see langword="false" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.UniqueId.op_Inequality(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary vsli:raw="Overrides the equality operator to test for inequality of two &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;s.">重写相等运算符以测试两个 <see cref="T:System.Xml.UniqueId" /> 是否相等。</summary>
      <param name="id1" vsli:raw="The first &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;.">第一个 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="id2" vsli:raw="The second &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;.">第二个 <see cref="T:System.Xml.UniqueId" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the overridden equality operator returns &lt;see langword=&quot;false&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果重写的等于运算符返回 <see langword="true" />，则为 <see langword="false" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.UniqueId.ToCharArray(System.Char[],System.Int32)">
      <summary vsli:raw="Puts the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt; value into a &lt;see langword=&quot;char&quot; /&gt; array.">将 <see cref="T:System.Xml.UniqueId" /> 值放入 <see langword="char" /> 数组中。</summary>
      <param name="chars" vsli:raw="The &lt;see langword=&quot;char&quot; /&gt; array.">
        <see langword="char" /> 数组。</param>
      <param name="offset" vsli:raw="Position in the &lt;see langword=&quot;char&quot; /&gt; array to start inserting the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt; value.">
        <see langword="char" /> 数组中开始插入 <see cref="T:System.Xml.UniqueId" /> 值的位置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;chars&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; less than zero or greater than the length of the array.">
        <paramref name="offset" /> 小于零或大于数组的长度。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;guid&quot; /&gt; and &lt;paramref name=&quot;offset&quot; /&gt; provide less than 16 valid bytes.">
        <paramref name="guid" /> 和 <paramref name="offset" /> 提供少于 16 个的有效字节。</exception>
      <returns vsli:raw="Number of entries in the &lt;see langword=&quot;char&quot; /&gt; array filled by the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt; value.">由 <see langword="char" /> 值填充的 <see cref="T:System.Xml.UniqueId" /> 数组中的项数。</returns>
    </member>
    <member name="M:System.Xml.UniqueId.ToString">
      <summary vsli:raw="Displays the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt; value in string format.">以字符串格式显示 <see cref="T:System.Xml.UniqueId" /> 值。</summary>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt; value.">
        <see cref="T:System.Xml.UniqueId" /> 值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.UniqueId.TryGetGuid(System.Byte[],System.Int32)">
      <summary vsli:raw="Tries to get the value of the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt; as a &lt;see cref=&quot;T:System.Guid&quot; /&gt; and store it in the given byte array at the specified offset.">尝试获取 <see cref="T:System.Xml.UniqueId" /> 的值作为 <see cref="T:System.Guid" /> 并将其存储在给定字节数组中的指定偏移位置。</summary>
      <param name="buffer" vsli:raw="&lt;see langword=&quot;byte&quot; /&gt; array that will contain the &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">将包含 <see langword="byte" /> 的 <see cref="T:System.Guid" /> 数组。</param>
      <param name="offset" vsli:raw="Position in the &lt;see langword=&quot;byte&quot; /&gt; array to start inserting the &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">
        <see langword="byte" /> 数组中开始插入 <see cref="T:System.Guid" /> 值的位置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; less than zero or greater than the length of the array.">
        <paramref name="offset" /> 小于零或大于数组的长度。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; and &lt;paramref name=&quot;offset&quot; /&gt; provide less than 16 valid bytes.">
        <paramref name="buffer" /> 和 <paramref name="offset" /> 提供少于 16 个的有效字节。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value stored in this instance of &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt; is a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果存储在 <see langword="true" /> 的此实例中的值为 <see cref="T:System.Xml.UniqueId" />，则为 <see cref="T:System.Guid" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.UniqueId.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Tries to get the value of the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt; as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">尝试获取 <see cref="T:System.Xml.UniqueId" /> 的值作为 <see cref="T:System.Guid" />。</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; if successful; otherwise &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">如果成功，则为 <see cref="T:System.Guid" />；否则为 <see cref="F:System.Guid.Empty" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; and &lt;paramref name=&quot;offset&quot; /&gt; provide less than 16 valid bytes.">
        <paramref name="buffer" /> 和 <paramref name="offset" /> 提供少于 16 个的有效字节。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the UniqueId represents a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果 UniqueId 表示 <see cref="T:System.Guid" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.UniqueId.CharArrayLength">
      <summary vsli:raw="Gets the length of the string representation of the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;.">获取 <see cref="T:System.Xml.UniqueId" /> 的字符串表示形式的长度。</summary>
      <returns vsli:raw="The length of the string representation of the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt;.">
        <see cref="T:System.Xml.UniqueId" /> 的字符串表示形式的长度。</returns>
    </member>
    <member name="P:System.Xml.UniqueId.IsGuid">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt; is a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">指示 <see cref="T:System.Xml.UniqueId" /> 是否为 <see cref="T:System.Guid" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.UniqueId&quot; /&gt; is a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xml.UniqueId" /> 为 <see cref="T:System.Guid" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xml.XmlBinaryReaderSession">
      <summary vsli:raw="Enables optimized strings to be managed in a dynamic way.">允许以动态方式管理经过优化的字符串。</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlBinaryReaderSession&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlBinaryReaderSession" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.Add(System.Int32,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; from the input parameters and adds it to an internal collection.">从输入参数创建一个 <see cref="T:System.Xml.XmlDictionaryString" /> 并将其添加到内部集合。</summary>
      <param name="id" vsli:raw="The key value.">键值。</param>
      <param name="value" vsli:raw="The value.">值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;id&quot; /&gt; is less than zero.">
        <paramref name="id" /> 小于零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An entry with key = &lt;paramref name=&quot;id&quot; /&gt; already exists.">键 = <paramref name="id" /> 的项已存在。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that is added to an internal collection.">添加到内部集合的新生成的 <see cref="T:System.Xml.XmlDictionaryString" />。</returns>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.Clear">
      <summary vsli:raw="Clears the internal collection of all contents.">清除所有内容的内部集合。</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Checks whether the internal collection contains an entry matching a key.">检查内部集合是否包含与键匹配的项。</summary>
      <param name="key" vsli:raw="The key to search on.">要搜索的键。</param>
      <param name="result" vsli:raw="When this method returns, contains a string if an entry is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">当此方法返回时，如果找到词条，则包含字符串；否则为 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an entry matching the &lt;paramref name=&quot;key&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到匹配 <paramref name="key" /> 的项，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Checks whether the internal collection contains an entry matching a value.">检查内部集合是否包含与值匹配的项。</summary>
      <param name="value" vsli:raw="The value to search for.">要搜索的值。</param>
      <param name="result" vsli:raw="When this method returns, contains a string if an entry is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">当此方法返回时，如果找到词条，则包含字符串；否则为 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an entry matching the &lt;paramref name=&quot;value&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到匹配 <paramref name="value" /> 的项，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Checks whether the internal collection contains an entry matching a value.">检查内部集合是否包含与值匹配的项。</summary>
      <param name="value" vsli:raw="The value to search for.">要搜索的值。</param>
      <param name="result" vsli:raw="When this method returns, contains a string if an entry is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">当此方法返回时，如果找到词条，则包含字符串；否则为 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an entry matching the &lt;paramref name=&quot;value&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到匹配 <paramref name="value" /> 的项，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xml.XmlBinaryWriterSession">
      <summary vsli:raw="Enables using a dynamic dictionary to compress common strings that appear in a message and maintain state.">允许使用动态字典压缩消息中出现的常见字符串并保持状态。</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.#ctor">
      <summary vsli:raw="Creates an instance of this class.">创建此类的实例。</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.Reset">
      <summary vsli:raw="Clears out the internal collections.">清除内部集合。</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.TryAdd(System.Xml.XmlDictionaryString,System.Int32@)">
      <summary vsli:raw="Tries to add an &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; to the internal collection.">尝试将 <see cref="T:System.Xml.XmlDictionaryString" /> 添加到内部集合。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; to add.">要添加的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="key" vsli:raw="The key of the &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that was successfully added.">已成功添加的 <see cref="T:System.Xml.XmlDictionaryString" /> 的键。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An entry with key = &lt;paramref name=&quot;key&quot; /&gt; already exists.">键 = <paramref name="key" /> 的项已存在。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string could be added; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以添加该字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xml.XmlDictionary">
      <summary vsli:raw="Implements a dictionary used to optimize Windows Communication Foundation (WCF)'s XML reader/writer implementations.">实现用于优化 Windows Communication Foundation (WCF) 的 XML 读取器/编写器实现的字典。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionary.#ctor">
      <summary vsli:raw="Creates an empty &lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt;.">创建一个空的 <see cref="T:System.Xml.XmlDictionary" />。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionary.#ctor(System.Int32)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; with an initial capacity.">创建具有初始容量的 <see cref="T:System.Xml.XmlDictionary" />。</summary>
      <param name="capacity" vsli:raw="The initial size of the dictionary.">字典的初始大小。</param>
    </member>
    <member name="M:System.Xml.XmlDictionary.Add(System.String)">
      <summary vsli:raw="Adds a string to the &lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt;.">将字符串添加到 <see cref="T:System.Xml.XmlDictionary" />。</summary>
      <param name="value" vsli:raw="String to add to the dictionary.">要添加到字典的字符串。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that was added.">所添加的 <see cref="T:System.Xml.XmlDictionaryString" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Attempts to look up an entry in the dictionary.">尝试在字典中查找项。</summary>
      <param name="key" vsli:raw="Key to look up.">要查找的键。</param>
      <param name="result" vsli:raw="If &lt;paramref name=&quot;key&quot; /&gt; is defined, the &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that is mapped to the key; otherwise &lt;see langword=&quot;null&quot; /&gt;.">如果已定义 <paramref name="key" />，则 <see cref="T:System.Xml.XmlDictionaryString" /> 映射到该键；否则为 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if key is in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果键在字典中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Checks the dictionary for a specified string value.">检查字典中是否有指定的字符串值。</summary>
      <param name="value" vsli:raw="String value being checked for.">要检查的字符串值。</param>
      <param name="result" vsli:raw="The corresponding &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;, if found; otherwise &lt;see langword=&quot;null&quot; /&gt;.">如果找到，则为相应的 <see cref="T:System.Xml.XmlDictionaryString" />；否则为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if value is in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果值在字典中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Checks the dictionary for a specified &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;.">检查字典中是否有指定的 <see cref="T:System.Xml.XmlDictionaryString" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; being checked for.">要检查的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="result" vsli:raw="The matching &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果找到，则为匹配的 <see cref="T:System.Xml.XmlDictionaryString" />；否则为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; is in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 在字典中，则为 <see cref="T:System.Xml.XmlDictionaryString" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionary.Empty">
      <summary vsli:raw="Gets a &lt;see langword=&quot;static&quot; /&gt; empty &lt;see cref=&quot;T:System.Xml.IXmlDictionary&quot; /&gt;.">获取一个 <see langword="static" /> 空 <see cref="T:System.Xml.IXmlDictionary" />。</summary>
      <returns vsli:raw="A &lt;see langword=&quot;static&quot; /&gt; empty &lt;see cref=&quot;T:System.Xml.IXmlDictionary&quot; /&gt;.">一个 <see langword="static" /> 空 <see cref="T:System.Xml.IXmlDictionary" />。</returns>
    </member>
    <member name="T:System.Xml.XmlDictionaryReader">
      <summary vsli:raw="An &lt;see langword=&quot;abstract&quot; /&gt; class that the Windows Communication Foundation (WCF) derives from &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to do serialization and deserialization.">Windows Communication Foundation (WCF) 从 <see cref="T:System.Xml.XmlReader" /> 中派生以便执行序列化和反序列化的 <see langword="abstract" /> 类。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.#ctor">
      <summary vsli:raw="Creates an instance of this class.  Invoked only by its derived classes.">创建此类的实例。  仅由其派生类调用。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read .NET Binary XML Format.">创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="dictionary" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="quotas" vsli:raw="The quotas that apply to this operation.">应用于此操作的配额。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;offset&quot; /&gt; is less than zero or greater than the buffer length.">
        <paramref name="buffer" /> 为 <see langword="null" />。

- 或 -

<paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than zero or greater than the buffer length minus the offset.">
        <paramref name="count" /> 小于零或大于缓冲区长度减偏移量。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read .NET Binary XML Format.">创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="session" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlBinaryReaderSession&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlBinaryReaderSession" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than zero or greater than the buffer length minus the offset.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;offset&quot; /&gt; is less than zero or greater than the buffer length.">
        <paramref name="count" /> 小于零或大于缓冲区长度减偏移量。

- 或 -

<paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read .NET Binary XML Format.">创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="session" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlBinaryReaderSession&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlBinaryReaderSession" />。</param>
      <param name="onClose" vsli:raw="Delegate to be called when the reader is closed.">要在关闭读取器时调用的委托。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than zero or greater than the buffer length minus the offset.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;offset&quot; /&gt; is less than zero or greater than the buffer length.">
        <paramref name="count" /> 小于零或大于缓冲区长度减偏移量。

- 或 -

<paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read .NET Binary XML Format.">创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="quotas" vsli:raw="The quotas that apply to this operation.">应用于此操作的配额。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than zero or greater than the buffer length minus the offset.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;offset&quot; /&gt; is less than zero or greater than the buffer length.">
        <paramref name="count" /> 小于零或大于缓冲区长度减偏移量。

- 或 -

<paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read .NET Binary XML Format.">创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="quotas" vsli:raw="The quotas that apply to this operation.">应用于此操作的配额。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read .NET Binary XML Format.">创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="dictionary" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="quotas" vsli:raw="The quotas that apply to this operation.">应用于此操作的配额。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; or &lt;paramref name=&quot;quotas&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 或 <paramref name="quotas" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read .NET Binary XML Format.">创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="dictionary" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="quotas" vsli:raw="The quotas that apply to this operation.">应用于此操作的配额。</param>
      <param name="session" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlBinaryReaderSession&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlBinaryReaderSession" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read .NET Binary XML Format.">创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="dictionary" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="quotas" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="session" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlBinaryReaderSession&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlBinaryReaderSession" />。</param>
      <param name="onClose" vsli:raw="Delegate to be called when the reader is closed.">要在关闭读取器时调用的委托。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read .NET Binary XML Format.">创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="quotas" vsli:raw="The quotas that apply to this operation.">应用于此操作的配额。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateDictionaryReader(System.Xml.XmlReader)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; from an existing &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">从现有的 <see cref="T:System.Xml.XmlDictionaryReader" /> 创建 <see cref="T:System.Xml.XmlReader" /> 的实例。</summary>
      <param name="reader" vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that reads XML in the MTOM format.">创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encoding" vsli:raw="The possible character encoding of the input.">输入的可能的字符编码。</param>
      <param name="quotas" vsli:raw="The quotas to apply to this reader.">要应用于此读取器的配额。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;encoding&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="encoding" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that reads XML in the MTOM format.">创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encodings" vsli:raw="The possible character encodings of the input.">输入的可能的字符编码。</param>
      <param name="contentType" vsli:raw="The Content-Type MIME type of the message.">消息的内容类型 MIME 类型。</param>
      <param name="quotas" vsli:raw="The quotas to apply to this reader.">要应用于此读取器的配额。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that reads XML in the MTOM format.">创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encodings" vsli:raw="The possible character encodings of the input.">输入的可能的字符编码。</param>
      <param name="contentType" vsli:raw="The Content-Type MIME type of the message.">消息的内容类型 MIME 类型。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply to the reader.">要应用于读取器的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="maxBufferSize" vsli:raw="The maximum allowed size of the buffer.">允许的缓冲区最大大小。</param>
      <param name="onClose" vsli:raw="The delegate to be called when the reader is closed.">读取器关闭时要调用的委托。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that reads XML in the MTOM format.">创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encodings" vsli:raw="The possible character encodings of the input.">输入的可能的字符编码。</param>
      <param name="quotas" vsli:raw="The quotas to apply to this reader.">要应用于此读取器的配额。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that reads XML in the MTOM format.">创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="encoding" vsli:raw="The possible character encoding of the stream.">流的可能的字符编码。</param>
      <param name="quotas" vsli:raw="The quotas to apply to this reader.">要应用于此读取器的配额。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;encoding&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="encoding" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that reads XML in the MTOM format.">创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="encodings" vsli:raw="The possible character encodings of the stream.">流的可能的字符编码。</param>
      <param name="contentType" vsli:raw="The Content-Type MIME type of the message.">消息的内容类型 MIME 类型。</param>
      <param name="quotas" vsli:raw="The quotas to apply to this reader.">要应用于此读取器的配额。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that reads XML in the MTOM format.">创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="encodings" vsli:raw="The possible character encodings of the stream.">流的可能的字符编码。</param>
      <param name="contentType" vsli:raw="The Content-Type MIME type of the message.">消息的内容类型 MIME 类型。</param>
      <param name="quotas" vsli:raw="The MIME type of the message.">消息的 MIME 类型。</param>
      <param name="maxBufferSize" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply to the reader.">要应用于读取器的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose" vsli:raw="The delegate to be called when the reader is closed.">读取器关闭时要调用的委托。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that reads XML in the MTOM format.">创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="encodings" vsli:raw="The possible character encodings of the stream.">流的可能的字符编码。</param>
      <param name="quotas" vsli:raw="The quotas to apply to this reader.">要应用于此读取器的配额。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;encoding&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="encoding" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">创建 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; object that specifies the encoding properties to apply.">指定要应用的编码属性的 <see cref="T:System.Text.Encoding" /> 对象。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose" vsli:raw="The delegate to be called when the reader is closed.">读取器关闭时要调用的委托。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">创建 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="quotas" vsli:raw="The quotas applied to the reader.">应用于读取器的配额。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">创建 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="quotas" vsli:raw="The quotas applied to the reader.">应用于读取器的配额。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">创建 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; object that specifies the encoding properties to apply.">指定要应用的编码属性的 <see cref="T:System.Text.Encoding" /> 对象。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose" vsli:raw="The delegate to be called when the reader is closed.">读取器关闭时要调用的委托。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">创建 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="quotas" vsli:raw="The quotas applied to the reader.">应用于读取器的配额。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.EndCanonicalization">
      <summary vsli:raw="This method is not yet implemented.">此方法尚未实现。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always.">始终。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.GetAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="When overridden in a derived class, gets the value of an attribute.">当在派生类中被重写时，获取属性的值。</summary>
      <param name="localName" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that represents the local name of the attribute.">一个表示属性本地名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="namespaceUri" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that represents the namespace of the attribute.">一个表示属性命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <returns vsli:raw="The value of the attribute.">属性的值。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.GetNonAtomizedNames(System.String@,System.String@)">
      <summary vsli:raw="Gets non-atomized names.">获取非原子化的名称。</summary>
      <param name="localName" vsli:raw="The local name.">本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace for the local &lt;paramref name=&quot;localName&quot; /&gt;.">本地 <paramref name="localName" /> 的命名空间。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String[],System.String)">
      <summary vsli:raw="Gets the index of the local name of the current node within an array of names.">获取名称数组中当前节点的本地名称的索引。</summary>
      <param name="localNames" vsli:raw="The string array of local names to be searched.">要搜索的本地名称字符串数组。</param>
      <param name="namespaceUri" vsli:raw="The namespace of current node.">当前节点的命名空间。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localNames&quot; /&gt; or any of the names in the array is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;namespaceUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localNames" /> 或数组中的任何名称为 <see langword="null" />。

- 或 -

<paramref name="namespaceUri" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The index of the local name of the current node within an array of names.">名称数组中当前节点的本地名称的索引。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString[],System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Gets the index of the local name of the current node within an array of names.">获取名称数组中当前节点的本地名称的索引。</summary>
      <param name="localNames" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; array of local names to be searched.">要搜索的本地名称 <see cref="T:System.Xml.XmlDictionaryString" /> 数组。</param>
      <param name="namespaceUri" vsli:raw="The namespace of current node.">当前节点的命名空间。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localNames&quot; /&gt; or any of the names in the array is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;namespaceUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localNames" /> 或数组中的任何名称为 <see langword="null" />。

- 或 -

<paramref name="namespaceUri" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The index of the local name of the current node within an array of names.">名称数组中当前节点的本地名称的索引。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.String)">
      <summary vsli:raw="Checks whether the parameter, &lt;paramref name=&quot;localName&quot; /&gt;, is the local name of the current node.">检查参数 <paramref name="localName" /> 是否为当前节点的本地名称。</summary>
      <param name="localName" vsli:raw="The local name of the current node.">当前节点的本地名称。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;localName&quot; /&gt; matches local name of the current node; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="localName" /> 与当前节点的本地名称相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Checks whether the parameter, &lt;paramref name=&quot;localName&quot; /&gt;, is the local name of the current node.">检查参数 <paramref name="localName" /> 是否为当前节点的本地名称。</summary>
      <param name="localName" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that represents the local name of the current node.">表示当前节点本地名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localName" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;localName&quot; /&gt; matches local name of the current node; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="localName" /> 与当前节点的本地名称相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.String)">
      <summary vsli:raw="Checks whether the parameter, &lt;paramref name=&quot;namespaceUri&quot; /&gt;, is the namespace of the current node.">检查参数 <paramref name="namespaceUri" /> 是否为当前节点的命名空间。</summary>
      <param name="namespaceUri" vsli:raw="The namespace of current node.">当前节点的命名空间。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;namespaceUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceUri" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;namespaceUri&quot; /&gt; matches namespace of the current node; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="namespaceUri" /> 与当前节点的命名空间相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Checks whether the parameter, &lt;paramref name=&quot;namespaceUri&quot; /&gt;, is the namespace of the current node.">检查参数 <paramref name="namespaceUri" /> 是否为当前节点的命名空间。</summary>
      <param name="namespaceUri" vsli:raw="Namespace of current node.">当前节点的命名空间。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;namespaceUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceUri" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;namespaceUri&quot; /&gt; matches namespace of the current node; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="namespaceUri" /> 与当前节点的命名空间相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsStartArray(System.Type@)">
      <summary vsli:raw="Checks whether the reader is positioned at the start of an array. This class returns &lt;see langword=&quot;false&quot; /&gt;, but derived classes that have the concept of arrays might return &lt;see langword=&quot;true&quot; /&gt;.">检查读取器是否定位在数组的开头。 此类返回 <see langword="false" />，但具有数组概念的派生类可能返回 <see langword="true" />。</summary>
      <param name="type" vsli:raw="Type of the node, if a valid node; otherwise &lt;see langword=&quot;null&quot; /&gt;.">节点的类型（如果为有效节点）；否则为 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned at the start of an array node; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果读取器定位于数组节点的开头，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Tests whether the first tag is a start tag or empty element tag and if the local name and namespace URI match those of the current node.">测试第一个标记是开始标记还是空元素标记，以及本地名称和命名空间 URI 是否与当前节点的本地名称和命名空间 URI 相匹配。</summary>
      <param name="localName" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that represents the local name of the attribute.">一个表示属性本地名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="namespaceUri" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that represents the namespace of the attribute.">一个表示属性命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the first tag in the array is a start tag or empty element tag and matches &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果数组中的第一个标记是开始标记或空元素标记，并与 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsTextNode(System.Xml.XmlNodeType)">
      <summary vsli:raw="Tests whether the current node is a text node.">测试当前节点是否为文本节点。</summary>
      <param name="nodeType" vsli:raw="Type of the node being tested.">所测试节点的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node type is &lt;see cref=&quot;F:System.Xml.XmlNodeType.Text&quot; /&gt;, &lt;see cref=&quot;F:System.Xml.XmlNodeType.Whitespace&quot; /&gt;, &lt;see cref=&quot;F:System.Xml.XmlNodeType.SignificantWhitespace&quot; /&gt;, &lt;see cref=&quot;F:System.Xml.XmlNodeType.CDATA&quot; /&gt;, or &lt;see cref=&quot;F:System.Xml.XmlNodeType.Attribute&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果节点类型为 <see cref="F:System.Xml.XmlNodeType.Text" />、<see cref="F:System.Xml.XmlNodeType.Whitespace" />、<see cref="F:System.Xml.XmlNodeType.SignificantWhitespace" />、<see cref="F:System.Xml.XmlNodeType.CDATA" /> 或 <see cref="F:System.Xml.XmlNodeType.Attribute" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement">
      <summary vsli:raw="Tests whether the current content node is a start element or an empty element.">测试当前的内容节点是开始元素还是空元素。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String)">
      <summary vsli:raw="Tests whether the current content node is a start element or an empty element and if the &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt; property of the element matches the given argument.">测试当前内容节点是开始元素还是空元素，以及元素的 <see cref="P:System.Xml.XmlReader.Name" /> 属性是否与给定的参数匹配。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt; property of the element.">元素的 <see cref="P:System.Xml.XmlReader.Name" /> 属性。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String,System.String)">
      <summary vsli:raw="Tests whether the current content node is a start element or an empty element and if the &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt; properties of the element matches the given arguments.">测试当前内容节点是开始元素还是空元素，以及元素的 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 属性是否与给定的参数匹配。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Tests whether the current content node is a start element or an empty element and if the &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt; properties of the element matches the given argument.">测试当前内容节点是开始元素还是空元素，以及元素的 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 属性是否与给定的参数匹配。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.Boolean&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.Boolean" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.DateTime&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.DateTime" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.Decimal" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Double[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.Double&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.Double" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Guid[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.Guid&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.Guid" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int16[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see langword=&quot;short&quot; /&gt; integers into a typed array.">将重复出现的 <see langword="short" /> 整数读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the integers are put.">向其中放入整数的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of integers to put in the array.">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of integers put in the array.">放入数组中的整数个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int32[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of integers into a typed array.">将重复出现的整数读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the integers are put.">向其中放入整数的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of integers to put in the array.">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of integers put in the array.">放入数组中的整数个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int64[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see langword=&quot;long&quot; /&gt; integers into a typed array.">将重复出现的 <see langword="long" /> 整数读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the integers are put.">向其中放入整数的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of integers to put in the array.">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of integers put in the array.">放入数组中的整数个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Single[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see langword=&quot;float&quot; /&gt; numbers into a typed array.">将重复出现的 <see langword="float" /> 数读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the float numbers are put.">向其中放入浮点数的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of float numbers to put in the array.">要放入数组中的浮点数个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The umber of float numbers put in the array.">放入数组中的浮点数个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.TimeSpan" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.Boolean&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.Boolean" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.DateTime&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.DateTime" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.Decimal" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.Double&quot; /&gt; nodes type into a typed array.">将重复出现的 <see cref="T:System.Double" /> 节点类型读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.Guid&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.Guid" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see langword=&quot;short&quot; /&gt; integers into a typed array.">将重复出现的 <see langword="short" /> 整数读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the integers are put.">向其中放入整数的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of integers to put in the array.">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of integers put in the array.">放入数组中的整数个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of integers into a typed array.">将重复出现的整数读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the integers are put.">向其中放入整数的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of integers to put in the array.">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of integers put in the array.">放入数组中的整数个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see langword=&quot;long&quot; /&gt; integers into a typed array.">将重复出现的 <see langword="long" /> 整数读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the integers are put.">向其中放入整数的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of integers to put in the array.">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of integers put in the array.">放入数组中的整数个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see langword=&quot;float&quot; /&gt; numbers into a typed array.">将重复出现的 <see langword="float" /> 数读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the float numbers are put.">向其中放入浮点数的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of float numbers to put in the array.">要放入数组中的浮点数个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of float numbers put in the array.">放入数组中的浮点数个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.TimeSpan" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array into which the nodes are put.">向其中放入节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to put in the array.">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of nodes put in the array.">放入数组中的节点个数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.String,System.String)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.Boolean&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.Boolean" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; array of the &lt;see cref=&quot;T:System.Boolean&quot; /&gt; nodes.">
        <see cref="T:System.Boolean" /> 节点的 <see cref="T:System.Boolean" /> 数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Reads repeated occurrences of &lt;see cref=&quot;T:System.Boolean&quot; /&gt; nodes into a typed array.">将重复出现的 <see cref="T:System.Boolean" /> 节点读入类型化数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; array of the &lt;see cref=&quot;T:System.Boolean&quot; /&gt; nodes.">
        <see cref="T:System.Boolean" /> 节点的 <see cref="T:System.Boolean" /> 数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Converts a node's content to a specified type.">将节点内容转换为指定类型。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the value to be returned.">要返回的值的 <see cref="T:System.Type" />。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object to an &lt;c&gt;xs:string&lt;/c&gt;. This value can be a null reference.">一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。 例如，将 <see cref="T:System.Xml.XmlQualifiedName" /> 对象转换为 <c>xs:string</c> 时可以使用此对象。 此值可以是空引用。</param>
      <returns vsli:raw="The concatenated text content or attribute value converted to the requested type.">已转换为请求类型的串联文本内容或属性值。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBase64">
      <summary vsli:raw="Reads the content and returns the Base64 decoded binary bytes.">读取内容并返回 Base64 解码的二进制字节。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The array size is greater than the MaxArrayLength quota for this reader.">数组大小大于此读取器的 MaxArrayLength 配额。</exception>
      <returns vsli:raw="A byte array that contains the Base64 decoded binary bytes.">一个字节数组，其中包含 Base64 解码的二进制字节。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex">
      <summary vsli:raw="Reads the content and returns the &lt;see langword=&quot;BinHex&quot; /&gt; decoded binary bytes.">读取内容并返回 <see langword="BinHex" /> 解码的二进制字节。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The array size is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">数组大小大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <returns vsli:raw="A byte array that contains the &lt;see langword=&quot;BinHex&quot; /&gt; decoded binary bytes.">一个字节数组，其中包含 <see langword="BinHex" /> 解码的二进制字节。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex(System.Int32)">
      <summary vsli:raw="Reads the content and returns the &lt;see langword=&quot;BinHex&quot; /&gt; decoded binary bytes.">读取内容并返回 <see langword="BinHex" /> 解码的二进制字节。</summary>
      <param name="maxByteArrayContentLength" vsli:raw="The maximum array length.">最大数组长度。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The array size is greater than &lt;paramref name=&quot;maxByteArrayContentLength&quot; /&gt;.">数组大小大于 <paramref name="maxByteArrayContentLength" />。</exception>
      <returns vsli:raw="A byte array that contains the &lt;see langword=&quot;BinHex&quot; /&gt; decoded binary bytes.">一个字节数组，其中包含 <see langword="BinHex" /> 解码的二进制字节。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content into a &lt;see langword=&quot;char&quot; /&gt; array.">将内容读入 <see langword="char" /> 数组。</summary>
      <param name="chars" vsli:raw="The array into which the characters are put.">向其中放入字符的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of characters to put in the array.">要放入数组中的字符数。</param>
      <returns vsli:raw="Number of characters read.">读取的字符数。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsDecimal">
      <summary vsli:raw="Converts a node's content to &lt;see langword=&quot;decimal&quot; /&gt;.">将节点内容转换为 <see langword="decimal" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;decimal&quot; /&gt; representation of node's content.">节点内容的 <see langword="decimal" /> 表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsFloat">
      <summary vsli:raw="Converts a node's content to &lt;see langword=&quot;float&quot; /&gt;.">将节点内容转换为 <see langword="float" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;float&quot; /&gt; representation of node's content.">节点内容的 <see langword="float" /> 表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsGuid">
      <summary vsli:raw="Converts a node's content to &lt;see langword=&quot;guid&quot; /&gt;.">将节点内容转换为 <see langword="guid" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;guid&quot; /&gt; representation of node's content.">节点内容的 <see langword="guid" /> 表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(System.String@,System.String@)">
      <summary vsli:raw="Converts a node's content to a qualified name representation.">将节点内容转换为限定名表示形式。</summary>
      <param name="localName" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; part of the qualified name (&lt;see langword=&quot;out&quot; /&gt; parameter).">限定名（<see langword="out" /> 参数）的 <see cref="P:System.Xml.XmlReader.LocalName" /> 部分。</param>
      <param name="namespaceUri" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt; part of the qualified name (&lt;see langword=&quot;out&quot; /&gt; parameter).">限定名（<see langword="out" /> 参数）的 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 部分。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString">
      <summary vsli:raw="Converts a node's content to a string.">将节点内容转换为字符串。</summary>
      <returns vsli:raw="The node content in a string representation.">以字符串表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Int32)">
      <summary vsli:raw="Converts a node's content to a string.">将节点内容转换为字符串。</summary>
      <param name="maxStringContentLength" vsli:raw="The maximum string length.">最大字符串长度。</param>
      <returns vsli:raw="Node content in string representation.">以字符串表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.String[],System.Int32@)">
      <summary vsli:raw="Converts a node's content to a string.">将节点内容转换为字符串。</summary>
      <param name="strings" vsli:raw="The array of strings to match content against.">要依据其匹配内容的字符串数组。</param>
      <param name="index" vsli:raw="The index of the entry in &lt;paramref name=&quot;strings&quot; /&gt; that matches the content.">与内容匹配的 <paramref name="strings" /> 中项的索引。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;strings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;An entry in &lt;paramref name=&quot;strings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="strings" /> 为 <see langword="null" />。

- 或 -

<paramref name="strings" /> 中的某一项为 <see langword="null" />。</exception>
      <returns vsli:raw="The node content in a string representation.">以字符串表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString[],System.Int32@)">
      <summary vsli:raw="Converts a node's content to a string.">将节点内容转换为字符串。</summary>
      <param name="strings" vsli:raw="The array of &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; objects to match content against.">要依据其匹配内容的 <see cref="T:System.Xml.XmlDictionaryString" /> 对象数组。</param>
      <param name="index" vsli:raw="The index of the entry in &lt;paramref name=&quot;strings&quot; /&gt; that matches the content.">与内容匹配的 <paramref name="strings" /> 中项的索引。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;strings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;An entry in &lt;paramref name=&quot;strings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="strings" /> 为 <see langword="null" />。

- 或 -

<paramref name="strings" /> 中的某一项为 <see langword="null" />。</exception>
      <returns vsli:raw="The node content in a string representation.">以字符串表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsTimeSpan">
      <summary vsli:raw="Converts a node's content to &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">将节点内容转换为 <see cref="T:System.TimeSpan" />。</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; representation of node's content.">节点内容的 <see cref="T:System.TimeSpan" /> 表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsUniqueId">
      <summary vsli:raw="Converts a node's content to a unique identifier.">将节点内容转换为唯一标识符。</summary>
      <returns vsli:raw="The node's content represented as a unique identifier.">以唯一标识符形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.String,System.String)">
      <summary vsli:raw="Converts a node's content to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; array.">将节点内容转换为 <see cref="T:System.DateTime" /> 数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; array.">以 <see cref="T:System.DateTime" /> 数组形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Converts a node's content to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; array.">将节点内容转换为 <see cref="T:System.DateTime" /> 数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; array.">以 <see cref="T:System.DateTime" /> 数组形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.String,System.String)">
      <summary vsli:raw="Converts a node's content to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; array.">将节点内容转换为 <see cref="T:System.Decimal" /> 数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; array.">以 <see cref="T:System.Decimal" /> 数组形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Converts a node's content to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; array.">将节点内容转换为 <see cref="T:System.Decimal" /> 数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; array.">以 <see cref="T:System.Decimal" /> 数组形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.String,System.String)">
      <summary vsli:raw="Converts a node's content to a &lt;see cref=&quot;T:System.Double&quot; /&gt; array.">将节点内容转换为 <see cref="T:System.Double" /> 数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt; array.">以 <see cref="T:System.Double" /> 数组形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Converts a node's content to a &lt;see cref=&quot;T:System.Double&quot; /&gt; array.">将节点内容转换为 <see cref="T:System.Double" /> 数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt; array.">以 <see cref="T:System.Double" /> 数组形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBase64">
      <summary vsli:raw="Converts a node's content to a array of Base64 bytes.">将节点内容转换为 Base64 字节的数组。</summary>
      <returns vsli:raw="The node's content represented as an array of Base64 bytes.">以 Base64 字节数组形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBinHex">
      <summary vsli:raw="Converts a node's content to an array of &lt;see langword=&quot;BinHex&quot; /&gt; bytes.">将节点内容转换为 <see langword="BinHex" /> 字节的数组。</summary>
      <returns vsli:raw="The node's content represented as an array of &lt;see langword=&quot;BinHex&quot; /&gt; bytes.">以 <see langword="BinHex" /> 字节数组形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBoolean">
      <summary vsli:raw="Converts an element's content to a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">将元素内容转换为 <see cref="T:System.Boolean" />。</summary>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">以 <see cref="T:System.Boolean" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDateTime">
      <summary vsli:raw="Converts an element's content to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">将元素内容转换为 <see cref="T:System.DateTime" />。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The element is not in valid format.">元素的格式无效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The element is not in valid format.">元素的格式无效。</exception>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">以 <see cref="T:System.DateTime" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDecimal">
      <summary vsli:raw="Converts an element's content to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">将元素内容转换为 <see cref="T:System.Decimal" />。</summary>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">以 <see cref="T:System.Decimal" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDouble">
      <summary vsli:raw="Converts an element's content to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">将元素内容转换为 <see cref="T:System.Double" />。</summary>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">以 <see cref="T:System.Double" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsFloat">
      <summary vsli:raw="Converts an element's content to a floating point number (&lt;see cref=&quot;T:System.Single&quot; /&gt;).">将元素内容转换为浮点数 (<see cref="T:System.Single" />)。</summary>
      <returns vsli:raw="The node's content represented as a floating point number (&lt;see cref=&quot;T:System.Single&quot; /&gt;).">以浮点数 (<see cref="T:System.Single" />) 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsGuid">
      <summary vsli:raw="Converts an element's content to a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">将元素内容转换为 <see cref="T:System.Guid" />。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The element is not in valid format.">元素的格式无效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The element is not in valid format.">元素的格式无效。</exception>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">以 <see cref="T:System.Guid" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsInt">
      <summary vsli:raw="Converts an element's content to an integer (&lt;see cref=&quot;T:System.Int32&quot; /&gt;).">将元素内容转换为整数 (<see cref="T:System.Int32" />)。</summary>
      <returns vsli:raw="The node's content represented as an integer (&lt;see cref=&quot;T:System.Int32&quot; /&gt;).">以整数 (<see cref="T:System.Int32" />) 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsLong">
      <summary vsli:raw="Converts an element's content to a long integer (&lt;see cref=&quot;T:System.Int64&quot; /&gt;).">将元素内容转换为长整型 (<see cref="T:System.Int64" />)。</summary>
      <returns vsli:raw="The node's content represented as a long integer (&lt;see cref=&quot;T:System.Int64&quot; /&gt;).">以长整型 (<see cref="T:System.Int64" />) 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsString">
      <summary vsli:raw="Converts an element's content to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将元素内容转换为 <see cref="T:System.String" />。</summary>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">以 <see cref="T:System.String" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsTimeSpan">
      <summary vsli:raw="Converts an element's content to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">将元素内容转换为 <see cref="T:System.TimeSpan" />。</summary>
      <returns vsli:raw="The node's content represented as a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">以 <see cref="T:System.TimeSpan" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsUniqueId">
      <summary vsli:raw="Converts an element's content to a unique identifier.">将元素的内容转换为唯一标识符。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The element is not in valid format.">元素的格式无效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The element is not in valid format.">元素的格式无效。</exception>
      <returns vsli:raw="The node's content represented as a unique identifier.">以唯一标识符形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement">
      <summary vsli:raw="Checks whether the current node is an element and advances the reader to the next node.">检查当前节点是否为元素并将读取器推进到下一个节点。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> 返回 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String)">
      <summary vsli:raw="Checks whether the current node is an element with the given &lt;paramref name=&quot;name&quot; /&gt; and advances the reader to the next node.">检查当前节点是否为具有给定 <paramref name="name" /> 的元素，并将读取器推进到下一个节点。</summary>
      <param name="name" vsli:raw="The qualified name of the element.">元素的限定名。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> 返回 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String,System.String)">
      <summary vsli:raw="Checks whether the current node is an element with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; and advances the reader to the next node.">检查当前节点是否为具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的元素，并将读取器推进到下一个节点。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> 返回 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Checks whether the current node is an element with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; and advances the reader to the next node.">检查当前节点是否为具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的元素，并将读取器推进到下一个节点。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> 返回 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.String,System.String)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into an array of &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see cref="T:System.Guid" /> 的数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">一个 <see cref="T:System.Guid" /> 数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into an array of &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see cref="T:System.Guid" /> 的数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">一个 <see cref="T:System.Guid" /> 数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.String,System.String)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into an array of &lt;see langword=&quot;short&quot; /&gt; integers (&lt;see cref=&quot;T:System.Int16&quot; /&gt;).">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see langword="short" /> 整数 (<see cref="T:System.Int16" />) 的数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="An array of &lt;see langword=&quot;short&quot; /&gt; integers (&lt;see cref=&quot;T:System.Int16&quot; /&gt;).">
        <see langword="short" /> 整数 (<see cref="T:System.Int16" />) 的数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into an array of &lt;see langword=&quot;short&quot; /&gt; integers (&lt;see cref=&quot;T:System.Int16&quot; /&gt;).">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see langword="short" /> 整数 (<see cref="T:System.Int16" />) 的数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="An array of &lt;see langword=&quot;short&quot; /&gt; integers (&lt;see cref=&quot;T:System.Int16&quot; /&gt;).">
        <see langword="short" /> 整数 (<see cref="T:System.Int16" />) 的数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.String,System.String)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into an array of integers (&lt;see cref=&quot;T:System.Int32&quot; /&gt;).">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入整数 (<see cref="T:System.Int32" />) 的数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="An array of integers (&lt;see cref=&quot;T:System.Int32&quot; /&gt;).">整数 (<see cref="T:System.Int32" />) 的数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into an array of integers (&lt;see cref=&quot;T:System.Int32&quot; /&gt;).">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入整数 (<see cref="T:System.Int32" />) 的数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="An array of integers (&lt;see cref=&quot;T:System.Int32&quot; /&gt;).">整数 (<see cref="T:System.Int32" />) 的数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.String,System.String)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into an array of &lt;see langword=&quot;long&quot; /&gt; integers (&lt;see cref=&quot;T:System.Int64&quot; /&gt;).">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see langword="long" /> 整数 (<see cref="T:System.Int64" />) 的数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="An array of &lt;see langword=&quot;long&quot; /&gt; integers (&lt;see cref=&quot;T:System.Int64&quot; /&gt;).">
        <see langword="long" /> 整数 (<see cref="T:System.Int64" />) 的数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into an array of &lt;see langword=&quot;long&quot; /&gt; integers (&lt;see cref=&quot;T:System.Int64&quot; /&gt;).">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see langword="long" /> 整数 (<see cref="T:System.Int64" />) 的数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="An array of &lt;see langword=&quot;long&quot; /&gt; integers (&lt;see cref=&quot;T:System.Int64&quot; /&gt;).">
        <see langword="long" /> 整数 (<see cref="T:System.Int64" />) 的数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.String,System.String)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into an array of &lt;see langword=&quot;float&quot; /&gt; numbers (&lt;see cref=&quot;T:System.Single&quot; /&gt;).">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see langword="float" /> 数 (<see cref="T:System.Single" />) 的数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="An array of &lt;see langword=&quot;float&quot; /&gt; numbers (&lt;see cref=&quot;T:System.Single&quot; /&gt;).">
        <see langword="float" /> 数字 (<see cref="T:System.Single" />) 的数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into an array of &lt;see langword=&quot;float&quot; /&gt; numbers (&lt;see cref=&quot;T:System.Single&quot; /&gt;).">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see langword="float" /> 数 (<see cref="T:System.Single" />) 的数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="An array of &lt;see langword=&quot;float&quot; /&gt; numbers (&lt;see cref=&quot;T:System.Single&quot; /&gt;).">
        <see langword="float" /> 数字 (<see cref="T:System.Single" />) 的数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Checks whether the current node is an element with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; and advances the reader to the next node.">检查当前节点是否为具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的元素，并将读取器推进到下一个节点。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadString">
      <summary vsli:raw="Reads the contents of the current node into a string.">将当前节点的内容读入字符串。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Unable to read the contents of the current node.">无法读取当前节点的内容。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Maximum allowed string length exceeded.">超出允许的最大字符串长度。</exception>
      <returns vsli:raw="A string that contains the contents of the current node.">包含当前节点的内容的字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadString(System.Int32)">
      <summary vsli:raw="Reads the contents of the current node into a string with a given maximum length.">将当前节点的内容读入具有最大给定长度的字符串。</summary>
      <param name="maxStringContentLength" vsli:raw="Maximum allowed string length.">允许的最大字符串长度。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Unable to read the contents of the current node.">无法读取当前节点的内容。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Maximum allowed string length exceeded.">超出允许的最大字符串长度。</exception>
      <returns vsli:raw="A string that contains the contents of the current node.">包含当前节点的内容的字符串。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.String,System.String)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; array.">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see cref="T:System.TimeSpan" /> 数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; array.">
        <see cref="T:System.TimeSpan" /> 数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Reads the contents of a series of nodes with the given &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceUri&quot; /&gt; into a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; array.">将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see cref="T:System.TimeSpan" /> 数组。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; array.">
        <see cref="T:System.TimeSpan" /> 数组。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Not implemented.">未实现。</summary>
      <param name="buffer" vsli:raw="The buffer from which to read.">要从其中读取数据的缓冲区。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always.">始终。</exception>
      <returns vsli:raw="Not implemented.">未实现。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <summary vsli:raw="This method is not yet implemented.">此方法尚未实现。</summary>
      <param name="stream" vsli:raw="The stream to read from.">要从其中进行读取的流。</param>
      <param name="includeComments" vsli:raw="Determines whether comments are included.">确定是否包括注释。</param>
      <param name="inclusivePrefixes" vsli:raw="The prefixes to be included.">要包括的前缀。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always.">始终。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetArrayLength(System.Int32@)">
      <summary vsli:raw="Not implemented in this class (it always returns &lt;see langword=&quot;false&quot; /&gt;). May be overridden in derived classes.">不在此类中实现（它始终返回 <see langword="false" />）。 可在派生类中重写。</summary>
      <param name="count" vsli:raw="Returns 0, unless overridden in a derived class.">除非在派生类中重写，否则返回 0。</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt;, unless overridden in a derived class.">除非在派生类中重写，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(System.Int32@)">
      <summary vsli:raw="Not implemented in this class (it always returns &lt;see langword=&quot;false&quot; /&gt;). May be overridden in derived classes.">不在此类中实现（它始终返回 <see langword="false" />）。 可在派生类中重写。</summary>
      <param name="length" vsli:raw="Returns 0, unless overridden in a derived class.">除非在派生类中重写，否则返回 0。</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt;, unless overridden in a derived class.">除非在派生类中重写，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Not implemented in this class (it always returns &lt;see langword=&quot;false&quot; /&gt;). May be overridden in derived classes.">不在此类中实现（它始终返回 <see langword="false" />）。 可在派生类中重写。</summary>
      <param name="localName" vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;, unless overridden in a derived class. .">除非在派生类中重写，否则返回 <see langword="null" />。 。</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt;, unless overridden in a derived class.">除非在派生类中重写，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Not implemented in this class (it always returns &lt;see langword=&quot;false&quot; /&gt;). May be overridden in derived classes.">不在此类中实现（它始终返回 <see langword="false" />）。 可在派生类中重写。</summary>
      <param name="namespaceUri" vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;, unless overridden in a derived class.">除非在派生类中重写，否则返回 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt;, unless overridden in a derived class.">除非在派生类中重写，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary vsli:raw="Not implemented in this class (it always returns &lt;see langword=&quot;false&quot; /&gt;). May be overridden in derived classes.">不在此类中实现（它始终返回 <see langword="false" />）。 可在派生类中重写。</summary>
      <param name="value" vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;, unless overridden in a derived class.">除非在派生类中重写，否则返回 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt;, unless overridden in a derived class.">除非在派生类中重写，否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReader.CanCanonicalize">
      <summary vsli:raw="This property always returns &lt;see langword=&quot;false&quot; /&gt;. Its derived classes can override to return &lt;see langword=&quot;true&quot; /&gt; if they support canonicalization.">此属性始终返回 <see langword="false" />。 如果派生的类支持规范化，则可以重写这些类以返回 <see langword="true" />。</summary>
      <returns vsli:raw="Returns &lt;see langword=&quot;false&quot; /&gt;.">返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReader.Quotas">
      <summary vsli:raw="Gets the quota values that apply to the current instance of this class.">获取适用于此类的当前实例的配额值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; that applies to the current instance of this class.">适用于此类的当前实例的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
    </member>
    <member name="T:System.Xml.XmlDictionaryReaderQuotas">
      <summary vsli:raw="Contains configurable quota values for XmlDictionaryReaders.">包含 XmlDictionaryReaders 的可配置配额值。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReaderQuotas.#ctor">
      <summary vsli:raw="Creates a new instance of this class.">创建此类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReaderQuotas.CopyTo(System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Sets the properties on a passed-in quotas instance, based on the values in this instance.">根据此实例中的值设置传入配额实例的属性。</summary>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; instance to which to copy values.">要将值复制到的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 实例。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Trying to &lt;see langword=&quot;set&quot; /&gt; the value, but quota values are read-only for the passed in instance.">尝试 <see langword="set" /> 值，但传入实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Passed in target &lt;paramref name=&quot;quotas&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">传入的目标 <paramref name="quotas" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.Max">
      <summary vsli:raw="Gets an instance of this class with all properties set to maximum values.">获取此类的一个实例，其所有属性都设置为最大值。</summary>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; with properties set to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 的一个实例，其属性设置为 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength">
      <summary vsli:raw="Gets or sets the maximum allowed array length.">获取或设置允许的最大数组长度。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Trying to &lt;see langword=&quot;set&quot; /&gt; the value, but quota values are read-only for this instance.">尝试 <see langword="set" /> 值，但此实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Trying to &lt;see langword=&quot;set&quot; /&gt; the value to less than zero.">尝试将值 <see langword="set" /> 为小于零。</exception>
      <returns vsli:raw="The maximum allowed array length. The default is 16384.">允许的最大数组长度。 默认值为 16384。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead">
      <summary vsli:raw="Gets or sets the maximum allowed bytes returned for each read.">获取或设置允许每次读取返回的最大字节数。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Trying to &lt;see langword=&quot;set&quot; /&gt; the value, but quota values are read-only for this instance.">尝试 <see langword="set" /> 值，但此实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Trying to &lt;see langword=&quot;set&quot; /&gt; the value to less than zero.">尝试将值 <see langword="set" /> 为小于零。</exception>
      <returns vsli:raw="The maximum allowed bytes returned for each read. The default is 4096.">允许为每次读取返回的最大字节数。 默认值为 4096。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum nested node depth.">获取或设置最大嵌套节点深度。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Trying to &lt;see langword=&quot;set&quot; /&gt; the value and quota values are read-only for this instance.">尝试 <see langword="set" /> 值，而此实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Trying to &lt;see langword=&quot;set&quot; /&gt; the value is less than zero.">尝试将值 <see langword="set" /> 为小于零。</exception>
      <returns vsli:raw="The maximum nested node depth. The default is 32.">最大嵌套节点深度。 默认值为 32；</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount">
      <summary vsli:raw="Gets or sets the maximum characters allowed in a table name.">获取或设置表名称中允许的最大字符数。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Trying to &lt;see langword=&quot;set&quot; /&gt; the value, but quota values are read-only for this instance.">尝试 <see langword="set" /> 值，但此实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Trying to &lt;see langword=&quot;set&quot; /&gt; the value to less than zero.">尝试将值 <see langword="set" /> 为小于零。</exception>
      <returns vsli:raw="The maximum characters allowed in a table name. The default is 16384.">表名称中允许的最大字符数。 默认值为 16384。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength">
      <summary vsli:raw="Gets or sets the maximum string length returned by the reader.">获取或设置读取器返回的最大字符串长度。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Trying to &lt;see langword=&quot;set&quot; /&gt; the value, but quota values are read-only for this instance.">尝试 <see langword="set" /> 值，但此实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Trying to &lt;see langword=&quot;set&quot; /&gt; the value to less than zero.">尝试将值 <see langword="set" /> 为小于零。</exception>
      <returns vsli:raw="The maximum string length returned by the reader. The default is 8192.">读取器返回的最大字符串长度。 默认值为 8192。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.ModifiedQuotas">
      <summary vsli:raw="Gets the modified quotas for the &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt;.">为<see cref="T:System.Xml.XmlDictionaryReaderQuotas" />获取更改后的配额。</summary>
      <returns vsli:raw="The modified quotas for the &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt;.">用于 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />的修改的配额。</returns>
    </member>
    <member name="T:System.Xml.XmlDictionaryReaderQuotaTypes">
      <summary vsli:raw="Enumerates the configurable quota values for XmlDictionaryReaders.">枚举 XmlDictionaryReaders 的可配置配额值。</summary>
    </member>
    <member name="F:System.Xml.XmlDictionaryReaderQuotaTypes.MaxArrayLength">
      <summary vsli:raw="Specifies the maximum allowed array length.">指定允许的最大数组长度。</summary>
    </member>
    <member name="F:System.Xml.XmlDictionaryReaderQuotaTypes.MaxBytesPerRead">
      <summary vsli:raw="Specifies the maximum allowed bytes returned for each read.">指定允许为每次读取返回的最大字节数。</summary>
    </member>
    <member name="F:System.Xml.XmlDictionaryReaderQuotaTypes.MaxDepth">
      <summary vsli:raw="Specifies the maximum nested node depth.">指定最大嵌套节点深度。</summary>
    </member>
    <member name="F:System.Xml.XmlDictionaryReaderQuotaTypes.MaxNameTableCharCount">
      <summary vsli:raw="Specifies the maximum characters allowed in a table name.">指定表名称中允许的最大字符数。</summary>
    </member>
    <member name="F:System.Xml.XmlDictionaryReaderQuotaTypes.MaxStringContentLength">
      <summary vsli:raw="Specifies the maximum string length returned by the reader.">指定读取器返回的最大字符串长度。</summary>
    </member>
    <member name="T:System.Xml.XmlDictionaryString">
      <summary vsli:raw="Represents an entry stored in a &lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt;.">表示存储在 <see cref="T:System.Xml.XmlDictionary" /> 中的项。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryString.#ctor(System.Xml.IXmlDictionary,System.String,System.Int32)">
      <summary vsli:raw="Creates an instance of this class.">创建此类的实例。</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlDictionary&quot; /&gt; containing this instance.">包含此实例的 <see cref="T:System.Xml.IXmlDictionary" />。</param>
      <param name="value" vsli:raw="The string that is the value of the dictionary entry.">作为字典项的值的字符串。</param>
      <param name="key" vsli:raw="The integer that is the key of the dictionary entry.">作为字典项的键的整数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is less than 0 or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; / 4.">
        <paramref name="key" /> 小于 0 或大于 <see cref="F:System.Int32.MaxValue" /> / 4。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryString.ToString">
      <summary vsli:raw="Displays a text representation of this object.">显示此对象的文本表示形式。</summary>
      <returns vsli:raw="The string value for this instance of the class.">该类的此实例的字符串值。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Dictionary">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Xml.IXmlDictionary&quot; /&gt; passed to the constructor of this instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;.">表示传递到此 <see cref="T:System.Xml.IXmlDictionary" /> 实例的构造函数的 <see cref="T:System.Xml.XmlDictionaryString" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlDictionary&quot; /&gt; for this dictionary entry.">此字典项的 <see cref="T:System.Xml.IXmlDictionary" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Empty">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; representing the empty string.">获取表示空字符串的 <see cref="T:System.Xml.XmlDictionaryString" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; representing the empty string.">表示空字符串的 <see cref="T:System.Xml.XmlDictionaryString" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Key">
      <summary vsli:raw="Gets the integer key for this instance of the class.">获取该类的此实例的整数键。</summary>
      <returns vsli:raw="The integer key for this instance of the class.">该类的此实例的整数键。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Value">
      <summary vsli:raw="Gets the string value for this instance of the class.">获取该类的此实例的字符串值。</summary>
      <returns vsli:raw="The string value for this instance of the class.">该类的此实例的字符串值。</returns>
    </member>
    <member name="T:System.Xml.XmlDictionaryWriter">
      <summary vsli:raw="Represents an abstract class that Windows Communication Foundation (WCF) derives from &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to do serialization and deserialization.">表示 Windows Communication Foundation (WCF) 从 <see cref="T:System.Xml.XmlWriter" /> 中派生的用于执行序列化和反序列化的一个抽象类。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlDictionaryWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes WCF binary XML format.">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入 WCF 二进制 XML 格式。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes WCF binary XML format.">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入 WCF 二进制 XML 格式。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use as the shared dictionary.">用作共享字典的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes WCF binary XML format.">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入 WCF 二进制 XML 格式。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use as the shared dictionary.">用作共享字典的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="session" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlBinaryWriterSession&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlBinaryWriterSession" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes WCF binary XML format.">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入 WCF 二进制 XML 格式。</summary>
      <param name="stream" vsli:raw="The stream from which to read.">要从其中读取数据的流。</param>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionary&quot; /&gt; to use as the shared dictionary.">用作共享字典的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="session" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlBinaryWriterSession&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlBinaryWriterSession" />。</param>
      <param name="ownsStream" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the stream is closed by the writer when done; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果指示完成时编写器关闭流，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; from an existing &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">从现有的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 创建 <see cref="T:System.Xml.XmlWriter" /> 的实例。</summary>
      <param name="writer" vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlWriter" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateMtomWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.String)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes XML in the MTOM format.">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例以 MTOM 格式写入 XML。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <param name="encoding" vsli:raw="The character encoding of the stream.">流的字符编码。</param>
      <param name="maxSizeInBytes" vsli:raw="The maximum number of bytes that are buffered in the writer.">在编写器中缓冲的最大字节数。</param>
      <param name="startInfo" vsli:raw="An attribute in the ContentType SOAP header.">ContentType SOAP 标头中的属性。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateMtomWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes XML in the MTOM format.">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例以 MTOM 格式写入 XML。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <param name="encoding" vsli:raw="The character encoding of the stream.">流的字符编码。</param>
      <param name="maxSizeInBytes" vsli:raw="The maximum number of bytes that are buffered in the writer.">在编写器中缓冲的最大字节数。</param>
      <param name="startInfo" vsli:raw="The content-type of the MIME part that contains the Infoset.">包含 Infoset 的 MIME 部分的内容类型。</param>
      <param name="boundary" vsli:raw="The MIME boundary in the message.">消息中的 MIME 边界。</param>
      <param name="startUri" vsli:raw="The content-id URI of the MIME part that contains the Infoset.">包含 Infoset 的 MIME 部分的内容 ID URI。</param>
      <param name="writeMessageHeaders" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to write message headers.">如果写入消息标头，则为 <see langword="true" />。</param>
      <param name="ownsStream" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the stream is closed by the writer when done; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果指示完成时编写器关闭流，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes text XML.">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入文本 XML。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes text XML.">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入文本 XML。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <param name="encoding" vsli:raw="The character encoding of the output.">输出的字符编码。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes text XML.">创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入文本 XML。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <param name="encoding" vsli:raw="The character encoding of the stream.">流的字符编码。</param>
      <param name="ownsStream" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the stream is closed by the writer when done; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果指示完成时编写器关闭流，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.EndCanonicalization">
      <summary vsli:raw="When implemented by a derived class, it stops the canonicalization started by the matching &lt;see cref=&quot;M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])&quot; /&gt; call.">在由派生类实现时，它会停止由匹配的 <see cref="M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])" /> 调用启动的规范化。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not implemented yet.">此方法尚未实现。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <summary vsli:raw="When implemented by a derived class, it starts the canonicalization.">当通过派生类实现时，就开始规范化。</summary>
      <param name="stream" vsli:raw="The stream to write to.">要写入的流。</param>
      <param name="includeComments" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include comments; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果包含注释，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="inclusivePrefixes" vsli:raw="The prefixes to be included.">要包括的前缀。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not implemented yet.">此方法尚未实现。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; array.">从 <see cref="T:System.Boolean" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the data.">包含数据的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of values to write from the array.">要从数组写入的值的数量。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; array.">从 <see cref="T:System.DateTime" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; array.">从 <see cref="T:System.Decimal" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Double&quot; /&gt; array.">从 <see cref="T:System.Double" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Guid[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Guid&quot; /&gt; array.">从 <see cref="T:System.Guid" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Int16&quot; /&gt; array.">从 <see cref="T:System.Int16" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Int32&quot; /&gt; array.">从 <see cref="T:System.Int32" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Int64&quot; /&gt; array.">从 <see cref="T:System.Int64" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Single&quot; /&gt; array.">从 <see cref="T:System.Single" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; array.">从 <see cref="T:System.TimeSpan" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; array.">从 <see cref="T:System.Boolean" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; array.">从 <see cref="T:System.DateTime" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; array.">从 <see cref="T:System.Decimal" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Double&quot; /&gt; array.">从 <see cref="T:System.Double" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Guid&quot; /&gt; array.">从 <see cref="T:System.Guid" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Int16&quot; /&gt; array.">从 <see cref="T:System.Int16" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Int32&quot; /&gt; array.">从 <see cref="T:System.Int32" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Int64&quot; /&gt; array.">从 <see cref="T:System.Int64" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.Single&quot; /&gt; array.">从 <see cref="T:System.Single" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes nodes from a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; array.">从 <see cref="T:System.TimeSpan" /> 数组写入节点。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="array" vsli:raw="The array that contains the nodes.">包含节点的数组。</param>
      <param name="offset" vsli:raw="The starting index in the array.">数组中的起始索引。</param>
      <param name="count" vsli:raw="The number of nodes to get from the array.">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;paramref name=&quot;array&quot; /&gt; length minus &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0 或 &gt; <paramref name="array" /> 长度。

- 或 -

<paramref name="count" /> 为 &lt; 0 或 &gt; <paramref name="array" /> 长度减去 <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary vsli:raw="Writes an attribute qualified name and value.">写入属性的限定名和值。</summary>
      <param name="prefix" vsli:raw="The prefix of the attribute.">属性的前缀。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">属性的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the attribute.">属性的命名空间 URI。</param>
      <param name="value" vsli:raw="The attribute.">属性。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary vsli:raw="Writes an attribute qualified name and value.">写入属性的限定名和值。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the attribute.">属性的命名空间 URI。</param>
      <param name="value" vsli:raw="The attribute.">属性。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously encodes the specified binary bytes as Base64 and writes out the resulting text.">将指定的二进制字节异步编码为 Base64 并写出结果文本。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">要进行编码的字节数组。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the bytes to write.">缓冲区中指示要写入字节的起始位置的位置。</param>
      <param name="count" vsli:raw="The number of bytes to write.">要写入的字节数。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlDictionaryWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlDictionaryWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteBase64&quot; /&gt; operation.">表示 <see langword="WriteBase64" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary vsli:raw="Writes an element with a text content.">写入包含文本内容的元素。</summary>
      <param name="prefix" vsli:raw="The prefix of the element.">元素的前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="value" vsli:raw="The element content.">元素内容。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary vsli:raw="Writes an element with a text content.">写入包含文本内容的元素。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <param name="value" vsli:raw="The element content.">元素内容。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary vsli:raw="Writes the current XML node from an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">从 <see cref="T:System.Xml.XmlDictionaryReader" /> 写入当前 XML 节点。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDictionaryReader" />
      </param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes from the &lt;see langword=&quot;XmlReader&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则从 <see langword="XmlReader" /> 中复制默认属性；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="Writes the current XML node from an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">从 <see cref="T:System.Xml.XmlReader" /> 写入当前 XML 节点。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" />
      </param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes from the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则从 <see cref="T:System.Xml.XmlReader" /> 中复制默认属性；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteQualifiedName(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.">写出命名空间限定的名称。 此方法查找位于给定命名空间范围内的前缀。</summary>
      <param name="localName" vsli:raw="The local name of the qualified name.">限定名的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the qualified name.">限定名的命名空间 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Writes the start of an attribute with the specified prefix, local name, and namespace URI.">写入具有指定前缀、本地名称和命名空间 URI 的属性的起始内容。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空间前缀。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">属性的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the attribute.">属性的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Writes the start of an attribute with the specified local name, and namespace URI.">写入具有指定本地名称和命名空间 URI 的属性的起始内容。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the attribute.">属性的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Writes the specified start tag and associates it with the given namespace and prefix.">写入指定的开始标记并将其与给定的命名空间和前缀关联起来。</summary>
      <param name="prefix" vsli:raw="The prefix of the element.">元素的前缀。</param>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.">编写器已关闭。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Writes the specified start tag and associates it with the given namespace.">写入指定的开始标记并将其与给定的命名空间关联起来。</summary>
      <param name="localName" vsli:raw="The local name of the element.">元素的本地名称。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element.">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.">编写器已关闭。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteString(System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Writes the given text content.">写入给定的文本内容。</summary>
      <param name="value" vsli:raw="The text to write.">要写入的文本。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteTextNode(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary vsli:raw="Writes the text node that an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; is currently positioned on.">写入 <see cref="T:System.Xml.XmlDictionaryReader" /> 当前定位在的文本节点。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; to get the text value from.">要从其中获取文本值的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="isAttribute" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the reader is positioned on an attribute value or element content; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果读取器是定位在属性值上或定位在元素内容上，则为 <see langword="true" />，否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Guid)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">写入 <see cref="T:System.Guid" /> 值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; value to write.">要写入的 <see cref="T:System.Guid" /> 值。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.TimeSpan)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value.">写入 <see cref="T:System.TimeSpan" /> 值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value to write.">要写入的 <see cref="T:System.TimeSpan" /> 值。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.IStreamProvider)">
      <summary vsli:raw="Writes a value from an &lt;see cref=&quot;T:System.Xml.IStreamProvider&quot; /&gt;.">从 <see cref="T:System.Xml.IStreamProvider" /> 写入值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IStreamProvider&quot; /&gt; value to write.">要写入的 <see cref="T:System.Xml.IStreamProvider" /> 值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; returns a &lt;see langword=&quot;null&quot; /&gt; stream object.">
        <paramref name="value" />返回 <see langword="null" /> 流对象。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlDictionaryWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.UniqueId)">
      <summary vsli:raw="Writes a Unique Id value.">写入唯一 Id 值。</summary>
      <param name="value" vsli:raw="The Unique Id value to write.">要写入的唯一 Id 值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; value.">写入 <see cref="T:System.Xml.XmlDictionaryString" /> 值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; value.">
        <see cref="T:System.Xml.XmlDictionaryString" /> 值。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValueAsync(System.Xml.IStreamProvider)">
      <summary vsli:raw="Asynchronously writes a value from an &lt;see cref=&quot;T:System.Xml.IStreamProvider&quot; /&gt;.">异步写入一个来自 <see cref="T:System.Xml.IStreamProvider" /> 的数值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IStreamProvider&quot; /&gt; value to write.">要写入的 <see cref="T:System.Xml.IStreamProvider" /> 值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlDictionaryWriter" /> 方法。 在此情况下，会引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“异步操作已在进行中。”

- 或 -

调用了 <see cref="T:System.Xml.XmlDictionaryWriter" /> 异步方法，但未将 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 标志设置为 <see langword="true" />。 在这种情况下，将引发 <see cref="T:System.InvalidOperationException" /> 并显示消息“如果要使用异步方法，请将 XmlWriterSettings.Async 设置为 true”。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteValue&quot; /&gt; operation.">表示 <see langword="WriteValue" /> 异步操作的任务。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)">
      <summary vsli:raw="Writes a standard XML attribute in the current node.">在当前节点中写入标准的 XML 属性。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性的本地名称。</param>
      <param name="value" vsli:raw="The value of the attribute.">属性的值。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Writes an XML attribute in the current node.">在当前节点中写入 XML 属性。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性的本地名称。</param>
      <param name="value" vsli:raw="The value of the attribute.">属性的值。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)">
      <summary vsli:raw="Writes a namespace declaration attribute.">写入命名空间声明属性。</summary>
      <param name="prefix" vsli:raw="The prefix that is bound to the given namespace.">绑定到给定命名空间的前缀。</param>
      <param name="namespaceUri" vsli:raw="The namespace to which the prefix is bound.">前缀所绑定到的命名空间。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;namespaceUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceUri" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Writes a namespace declaration attribute.">写入命名空间声明属性。</summary>
      <param name="prefix" vsli:raw="The prefix that is bound to the given namespace.">绑定到给定命名空间的前缀。</param>
      <param name="namespaceUri" vsli:raw="The namespace to which the prefix is bound.">前缀所绑定到的命名空间。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;namespaceUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceUri" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryWriter.CanCanonicalize">
      <summary vsli:raw="This property always returns &lt;see langword=&quot;false&quot; /&gt;. Its derived classes can override to return &lt;see langword=&quot;true&quot; /&gt; if they support canonicalization.">此属性始终返回 <see langword="false" />。 如果派生的类支持规范化，则可以重写这些类以返回 <see langword="true" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">在所有情况下均为 <see langword="false" />。</returns>
    </member>
  </members>
</doc>
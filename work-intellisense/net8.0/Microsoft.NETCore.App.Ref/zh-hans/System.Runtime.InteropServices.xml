<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary vsli:raw="The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.">当在某个地址读取或写入一个单元的数据，但该地址的数据大小不是该数据单元的整数倍时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class.">初始化 <see cref="T:System.DataMisalignedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message.">使用指定的错误消息初始化 <see cref="T:System.DataMisalignedException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述错误的 <see cref="T:System.String" /> 对象。 <paramref name="message" /> 的内容设计为易于理解。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message and underlying exception.">用指定的错误信息和基础异常初始化 <see cref="T:System.DataMisalignedException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述错误的 <see cref="T:System.String" /> 对象。 <paramref name="message" /> 的内容设计为易于理解。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt;. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前 <see cref="T:System.DataMisalignedException" /> 的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary vsli:raw="The exception that is thrown when a DLL specified in a DLL import cannot be found.">当未找到在 DLL 导入中指定的 DLL 时所引发的异常。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with default properties.">使用默认属性初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with serialized data.">用序列化数据初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; that holds the serialized object data about the exception being thrown.">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; that contains contextual information about the source or destination.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message.">用指定的错误消息初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.DllNotFoundException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解释异常原因的错误消息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary vsli:raw="Provides random access to unmanaged blocks of memory from managed code.">提供从托管代码随机访问非托管内存块的能力。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class.">初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, and capacity.">使用指定的缓冲区、偏移量和容量初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 类的新实例。</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">要包含访问器的缓冲区。</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">启动访问器的字节位置。</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">要分配的内存大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和大于 <paramref name="buffer" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和将环绕地址空间的高端。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, capacity, and access right.">使用指定的缓冲区、偏移量、容量和访问权限初始化 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 类的新实例。</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">要包含访问器的缓冲区。</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">启动访问器的字节位置。</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">要分配的内存大小（以字节为单位）。</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">内存允许的访问类型。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和大于 <paramref name="buffer" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 小于零。  
  
- 或 - 
 <paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和将环绕地址空间的高端。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt;.">释放由 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; and optionally releases the managed resources.">释放由 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Sets the initial values for the accessor.">设置访问器的初始值。</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">要包含访问器的缓冲区。</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">启动访问器的字节位置。</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">要分配的内存大小（以字节为单位）。</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">内存允许的访问类型。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和大于 <paramref name="buffer" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> 或 <paramref name="capacity" /> 小于零。  
  
- 或 - 
 <paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> 与 <paramref name="capacity" /> 之和将环绕地址空间的高端。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary vsli:raw="Reads a structure of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into a provided reference.">将 <paramref name="T" /> 类型的结构从访问器读取到提供的引用中。</summary>
      <param name="position" vsli:raw="The position in the accessor at which to begin reading.">访问器中开始读取的位置。</param>
      <param name="structure" vsli:raw="The structure to contain the read data.">包含读取数据的结构。</param>
      <typeparam name="T" vsli:raw="The type of structure.">结构的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read in a structure of type &lt;paramref name=&quot;T&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;T&quot; /&gt; is a value type that contains one or more reference types.">
        <paramref name="position" /> 后面没有足够的字节数可供读入 <paramref name="T" /> 类型的结构。  
  
- 或 - 
 <see langword="T" /> 是包含一个或多个引用类型的值类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads structures of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into an array of type &lt;paramref name=&quot;T&quot; /&gt;.">将 <paramref name="T" /> 类型的结构从访问器读取到 <paramref name="T" /> 类型的数组中。</summary>
      <param name="position" vsli:raw="The number of bytes in the accessor at which to begin reading.">访问器中的字节偏移量，从此处开始读取。</param>
      <param name="array" vsli:raw="The array to contain the structures read from the accessor.">包含从访问器读取的结构的数组。</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; in which to place the first copied structure.">
        <paramref name="array" /> 中要将第一个复制的结构放置到的索引。</param>
      <param name="count" vsli:raw="The number of structures of type &lt;c&gt;T&lt;/c&gt; to read from the accessor.">要从访问器读取的 <c>T</c> 类型的结构数。</param>
      <typeparam name="T" vsli:raw="The type of structure.">结构的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is not large enough to contain &lt;paramref name=&quot;count&quot; /&gt; of structures (starting from &lt;paramref name=&quot;position&quot; /&gt;).">
        <paramref name="array" /> 不足够大，无法包含结构的 <paramref name="count" />（从 <paramref name="position" /> 开始）。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The number of structures read into &lt;paramref name=&quot;array&quot; /&gt;. This value can be less than &lt;paramref name=&quot;count&quot; /&gt; if there are fewer structures available, or zero if the end of the accessor is reached.">读入 <paramref name="array" /> 的结构数。 如果可用结构较少，则此值可能小于 <paramref name="count" />；如果到达访问器末尾，则为零。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary vsli:raw="Reads a Boolean value from the accessor.">从访问器读取一个布尔值。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 或 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary vsli:raw="Reads a byte value from the accessor.">从访问器读取一个字节值。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary vsli:raw="Reads a character from the accessor.">从访问器读取一个字符。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary vsli:raw="Reads a decimal value from the accessor.">从访问器读取一个小数值。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal to read is invalid.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。  
  
- 或 - 
要读取的小数无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary vsli:raw="Reads a double-precision floating-point value from the accessor.">从访问器读取一个双精度浮点值。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary vsli:raw="Reads a 16-bit integer from the accessor.">从访问器读取一个 16 位整数。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary vsli:raw="Reads a 32-bit integer from the accessor.">从访问器读取一个 32 位整数。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary vsli:raw="Reads a 64-bit integer from the accessor.">从访问器读取一个 64 位整数。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary vsli:raw="Reads an 8-bit signed integer from the accessor.">从访问器读取一个 8 位带符号整数。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary vsli:raw="Reads a single-precision floating-point value from the accessor.">从访问器读取一个单精度浮点值。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary vsli:raw="Reads an unsigned 16-bit integer from the accessor.">从访问器读取一个 16 位无符号整数。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary vsli:raw="Reads an unsigned 32-bit integer from the accessor.">从访问器读取一个 32 位无符号整数。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary vsli:raw="Reads an unsigned 64-bit integer from the accessor.">从访问器读取一个 64 位无符号整数。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">访问器中起始读取位置的字节偏移量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">
        <paramref name="position" /> 后面没有足够的字节数可供读取值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">访问器不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
      <returns vsli:raw="The value that was read.">读取的值。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary vsli:raw="Writes a Boolean value into the accessor.">将一个布尔值写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary vsli:raw="Writes a byte value into the accessor.">将一个字节值写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary vsli:raw="Writes a character into the accessor.">将一个字符写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary vsli:raw="Writes a decimal value into the accessor.">将一个小数值写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal is invalid.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。  
  
- 或 - 
小数无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value into the accessor.">将一个 <see cref="T:System.Double" /> 值写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer into the accessor.">将一个 16 位整数写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary vsli:raw="Writes a 32-bit integer into the accessor.">将一个 32 位整数写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary vsli:raw="Writes a 64-bit integer into the accessor.">将一个 64 位整数写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after position to write a value.">position 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary vsli:raw="Writes an 8-bit integer into the accessor.">将一个 8 位整数写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; into the accessor.">将一个 <see cref="T:System.Single" /> 写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary vsli:raw="Writes an unsigned 16-bit integer into the accessor.">将一个 16 位无符号整数写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary vsli:raw="Writes an unsigned 32-bit integer into the accessor.">将一个 32 位无符号整数写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary vsli:raw="Writes an unsigned 64-bit integer into the accessor.">将一个 64 位无符号整数写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">
        <paramref name="position" /> 后面没有足够的字节数可供写入值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary vsli:raw="Writes a structure into the accessor.">将一个结构写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="structure" vsli:raw="The structure to write.">要写入的结构。</param>
      <typeparam name="T" vsli:raw="The type of structure.">结构的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write a structure of type &lt;paramref name=&quot;T&quot; /&gt;.">取值函数的 <paramref name="position" /> 后面没有足够的字节数可供写入 <paramref name="T" /> 类型的结构。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> 小于零或大于访问器的容量。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes structures from an array of type &lt;paramref name=&quot;T&quot; /&gt; into the accessor.">将结构从 <paramref name="T" /> 类型的数组写入访问器。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">访问器中起始写入位置的字节偏移量。</param>
      <param name="array" vsli:raw="The array to write into the accessor.">要写入访问器的数组。</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; to start writing from.">在 <paramref name="array" /> 中从其开始写入的索引。</param>
      <param name="count" vsli:raw="The number of structures in &lt;paramref name=&quot;array&quot; /&gt; to write.">要写入的 <paramref name="array" /> 中的结构数。</param>
      <typeparam name="T" vsli:raw="The type of structure.">结构的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write the number of structures specified by &lt;paramref name=&quot;count&quot; /&gt;.">取值函数的 <paramref name="position" /> 后面没有足够的字节数可供写入 <paramref name="count" /> 所指定数量的结构。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="position" /> 小于零或大于访问器的容量。  
  
- 或 - 
 <paramref name="offset" /> 或 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">访问器不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">已释放访问器。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary vsli:raw="Determines whether the accessor is readable.">确定访问器是否可读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is readable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果访问器可读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary vsli:raw="Determines whether the accessory is writable.">确定访问器是否可写。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is writable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果访问器可写，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary vsli:raw="Gets the capacity of the accessor.">获取访问器的容量。</summary>
      <returns vsli:raw="The capacity of the accessor.">访问器的容量。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary vsli:raw="Determines whether the accessor is currently open by a process.">确定访问器当前是否由进程打开。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is open; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果访问器已打开，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">指示特性化字段或参数的默认值是 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 的实例，其中 <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> 为 <see langword="null" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IDispatchConstantAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute.">获取存储在此特性中的 <see langword="IDispatch" /> 常数。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IDispatch&quot; /&gt; constant value.">存储在此特性中的 <see langword="IDispatch" /> 常数。 只有 <see langword="null" /> 可以作为 <see langword="IDispatch" /> 常数的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This class cannot be inherited.">指示特性化字段或参数的默认值是 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> 的实例，其中 <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> 为 <see langword="null" />。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IUnknownConstantAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute.">获取存储在此特性中的 <see langword="IUnknown" /> 常数。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IUnknown&quot; /&gt; constant value.">存储在此特性中的 <see langword="IUnknown" /> 常数。 只有 <see langword="null" /> 可以作为 <see langword="IUnknown" /> 常数的值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary vsli:raw="Allows an unmanaged method to call a managed method.">允许非托管方法调用托管方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary vsli:raw="Encapsulates an array and an offset within the specified array.">封装指定数组内的数组和偏移量。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; structure.">初始化 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 结构的新实例。</summary>
      <param name="array" vsli:raw="A managed array.">托管数组。</param>
      <param name="offset" vsli:raw="The offset in bytes, of the element to be passed through platform invoke.">要通过平台调用传递的元素的偏移量（以字节为单位）。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array is larger than 2 gigabytes (GB).">数组大于 2 GB。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the specified object matches the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object.">指示指定的对象是否与当前的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象匹配。</summary>
      <param name="obj" vsli:raw="Object to compare with this instance.">要与该实例进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object matches this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果对象与此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 匹配，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Indicates whether the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance.">指示指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否与当前实例匹配。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with this instance.">要与此实例比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象与当前实例相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary vsli:raw="Returns the managed array referenced by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;.">返回此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 引用的托管数组。</summary>
      <returns vsli:raw="The managed array this instance references.">此实例引用的托管数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary vsli:raw="Returns a hash code for this value type.">返回此值类型的哈希代码。</summary>
      <returns vsli:raw="The hash code for this instance.">此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary vsli:raw="Returns the offset provided when this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; was constructed.">返回当构造此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 时提供的偏移量。</summary>
      <returns vsli:raw="The offset for this instance.">此实例的偏移量。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects have the same value.">确定两个指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否具有相同的值。</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的值与 <paramref name="a" /> 的值相同，则为 <paramref name="b" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects no not have the same value.">确定两个指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否具有不同值。</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is not the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="a" /> 的值与 <paramref name="b" /> 的值不相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary vsli:raw="Specifies whether the type should be marshaled using the Automation marshaler or a custom proxy and stub.">指定应使用自动化封送处理程序还是自定义代理和存根对类型进行封送处理。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AutomationProxyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" /> 类的新实例。</summary>
      <param name="val" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">如果应使用“自动化封送拆收器”封送类，则为 <see langword="true" />；如果应使用代理存根封送拆收器，则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary vsli:raw="Gets a value indicating the type of marshaler to use.">获取一个值，该值指示要使用的封送拆收器的类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">如果应使用“自动化封送拆收器”封送类，则为 <see langword="true" />；如果应使用代理存根封送拆收器，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary vsli:raw="Controls whether Unicode characters are converted to the closest matching ANSI characters.">控制是否将 Unicode 字符转换为最接近的匹配 ANSI 字符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.">启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BestFitMappingAttribute&quot; /&gt; class set to the value of the &lt;see cref=&quot;P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping&quot; /&gt; property.">初始化 <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> 类的新实例，并将其设置为 <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> 属性的值。</summary>
      <param name="BestFitMapping" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 指示启用最佳映射；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary vsli:raw="Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.">获取将 Unicode 字符转换为 ANSI 字符时的最佳映射行为。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果启用最佳映射则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_BSTR&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">将 <see langword="VT_BSTR" /> 类型的数据从托管代码封送到非托管代码。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; object.">使用指定的 <see cref="T:System.Object" /> 对象初始化 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 类的新实例。</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">要包装并作为 <see langword="VT_BSTR" /> 进行封送的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.String&quot; /&gt; object.">使用指定的 <see cref="T:System.String" /> 对象初始化 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 类的新实例。</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">要包装并作为 <see langword="VT_BSTR" /> 进行封送的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped &lt;see cref=&quot;T:System.String&quot; /&gt; object to marshal as type &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">获取将作为 <see langword="VT_BSTR" /> 类型进行封送的包装的 <see cref="T:System.String" /> 对象。</summary>
      <returns vsli:raw="The object that is wrapped by &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt;.">由 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary vsli:raw="Specifies the calling convention required to call methods implemented in unmanaged code.">指定调用在非托管代码中实现的方法所需的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary vsli:raw="The caller cleans the stack. This enables calling functions with &lt;see langword=&quot;varargs&quot; /&gt;, which makes it appropriate to use for methods that accept a variable number of parameters, such as &lt;see langword=&quot;Printf&quot; /&gt;.">调用方清理堆栈。 这使你能够调用具有 <see langword="varargs" /> 的函数（如 <see langword="Printf" />），使之可用于接受可变数目的参数的方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary vsli:raw="This calling convention is not supported.">不支持此调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary vsli:raw="The callee cleans the stack.">被调用方清理堆栈。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary vsli:raw="The first parameter is the &lt;see langword=&quot;this&quot; /&gt; pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.">第一个参数是 <see langword="this" /> 指针，它存储在寄存器 ECX 中。 其他参数被推送到堆栈上。 此调用约定用于对从非托管 DLL 导出的类调用方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary vsli:raw="This member is not actually a calling convention, but instead uses the default platform calling convention.">此成员实际上不是调用约定，而是使用了默认平台调用约定。 例如，在 Windows x86 上默认为 <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />，在 Linux x86 上默认为 <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary vsli:raw="Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.">指示在完全生成某个接口后为要向 COM 公开的类生成的类接口类型。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration value.">使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 枚举值初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 类的新实例。</summary>
      <param name="classInterfaceType" vsli:raw="Describes the type of interface that is generated for a class.">描述为类生成的接口的类型。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration member.">使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 类的新实例。</summary>
      <param name="classInterfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; values that describes the type of interface that is generated for a class.">
        <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值之一，描述为类生成的接口的类型。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">获取 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值，该值描述应为该类生成的接口的类型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">描述应该为该类生成哪种类型的接口的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary vsli:raw="Identifies the type of class interface that is generated for a class.">标识为类生成的类接口类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary vsli:raw="&lt;para&gt;Indicates that the class only supports late binding for COM clients. A &lt;see langword=&quot;dispinterface&quot; /&gt; for the class is automatically exposed to COM clients on request. The type library produced by Tlbexp.exe (Type Library Exporter) does not contain type information for the &lt;see langword=&quot;dispinterface&quot; /&gt; in order to prevent clients from caching the DISPIDs of the interface. The &lt;see langword=&quot;dispinterface&quot; /&gt; does not exhibit the versioning problems described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; because clients can only late-bind to the interface.&lt;/para&gt;&lt;para&gt;This is the default setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.&lt;/para&gt;">
        <para>指示该类只支持 COM 客户端的后期绑定。 在请求时，该类的 <see langword="dispinterface" /> 会自动向 COM 客户端公开。 Tlbexp.exe（类型库导出程序） 生成的类型库不包含 <see langword="dispinterface" /> 的类型信息，以防止客户端缓存接口的 DISPID。 由于客户端只能后期绑定到接口，因此 <see langword="dispinterface" /> 不会出现 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 中所述的版本控制问题。</para>
        <para>这是 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 的默认设置。</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary vsli:raw="Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using &lt;see langword=&quot;AutoDual&quot; /&gt; is strongly discouraged because of the versioning limitations described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.">指示自动为类生成双重类接口并向 COM 公开。 为该类接口生成类型信息并在类型库中发布。 由于 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 中描述的版本控制方面的限制，极力建议不要使用 <see langword="AutoDual" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary vsli:raw="&lt;para&gt;Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the &lt;see langword=&quot;IDispatch&quot; /&gt; interface. This is the recommended setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;. Using &lt;see langword=&quot;ClassInterfaceType.None&quot; /&gt; is the only way to expose functionality through interfaces implemented explicitly by the class.&lt;/para&gt;&lt;para&gt;Tlbexp.exe (Type Library Exporter) exposes the first public, COM-visible interface implemented by the class as the default interface of the coclass. In .NET Framework 2.0 and later versions, you can specify the default interface exposed to COM by using the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; attribute. If the class implements no interfaces, the first public, COM-visible interface implemented by a base class becomes the default interface (starting with the most recently derived base class and working backward). Tlbexp.exe exposes &lt;see langword=&quot;_Object&quot; /&gt; as the default interface if neither the class nor its base classes implement interfaces.&lt;/para&gt;">指示不为类生成类接口。 如果未显式实现任何接口，则该类只能通过 <see langword="IDispatch" /> 接口提供后期绑定访问。 这是 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 的推荐设置。 要通过由类显式实现的接口公开功能，唯一的方法是使用 <see langword="ClassInterfaceType.None" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary vsli:raw="Specifies the class identifier of a coclass imported from a type library.">指定从类型库导入的组件类的类标识符。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CoClassAttribute&quot; /&gt; with the class identifier of the original coclass.">用原始 coclass 的类标识符初始化 <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> 的新实例。</summary>
      <param name="coClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class identifier of the original coclass.">一个 <see cref="T:System.Type" />，它包含原始 coclass 的类标识符。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary vsli:raw="Gets the class identifier of the original coclass.">获取原始 coclass 的类标识符。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the class identifier of the original coclass.">一个 <see cref="T:System.Type" />，它包含原始 coclass 的类标识符。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CollectionsMarshal">
      <summary vsli:raw="An unsafe class that provides a set of methods to access the underlying data representations of collections.">一种不安全的类，它提供一组方法来访问集合的基础数据表示形式。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; view over the data in a list.&#xA; Items should not be added or removed from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; while the &lt;see cref=&quot;T:System.Span`1&quot; /&gt; is in use.">获取针对列表中的数据的 <see cref="T:System.Span`1" /> 视图。
使用 <see cref="T:System.Span`1" /> 时，不得在 <see cref="T:System.Collections.Generic.List`1" /> 中添加或删除项。</summary>
      <param name="list" vsli:raw="List from which to create the &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">从中创建 <see cref="T:System.Span`1" /> 的列表</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">列表中项的类型。</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Span`1&quot; /&gt; instance over the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> 上的 <see cref="T:System.Span`1" /> 实例</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary vsli:raw="Indicates the COM alias for a parameter or field type.">指示参数或字段类型的 COM 别名。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAliasNameAttribute&quot; /&gt; class with the alias for the attributed field or parameter.">使用特性化字段或参数的别名初始化 <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> 类的新实例。</summary>
      <param name="alias" vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">导入字段或参数时在类型库中找到的别名。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary vsli:raw="Gets the alias for the field or parameter as found in the type library when it was imported.">获取导入字段或参数时在类型库中找到的别名。</summary>
      <returns vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">导入字段或参数时在类型库中找到的别名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary vsli:raw="Permits late-bound registration of an event handler.">允许事件处理程序的后期绑定注册。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; class by using the specified type and a name of the event on the type.">使用指定类型和该类型的事件名称来初始化 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 类的新实例。</summary>
      <param name="type" vsli:raw="The type of object.">对象的类型。</param>
      <param name="eventName" vsli:raw="The name of an event on &lt;paramref name=&quot;type&quot; /&gt;.">有关 <paramref name="type" /> 的事件的名称。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Attaches an event handler to a COM object.">将事件处理程序附加到 COM 对象。</summary>
      <param name="target" vsli:raw="The target object that the event delegate should bind to.">事件委托应绑定到的目标对象。</param>
      <param name="handler" vsli:raw="The event delegate.">事件委托。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary vsli:raw="Gets the method that was used to add an event handler delegate to the event source.">获取用于将事件处理程序委托添加到事件源的方法。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果返回非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> 为 <see langword="true" />，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
      <returns vsli:raw="The method that was used to add an event handler delegate to the event source.">用于将事件处理程序委托添加到事件源的方法。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.">在派生类中重写时，获取一个包含应用于此成员的所有自定义特性的数组。</summary>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.">此成员属于加载到仅反射的上下文的类型。 请参阅如何：将程序集加载到仅反射上下文中。</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">无法加载自定义属性类型。</exception>
      <returns vsli:raw="An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.">一个包含所有自定义特性的数组，如果未定义任何特性，则为一个包含零个元素的数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.">在派生类中重写时，获取一个数组，该数组包含应用于此成员的指定类型的所有自定义特性。</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for. Only attributes that are assignable to this type can be returned.">要搜索的特性类型。 只能返回可分配给此类型的特性。</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context">此成员属于加载到仅反射的上下文的类型。 请参阅如何：将程序集加载到仅反射上下文中</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">无法加载自定义属性类型。</exception>
      <returns vsli:raw="An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.">一个包含指定类型的所有自定义特性的数组，如果未定义任何特性，则为一个包含零个元素的数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects for the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">返回当前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 的 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表。</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">
        <see cref="T:System.Reflection.CustomAttributeData" /> 对象的泛型列表，表示已应用到当前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 的特性的相关数据。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary vsli:raw="Returns the public or non-public methods that have been associated with an event in metadata.">返回在元数据中与某事件相关联的公共或非公共方法。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果包括非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="An array representing the methods that have been associated with the event in metadata. If there are no such methods, an empty array is returned.">一个数组，表示在元数据中已与事件相关联的方法。 如果没有此类方法，则返回空数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, returns the method that was called when the event was raised.">在派生类中重写时，返回引发该事件时调用的方法。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果返回非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> 为 <see langword="true" />，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
      <returns vsli:raw="The object that was called when the event was raised.">引发该事件时调用的对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, retrieves the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object for removing a method of the event.">在派生类中重写时，检索用于移除该事件的方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果返回非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> 为 <see langword="true" />，表示用于添加事件处理程序委托的方法为非公共的，并且调用方无权对非公共方法进行反射。</exception>
      <returns vsli:raw="The method that was used to remove an event handler delegate from the event source.">用于从事件源中移除事件处理程序委托的方法。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instances of the specified attribute are applied to this member.">指示是否对此成员应用指定特性的一个或多个实例。</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for.">要搜索的特性类型。</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified attribute has been applied to this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已对此成员应用指定特性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Detaches an event handler from a COM object.">将事件处理程序从 COM 对象分离。</summary>
      <param name="target" vsli:raw="The target object that the event delegate is bound to.">事件委托所绑定的目标对象。</param>
      <param name="handler" vsli:raw="The event delegate.">事件委托。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The event does not have a public &lt;see langword=&quot;remove&quot; /&gt; accessor.">该事件没有公共 <see langword="remove" /> 访问器。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The handler that was passed in cannot be used.">无法使用传入的处理程序。</exception>
      <exception cref="T:System.Reflection.TargetException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; and the event is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; is not declared on the target.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch &lt;see cref=&quot;T:System.Exception&quot; /&gt; instead.">
        <block subset="none" type="note">
          <para>  
 在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />。</para>
        </block>
        <paramref name="target" /> 参数为 <see langword="null" />，并且此事件不是静态事件。  
  
- 或 - 
未在目标上声明 <see cref="T:System.Reflection.EventInfo" /> 。</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The caller does not have access permission to the member.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, &lt;see cref=&quot;T:System.MemberAccessException&quot; /&gt;, instead.">
        <block subset="none" type="note">
          <para>  
 在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。</para>
        </block>  
  
 调用方没有对成员的访问权限。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary vsli:raw="Gets the attributes for this event.">获取此事件的属性。</summary>
      <returns vsli:raw="The read-only attributes for this event.">此事件的只读特性。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">获取声明该成员的类。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class that declares this member.">声明该成员的类的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary vsli:raw="Gets the metadata token associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">获取与当前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 对象关联的元数据令牌。</summary>
      <returns vsli:raw="A 32-bit Integer that represents the metadata token.">表示元数据标记的32位整数。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary vsli:raw="Gets the module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">获取与当前 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 对象关联的模块。</summary>
      <returns vsli:raw="The module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">与当前对象关联的模块 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary vsli:raw="Gets the name of the current member.">获取当前成员的名称。</summary>
      <returns vsli:raw="The name of this member.">此成员的名称。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to initialize this instance.">获取用于初始化此实例的类对象。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to initialize the current object.">用于初始化当前对象的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary vsli:raw="Indicates to a COM client that all classes in the current version of an assembly are compatible with classes in an earlier version of the assembly.">向 COM 客户端指示程序集当前版本中的所有类与该程序集早期版本中的类兼容。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComCompatibleVersionAttribute&quot; /&gt; class with the major version, minor version, build, and revision numbers of the assembly.">使用程序集的主版本、次版本、内部版本号和修订号初始化 <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> 类的新实例。</summary>
      <param name="major" vsli:raw="The major version number of the assembly.">程序集的主版本号。</param>
      <param name="minor" vsli:raw="The minor version number of the assembly.">程序集的次版本号。</param>
      <param name="build" vsli:raw="The build number of the assembly.">程序集的生成号。</param>
      <param name="revision" vsli:raw="The revision number of the assembly.">程序集的修订号。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary vsli:raw="Gets the build number of the assembly.">获取程序集的生成号。</summary>
      <returns vsli:raw="The build number of the assembly.">程序集的生成号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the assembly.">获取程序集的主版本号。</summary>
      <returns vsli:raw="The major version number of the assembly.">程序集的主版本号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the assembly.">获取程序集的次版本号。</summary>
      <returns vsli:raw="The minor version number of the assembly.">程序集的次版本号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary vsli:raw="Gets the revision number of the assembly.">获取程序集的修订号。</summary>
      <returns vsli:raw="The revision number of the assembly.">程序集的修订号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary vsli:raw="Indicates that information was lost about a class or interface when it was imported from a type library to an assembly.">指示从类型库向程序集导入类或接口时丢失了有关信息。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComConversionLossAttribute&quot; /&gt; class.">初始化 <see langword="ComConversionLossAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary vsli:raw="Specifies a default interface to expose to COM. This class cannot be inherited.">指定要向 COM 公开的默认接口。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; object as the default interface exposed to COM.">以指定的 <see cref="T:System.Type" /> 对象作为向 COM 公开的默认接口初始化 <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> 类的新实例。</summary>
      <param name="defaultInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; value indicating the default interface to expose to COM.">一个 <see cref="T:System.Type" /> 值，指示要向 COM 公开的默认接口。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">获取 <see cref="T:System.Type" /> 对象，该对象指定要向 COM 公开的默认接口。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">指定要向 COM 公开的默认接口的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary vsli:raw="Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.">标识源接口和实现事件接口方法的类，事件接口在从 COM 类型库中导入组件类时生成。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComEventInterfaceAttribute&quot; /&gt; class with the source interface and event provider class.">用源接口和事件提供程序类初始化 <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> 类的新实例。</summary>
      <param name="SourceInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the original source interface from the type library. COM uses this interface to call back to the managed class.">一个 <see cref="T:System.Type" />，其中包含类型库中的原始源接口。 COM 使用此接口回调到托管类。</param>
      <param name="EventProvider" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">一个 <see cref="T:System.Type" />，其中包含实现事件接口方法的类。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary vsli:raw="Gets the class that implements the methods of the event interface.">获取实现事件接口方法的类。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">一个 <see cref="T:System.Type" />，其中包含实现事件接口方法的类。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary vsli:raw="Gets the original source interface from the type library.">从类型库获取原始源接口。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the source interface.">一个包含源接口的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary vsli:raw="Provides methods that enable .NET delegates that handle events to be added and removed from COM objects.">提供允许 .NET Framework 委托的方法，这些委托处理将从 COM 对象添加和删除的事件。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Adds a delegate to the invocation list of events originating from a COM object.">将委托添加到源自 COM 对象的事件的调用列表。</summary>
      <param name="rcw" vsli:raw="The COM object that triggers the events the caller would like to respond to.">触发事件的 COM 对象，调用方希望响应这些事件。</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">COM 对象用来触发事件的源接口的标识符。</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">源接口上的方法的调度标识符。</param>
      <param name="d" vsli:raw="The delegate to invoke when the COM event is fired.">要在激发 COM 事件时调用的委托。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Removes a delegate from the invocation list of events originating from a COM object.">从源自 COM 对象的事件的调用列表中移除委托。</summary>
      <param name="rcw" vsli:raw="The COM object the delegate is attached to.">委托附加到的 COM 对象。</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">COM 对象用来触发事件的源接口的标识符。</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">源接口上的方法的调度标识符。</param>
      <param name="d" vsli:raw="The delegate to remove from the invocation list.">要从调用列表中移除的委托。</param>
      <returns vsli:raw="The delegate that was removed from the invocation list.">已从调用列表中移除的委托。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary vsli:raw="The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.">当 COM 方法调用返回一个无法识别的 HRESULT 时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with default values.">使用默认值初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class from serialization data.">从序列化数据初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that holds the serialized object data.">承载序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that supplies the contextual information about the source or destination.">提供有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message.">用指定的消息初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解释异常原因的错误消息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message and error code.">使用指定的消息和错误代码初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that indicates the reason the exception occurred.">指示所发生异常的原因的消息。</param>
      <param name="errorCode" vsli:raw="The error code (HRESULT) value associated with this exception.">与此异常关联的错误代码 (HRESULT) 值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary vsli:raw="Converts the contents of the exception to a string.">将异常的内容转换为字符串。</summary>
      <returns vsli:raw="A string containing the &lt;see cref=&quot;P:System.Exception.HResult&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;, and &lt;see cref=&quot;P:System.Exception.StackTrace&quot; /&gt; properties of the exception.">包含异常的 <see cref="P:System.Exception.HResult" />、<see cref="P:System.Exception.Message" />、<see cref="P:System.Exception.InnerException" /> 和 <see cref="P:System.Exception.StackTrace" /> 属性的字符串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary vsli:raw="Indicates that the attributed type was previously defined in COM.">指示先前在 COM 中定义的特性化类型。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.">初始化 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary vsli:raw="Identifies how to expose an interface to COM.">标识如何向 COM 公开接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary vsli:raw="Indicates that the interface is exposed to COM as a dual interface, which enables both early and late binding. &lt;see cref=&quot;F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual&quot; /&gt; is the default value.">指示接口作为双重接口对 COM 公开，从而启用早期绑定和后期绑定。 默认值为 <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a dispinterface, which enables late binding only.">指示接口作为 dispinterface 对 COM 公开，这样将只启用后期绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a Windows Runtime interface.">指示接口作为 Windows 运行时 接口对 COM 公开。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary vsli:raw="Indicates that an interface is exposed to COM as an interface that is derived from IUnknown, which enables only early binding.">指示接口作为从 IUnknown 派生的接口对 COM 公开，这样将只启用早期绑定。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary vsli:raw="Describes the type of a COM member.">描述 COM 成员的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary vsli:raw="The member is a normal method.">该成员是一个一般方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary vsli:raw="The member gets properties.">该成员获取属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary vsli:raw="The member sets properties.">该成员设置属性。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.">指定从 COM 中注册使用的程序集时要调用的方法；这样可以在注册进程中执行用户编写的代码。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComRegisterFunctionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary vsli:raw="Identifies a list of interfaces that are exposed as COM event sources for the attributed class.">标识针对特性化类作为 COM 事件源公开的接口列表。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the name of the event source interface.">使用事件源接口名称初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterfaces" vsli:raw="A null-delimited list of fully qualified event source interface names.">事件源接口的完全限定名列表，名称之间用 null 分隔。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the type to use as a source interface.">使用要用作源接口的类型初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source interface.">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">使用要用作源接口的类型初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">默认源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">使用要用作源接口的类型初始化 <see langword="ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">默认源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">使用要用作源接口的类型初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">默认源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">源接口的 <see cref="T:System.Type" />。</param>
      <param name="sourceInterface4" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">源接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary vsli:raw="Gets the fully qualified name of the event source interface.">获取事件源接口的完全限定名。</summary>
      <returns vsli:raw="The fully qualified name of the event source interface.">事件源接口的完全限定名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary vsli:raw="Specifies the requested behavior when setting up an advise sink or a caching connection with an object.">当设置建议接收器或缓存与对象的连接时，指定请求的行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary vsli:raw="For data advisory connections, assures accessibility to data.">对于数据通知连接，请确保数据的可访问性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary vsli:raw="For data advisory connections (&lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;), this flag requests the data object not to send data when it calls &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">对于数据通知连接（<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />），此标志请求数据对象在它调用 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 时不要发送数据。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary vsli:raw="Requests that the object make only one change notification or cache update before deleting the connection.">请求对象在删除连接前只进行一次更改通知或缓存更新。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary vsli:raw="Requests that the object not wait for the data or view to change before making an initial call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; (for data or view advisory connections) or updating the cache (for cache connections).">请求对象在对 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 进行初始调用（对于数据或视图通知连接）或更新缓存（对于缓存连接）之前不要等待数据或视图更改。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary vsli:raw="This value is used by DLL object applications and object handlers that perform the drawing of their objects.">此值由执行对象绘制的 DLL 对象应用程序和对象处理程序使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary vsli:raw="Synonym for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN&quot; /&gt;, which is used more often.">
        <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" /> 的同义词，该词更为常用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary vsli:raw="For cache connections, this flag updates the cached representation only when the object containing the cache is saved.">对于缓存连接，此标志只在保存包含缓存的对象时更新缓存的表示形式。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary vsli:raw="Stores the parameters that are used during a moniker binding operation.">存储名字对象绑定操作中使用的参数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary vsli:raw="Specifies the size, in bytes, of the &lt;see langword=&quot;BIND_OPTS&quot; /&gt; structure.">指定 <see langword="BIND_OPTS" /> 结构的大小（以字节为单位）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary vsli:raw="Indicates the amount of time (clock time in milliseconds, as returned by the &lt;see langword=&quot;GetTickCount&quot; /&gt; function) that the caller specified to complete the binding operation.">指示调用方指定的用于完成绑定操作的时间（由 <see langword="GetTickCount" /> 函数返回的以毫秒为单位的时钟时间）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary vsli:raw="Controls aspects of moniker binding operations.">控制名字对象绑定操作的各个方面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary vsli:raw="Represents flags that should be used when opening the file that contains the object identified by the moniker.">表示当打开包含由该名字对象标识的对象的文件时应使用的标志。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary vsli:raw="Contains a pointer to a bound-to &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure, &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure, or an &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">包含指向绑定到 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构、<see cref="T:System.Runtime.InteropServices.VARDESC" /> 结构或 <see langword="ITypeComp" /> 接口的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure.">表示指向 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary vsli:raw="Represents a pointer to an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ITypeComp&quot; /&gt; interface.">表示指向 <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" /> 接口的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure.">表示指向 <see cref="T:System.Runtime.InteropServices.VARDESC" /> 结构的指针。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary vsli:raw="Identifies the calling convention used by a method described in a METHODDATA structure.">标识 METHODDATA 结构中描述的方法所使用的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary vsli:raw="Indicates that the C declaration (CDECL) calling convention is used for a method.">指示对方法使用 C 声明 (CDECL) 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.">指示对方法使用 Macintosh Pascal (MACPASCAL) 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary vsli:raw="Indicates the end of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.CALLCONV&quot; /&gt; enumeration.">指示 <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> 枚举的结尾。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.">指示对方法使用 Macintosh Programmers' Workbench (MPW) CDECL 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.">指示对方法使用 Macintosh Programmers' Workbench (MPW) PASCAL 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary vsli:raw="Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.">指示对方法使用 MSC Pascal (MSCPASCAL) 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary vsli:raw="Indicates that the Pascal calling convention is used for a method.">指示对方法使用 Pascal 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary vsli:raw="This value is reserved for future use.">保留此值供将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary vsli:raw="Indicates that the standard calling convention (STDCALL) is used for a method.">指示对方法使用标准调用约定 (STDCALL)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary vsli:raw="Indicates that the standard SYSCALL calling convention is used for a method.">指示对方法使用标准 SYSCALL 调用约定。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary vsli:raw="Describes a connection that exists to a given connection point.">描述与给定连接点存在的连接。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary vsli:raw="Represents a connection token that is returned from a call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;.">表示从 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 调用中返回的连接标记。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary vsli:raw="Represents a pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on a connected advisory sink. The caller must call &lt;see langword=&quot;IUnknown::Release&quot; /&gt; on this pointer when the &lt;see langword=&quot;CONNECTDATA&quot; /&gt; structure is no longer needed.">表示指向已连接的通知接收器上的 <see langword="IUnknown" /> 接口的指针。 当不再需要 <see langword="IUnknown::Release" /> 结构时，调用方必须在此指针上调用 <see langword="CONNECTDATA" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary vsli:raw="Specifies the direction of the data flow in the &lt;paramref name=&quot;dwDirection&quot; /&gt; parameter of the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; method. This determines the formats that the resulting enumerator can enumerate.">在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 方法的 <paramref name="dwDirection" /> 参数中指定数据流的方向。 这确定了生成的枚举器可枚举的格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">请求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 为可在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 中指定的格式提供枚举数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">请求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 为可在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> 中指定的格式提供枚举数。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary vsli:raw="Identifies the type description being bound to.">标识要绑定到的类型说明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary vsli:raw="Indicates that a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure was returned.">指示返回了 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary vsli:raw="Indicates that an &lt;see langword=&quot;IMPLICITAPPOBJ&quot; /&gt; was returned.">指示返回了 <see langword="IMPLICITAPPOBJ" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary vsli:raw="Indicates an end-of-enumeration marker.">指示枚举结尾标记。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary vsli:raw="Indicates that no match was found.">指示未找到任何匹配项。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;TYPECOMP&quot; /&gt; was returned.">指示返回了 <see langword="TYPECOMP" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;VARDESC&quot; /&gt; was returned.">指示返回了 <see langword="VARDESC" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary vsli:raw="Contains the arguments passed to a method or property by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">包含由 <see langword="IDispatch::Invoke" /> 传递到方法或属性的参数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary vsli:raw="Represents the count of arguments.">表示参数的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary vsli:raw="Represents the count of named arguments.">表示命名参数的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary vsli:raw="Represents the dispatch IDs of named arguments.">表示命名参数的调度 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary vsli:raw="Represents a reference to the array of arguments.">表示对参数数组的引用。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary vsli:raw="Specifies the desired data or view aspect of the object when drawing or getting data.">在绘制或获取数据时，指定所需对象数据或对象视图方位。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary vsli:raw="A representation of an object that lets that object be displayed as an embedded object inside a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.">对象的表示形式，它使该对象在容器内显示为嵌入的对象。 通常为复合文档对象指定此值。 该演示可提供给屏幕或打印机。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary vsli:raw="A representation of an object on the screen as though it were printed to a printer using the Print command from the File menu. The described data may represent a sequence of pages.">对象在屏幕上的表示形式，与使用“文件”菜单上的“打印”命令在打印机上打印出的效果相同********。 该描述数据可以表示页序列。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary vsli:raw="An iconic representation of an object.">对象的图标表示形式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary vsli:raw="A thumbnail representation of an object that lets that object be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended), device-independent bitmap potentially wrapped in a metafile.">对象的缩略图表示形式，使对象可在浏览工具中显示。 该缩略图大约为 120 x 120 像素、16 色（推荐）、独立于设备的位图，该位图可能包含在图元文件中。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary vsli:raw="Contains the type description and process transfer information for a variable, function, or a function parameter.">包含变量、函数或函数参数的类型说明和进程传输信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary vsli:raw="Contains information about an element.">包含有关元素的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary vsli:raw="Identifies the type of the element.">标识元素的类型。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary vsli:raw="Contains information about an element.">包含有关元素的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary vsli:raw="Contains information for remoting the element.">包含有关远程处理该元素的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary vsli:raw="Contains information about the parameter.">包含有关参数的信息。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary vsli:raw="Describes the exceptions that occur during &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">描述在 <see langword="IDispatch::Invoke" /> 过程中发生的异常。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary vsli:raw="Describes the error intended for the customer.">描述用户可能遇到的错误。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary vsli:raw="Contains the fully-qualified drive, path, and file name of a Help file that contains more information about the error.">包含帮助文件的完全限定驱动器、路径和文件名，该帮助文件包含有关错误的更多信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary vsli:raw="Indicates the name of the source of the exception. Typically, this is an application name.">指示异常源的名称。 该名称通常是一个应用程序名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary vsli:raw="Indicates the Help context ID of the topic within the Help file.">指示该主题在帮助文件中的帮助上下文 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary vsli:raw="Represents a pointer to a function that takes an &lt;see cref=&quot;T:System.Runtime.InteropServices.EXCEPINFO&quot; /&gt; structure as an argument and returns an HRESULT value. If deferred fill-in is not desired, this field is set to &lt;see langword=&quot;null&quot; /&gt;.">表示指向一个函数的指针，该函数采用 <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> 结构作为参数并返回 HRESULT 值。 如果不想推迟填充，则将此字段设置为 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary vsli:raw="This field is reserved; it must be set to &lt;see langword=&quot;null&quot; /&gt;.">此字段为保留字段；必须将其设置为 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary vsli:raw="A return value describing the error.">描述错误的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary vsli:raw="Represents an error code identifying the error.">表示用于标识错误的错误代码。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary vsli:raw="This field is reserved; it must be set to 0.">此字段为保留字段；必须将其设置为 0。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary vsli:raw="Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.">表示从 1601 年 1 月 1 日起 100 纳秒间隔的数量。 此结构是 64 位值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary vsli:raw="Specifies the high 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">指定 <see langword="FILETIME" /> 的高 32 位。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary vsli:raw="Specifies the low 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">指定 <see langword="FILETIME" /> 的低 32 位。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary vsli:raw="Represents a generalized Clipboard format.">表示通用的剪贴板格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary vsli:raw="Specifies the particular clipboard format of interest.">指定有意义的特殊剪贴板格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration constants that indicates how much detail should be contained in the rendering.">指定一个 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 枚举常数，用以确定呈现中应包含多少详细信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary vsli:raw="Specifies part of the aspect when the data must be split across page boundaries.">在必须跨页边界拆分数据时指定方位的部分。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary vsli:raw="Specifies a pointer to a &lt;see langword=&quot;DVTARGETDEVICE&quot; /&gt; structure containing information about the target device that the data is being composed for.">指定指向 <see langword="DVTARGETDEVICE" /> 结构的指针，该结构中包含有关该数据所构成的目标设备的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration constants, which indicates the type of storage medium used to transfer the object's data.">指定一个 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 枚举常数，该常数指示用于传输对象数据的存储介质的类型。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary vsli:raw="Defines a function description.">定义函数说明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary vsli:raw="Specifies the calling convention of a function.">指定函数的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary vsli:raw="Counts the total number of parameters.">计算参数的总数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary vsli:raw="Counts the optional parameters.">计算可选参数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary vsli:raw="Counts the permitted return values.">计算允许的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary vsli:raw="Contains the return type of the function.">包含函数的返回类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary vsli:raw="Specifies whether the function is virtual, static, or dispatch-only.">指定函数是虚拟的、静态的还是仅支持调度的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary vsli:raw="Specifies the type of a property function.">指定属性函数的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary vsli:raw="Indicates the array of &lt;see cref=&quot;F:System.Runtime.InteropServices.ELEMDESC&quot; /&gt;.">指示 <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" /> 的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary vsli:raw="Stores the count of errors a function can return on a 16-bit system.">存储函数可在 16 位系统中返回的错误的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary vsli:raw="Identifies the function member ID.">标识函数成员 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary vsli:raw="Specifies the offset in the VTBL for &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL&quot; /&gt;.">指定 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" /> 在 VTBL 中的偏移量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; of a function.">指示函数的 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a function.">标识定义函数属性的常量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary vsli:raw="The function that supports data binding.">支持数据绑定的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary vsli:raw="The function that best represents the object. Only one function in a type can have this attribute.">最佳表示此对象的函数。 一个类型中只能有一个函数可以具有此特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">允许进行一种优化，使编译器查找“abc”类型上名为“xyz”的成员。 如果找到这样的成员，而且该成员标志为默认集合的某元素的访问器函数，则生成对该成员函数的调用。 可以对调度接口和接口中的成员使用；不能对模块使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE&quot; /&gt; must also be set.">作为可绑定函数显示给用户的函数。 还必须设置 <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">不应将此函数显示给用户，尽管它存在并且为可绑定函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="Mapped as individual bindable properties.">作为单独的可绑定属性映射。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">该属性出现在对象浏览器而非属性浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">将该接口标记为具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the call is allowed to set the property.">设置后，任何对设置此属性的方法的调用都首先导致对 <see langword="IPropertyNotifySink::OnRequestEdit" /> 的调用。 <see langword="OnRequestEdit" /> 的实现确定是否允许该调用设置属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary vsli:raw="The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.">此函数不应该是可从宏语言访问的。 此标志适用于系统级函数或类型浏览器不应显示的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary vsli:raw="The function returns an object that is a source of events.">该函数返回一个对象，此对象为事件的源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">类型信息成员是在用户界面中显示的默认成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;. If an error occurs during the function, the caller can call &lt;see langword=&quot;GetLastError&quot; /&gt; to retrieve the error code.">该函数支持 <see langword="GetLastError" />。 如果在函数过程中发生错误，则调用方可以调用 <see langword="GetLastError" /> 来检索错误代码。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary vsli:raw="Defines how to access a function.">定义如何访问函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary vsli:raw="The function can be accessed only through &lt;see langword=&quot;IDispatch&quot; /&gt;.">该函数只能通过 <see langword="IDispatch" /> 访问。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">该函数通过 <see langword="static" /> 地址访问，并采用隐式 <see langword="this" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary vsli:raw="The function is accessed through the virtual function table (VTBL), and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">该函数通过虚函数表 (VTBL) 访问，并采用隐式 <see langword="this" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and does not take an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">该函数通过 <see langword="static" /> 地址访问，不采用隐式 <see langword="this" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary vsli:raw="The function is accessed in the same way as &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL&quot; /&gt;, except the function has an implementation.">该函数与 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" /> 的访问方式相同，不同之处在于该函数具有实现。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;IAdviseSink&quot; /&gt; interface.">提供 <see langword="IAdviseSink" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has changed from the running state to the loaded state.  This method is called by a server.">向所有已注册的通知接收器通知以下情况：对象已从运行状态更改为加载状态。  此方法由服务器调用。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Notifies all data objects currently registered advisory sinks that data in the object has changed.">向当前已注册通知接收器的所有数据对象通知以下情况：对象中的数据已更改。</summary>
      <param name="format" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt;, passed by reference, which describes the format, target device, rendering, and storage information of the calling data object.">一个由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />，它描述调用数据对象的格式、目标设备、呈现和存储信息。</param>
      <param name="stgmedium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, which defines the storage medium (global memory, disk file, storage object, stream object, Graphics Device Interface (GDI) object, or undefined) and ownership of that medium for the calling data object.">一个由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />，它为调用数据对象定义存储介质（共用内存、磁盘文件、存储对象、流对象、图形设备接口 (GDI) 对象或未定义介质）和该介质的所属权。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been renamed. This method is called by a server.">向所有已注册的通知接收器通知以下情况：对象已重命名。 此方法由服务器调用。</summary>
      <param name="moniker" vsli:raw="A pointer to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on the new full moniker of the object.">一个指针，它指向对象的新的、完整的名字对象上的 <see langword="IMoniker" /> 接口。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been saved. This method is called by a server.">向所有已注册的通知接收器通知以下情况：对象已保存。 此方法由服务器调用。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary vsli:raw="Notifies an object's registered advisory sinks that its view has changed. This method is called by a server.">向对象的已注册通知接收器通知以下情况：其视图已更改。 此方法由服务器调用。</summary>
      <param name="aspect" vsli:raw="The aspect, or view, of the object. Contains a value taken from the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration.">对象的方位或视图。 包含一个从 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 枚举中提取的值。</param>
      <param name="index" vsli:raw="The portion of the view that has changed. Currently, only -1 is valid.">已更改的视图部分。 当前，只有 -1 有效。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface.">提供 <see langword="IBindCtx" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Enumerates the strings that are the keys of the internally maintained table of contextual object parameters.">枚举字符串，这些字符串是在内部维护的上下文对象参数表的项。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the object parameter enumerator. This parameter is passed uninitialized.">此方法返回时，包含对对象参数枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Returns the current binding options stored in the current bind context.">返回当前存储在当前绑定上下文中的绑定选项。</summary>
      <param name="pbindopts" vsli:raw="A pointer to the structure to receive the binding options.">指向接收绑定选项的结构的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary vsli:raw="Looks up the given key in the internally maintained table of contextual object parameters and returns the corresponding object, if one exists.">在内部维护的上下文对象参数表中查找给定的项并返回相应的对象（如果此对象存在的话）。</summary>
      <param name="pszKey" vsli:raw="The name of the object to search for.">要搜索的对象名称。</param>
      <param name="ppunk" vsli:raw="When this method returns, contains the object interface pointer. This parameter is passed uninitialized.">此方法返回时，包含对象接口指针。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary vsli:raw="Returns access to the Running Object Table (ROT) relevant to this binding process.">返回对与此绑定进程相关的运行对象表 (ROT) 的访问权。</summary>
      <param name="pprot" vsli:raw="When this method returns, contains a reference to the Running Object Table (ROT). This parameter is passed uninitialized.">此方法返回时，包含对运行对象表 (ROT) 的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary vsli:raw="Registers the passed object as one of the objects that has been bound during a moniker operation and that should be released when the operation is complete.">将传递的对象注册为已在名字对象操作期间绑定且应在此操作完成之后释放的对象之一。</summary>
      <param name="punk" vsli:raw="The object to register for release.">要为释放而注册的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary vsli:raw="Registers the specified object pointer under the specified name in the internally maintained table of object pointers.">以内部维护的对象指针表中的指定名称注册指定的对象指针。</summary>
      <param name="pszKey" vsli:raw="The name to register &lt;paramref name=&quot;punk&quot; /&gt; with.">用于注册 <paramref name="punk" /> 的名称。</param>
      <param name="punk" vsli:raw="The object to register.">要注册的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary vsli:raw="Releases all the objects currently registered with the bind context by using the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)&quot; /&gt; method.">释放所有当前由 <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" /> 方法用绑定上下文注册的对象。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary vsli:raw="Removes the object from the set of registered objects that need to be released.">从需要释放的注册对象集中移除该对象。</summary>
      <param name="punk" vsli:raw="The object to unregister for release.">要为释放而注销的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary vsli:raw="Revokes the registration of the object currently found under the specified key in the internally maintained table of contextual object parameters, if that key is currently registered.">撤消当前在指定项（位于内部维护的上下文对象参数表中）下可找到的对象的注册（如果该项当前已注册）。</summary>
      <param name="pszKey" vsli:raw="The key to unregister.">要注销的键。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the specified key was successfully removed from the table; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">如果从表中成功移除指定键，则为 <see langword="S_OK" /><see langword="HRESULT" /> 值；否则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Stores a block of parameters in the bind context. These parameters will apply to later &lt;see langword=&quot;UCOMIMoniker&quot; /&gt; operations that use this bind context.">在绑定上下文中存储参数块。 这些参数将应用于稍后使用此绑定上下文的 <see langword="UCOMIMoniker" /> 操作。</summary>
      <param name="pbindopts" vsli:raw="The structure containing the binding options to set.">包含要设置的绑定选项的结构。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface.">提供 <see langword="IConnectionPoint" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary vsli:raw="Establishes an advisory connection between the connection point and the caller's sink object.">在连接点和调用方的接收器对象之间建立一个通知连接。</summary>
      <param name="pUnkSink" vsli:raw="A reference to the sink to receive calls for the outgoing interface managed by this connection point.">对接收器的引用，该接收器为此连接点所管理的输出接口接收调用。</param>
      <param name="pdwCookie" vsli:raw="When this method returns, contains the connection cookie. This parameter is passed uninitialized.">此方法返回时，包含连接 Cookie。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates an enumerator object for iteration through the connections that exist to this connection point.">创建枚举数对象，以便循环访问到此连接点的现有连接。</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the newly created enumerator. This parameter is passed uninitialized.">此方法返回时，包含新创建的枚举数。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary vsli:raw="Returns the IID of the outgoing interface managed by this connection point.">返回由此连接点管理的输出接口的 IID。</summary>
      <param name="pIID" vsli:raw="When this parameter returns, contains the IID of the outgoing interface managed by this connection point. This parameter is passed uninitialized.">此参数返回时，包含由此连接点管理的输出接口的 IID。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface pointer to the connectable object that conceptually owns this connection point.">检索指向在概念上拥有此连接点的可连接对象的 <see langword="IConnectionPointContainer" /> 接口指针。</summary>
      <param name="ppCPC" vsli:raw="When this parameter returns, contains the connectable object's &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface. This parameter is passed uninitialized.">此参数返回时，包含可连接对象的 <see langword="IConnectionPointContainer" /> 接口。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary vsli:raw="Terminates an advisory connection previously established through the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">终止先前通过 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 方法建立的顾问连接。</summary>
      <param name="dwCookie" vsli:raw="The connection cookie previously returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">先前从 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 方法返回的连接 cookie。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface.">提供 <see langword="IConnectionPointContainer" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.">创建在可连接对象中支持的所有连接点的枚举数，每个 IID 一个连接点。</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the interface pointer of the enumerator. This parameter is passed uninitialized.">此方法返回时，包含枚举数的接口指针。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary vsli:raw="Asks the connectable object if it has a connection point for a particular IID, and if so, returns the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface pointer to that connection point.">询问可连接对象是否具有某个特定 IID 的连接点，如果是，则返回指向此连接点的 <see langword="IConnectionPoint" /> 接口指针。</summary>
      <param name="riid" vsli:raw="A reference to the outgoing interface IID whose connection point is being requested.">对输出接口 IID 的引用，此输出接口 IID 的连接点正在被请求。</param>
      <param name="ppCP" vsli:raw="When this method returns, contains the connection point that manages the outgoing interface &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含管理输出接口 <paramref name="riid" /> 的连接点。 此参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IDataObject&quot; /&gt; interface.">提供 <see langword="IDataObject" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary vsli:raw="Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.">在数据对象和通知接收器之间创建连接。 此方法由对象进行调用，该对象支持通知接收器并使通知接收器能收到有关对象数据中的更改的通知。</summary>
      <param name="pFormatetc" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.">由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，它定义以后的通知将使用的格式、目标设备、方面和介质。</param>
      <param name="advf" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; values that specifies a group of flags for controlling the advisory connection.">一个 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 值，它指定用于控制通知连接的一组标志。</param>
      <param name="adviseSink" vsli:raw="A pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface on the advisory sink that will receive the change notification.">指向将接收更改通知的通知接收器上的 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 接口的指针。</param>
      <param name="connection" vsli:raw="When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)&quot; /&gt;. If this value is zero, the connection was not established. This parameter is passed uninitialized.">此方法返回时，包含指向标识此连接的 DWORD 标记的指针。 以后可以使用此标记来删除通知连接，方法是将该标记发送至 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />。 如果此值为零，则未建立连接。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The advisory connection was created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; This method is not implemented on the data object.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; The data object does not support change notification.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> S_OK</term><description> 已创建通知连接。</description></item><item><term> E_NOTIMPL</term><description> 此方法未在数据对象上实现。</description></item><item><term> DV_E_LINDEX</term><description><see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 有一个无效值；当前，只支持 -1。</description></item><item><term> DV_E_FORMATETC</term><description><paramref name="pFormatetc" /> 参数有一个无效值。</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> 该数据对象不支持更改通知。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary vsli:raw="Destroys a notification connection that had been previously established.">销毁以前建立的通知连接。</summary>
      <param name="connection" vsli:raw="A DWORD token that specifies the connection to remove. Use the value returned by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; when the connection was originally established.">指定要移除的连接的 DWORD 标记。 使用最初建立连接时 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 返回的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates an object that can be used to enumerate the current advisory connections.">创建可用于对当前的通知连接进行枚举的对象。</summary>
      <param name="enumAdvise" vsli:raw="When this method returns, contains an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA&quot; /&gt; that receives the interface pointer to the new enumerator object. If the implementation sets &lt;paramref name=&quot;enumAdvise&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.">此方法返回时，包含 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" />，它接收指向新枚举数对象的接口指针。 如果该实现将 <paramref name="enumAdvise" /> 设置为 <see langword="null" />，则此时没有到通知接收器的连接。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="This method supports the standard return value E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object is successfully instantiated or there are no connections.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; This object does not support advisory notifications.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">此方法支持标准返回值 E_OUTOFMEMORY 以及下面的值：  
  
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> S_OK</term><description> 枚举数对象已成功实例化或没有连接。</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> 此对象不支持通知。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary vsli:raw="Creates an object for enumerating the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures for a data object. These structures are used in calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">创建一个用于枚举数据对象的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的对象。 这些结构用于对 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> 的调用中。</summary>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DATADIR&quot; /&gt; values that specifies the direction of the data.">指定数据方向的 <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> 值之一。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object was successfully created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; The direction specified by the &lt;paramref name=&quot;direction&quot; /&gt; parameter is not supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_S_USEREG&lt;/term&gt;&lt;description&gt; Requests that OLE enumerate the formats from the registry.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">此方法支持 E_INVALIDARG 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> S_OK</term><description> 已成功创建枚举数对象。</description></item><item><term> E_NOTIMPL</term><description> 由 <paramref name="direction" /> 参数指定的方向不受支持。</description></item><item><term> OLE_S_USEREG</term><description> OLE 枚举注册表中的格式的请求。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Provides a standard &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that is logically equivalent to a more complex structure. Use this method to determine whether two different &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures would return the same data, removing the need for duplicate rendering.">提供一个在逻辑上与更复杂的结构等效的标准 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构。 使用此方法可以确定两个不同的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构是否将返回相同的数据，从而无需重复呈现。</summary>
      <param name="formatIn" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored.">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义调用方在后续调用（如 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />）中检索数据时将要使用的格式、介质和目标设备。 在此情况下，<see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成员并无意义，应将其忽略。</param>
      <param name="formatOut" vsli:raw="When this method returns, contains a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that contains the most general information possible for a specific rendering, making it canonically equivalent to &lt;c&gt;formatetcIn&lt;/c&gt;. The caller must allocate this structure and the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)&quot; /&gt; method must fill in the data. To retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;, the caller uses the supplied value of &lt;paramref name=&quot;formatOut&quot; /&gt;, unless the value supplied is &lt;see langword=&quot;null&quot; /&gt;. This value is &lt;see langword=&quot;null&quot; /&gt; if the method returns &lt;see langword=&quot;DATA_S_SAMEFORMATETC&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored. This parameter is passed uninitialized.">此方法返回时，结果包含指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针（该结构中包含可能用于特定呈现的最常规信息），使其规范地等效于 <c>formatetcIn</c>。 调用方必须分配此结构，并且 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> 方法必须填充数据。 为了在后续调用（如 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />）中检索数据，调用方将使用提供的 <paramref name="formatOut" /> 值，除非提供的值为 <see langword="null" />。 如果方法返回 <see langword="null" />，则此值为 <see langword="DATA_S_SAMEFORMATETC" />。 在此情况下，<see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成员并无意义，应将其忽略。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The returned &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure is different from the one that was passed.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DATA_S_SAMEFORMATETC&lt;/term&gt;&lt;description&gt; The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures are the same and &lt;see langword=&quot;null&quot; /&gt; is returned in the &lt;paramref name=&quot;formatOut&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> S_OK</term><description> 返回的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构与传递的结构不同。</description></item><item><term> DATA_S_SAMEFORMATETC</term><description><see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构都相同，并且在 <paramref name="formatOut" /> 参数中返回 <see langword="null" />。</description></item><item><term> DV_E_LINDEX</term><description><see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 有一个无效值；当前，只支持 -1。</description></item><item><term> DV_E_FORMATETC</term><description><paramref name="pFormatetc" /> 参数有一个无效值。</description></item><item><term> OLE_E_NOTRUNNING</term><description> 应用程序未运行。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. The &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method, which is called by a data consumer, renders the data described in the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure and transfers it through the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure. The caller then assumes responsibility for releasing the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure.">从源数据对象中获取数据。 数据使用者调用的 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法将呈现指定的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构中描述的数据，并通过指定的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构传输该数据。 然后，调用方对释放 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构的责任进行假定。</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义传递数据时将使用的格式、介质和目标设备。 使用布尔型 OR 运算符可以指定多个介质，从而允许方法在指定的介质中做出最佳选择。</param>
      <param name="medium" vsli:raw="When this method returns, contains a pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that indicates the storage medium containing the returned data through its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed&quot; /&gt; member, and the responsibility for releasing the medium through the value of its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the receiver of the medium is responsible for releasing it; otherwise, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; points to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on the appropriate object so its &lt;see langword=&quot;Release&quot; /&gt; method can be called. The medium must be allocated and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构的指针，该结构通过其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> 成员指示包含返回数据的存储介质，并通过其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员的值指示释放介质的责任。 如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 为 <see langword="null" />，则介质接收方负责释放介质；否则，<see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 指向相应对象上的 <see langword="IUnknown" /> 接口，以便调用其 <see langword="Release" /> 方法。 介质必须由 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 进行分配和填充。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. This method, which is called by a data consumer, differs from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method in that the caller must allocate and free the specified storage medium.">从源数据对象中获取数据。 数据使用者调用的此方法与 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法的区别在于调用方必须分配并释放指定的存储介质。</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt;, and only the following &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; values are valid: &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL&quot; /&gt;, or &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE&quot; /&gt;.">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义传递数据时将使用的格式、介质和目标设备。 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 中只能指定一个介质，并且只有下列 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 值有效：<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" /> 或 <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />。</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The caller must also free the medium. The implementation of this method must always supply a value of &lt;see langword=&quot;null&quot; /&gt; for the &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that this parameter points to.">由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />，它定义包含正在传输的数据的存储介质。 介质必须由调用方分配并由 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 填充。 调用方还必须释放介质。 此方法的实现必须始终为此参数指向的 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 结构的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 成员提供一个 <see langword="null" /> 值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Determines whether the data object is capable of rendering the data described in the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure. Objects attempting a paste or drop operation can call this method before calling &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; to get an indication of whether the operation may be successful.">确定数据对象是否能够呈现 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构中所描述的数据。 尝试执行粘贴或删除操作的对象可以在调用 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 来获取操作是否成功的指示之前调用此方法。</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use for the query.">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义要用于查询的格式、介质和目标设备。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; A subsequent call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; would probably be successful.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; An invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; An invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_TYMED&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_DVASPECT&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 
 <list type="table"><listheader><term> 值</term><description> 说明</description></listheader><item><term> S_OK</term><description> 对 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 的后续调用可能会成功。</description></item><item><term> DV_E_LINDEX</term><description><see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 的无效值；当前，只支持 -1。</description></item><item><term> DV_E_FORMATETC</term><description><paramref name="pFormatetc" /> 参数的无效值。</description></item><item><term> DV_E_TYMED</term><description> 无效的 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> 值。</description></item><item><term> DV_E_DVASPECT</term><description> 无效的 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> 值。</description></item><item><term> OLE_E_NOTRUNNING</term><description> 应用程序未运行。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary vsli:raw="Transfers data to the object that implements this method. This method is called by an object that contains a data source.">将数据传输至实现此方法的对象。 此方法由包含数据源的对象调用。</summary>
      <param name="formatIn" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.">由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，该结构定义数据对象在解释存储介质中包含的数据时所使用的格式。</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure, passed by reference, that defines the storage medium in which the data is being passed.">由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构，该结构定义其中正在传递数据的存储介质。</param>
      <param name="release" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that the data object called, which implements &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. &lt;see langword=&quot;false&quot; /&gt; to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.">
        <see langword="true" /> 指定调用的数据对象，该对象实现 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />，并在调用返回后拥有存储介质。 这意味着，数据对象在使用介质后，必须调用 <see langword="ReleaseStgMedium" /> 函数来释放该介质。 如果为 <see langword="false" />，则指定调用方保留存储介质的所有权，所调用的数据对象只能在调用期间使用存储介质。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary vsli:raw="Contains information needed for transferring a structure element, parameter, or function return value between processes.">包含在进程间传输结构元素、参数或函数返回值所需的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary vsli:raw="Reserved; set to &lt;see langword=&quot;null&quot; /&gt;.">保留；设置为 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary vsli:raw="Indicates an &lt;see cref=&quot;T:System.Runtime.InteropServices.IDLFLAG&quot; /&gt; value describing the type.">指示描述类型的 <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> 值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">说明如何在进程间传输结构元素、参数或函数返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">参数将信息从调用方传递给被调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">参数是客户端应用程序的本地标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">参数将信息从调用方返回到被调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">参数是该成员的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">不会指定该参数传递还是接收信息。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnectionPoints&quot; /&gt; interface.">管理 <see langword="IEnumConnectionPoints" /> 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">检索枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of &lt;see langword=&quot;IConnectionPoint&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中返回的 <see langword="IConnectionPoint" /> 引用的数目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">此方法返回时，包含对枚举连接的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">此方法返回时，包含对 <paramref name="rgelt" /> 中枚举的连接的实际数目的引用。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">将枚举序列重置到开头。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">跳过枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">枚举中要跳过的元素数目。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnections&quot; /&gt; interface.">管理 <see langword="IEnumConnections" /> 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">检索枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.CONNECTDATA&quot; /&gt; structures to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中返回的 <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> 结构的数目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">此方法返回时，包含对枚举连接的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">此方法返回时，包含对 <paramref name="rgelt" /> 中枚举的连接的实际数目的引用。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">将枚举序列重置到开头。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">跳过枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">枚举中要跳过的元素数目。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumFORMATETC&quot; /&gt; interface.">提供 <see langword="IEnumFORMATETC" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">检索枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中返回的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 引用的数目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references. This parameter is passed uninitialized.">此方法返回时，包含对枚举的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 引用的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含对 <paramref name="rgelt" /> 中枚举的实际引用数的引用。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">将枚举序列重置到开头。</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">具有值 <see langword="S_OK" /> 的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">跳过枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">枚举中要跳过的元素数目。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumMoniker&quot; /&gt; interface.">管理 <see langword="IEnumMoniker" /> 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">检索枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of monikers to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中返回的名字对象的数目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated monikers. This parameter is passed uninitialized.">此方法返回时，包含对枚举的名字对象的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of monikers enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">此方法返回时，包含对在 <paramref name="rgelt" /> 中枚举的名字对象的实际数目的引用。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">将枚举序列重置到开头。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">跳过枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">枚举中要跳过的元素数目。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumSTATDATA&quot; /&gt; interface.">提供 <see langword="IEnumSTATDATA" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">检索枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中返回的 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 引用的数目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references. This parameter is passed uninitialized.">此方法返回时，包含对枚举的 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 引用的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched" vsli:raw="When this parameter returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">此参数返回时，包含对 <paramref name="rgelt" /> 中枚举的实际引用数的引用。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">将枚举序列重置到开头。</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">具有值 <see langword="S_OK" /> 的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">跳过枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">枚举中要跳过的元素数目。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumString&quot; /&gt; interface.">管理 <see langword="IEnumString" /> 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">此方法返回时，包含对该新创建的枚举数的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">检索枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of strings to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">要在 <paramref name="rgelt" /> 中返回的字符串的数目。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated strings. This parameter is passed uninitialized.">此方法返回时，包含对枚举字符串的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of strings enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">此方法返回时，包含对在 <paramref name="rgelt" /> 中枚举的字符串的实际数目的引用。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">将枚举序列重置到开头。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">跳过枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">枚举中要跳过的元素数目。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumVARIANT&quot; /&gt; interface.">管理 <see langword="IEnumVARIANT" /> 接口的定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT&quot; /&gt; reference to the newly created enumerator.">对新创建枚举器的 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> 引用。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">检索枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of elements to return in &lt;c&gt;rgelt&lt;/c&gt;.">要在 rgelt<c></c> 中返回的元素的数目。</param>
      <param name="rgVar" vsli:raw="When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.">此方法返回时，包含对枚举元素的引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of elements enumerated in &lt;c&gt;rgelt&lt;/c&gt;.">此方法返回时，包含对在 <c>rgelt</c> 中枚举的元素的实际数目的引用。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">将枚举序列重置到开头。</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">具有值 <see langword="S_OK" /> 的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">跳过枚举序列中指定数目的项。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">枚举中要跳过的元素数目。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">如果跳过的元素的数目与 <paramref name="celt" /> 参数相等，则为 <see langword="S_OK" />；否则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IMoniker&quot; /&gt; interface, with COM functionality from &lt;see langword=&quot;IPersist&quot; /&gt; and &lt;see langword=&quot;IPersistStream&quot; /&gt;.">提供 <see langword="IMoniker" /> 接口的托管定义，具有 <see langword="IPersist" /> 和 <see langword="IPersistStream" /> 中的 COM 功能。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Uses the moniker to bind to the object that it identifies.">使用名字对象绑定到它所标识的对象。</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used in this binding operation.">对在此绑定操作中使用的绑定上下文对象上的 <see langword="IBindCtx" /> 接口的引用。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="riidResult" vsli:raw="The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.">接口的接口标识符 (IID)，客户端打算使用该接口与名字对象标识的对象进行通信。</param>
      <param name="ppvResult" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riidResult&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含对 <paramref name="riidResult" /> 请求的接口的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Retrieves an interface pointer to the storage that contains the object identified by the moniker.">检索指向存储（该存储包含名字对象所标识的对象）的接口指针。</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used during this binding operation.">对在此绑定操作过程中使用的绑定上下文对象上的 <see langword="IBindCtx" /> 接口的引用。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="riid" vsli:raw="The interface identifier (IID) of the storage interface requested.">所请求的存储接口的接口标识符 (IID)。</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含对 <paramref name="riid" /> 请求的接口的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Creates a new moniker based on the common prefix that this moniker shares with another moniker.">基于此名字对象与另一名字对象共有的公共前缀创建新的名字对象。</summary>
      <param name="pmkOther" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on another moniker to compare with the current moniker for a common prefix.">对另一名字对象上的 <see langword="IMoniker" /> 接口的引用，将使用该名字对象与当前名字对象进行比较，以获得公共前缀。</param>
      <param name="ppmkPrefix" vsli:raw="When this method returns, contains the moniker that is the common prefix of the current moniker and &lt;paramref name=&quot;pmkOther&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含作为当前名字对象和 <paramref name="pmkOther" /> 的公共前缀的名字对象。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Combines the current moniker with another moniker, creating a new composite moniker.">将当前名字对象与另一名字对象组合，创建一个新的复合名字对象。</summary>
      <param name="pmkRight" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on a moniker to append to the end of the current moniker.">对名字对象上的 <see langword="IMoniker" /> 接口的引用，该引用将追加到当前名字对象的末尾。</param>
      <param name="fOnlyIfNotGeneric" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the caller requires a nongeneric composition. The operation proceeds only if &lt;paramref name=&quot;pmkRight&quot; /&gt; is a moniker class that the current moniker can combine with in some way other than forming a generic composite. &lt;see langword=&quot;false&quot; /&gt; to indicate that the method can create a generic composite if necessary.">
        <see langword="true" /> 指示调用方需要非通用复合。 仅当 <paramref name="pmkRight" /> 为当前名字对象可以采用不同于构成通用复合的方式与其组合的名字对象类时，该操作才继续。 而 <see langword="false" /> 指示该方法可以在必要时创建通用复合。</param>
      <param name="ppmkComposite" vsli:raw="When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.">此方法返回时，包含对结果复合名字对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.">提供一个指向枚举器（该枚举器可枚举复合名字对象的组件）的指针。</summary>
      <param name="fForward" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enumerate the monikers from left to right. &lt;see langword=&quot;false&quot; /&gt; to enumerate from right to left.">
        <see langword="true" /> 表示按从左到右的顺序枚举名字对象。 而 <see langword="false" /> 表示按从右到左的顺序枚举。</param>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.">此方法返回时，包含对名字对象的枚举数对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">检索对象的类标识符 (CLSID)。</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains the CLSID. This parameter is passed uninitialized.">此方法返回时，包含 CLSID。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary vsli:raw="Gets the display name, which is a user-readable representation of the current moniker.">获取显示名称，该名称是当前名字对象的用户可读表示形式。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this operation.">对在此操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="ppszDisplayName" vsli:raw="When this method returns, contains the display name string. This parameter is passed uninitialized.">此方法返回时，包含显示名称字符串。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary vsli:raw="Returns the size, in bytes, of the stream needed to save the object.">返回保存该对象所需的流的大小（以字节为单位）。</summary>
      <param name="pcbSize" vsli:raw="When this method returns, contains a &lt;see langword=&quot;long&quot; /&gt; value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.">此方法返回时，包含 <see langword="long" /> 值，该值指示保存此对象所需的流的大小（以字节为单位）。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Provides a number representing the time that the object identified by the current moniker was last changed.">提供一个数字，该数字表示当前名字对象所标识的对象的上次更改时间。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">对要在此绑定操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">如果名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="pFileTime" vsli:raw="When this method returns, contains the time of the last change. This parameter is passed uninitialized.">此方法返回时，包含上次更改时间。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary vsli:raw="Calculates a 32-bit integer using the internal state of the moniker.">使用该名字对象的内部状态计算 32 位整数。</summary>
      <param name="pdwHash" vsli:raw="When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.">此方法返回时，包含此名字对象的哈希值。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.">提供一个名字对象，该名字对象在被复合到当前名字对象或一个结构相似的名字对象的右边时，将不复合到任何对象。</summary>
      <param name="ppmk" vsli:raw="When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.">此方法返回时，包含一个名字对象，它是当前名字对象的逆命题。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary vsli:raw="Checks the object for changes since it was last saved.">检查该对象自上次保存以来所发生的更改。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the object has changed; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">如果该对象已更改，则为 <see langword="S_OK" /><see langword="HRESULT" /> 值；否则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Compares the current moniker with a specified moniker and indicates whether they are identical.">将当前名字对象与指定的名字对象进行比较，并指示它们是否相同。</summary>
      <param name="pmkOtherMoniker" vsli:raw="A reference to the moniker to use for comparison.">对用于比较的名字对象的引用。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the monikers are identical; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">如果名字对象相同，则为 <see langword="S_OK" /><see langword="HRESULT" /> 值；否则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the object that is identified by the current moniker is currently loaded and running.">确定由当前名字对象标识的对象当前是否已加载并正在运行。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">对要在此绑定操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.">如果当前名字对象是复合名字对象的一部分，则为对当前名字对象左边的名字对象的引用。</param>
      <param name="pmkNewlyRunning" vsli:raw="A reference to the moniker most recently added to the Running Object Table (ROT).">对最近添加到运行对象表 (ROT) 的名字对象的引用。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is running; an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is not running; or an &lt;see langword=&quot;E_UNEXPECTED&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">如果名字对象处于运行状态，则为 <see langword="S_OK" /><see langword="HRESULT" /> 值；如果名字对象不处于运行状态，则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值；否则为 <see langword="E_UNEXPECTED" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary vsli:raw="Indicates whether this moniker is of one of the system-supplied moniker classes.">指示此名字对象是否属于系统提供的名字对象类之一。</summary>
      <param name="pdwMksys" vsli:raw="When this method returns, contains a pointer to an integer that is one of the values from the &lt;see langword=&quot;MKSYS&quot; /&gt; enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.">此方法返回时，包含指向一个整数的指针，该整数是 <see langword="MKSYS" /> 枚举值之一并引用 COM 名字对象类之一。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is a system moniker; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">如果名字对象为系统名字对象，则为 <see langword="S_OK" /><see langword="HRESULT" /> 值；否则为 <see langword="S_FALSE" /><see langword="HRESULT" /> 值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary vsli:raw="Initializes an object from the stream where it was previously saved.">从以前保存对象的流中初始化对象。</summary>
      <param name="pStm" vsli:raw="The stream that the object is loaded from.">从中加载对象的流。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Reads as many characters of the specified display name as the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)&quot; /&gt; understands and builds a moniker corresponding to the portion read.">读取指定的显示名称中 <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> 能够理解的全部字符并生成一个与读取的部分相对应的名字对象。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">对要在此绑定操作中使用的绑定上下文的引用。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker that has been built from the display name up to this point.">对迄今为止已经从显示名称生成的名字对象的引用。</param>
      <param name="pszDisplayName" vsli:raw="A reference to the string containing the remaining display name to parse.">对包含要分析的剩余显示名称的字符串的引用。</param>
      <param name="pchEaten" vsli:raw="When this method returns, contains the number of characters that were consumed in parsing &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含分析 <paramref name="pszDisplayName" /> 时所使用的字符数。 此参数未经初始化即被传递。</param>
      <param name="ppmkOut" vsli:raw="When this method returns, contains a reference to the moniker that was built from &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含对从 <paramref name="pszDisplayName" /> 生成的名字对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.">返回简化的名字对象，它是与当前名字对象引用同一对象但能够用相等或更高的效率绑定的另一个名字对象。</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context to use in this binding operation.">对在此绑定操作中使用的绑定上下文中的 <see langword="IBindCtx" /> 接口的引用。</param>
      <param name="dwReduceHowFar" vsli:raw="A value that specifies how far the current moniker should be reduced.">指定当前名字对象简化程度的值。</param>
      <param name="ppmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker.">对当前名字对象左边的名字对象的引用。</param>
      <param name="ppmkReduced" vsli:raw="When this method returns, contains a reference to the reduced form of the current moniker, which can be &lt;see langword=&quot;null&quot; /&gt; if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.">此方法返回时，包含对当前名字对象的简化形式的引用（如果发生错误或当前名字对象被简化为无，则可以为 <see langword="null" />）。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.">提供一个名字对象，该名字对象在被追加到当前名字对象（或一个有相似结构的名字对象）时生成指定名字对象。</summary>
      <param name="pmkOther" vsli:raw="A reference to the moniker to which a relative path should be taken.">对应该对其采用相对路径的名字对象的引用。</param>
      <param name="ppmkRelPath" vsli:raw="When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.">此方法返回时，包含对相关名字对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary vsli:raw="Saves an object to the specified stream.">将对象保存到指定流。</summary>
      <param name="pStm" vsli:raw="The stream to which the object is saved.">将对象保存到的流。</param>
      <param name="fClearDirty" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to clear the modified flag after the save is complete; otherwise &lt;see langword=&quot;false&quot; /&gt;.">若在保存完成之后清除修改后的标志，则为 <see langword="true" />；否则为 <see langword="false" /></param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary vsli:raw="Defines the attributes of an implemented or inherited interface of a type.">定义类型的实现接口或继承接口的属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary vsli:raw="The interface or dispinterface represents the default for the source or sink.">该接口或调度接口表示源或接收器的默认值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary vsli:raw="Sinks receive events through the virtual function table (VTBL).">接收器通过虚函数表 (VTBL) 接收事件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary vsli:raw="The member should not be displayed or programmable by users.">不应显示该成员，用户也不应对该成员进行编程。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary vsli:raw="This member of a coclass is called rather than implemented.">调用而不是实现 coclass 的此成员。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary vsli:raw="Specifies how to invoke a function by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">指定如何通过 <see langword="IDispatch::Invoke" /> 来调用函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary vsli:raw="The member is called using a normal function invocation syntax.">使用常规函数调用语法调用该成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary vsli:raw="The function is invoked using a normal property access syntax.">使用常规属性访问语法来调用该函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary vsli:raw="The function is invoked using a property value assignment syntax.">使用属性值赋值语法调用该函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary vsli:raw="The function is invoked using a property reference assignment syntax.">使用属性引用赋值语法调用该函数。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IPersistFile&quot; /&gt; interface, with functionality from &lt;see langword=&quot;IPersist&quot; /&gt;.">提供具有 <see langword="IPersistFile" /> 中的功能的 <see langword="IPersist" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">检索对象的类标识符 (CLSID)。</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains a reference to the CLSID. This parameter is passed uninitialized.">此方法返回时，包含对 CLSID 的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary vsli:raw="Retrieves either the absolute path to the current working file of the object or, if there is no current working file, the default file name prompt of the object.">检索该对象的当前工作文件的绝对路径，或者，如果没有当前工作文件，则检索该对象的默认文件名提示。</summary>
      <param name="ppszFileName" vsli:raw="When this method returns, contains the address of a pointer to a zero-terminated string containing the path for the current file, or the default file name prompt (such as *.txt). This parameter is passed uninitialized.">此方法返回时，包含指向一个以零终止的字符串的指针的地址，该字符串中包含当前文件的路径或者默认的文件名提示（如 *.txt）。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary vsli:raw="Checks an object for changes since it was last saved to its current file.">检查对象自上次保存到其当前文件以来是否更改。</summary>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the file has changed since it was last saved; &lt;see langword=&quot;S_FALSE&quot; /&gt; if the file has not changed since it was last saved.">如果文件自上次保存以来已经更改，则为 <see langword="S_OK" />；如果文件自上次保存以来尚未更改，则为 <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary vsli:raw="Opens the specified file and initializes an object from the file contents.">打开指定文件并从文件内容初始化对象。</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to open.">以零结尾的字符串，包含要打开的文件的绝对路径。</param>
      <param name="dwMode" vsli:raw="A combination of values from the &lt;see langword=&quot;STGM&quot; /&gt; enumeration to indicate the access mode in which to open &lt;paramref name=&quot;pszFileName&quot; /&gt;.">
        <see langword="STGM" /> 枚举中值的组合，指示用来打开 <paramref name="pszFileName" /> 的访问模式。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary vsli:raw="Saves a copy of the object into the specified file.">将该对象的副本保存到指定文件。</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to which the object is saved.">以零结尾的字符串，包含将该对象保存到的文件的绝对路径。</param>
      <param name="fRemember" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to used the &lt;paramref name=&quot;pszFileName&quot; /&gt; parameter as the current working file; otherwise &lt;see langword=&quot;false&quot; /&gt;.">将 <paramref name="pszFileName" /> 参数用作当前工作文件时为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary vsli:raw="Notifies the object that it can write to its file.">通知该对象它可以写入它的文件。</summary>
      <param name="pszFileName" vsli:raw="The absolute path of the file where the object was previously saved.">以前保存该对象的文件的绝对路径。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IRunningObjectTable&quot; /&gt; interface.">提供 <see langword="IRunningObjectTable" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Enumerates the objects currently registered as running.">枚举当前注册为运行对象的对象。</summary>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains the new enumerator for the Running Object Table (ROT). This parameter is passed uninitialized.">此方法返回时，包含运行对象表 (ROT) 的新枚举器。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary vsli:raw="Returns the registered object if the supplied object name is registered as running.">如果提供的对象名注册为运行对象，则返回该注册对象。</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">对要在运行对象表 (ROT) 中搜索的名字对象的引用。</param>
      <param name="ppunkObject" vsli:raw="When this method returns, contains the requested running object. This parameter is passed uninitialized.">此方法返回时，包含请求的运行对象。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">一个 <see langword="HRESULT" /> 值，该值指示操作是成功还是失败。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Searches for this moniker in the Running Object Table (ROT) and reports the recorded time of change, if present.">在运行对象表 (ROT) 中搜索此名字对象并报告所记录的更改时间（如果存在的话）。</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">对要在运行对象表 (ROT) 中搜索的名字对象的引用。</param>
      <param name="pfiletime" vsli:raw="When this object returns, contains the objects last change time. This parameter is passed uninitialized.">此对象返回时，包含对象的上次更改时间。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">一个 <see langword="HRESULT" /> 值，该值指示操作是成功还是失败。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the specified moniker is currently registered in the Running Object Table (ROT).">确定指定名字对象当前是否在运行对象表 (ROT) 中注册。</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">对要在运行对象表 (ROT) 中搜索的名字对象的引用。</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">一个 <see langword="HRESULT" /> 值，该值指示操作是成功还是失败。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Notes the time that a particular object changed so &lt;see langword=&quot;IMoniker::GetTimeOfLastChange&quot; /&gt; can report an appropriate change time.">记录特定对象发生更改的时间，以便 <see langword="IMoniker::GetTimeOfLastChange" /> 可以报告相应更改时间。</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry of the changed object.">已更改对象的运行对象表 (ROT) 项。</param>
      <param name="pfiletime" vsli:raw="A reference to the object's last change time.">对对象的上次更改时间的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Registers that the supplied object has entered the running state.">注册提供的对象已进入运行状态。</summary>
      <param name="grfFlags" vsli:raw="Specifies whether the Running Object Table's (ROT) reference to &lt;paramref name=&quot;punkObject&quot; /&gt; is weak or strong, and controls access to the object through its entry in the ROT.">指定运行对象表 (ROT) 对 <paramref name="punkObject" /> 的引用是弱引用还是强引用，并通过对象在 ROT 中的项控制对它的访问。</param>
      <param name="punkObject" vsli:raw="A reference to the object being registered as running.">对注册为运行对象的对象的引用。</param>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker that identifies &lt;paramref name=&quot;punkObject&quot; /&gt;.">对标识 <paramref name="punkObject" /> 的名字对象的引用。</param>
      <returns vsli:raw="A value that can be used to identify this ROT entry in subsequent calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)&quot; /&gt;.">一个值，该值可用于在随后对 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" /> 的调用中标识此 ROT 项。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary vsli:raw="Unregisters the specified object from the Running Object Table (ROT).">从运行对象表 (ROT) 中注销指定的对象。</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry to revoke.">要撤消的运行对象表 (ROT) 项。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IStream&quot; /&gt; interface, with &lt;see langword=&quot;ISequentialStream&quot; /&gt; functionality.">提供具有 <see langword="ISequentialStream" /> 功能的 <see langword="IStream" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary vsli:raw="Creates a new stream object with its own seek pointer that references the same bytes as the original stream.">创建具有自己的搜索指针的一个新的流对象，该指针引用与原始流相同的字节。</summary>
      <param name="ppstm" vsli:raw="When this method returns, contains the new stream object. This parameter is passed uninitialized.">在此方法返回时，包含新的流对象。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary vsli:raw="Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.">确保对在事务模式中打开的流对象的任何更改都在父存储中反映出来。</summary>
      <param name="grfCommitFlags" vsli:raw="A value that controls how the changes for the stream object are committed.">控制如何提交对流对象的更改的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.">将指定的字节数从流中的当前搜索指针复制到其他流中的当前搜索指针。</summary>
      <param name="pstm" vsli:raw="A reference to the destination stream.">对目标流的引用。</param>
      <param name="cb" vsli:raw="The number of bytes to copy from the source stream.">要从源流复制的字节数。</param>
      <param name="pcbRead" vsli:raw="On successful return, contains the actual number of bytes read from the source.">成功返回时包含从源读取的实际字节数。</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the destination.">成功返回时包含写入到目标的实际字节数。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Restricts access to a specified range of bytes in the stream.">限制对流中特定范围的字节的访问。</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">范围开始的字节偏移量。</param>
      <param name="cb" vsli:raw="The length of the range, in bytes, to restrict.">要限制的范围的长度，以字节为单位。</param>
      <param name="dwLockType" vsli:raw="The requested restrictions on accessing the range.">针对访问该范围的请求的限制。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.">将指定数目的字节从流对象读入到以当前搜索指针开始的内存。</summary>
      <param name="pv" vsli:raw="When this method returns, contains the data read from the stream. This parameter is passed uninitialized.">在此方法返回时，包含从流读取的数据。 此参数未经初始化即被传递。</param>
      <param name="cb" vsli:raw="The number of bytes to read from the stream object.">要从流对象读取的字节数。</param>
      <param name="pcbRead" vsli:raw="A pointer to a &lt;see langword=&quot;ULONG&quot; /&gt; variable that receives the actual number of bytes read from the stream object.">一个指向 <see langword="ULONG" /> 变量的指针，该变量接收从流对象实际读取的字节数。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary vsli:raw="Discards all changes that have been made to a transacted stream since the last &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)&quot; /&gt; call.">放弃自上一个 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> 调用后对事务流进行的所有更改。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary vsli:raw="Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.">将搜索指针更改为相对于流开始、流结束或当前搜索指针的新位置。</summary>
      <param name="dlibMove" vsli:raw="The displacement to add to &lt;paramref name=&quot;dwOrigin&quot; /&gt;.">要添加到 <paramref name="dwOrigin" /> 的位移。</param>
      <param name="dwOrigin" vsli:raw="The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.">搜索的源点。 该起始地址可以是文件的开头、当前查找指针或文件的结尾。</param>
      <param name="plibNewPosition" vsli:raw="On successful return, contains the offset of the seek pointer from the beginning of the stream.">在成功返回时，包含距流的开始的搜索指针的偏移量。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary vsli:raw="Changes the size of the stream object.">更改流对象的大小。</summary>
      <param name="libNewSize" vsli:raw="The new size of the stream as a number of bytes.">以字节数为单位的流的新大小。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.STATSTG&quot; /&gt; structure for this stream.">检索此流的 <see cref="T:System.Runtime.InteropServices.STATSTG" /> 结构。</summary>
      <param name="pstatstg" vsli:raw="When this method returns, contains a &lt;see langword=&quot;STATSTG&quot; /&gt; structure that describes this stream object. This parameter is passed uninitialized.">此方法返回时，包含描述此流对象的 <see langword="STATSTG" /> 结构。 此参数未经初始化即被传递。</param>
      <param name="grfStatFlag" vsli:raw="Members in the &lt;see langword=&quot;STATSTG&quot; /&gt; structure that this method does not return, thus saving some memory allocation operations.">在 <see langword="STATSTG" /> 结构中指定此方法不返回的成员，这样就省去了一些内存分配操作。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Removes the access restriction on a range of bytes previously restricted with the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)&quot; /&gt; method.">取消对以前使用 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> 方法限制的对某一范围字节的访问限制。</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">范围开始的字节偏移量。</param>
      <param name="cb" vsli:raw="The length, in bytes, of the range to restrict.">要限制的范围的长度，以字节为单位。</param>
      <param name="dwLockType" vsli:raw="The access restrictions previously placed on the range.">以前对范围施加的访问限制。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a specified number of bytes into the stream object starting at the current seek pointer.">将指定数目的字节写入以当前搜索指针开始的流对象。</summary>
      <param name="pv" vsli:raw="The buffer to write this stream to.">要从此流写入到的缓冲区。</param>
      <param name="cb" vsli:raw="The number of bytes to write to the stream.">要写入流的字节数。</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;, this method does not provide the actual number of bytes written.">在成功返回时，包含写入流对象的实际字节数。 如果调用方将此指针设置为 <see cref="F:System.IntPtr.Zero" />，则此方法不提供写入的实际字节数。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">提供 <see langword="ITypeComp" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary vsli:raw="Maps a name to a member of a type, or binds global variables and functions contained in a type library.">将名称映射到类型的成员，或者绑定类型库中包含的全局变量和函数。</summary>
      <param name="szName" vsli:raw="The name to bind.">要绑定的名称。</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; computed by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">由 <see langword="LHashValOfNameSys" /> 计算的 <paramref name="szName" /> 的哈希值。</param>
      <param name="wFlags" vsli:raw="A flags word containing one or more of the invoke flags defined in the &lt;see langword=&quot;INVOKEKIND&quot; /&gt; enumeration.">标志字，包含一个或多个在 <see langword="INVOKEKIND" /> 枚举中定义的调用标志。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to the type description that contains the item to which it is bound, if a &lt;see langword=&quot;FUNCDESC&quot; /&gt; or &lt;see langword=&quot;VARDESC&quot; /&gt; was returned. This parameter is passed uninitialized.">此方法返回时，包含对类型说明（包含将其绑定到的项）的引用（如果返回了 <see langword="FUNCDESC" /> 或 <see langword="VARDESC" />）。 此参数未经初始化即被传递。</param>
      <param name="pDescKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;DESCKIND&quot; /&gt; enumerator that indicates whether the name bound-to is a &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;TYPECOMP&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含对 <see langword="DESCKIND" /> 枚举数的引用，该枚举数指示绑定到的名称是 <see langword="VARDESC" />、<see langword="FUNCDESC" /> 还是 <see langword="TYPECOMP" />。 此参数未经初始化即被传递。</param>
      <param name="pBindPtr" vsli:raw="When this method returns, contains a reference to the bound-to &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;ITypeComp&quot; /&gt; interface. This parameter is passed uninitialized.">此方法返回时，包含对绑定到的 <see langword="VARDESC" />、<see langword="FUNCDESC" /> 或 <see langword="ITypeComp" /> 接口的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Binds to the type descriptions contained within a type library.">绑定到包含在类型库中的类型说明。</summary>
      <param name="szName" vsli:raw="The name to bind.">要绑定的名称。</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; determined by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">由 <see langword="LHashValOfNameSys" /> 确定的 <paramref name="szName" /> 的哈希值。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeInfo&quot; /&gt; of the type to which &lt;paramref name=&quot;szName&quot; /&gt; was bound. This parameter is passed uninitialized.">此方法返回时，包含对将 <paramref name="szName" /> 绑定到的类型的 <see langword="ITypeInfo" /> 的引用。 此参数未经初始化即被传递。</param>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeComp&quot; /&gt; variable. This parameter is passed uninitialized.">此方法返回时，包含对 <see langword="ITypeComp" /> 变量的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary vsli:raw="Provides the managed definition of the Component Automation ITypeInfo interface.">提供组件自动化 ITypeInfo 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">检索静态函数或变量（如那些在 DLL 中定义的静态函数或变量）的地址。</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">要检索的 <see langword="static" /> 成员地址的成员 ID。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">指定该成员是否为属性（如果是，还将指定它属于哪种属性）的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">此方法返回时，包含对 <see langword="static" /> 成员的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">创建描述组件类 (coclass) 的类型的新实例。</summary>
      <param name="pUnkOuter" vsli:raw="The object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">作为控制 <see langword="IUnknown" /> 的对象。</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">接口的 IID，调用方将使用该接口与结果对象进行通信。</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">此方法返回时，包含对已创建对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">检索类型库，该类型库包含此类型说明和它在该类型库中的索引。</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">此方法返回时，包含对包含类型库的引用。 此参数未经初始化即被传递。</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">此方法返回时，包含对包含类型库中的类型说明的索引的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">检索 DLL 中函数的入口点的说明或规范。</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">成员函数的 ID，要返回该成员函数的 DLL 入口说明。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">指定由 <paramref name="memid" /> 标识的成员种类的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">如果不为 <see langword="null" />，则此函数将 <paramref name="pBstrDllName" /> 设置为包含 DLL 名称的 <see langword="BSTR" />。</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">如果不为 <see langword="null" />，则此函数将 lpbstrName<c></c> 设置为包含入口点名称的 <see langword="BSTR" />。</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">如果不为 <see langword="null" />，并且此函数是按序号定义的，则 lpwOrdinal<c></c> 被设置为指向该序号。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">从文档字符串、完整的帮助文件名和路径以及帮助主题的上下文 ID 中检索指定的类型说明。</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">要返回其文档的成员的 ID。</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">此方法返回时，包含项方法的名称。 此参数未经初始化即被传递。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">此方法返回时，包含指定项的文档字符串。 此参数未经初始化即被传递。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">此方法返回时，包含对与指定项相关联的帮助上下文的引用。 此参数未经初始化即被传递。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">此方法返回时，包含帮助文件的完全限定名。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">检索包含有关指定函数的信息的 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。</summary>
      <param name="index" vsli:raw="The index of the function description to return.">要返回的函数说明的索引。</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">此方法返回时，包含对描述指定函数的 <see langword="FUNCDESC" /> 结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">在成员名和成员 ID 之间以及参数名和参数 ID 之间映射。</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">要映射的名称数组。</param>
      <param name="cNames" vsli:raw="The count of names to map.">要映射的名称计数。</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">此方法返回时，包含对在其中放置名称映射的数组的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">在类型说明中检索某个已实现的接口或基接口的 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 值。</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">已实现的接口或基接口的索引。</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">此方法返回时，包含对 <see langword="IMPLTYPEFLAGS" /> 枚举的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">检索封送处理信息。</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">成员 ID，它指示需要哪些封送处理信息。</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">此方法返回时，包含对 <see langword="opcode" /> 字符串的引用，该字符串用于封送处理由引用类型说明描述的结构的字段；如果没有要返回的信息，则返回 <see langword="null" />。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">检索具有与指定函数 ID 相对应的指定成员 ID（或者属性或方法的名称及其参数）的变量。</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">要返回其名称的成员的 ID。</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">此方法返回时，包含与成员相关联的名称。 此参数未经初始化即被传递。</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">
        <paramref name="rgBstrNames" /> 数组的长度。</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">此方法返回时，包含 <paramref name="rgBstrNames" /> 数组中的名称数。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions if a type description references other type descriptions.">检索被引用的类型说明（如果该类型说明引用其他类型说明）。</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">要返回的被引用类型说明的句柄。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">此方法返回时，包含被引用的类型说明。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types if a type description describes a COM class.">检索实现的接口类型的类型说明（如果类型说明描述 COM 类）。</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">返回其句柄的已实现类型的索引。</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">此方法返回时，包含对已实现接口的句柄的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">检索包含类型说明的特性的 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 结构。</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">此方法返回时，包含对包含此类型说明的特性的结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">检索类型说明的 <see langword="ITypeComp" /> 接口，此接口使客户端编译器可以绑定到类型说明的成员。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface of the containing type library. This parameter is passed uninitialized.">此方法返回时，包含对包含类型库的 <see langword="ITypeComp" /> 接口的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">检索描述指定变量的 <see langword="VARDESC" /> 结构。</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">要返回的变量说明的索引。</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">此方法返回时，包含对描述指定变量的 <see langword="VARDESC" /> 结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">调用对象的方法或访问对象的属性，该方法或属性实现由类型说明描述的接口。</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">对由此类型说明描述的接口的引用。</param>
      <param name="memid" vsli:raw="A value that identifies the interface member.">用于标识接口成员的值。</param>
      <param name="wFlags" vsli:raw="Flags that describe the context of the invoke call.">描述 Invoke 调用的上下文的标志。</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">对结构的引用，该结构包含一个参数数组、一个命名参数的 DISPID 数组和每个数组中元素数的计数。</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">对用于存储结果的位置的引用。 如果 <paramref name="wFlags" /> 指定 <see langword="DISPATCH_PROPERTYPUT" /> 或 <see langword="DISPATCH_PROPERTYPUTREF" />，则忽略 <paramref name="pVarResult" />。 如果不需要任何结果，则设置为 <see langword="null" />。</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">指向异常信息结构的指针，该结构仅在返回 <see langword="DISP_E_EXCEPTION" /> 时才被填充。</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index within &lt;c&gt;rgvarg&lt;/c&gt; of the argument with the incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error. This parameter is passed uninitialized.">如果 <see langword="Invoke" /> 返回 <see langword="DISP_E_TYPEMISMATCH" />，<paramref name="puArgErr" /> 则指示具有错误类型的参数的 <c>rgvarg</c> 中的索引。 如果多个参数返回错误，则 <paramref name="puArgErr" /> 仅指示第一个具有错误的参数。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">释放先前由 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 结构。</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">对要释放的 <see langword="FUNCDESC" /> 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">释放先前由 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 结构。</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">对要释放的 <see langword="TYPEATTR" /> 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">释放先前由 <see langword="VARDESC" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 结构。</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">对要释放的 <see langword="VARDESC" /> 结构的引用。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeInfo2&quot; /&gt; interface.">提供 <see langword="ITypeInfo2" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">检索静态函数或变量（如那些在 DLL 中定义的静态函数或变量）的地址。</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">要检索的 <see langword="static" /> 成员地址的成员 ID。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">指定该成员是否为属性（如果是，还将指定它属于哪种属性）的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">此方法返回时，包含对 <see langword="static" /> 成员的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">创建描述组件类 (coclass) 的类型的新实例。</summary>
      <param name="pUnkOuter" vsli:raw="An object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">作为控制 <see langword="IUnknown" /> 的对象。</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">接口的 IID，调用方将使用该接口与结果对象进行通信。</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">此方法返回时，包含对已创建对象的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">获取库中所有自定义数据项。</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data from the specified function.">从指定函数中获取所有自定义数据。</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">要为其获取自定义数据的函数的索引。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data for the specified implementation type.">获取指定实现类型的所有自定义数据。</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">自定义数据的实现类型的索引。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt; which holds all custom data items.">一个<see langword="CUSTDATA" /> 指针，它指向保留所有自定义数据项的 。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all of the custom data for the specified function parameter.">获取指定的函数参数的所有自定义数据。</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">要为其获取自定义数据的函数的索引。</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">要获取自定义数据的此函数参数的索引。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets the variable for the custom data.">获取自定义数据的变量。</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">要获取自定义数据的变量的索引。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">检索类型库，该类型库包含此类型说明和它在该类型库中的索引。</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">此方法返回时，包含对包含类型库的引用。 此参数未经初始化即被传递。</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">此方法返回时，包含对包含类型库中的类型说明的索引的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">获取自定义数据。</summary>
      <param name="guid" vsli:raw="The GUID used to identify the data.">用于标识数据的 GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">此方法返回时，将包含一个 <see langword="Object" />，可指定放置检索到的数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">检索 DLL 中函数的入口点的说明或规范。</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">成员函数的 ID，要返回该成员函数的 DLL 入口说明。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">指定由 <paramref name="memid" /> 标识的成员种类的 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一。</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">如果不为 <see langword="null" />，则此函数将 <paramref name="pBstrDllName" /> 设置为包含 DLL 名称的 <see langword="BSTR" />。</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">如果不为 <see langword="null" />，则此函数将 lpbstrName<c></c> 设置为包含入口点名称的 <see langword="BSTR" />。</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">如果不为 <see langword="null" />，并且此函数是按序号定义的，则 lpwOrdinal<c></c> 被设置为指向该序号。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">从文档字符串、完整的帮助文件名和路径以及帮助主题的上下文 ID 中检索指定的类型说明。</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">要返回其文档的成员的 ID。</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">此方法返回时，包含项方法的名称。 此参数未经初始化即被传递。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">此方法返回时，包含指定项的文档字符串。 此参数未经初始化即被传递。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">此方法返回时，包含对与指定项相关联的帮助上下文的引用。 此参数未经初始化即被传递。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">此方法返回时，包含帮助文件的完全限定名。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">检索文档字符串、完整的帮助文件名称和路径、要使用的本地化上下文以及帮助文件中库帮助主题的上下文 ID。</summary>
      <param name="memid" vsli:raw="The member identifier for the type description.">类型描述的成员标识符。</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，将包含一个含有指定项名称的 <see langword="BSTR" />。 如果调用方不需要项名称，则 <paramref name="pbstrHelpString" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，将包含帮助文件的本地化上下文。 如果调用方不需要帮助上下文，则 <paramref name="pdwHelpStringContext" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，将包含 <see langword="BSTR" />，其中包含某个文件的完全限定名称，该文件包含用于帮助文件的 DLL。 如果调用方不需要文件名称，则 <paramref name="pbstrHelpStringDll" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data from the specified function.">从指定函数获取自定义数据。</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">要为其获取自定义数据的函数的索引。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">用于标识数据的 GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specified where to put the data. This parameter is passed uninitialized.">此方法返回时，会包含一个 <see langword="Object" />，指定放置数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">检索包含有关指定函数的信息的 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构。</summary>
      <param name="index" vsli:raw="The index of the function description to return.">要返回的函数说明的索引。</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">此方法返回时，包含对描述指定函数的 <see langword="FUNCDESC" /> 结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).">根据已知 DISPID 绑定到特定成员，其中成员名称未知（例如，绑定到默认成员时）。</summary>
      <param name="memid" vsli:raw="The member identifier.">成员标识符。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by memid.">
        <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 值之一，该值指定由 memid 标识的成员种类。</param>
      <param name="pFuncIndex" vsli:raw="When this method returns, contains an index into the function. This parameter is passed uninitialized.">它在此方法返回时会将一个索引包含到函数中。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">在成员名和成员 ID 之间以及参数名和参数 ID 之间映射。</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">要映射的名称数组。</param>
      <param name="cNames" vsli:raw="The count of names to map.">要映射的名称计数。</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">此方法返回时，包含对在其中放置名称映射的数组的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the implementation type of the custom data.">获取自定义数据的实现类型。</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">自定义数据的实现类型的索引。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">用于标识数据的 GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">此方法返回时，将包含一个 <see langword="Object" />，可指定放置检索到的数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">在类型说明中检索某个已实现的接口或基接口的 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 值。</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">已实现的接口或基接口的索引。</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">此方法返回时，包含对 <see langword="IMPLTYPEFLAGS" /> 枚举的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">检索封送处理信息。</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">成员 ID，它指示需要哪些封送处理信息。</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">此方法返回时，包含对 <see langword="opcode" /> 字符串的引用，该字符串用于封送处理由引用类型说明描述的结构的字段；如果没有要返回的信息，则返回 <see langword="null" />。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">检索具有与指定函数 ID 相对应的指定成员 ID（或者属性或方法的名称及其参数）的变量。</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">要返回其名称的成员的 ID。</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">此方法返回时，包含与成员相关联的名称。 此参数未经初始化即被传递。</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">
        <paramref name="rgBstrNames" /> 数组的长度。</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">此方法返回时，包含 <paramref name="rgBstrNames" /> 数组中的名称数。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the specified custom data parameter.">获取指定的自定义数据参数。</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">要为其获取自定义数据的函数的索引。</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">要获取自定义数据的此函数参数的索引。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">用于标识数据的 GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">此方法返回时，将包含一个 <see langword="Object" />，可指定放置检索到的数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions, if a type description references other type descriptions.">检索被引用的类型说明（如果该类型说明引用其他类型说明）。</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">要返回的被引用类型说明的句柄。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">此方法返回时，包含被引用的类型说明。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types, if a type description describes a COM class.">检索已实现接口类型的类型说明（如果类型说明描述 COM 类）。</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">返回其句柄的已实现类型的索引。</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">此方法返回时，包含对已实现接口的句柄的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">检索包含类型说明的特性的 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 结构。</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">此方法返回时，包含对包含此类型说明的特性的结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">检索类型说明的 <see langword="ITypeComp" /> 接口，此接口使客户端编译器可以绑定到类型说明的成员。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; of the containing type library. This parameter is passed uninitialized.">此方法返回时，包含对包含类型库的 <see langword="ITypeComp" /> 的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary vsli:raw="Returns the type flags without any allocations. This method returns a &lt;see langword=&quot;DWORD&quot; /&gt; type flag, which expands the type flags without growing the &lt;see langword=&quot;TYPEATTR&quot; /&gt; (type attribute).">在没有任何分配的情况下，返回类型标志。 此方法返回 <see langword="DWORD" /> 类型标志，其可在不增加 <see langword="TYPEATTR" />（类型属性）的情况下扩展类型标志。</summary>
      <param name="pTypeFlags" vsli:raw="When this method returns, contains a &lt;see langword=&quot;DWORD&quot; /&gt; reference to a &lt;see langword=&quot;TYPEFLAG&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含对 <see langword="TYPEFLAG" /> 的 <see langword="DWORD" /> 引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Returns the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration quickly, without doing any allocations.">快速返回 <see langword="TYPEKIND" /> 枚举，无需执行任何分配。</summary>
      <param name="pTypeKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration. This parameter is passed uninitialized.">此方法返回时，会包含对 <see langword="TYPEKIND" /> 枚举的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the variable for the custom data.">获取自定义数据的变量。</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">要获取自定义数据的变量的索引。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">用于标识数据的 GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">此方法返回时，将包含一个 <see langword="Object" />，可指定放置检索到的数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">检索描述指定变量的 <see langword="VARDESC" /> 结构。</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">要返回的变量说明的索引。</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">此方法返回时，包含对描述指定变量的 <see langword="VARDESC" /> 结构的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known &lt;see langword=&quot;DISPID&quot; /&gt;, where the member name is not known (for example, when binding to a default member).">根据已知 <see langword="DISPID" /> 绑定到特定成员，其中成员名称未知（例如，绑定到默认成员时）。</summary>
      <param name="memid" vsli:raw="The member identifier.">成员标识符。</param>
      <param name="pVarIndex" vsli:raw="When this method returns, contains an index of &lt;paramref name=&quot;memid&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时会包含一个 <paramref name="memid" /> 索引。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">调用对象的方法或访问对象的属性，该方法或属性实现由类型说明描述的接口。</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">对由此类型说明描述的接口的引用。</param>
      <param name="memid" vsli:raw="Identifier of the interface member.">接口成员的标识符。</param>
      <param name="wFlags" vsli:raw="Flags describing the context of the invoke call.">描述 Invoke 调用的上下文的标志。</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">对结构的引用，该结构包含一个参数数组、一个命名参数的 DISPID 数组和每个数组中元素数的计数。</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">对用于存储结果的位置的引用。 如果 <paramref name="wFlags" /> 指定 <see langword="DISPATCH_PROPERTYPUT" /> 或 <see langword="DISPATCH_PROPERTYPUTREF" />，则忽略 <paramref name="pVarResult" />。 如果不需要任何结果，则设置为 <see langword="null" />。</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">指向异常信息结构的指针，该结构仅在返回 <see langword="DISP_E_EXCEPTION" /> 时才被填充。</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index of the argument with incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error.">如果 <see langword="Invoke" /> 返回 <see langword="DISP_E_TYPEMISMATCH" />，则 <paramref name="puArgErr" /> 指示具有错误类型的参数的索引。 如果多个参数返回错误，则 <paramref name="puArgErr" /> 仅指示第一个具有错误的参数。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">释放先前由 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 结构。</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">对要释放的 <see langword="FUNCDESC" /> 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">释放先前由 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 结构。</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">对要释放的 <see langword="TYPEATTR" /> 结构的引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">释放先前由 <see langword="VARDESC" /> 方法返回的一个 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 结构。</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">对要释放的 <see langword="VARDESC" /> 结构的引用。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeLib&quot; /&gt; interface.">提供 <see langword="ITypeLib" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">在类型库中查找类型说明的匹配项。</summary>
      <param name="szNameBuf" vsli:raw="The name to search for. This is an in/out parameter.">要搜索的名称。 这是一个输入/输出参数。</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">一个用于加快搜索速度的哈希值，由 <see langword="LHashValOfNameSys" /> 函数计算。 如果 <paramref name="lHashVal" /> 为 0，则计算一个值。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含一个指向类型说明的指针数组，这些类型说明中包含 <paramref name="szNameBuf" /> 中指定的名称。 此参数未经初始化即被传递。</param>
      <param name="rgMemId" vsli:raw="An array of the &lt;see langword=&quot;MEMBERID&quot; /&gt; 's of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. Cannot be &lt;see langword=&quot;null&quot; /&gt;.">所找到的项的 <see langword="MEMBERID" /> 数组；<paramref name="rgMemId" />[i] 是由 <paramref name="ppTInfo" />[i] 指定的类型说明中建立索引的 <see langword="MEMBERID" />。 不能为 <see langword="null" />。</param>
      <param name="pcFound" vsli:raw="On entry, indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">在进入时指示要查找的实例数。 例如，可以调用 <paramref name="pcFound" />= 1 以查找第一个匹配项。 找到一个实例时停止搜索。  
  
在退出时指示找到的实例数。 如果 <paramref name="pcFound" /> 的 <see langword="in" /> 和 <see langword="out" /> 值完全相同，则可能存在其他包含此名称的类型说明。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">检索库的文档字符串、完整的帮助文件名和路径以及帮助文件中的库帮助主题的上下文标识符。</summary>
      <param name="index" vsli:raw="The index of the type description whose documentation is to be returned.">要返回其文档的类型说明的索引。</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that represents the name of the specified item. This parameter is passed uninitialized.">此方法返回时，包含一个表示指定项的名称的字符串。 此参数未经初始化即被传递。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains a string that represents the documentation string for the specified item. This parameter is passed uninitialized.">此方法返回时，包含一个表示指定项的文档字符串的字符串。 此参数未经初始化即被传递。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">此方法返回时，包含与指定项关联的帮助上下文标识符。 此参数未经初始化即被传递。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that represents the fully qualified name of the Help file. This parameter is passed uninitialized.">此方法返回时，包含一个表示帮助文件的完全限定名的字符串。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">检索包含库的特性的结构。</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">此方法返回时，包含一个结构，该结构包含库的特性。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">使客户端编译器能够绑定到库的类型、变量、常数和全局函数。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an instance of a &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含此 <see langword="ITypeComp" /> 的 <see langword="ITypeLib" /> 实例的一个实例。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">在库中检索指定的类型说明。</summary>
      <param name="index" vsli:raw="The index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">要返回的 <see langword="ITypeInfo" /> 接口的索引。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含一个 <see langword="ITypeInfo" />，它描述 <paramref name="index" /> 引用的类型。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">返回类型库中的类型说明的数量。</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">类型库中的类型说明的数量。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">检索与指定的 GUID 相对应的类型说明。</summary>
      <param name="guid" vsli:raw="The IID of the interface or CLSID of the class whose type info is requested.">请求其类型信息的类的接口的 IID 或 CLSID。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">此方法返回时，包含请求的 <see langword="ITypeInfo" /> 接口。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">检索类型说明的类型。</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">类型库中类型说明的索引。</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">此方法返回时，包含对用于类型说明的 <see langword="TYPEKIND" /> 枚举的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">指示传入的字符串是否包含库中描述的类型或成员的名称。</summary>
      <param name="szNameBuf" vsli:raw="The string to test. This is an in/out parameter.">要测试的字符串。 这是一个输入/输出参数。</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">
        <paramref name="szNameBuf" /> 的哈希值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在类型库中找到 <paramref name="szNameBuf" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">释放最初通过 <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 方法获取的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 结构。</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">要释放的 <see langword="TLIBATTR" /> 结构。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;ITypeLib2&quot; /&gt; interface.">提供 <see langword="ITypeLib2" /> 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">在类型库中查找类型说明的匹配项。</summary>
      <param name="szNameBuf" vsli:raw="The name to search for.">要搜索的名称。</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">一个用于加快搜索速度的哈希值，由 <see langword="LHashValOfNameSys" /> 函数计算。 如果 <paramref name="lHashVal" /> 为 0，则计算一个值。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含一个指向类型说明的指针数组，这些类型说明中包含 <paramref name="szNameBuf" /> 中指定的名称。 此参数未经初始化即被传递。</param>
      <param name="rgMemId" vsli:raw="When this method returns, contains an array of the &lt;see langword=&quot;MEMBERID&quot; /&gt;s of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. This parameter cannot be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含所找到的项的 <see langword="MEMBERID" /> 数组；<paramref name="rgMemId" /> [i] 是用于通过索引访问 <paramref name="ppTInfo" /> [i] 指定的类型说明的 <see langword="MEMBERID" />。 此参数不能为 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <param name="pcFound" vsli:raw="On entry, a value, passed by reference, that indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">输入时由引用传递的一个值，该值指示要查找的实例数。 例如，可以调用 <paramref name="pcFound" />= 1 以查找第一个匹配项。 找到一个实例时停止搜索。  
  
在退出时指示找到的实例数。 如果 <paramref name="pcFound" /> 的 <see langword="in" /> 和 <see langword="out" /> 值完全相同，则可能存在其他包含此名称的类型说明。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">获取库中所有自定义数据项。</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">指向保留所有自定义数据项的 <see langword="CUSTDATA" /> 的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">获取自定义数据。</summary>
      <param name="guid" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; , passed by reference, that is used to identify the data.">由引用传递的用于标识该数据的 <see cref="T:System.Guid" />。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an object that specifies where to put the retrieved data. This parameter is passed uninitialized.">返回此方法时，会包含一个对象，可指定放置检索到的数据的位置。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">检索库的文档字符串、完整的帮助文件名和路径以及帮助文件中的库帮助主题的上下文标识符。</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned.">要返回其文档的类型说明的索引。</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that specifies the name of the specified item. This parameter is passed uninitialized.">该参数在此方法返回时包含一个字符串，该字符串指定了指定项的名称。 此参数未经初始化即被传递。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">此方法返回时，包含指定项的文档字符串。 此参数未经初始化即被传递。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">此方法返回时，包含与指定项关联的帮助上下文标识符。 此参数未经初始化即被传递。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that specifies the fully qualified name of the Help file. This parameter is passed uninitialized.">此方法返回时，包含指定帮助文件的完全限定名的字符串。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">检索库的文档字符串、完整的帮助文件名称和路径、要使用的本地化上下文以及帮助文件中库帮助主题的上下文 ID。</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned; if &lt;paramref name=&quot;index&quot; /&gt; is -1, the documentation for the library is returned.">要返回其文档的类型描述的索引；如果 <paramref name="index" /> 为 -1，则返回库的文档。</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a BSTR that specifies the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，将包含用于指定特定项名称的 BSTR。 如果调用方不需要项名称，则 <paramref name="pbstrHelpString" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，将包含帮助文件的本地化上下文。 如果调用方不需要帮助上下文，则 <paramref name="pdwHelpStringContext" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a BSTR that specifies the fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，将包含 BSTR，其指定包含用于帮助文件的 DLL 的文件的完全限定名称。 如果调用方不需要文件名称，则 <paramref name="pbstrHelpStringDll" /> 可以是 <see langword="null" />。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">检索包含库的特性的结构。</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">此方法返回时，包含一个结构，该结构包含库的特性。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary vsli:raw="Returns statistics about a type library that are required for efficient sizing of hash tables.">返回有关类型库的统计信息，该信息是有效调整哈希表的大小所必需的。</summary>
      <param name="pcUniqueNames" vsli:raw="A pointer to a count of unique names. If the caller does not need this information, set to &lt;see langword=&quot;null&quot; /&gt;.">指向唯一名称的计数的指针。 如果调用方不需要此信息，则将其设置为 <see langword="null" />。</param>
      <param name="pcchUniqueNames" vsli:raw="When this method returns, contains a pointer to a change in the count of unique names. This parameter is passed uninitialized.">此方法返回时，包含一个指向唯一名称计数中的更改的指针。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">使客户端编译器能够绑定到库的类型、变量、常数和全局函数。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含一个用于此 <see langword="ITypeComp" /> 的 <see langword="ITypeLib" /> 实例。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">在库中检索指定的类型说明。</summary>
      <param name="index" vsli:raw="An index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">要返回的 <see langword="ITypeInfo" /> 接口的索引。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">此方法返回时，包含一个 <see langword="ITypeInfo" />，它描述 <paramref name="index" /> 引用的类型。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">返回类型库中的类型说明的数量。</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">类型库中的类型说明的数量。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">检索与指定的 GUID 相对应的类型说明。</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt;, passed by reference, that represents the IID of the &lt;see langword=&quot;CLSID&quot; /&gt; interface of the class whose type info is requested.">由引用传递的 <see cref="T:System.Guid" />，它表示被请求了类型信息的类的 <see langword="CLSID" /> 接口的 IID。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">此方法返回时，包含请求的 <see langword="ITypeInfo" /> 接口。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">检索类型说明的类型。</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">类型库中类型说明的索引。</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">此方法返回时，包含对用于类型说明的 <see langword="TYPEKIND" /> 枚举的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">指示传入的字符串是否包含库中描述的类型或成员的名称。</summary>
      <param name="szNameBuf" vsli:raw="The string to test.">要测试的字符串。</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">
        <paramref name="szNameBuf" /> 的哈希值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在类型库中找到 <paramref name="szNameBuf" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">释放最初通过 <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 方法获取的 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 结构。</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">要释放的 <see langword="TLIBATTR" /> 结构。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary vsli:raw="Defines flags that apply to type libraries.">定义应用于类型库的标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary vsli:raw="The type library describes controls and should not be displayed in type browsers intended for nonvisual objects.">类型库描述控件，并且不应在供非可视对象使用的类型浏览器中显示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary vsli:raw="The type library exists in a persisted form on disk.">类型库以一种持久形式存在于磁盘上。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary vsli:raw="The type library should not be displayed to users, although its use is not restricted. The type library should be used by controls. Hosts should create a new type library that wraps the control with extended properties.">不应将类型库显示给用户，虽然它的使用并未受到限制。 类型库应该由控件使用。 宿主应创建用扩展属性包装控件的新类型库。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary vsli:raw="The type library is restricted, and should not be displayed to users.">类型库受到限制且不应显示给用户。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary vsli:raw="Contains information about how to transfer a structure element, parameter, or function return value between processes.">包含关于如何在进程间传输结构元素、参数或函数返回值的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary vsli:raw="Represents a pointer to a value that is being passed between processes.">表示指向正在进程之间传递的值的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary vsli:raw="Represents bitmask values that describe the structure element, parameter, or return value.">表示描述结构元素、参数或返回值的位屏蔽值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">说明如何在进程间传输结构元素、参数或函数返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary vsli:raw="The parameter has custom data.">该参数具有自定义数据。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary vsli:raw="The parameter has default behaviors defined.">参数定义了默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">参数将信息从调用方传递给被调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">参数是客户端应用程序的本地标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary vsli:raw="The parameter is optional.">参数是可选的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">参数将信息从调用方返回到被调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">参数是该成员的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">不会指定该参数传递还是接收信息。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STATDATA&quot; /&gt; structure.">提供 <see langword="STATDATA" /> 结构的托管定义。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; enumeration value that determines when the advisory sink is notified of changes in the data.">表示用于确定何时向通知接收器通知数据更改的 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 枚举值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface that will receive change notifications.">表示将接收更改通知的 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary vsli:raw="Represents the token that uniquely identifies the advisory connection. This token is returned by the method that sets up the advisory connection.">表示唯一标识通知连接的标记。 此标记由设置通知连接的方法返回。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure for the data of interest to the advise sink. The advise sink receives notification of changes to the data specified by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure.">表示对通知接收器有意义的数据的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构。 通知接收器将接收对 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构所指定数据的更改通知。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary vsli:raw="Contains statistical information about an open storage, stream, or byte-array object.">包含关于开源存储器、流或字节数组对象的统计信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary vsli:raw="Specifies the last access time for this storage, stream, or byte array.">指定此存储、流或字节数组的上次访问时间。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary vsli:raw="Specifies the size, in bytes, of the stream or byte array.">指定流或字节数组的大小（以字节为单位）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary vsli:raw="Indicates the class identifier for the storage object.">指示存储对象的类标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary vsli:raw="Indicates the creation time for this storage, stream, or byte array.">指示此存储、流或字节数组的创建时间。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary vsli:raw="Indicates the types of region locking supported by the stream or byte array.">指示受该流或字节数组支持的区域锁定的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary vsli:raw="Indicates the access mode that was specified when the object was opened.">指示打开对象时指定的访问模式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary vsli:raw="Indicates the current state bits of the storage object (the value most recently set by the &lt;see langword=&quot;IStorage::SetStateBits&quot; /&gt; method).">指示存储对象的当前状态位（最近由 <see langword="IStorage::SetStateBits" /> 方法设置的值）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary vsli:raw="Indicates the last modification time for this storage, stream, or byte array.">指示此存储、流或字节数组的上次修改时间。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary vsli:raw="Represents a pointer to a null-terminated string containing the name of the object described by this structure.">表示指向以 NULL 结尾的字符串的指针，该字符串包含此结构所描述的对象的名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary vsli:raw="Reserved for future use.">留待将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary vsli:raw="Indicates the type of storage object, which is one of the values from the &lt;see langword=&quot;STGTY&quot; /&gt; enumeration.">指示存储对象的类型，该类型为 <see langword="STGTY" /> 枚举值之一。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STGMEDIUM&quot; /&gt; structure.">提供 <see langword="STGMEDIUM" /> 结构的托管定义。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary vsli:raw="Represents a pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses default procedures to release the storage; otherwise, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">表示指向接口实例的指针，该指针允许发送进程控制当接收进程调用 <see langword="ReleaseStgMedium" /> 函数时释放存储的方式。 如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 为 <see langword="null" />，则 <see langword="ReleaseStgMedium" /> 使用默认过程来释放存储；否则 <see langword="ReleaseStgMedium" /> 将使用指定的 <see langword="IUnknown" /> 接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary vsli:raw="Specifies the type of storage medium. The marshaling and unmarshaling routines use this value to determine which union member was used. This value must be one of the elements of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration.">指定存储介质的类型。 封送和取消封送例程使用此值来确定所使用的联合成员。 此值必须是 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 枚举的元素之一。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary vsli:raw="Represents a handle, string, or interface pointer that the receiving process can use to access the data being transferred.">表示接收进程可用于访问正在传输的数据的句柄、字符串或接口。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary vsli:raw="Identifies the target operating system platform.">标识目标操作系统平台。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary vsli:raw="The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.">类型库的目标操作系统为 Apple Macintosh。 默认情况下，所有数据字段在偶字节边界对齐。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary vsli:raw="The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.">类型库的目标操作系统是 16 位 Windows 系统。 默认情况下，打包数据字段。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary vsli:raw="The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).">类型库的目标操作系统是 32 位 Windows 系统。 默认情况下，数据字段自然对齐（例如，2 字节整数在偶字节边界对齐；4 字节整数在四字边界对齐，依此类推）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary vsli:raw="The target operating system for the type library is 64-bit Windows systems.">类型库的目标操作系统是 64 位 Windows 系统。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;TYMED&quot; /&gt; structure.">提供 <see langword="TYMED" /> 结构的托管定义。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary vsli:raw="The storage medium is an enhanced metafile. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteEnhMetaFile&quot; /&gt; to delete the bitmap.">该存储介质是增强型图元文件。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 <see langword="null" />，目标进程应使用 <see langword="DeleteEnhMetaFile" /> 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary vsli:raw="The storage medium is a disk file identified by a path. If the &lt;see langword=&quot;STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;OpenFile&quot; /&gt; to delete the file.">该存储介质是由路径标识的磁盘文件。 如果 <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 <see langword="null" />，目标进程应使用 <see langword="OpenFile" /> 删除文件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary vsli:raw="The storage medium is a Graphics Device Interface (GDI) component (HBITMAP). If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteObject&quot; /&gt; to delete the bitmap.">该存储介质是图形设备接口 (GDI) 组件 (HBITMAP)。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 <see langword="null" />，目标进程应使用 <see langword="DeleteObject" /> 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary vsli:raw="The storage medium is a global memory handle (HGLOBAL). Allocate the global handle with the GMEM_SHARE flag. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;GlobalFree&quot; /&gt; to release the memory.">该存储介质是全局内存句柄 (HGLOBAL)。 使用 GMEM_SHARE 标志分配全局句柄。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 <see langword="null" />，目标进程应使用 <see langword="GlobalFree" /> 释放内存。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary vsli:raw="The storage medium is a storage component identified by an &lt;see langword=&quot;IStorage&quot; /&gt; pointer. The data is in the streams and storages contained by this &lt;see langword=&quot;IStorage&quot; /&gt; instance. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStorage::Release&quot; /&gt; to release the storage component.">该存储介质是由 <see langword="IStorage" /> 指针标识的存储组件。 数据位于此 <see langword="IStorage" /> 实例所包含的流和存储中。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员不为 <see langword="null" />，则目标进程应使用 <see langword="IStorage::Release" /> 释放存储组件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary vsli:raw="The storage medium is a stream object identified by an &lt;see langword=&quot;IStream&quot; /&gt; pointer. Use &lt;see langword=&quot;ISequentialStream::Read&quot; /&gt; to read the data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStream::Release&quot; /&gt; to release the stream component.">该存储介质是由 <see langword="IStream" /> 指针标识的流对象。 使用 <see langword="ISequentialStream::Read" /> 读取数据。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员不为 <see langword="null" />，则目标进程应使用 <see langword="IStream::Release" /> 释放流组件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary vsli:raw="The storage medium is a metafile (HMETAFILE). Use the Windows or WIN32 functions to access the metafile's data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteMetaFile&quot; /&gt; to delete the bitmap.">该存储介质是图元文件 (HMETAFILE)。 使用 Windows 或 WIN32 函数来访问该图元文件的数据。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 <see langword="null" />，目标进程应使用 <see langword="DeleteMetaFile" /> 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary vsli:raw="No data is being passed.">当前没有传递任何数据。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary vsli:raw="Contains attributes of a &lt;see langword=&quot;UCOMITypeInfo&quot; /&gt;.">包含 <see langword="UCOMITypeInfo" /> 的特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary vsli:raw="Specifies the byte alignment for an instance of this type.">指定此类型实例的字节对齐方式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary vsli:raw="The size of an instance of this type.">此类型的实例的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary vsli:raw="The size of this type's virtual method table (VTBL).">此类型的虚拟方法表 (VTBL) 的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary vsli:raw="Indicates the number of functions on the interface this structure describes.">指示此结构描述的接口上的函数数目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary vsli:raw="Indicates the number of implemented interfaces on the interface this structure describes.">指示此结构描述的接口上实现的接口的数量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary vsli:raw="Indicates the number of variables and data fields on the interface described by this structure.">指示此结构所描述的接口上的变量和数据字段的数目。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary vsli:raw="Reserved for future use.">留待将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary vsli:raw="The GUID of the type information.">类型信息的 GUID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary vsli:raw="IDL attributes of the described type.">所描述类型的 IDL 属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary vsli:raw="Locale of member names and documentation strings.">成员名称和文档字符串的区域设置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary vsli:raw="Reserved for future use.">留待将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary vsli:raw="A constant used with the &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidConstructor&quot; /&gt; and &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidDestructor&quot; /&gt; fields.">与 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> 和 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> 字段一起使用的常数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary vsli:raw="ID of constructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">构造函数的 ID，如果没有，则为 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary vsli:raw="ID of destructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">析构函数的 ID，如果没有，则为 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary vsli:raw="If &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.typekind&quot; /&gt; == &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS&quot; /&gt;, specifies the type for which this type is an alias.">如果 <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />，则指定该类型（此类型为该类型的别名）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEKIND&quot; /&gt; value describing the type this information describes.">
        <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> 值描述此信息所描述的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary vsli:raw="Major version number.">主版本号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary vsli:raw="Minor version number.">次版本号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; value describing this information.">描述此信息的 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary vsli:raw="Describes the type of a variable, return type of a function, or the type of a function parameter.">描述变量的类型、函数的返回类型或函数参数的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary vsli:raw="If the variable is &lt;see langword=&quot;VT_SAFEARRAY&quot; /&gt; or &lt;see langword=&quot;VT_PTR&quot; /&gt;, the &lt;see langword=&quot;lpValue&quot; /&gt; field contains a pointer to a &lt;see langword=&quot;TYPEDESC&quot; /&gt; that specifies the element type.">如果变量为 <see langword="VT_SAFEARRAY" /> 或 <see langword="VT_PTR" />，则 <see langword="lpValue" /> 字段包含指向指定元素类型的 <see langword="TYPEDESC" /> 的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary vsli:raw="Indicates the variant type for the item described by this &lt;see langword=&quot;TYPEDESC&quot; /&gt;.">指示由此 <see langword="TYPEDESC" /> 描述的项的 Variant 类型。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary vsli:raw="Defines the properties and attributes of a type description.">定义类型说明的属性和特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary vsli:raw="The class supports aggregation.">该类支持聚合。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">描述 <see langword="Application" /> 对象的类型说明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">可由 <see langword="ITypeInfo::CreateInstance" /> 创建该类型的实例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary vsli:raw="The type is a control from which other types will be derived and should not be displayed to users.">该类型是将派生其他类型的控件，而且不应显示给用户。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly. This flag is computed; there is no Object Description Language for the flag.">指示该接口直接或间接从 <see langword="IDispatch" /> 派生。 此标志为计算所得，没有此标志的对象描述语言。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and VTBL binding.">该接口同时支持 <see langword="IDispatch" /> 和 VTBL 绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary vsli:raw="The type should not be displayed to browsers.">该类型不应显示在浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary vsli:raw="The type is licensed.">该类型已授权。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary vsli:raw="The interface cannot add members at run time.">该接口在运行时无法添加成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including VTBL binding support. Setting dual on an interface sets both this flag and the  &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL&quot; /&gt;. This flag is not allowed on dispinterfaces.">该接口中使用的类型与自动化（包括 VTBL 绑定支持）完全兼容。 设置双重接口时，将同时设置此标志和 <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />。 不允许在调度接口上设置此标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">该类型是预定义的。 该客户端应用程序应自动创建具有此属性的对象的单个实例。 指向该对象的变量名称与该对象的类名相同。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary vsli:raw="Indicates that the interface will be using a proxy/stub dynamic link library. This flag specifies that the type library proxy should not be unregistered when the type library is unregistered.">指示接口将使用 proxy/stub 动态链接库。 此标志指定注销类型库时不应注销类型库代理。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">该对象支持 <see langword="IConnectionPointWithDefault" />，并且具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary vsli:raw="Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display.">不应是可从宏语言访问的。 此标志适用于系统级类型或类型浏览器不应显示的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking children, which is the reverse of the default behavior.">指示检查子级前应先检查基接口以进行名称解析，这与默认行为相反。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary vsli:raw="Specifies various types of data and functions.">指定各种类型的数据和函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary vsli:raw="A type that is an alias for another type.">类型，它是另一个类型的别名。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary vsli:raw="A set of implemented components interfaces.">已实现的组件接口集。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary vsli:raw="A set of methods and properties that are accessible through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;. By default, dual interfaces return &lt;see langword=&quot;TKIND_DISPATCH&quot; /&gt;.">可通过 <see langword="IDispatch::Invoke" /> 访问的方法和属性集。 默认情况下，双重接口返回 <see langword="TKIND_DISPATCH" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary vsli:raw="A set of enumerators.">枚举数集。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary vsli:raw="A type that has virtual functions, all of which are pure.">类型，它具有虚函数（全部为纯虚函数）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary vsli:raw="End-of-enumeration marker.">枚举结尾标记。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary vsli:raw="A module that can have only static functions and data (for example, a DLL).">模块，它只能包含静态函数和数据（例如 DLL）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary vsli:raw="A structure with no methods.">没有方法的结构。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary vsli:raw="A union of all members that have an offset of zero.">偏移量为零的所有成员的联合。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary vsli:raw="Identifies a particular type library and provides localization support for member names.">标识特定的类型库，并为成员名称提供本地化支持。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary vsli:raw="Represents a globally unique library ID of a type library.">表示类型库的全局唯一库 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary vsli:raw="Represents a locale ID of a type library.">表示类型库的区域设置 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary vsli:raw="Represents the target hardware platform of a type library.">表示类型库的目标硬件平台。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary vsli:raw="Represents library flags.">表示库标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary vsli:raw="Represents the major version number of a type library.">表示类型库的主版本号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary vsli:raw="Represents the minor version number of a type library.">表示类型库的次版本号。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary vsli:raw="Describes a variable, constant, or data member.">描述变量、常量或数据成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary vsli:raw="Contains information about a variable.">包含有关变量的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary vsli:raw="Contains the variable type.">包含变量类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary vsli:raw="This field is reserved for future use.">保留此字段供将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary vsli:raw="Indicates the member ID of a variable.">指示变量的成员 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary vsli:raw="Defines how to marshal a variable.">定义如何封送变量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary vsli:raw="Defines the properties of a variable.">定义变量的属性。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary vsli:raw="Contains information about a variable.">包含有关变量的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary vsli:raw="Describes a symbolic constant.">描述符号常数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary vsli:raw="Indicates the offset of this variable within the instance.">指示此变量在该实例中的偏移量。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a variable.">标识定义变量属性的常量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary vsli:raw="The variable supports data binding.">该变量支持数据绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in type information can have this attribute.">该变量是最佳地表示此对象的唯一属性。 类型信息中仅有一个变量可以具有此特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">允许进行一种优化，使编译器查找“abc”类型上名为“xyz”的成员。 如果找到这样的成员，而且该成员标志为默认集合的某元素的访问函数，则生成对该成员函数的调用。 可以对调度接口和接口中的成员使用；不能对模块使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary vsli:raw="The variable is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE&quot; /&gt; must also be set.">该变量作为可绑定变量显示给用户。 还必须设置 <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary vsli:raw="The variable should not be displayed to the user in a browser, although it exists and is bindable.">尽管该变量存在并且是可绑定的，但不应在浏览器中将它显示给用户。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">该变量作为单独的可绑定属性映射。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">该变量出现在对象浏览器而非属性浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary vsli:raw="Assignment to the variable should not be allowed.">不应允许给该变量赋值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">将该接口标记为具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any attempt to directly change the property results in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the change is accepted.">设置后，任何直接更改该属性的尝试都会导致对 <see langword="IPropertyNotifySink::OnRequestEdit" /> 的调用。 <see langword="OnRequestEdit" /> 的实现确定是否接受此更改。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary vsli:raw="The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.">该变量不应该是可以从宏语言访问的。 此标志用于系统级变量或不想让类型浏览器显示的变量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary vsli:raw="The variable returns an object that is a source of events.">该变量返回一个对象，该对象为事件的源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary vsli:raw="The variable is the default display in the user interface.">该变量是用户界面中的默认显示。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary vsli:raw="Defines the kind of variable.">定义变量的种类。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary vsli:raw="The &lt;see langword=&quot;VARDESC&quot; /&gt; structure describes a symbolic constant. There is no memory associated with it.">
        <see langword="VARDESC" /> 结构描述符号常量。 没有与之关联的内存。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary vsli:raw="The variable can be accessed only through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">该变量只能通过 <see langword="IDispatch::Invoke" /> 访问。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary vsli:raw="The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.">该变量是类型的一个字段或成员。 它在类型的每个实例中存在于固定的偏移量处。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary vsli:raw="There is only one instance of the variable.">该变量只有一个实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.">指定从 COM 中注销使用的程序集时要调用的方法；这可以在注销过程中执行用户编写的代码。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers">
      <summary vsli:raw="Class for managing wrappers of COM IUnknown types.">用于管理 COM IUnknown 类型包装器的类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.#ctor">
      <summary vsli:raw="Instance constructor.">实例构造函数。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComputeVtables(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags,System.Int32@)">
      <summary vsli:raw="Computes the desired Vtable for &lt;paramref name=&quot;obj&quot; /&gt;, respecting the values of &lt;paramref name=&quot;flags&quot; /&gt;.">采用 <paramref name="flags" /> 的值计算 <paramref name="obj" /> 所需的 Vtable。</summary>
      <param name="obj" vsli:raw="Target of the returned Vtables.">返回的 VTable 的目标。</param>
      <param name="flags" vsli:raw="Flags used to compute Vtables.">用于计算 VTable 的标志。</param>
      <param name="count" vsli:raw="The number of elements contained in the returned memory.">返回的内存中包含的元素数。</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry&quot; /&gt; pointer containing memory for all COM interface entries.">包含所有 COM 接口项的内存的 <see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" /> 指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary vsli:raw="Creates a managed object for the object that &lt;paramref name=&quot;externalComObject&quot; /&gt; points to, respecting the values of &lt;paramref name=&quot;flags&quot; /&gt;.">采用 <paramref name="flags" /> 的值为 <paramref name="externalComObject" /> 指向的对象创建托管对象。</summary>
      <param name="externalComObject" vsli:raw="Object to import for usage into the .NET runtime.">要导入便于在 .NET 运行时中使用的对象。</param>
      <param name="flags" vsli:raw="Flags used to describe the external object.">用于描述外部对象的标志。</param>
      <returns vsli:raw="A managed object associated with the supplied external COM object.">与所提供的外部 COM 对象关联的托管对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl(System.IntPtr@,System.IntPtr@,System.IntPtr@)">
      <summary vsli:raw="Gets the runtime-provided IUnknown implementation.">获取运行时提供的 IUnknown 实现。</summary>
      <param name="fpQueryInterface" vsli:raw="Function pointer to QueryInterface.">指向 QueryInterface 的函数指针。</param>
      <param name="fpAddRef" vsli:raw="Function pointer to AddRef.">指向 AddRef 的函数指针。</param>
      <param name="fpRelease" vsli:raw="Function pointer to Release.">要发布的函数指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)">
      <summary vsli:raw="Creates a COM representation of the supplied object that can be passed to a non-managed environment.">创建提供的对象的 COM 表示形式，该对象可传递给非托管环境。</summary>
      <param name="instance" vsli:raw="The managed object to expose outside the .NET runtime.">要在 .NET 运行时外部公开的托管对象。</param>
      <param name="flags" vsli:raw="Flags used to configure the generated interface.">用于配置生成的接口的标志。</param>
      <returns vsli:raw="The generated COM interface, as a pointer to the &lt;code&gt;IUnknown&lt;/code&gt; interface implementation, that can be passed outside the .NET runtime.">生成的 COM 接口，它可在 .NET 运行时外部传递。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary vsli:raw="Gets the currently registered managed object or creates a new managed object and registers it.">获取当前注册的托管对象，或创建新的托管对象并对其进行注册。</summary>
      <param name="externalComObject" vsli:raw="Object to import for usage into the .NET runtime.">要导入便于在 .NET 运行时中使用的对象。</param>
      <param name="flags" vsli:raw="Flags used to describe the external object.">用于描述外部对象的标志。</param>
      <returns vsli:raw="A managed object associated with the supplied external COM object.">与所提供的外部 COM 对象关联的托管对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrRegisterObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object)">
      <summary vsli:raw="Gets the currently registered managed object or uses the supplied managed object and registers it.">获取当前注册的托管对象，或使用提供的托管对象并对其进行注册。</summary>
      <param name="externalComObject" vsli:raw="Object to import for usage into the .NET runtime.">要导入便于在 .NET 运行时中使用的对象。</param>
      <param name="flags" vsli:raw="Flags used to describe the external object.">用于描述外部对象的标志。</param>
      <param name="wrapper" vsli:raw="The object to use as the wrapper for the external object.">要用作外部对象的包装器的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The wrapper instance is already associated with an external object.">包装器实例已与外部对象关联。</exception>
      <returns vsli:raw="A managed object associated with the supplied external COM object.">与所提供的外部 COM 对象关联的托管对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling(System.Runtime.InteropServices.ComWrappers)">
      <summary vsli:raw="Registers a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComWrappers&quot; /&gt; instance to be used as the global instance for marshalling in the runtime.">注册具有以下用途的 <see cref="T:System.Runtime.InteropServices.ComWrappers" /> 实例：用作在运行时进行封送的全局实例。</summary>
      <param name="instance" vsli:raw="The instance to register.">要注册的实例。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method was called more than once.">该方法被调用了多次。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport(System.Runtime.InteropServices.ComWrappers)">
      <summary vsli:raw="Registers a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComWrappers&quot; /&gt; instance to be used as the global instance for reference tracker support.">注册具有以下用途的 <see cref="T:System.Runtime.InteropServices.ComWrappers" /> 实例：用作引用跟踪器支持的全局实例。</summary>
      <param name="instance" vsli:raw="The instance to register.">要注册的实例。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method was called more than once.">该方法被调用了多次。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ReleaseObjects(System.Collections.IEnumerable)">
      <summary vsli:raw="Releases a collection of objects outside of the normal object or COM interface lifetime.">释放普通对象或 COM 接口生存期之外的对象的集合。</summary>
      <param name="objects" vsli:raw="Collection of objects to release.">要释放的对象的集合。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch">
      <summary vsli:raw="An application binary interface for function dispatch of a COM interface.">一个应用程序二进制接口，它用于 COM 接口的函数调度。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.Vtable">
      <summary vsli:raw="Field that represents the virtual function table (vtable) in the IUnknown instance layout.">表示 IUnknown 实例布局中虚拟函数表 (vtable) 的字段。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance``1(System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*)">
      <summary vsli:raw="Given an &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; from a generated Vtable, converts it to the target type.">如果 <see cref="T:System.IntPtr" /> 来自生成的 Vtable，则将它转换为目标类型。</summary>
      <param name="dispatchPtr" vsli:raw="Pointer to Vtable function entry.">指向 Vtable 函数项的指针。</param>
      <typeparam name="T" vsli:raw="Desired type.">所需类型。</typeparam>
      <returns vsli:raw="An instance of the type associated with the dispatched function call.">与调度的函数调用相关联的类型的实例。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry">
      <summary vsli:raw="Interface type and pointer to targeted VTable.">指向目标 VTable 的接口类型和指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.IID">
      <summary vsli:raw="Interface identifier.">接口标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.Vtable">
      <summary vsli:raw="A pointer to the virtual lookup table of functions.">指向函数的虚拟查找表的指针。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreateComInterfaceFlags">
      <summary vsli:raw="Specifies flags for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)&quot; /&gt; method.">指定 <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)" /> 方法的标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.CallerDefinedIUnknown">
      <summary vsli:raw="&lt;para&gt;The caller will provide an IUnknown Vtable.&lt;/para&gt;&lt;para&gt;This flag is useful in scenarios when the caller has no need to rely on an IUnknown instance that's used when it's not possible to run managed code (that is, during a garbage collection). This is common in traditional COM scenarios, but scenarios where Reference Tracker hosting calls the IUnknown API during a garbage collection are possible.&lt;/para&gt;">调用方将提供 IUnknown Vtable。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.None">
      <summary vsli:raw="Flag used to indicate no flags set.">用于指示未设置任何标志的标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.TrackerSupport">
      <summary vsli:raw="&lt;para&gt;Flag used to indicate the COM interface should implement IReferenceTrackerTarget.&lt;/para&gt;&lt;para&gt;When this flag is passed, the resulting COM interface will have an internal implementation of IUnknown, therefore, none should be supplied by the caller.&lt;/para&gt;">用于指示 COM 接口应实现 IReferenceTrackerTarget 的标志。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreateObjectFlags">
      <summary vsli:raw="Specifies flags for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)&quot; /&gt; method.">指定 <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" /> 方法的标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.None">
      <summary vsli:raw="Flag used to indicate no flags set.">用于指示未设置任何标志的标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject">
      <summary vsli:raw="Indicates that the supplied external COM object implements the IReferenceTracker.">指示所提供的外部 COM 对象实现 IReferenceTracker。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.UniqueInstance">
      <summary vsli:raw="Indicates to ignore internal caching and always create a unique instance.">指示忽略内部缓存并始终创建唯一实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_CY&quot; /&gt;.">对封送处理程序应该将其作为 <see langword="VT_CY" /> 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">用要包装并作为 <see langword="Decimal" /> 类型进行封送的 <see langword="VT_CY" /> 来初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 类的新实例。</summary>
      <param name="obj" vsli:raw="The &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">要包装并作为 <see langword="Decimal" /> 进行封送的 <see langword="VT_CY" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">用包含要包装并作为 <see langword="Decimal" /> 类型进行封送的 <see langword="VT_CY" /> 的对象来初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 类的新实例。</summary>
      <param name="obj" vsli:raw="The object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">包含要包装并作为 <see langword="Decimal" /> 进行封送的 <see langword="VT_CY" /> 的对象。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; type.">
        <paramref name="obj" /> 参数不是 <see cref="T:System.Decimal" /> 类型。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">获取将作为 <see langword="VT_CY" /> 类型进行封送的包装对象。</summary>
      <returns vsli:raw="The wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">将作为 <see langword="VT_CY" /> 类型进行封送的包装对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method's IUnknown::QueryInterface calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">指示 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法的 IUnknown::QueryInterface 调用是否可以使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary vsli:raw="IUnknown::QueryInterface method calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface. When you use this value, the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method overload functions like the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)&quot; /&gt; overload.">IUnknown::QueryInterface 方法调用可以使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。 使用此值时，<see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法重载的功能与 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> 重载的功能类似。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary vsli:raw="IUnknown::QueryInterface method calls should ignore the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">IUnknown::QueryInterface 方法调用应忽略 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 接口。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary vsli:raw="Provides return values for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method.">提供 <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary vsli:raw="The interface for a specific interface ID is not available. In this case, the returned interface is &lt;see langword=&quot;null&quot; /&gt;. E_NOINTERFACE is returned to the caller of IUnknown::QueryInterface.">特定接口 ID 的接口不可用。 在这种情况下，返回的接口为 <see langword="null" />。 E_NOINTERFACE 会返回给 IUnknown::QueryInterface 的调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary vsli:raw="The interface pointer that is returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method can be used as the result of IUnknown::QueryInterface.">从 <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法返回的接口指针可用作 IUnknown::QueryInterface 的结果。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary vsli:raw="The custom &lt;see langword=&quot;QueryInterface&quot; /&gt; was not used. Instead, the default implementation of IUnknown::QueryInterface should be used.">未使用自定义的 <see langword="QueryInterface" />。 相反，应该使用 IUnknown::QueryInterface 的默认实现。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary vsli:raw="Specifies the value of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; enumeration. This class cannot be inherited.">指定 <see cref="T:System.Runtime.InteropServices.CharSet" /> 枚举的值。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultCharSetAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 值初始化 <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> 类的新实例。</summary>
      <param name="charSet" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; values.">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 值之一。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary vsli:raw="Gets the default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">获取对 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 的任何调用的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 的默认值。</summary>
      <returns vsli:raw="The default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">对 <see cref="T:System.Runtime.InteropServices.CharSet" /> 的任何调用的 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 的默认值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">指定用于搜索提供平台调用函数的 DLL 的路径。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; class, specifying the paths to use when searching for the targets of platform invokes.">初始化 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 类的新实例，该实例指定在搜索目标平台调用时使用的路径。</summary>
      <param name="paths" vsli:raw="A bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">用于指定平台调用期间 LoadLibraryEx<c></c> 函数搜索路径的枚举值的按位组合。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary vsli:raw="Gets a bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">获取用于指定平台调用期间 LoadLibraryEx<c></c> 函数搜索路径的枚举值的按位组合。</summary>
      <returns vsli:raw="A bitwise combination of enumeration values that specify search paths for platform invokes.">指定平台调用搜索路径的枚举值的按位组合。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary vsli:raw="Sets the default value of a parameter when called from a language that supports default parameters. This class cannot be inherited.">设置当从支持默认参数的语言中调用参数时参数的默认值。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultParameterValueAttribute&quot; /&gt; class with the default value of a parameter.">用参数的默认值初始化 <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> 类的新实例。</summary>
      <param name="value" vsli:raw="An object that represents the default value of a parameter.">表示参数默认值的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary vsli:raw="Gets the default value of a parameter.">获取参数的默认值。</summary>
      <returns vsli:raw="An object that represents the default value of a parameter.">表示参数默认值的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_DISPATCH&quot; /&gt;.">对封送处理程序应该将其作为 <see langword="VT_DISPATCH" /> 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt; class with the object being wrapped.">使用正在包装的对象初始化 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 类的新实例。</summary>
      <param name="obj" vsli:raw="The object to be wrapped and converted to &lt;see cref=&quot;F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH&quot; /&gt;.">要包装并转换成 <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" /> 的对象。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a class or an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;obj&quot; /&gt; does not support &lt;see langword=&quot;IDispatch&quot; /&gt;.">
        <paramref name="obj" /> 不是类或数组。  
  
- 或 - 
 <paramref name="obj" /> 不支持 <see langword="IDispatch" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter was marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;obj&quot; /&gt; parameter inherits from a type marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" /> 参数是用被传递了一个 <see langword="false" /> 值的 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 特性标记的。  
  
- 或 - 
<paramref name="obj" /> 参数继承自一个类型，该类型是用一个被传递了 <see langword="false" /> 值的 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 特性标记的。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">获取由 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 包装的对象。</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">由 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary vsli:raw="Specifies the COM dispatch identifier (DISPID) of a method, field, or property.">指定方法、字段或属性的 COM 调度标识符 (DISPID)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;DispIdAttribute&quot; /&gt; class with the specified DISPID.">用指定的 DISPID 初始化 <see langword="DispIdAttribute" /> 类的新实例。</summary>
      <param name="dispId" vsli:raw="The DISPID for the member.">成员的 DISPID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary vsli:raw="Gets the DISPID for the member.">获取成员的 DISPID。</summary>
      <returns vsli:raw="The DISPID for the member.">成员的 DISPID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary vsli:raw="Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.">指示由非托管动态链接库 (DLL) 公开为静态入口点的特性化方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">将 Unicode 字符转换为 ANSI 字符时，启用或禁用最佳映射行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary vsli:raw="Indicates the calling convention of an entry point.">指示入口点的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method and controls name mangling.">指示如何向方法封送字符串参数，并控制名称重整。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary vsli:raw="Indicates the name or ordinal of the DLL entry point to be called.">指示要调用的 DLL 入口点的名称或序号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary vsli:raw="Controls whether the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.CharSet&quot; /&gt; field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.">控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 字段是否使公共语言运行时在非托管 DLL 中搜索入口点名称，而不使用指定的入口点名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary vsli:raw="Indicates whether unmanaged methods that have &lt;see langword=&quot;HRESULT&quot; /&gt; return values are directly translated or whether &lt;see langword=&quot;HRESULT&quot; /&gt; return values are automatically converted to exceptions.">指示是否直接转换具有 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值的非托管方法，或是否自动将 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值转换为异常。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee sets an error (&lt;see langword=&quot;SetLastError&quot; /&gt; on Windows or &lt;see langword=&quot;errno&quot; /&gt; on other platforms) before returning from the attributed method.">指示被调用方在从属性化方法返回之前是否调用 <see langword="SetLastError" /> Windows API 函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt; class with the name of the DLL containing the method to import.">使用包含要导入的方法的 DLL 的名称初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 类的新实例。</summary>
      <param name="dllName" vsli:raw="The name of the DLL that contains the unmanaged method. In .NET Framework, this can include an assembly display name, if the DLL is included in an assembly.">包含非托管方法的 DLL 的名称。 如果 DLL 包含在某个程序集中，则可以包含程序集显示名称。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary vsli:raw="Gets the name of the DLL file that contains the entry point.">获取包含入口点的 DLL 文件的名称。</summary>
      <returns vsli:raw="The name of the DLL file that contains the entry point.">包含入口点的 DLL 文件的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary vsli:raw="Provides a delegate used to resolve native libraries via callback.">提供用于通过回调解析本机库的委托。</summary>
      <param name="libraryName" vsli:raw="The native library to resolve.">要解析的本机库。</param>
      <param name="assembly" vsli:raw="The assembly requesting the resolution.">请求解析的程序集。</param>
      <param name="searchPath" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the PInvoke, if any. Otherwise, the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the assembly, if any. Otherwise &lt;see langword=&quot;null&quot; /&gt;.">PInvoke 上的 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />（如果有）。 否则为程序集上的 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />（如果有）。 否则为 <see langword="null" />。</param>
      <returns vsli:raw="The handle for the loaded native library on success, or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; on failure.">成功时的已加载本机库的句柄，或失败时的 <see cref="F:System.IntPtr.Zero" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">指定用于搜索提供平台调用功能的 DLL 的路径。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary vsli:raw="Include the application directory in the DLL search path.">在 DLL 的搜索路径中包含了应用程序目录。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary vsli:raw="When searching for assembly dependencies, include the directory that contains the assembly itself, and search that directory first. When used in Native AOT and single-file deployment models, the application's installation directory is considered the &quot;assembly directory&quot; and is searched.">当搜索程序集依赖项时，请包括包含程序集本身的目录并首先查找该目录。 在路径传递到 Win32 LoadLibraryEx 函数之前，通过 .NET Framework 使用此值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary vsli:raw="Search the application directory, and then call the Win32 LoadLibraryEx function with the &lt;c&gt;LOAD_WITH_ALTERED_SEARCH_PATH&lt;/c&gt; flag. This value is ignored if any other value is specified. Operating systems that do not support the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; attribute use this value, and ignore other values.">搜索应用程序目录，然后调用有 <c>LOAD_WITH_ALTERED_SEARCH_PATH</c> 标志的 Win32 LoadLibraryEx 函数。 如果指定任何其他值，则忽略该值。 不支持 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 特性使用此值并忽略其他值的操作系统。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary vsli:raw="Include the application directory, the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory, and user directories in the DLL search path.">在 DLL 搜索路径中包含了应用程序目录、<see langword="%WinDir%\System32" /> 目录和用户目录。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary vsli:raw="Include the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory in the DLL search path.">在 DLL 搜索路径中包含了 <see langword="%WinDir%\System32" /> 目录。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary vsli:raw="Search for the dependencies of a DLL in the folder where the DLL is located before searching other folders.">搜索在搜索其他文件夹之前 DLL 所在文件夹中的依赖项。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary vsli:raw="Include any path that was explicitly added to the process-wide search path by using the Win32 &lt;c&gt;AddDllDirectory&lt;/c&gt; function.">通过使用 Win32 <c>AddDllDirectory</c> 函数，包含了显式添加了过程搜索路径的所有路径。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute">
      <summary vsli:raw="Attribute required by any type that is returned by &lt;see cref=&quot;M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)" /> 返回的任何类型所需的特性。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute.#ctor">
      <summary vsli:raw="Instance constructor.">实例构造函数。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_ERROR&quot; /&gt;.">对封送处理程序应该将其作为 <see langword="VT_ERROR" /> 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT that corresponds to the exception supplied.">使用与所提供的异常相对应的 HRESULT 初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="e" vsli:raw="The exception to be converted to an error code.">要转换为错误代码的异常。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT of the error.">使用错误的 HRESULT 初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="errorCode" vsli:raw="The HRESULT of the error.">错误的 HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with an object containing the HRESULT of the error.">使用包含错误 HRESULT 的对象初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="errorCode" vsli:raw="The object containing the HRESULT of the error.">包含错误的 HRESULT 的对象。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;errorCode&quot; /&gt; parameter is not an &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="errorCode" /> 参数不是 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary vsli:raw="Gets the error code of the wrapper.">获取包装的错误代码。</summary>
      <returns vsli:raw="The HRESULT of the error.">错误的 HRESULT。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary vsli:raw="Supplies an explicit &lt;see cref=&quot;T:System.Guid&quot; /&gt; when an automatic GUID is undesirable.">当不需要自动 GUID 时提供显式的 <see cref="T:System.Guid" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.GuidAttribute&quot; /&gt; class with the specified GUID.">用指定的 GUID 初始化 <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> 类的新实例。</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; to be assigned.">要分配的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">获取类的 <see cref="T:System.Guid" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">类的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary vsli:raw="Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.">跟踪未完成的句柄并在达到指定阈值时强制实施垃圾回收。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name and a threshold at which to begin handle collection.">使用一个名称以及一个阈值（在达到该值时开始执行图柄回收）初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 类的新实例。</summary>
      <param name="name" vsli:raw="A name for the collector. This parameter allows you to name collectors that track handle types separately.">收集器的名称。 此参数允许你为跟踪图柄类型的收集器分别命名。</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">指定何时开始执行回收的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.">
        <paramref name="initialThreshold" /> 参数小于 0。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur.">使用一个名称、一个指定何时开始执行图柄回收的阈值，以及一个指定必须进行图柄回收的时间的阈值初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 类的新实例。</summary>
      <param name="name" vsli:raw="A name for the collector.  This parameter allows you to name collectors that track handle types separately.">收集器的名称。  此参数允许你为跟踪图柄类型的收集器分别命名。</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">指定何时开始执行回收的值。</param>
      <param name="maximumThreshold" vsli:raw="A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.">指定必须开始进行回收的时间的值。 此值应设置为可用图柄的最大数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than 0.">
        <paramref name="initialThreshold" /> 参数小于 0。  
  
- 或 - 
<paramref name="maximumThreshold" /> 参数小于 0。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than the &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter.">
        <paramref name="maximumThreshold" /> 参数小于 <paramref name="initialThreshold" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary vsli:raw="Increments the current handle count.">增加当前图柄计数。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 属性小于 0。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary vsli:raw="Decrements the current handle count.">减少当前图柄计数。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 属性小于 0。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary vsli:raw="Gets the number of handles collected.">获取回收的图柄的数量。</summary>
      <returns vsli:raw="The number of handles collected.">回收的句柄的数量。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections should begin.">获取一个值，该值指定了何时开始执行回收。</summary>
      <returns vsli:raw="A value that specifies the point at which collections should begin.">指定何时开始执行回收的值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections must occur.">获取指定必须开始进行回收的时间的值。</summary>
      <returns vsli:raw="A value that specifies the point at which collections must occur.">指定必须开始进行回收的时间的值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; object.">获取 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 对象的名称。</summary>
      <returns vsli:raw="This &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Name&quot; /&gt; property allows you to name collectors that track handle types separately.">此 <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> 属性允许您为跟踪句柄类型的回收器分别命名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary vsli:raw="Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.">将包含句柄的托管对象包装到通过平台调用传递到非托管代码的资源中。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; class with the object to wrap and a handle to the resource used by unmanaged code.">用要包装的对象和由非托管代码使用的资源的句柄初始化 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 类的新实例。</summary>
      <param name="wrapper" vsli:raw="A managed object that should not be finalized until the platform invoke call returns.">在平台 invoke 调用返回前不应完成的托管对象。</param>
      <param name="handle" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that indicates a handle to a resource.">
        <see cref="T:System.IntPtr" /> 指示资源的句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary vsli:raw="Returns the handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">返回指定的 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的资源的句柄。</summary>
      <param name="value" vsli:raw="The object that needs a handle.">需要句柄的对象。</param>
      <returns vsli:raw="The handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">指定的 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的资源的句柄。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary vsli:raw="Returns the internal integer representation of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">返回 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的内部整数表示形式。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object to retrieve an internal integer representation from.">要从中检索内部整数表示形式的 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; object that represents a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">表示 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的 <see cref="T:System.IntPtr" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary vsli:raw="Gets the handle to a resource.">获取资源的句柄。</summary>
      <returns vsli:raw="The handle to a resource.">资源的句柄。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary vsli:raw="Gets the object holding the handle to a resource.">获取保存资源句柄的对象。</summary>
      <returns vsli:raw="The object holding the handle to a resource.">保存资源句柄的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary vsli:raw="Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.">为客户提供访问实际对象的方法，而不是访问自定义封送处理程序分发的适配器对象的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary vsli:raw="Provides access to the underlying object wrapped by a custom marshaler.">提供对自定义封送处理程序包装的基础对象的访问权限。</summary>
      <returns vsli:raw="The object contained by the adapter object.">适配器对象包含的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary vsli:raw="Enables users to write activation code for managed objects that extend &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt;.">使用户能够为扩展 <see cref="T:System.MarshalByRefObject" /> 的托管对象编写激活代码。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary vsli:raw="Creates a new instance of the specified type.">创建指定类型的新实例。</summary>
      <param name="serverType" vsli:raw="The type to activate.">要激活的类型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt; associated with the specified type.">与指定类型关联的 <see cref="T:System.MarshalByRefObject" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary vsli:raw="Provides custom wrappers for handling method calls.">提供用于处理方法调用的自定义包装器。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary vsli:raw="Performs necessary cleanup of the managed data when it is no longer needed.">不再需要时执行必要的托管数据的清除。</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be destroyed.">要销毁的托管对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary vsli:raw="Performs necessary cleanup of the unmanaged data when it is no longer needed.">不再需要时执行必要的非托管数据的清除。</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be destroyed.">指向要销毁的非托管数据的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary vsli:raw="Returns the size of the native data to be marshaled.">返回要封送的本机数据的大小。</summary>
      <returns vsli:raw="The size, in bytes, of the native data.">本机数据的大小（以字节为单位）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary vsli:raw="Converts the managed data to unmanaged data.">将托管数据转换为非托管数据。</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be converted.">要转换的托管对象。</param>
      <returns vsli:raw="A pointer to the COM view of the managed object.">指向托管对象的 COM 视图的指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary vsli:raw="Converts the unmanaged data to managed data.">将非托管数据转换为托管数据。</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be wrapped.">指向要包装的非托管数据的指针。</param>
      <returns vsli:raw="An object that represents the managed view of the COM data.">表示 COM 数据的托管视图的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary vsli:raw="Enables developers to provide a custom, managed implementation of the IUnknown::QueryInterface(REFIID riid, void **ppvObject) method.">允许开发人员提供 IUnknown::QueryInterface(REFIID riid, void **ppvObject) 方法的自定义托管实现。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Returns an interface according to a specified interface ID.">根据指定的接口 ID 返回接口。</summary>
      <param name="iid" vsli:raw="The GUID of the requested interface.">请求的接口的 GUID。</param>
      <param name="ppv" vsli:raw="A reference to the requested interface, when this method returns.">此方法返回时，对所请求的接口的引用。</param>
      <returns vsli:raw="One of the enumeration values that indicates whether a custom implementation of IUnknown::QueryInterface was used.">枚举值之一，指示是否使用了 IUnknown::QueryInterface 的自定义实现。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.IDynamicInterfaceCastable">
      <summary vsli:raw="Interface used to participate in a type cast failure.">用于参与类型强制转换失败的接口。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)">
      <summary vsli:raw="Called during interface dispatch when the given interface type cannot be found in the class's metadata.">当类的元数据中找不到给定接口类型时，在接口调度期间调用。</summary>
      <param name="interfaceType" vsli:raw="The interface type.">接口类型。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The returned type is not an interface type, or it was not marked with the &lt;see cref=&quot;T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute&quot; /&gt;.">返回的类型不是接口类型，或者未使用 <see cref="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute" /> 进行标记。</exception>
      <returns vsli:raw="The type that should be used to dispatch for &lt;paramref name=&quot;interfaceType&quot; /&gt; on the current object.">应该用于在当前对象上为 <paramref name="interfaceType" /> 调度的类型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)">
      <summary vsli:raw="Called when an implementing class instance is cast to an interface type that is not contained in the class's metadata.">在将实现的类实例强制转换为该类的元数据中不包含的接口类型时调用。</summary>
      <param name="interfaceType" vsli:raw="The interface type.">接口类型。</param>
      <param name="throwIfNotImplemented" vsli:raw="Indicates if the function should throw an exception instead of returning &lt;see langword=&quot;false&quot; /&gt;.">指示函数是应引发异常，还是应返回 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be cast to the given interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此对象可以强制转换为给定接口，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary vsli:raw="Indicates that the types defined within an assembly were originally defined in a type library.">指示在程序集内定义的类型原来在类型库中定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute&quot; /&gt; class with the name of the original type library file.">用原始类型库文件的名称初始化 <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> 类的新实例。</summary>
      <param name="tlbFile" vsli:raw="The location of the original type library file.">原始类型库文件的位置。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary vsli:raw="Gets the name of the original type library file.">获取原始类型库文件的名称。</summary>
      <returns vsli:raw="The name of the original type library file.">原始类型库文件的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary vsli:raw="Indicates whether a managed interface is dual, dispatch-only, or &lt;see langword=&quot;IUnknown&quot; /&gt; -only when exposed to COM.">指示向 COM 公开时，托管接口是双重的、仅支持调度的、还是仅支持 <see langword="IUnknown" /> 的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 类的新实例。</summary>
      <param name="interfaceType" vsli:raw="Describes how the interface should be exposed to COM clients.">描述应如何向 COM 客户端公开接口。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 类的新实例。</summary>
      <param name="interfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; values that describes how the interface should be exposed to COM clients.">
        <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值之一，指定如何向 COM 客户端公开接口。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">获取 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，该值描述应如何向 COM 公开接口。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">
        <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，该值描述应如何向 COM 公开接口。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary vsli:raw="The exception thrown when an invalid COM object is used.">当使用无效的 COM 对象时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with default properties.">用默认属性初始化 <see langword="InvalidComObjectException" /> 的实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;COMException&quot; /&gt; class from serialization data.">从序列化数据初始化 <see langword="COMException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with a message.">用消息初始化 <see langword="InvalidComObjectException" /> 的实例。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidComObjectException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解释异常原因的错误消息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary vsli:raw="The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.">当封送处理程序遇到无法封送到托管代码的变量类型参数时，由该封送处理程序引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with default values.">使用默认值初始化 <see langword="InvalidOleVariantTypeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class from serialization data.">从序列化数据初始化 <see langword="InvalidOleVariantTypeException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with a specified message.">用指定的消息初始化 <see langword="InvalidOleVariantTypeException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidOleVariantTypeException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解释异常原因的错误消息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary vsli:raw="Indicates that a method's unmanaged signature expects a locale identifier (LCID) parameter.">指示方法的非托管签名需要区域设置标识符 (LCID) 参数。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;LCIDConversionAttribute&quot; /&gt; class with the position of the LCID in the unmanaged signature.">用非托管签名中 LCID 的位置初始化 <see langword="LCIDConversionAttribute" /> 类的新实例。</summary>
      <param name="lcid" vsli:raw="Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument.">指示非托管签名中 LCID 参数的位置，其中 0 是第一个参数。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary vsli:raw="Gets the position of the LCID argument in the unmanaged signature.">获取非托管签名中 LCID 参数的位置。</summary>
      <returns vsli:raw="The position of the LCID argument in the unmanaged signature, where 0 is the first argument.">非托管签名中 LCID 参数的位置，其中 0 是第一个参数。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary vsli:raw="Provides support for user customization of interop stubs in managed-to-COM interop scenarios.">为用户在托管与 COM 互操作方案中自定义互操作存根提供支持。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute&quot; /&gt; class with the specified class type and method name.">使用指定的类类型和方法名称初始化 <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> 类的新实例。</summary>
      <param name="classType" vsli:raw="The class that contains the required stub method.">包含所需的存根方法的类。</param>
      <param name="methodName" vsli:raw="The name of the stub method.">存根方法的名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodName&quot; /&gt; cannot be found.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is not static or non-generic.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method's parameter list does not match the expected parameter list for the stub.">找不到 <paramref name="methodName" />。  
  
- 或 - 
该方法不是静态或非泛型方法。  
  
- 或 - 
该方法的参数列表与存根的预期参数列表不匹配。</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.">由于存根方法具有私有或受保护的可访问性，或由于安全问题，包含托管互操作方法的接口无权访问存根方法。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary vsli:raw="Gets the class that contains the required stub method.">获取包含所需存根方法的类。</summary>
      <returns vsli:raw="The class that contains the customized interop stub.">包含自定义的互操作存根的类。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary vsli:raw="Gets the name of the stub method.">获取存根方法的名称。</summary>
      <returns vsli:raw="The name of a customized interop stub.">自定义的互操作存根的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.">提供了一个方法集合，这些方法用于分配非托管内存、复制非托管内存块、将托管类型转换为非托管类型，此外还提供了在与非托管代码交互时使用的其他杂项方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary vsli:raw="Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.">表示系统上的默认字符大小；Unicode 系统上默认值为 2，ANSI 系统上默认值为 1。 此字段为只读。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary vsli:raw="Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.">表示用于当前操作系统的双字节字符集 (DBCS) 的最大大小（以字节为单位）。 此字段为只读。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary vsli:raw="Increments the reference count on the specified interface.">递增指定接口上的引用计数。</summary>
      <param name="pUnk" vsli:raw="The interface reference count to increment.">要递增的接口引用计数。</param>
      <returns vsli:raw="The new value of the reference count on the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">
        <paramref name="pUnk" /> 参数上的引用计数的新值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary vsli:raw="Allocates a block of memory of specified size from the COM task memory allocator.">从 COM 任务内存分配器分配指定大小的内存块。</summary>
      <param name="cb" vsli:raw="The size of the block of memory to be allocated.">要分配的内存块的大小。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">没有足够的内存来满足该请求。</exception>
      <returns vsli:raw="An integer representing the address of the block of memory allocated. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">一个整数，表示分配的内存块的地址。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> 释放该内存。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the specified number of bytes.">通过使用指定的字节数，从进程的非托管内存中分配内存。</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">内存中的所需字节数。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">没有足够的内存来满足该请求。</exception>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">指向新分配的内存的指针。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法释放该内存。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.">通过使用指向指定字节数的指针，从进程的非托管内存中分配内存。</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">内存中的所需字节数。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">没有足够的内存来满足该请求。</exception>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">指向新分配的内存的指针。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法释放该内存。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary vsli:raw="Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.">指示是否可以清除任何上下文中的运行时可调用包装器 (RCW)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are any RCWs available for cleanup; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果存在任何可清除的 RCW，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary vsli:raw="Gets an interface pointer identified by the specified moniker.">获取由指定的名字对象标识的接口指针。</summary>
      <param name="monikerName" vsli:raw="The moniker corresponding to the desired interface pointer.">与所需接口指针相对应的名字对象。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="An unrecognized HRESULT was returned by the unmanaged &lt;see langword=&quot;BindToMoniker&quot; /&gt; method.">非托管的 <see langword="BindToMoniker" /> 方法返回无法识别的 HRESULT。</exception>
      <returns vsli:raw="An object containing a reference to the interface pointer identified by the &lt;paramref name=&quot;monikerName&quot; /&gt; parameter. A moniker is a name, and in this case, the moniker is defined by an interface.">一个对象，它包含对由 <paramref name="monikerName" /> 参数标识的接口指针的引用。 名字对象是一个名称，在此情况下，名字对象由接口定义。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary vsli:raw="Changes the strength of an object's COM Callable Wrapper (CCW) handle.">更改对象的 COM 可调用包装器 (CCW) 句柄的强度。</summary>
      <param name="otp" vsli:raw="The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.">一个对象，其 CCW 包含带有引用计数的句柄。 如果 CCW 上的引用计数大于零，则该句柄是强句柄；否则为弱句柄。</param>
      <param name="fIsWeak" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to change the strength of the handle on the &lt;paramref name=&quot;otp&quot; /&gt; parameter to weak, regardless of its reference count; &lt;see langword=&quot;false&quot; /&gt; to reset the handle strength on &lt;paramref name=&quot;otp&quot; /&gt; to be reference counted.">为 <see langword="true" /> 时，忽略 <paramref name="otp" /> 的引用计数，将其句柄强度改为弱；为 <see langword="false" /> 时，重置要进行引用计数的 <paramref name="otp" /> 上的句柄强度。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary vsli:raw="Notifies the runtime to clean up all Runtime Callable Wrappers (RCWs) allocated in the current context.">通知运行时清理当前上下文中分配的所有运行时可调用包装器 (RCW)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.">将数据从一维托管 8 位无符号整数数组复制到非托管内存指针。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">从中进行复制的一维数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要复制到的内存指针。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.">将数据从一维托管字符数组复制到非托管内存指针。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">从中进行复制的一维数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要复制到的内存指针。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.">将数据从一维托管双精度浮点数数组复制到非托管内存指针。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">从中进行复制的一维数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要复制到的内存指针。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.">将数据从一维托管 16 位带符号整数数组复制到非托管内存指针。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">从中进行复制的一维数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要复制到的内存指针。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.">将数据从一维托管 32 位带符号整数数组复制到非托管内存指针。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">从中进行复制的一维数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要复制到的内存指针。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.">将数据从一维托管 64 位带符号整数数组复制到非托管内存指针。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">从中进行复制的一维数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要复制到的内存指针。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.">将数据从非托管内存指针复制到托管 8 位无符号整数数组。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">从中进行复制的内存指针。</param>
      <param name="destination" vsli:raw="The array to copy to.">要复制到的数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed character array.">将数据从非托管内存指针复制到托管字符数组。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">从中进行复制的内存指针。</param>
      <param name="destination" vsli:raw="The array to copy to.">要复制到的数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.">将数据从非托管内存指针复制到托管双精度浮点数数组。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">从中进行复制的内存指针。</param>
      <param name="destination" vsli:raw="The array to copy to.">要复制到的数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.">将数据从非托管内存指针复制到托管 16 位带符号整数数组。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">从中进行复制的内存指针。</param>
      <param name="destination" vsli:raw="The array to copy to.">要复制到的数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.">将数据从非托管内存指针复制到托管 32 位带符号整数数组。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">从中进行复制的内存指针。</param>
      <param name="destination" vsli:raw="The array to copy to.">要复制到的数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.">将数据从非托管内存指针复制到托管 64 位带符号整数数组。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">从中进行复制的内存指针。</param>
      <param name="destination" vsli:raw="The array to copy to.">要复制到的数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array.">将数据从非托管的内存指针复制到托管的 <see cref="T:System.IntPtr" /> 数组。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">从中进行复制的内存指针。</param>
      <param name="destination" vsli:raw="The array to copy to.">要复制到的数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.">将数据从非托管内存指针复制到托管单精度浮点数数组。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">从中进行复制的内存指针。</param>
      <param name="destination" vsli:raw="The array to copy to.">要复制到的数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">目标数组中从零开始的索引，在此处开始复制。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array to an unmanaged memory pointer.">将数据从一维托管的 <see cref="T:System.IntPtr" /> 数组复制到非托管内存指针。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">从中进行复制的一维数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要复制到的内存指针。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.">将数据从一维托管单精度浮点数数组复制到非托管内存指针。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">从中进行复制的一维数组。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">源数组中从零开始的索引，在此处开始复制。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">要复制到的内存指针。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">要复制的数组元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary vsli:raw="Aggregates a managed object with the specified COM object.">聚合托管对象和指定的 COM 对象。</summary>
      <param name="pOuter" vsli:raw="The outer &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">外部 <see langword="IUnknown" /> 指针。</param>
      <param name="o" vsli:raw="An object to aggregate.">要聚合的对象。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> 是一个 Windows 运行时 对象。</exception>
      <returns vsli:raw="The inner &lt;see langword=&quot;IUnknown&quot; /&gt; pointer of the managed object.">托管对象的内部 <see langword="IUnknown" /> 指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Aggregates a managed object of the specified type with the specified COM object.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 聚合指定类型的托管对象和指定的 COM 对象。</summary>
      <param name="pOuter" vsli:raw="The outer IUnknown pointer.">外部 IUnknown 指针。</param>
      <param name="o" vsli:raw="The managed object to aggregate.">要集合的托管对象。</param>
      <typeparam name="T" vsli:raw="The type of the managed object to aggregate.">要聚合的托管对象的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> 是一个 Windows 运行时 对象。</exception>
      <returns vsli:raw="The inner IUnknown pointer of the managed object.">托管对象的内部 IUnknown 指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary vsli:raw="Wraps the specified COM object in an object of the specified type.">在指定类型的对象中包装指定的 COM 对象。</summary>
      <param name="o" vsli:raw="The object to be wrapped.">要包装的对象。</param>
      <param name="t" vsli:raw="The type of wrapper to create.">要创建的包装器的类型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> 必须派生自 <see langword="__ComObject" />。  
  
- 或 - 
 <paramref name="t" /> 是 Windows 运行时 类型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the destination type because it does not support all required interfaces.">
        <paramref name="o" /> 不支持所有必需的接口，因此无法转换为目标类型。</exception>
      <returns vsli:raw="The newly wrapped object that is an instance of the desired type.">新包装的对象，该对象是所需类型的实例。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Wraps the specified COM object in an object of the specified type.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 在指定类型的对象中包装指定的 COM 对象。</summary>
      <param name="o" vsli:raw="The object to be wrapped.">要包装的对象。</param>
      <typeparam name="T" vsli:raw="The type of object to wrap.">要包装的对象的类型。</typeparam>
      <typeparam name="TWrapper" vsli:raw="The type of object to return.">要返回的对象的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;typeparamref name=&quot;T&quot; /&gt; is a Windows Runtime type.">
        <typeparamref name="T" /> 必须派生自 <see langword="__ComObject" />。  
  
- 或 - 
 <typeparamref name="T" /> 是 Windows 运行时 类型。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the &lt;paramref name=&quot;TWrapper&quot; /&gt; because it does not support all required interfaces.">
        <paramref name="o" /> 无法转换为 <paramref name="TWrapper" />，因为它不支持所有需要的接口。</exception>
      <returns vsli:raw="The newly wrapped object.">新包装的对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Frees all substructures that the specified unmanaged memory block points to.">释放指定的非托管内存块所指向的所有子结构。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">指向非托管内存块的指针。</param>
      <param name="structuretype" vsli:raw="Type of a formatted class. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">格式化类的类型。 该类型提供删除 <paramref name="ptr" /> 参数指向的缓冲区时必需的布局信息。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <paramref name="structureType" /> 具有自动布局。 但请该用连续或显式布局。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Frees all substructures of a specified type that the specified unmanaged memory block points to.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 释放指定的非托管内存块所指向的所有指定类型的子结构。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">指向非托管内存块的指针。</param>
      <typeparam name="T" vsli:raw="The type of the formatted structure. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">格式化结构的类型。 该类型提供删除 <paramref name="ptr" /> 参数指向的缓冲区时必需的布局信息。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <typeparamref name="T" /> 具有自动布局。 但请该用连续或显式布局。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary vsli:raw="Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.">通过将运行时可调用包装器 (RCW) 的引用计数设置为 0，释放对它的所有引用。</summary>
      <param name="o" vsli:raw="The RCW to be released.">要释放的 RCW。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> 不是有效的 COM 对象。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The new value of the reference count of the RCW associated with the &lt;paramref name=&quot;o&quot; /&gt; parameter, which is 0 (zero) if the release is successful.">与 <paramref name="o" /> 参数关联的 RCW 的新引用计数值，如果释放成功，则为 0（零）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a &lt;see langword=&quot;BSTR&quot; /&gt; using the COM SysFreeString function.">使用 COM SysFreeString 函数释放 <see langword="BSTR" />。</summary>
      <param name="ptr" vsli:raw="The address of the BSTR to be freed.">要释放的 BSTR 的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary vsli:raw="Frees a block of memory allocated by the unmanaged COM task memory allocator.">释放由非托管 COM 任务内存分配器分配的内存块。</summary>
      <param name="ptr" vsli:raw="The address of the memory to be freed.">要释放的内存的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary vsli:raw="Frees memory previously allocated from the unmanaged memory of the process.">释放以前从进程的非托管内存中分配的内存。</summary>
      <param name="hglobal" vsli:raw="The handle returned by the original matching call to &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">由对 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 的原始匹配调用返回的句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary vsli:raw="Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).">返回指定类型的全局唯一标识符 (GUID)，或使用类型库导出程序 (Tlbexp.exe) 所用的算法生成 GUID。</summary>
      <param name="type" vsli:raw="The type to generate a GUID for.">要为其生成 GUID 的类型。</param>
      <returns vsli:raw="An identifier for the specified type.">指定类型的标识符。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary vsli:raw="Returns a programmatic identifier (ProgID) for the specified type.">返回指定类型的编程标识符 (ProgID)。</summary>
      <param name="type" vsli:raw="The type to get a ProgID for.">要获取其 ProgID 的类型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is not a class that can be create by COM. The class must be public, have a public parameterless constructor, and be COM visible.">
        <paramref name="type" /> 参数不是由 COM 创建的类。 该类必须是公共的，必须具有公共的无参数构造函数，而且必须是 COM 可见的。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The ProgID of the specified type.">指定类型的 ProgID。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.">返回一个指向 IUnknown 接口的指针，该指针表示指定对象上的指定接口。 默认情况下，启用自定义查询接口访问。</summary>
      <param name="o" vsli:raw="The object that provides the interface.">提供接口的对象。</param>
      <param name="T" vsli:raw="The type of interface that is requested.">所请求接口的类型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">
        <typeparamref name="T" /> 参数不是接口。  
  
- 或 - 
该类型对 COM 不可见。  
  
- 或 - 
<typeparamref name="T" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the requested interface.">
        <paramref name="o" /> 参数不支持请求的接口。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 参数为 <see langword="null" />。  
  
- 或 - 
<typeparamref name="T" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The interface pointer that represents the specified interface for the object.">表示对象的指定接口的接口指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.">返回一个指向 IUnknown 接口的指针，该指针表示指定对象上的指定接口。 自定义查询接口访问由指定的自定义模式控制。</summary>
      <param name="o" vsli:raw="The object that provides the interface.">提供接口的对象。</param>
      <param name="T" vsli:raw="The type of interface that is requested.">所请求接口的类型。</param>
      <param name="mode" vsli:raw="One of the enumeration values that indicates whether to apply an &lt;see langword=&quot;IUnknown::QueryInterface&quot; /&gt; customization that is supplied by an &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt;.">枚举值之一，用于指示是否要应用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 提供的 <see langword="IUnknown::QueryInterface" /> 自定义。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">
        <typeparamref name="T" /> 参数不是接口。  
  
- 或 - 
该类型对 COM 不可见。  
  
- 或 - 
<typeparamref name="T" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The object &lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">对象 <paramref name="o" /> 不支持请求的接口。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 参数为 <see langword="null" />。  
  
- 或 - 
<typeparamref name="T" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The interface pointer that represents the interface for the object.">表示对象的接口的接口指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns a pointer to an IUnknown interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.">[在 .NET Framework 4.5.1 和更高版本中受支持] 
返回一个指向 IUnknown 接口的指针，该指针表示指定类型的对象上的指定接口。 默认情况下，启用自定义查询接口访问。</summary>
      <param name="o" vsli:raw="The object that provides the interface.">提供接口的对象。</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;o&quot; /&gt;.">
        <paramref name="o" /> 的类型。</typeparam>
      <typeparam name="TInterface" vsli:raw="The type of interface to return.">要返回的接口的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TInterface&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is an open generic type.">
        <paramref name="TInterface" /> 参数不是接口。  
  
- 或 - 
该类型对 COM 不可见。  
  
- 或 - 
<typeparamref name="T" /> 参数是开放式泛型类型。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">
        <paramref name="o" /> 参数不支持 <paramref name="TInterface" /> 接口。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The interface pointer that represents the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">表示 <paramref name="TInterface" /> 接口的接口指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary vsli:raw="Retrieves data that is referenced by the specified key from the specified COM object.">从指定的 COM 对象检索指定键所引用的数据。</summary>
      <param name="obj" vsli:raw="The COM object that contains the data that you want.">包含所需数据的 COM 对象。</param>
      <param name="key" vsli:raw="The key in the internal hash table of &lt;paramref name=&quot;obj&quot; /&gt; to retrieve the data from.">要从中检索数据的 <paramref name="obj" /> 的内部哈希表中的键。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> 不是 COM 对象。  
  
- 或 - 
 <paramref name="obj" /> 是一个 Windows 运行时 对象。</exception>
      <returns vsli:raw="The data represented by the &lt;paramref name=&quot;key&quot; /&gt; parameter in the internal hash table of the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">
        <paramref name="obj" /> 参数的内部哈希表中 <paramref name="key" /> 参数所表示的数据。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary vsli:raw="Converts an unmanaged function pointer to a delegate.">将非托管函数指针转换为委托。</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to be converted.">要转换的非托管函数指针。</param>
      <param name="t" vsli:raw="The type of the delegate to be returned.">要返回的委托的类型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is not a delegate or is generic.">
        <paramref name="t" /> 参数不是委托或泛型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="t" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="A delegate instance that can be cast to the appropriate delegate type.">可转换为适当的委托类型的委托实例。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an unmanaged function pointer to a delegate of a specified type.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将非托管函数指针转换为指定类型的委托。</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to convert.">要转换的非托管函数指针。</param>
      <typeparam name="TDelegate" vsli:raw="The type of the delegate to return.">要返回的委托的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TDelegate&quot; /&gt; generic parameter is not a delegate, or it is an open generic type.">
        <paramref name="TDelegate" /> 泛型参数不是代理，或者它是开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="A instance of the specified delegate type.">指定委托类型的实例。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary vsli:raw="Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.">检索向 COM 公开时某个类型的虚拟功能表（v 表或 VTBL）中的最后一个槽。</summary>
      <param name="t" vsli:raw="A type that represents an interface or class.">表示接口或类的类型。</param>
      <returns vsli:raw="The last VTBL slot of the interface when exposed to COM. If the &lt;paramref name=&quot;t&quot; /&gt; parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.">向 COM 公开时接口的最后一个 VTBL 槽。 如果 <paramref name="t" /> 参数是一个类，则返回的 VTBL 槽是从该类生成的接口中的最后一个槽。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary vsli:raw="Retrieves a code that identifies the type of the exception that occurred.">检索标识所发生异常的类型的代码。</summary>
      <returns vsli:raw="The type of the exception.">异常的类型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">将指定的 HRESULT 错误代码转换为对应的 <see cref="T:System.Exception" /> 对象。</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">要转换的 HRESULT。</param>
      <returns vsli:raw="An object that represents the converted HRESULT, or &lt;see langword=&quot;null&quot; /&gt; if the HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">一个对象，表示转换后的 HRESULT；或者，如果 HRESULT 值不表示错误代码（例如，<see langword="S_OK" /> 或 <see langword="S_FALSE" />），则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object, with additional error information passed in an IErrorInfo interface for the exception object.">将指定的 HRESULT 错误代码转换为对应的 <see cref="T:System.Exception" /> 对象，其中包括通过此异常对象的 IErrorInfo 接口传递的其他错误信息。</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">要转换的 HRESULT。</param>
      <param name="errorInfo" vsli:raw="A pointer to the &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface and construct the exception just from the error code.">指向 <see langword="IErrorInfo" /> 接口的指针，用于提供有关错误的详细信息。 可以指定 <c>IntPtr(0)</c> 以使用当前 <see langword="IErrorInfo" /> 接口，或者指定 <c>IntPtr(-1)</c> 以忽略当前 <see langword="IErrorInfo" /> 接口，仅从错误代码构造异常。</param>
      <returns vsli:raw="An object that represents the converted HRESULT and information obtained from &lt;paramref name=&quot;errorInfo&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if an HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">一个对象，表示转换后的 HRESULT 的对象和从 <paramref name="errorInfo" /> 获得的信息；或者，如果 HRESULT 值不表示错误代码（例如，<see langword="S_OK" /> 或 <see langword="S_FALSE" />），则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary vsli:raw="Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.">检索与计算机无关的异常描述，以及有关异常发生时线程的状态信息。</summary>
      <returns vsli:raw="A pointer to an EXCEPTION_POINTERS structure.">一个指向 EXCEPTION_POINTERS 结构的指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary vsli:raw="Converts a delegate into a function pointer that is callable from unmanaged code.">将委托转换为可从非托管代码调用的函数指针。</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">要传递给非托管代码的委托。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">
        <paramref name="d" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">一个可传递给非托管代码的值，非托管代码使用该值来调用基础托管委托。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将指定类型的委托转换为可从非托管代码调用的函数指针。</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">要传递给非托管代码的委托。</param>
      <typeparam name="TDelegate" vsli:raw="The type of delegate to convert.">要转换的委托的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">
        <paramref name="d" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">一个可传递给非托管代码的值，非托管代码使用该值来调用基础托管委托。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary vsli:raw="Returns the instance handle (HINSTANCE) for the specified module.">返回指定模块的实例句柄 (HINSTANCE)。</summary>
      <param name="m" vsli:raw="The module whose HINSTANCE is desired.">具有所需 HINSTANCE 的模块。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="m" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The HINSTANCE for &lt;paramref name=&quot;m&quot; /&gt;; or -1 if the module does not have an HINSTANCE.">
        <paramref name="m" /> 的 INSTANCE；如果该模块没有 HINSTANCE，则为 -1。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary vsli:raw="Converts the specified exception to an HRESULT.">将指定异常转换为 HRESULT。</summary>
      <param name="e" vsli:raw="The exception to convert to an HRESULT.">要转换为 HRESULT 的异常。</param>
      <returns vsli:raw="The HRESULT mapped to the supplied exception.">映射到所提供的异常的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary vsli:raw="Returns the HRESULT corresponding to the last error incurred by Win32 code executed using &lt;see cref=&quot;T:System.Runtime.InteropServices.Marshal&quot; /&gt;.">返回 HRESULT，它对应于使用 <see cref="T:System.Runtime.InteropServices.Marshal" /> 执行的 Win32 代码引起的最后一个错误。</summary>
      <returns vsli:raw="The HRESULT corresponding to the last Win32 error code.">对应于最后一个 Win32 错误代码的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary vsli:raw="Returns an IDispatch interface from a managed object.">从托管对象返回一个 IDispatch 接口。</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IDispatch&quot; /&gt; interface is requested.">其 <see langword="IDispatch" /> 接口被请求的对象。</param>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">
        <paramref name="o" /> 不支持请求的接口。</exception>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">
        <paramref name="o" /> 参数的 <see langword="IDispatch" /> 指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary vsli:raw="Returns an IUnknown interface from a managed object.">从托管对象返回 IUnknown 接口。</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IUnknown&quot; /&gt; interface is requested.">其 <see langword="IUnknown" /> 接口被请求的对象。</param>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">
        <paramref name="o" /> 参数的 <see langword="IUnknown" /> 指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary vsli:raw="Returns the error code returned by the last unmanaged function that was called using platform invoke that has the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.SetLastError&quot; /&gt; flag set.">返回由上一个非托管函数返回的错误代码，该函数是使用设置了 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> 标志的平台调用来的。</summary>
      <returns vsli:raw="The last error code set by a call to the Win32 SetLastError function.">通过调用 Win32 SetLastError 函数设置的最后一个错误代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary vsli:raw="Converts an object to a COM VARIANT.">将对象转换为 COM VARIANT。</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">为其获取 COM VARIANT 的对象。</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">一个指针，接收对应于 <paramref name="obj" /> 参数的 VARIANT。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is an instance of a generic type.">
        <paramref name="obj" /> 参数是泛型类型的实例。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an object of a specified type to a COM VARIANT.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将指定类型的对象转换为 COM VARIANT。</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">为其获取 COM VARIANT 的对象。</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">一个指针，接收对应于 <paramref name="obj" /> 参数的 VARIANT。</param>
      <typeparam name="T" vsli:raw="The type of the object to convert.">要转换的对象的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.">返回一个类型实例，该实例通过指向 COM 对象的 IUnknown 接口的指针表示该对象。</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">指向 <see langword="IUnknown" /> 接口的指针。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pUnk&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="pUnk" /> 为 <see cref="F:System.IntPtr.Zero" />。</exception>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">一个对象，表示指定的非托管 COM 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary vsli:raw="Converts a COM VARIANT to an object.">将 COM VARIANT 转换为对象。</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">指向 COM VARIANT 的指针。</param>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> 不是有效的 VARIANT 类型。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> 包含不受支持的类型。</exception>
      <returns vsli:raw="An object that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">对应于 <paramref name="pSrcNativeVariant" /> 参数的对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a COM VARIANT to an object of a specified type.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将 COM VARIANT 转换为指定类型的对象。</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">指向 COM VARIANT 的指针。</param>
      <typeparam name="T" vsli:raw="The type to which to convert the COM VARIANT.">要将 COM VARIANT 转换为的类型。</typeparam>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> 不是有效的 VARIANT 类型。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> 包含不受支持的类型。</exception>
      <returns vsli:raw="An object of the specified type that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">一个与 <paramref name="pSrcNativeVariant" /> 参数对应的指定类型的对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary vsli:raw="Converts an array of COM VARIANTs to an array of objects.">将 COM VARIANT 数组转换为对象数组。</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">指向 COM VARIANT 数组中第一个元素的指针。</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <paramref name="aSrcNativeVariant" /> 中的 COM VARIANT 的计数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> 为负数。</exception>
      <returns vsli:raw="An object array that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">对应于 <paramref name="aSrcNativeVariant" /> 的对象数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an array of COM VARIANTs to an array of a specified type.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将 COM VARIANT 数组转换为指定类型的数组。</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">指向 COM VARIANT 数组中第一个元素的指针。</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <paramref name="aSrcNativeVariant" /> 中的 COM VARIANT 的计数。</param>
      <typeparam name="T" vsli:raw="The type of the array to return.">要返回的数组的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> 为负数。</exception>
      <returns vsli:raw="An array of &lt;typeparamref name=&quot;T&quot; /&gt; objects that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">对应于 <paramref name="aSrcNativeVariant" /> 的 <typeparamref name="T" /> 对象的数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary vsli:raw="Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.">获取虚拟功能表（v 表或 VTBL）中包含用户定义的方法的第一个槽。</summary>
      <param name="t" vsli:raw="A type that represents an interface or a class.">表示接口或类的类型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not visible from COM.">
        <paramref name="t" /> 在 COM 中不可见。</exception>
      <returns vsli:raw="The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on IUnknown, and 7 if the interface is based on IDispatch.">包含用户定义的方法的第一个 VTBL 槽。 如果接口基于 IUnknown，则第一个槽为 3；如果接口基于 IDispatch，则为 7。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary vsli:raw="Returns a managed object of a specified type that represents a COM object.">返回表示 COM 对象的指定类型的托管对象。</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface of the unmanaged object.">指向非托管对象的 <see langword="IUnknown" /> 接口的指针。</param>
      <param name="t" vsli:raw="The type of the requested managed class.">请求的托管类的类型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not attributed with &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> 并不具有 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 特性。  
  
- 或 - 
 <paramref name="t" /> 是 Windows 运行时 类型。</exception>
      <returns vsli:raw="An instance of the class corresponding to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the requested unmanaged COM object.">类的实例，与表示所请求的非托管 COM 对象的 <see cref="T:System.Type" /> 对象相对应。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary vsli:raw="Returns the type associated with the specified class identifier (CLSID).">返回与指定的类标识符 (CLSID) 关联的类型。</summary>
      <param name="clsid" vsli:raw="The CLSID of the type to return.">要返回的类型的 CLSID。</param>
      <returns vsli:raw="&lt;see langword=&quot;System.__ComObject&quot; /&gt; regardless of whether the CLSID is valid.">
        <see langword="System.__ComObject" />，无论 CLSID 是否有效。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary vsli:raw="Retrieves the name of the type represented by an ITypeInfo object.">检索由 ITypeInfo 对象表示的类型的名称。</summary>
      <param name="typeInfo" vsli:raw="An object that represents an &lt;see langword=&quot;ITypeInfo&quot; /&gt; pointer.">一个表示 <see langword="ITypeInfo" /> 指针的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeInfo" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The name of the type that the &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter points to.">
        <paramref name="typeInfo" /> 参数指向的类型的名称。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Creates a unique Runtime Callable Wrapper (RCW) object for a given IUnknown interface.">为给定的 IUnknown 接口创建唯一的运行时可调用包装器 (RCW) 对象。</summary>
      <param name="unknown" vsli:raw="A managed pointer to an &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">指向 <see langword="IUnknown" /> 接口的托管指针。</param>
      <returns vsli:raw="A unique RCW for the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">指定的 <see langword="IUnknown" /> 接口的唯一 RCW。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary vsli:raw="Indicates whether a specified object represents a COM object.">指示指定对象是否表示 COM 对象。</summary>
      <param name="o" vsli:raw="The object to check.">要检查的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;o&quot; /&gt; parameter is a COM type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="o" /> 参数是 COM 类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary vsli:raw="Indicates whether a type is visible to COM clients.">指示类型对 COM 客户端是否可见。</summary>
      <param name="t" vsli:raw="The type to check for COM visibility.">要检查其 COM 可见性的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is visible to COM; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该类型对 COM 可见，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary vsli:raw="Returns the field offset of the unmanaged form of the managed class.">返回托管类的非托管形式的字段偏移量。</summary>
      <param name="t" vsli:raw="A value type or formatted reference type that specifies the managed class. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; to the class.">指定托管类的值类型或格式化引用类型。 必须将 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 应用于该类。</param>
      <param name="fieldName" vsli:raw="The field within the &lt;paramref name=&quot;t&quot; /&gt; parameter.">
        <paramref name="t" /> 参数中的字段。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.">该类无法作为结构导出，或者字段为非公共字段。 从 .NET Framework 2.0 版开始，该字段可以是私有的。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">平台调用声明的指定类中 <paramref name="fieldName" /> 参数的偏移量（以字节为单位）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the field offset of the unmanaged form of a specified managed class.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 返回指定托管类的非托管形式的字段偏移量。</summary>
      <param name="fieldName" vsli:raw="The name of the field in the &lt;paramref name=&quot;T&quot; /&gt; type.">
        <paramref name="T" /> 类型中字段的名称。</param>
      <typeparam name="T" vsli:raw="A managed value type or formatted reference type. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; attribute to the class.">托管值类型或格式化引用类型。 必须将 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性应用于该类。</typeparam>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">平台调用声明的指定类中 <paramref name="fieldName" /> 参数的偏移量（以字节为单位）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary vsli:raw="Executes one-time method setup tasks without calling the method.">在不调用方法的情况下执行一次性方法设置任务。</summary>
      <param name="m" vsli:raw="The method to be checked.">要检查的方法。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="m" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object.">
        <paramref name="m" /> 参数不是 <see cref="T:System.Reflection.MethodInfo" /> 对象。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary vsli:raw="Performs a pre-link check for all methods on a class.">对类上的所有方法执行预链接检查。</summary>
      <param name="c" vsli:raw="The class whose methods are to be checked.">要检查其方法的类。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;c&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="c" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary vsli:raw="Copies all characters up to the first null character from an unmanaged ANSI or UTF-8 string to a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, and widens each character to UTF-16.">将非托管 ANSI 或 UTF-8 字符串中第一个空字符之前的所有字符复制到托管 <see cref="T:System.String" />，并将每个字符扩展为 UTF-16 字符。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">非托管字符串的第一个字符的地址。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string. If &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns a null string.">一个包含非托管字符串副本的托管字符串。 如果 <paramref name="ptr" /> 为 <see langword="null" />，则该方法返回一个 Null 字符串。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, copies a specified number of characters from an unmanaged ANSI or UTF-8 string into it, and widens each character to UTF-16.">分配托管 <see cref="T:System.String" />，然后从非托管 ANSI 或 UTF-8 字符串向其复制指定数目的字符，并将每个字符扩展为 UTF-16 字符。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">非托管字符串的第一个字符的地址。</param>
      <param name="len" vsli:raw="The byte count of the input string to copy.">要复制的输入字符串的字节数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> 小于零。</exception>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为包含本机字符串副本的托管字符串；否则此，方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from a string stored in unmanaged memory into it.">分配托管 <see cref="T:System.String" />，并从非托管内存中存储的字符串向其复制第一个空字符之前的所有字符。</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">对于 Unicode 平台，表示第一个 Unicode 字符的地址。  
  
 - 或 -  
  
 对于 ANSI 平台，表示第一个 ANSI 字符的地址。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies the specified number of characters from a string stored in unmanaged memory into it.">分配托管 <see cref="T:System.String" />，并从存储在非托管内存中的字符串向其复制指定数目的字符。</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">对于 Unicode 平台，表示第一个 Unicode 字符的地址。  
  
 - 或 -  
  
 对于 ANSI 平台，表示第一个 ANSI 字符的地址。</param>
      <param name="len" vsli:raw="The number of characters to copy.">要复制的字符数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> 小于零。</exception>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为包含本机字符串副本的托管字符串；否则此，方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a binary string (BSTR) stored in unmanaged memory into it.">分配已托管的 <see cref="T:System.String" />，并向其中复制非托管内存中存储的 二进制字符串 (BSTR)。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">非托管字符串的第一个字符的地址。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; equals &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="ptr" /> 等于 <see cref="F:System.IntPtr.Zero" />。</exception>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string.">一个包含非托管字符串副本的托管字符串。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from an unmanaged Unicode string into it.">分配托管 <see cref="T:System.String" />，并从非托管 Unicode 字符串向其复制第一个空字符之前的所有字符。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">非托管字符串的第一个字符的地址。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a specified number of characters from an unmanaged Unicode string into it.">分配托管 <see cref="T:System.String" />，并从非托的 Unicode 字符串向其复制指定数目的字符。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">非托管字符串的第一个字符的地址。</param>
      <param name="len" vsli:raw="The number of Unicode characters to copy.">要复制的 Unicode 字符数。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from an unmanaged UTF-8 string into it.">分配托管的 <see cref="T:System.String" />，并从非托管的 UTF-8 字符串向其复制第一个空字符之前的所有字符。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">非托管字符串的第一个字符的地址。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a specified number of bytes from an unmanaged UTF8 string into it.">分配托管的 <see cref="T:System.String" />，并从非托管的 UTF8 字符串向其复制指定数目的字符。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">非托管字符串的第一个字符的地址。</param>
      <param name="byteLen" vsli:raw="The number of bytes to copy.">要复制的字节数。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="ptr" /> 参数的值不是 <see langword="null" />；则为具有非托管字符串副本的托管字符串；否则此方法将返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a managed object.">将数据从非托管内存块封送到托管对象。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">指向非托管内存块的指针。</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied. This must be an instance of a formatted class.">将数据复制到其中的对象。 这必须是格式化类的实例。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; Structure is a boxed value type.">结构布局不是连续或显式的。  
  
 - 或 -  
  
 结构为装箱的值类型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.">将数据从非托管内存块封送到新分配的指定类型的托管对象。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">指向非托管内存块的指针。</param>
      <param name="structureType" vsli:raw="The type of object to be created. This object must represent a formatted class or a structure.">要创建的对象的类型。 此对象必须表示格式化类或结构。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;structureType&quot; /&gt; parameter layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;structureType&quot; /&gt; parameter is a generic type definition.">
        <paramref name="structureType" /> 参数布局不是连续或显式的。  
  
- 或 - 
<paramref name="structureType" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structureType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;paramref name=&quot;structureType&quot; /&gt; does not have an accessible parameterless constructor.">
        <paramref name="structureType" /> 指定的类没有可访问的无参数构造函数。</exception>
      <returns vsli:raw="A managed object containing the data pointed to by the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">一个包含 <paramref name="ptr" /> 参数指向的数据的托管对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将数据从非托管内存块封送到泛型类型参数指定的类型的新分配托管对象。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">指向非托管内存块的指针。</param>
      <typeparam name="T" vsli:raw="The type of the object to which the data is to be copied. This must be a formatted class or a structure.">要将数据复制到其中的对象的类型。 这必须是格式化类或结构。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The layout of &lt;typeparamref name=&quot;T&quot; /&gt; is not sequential or explicit.">
        <typeparamref name="T" /> 的布局不是连续或显式的。</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;typeparamref name=&quot;T&quot; /&gt; does not have an accessible parameterless constructor.">
        <typeparamref name="T" /> 指定的类没有可访问的无参数构造函数。</exception>
      <returns vsli:raw="A managed object that contains the data that the &lt;paramref name=&quot;ptr&quot; /&gt; parameter points to.">一个包含 <paramref name="ptr" /> 参数指向的数据的托管对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a managed object of the specified type.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将数据从非托管内存块封送到指定类型的托管内存对象。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">指向非托管内存块的指针。</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied.">将数据复制到其中的对象。</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;structure&quot; /&gt;. This must be a formatted class.">
        <paramref name="structure" /> 的类型。 这必须是格式化的类。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.">结构布局不是连续或显式的。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Requests a pointer to a specified interface from a COM object.">从 COM 对象请求指向指定接口的指针。</summary>
      <param name="pUnk" vsli:raw="The interface to be queried.">要查询的接口。</param>
      <param name="iid" vsli:raw="The interface identifier (IID) of the requested interface.">所请求的接口的接口标识符 (IID)。</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the returned interface.">此方法返回时，包含对返回接口的引用。</param>
      <returns vsli:raw="An HRESULT that indicates the success or failure of the call.">一个 HRESULT，指示调用成功还是失败。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary vsli:raw="Reads a single byte from unmanaged memory.">从非托管内存读取单个字节。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
      <returns vsli:raw="The byte read from unmanaged memory.">从非托管内存读取的字节。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">从非托管内存按给定的偏移量（或索引）读取单个字节。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">非托管内存中开始读取的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">从非托管内存按给定的偏移量读取的字节。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">从非托管内存按给定的偏移量（或索引）读取单个字节。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">非托管内存中源对象的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">从非托管内存按给定的偏移量读取的字节。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary vsli:raw="Reads a 16-bit signed integer from unmanaged memory.">从非托管内存中读取一个 16 位带符号整数。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory.">从非托管内存中读取的 16 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">从非托管内存按给定的偏移量读取一个 16 位带符号整数。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">非托管内存中开始读取的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">从非托管内存按给定的偏移量读取的 16 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">从非托管内存按给定的偏移量读取一个 16 位带符号整数。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">非托管内存中源对象的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">从非托管内存按给定的偏移量读取的 16 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary vsli:raw="Reads a 32-bit signed integer from unmanaged memory.">从非托管内存中读取一个 32 位带符号整数。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">从非托管内存中读取的 32 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">从非托管内存按给定的偏移量读取一个 32 位带符号整数。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">非托管内存中开始读取的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">从非托管内存中读取的 32 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">从非托管内存按给定的偏移量读取一个 32 位带符号整数。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">非托管内存中源对象的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory at the given offset.">从非托管内存按给定的偏移量读取的 32 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary vsli:raw="Reads a 64-bit signed integer from unmanaged memory.">从非托管内存中读取一个 64 位带符号整数。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory.">从非托管内存中读取的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">从非托管内存按给定的偏移量读取一个 64 位带符号整数。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">非托管内存中开始读取的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">从非托管内存按给定的偏移量读取的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">从非托管内存按给定的偏移量读取一个 64 位带符号整数。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">非托管内存中源对象的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">从非托管内存按给定的偏移量读取的 64 位带符号整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary vsli:raw="Reads a processor native-sized integer from unmanaged memory.">从非托管内存读取处理器本机大小的整数。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">非托管内存中开始读取的地址。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
      <returns vsli:raw="The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.">从非托管内存读取的整数。 在 32 位计算机上返回 32 位整数，在 64 位计算机上返回 64 位整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer at a given offset from unmanaged memory.">从非托管内存按给定的偏移量读取处理器本机大小的整数。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">非托管内存中开始读取的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">从非托管内存按给定的偏移量读取的整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer from unmanaged memory.">从非托管内存读取处理器本机大小的整数。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">非托管内存中源对象的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">额外的字节偏移量，在读取前添加到 <paramref name="ptr" /> 参数中。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">从非托管内存按给定的偏移量读取的整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">调整之前用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> 分配的内存块的大小。</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">指向用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> 分配的内存的指针。</param>
      <param name="cb" vsli:raw="The new size of the allocated block.">已分配块的新大小。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">没有足够的内存来满足该请求。</exception>
      <returns vsli:raw="An integer representing the address of the reallocated block of memory. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">一个整数，表示重新分配的内存块的地址。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> 释放该内存。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">调整之前用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 分配的内存块的大小。</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">指向用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 分配的内存的指针。</param>
      <param name="cb" vsli:raw="The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type &lt;see cref=&quot;T:System.IntPtr&quot; /&gt;. If you pass a pointer, it is treated as a size.">已分配块的新大小。 这不是指针；它是你请求的字节计数，转换为类型 <see cref="T:System.IntPtr" />。 如果你传递指针，则将其视为大小。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">没有足够的内存来满足该请求。</exception>
      <returns vsli:raw="A pointer to the reallocated memory. This memory must be released using &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt;.">指向重新分配的内存的指针。 必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 释放该内存。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary vsli:raw="Decrements the reference count on the specified interface.">递减指定接口上的引用计数。</summary>
      <param name="pUnk" vsli:raw="The interface to release.">要释放的接口。</param>
      <returns vsli:raw="The new value of the reference count on the interface specified by the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">
        <paramref name="pUnk" /> 参数指定的接口上的新引用计数值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary vsli:raw="Decrements the reference count of the Runtime Callable Wrapper (RCW) associated with the specified COM object.">递减与指定的 COM 对象关联的运行时可调用包装器 (RCW) 的引用计数。</summary>
      <param name="o" vsli:raw="The COM object to release.">要释放的 COM 对象。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> 不是有效的 COM 对象。</exception>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The new value of the reference count of the RCW associated with &lt;paramref name=&quot;o&quot; /&gt;. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.">与 <paramref name="o" /> 关联的 RCW 的新引用计数值。 此值通常为零，因为无论调用包装 COM 对象的托管客户端有多少，RCW 仅保留对该对象的一次引用。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary vsli:raw="Allocates an unmanaged binary string (BSTR) and copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into it.">分配非托管二进制字符串 (BSTR)并将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到其中。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">将托管 <see cref="T:System.Security.SecureString" /> 的内容复制到非托管内存，并在复制时转换为 ANSI 格式。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">非托管内存中将 <paramref name="s" /> 参数复制到的地址，或者，如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到非托管内存中。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">非托管内存中复制 <paramref name="s" /> 的地址，如果 <paramref name="s" /> 是长度为 0 的 <see cref="T:System.Security.SecureString" /> 对象，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary vsli:raw="Sets data referenced by the specified key in the specified COM object.">设置由指定 COM 对象中的指定键引用的数据。</summary>
      <param name="obj" vsli:raw="The COM object in which to store the data.">用于存储数据的 COM 对象。</param>
      <param name="key" vsli:raw="The key in the internal hash table of the COM object in which to store the data.">用于存储数据的 COM 对象的内部哈希表中的键。</param>
      <param name="data" vsli:raw="The data to set.">要设置的数据。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> 不是 COM 对象。  
  
- 或 - 
 <paramref name="obj" /> 是一个 Windows 运行时 对象。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data was set successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果数据设置成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary vsli:raw="Returns the unmanaged size of an object in bytes.">返回对象的非托管大小（以字节为单位）。</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">要返回其大小的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structure" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The size of the specified object in unmanaged code.">非托管代码中指定对象的大小。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary vsli:raw="Returns the size of an unmanaged type in bytes.">返回非托管类型的大小（以字节为单位）。</summary>
      <param name="t" vsli:raw="The type whose size is to be returned.">要返回其大小的类型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is a generic type definition.">
        <paramref name="t" /> 参数是泛型类型定义。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The size of the specified type in unmanaged code.">非托管代码中指定类型的大小。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the size of an unmanaged type in bytes.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 返回非托管类型的大小（以字节为单位）。</summary>
      <typeparam name="T" vsli:raw="The type whose size is to be returned.">要返回其大小的类型。</typeparam>
      <returns vsli:raw="The size, in bytes, of the type that is specified by the &lt;typeparamref name=&quot;T&quot; /&gt; generic type parameter.">
        <typeparamref name="T" /> 泛型类型参数指定的类型的大小（以字节为单位）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the unmanaged size of an object of a specified type in bytes.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 返回指定类型的对象的非托管大小（以字节为单位）。</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">要返回其大小的对象。</param>
      <typeparam name="T" vsli:raw="The type of the &lt;paramref name=&quot;structure&quot; /&gt; parameter.">
        <paramref name="structure" /> 参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structure" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The size, in bytes, of the specified object in unmanaged code.">非托管代码中指定对象的大小（以字节为单位）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary vsli:raw="Allocates a BSTR and copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into it.">分配 BSTR 并向其复制托管 <see cref="T:System.String" /> 的内容。</summary>
      <param name="s" vsli:raw="The managed string to be copied.">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">
        <paramref name="s" /> 的长度超出范围。</exception>
      <returns vsli:raw="An unmanaged pointer to the &lt;see langword=&quot;BSTR&quot; /&gt;, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is null.">指向 <see langword="BSTR" /> 的非托管指针；如果 <paramref name="s" /> 为 Null，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">将托管 <see cref="T:System.String" /> 的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">一个整数，表示指向字符串的内存块的指针；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">将托管 <see cref="T:System.String" /> 的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">
        <paramref name="s" /> 的长度超出范围。</exception>
      <returns vsli:raw="The allocated memory block, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">已分配的内存块；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">将托管 <see cref="T:System.String" /> 的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要复制的托管字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if s is &lt;see langword=&quot;null&quot; /&gt;.">一个整数，表示指向为字符串分配的内存块的指针；如果 s 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">将托管 <see cref="T:System.String" /> 的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要复制的托管字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">一个整数，表示指向字符串的内存块的指针；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">将托管 <see cref="T:System.String" /> 的内容复制到非托管内存，并在复制时转换为 ANSI 格式。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">非托管内存中将 <paramref name="s" /> 复制到其中的地址；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format if required.">将托管 <see cref="T:System.String" /> 的内容复制到非托管内存，并在需要时转换为 ANSI 格式。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the string was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">非托管内存中将字符串复制到其中的地址；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory.">将托管 <see cref="T:System.String" /> 的内容复制到非托管内存。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">要复制的托管字符串。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The method could not allocate enough native heap memory.">此方法未能分配足够的本机堆内存。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> 参数超过了操作系统所允许的最大长度。</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">非托管内存中将 <paramref name="s" /> 复制到其中的地址；如果 <paramref name="s" /> 为 <see langword="null" />，则为 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary vsli:raw="Marshals data from a managed object to an unmanaged block of memory.">将数据从托管对象封送到非托管内存块。</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.">包含要封送的数据的托管对象。 该对象必须是格式化类的结构或实例。</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">指向非托管内存块的指针，必须在调用此方法之前分配该指针。</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">如果在此方法复制该数据前在 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> 参数上调用 <paramref name="ptr" />，则为 <see langword="true" />。 该块必须包含有效的数据。 请注意，在内存块已包含数据时传递 <see langword="false" /> 可能会导致内存泄漏。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;structure&quot; /&gt; is an instance of a generic type (in the .NET Framework 4.5 and earlier versions only).">
        <paramref name="structure" /> 为不是格式化类的引用类型。  
  
- 或 - 
 <paramref name="structure" /> 是泛型类型的实例（仅限 .NET Framework 4.5 和更低版本）。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from a managed object of a specified type to an unmanaged block of memory.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 将数据从指定类型的托管对象封送到非托管内存块。</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.">包含要封送的数据的托管对象。 该对象必须是格式化类的结构或实例。</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">指向非托管内存块的指针，必须在调用此方法之前分配该指针。</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">如果在此方法复制该数据前在 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> 参数上调用 <paramref name="ptr" />，则为 <see langword="true" />。 该块必须包含有效的数据。 请注意，在内存块已包含数据时传递 <see langword="false" /> 可能会导致内存泄漏。</param>
      <typeparam name="T" vsli:raw="The type of the managed object.">托管对象的类型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.">
        <paramref name="structure" /> 为不是格式化类的引用类型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT value.">用特定的失败 HRESULT 值引发异常。</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">与所需异常相对应的 HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT, based on the specified IErrorInfo interface.">基于指定的 IErrorInfo 接口，用特定的失败 HRESULT 引发异常。</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">与所需异常相对应的 HRESULT。</param>
      <param name="errorInfo" vsli:raw="A pointer to the IErrorInfo interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current IErrorInfo interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current IErrorInfo interface and construct the exception just from the error code.">指向 IErrorInfo 接口的指针，该接口提供有关错误的详细信息。 可以指定 <c>IntPtr(0)</c> 以使用当前的 IErrorInfo 接口，或者 <c>IntPtr(-1)</c> 以忽略当前的 IErrorInfo 接口，并仅从错误代码构造异常。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary vsli:raw="Gets the address of the element at the specified index inside the specified array.">获取指定数组中指定索引处的元素的地址。</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">包含所需元素的数组。</param>
      <param name="index" vsli:raw="The index in the &lt;paramref name=&quot;arr&quot; /&gt; parameter of the desired element.">所需元素的 <paramref name="arr" /> 参数中的索引。</param>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; inside &lt;paramref name=&quot;arr&quot; /&gt;.">
        <paramref name="arr" /> 内的 <paramref name="index" /> 地址。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Gets the address of the element at the specified index in an array of a specified type.">[在 .NET Framework 4.5.1 和更高版本中受支持]  
  
 获取指定类型的数组中指定索引处的元素地址。</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">包含所需元素的数组。</param>
      <param name="index" vsli:raw="The index of the desired element in the &lt;paramref name=&quot;arr&quot; /&gt; array.">
        <paramref name="arr" /> 数组中所需元素的索引。</param>
      <typeparam name="T" vsli:raw="The type of the array.">数组的类型。</typeparam>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; in &lt;paramref name=&quot;arr&quot; /&gt;.">
        <paramref name="arr" /> 中的 <paramref name="index" /> 地址。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory.">将单个字节值写入到非托管内存。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">非托管内存中要写入的地址。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">按指定偏移量将单字节值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">非托管内存中要写入的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">按指定偏移量将单字节值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">非托管内存中目标对象的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary vsli:raw="Writes a character as a 16-bit integer value to unmanaged memory.">将一个字符作为 16 位整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">非托管内存中要写入的地址。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer value to unmanaged memory.">将 16 位整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">非托管内存中要写入的地址。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">按指定偏移量将 16 位带符号整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in the native heap to write to.">本机堆中要写入的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value into unmanaged memory at a specified offset.">按指定偏移量将 16 位带符号整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">非托管内存中要写入的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">按指定偏移量将 16 位带符号整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">非托管内存中目标对象的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">按指定偏移量将 16 位带符号整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">非托管内存中目标对象的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory.">将 32 位带符号整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">非托管内存中要写入的地址。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value into unmanaged memory at a specified offset.">按指定偏移量将 32 位带符号整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">非托管内存中要写入的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory at a specified offset.">按指定偏移量将 32 位带符号整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">非托管内存中目标对象的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">按指定偏移量将 64 位带符号整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write.">非托管内存中要写入的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory.">将 64 位带符号整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">非托管内存中要写入的地址。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">按指定偏移量将 64 位带符号整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">非托管内存中目标对象的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native-sized integer value to unmanaged memory at a specified offset.">按指定的偏移量将一个处理器本机大小的整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">非托管内存中要写入的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value into unmanaged memory.">将一个处理器本机大小的整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">非托管内存中要写入的地址。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> 不是识别的格式。  
  
- 或 - 
 <paramref name="ptr" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="ptr" /> 无效。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value to unmanaged memory.">将一个处理器本机大小的整数值写入非托管内存。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">非托管内存中目标对象的基址。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">额外的字节偏移量，在写入前添加到 <paramref name="ptr" /> 参数中。</param>
      <param name="val" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">基址 (<paramref name="ptr" />) 加上偏移字节 (<paramref name="ofs" />) 可产生空或无效地址。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> 是 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 此方法不接受 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a BSTR pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)&quot; /&gt; method.">释放 BSTR 指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s" vsli:raw="The address of the &lt;see langword=&quot;BSTR&quot; /&gt; to free.">要释放的 <see langword="BSTR" /> 的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)&quot; /&gt; method.">释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">要释放的非托管字符串的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)&quot; /&gt; method.">释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">要释放的非托管字符串的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)&quot; /&gt; method.">释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)" /> 方法分配的。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">要释放的非托管字符串的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)&quot; /&gt; method.">释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">要释放的非托管字符串的地址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)&quot; /&gt; method.">释放非托管字符串指针，该指针是使用 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> 方法分配的。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">要释放的非托管字符串的地址。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary vsli:raw="Indicates how to marshal the data between managed and unmanaged code.">指示如何在托管代码与非托管代码之间封送数据。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary vsli:raw="Specifies the element type of the unmanaged &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.LPArray&quot; /&gt; or &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.ByValArray&quot; /&gt;.">指定非托管 <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" /> 的元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary vsli:raw="Specifies the parameter index of the unmanaged &lt;see langword=&quot;iid_is&quot; /&gt; attribute used by COM.">指定 COM 使用的非托管 <see langword="iid_is" /> 特性的参数索引。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary vsli:raw="Provides additional information to a custom marshaler.">向自定义封送处理程序提供附加信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary vsli:raw="Specifies the fully qualified name of a custom marshaler.">指定自定义封送处理程序的完全限定名。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary vsli:raw="Implements &lt;see cref=&quot;F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&quot; /&gt; as a type.">将 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 作为类型实现。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary vsli:raw="Indicates the element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">指示 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 的元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary vsli:raw="Indicates the user-defined element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">指示用户定义的 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary vsli:raw="Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.">指示固定长度数组中的元素数，或要导入的字符串中的字符（不是字节）数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary vsli:raw="Indicates the zero-based parameter that contains the count of array elements, similar to &lt;see langword=&quot;size_is&quot; /&gt; in COM.">指示从零开始的参数，该参数包含数组元素的计数，与 COM 中的 <see langword="size_is" /> 类似。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 类的新实例。</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">数据将作为该值封送的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; enumeration member.">使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 类的新实例。</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">数据将作为该值封送的值。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">获取 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值，数据将被作为该值封送。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">
        <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值，数据将被作为该值封送。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary vsli:raw="The exception that is thrown by the marshaler when it encounters a &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; it does not support.">当封送拆收器遇到它不支持的 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 时由该封送拆收器引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with default properties.">使用默认属性初始化 <see langword="MarshalDirectiveException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class from serialization data.">从序列化数据初始化 <see langword="MarshalDirectiveException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with a specified error message.">用指定的错误消息初始化 <see langword="MarshalDirectiveException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The error message that specifies the reason for the exception.">指定异常原因的错误信息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalDirectiveException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解释异常原因的错误消息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary vsli:raw="Provides APIs for managing native libraries.">提供用于管理本机库的 API。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary vsli:raw="Frees a loaded library with the specified OS handle, or takes no action if the input handle is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">使用给定的 OS 句柄释放已加载的库，或在输入句柄为 <see cref="F:System.IntPtr.Zero" /> 时不执行任何操作。</summary>
      <param name="handle" vsli:raw="The native library OS handle to be freed.">要释放的本机库 OS 句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary vsli:raw="Gets the address of an exported symbol.">获取导出的符号的地址。</summary>
      <param name="handle" vsli:raw="The native library OS handle.">本机库 OS 句柄。</param>
      <param name="name" vsli:raw="The name of the exported symbol.">导出的符号的名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> 或 <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.EntryPointNotFoundException" vsli:raw="The symbol is not found.">未找到符号。</exception>
      <returns vsli:raw="The address of the symbol.">符号的地址。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary vsli:raw="Provides a simple API for loading a native library that wraps the OS loader and uses default flags.">提供一个简单 API，用于加载包装 OS 加载程序并使用模式标志的本机库。</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">要加载的本机库的名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">找不到库。</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">库无效。</exception>
      <returns vsli:raw="The OS handle for the loaded native library.">已加载的本机库的 OS 句柄。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary vsli:raw="Provides a high-level API for loading a native library.">提供用于加载本机库的高级 API。</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">要加载的本机库的名称。</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">用于加载本机库的程序集。</param>
      <param name="searchPath" vsli:raw="The search path.">搜索路径。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryName&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryName" /> 或 <paramref name="assembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> 不是 <see langword="RuntimeAssembly" />。</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">找不到库。</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">库无效。</exception>
      <returns vsli:raw="The OS handle for the loaded library.">已加载的库的 OS 句柄。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary vsli:raw="Sets a callback for resolving native library imports from an assembly.">设置回调，用于解析从程序集进行的本机库导入。</summary>
      <param name="assembly" vsli:raw="The assembly for which the resolver is registered.">已为其注册解析程序的程序集。</param>
      <param name="resolver" vsli:raw="The resolver callback to register.">要注册的解析程序回调。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; or &lt;paramref name=&quot;resolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="assembly" /> 或 <paramref name="resolver" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A resolver is already set for this assembly.">已为此程序集设置解析程序。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary vsli:raw="Gets the address of an exported symbol and returns a value that indicates whether the method call succeeded.">获取导出的符号的地址，并返回一个指示方法调用是否成功的值。</summary>
      <param name="handle" vsli:raw="The native library OS handle.">本机库 OS 句柄。</param>
      <param name="name" vsli:raw="The name of the exported symbol.">导出的符号的名称。</param>
      <param name="address" vsli:raw="When the method returns, contains the symbol address, if it exists.">当方法返回时，包含符号地址（如果存在）。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> 或 <paramref name="name" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the address of the exported symbol was found successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果方法成功返回，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary vsli:raw="Provides a simple API for loading a native library and returns a value that indicates whether the operation succeeded.">提供一个简单 API，用于加载本机库并返回一个指示操作是否成功的值。</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">要加载的本机库的名称。</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">当方法返回时，已加载的本机库的 OS 句柄。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功加载本机库，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary vsli:raw="Provides a high-level API that loads a native library and returns a value that indicates whether the operation succeeded.">提供一个高级 API，用于加载本机库并返回一个指示操作是否成功的值。</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">要加载的本机库的名称。</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">用于加载本机库的程序集。</param>
      <param name="searchPath" vsli:raw="The search path.">搜索路径。</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">当方法返回时，已加载的本机库的 OS 句柄。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> 或 <paramref name="assembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> 不是 <see langword="RuntimeAssembly" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果加载操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary vsli:raw="Indicates that a parameter is optional.">指示参数是可选的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;OptionalAttribute&quot; /&gt; class with default values.">使用默认值初始化 <see langword="OptionalAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary vsli:raw="Indicates that the HRESULT signature transformation that takes place during COM interop calls should be suppressed.">指示应取消在 COM 互操作调用期间发生的 HRESULT 或 <see langword="retval" /> 签名转换。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PreserveSigAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary vsli:raw="Indicates that the attributed assembly is a primary interop assembly.">指示该特性化的程序集是主互操作程序集。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute&quot; /&gt; class with the major and minor version numbers of the type library for which this assembly is the primary interop assembly.">使用类型库（此程序集是该类型库的主互操作程序集）的主版本号及次版本号初始化 <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> 类的新实例。</summary>
      <param name="major" vsli:raw="The major version of the type library for which this assembly is the primary interop assembly.">程序集是其主互操作程序集的类型库的主版本号。</param>
      <param name="minor" vsli:raw="The minor version of the type library for which this assembly is the primary interop assembly.">程序集是其主互操作程序集的类型库的次版本号。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library for which this assembly is the primary interop assembly.">获取程序集是其主互操作程序集的类型库的主版本号。</summary>
      <returns vsli:raw="The major version number of the type library for which this assembly is the primary interop assembly.">程序集是其主 Interop 程序集的类型库的主要版本号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library for which this assembly is the primary interop assembly.">获取程序集是其主互操作程序集的类型库的次版本号。</summary>
      <returns vsli:raw="The minor version number of the type library for which this assembly is the primary interop assembly.">程序集是其主 Interop 程序集的类型库的次要版本号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary vsli:raw="Allows the user to specify the ProgID of a class.">允许用户指定类的 ProgID。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ProgIdAttribute&quot; /&gt; with the specified ProgID.">用指定的 ProgID 初始化 <see langword="ProgIdAttribute" /> 的新实例。</summary>
      <param name="progId" vsli:raw="The ProgID to be assigned to the class.">要分配给类的 ProgID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary vsli:raw="Gets the ProgID of the class.">获取类的 ProgID。</summary>
      <returns vsli:raw="The ProgID of the class.">类的 ProgID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary vsli:raw="Provides a collection of &lt;see langword=&quot;static&quot; /&gt; methods that return information about the common language runtime environment.">提供一个返回有关公共语言运行时环境的信息的 <see langword="static" /> 方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary vsli:raw="Tests whether the specified assembly is loaded in the global assembly cache.">测试是否将指定的程序集加载到全局程序集缓存中。</summary>
      <param name="a" vsli:raw="The assembly to test.">要测试的程序集。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the assembly is loaded in the global assembly cache; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果程序集已加载到全局程序集缓存中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary vsli:raw="Returns the directory where the common language runtime is installed.">返回公共语言运行时的安装目录。</summary>
      <returns vsli:raw="A string that contains the path to the directory where the common language runtime is installed.">包含语言运行时安装目录的路径的字符串。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary vsli:raw="Returns the specified interface on the specified class.">返回指定类上的指定接口。</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">所需类的标识符。</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">所需接口的标识符。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">IUnknown::QueryInterface 失败。</exception>
      <returns vsli:raw="An unmanaged pointer to the requested interface.">指向所请求接口的非托管指针。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">返回通过指向其 <see langword="IUnknown" /> 接口的指针表示 COM 对象的类型实例。</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">所需类的标识符。</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">所需接口的标识符。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">IUnknown::QueryInterface 失败。</exception>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">一个对象，表示指定的非托管 COM 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary vsli:raw="Gets the version number of the common language runtime that's running the current process.">获取正在运行当前进程的公共语言运行时的版本号。</summary>
      <returns vsli:raw="A string containing the version number of the common language runtime.">包含公共语言运行时的版本号的字符串。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary vsli:raw="Gets the path to the system configuration file.">获取系统配置文件的路径。</summary>
      <returns vsli:raw="The path to the system configuration file.">系统配置文件的路径。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary vsli:raw="The exception thrown when the rank of an incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the rank specified in the managed signature.">传入的 <see langword="SAFEARRAY" /> 的设置级别与托管签名中指定的设置级别不匹配时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">使用默认值初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">从序列化数据初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayRankMismatchException&quot; /&gt; class with the specified message.">使用指定的消息初始化 <see langword="SafeArrayRankMismatchException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayRankMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解释异常原因的错误消息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary vsli:raw="The exception thrown when the type of the incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the type specified in the managed signature.">传入的 <see langword="SAFEARRAY" /> 的类型与托管签名中指定的类型不匹配时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">使用默认值初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">从序列化数据初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with the specified message.">使用指定的消息初始化 <see langword="SafeArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayTypeMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解释异常原因的错误消息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary vsli:raw="Represents structured exception handling (SEH) errors.">表示结构化异常处理 (SEH) 错误。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class from serialization data.">从序列化数据初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified message.">用指定的消息初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">指示异常原因的消息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.SEHException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">解释异常原因的错误消息。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary vsli:raw="Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.">指示是否可以从异常中恢复，以及代码是否可以从引发异常的地方继续。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;, because resumable exceptions are not implemented.">始终为 <see langword="false" />，因为未实现可恢复的异常。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary vsli:raw="Replaces the standard common language runtime (CLR) free-threaded marshaler with the standard OLE STA marshaler.">用标准 OLE STA 封送拆收器替换标准公共语言运行时 (CLR) 自由线程封送拆收器。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.StandardOleMarshalObject&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary vsli:raw="Provides support for type equivalence.">为类型等效提供支持。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class.">创建 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class with the specified scope and identifier.">用指定的范围和标识符创建 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 类的新实例。</summary>
      <param name="scope" vsli:raw="The first type equivalence string.">第一个类型等效性字符串。</param>
      <param name="identifier" vsli:raw="The second type equivalence string.">第二个类型等效性字符串。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;identifier&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">获取传递给 <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 构造函数的 <paramref name="identifier" /> 参数的值。</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;identifier&quot; /&gt; parameter.">构造函数的 <paramref name="identifier" /> 参数的值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;scope&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">获取传递给 <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 构造函数的 <paramref name="scope" /> 参数的值。</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;scope&quot; /&gt; parameter.">构造函数的 <paramref name="scope" /> 参数的值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; that were originally imported for this method from the COM type library.">包含最初从 COM 类型库为此方法导入的 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值初始化 <see langword="TypeLibFuncAttribute" /> 类的新实例。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">该特性化方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值，是在从中导入的类型库中找到的。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值初始化 <see langword="TypeLibFuncAttribute" /> 类的新实例。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">该特性化方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值，是在从中导入的类型库中找到的。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">获取该方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">该方法的 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see langword=&quot;FUNCFLAGS&quot; /&gt; in the COM type library from where this method was imported.">描述从中导入该方法的 COM 类型库中 <see langword="FUNCFLAGS" /> 的原始设置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary vsli:raw="The function that supports data binding.">支持数据绑定的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary vsli:raw="The function that best represents the object. Only one function in a type information can have this attribute.">最佳表示此对象的函数。 类型信息中只有一个函数可以具有此特性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">允许进行这样的优化，在该优化中，编译器查找“abc”类型上的名为“xyz”的成员。 如果找到这样的成员，而且该成员标志为默认集合的某元素的访问函数，则生成对该成员函数的调用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable&quot; /&gt; must also be set.">作为可绑定函数显示给用户的函数。 还必须设置 <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">不应将此函数显示给用户，尽管它存在并且为可绑定函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary vsli:raw="The function is mapped as individual bindable properties.">该函数作为单独的可绑定属性进行映射。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">该属性出现在对象浏览器而非属性浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">将该接口标记为具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;.">设置后，任何对设置此属性的方法的调用都首先导致对 <see langword="IPropertyNotifySink::OnRequestEdit" /> 的调用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">此标志适用于系统级函数或类型浏览器不应显示的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary vsli:raw="The function returns an object that is a source of events.">该函数返回一个对象，此对象为事件的源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">类型信息成员是在用户界面中显示的默认成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;.">该函数支持 <see langword="GetLastError" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary vsli:raw="Specifies which &lt;see cref=&quot;T:System.Type&quot; /&gt; exclusively uses an interface. This class cannot be inherited.">指定哪个 <see cref="T:System.Type" /> 独占使用接口。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibImportClassAttribute&quot; /&gt; class specifying the &lt;see cref=&quot;T:System.Type&quot; /&gt; that exclusively uses an interface.">初始化 <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" /> 类的新实例，指定独占使用接口的 <see cref="T:System.Type" />。</summary>
      <param name="importClass" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">独占使用接口的 <see cref="T:System.Type" /> 对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">获取独占使用接口的 <see cref="T:System.Type" /> 对象的名称。</summary>
      <returns vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">独占使用接口的 <see cref="T:System.Type" /> 对象的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; that were originally imported for this type from the COM type library.">包含最初为此类型从 COM 类型库导入的 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值初始化 <see langword="TypeLibTypeAttribute" /> 类的新实例。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">特性化类型的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值，是在此值从中导入的类型库中找到的。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值初始化 <see langword="TypeLibTypeAttribute" /> 类的新实例。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">特性化类型的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值，是在此值从中导入的类型库中找到的。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">获取此类型的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">此类型的 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; in the COM type library from which the type was imported.">描述从中导入该类型的 COM 类型库中 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 的原始设置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary vsli:raw="The class supports aggregation.">该类支持聚合。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">描述 <see langword="Application" /> 对象的类型说明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">可由 <see langword="ITypeInfo::CreateInstance" /> 创建该类型的实例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary vsli:raw="The type is a control from which other types will be derived, and should not be displayed to users.">该类型是派生其他类型的控件，并且不应显示给用户。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly.">指示该接口直接或间接从 <see langword="IDispatch" /> 派生。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and V-table binding.">该接口提供 <see langword="IDispatch" /> 和 V 表绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary vsli:raw="The type should not be displayed to browsers.">该类型不应显示在浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary vsli:raw="The type is licensed.">该类型已授权。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary vsli:raw="The interface cannot add members at run time.">该接口在运行时无法添加成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including vtable binding support.">该接口中使用的类型与自动化（包括 vtable 绑定支持）完全兼容。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">该类型是预定义的。 该客户端应用程序应自动创建具有此属性的对象的单个实例。 指向该对象的变量名称与该对象的类名相同。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">该对象支持 <see langword="IConnectionPointWithDefault" />，并且具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level types or types that type browsers should not display.">此标志适用于系统级类型或类型浏览器不应显示的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking child interfaces. This is the reverse of the default behavior.">指示检查子接口前应先检查基接口的名称解析。 这与默认行为相反。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; that were originally imported for this field from the COM type library.">包含最初为此字段从 COM 类型库导入的 <see cref="T:System.Runtime.InteropServices.VARFLAGS" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 类的新实例。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">特性化字段的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值，是在此值从中导入的类型库中找到的。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">使用指定的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 类的新实例。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">特性化字段的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值，是在此值从中导入的类型库中找到的。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">获取此字段的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">此字段的 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; in the COM type library from which the variable was imported.">描述从中导入该变量的 COM 类型库中 <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> 的原始设置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary vsli:raw="The variable supports data binding.">该变量支持数据绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in a type info can have this value.">该变量是最佳地表示此对象的唯一属性。 类型信息中仅有一个变量可具有此值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">允许进行这样的优化，在该优化中，编译器查找“abc”类型上的名为“xyz”的成员。 如果找到这样的成员，而且该成员标志为默认集合的某元素的访问函数，则生成对该成员函数的调用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary vsli:raw="The variable is displayed as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable&quot; /&gt; must also be set.">该变量显示为可绑定变量。 还必须设置 <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary vsli:raw="The variable should not be displayed in a browser, though it exists and is bindable.">该变量不应显示在浏览器中，尽管它存在并且是可绑定的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">该变量作为单独的可绑定属性映射。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">该变量出现在对象浏览器而非属性浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary vsli:raw="Assignment to the variable should not be allowed.">不应允许给该变量赋值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">将该接口标记为具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary vsli:raw="Indicates that the property supports the COM &lt;see langword=&quot;OnRequestEdit&quot; /&gt; notification.">指示该属性支持 COM <see langword="OnRequestEdit" /> 通知。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">此标志适用于系统级函数或类型浏览器不应显示的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary vsli:raw="The variable returns an object that is a source of events.">该变量返回一个对象，该对象为事件的源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary vsli:raw="The default display in the user interface.">用户界面中的默认显示。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary vsli:raw="Specifies the version number of an exported type library.">指定已导出类型库的版本号。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVersionAttribute&quot; /&gt; class with the major and minor version numbers of the type library.">使用类型库的主版本号和次版本号初始化 <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> 类的新实例。</summary>
      <param name="major" vsli:raw="The major version number of the type library.">类型库的主版本号。</param>
      <param name="minor" vsli:raw="The minor version number of the type library.">类型库的次版本号。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library.">获取类型库的主版本号。</summary>
      <returns vsli:raw="The major version number of the type library.">类型库的主版本号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library.">获取类型库的次版本号。</summary>
      <returns vsli:raw="The minor version number of the type library.">类型库的次版本号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_UNKNOWN&quot; /&gt;.">对封送处理程序应该将其作为 <see langword="VT_UNKNOWN" /> 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt; class with the object to be wrapped.">使用要被包装的对象初始化 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> 类的新实例。</summary>
      <param name="obj" vsli:raw="The object being wrapped.">被包装的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary vsli:raw="Gets the object contained by this wrapper.">获取此包装包含的对象。</summary>
      <returns vsli:raw="The wrapped object.">被包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
      <summary vsli:raw="Any method marked with &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute&quot; /&gt; can be directly called from native code. The function token can be loaded to a local variable using the address-of operator in C# and passed as a callback to a native method.">标记有 <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> 的任何方法均可从本机代码中直接调用。 可以使用 C# 的 address-of  运算符将函数令牌加载到局部变量，并作为回叫传递给本机方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
      <summary vsli:raw="Optional. If omitted, the runtime will use the default platform calling convention.">可选。 如果省略，则运行时将使用默认平台调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
      <summary vsli:raw="Optional. If omitted, no named export is emitted during compilation.">可选。 如果省略，编译过程中便不会发出任何已命名导出。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute&quot; /&gt; instance.">初始化一个新 <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> 实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary vsli:raw="Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited.">控制作为非托管函数指针传递到非托管代码（或从非托管代码中传递）的委托签名的封送处理行为。 此类不能被继承。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">将 Unicode 字符转换为 ANSI 字符时，启用或禁用最佳映射行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method, and controls name mangling.">指示如何向方法封送字符串参数，并控制名称重整。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee calls the &lt;see langword=&quot;SetLastError&quot; /&gt; Windows API function before returning from the attributed method.">指示被调用方在从属性化方法返回之前是否调用 <see langword="SetLastError" /> Windows API 函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute&quot; /&gt; class with the specified calling convention.">使用指定的调用约定初始化 <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> 类的新实例。</summary>
      <param name="callingConvention" vsli:raw="The specified calling convention.">指定的调用约定。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary vsli:raw="Gets the value of the calling convention.">获取调用约定的值。</summary>
      <returns vsli:raw="The value of the calling convention specified by the &lt;see cref=&quot;M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)&quot; /&gt; constructor.">
        <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> 构造函数指定的调用约定的值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>指定如何将参数或字段封送到非托管代码。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>ANSI 字符串是一个带有长度前缀的单字节字符串。 可以在 <see cref="T:System.String" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>一个动态类型，将在运行时确定对象的类型，并将该对象作为所确定的类型进行封送处理。 该成员仅对平台调用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>4 字节布尔值 (<see langword="true" /> != 0, <see langword="false" /> = 0)。 这是 Win32 BOOL 类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>长度前缀为双字节的 Unicode 字符串。 可以在 <see cref="T:System.String" /> 数据类型上使用此成员（它是 COM 中的默认字符串）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>当 <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> 属性被设置为 <see langword="ByValArray" /> 时，必须设置 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 字段以指示该数组中的元素数。 当需要区分字符串类型时，<see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> 字段可以选择包含数组元素的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" />。 此 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 只可用于结构中其元素作为字段出现的数组。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>用于在结构中出现的内联定长字符数组。 <see langword="ByValTStr" /> 类型的行为类似于结构中大小固定的字符串 C 样式（例如，<c>char s[5]</c>）。 与 <see langword="ByValTStr" /> 一起使用的字符类型由应用于包含结构的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 参数确定。 应始终使用 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 字段来指示数组的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>货币类型。 在 <see cref="T:System.Decimal" /> 上使用，以将十进制数值作为 COM 货币类型而不是 <see langword="Decimal" /> 封送。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>当与 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 或 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> 字段一起使用时，指定自定义封送拆收器类。 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> 字段可用于将附加信息传递给自定义封送拆收器。 可以在任何引用类型上使用此成员。 此成员仅在参数和返回值有效。 不能用于字段。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>一个本机类型，此类型与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> 关联且将导致参数作为导出类型库中的 HRESULT 导出。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>一个可用作 C 样式函数指针的整数。 可将此成员用于 <see cref="T:System.Delegate" /> 数据类型或从 <see cref="T:System.Delegate" /> 继承的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Windows 运行时 字符串。 可以在 <see cref="T:System.String" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>1 字节有符号整数。 可使用此成员将布尔值转换为 1 字节、C 样式的 <see langword="bool" /> (<see langword="true" /> = 1, <see langword="false" /> = 0)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>2 字节有符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>4 字节有符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>8 字节有符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>COM <see langword="IDispatch" /> 指针（Microsoft Visual Basic 6.0 中的 <see langword="Object" />）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Windows 运行时 接口指针。 可以在 <see cref="T:System.Object" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>COM 接口指针。 接口的 <see cref="T:System.Guid" /> 可从类元数据获得。 如果将此成员应用于类，则可以使用该成员指定确切的接口类型或默认的接口类型。 应用于 <see cref="T:System.Object" /> 数据类型时，此成员将产生与 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> 相同的行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>COM <see langword="IUnknown" /> 指针。 可以在 <see cref="T:System.Object" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>指向 C 样式数组的第一个元素的指针。 当从托管到非托管代码进行封送处理时，该数组的长度由托管数组的长度确定。 从非托管到托管代码进行封送处理时，将根据 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 和 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> 字段确定该数组的长度，当需要区分字符串类型时，还可以后跟数组中元素的非托管类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>单字节、以 null 结尾的 ANSI 字符串。 可以在 <see cref="T:System.String" /> 和 <see cref="T:System.Text.StringBuilder" /> 数据类型上使用此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>一个指针，它指向用于封送托管格式化类的 C 样式结构。 该成员仅对平台调用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>与平台相关的字符串：在 Windows 98 上为 ANSI，在 Windows NT 和 Windows XP 上为 Unicode。 该值仅支持平台调用而不支持 COM 互操作，因为不支持导出 <see langword="LPTStr" /> 类型的字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>指向 UTF-8 编码字符串的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>一个 2 字节、以 null 结尾的 Unicode 字符串。 不能将 <see langword="LPWStr" /> 值用于未托管的字符串，除非该字符串使用未托管的 <see langword="CoTaskMemAlloc" /> 函数创建。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>4 字节浮点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>8 字节浮点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>
        <see langword="SafeArray" /> 是自我描述的数组，它带有关联数组数据的类型、秩和界限。 可将此成员与 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> 字段一起使用，以替代默认元素类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>一个用于封送托管格式化类和值类型的 VARIANT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>与平台相关的有符号整数：在 32 位 Windows 上为 4 个字节，在 64 位 Windows 上为 8 个字节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>与平台相关的无符号整数：在 32 位 Windows 上为 4 个字节，在 64 位 Windows 上为 8 个字节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>一个有长度前缀的与平台相关的 <see langword="char" /> 字符串：在 Windows 98 上为 ANSI，在 Windows NT 上为 Unicode。 很少用到这个类似于 BSTR 的成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>1 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>2 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>4 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>8 字节无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>2 字节、OLE 定义的 VARIANT_BOOL 类型 (<see langword="true" /> = -1, <see langword="false" /> = 0)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>一个值，该值使 Visual Basic 能够更改非托管代码中的字符串，并使结果在托管代码中反映出来。 该值仅支持平台调用。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary vsli:raw="Indicates how to marshal the array elements when an array is marshaled from managed to unmanaged code as a &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">指示当数组作为 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> 从托管代码封送到非托管代码时，如何封送该数组的元素。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;SAFEARRAY&quot; /&gt; pointer.">指示 <see langword="SAFEARRAY" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary vsli:raw="Indicates length prefixed bytes.">指示以长度为前缀的字节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary vsli:raw="Indicates that a blob contains an object.">指示 Blob 包含对象。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary vsli:raw="Indicates a Boolean value.">指示一个布尔值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary vsli:raw="Indicates a BSTR string.">指示 BSTR 字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary vsli:raw="Indicates that a value is a reference.">指示值为引用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary vsli:raw="Indicates a C style array.">指示 C 样式数组。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary vsli:raw="Indicates the clipboard format.">指示剪贴板格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary vsli:raw="Indicates a class ID.">指示类 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary vsli:raw="Indicates a currency value.">指示货币值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary vsli:raw="Indicates a DATE value.">指示 DATE 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;decimal&quot; /&gt; value.">指示 <see langword="decimal" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IDispatch&quot; /&gt; pointer.">指示 <see langword="IDispatch" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary vsli:raw="Indicates that a value was not specified.">指示未指定值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary vsli:raw="Indicates an SCODE.">指示 SCODE。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary vsli:raw="Indicates a FILETIME value.">指示 FILETIME 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary vsli:raw="Indicates an HRESULT.">指示 HRESULT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;char&quot; /&gt; value.">指示 <see langword="char" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;short&quot; /&gt; integer.">指示 <see langword="short" /> 整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;long&quot; /&gt; integer.">指示 <see langword="long" /> 整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary vsli:raw="Indicates a 64-bit integer.">指示 64 位整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary vsli:raw="Indicates an integer value.">指示整数值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary vsli:raw="Indicates a null-terminated string.">指示一个以 NULL 结尾的字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary vsli:raw="Indicates a wide string terminated by &lt;see langword=&quot;null&quot; /&gt;.">指示由 <see langword="null" /> 终止的宽字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary vsli:raw="Indicates a null value, similar to a null value in SQL.">指示空值（类似于 SQL 中的空值）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary vsli:raw="Indicates a pointer type.">指示指针类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;float&quot; /&gt; value.">指示 <see langword="float" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;double&quot; /&gt; value.">指示 <see langword="double" /> 值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary vsli:raw="Indicates a user defined type.">指示用户定义的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary vsli:raw="Indicates a SAFEARRAY. Not valid in a VARIANT.">指示 SAFEARRAY。 在 VARIANT 中无效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary vsli:raw="Indicates that the name of a storage follows.">指示随后是存储的名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary vsli:raw="Indicates that a storage contains an object.">指示存储包含对象。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary vsli:raw="Indicates that the name of a stream follows.">指示随后是流的名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary vsli:raw="Indicates that a stream contains an object.">指示流包含对象。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;byte&quot; /&gt;.">指示 <see langword="byte" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;short&quot; /&gt;.">指示 <see langword="unsigned" /><see langword="short" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;long&quot; /&gt;.">指示 <see langword="unsigned" /><see langword="long" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary vsli:raw="Indicates an 64-bit unsigned integer.">指示 64 位无符号整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt; integer value.">指示 <see langword="unsigned" /> 整数值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">指示 <see langword="IUnknown" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary vsli:raw="Indicates a user defined type.">指示用户定义的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary vsli:raw="Indicates a VARIANT &lt;see langword=&quot;far&quot; /&gt; pointer.">指示 VARIANT<see langword="far" /> 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary vsli:raw="Indicates a simple, counted array.">指示简单的已计数数组。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary vsli:raw="Indicates a C style &lt;see langword=&quot;void&quot; /&gt;.">指示 C 样式 <see langword="void" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_VARIANT | VT_BYREF&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">将 <see langword="VT_VARIANT | VT_BYREF" /> 类型的数据从托管代码封送到非托管代码。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; class for the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; parameter.">使用指定的 <see cref="T:System.Object" /> 参数初始化 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 类的新实例。</summary>
      <param name="obj" vsli:raw="The object to marshal.">要封送的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">获取由 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 对象包装的对象。</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">由 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 对象包装的对象。</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary vsli:raw="Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.">表示应保密的文本，例如在不再需要时将其从计算机内存中删除。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class.">初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this instance.">保护或取消保护此实例的值时出错。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">此平台上不支持此操作。</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class from a subarray of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.  &#xA;  &#xA; This constructor is not CLS-compliant. The CLS-compliant alternative is &lt;see cref=&quot;M:System.Security.SecureString.#ctor&quot; /&gt;.">用 <see cref="T:System.Char" /> 对象的子数组初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。  
  
此构造函数不符合 CLS。 符合 CLS 的替代方法是 <see cref="M:System.Security.SecureString.#ctor" />。</summary>
      <param name="value" vsli:raw="A pointer to an array of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.">指向 <see cref="T:System.Char" /> 对象的数组的指针。</param>
      <param name="length" vsli:raw="The number of elements of &lt;paramref name=&quot;value&quot; /&gt; to include in the new instance.">要包括到新实例中的 <paramref name="value" /> 的元素数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero or greater than 65,536.">
        <paramref name="length" /> 小于零或大于 65,536。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保护或取消保护此安全字符串的值时出错。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">此平台上不支持此操作。</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary vsli:raw="Appends a character to the end of the current secure string.">在当前安全字符串的末尾追加一个字符。</summary>
      <param name="c" vsli:raw="A character to append to this secure string.">要追加到此安全字符串的字符。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">已处置此安全字符串。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">此安全字符串是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="Performing this operation would make the length of this secure string greater than 65,536 characters.">执行此操作将使此安全字符串的长度超过 65,536 个字符。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保护或取消保护此安全字符串的值时出错。</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary vsli:raw="Deletes the value of the current secure string.">删除当前安全字符串的值。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">已处置此安全字符串。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">此安全字符串是只读的。</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary vsli:raw="Creates a copy of the current secure string.">创建当前安全字符串的副本。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">已处置此安全字符串。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保护或取消保护此安全字符串的值时出错。</exception>
      <returns vsli:raw="A duplicate of this secure string.">此安全字符串的副本。</returns>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object.">释放由当前 <see cref="T:System.Security.SecureString" /> 对象使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary vsli:raw="Inserts a character in this secure string at the specified index position.">在此安全字符串中的指定索引位置插入一个字符。</summary>
      <param name="index" vsli:raw="The index position where parameter &lt;paramref name=&quot;c&quot; /&gt; is inserted.">插入参数 <paramref name="c" /> 的索引位置。</param>
      <param name="c" vsli:raw="The character to insert.">要插入的字符。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">已处置此安全字符串。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">此安全字符串是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than the length of this secure string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Performing this operation would make the length of this secure string greater than 65,536 characters.">
        <paramref name="index" /> 小于零，或大于此安全字符串的长度。  
  
- 或 - 
执行此操作将使此安全字符串的长度超过 65,536 个字符。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保护或取消保护此安全字符串的值时出错。</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary vsli:raw="Indicates whether this secure string is marked read-only.">指示此安全字符串是否标记为只读。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">已处置此安全字符串。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this secure string is marked read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此安全字符串标记为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary vsli:raw="Makes the text value of this secure string read-only.">将此安全字符串的文本值设置为只读。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">已处置此安全字符串。</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the character at the specified index position from this secure string.">从此安全字符串中的指定索引位置移除字符。</summary>
      <param name="index" vsli:raw="The index position of a character in this secure string.">此安全字符串中的字符的索引位置。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">已处置此安全字符串。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">此安全字符串是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保护或取消保护此安全字符串的值时出错。</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary vsli:raw="Replaces the existing character at the specified index position with another character.">将指定索引位置上的现有字符替换为其他字符。</summary>
      <param name="index" vsli:raw="The index position of an existing character in this secure string.">此安全字符串中的某个现有字符的索引位置。</param>
      <param name="c" vsli:raw="A character that replaces the existing character.">替换现有字符的字符。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">已处置此安全字符串。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">此安全字符串是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">保护或取消保护此安全字符串的值时出错。</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary vsli:raw="Gets the number of characters in the current secure string.">获取当前安全字符串中的字符数。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">已处置此安全字符串。</exception>
      <returns vsli:raw="The number of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects in this secure string.">此安全字符串中 <see cref="T:System.Char" /> 对象的数目。</returns>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory and copying unmanaged memory blocks.">提供用于分配非托管内存和复制非托管内存块的方法的集合。</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到从非托管 COM 任务分配器分配的内存块。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">非托管内存中将 <paramref name="s" /> 参数复制到的地址；如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">将托管 <see cref="T:System.Security.SecureString" /> 的内容复制到非托管内存，并在复制时转换为 ANSI 格式。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">非托管内存中将 <paramref name="s" /> 参数复制到的地址，或者，如果提供了 null 对象，则为 0。</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">将托管 <see cref="T:System.Security.SecureString" /> 对象的内容复制到非托管内存中。</summary>
      <param name="s" vsli:raw="The managed object to copy.">要复制的托管对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">没有足够的可用内存。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">非托管内存中复制 <paramref name="s" /> 的地址，如果 <paramref name="s" /> 是长度为 0 的 <see cref="T:System.Security.SecureString" /> 对象，则为 0。</returns>
    </member>
  </members>
</doc>
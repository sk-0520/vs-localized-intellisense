<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct handles comments.">定义 <see cref="T:System.Text.Json.Utf8JsonReader" /> 结构处理注释的方式。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary vsli:raw="Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.">允许在 JSON 输入中使用注释，并将其视为有效标记。 读取项时，调用方可以访问注释值。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary vsli:raw="Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; is thrown. This is the default value.">不允许在 JSON 输入中使用注释。 若找到注释，可将其视为 JSON，并且引发 <see cref="T:System.Text.Json.JsonException" />。 这是默认值。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary vsli:raw="Allows comments within the JSON input and ignores them. The &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; behaves as if no comments are present.">允许在 JSON 输入中使用注释并忽略它们。 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的行为方式假设不存在注释。</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary vsli:raw="Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.">提供用于检查 JSON 值的结构内容，而不自动实例化数据值的机制。</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonDocument&quot;&gt;&lt;/xref&gt; instance.">释放该 <see cref="T:System.Text.Json.JsonDocument" /> 实例使用的资源。</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.">将表示单个 JSON 字节值的 UTF-8 编码文本形式的序列分析为 JsonDocument。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">要分析的 JSON 文本。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">分析期间用于控制读取器行为的选项。</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> 不表示有效的单个 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> 包含不受支持的选项。</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 值的 JsonDocument 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">将表示单个 JSON 值的 UTF-8 编码数据形式的 <see cref="T:System.IO.Stream" /> 分析为 JsonDocument。 数据流将被完整读取。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">要分析的 JSON 数据。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">分析期间用于控制读取器行为的选项。</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> 不表示有效的单个 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> 包含不受支持的选项。</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 值的 JsonDocument 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.">将表示单个 JSON 字节值的 UTF-8 编码文本形式的内存分析为 JsonDocument。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">要分析的 JSON 文本。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">分析期间用于控制读取器行为的选项。</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> 不表示有效的单个 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> 包含不受支持的选项。</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 值的 JsonDocument 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON value into a JsonDocument.">将表示单个 JSON 字符值的文本分析为 JsonDocument。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">要分析的 JSON 文本。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">分析期间用于控制读取器行为的选项。</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> 不表示有效的单个 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> 包含不受支持的选项。</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 值的 JsonDocument 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON string value into a JsonDocument.">将表示单个 JSON 字符串值的文本分析为 JsonDocument。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">要分析的 JSON 文本。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">分析期间用于控制读取器行为的选项。</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> 不表示有效的单个 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> 包含不受支持的选项。</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 值的 JsonDocument 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">将表示单个 JSON 值的 UTF-8 编码数据形式的 <see cref="T:System.IO.Stream" /> 分析为 JsonDocument。 数据流将被完整读取。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">要分析的 JSON 数据。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">分析期间用于控制读取器行为的选项。</param>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests.">要监视取消请求的标记。</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> 不表示有效的单个 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> 包含不受支持的选项。</exception>
      <returns vsli:raw="A task to produce a JsonDocument representation of the JSON value.">用于生成 JSON 值的 JsonDocument 表示的任务。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary vsli:raw="Parses one JSON value (including objects or arrays) from the provided reader.">通过提供的读取器分析一个 JSON 值（包括对象或数组）。</summary>
      <param name="reader" vsli:raw="The reader to read.">要用于读取的读取器。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> 包含不受支持的选项。

- 或 -

当前 <paramref name="reader" /> 令牌不启动或表示值。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">无法从读取器中读取值。</exception>
      <returns vsli:raw="A JsonDocument representing the value (and nested values) read from the reader.">表示从读取器中读取的值（和嵌套值）的 JsonDocument。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary vsli:raw="Attempts to parse one JSON value (including objects or arrays) from the provided reader.">尝试通过提供的读取器分析一个 JSON 值（包括对象或数组）。</summary>
      <param name="reader" vsli:raw="The reader to read.">要用于读取的读取器。</param>
      <param name="document" vsli:raw="When the method returns, contains the parsed document.">方法返回时，包含已分析的文档。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> 包含不受支持的选项。

- 或 -

当前 <paramref name="reader" /> 令牌不启动或表示值。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">无法从读取器中读取值。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a value was read and parsed into a JsonDocument; &lt;see langword=&quot;false&quot; /&gt; if the reader ran out of data while parsing. All other situations result in an exception being thrown.">如果读取了值并将其分析为 JsonDocument，则为 <see langword="true" />；如果读取器在分析时耗尽了数据，则为 <see langword="false" />。 所有其他情况都会导致引发异常。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the document to the provided writer as a JSON value.">将文档作为 JSON 值写入所提供的编写器。</summary>
      <param name="writer" vsli:raw="The writer to which to write the document.">要将文档写入到的编写器。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this &lt;see cref=&quot;P:System.Text.Json.JsonDocument.RootElement&quot; /&gt; would result in invalid JSON.">此 <see cref="P:System.Text.Json.JsonDocument.RootElement" /> 的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 会导致无效的 JSON。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary vsli:raw="Gets the root element of this JSON document.">获取此 JSON 文档的根元素。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the document.">一个， <see cref="T:System.Text.Json.JsonElement" /> 它表示文档的值。</returns>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when parsing JSON to create a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">分析 JSON 以创建 <see cref="T:System.Text.Json.JsonDocument" /> 时，为用户提供定义自定义行为的功能。</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">获取或设置一个值，该值指示要读取的 JSON 有效负载中是否允许（和忽略）对象或数组中 JSON 值的列表末尾多余的逗号。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. Default is &lt;see langword=&quot;false&quot; /&gt;">
        <see langword="true" /> 如果允许在对象或数组中的 JSON 值列表末尾使用额外逗号，则为; 否则为。否则为 <see langword="false" /> 。 默认为 <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; handles comments when reading through the JSON data.">获取或设置一个值，该值确定在读取 JSON 数据时，<see cref="T:System.Text.Json.JsonDocument" /> 处理注释的方式。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">注释处理枚举设置为不受支持的值（或不在 <see cref="T:System.Text.Json.JsonCommentHandling" /> 枚举范围内）。</exception>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">枚举值之一，指示如何处理注释。</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.">获取或设置分析 JSON 数据时允许的最大深度，默认值（即 0）表示最大深度为 64。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">最大深度设置为负值。</exception>
      <returns vsli:raw="The maximum depth allowed when parsing JSON data.">分析 JSON 数据时允许的最大深度。</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary vsli:raw="Represents a specific JSON value within a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">表示 <see cref="T:System.Text.Json.JsonDocument" /> 中的特定 JSON 值。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary vsli:raw="Gets a JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">获取可在超过原始 <see cref="T:System.Text.Json.JsonDocument" /> 的生存期安全存储的 JsonElement。</summary>
      <returns vsli:raw="A JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">可在超过原始 <see cref="T:System.Text.Json.JsonDocument" /> 的生存期安全存储的 JsonElement。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary vsli:raw="Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.">获取一个枚举器，它用于枚举由该 JsonElement 表示的 JSON 数组中的值。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Array" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="An enumerator to enumerate the values in the JSON array represented by this JsonElement.">一个枚举器，它用于枚举由该 JsonElement 表示的 JSON 数组中的值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary vsli:raw="Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.">获取一个枚举器，它用于枚举由该 JsonElement 表示的 JSON 对象中的属性。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="An enumerator to enumerate the properties in the JSON object represented by this JsonElement.">一个枚举器，它用于枚举由该 JsonElement 表示的 JSON 对象中的属性。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary vsli:raw="Gets the number of values contained within the current array value.">获取当前数组值中包含的值的数量。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Array" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The number of values contained within the current array value.">当前数组值中包含的值的数量。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">获取元素的值（<see cref="T:System.Boolean" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.True&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.False&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 既不是 <see cref="F:System.Text.Json.JsonValueKind.True" />，也不是 <see cref="F:System.Text.Json.JsonValueKind.False" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">元素的值（<see cref="T:System.Boolean" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">获取当前 JSON 数字（<see cref="T:System.Byte" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">此值不能以 <see cref="T:System.Byte" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">当前 JSON 数字（<see cref="T:System.Byte" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary vsli:raw="Gets the value of the element as a byte array.">获取作为字节数组的元素的值。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text and hence cannot be decoded to bytes.">值未编码为 base 64 文本，因此无法解码为字节。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The value decoded as a byte array.">编码为字节数组的值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">获取元素的值（<see cref="T:System.DateTime" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">此值不可作为 <see cref="T:System.DateTime" /> 读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">元素的值（<see cref="T:System.DateTime" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">获取元素的值（<see cref="T:System.DateTimeOffset" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">此值不可作为 <see cref="T:System.DateTimeOffset" /> 读取。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">元素的值（<see cref="T:System.DateTimeOffset" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">获取当前 JSON 数字（<see cref="T:System.Decimal" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">此值不能以 <see cref="T:System.Decimal" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">当前 JSON 数字（<see cref="T:System.Decimal" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">获取当前 JSON 数字（<see cref="T:System.Double" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">此值不能以 <see cref="T:System.Double" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">当前 JSON 数字（<see cref="T:System.Double" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">获取元素的值（<see cref="T:System.Guid" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">此值不能以 <see cref="T:System.Guid" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">元素的值（<see cref="T:System.Guid" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">获取当前 JSON 数字（<see cref="T:System.Int16" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">此值不能以 <see cref="T:System.Int16" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">当前 JSON 数字（<see cref="T:System.Int16" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">获取当前 JSON 数字（<see cref="T:System.Int32" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">此值不能以 <see cref="T:System.Int32" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">当前 JSON 数字（<see cref="T:System.Int32" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">获取当前 JSON 数字（<see cref="T:System.Int64" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">此值不能以 <see cref="T:System.Int64" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">当前 JSON 数字（<see cref="T:System.Int64" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;utf8PropertyName&quot; /&gt;.">获取一个 <see cref="T:System.Text.Json.JsonElement" />，它表示由 <paramref name="utf8PropertyName" /> 标识的所需属性的值。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return.">要返回的属性名称的 UTF-8 表示形式（没有字节顺序标记 (BOM)）。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">找不到带有所请求名称的属性。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">一个 <see cref="T:System.Text.Json.JsonElement" />，它表示所需属性的值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">获取一个 <see cref="T:System.Text.Json.JsonElement" />，它表示由 <paramref name="propertyName" /> 标识的所需属性的值。</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">要返回其值的属性的名称。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">找不到带有所请求名称的属性。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">一个 <see cref="T:System.Text.Json.JsonElement" />，它表示所需属性的值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">获取一个 <see cref="T:System.Text.Json.JsonElement" />，它表示由 <paramref name="propertyName" /> 标识的所需属性的值。</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">要返回其值的属性的名称。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">找不到带有所请求名称的属性。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">一个 <see cref="T:System.Text.Json.JsonElement" />，它表示所需属性的值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary vsli:raw="Gets a string that represents the original input data backing this value.">获取一个字符串，它表示支持该值的原始输入数据。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The original input data backing this value.">支持该值的原始输入数据。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">获取当前 JSON 数字（<see cref="T:System.SByte" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">此值不能以 <see cref="T:System.SByte" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">当前 JSON 数字（<see cref="T:System.SByte" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">获取当前 JSON 数字（<see cref="T:System.Single" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">此值不能以 <see cref="T:System.Single" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">当前 JSON 数字（<see cref="T:System.Single" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">获取元素的值（<see cref="T:System.String" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 既不是 <see cref="F:System.Text.Json.JsonValueKind.String" />，也不是 <see cref="F:System.Text.Json.JsonValueKind.Null" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">元素的值（<see cref="T:System.String" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">获取当前 JSON 数字（<see cref="T:System.UInt16" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">此值不能以 <see cref="T:System.UInt16" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">当前 JSON 数字（<see cref="T:System.UInt16" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">获取当前 JSON 数字（<see cref="T:System.UInt32" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">此值不能以 <see cref="T:System.UInt32" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">当前 JSON 数字（<see cref="T:System.UInt32" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">获取当前 JSON 数字（<see cref="T:System.UInt64" /> 形式）。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">此值不能以 <see cref="T:System.UInt64" /> 形式表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">当前 JSON 数字（<see cref="T:System.UInt64" /> 形式）。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary vsli:raw="Gets a string representation for the current value appropriate to the value type.">获取适合于值类型的当前值的字符串表示形式。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="A string representation for the current value appropriate to the value type.">适合于值类型的当前值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">尝试以 <see cref="T:System.Byte" /> 形式表示当前 JSON 数字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">该方法返回时，如果转换成功，则包含与当前 JSON 数字等效的字节。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.Byte" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.">尝试将当前 JSON 字符串表示为字节数组（假定它是 Base64 编码）。</summary>
      <param name="value" vsli:raw="If the method succeeds, contains the decoded binary representation of the Base64 text.">如果方法成功，则包含 Base64 文本的已解码二进制表示形式。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整个标记值编码为有效 base 64 文本并且可以成功解码为字节，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">尝试以 <see cref="T:System.DateTime" /> 形式表示当前 JSON 字符串。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">此方法返回时，包含与当前 JSON 字符串等效的日期和时间值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.DateTime" /> 形式表示字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">尝试以 <see cref="T:System.DateTimeOffset" /> 形式表示当前 JSON 字符串。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">此方法返回时，包含与当前 JSON 字符串等效的日期和时间。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.DateTimeOffset" /> 形式表示字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">尝试以 <see cref="T:System.Decimal" /> 形式表示当前 JSON 数字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">此方法返回时，包含当前 JSON 数字的十进制等效值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.Decimal" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">尝试以 <see cref="T:System.Double" /> 形式表示当前 JSON 数字。</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">此方法返回时，包含与当前 JSON 数字等效的双精度浮点值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.Double" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">尝试以 <see cref="T:System.Guid" /> 形式表示当前 JSON 字符串。</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">此方法返回时，包含与当前 JSON 字符串等效的 GUID。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.Guid" /> 形式表示字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">尝试以 <see cref="T:System.Int16" /> 形式表示当前 JSON 数字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">该方法返回时，如果转换成功，则包含与当前 JSON 数字等效的 16 位整数。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.Int16" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">尝试以 <see cref="T:System.Int32" /> 形式表示当前 JSON 数字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">此方法返回时，包含与当前 JSON 数字等效的 32 位整数值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.Int32" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">尝试以 <see cref="T:System.Int64" /> 形式表示当前 JSON 数字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">此方法返回时，包含与当前 JSON 数字等效的 64 位整数值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.Int64" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;utf8PropertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">查找当前对象中名为 <paramref name="utf8PropertyName" /> 的属性，返回一个指示此类属性是否存在的值。 如果此属性存在，该方法会将其值分配给 <paramref name="value" /> 参数。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.">要返回的属性名称的 UTF-8 表示形式（没有字节顺序标记 (BOM)）。</param>
      <param name="value" vsli:raw="Receives the value of the located property.">接收已找到的属性的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到该属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">查找当前对象中名为 <paramref name="propertyName" /> 的属性，返回一个指示此类属性是否存在的值。 如果此属性存在，该方法会将其值分配给 <paramref name="value" /> 参数。</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">要查找的属性的名称。</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">此方法返回时，包含指定属性的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到该属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the &lt;paramref name=&quot;value&quot; /&gt; argument.">查找当前对象中名为 <paramref name="propertyName" /> 的属性，返回一个指示此类属性是否存在的值。 如果此属性存在，会将其值分配给 <paramref name="value" /> 参数。</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">要查找的属性的名称。</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">此方法返回时，包含指定属性的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到该属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">尝试以 <see cref="T:System.SByte" /> 形式表示当前 JSON 数字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">该方法返回时，如果转换成功，则包含与当前 JSON 数字等效的有符号字节。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.SByte" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">尝试以 <see cref="T:System.Single" /> 形式表示当前 JSON 数字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">此方法返回时，包含与当前 JSON 数字等效的单精度浮点值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.Single" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">尝试以 <see cref="T:System.UInt16" /> 形式表示当前 JSON 数字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">该方法返回时，如果转换成功，则包含与当前 JSON 数字等效的无符号 16 位整数。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.UInt16" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">尝试以 <see cref="T:System.UInt32" /> 形式表示当前 JSON 数字。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">此方法返回时，包含与当前 JSON 数字等效的 32 位无符号整数值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.UInt32" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">尝试以 <see cref="T:System.UInt64" /> 形式表示当前 JSON 数字。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">此方法返回时，包含与当前 JSON 数字等效的 64 位无符号整数值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以 <see cref="T:System.UInt64" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the text represented by a UTF8-encoded byte span to the string value of this element.">将由 UTF8 编码的字节范围表示的文本与此元素的字符串值进行比较。</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">要进行比较的 UTF-8 编码文本。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element has the same UTF-8 encoding as&#xA;              &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此元素的字符串值的 UTF-8 编码与 <paramref name="utf8Text" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares a specified read-only character span to the string value of this element.">将指定只读字符范围与此元素的字符串值进行比较。</summary>
      <param name="text" vsli:raw="The text to compare against.">要针对其进行比较的文本。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此元素的字符串值与 <paramref name="text" /> 匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary vsli:raw="Compares a specified string to the string value of this element.">将指定字符串与此元素的字符串值进行比较。</summary>
      <param name="text" vsli:raw="The text to compare against.">要针对其进行比较的文本。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此元素的字符串值与 <paramref name="text" /> 匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the element to the specified writer as a JSON value.">将元素作为 JSON 值写入指定的编写器。</summary>
      <param name="writer" vsli:raw="The writer to which to write the element.">要将元素写入到的编写器。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this value is &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Undefined&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 为 <see cref="F:System.Text.Json.JsonValueKind.Undefined" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary vsli:raw="Gets the value at the specified index if the current value is an &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">获取当前值为 <see cref="F:System.Text.Json.JsonValueKind.Array" /> 时指定索引处的值。</summary>
      <param name="index" vsli:raw="The item index.">项索引。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Array" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not in the range [0, &lt;see cref=&quot;M:System.Text.Json.JsonElement.GetArrayLength&quot; /&gt;()).">
        <paramref name="index" /> 不在范围 [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()) 内。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The value at the specified index.">位于指定索引处的值。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary vsli:raw="Gets the type of the current JSON value.">获取当前 JSON 值的类型。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      <returns vsli:raw="The type of the current JSON value.">当前 JSON 值的类型。</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary vsli:raw="Represents an enumerator for the contents of a JSON array.">表示一个针对 JSON 数组内容的枚举器。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ArrayEnumerator&quot;&gt;&lt;/xref&gt; instance.">释放该 <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" /> 实例使用的资源。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">一个可用于循环访问数组的枚举器。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">将枚举数推进到集合的下一个元素。</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>一系列 <see cref="T:System.Text.Json.JsonElement" /> 的枚举器，可用于循环访问集合。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">用于循环访问集合的枚举数。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">获取集合中位于枚举数当前位置的元素。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">集合中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">获取集合中位于枚举数当前位置的元素。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">集合中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary vsli:raw="Represents an enumerator for the properties of a JSON object.">表示一个针对 JSON 对象属性的枚举器。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ObjectEnumerator&quot;&gt;&lt;/xref&gt; instance.">释放该 <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" /> 实例使用的资源。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates the properties of an object.">返回循环访问对象属性的枚举器。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the object.">一个可用于循环访问对象的枚举器。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">将枚举数推进到集合的下一个元素。</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>
        <see cref="T:System.Text.Json.JsonProperty" /> 对象的枚举器，可用于循环访问集合。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">用于循环访问集合的枚举数。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">获取集合中位于枚举数当前位置的元素。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">集合中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">获取集合中位于枚举数当前位置的元素。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">集合中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary vsli:raw="Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.">提供将 UTF-8 或 UTF-16 编码文本转换为适用于 JSON 的表单的方法。</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a UTF-8 text value as a JSON string.">将 UTF-8 文本值编码为 JSON 字符串。</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded text to convert to JSON encoded text.">要转换为 JSON 编码文本的 UTF-8 编码文本。</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">要在转义字符串时使用的编码器，或为 <see langword="null" />（要使用默认编码器的话）。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;utf8Value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains invalid UTF-8 bytes.">
        <paramref name="utf8Value" /> 太大。

- 或 -

<paramref name="utf8Value" /> 包含无效的 UTF-8 字节。</exception>
      <returns vsli:raw="The encoded JSON text.">编码的 JSON 文本。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a specified text value as a JSON string.">将指定文本值编码为 JSON 字符串。</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">要转换为 JSON 编码文本的值。</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">要在转义字符串时使用的编码器，或为 <see langword="null" />（要使用默认编码器的话）。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> 太大。

- 或 -

<paramref name="value" /> 包含无效的 UTF-16 字符。</exception>
      <returns vsli:raw="The encoded JSON text.">编码的 JSON 文本。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes the string text value as a JSON string.">将字符串文本值编码为 JSON 字符串。</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">要转换为 JSON 编码文本的值。</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">要在转义字符串时使用的编码器，或为 <see langword="null" />（要使用默认编码器的话）。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> 太大。

- 或 -

<paramref name="value" /> 包含无效的 UTF-16 字符。</exception>
      <returns vsli:raw="The encoded JSON text.">编码的 JSON 文本。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance and a specified object, which must also be a &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance, have the same value.">确定此实例是否与指定的对象（也必须是 <see cref="T:System.Text.Json.JsonEncodedText" /> 实例）具有相同的值。</summary>
      <param name="obj" vsli:raw="The object to compare to this instance.">要与此实例进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前实例与 <paramref name="obj" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance have the same value.">确定此实例是否与另一个指定的 <see cref="T:System.Text.Json.JsonEncodedText" /> 实例具有相同的值。</summary>
      <param name="other" vsli:raw="The object to compare to this instance.">要与此实例进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例与 <paramref name="other" /> 具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt;.">返回此 <see cref="T:System.Text.Json.JsonEncodedText" /> 的哈希代码。</summary>
      <returns vsli:raw="The hash code for this instance.">此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary vsli:raw="Converts the value of this instance to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将此实例的值转换为 <see cref="T:System.String" />。</summary>
      <returns vsli:raw="The underlying UTF-16 encoded string.">基础 UTF-16 编码字符串。</returns>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary vsli:raw="Gets the UTF-8 encoded representation of the pre-encoded JSON text.">获取预编码 JSON 文本的 UTF-8 编码表示形式。</summary>
      <returns vsli:raw="The UTF-8 encoded representation of the pre-encoded JSON text.">预先编码的 JSON 文本的 UTF-8 编码表示形式。</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary vsli:raw="Defines a custom exception object that is thrown when invalid JSON text is encountered, the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.">定义一个自定义异常对象，当遇到无效 JSON 文本、传递已定义的最大深度或 JSON 文本与对象上的属性类型不兼容时，则引发该异常对象。</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class.">初始化 <see cref="T:System.Text.Json.JsonException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Creates a new exception object with serialized data.">使用序列化数据创建新的异常对象。</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">有关引发的异常的序列化对象数据。</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">一个包含有关源或目标的上下文信息的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class with a specified error message.">用指定的错误消息初始化 <see cref="T:System.Text.Json.JsonException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The context-specific error message.">上下文特定的错误消息。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class, with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Text.Json.JsonException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The context-specific error message.">上下文特定的错误消息。</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">引发当前异常的异常。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary vsli:raw="Creates a new exception object to relay error information to the user.">创建新的异常对象，将错误信息传递给用户。</summary>
      <param name="message" vsli:raw="The context-specific error message.">上下文特定的错误消息。</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">遇到无效的 JSON 路径。</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">反序列化时遇到无效 JSON 时所在的行号（从 0 开始）。</param>
      <param name="bytePositionInLine" vsli:raw="The byte count within the current line (starting at 0) where the invalid JSON was encountered.">遇到无效 JSON 的当前行（从 0 开始）中的字节计数。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary vsli:raw="Creates a new exception object to relay error information to the user that includes a specified inner exception.">创建新的异常对象，以将错误信息传递给包含指定内部异常的用户。</summary>
      <param name="message" vsli:raw="The context-specific error message.">上下文特定的错误消息。</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">遇到无效的 JSON 路径。</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">反序列化时遇到无效 JSON 时所在的行号（从 0 开始）。</param>
      <param name="bytePositionInLine" vsli:raw="The byte count (starting at 0) within the current line where the invalid JSON was encountered.">遇到无效 JSON 时所在当前行中的字节计数（从 0 开始）。</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">引发当前异常的异常。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">使用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">有关引发的异常的序列化对象数据。</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">一个包含有关源或目标的上下文信息的对象。</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary vsli:raw="Gets the zero-based number of bytes read within the current line before the exception.">获取异常出现之前在当前行读取的从零开始的字节数。</summary>
      <returns vsli:raw="The zero-based number of bytes read within the current line before the exception.">在异常之前从零开始的字节数（从零开始）。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary vsli:raw="Gets the zero-based number of lines read before the exception.">获取异常出现之前读取的从零开始的行数。</summary>
      <returns vsli:raw="The zero-based number of lines read before the exception.">在异常之前读取的从零开始的行数。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary vsli:raw="Gets a message that describes the current exception.">获取描述当前异常的消息。</summary>
      <returns vsli:raw="The error message that describes the current exception.">描述当前异常的错误消息。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary vsli:raw="Gets The path within the JSON where the exception was encountered.">获取 JSON 中遇到异常的路径。</summary>
      <returns vsli:raw="The path within the JSON where the exception was encountered.">JSON 中遇到异常的路径。</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary vsli:raw="Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.">确定用于将基于字符串的名称转换为其他格式（如 camel 大小写格式）的命名策略。</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">初始化 <see cref="T:System.Text.Json.JsonNamingPolicy" /> 的新实例。</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary vsli:raw="When overridden in a derived class, converts the specified name according to the policy.">在派生类中重写时，根据策略转换指定名称。</summary>
      <param name="name" vsli:raw="The name to convert.">要转换的名称。</param>
      <returns vsli:raw="The converted name.">转换后的名称。</returns>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary vsli:raw="Gets the naming policy for camel-casing.">获取 camel 大小写的命名策略。</summary>
      <returns vsli:raw="The naming policy for camel-casing.">大小写大小的命名策略。</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary vsli:raw="Represents a single property for a JSON object.">表示 JSON 对象的单个属性。</summary>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the specified UTF-8 encoded text to the name of this property.">将指定 UTF-8 编码文本与此属性的名称进行比较。</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">要进行比较的 UTF-8 编码文本。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">此值的 <see cref="T:System.Type" /> 不是 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property has the same UTF-8 encoding as &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此属性的名称的 UTF-8 编码与 <paramref name="utf8Text" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the specified text as a character span to the name of this property.">将指定文本作为字符范围与此属性的名称进行比较。</summary>
      <param name="text" vsli:raw="The text to compare against.">要针对其进行比较的文本。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">此值的 <see cref="T:System.Type" /> 不是 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此属性的名称与 <paramref name="text" /> 匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary vsli:raw="Compares the specified string to the name of this property.">将指定字符串与此属性的名称进行比较。</summary>
      <param name="text" vsli:raw="The text to compare against.">要针对其进行比较的文本。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">此值的 <see cref="T:System.Type" /> 不是 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果此属性的名称与 <paramref name="text" /> 匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary vsli:raw="Provides a string representation of the property for debugging purposes.">出于调试目的，提供属性的字符串表示形式。</summary>
      <returns vsli:raw="A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.">一个包含属性的未解释的值的字符串，它以声明左引号开头，以值中的最后一个字符结尾。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the property to the provided writer as a named JSON object property.">将属性作为命名的 JSON 对象属性写入提供的编写器。</summary>
      <param name="writer" vsli:raw="The writer to which to write the property.">要将属性写入到的编写器。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Text.Json.JsonProperty.Name&quot; /&gt; is too large to be a JSON object property.">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> 太大，无法转换为 JSON 对象属性。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this JSON property's &lt;see cref=&quot;P:System.Text.Json.JsonProperty.Value&quot; /&gt; would result in invalid JSON.">此 JSON 属性的 <see cref="P:System.Text.Json.JsonProperty.Value" /> 的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 会导致无效的 JSON。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary vsli:raw="Gets the name of this property.">获取此属性的名称。</summary>
      <returns vsli:raw="The name of this property.">此属性的名称。</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary vsli:raw="Gets the value of this property.">获取此属性的值。</summary>
      <returns vsli:raw="The value of this property.">此属性的值。</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when reading JSON.">读取 JSON 时，为用户提供定义自定义行为的功能。</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">获取或设置一个值，该值定义要读取的 JSON 有效负载中是否允许（和忽略）对象或数组中 JSON 值的列表末尾多余的逗号。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果允许使用额外逗号，则为;否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; handles comments when reading through the JSON data.">获取或设置一个值，该值确定在读取 JSON 数据时，<see cref="T:System.Text.Json.Utf8JsonReader" /> 处理注释的方式。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is being set to a value that is not a member of the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enumeration.">该属性被设置为不是 <see cref="T:System.Text.Json.JsonCommentHandling" /> 枚举的成员的值。</exception>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">枚举值之一，指示如何处理注释。</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.">获取或设置读取 JSON 时允许的最大深度，默认值（即 0）表示最大深度为 64。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The maximum depth is being set to a negative value.">最大深度设置为负值。</exception>
      <returns vsli:raw="The maximum depth allowed when reading JSON.">读取 JSON 时所允许的最大深度。</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary vsli:raw="Defines an opaque type that holds and saves all the relevant state information, which must be provided to the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; to continue reading after processing incomplete data.">定义一个不透明类型，用于保留和保存所有相关的状态信息，这些信息必须提供给 <see cref="T:System.Text.Json.Utf8JsonReader" />，以便在处理不完整的数据后继续进行读取。</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonReaderState&quot; /&gt; instance.">构造新的 <see cref="T:System.Text.Json.JsonReaderState" /> 实例。</summary>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.">定义 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的自定义行为，它不同于 JSON RFC（例如，处理注释的方式，或读取时允许的最大深度）。 默认情况下，<see cref="T:System.Text.Json.Utf8JsonReader" /> 严格遵循 JSON RFC（JSON 中的注释无效）且读取的最大深度为 64。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The maximum depth is set to a non-positive value (&amp;lt; 0).">最大深度设为非正值 (&lt; 0)。</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary vsli:raw="Gets the custom behavior to use when reading JSON data using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct that may deviate from strict adherence to the JSON specification, which is the default behavior.">获取使用 <see cref="T:System.Text.Json.Utf8JsonReader" /> 结构读取 JSON 数据时要使用的自定义行为，该结构可能会偏离严格遵守 JSON 规范的要求（这是默认行为）。</summary>
      <returns vsli:raw="The custom behavior to use when reading JSON data.">读取 JSON 数据时要使用的自定义行为。</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary vsli:raw="Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.">提供将对象或值类型序列化为 JSON 以及将 JSON 反序列化为对象或值类型的功能。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.">将表示单个 JSON 值的 UTF-8 编码文本分析为指定类型的实例。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">要分析的 JSON 文本。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">要转换为并返回的对象的类型。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">分析期间用于控制行为的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">JSON 无效。

- 或 -

<typeparamref name="returnType" /> 与 JSON 不兼容。

- 或 -

单个 JSON 值以外的跨度中存在剩余数据。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">
        <paramref name="returnType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 值的 <paramref name="returnType" /> 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of a specified type.">将表示单个 JSON 值的文本分析为指定类型的实例。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">要分析的 JSON 文本。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">要转换为并返回的对象的类型。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">分析期间用于控制行为的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> 或 <paramref name="returnType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">JSON 无效。
          
- 或 -

<typeparamref name="TValue" /> 与 JSON 不兼容。

- 或 -

单个 JSON 值以外的字符串中存在剩余数据。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">
        <paramref name="returnType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 值的 <paramref name="returnType" /> 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.">从提供的读取器读取一个 JSON 值（包括对象或数组）并将它转换为指定类型的实例。</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">要从中读取 JSON 的读取器。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">要转换为并返回的对象的类型。</param>
      <param name="options" vsli:raw="Options to control the serializer behavior during reading.">读取期间用于控制序列化程序行为的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">JSON 无效。
          
- 或 -

<typeparamref name="returnType" /> 与 JSON 不兼容。

- 或 -

无法从读取器中读取值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is using unsupported options.">
        <paramref name="reader" /> 使用的是不受支持的选项。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">
        <paramref name="returnType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 值的 <paramref name="returnType" /> 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.">将表示单个 JSON 值的 UTF-8 编码文本分析为泛型类型参数指定的类型的实例。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">要分析的 JSON 文本。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">分析期间用于控制行为的选项。</param>
      <typeparam name="TValue" vsli:raw="The target type of the UTF-8 encoded text.">UTF-8 编码文本的目标类型。</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">JSON 无效。

- 或 -

<typeparamref name="TValue" /> 与 JSON 不兼容。

- 或 -

单个 JSON 值以外的跨度中存在剩余数据。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">
        <typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 值的 <typeparamref name="TValue" /> 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.">将表示单个 JSON 值的文本分析为泛型类型参数指定的类型的实例。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">要分析的 JSON 文本。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">分析期间用于控制行为的选项。</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 值的目标类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">JSON 无效。

- 或 -

<typeparamref name="TValue" /> 与 JSON 不兼容。

- 或 -

单个 JSON 值以外的字符串中存在剩余数据。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">
        <typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 值的 <typeparamref name="TValue" /> 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.">将一个 JSON 值（包括对象或数组）从提供的读取器读取到泛型类型参数指定的类型的实例中。</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">要从中读取 JSON 的读取器。</param>
      <param name="options" vsli:raw="Options to control serializer behavior during reading.">读取期间用于控制序列化程序行为的选项。</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 值的目标类型。</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">JSON 无效。

- 或 -

<typeparamref name="TValue" /> 与 JSON 不兼容。

- 或 -

无法从读取器中读取值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; uses unsupported options.">
        <paramref name="reader" /> 不受支持的选项。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">
        <typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 值的 <typeparamref name="TValue" /> 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.">将表示单个 JSON 值的 UTF-8 编码文本异步读取到指定类型的实例中。 流会被完整读取。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">要分析的 JSON 数据。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">要转换为并返回的对象的类型。</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">读取期间用于控制行为的选项。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token that may be used to cancel the read operation.">可能用于取消读取操作的取消标记。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> 或 <paramref name="returnType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">JSON 无效。

- 或 -

<typeparamref name="TValue" /> 与 JSON 不兼容。

- 或 -

流中存在剩余数据。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">
        <paramref name="returnType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 值的 <paramref name="returnType" /> 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion.">将表示单个 JSON 值的 UTF-8 编码文本异步读取到泛型类型参数指定的类型的实例中。 流会被完整读取。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">要分析的 JSON 数据。</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">读取期间用于控制行为的选项。</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the read operation.">可能用于取消读取操作的标记。</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 值的目标类型。</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">JSON 无效。

- 或 -

<typeparamref name="TValue" /> 与 JSON 不兼容。

- 或 -

流中存在剩余数据。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">
        <typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt;is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 值的 <typeparamref name="TValue" /> 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a specified type into a JSON string.">将指定类型的值转换为 JSON 字符串。</summary>
      <param name="value" vsli:raw="The value to convert.">要转换的值。</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">要转换的 <paramref name="value" /> 的类型。</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">用于控制转换行为的选项。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="inputType" /> 与 <paramref name="value" /> 不兼容。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">
        <paramref name="inputType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="The JSON string representation of the value.">值的 JSON 字符串表示形式。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of the specified type to the provided writer.">将指定类型的 JSON 表示形式写入提供的编写器。</summary>
      <param name="writer" vsli:raw="The JSON writer to write to.">要写入到的 JSON 编写器。</param>
      <param name="value" vsli:raw="The value to convert and write.">要转换并写入的值。</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">要转换的 <paramref name="value" /> 的类型。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">用于控制序列化行为的选项。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;">
        <paramref name="inputType" /> 与 <paramref name="value" /> 不兼容</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; or &lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 或 <paramref name="inputType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">
        <paramref name="inputType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string.">将泛型类型参数指定的类型的值转换为 JSON 字符串。</summary>
      <param name="value" vsli:raw="The value to convert.">要转换的值。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">用于控制序列化行为的选项。</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">要序列化的值的类型。</typeparam>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">
        <typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A JSON string representation of the value.">值的 JSON 字符串表示形式。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of a type specified by a generic type parameter to the provided writer.">将泛型类型参数指定的类型的 JSON 表示形式写入提供的编写器。</summary>
      <param name="writer" vsli:raw="A JSON writer to write to.">要写入到的 JSON 编写器。</param>
      <param name="value" vsli:raw="The value to convert and write.">要转换并写入的值。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">用于控制序列化行为的选项。</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">要序列化的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">
        <typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.">将指定类型的值异步转换为 UTF-8 编码的 JSON 文本并将它写入指定流。</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">要写入的 UTF-8 流。</param>
      <param name="value" vsli:raw="The value to convert.">要转换的值。</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">要转换的 <paramref name="value" /> 的类型。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">用于控制序列化行为的选项。</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">可能用于取消写入操作的标记。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="inputType" /> 与 <paramref name="value" /> 不兼容。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> 或 <paramref name="inputType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">
        <paramref name="inputType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A task that represents the asynchronous write operation.">表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.">将泛型类型参数指定的类型的值异步转换为 UTF-8 编码的 JSON 文本并将它写入流。</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">要写入的 UTF-8 流。</param>
      <param name="value" vsli:raw="The value to convert.">要转换的值。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">用于控制序列化行为的选项。</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">可能用于取消写入操作的标记。</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">要序列化的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">
        <typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A task that represents the asynchronous write operation.">表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.">将指定类型的值转换为编码为 UTF-8 字节的 JSON 字符串。</summary>
      <param name="value" vsli:raw="The value to convert.">要转换的值。</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">要转换的 <paramref name="value" /> 的类型。</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">用于控制转换行为的选项。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="inputType" /> 与 <paramref name="value" /> 不兼容。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">
        <paramref name="inputType" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">值的 JSON 字符串表示形式，编码为 UTF-8 字节。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.">将泛型类型参数指定的类型的值转换为编码为 UTF-8 字节的 JSON 字符串。</summary>
      <param name="value" vsli:raw="The value to convert.">要转换的值。</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">用于控制转换行为的选项。</param>
      <typeparam name="TValue" vsli:raw="The type of the value.">值的类型。</typeparam>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">
        <typeparamref name="TValue" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">值的 JSON 字符串表示形式，编码为 UTF-8 字节。</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerDefaults">
      <summary vsli:raw="Specifies scenario-based default serialization options that can be used to construct a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance.">指定 <see cref="T:System.Text.Json.JsonSerializerOptions" /> 使用的默认选项。</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.General">
      <summary vsli:raw="&lt;para&gt;General-purpose option values. These are the same settings that are applied if a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt; member isn't specified.&lt;/para&gt;&lt;para&gt;For information about the default property values that are applied, see JsonSerializerOptions properties.&lt;/para&gt;">指定应使用通用值。 这些设置与未指定 <see cref="T:System.Text.Json.JsonSerializerDefaults" /> 时应用的设置相同。</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.Web">
      <summary vsli:raw="&lt;para&gt;Option values appropriate to Web-based scenarios.&lt;/para&gt;&lt;para&gt;This member implies that:&lt;/para&gt;&lt;para&gt;- Property names are treated as case-insensitive.&lt;/para&gt;&lt;para&gt;- &quot;camelCase&quot; name formatting should be employed.&lt;/para&gt;&lt;para&gt;- Quoted numbers (JSON strings for number properties) are allowed.&lt;/para&gt;">指定应使用更适合于基于 Web 的场景的值。</summary>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary vsli:raw="Provides options to be used with &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt;.">提供与 <see cref="T:System.Text.Json.JsonSerializer" /> 一起使用的选项。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; class.">初始化 <see cref="T:System.Text.Json.JsonSerializerOptions" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance with a predefined set of options determined by the specified &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt;.">使用由指定的 <see cref="T:System.Text.Json.JsonSerializerDefaults" /> 确定的一组预定义选项构造新的 <see cref="T:System.Text.Json.JsonSerializerOptions" /> 实例。</summary>
      <param name="defaults" vsli:raw="The &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt; to reason about.">要考虑原因的 <see cref="T:System.Text.Json.JsonSerializerDefaults" />。</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Copies the options from a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance to a new instance.">将 <see cref="T:System.Text.Json.JsonSerializerOptions" /> 实例的选项复制到新实例。</summary>
      <param name="options" vsli:raw="The options instance to copy options from.">要从中复制选项的选项实例。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary vsli:raw="Returns the converter for the specified type.">返回指定类型的转换器。</summary>
      <param name="typeToConvert" vsli:raw="The type to return a converter for.">要为其返回转换器的类型。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The configured &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;typeToConvert&quot; /&gt; returned an invalid converter.">为 <paramref name="typeToConvert" /> 配置的 <see cref="System.Text.Json.Serialization.JsonConverter" /> 返回了无效的转换器。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;typeToConvert&quot; /&gt; or its serializable members.">
        <paramref name="typeToConvert" /> 或其可序列化成员没有兼容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns vsli:raw="The first converter that supports the given type.">支持给定类型的第一个转换器，如果没有转换器，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary vsli:raw="Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.">获取或设置一个值，该值指示要反序列化的 JSON 有效负载中是否允许（和忽略）对象或数组中 JSON 值的列表末尾多余的逗号。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此属性在序列化或反序列化发生后设置。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" /> 如果允许在对象或数组中的 JSON 值列表末尾使用额外逗号，则 (并忽略) ; <see langword="false" /> 否则为。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary vsli:raw="Gets the list of user-defined converters that were registered.">获取已注册的用户定义的转换器的列表。</summary>
      <returns vsli:raw="The list of custom converters.">自定义转换器的列表。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary vsli:raw="Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.">获取或设置创建临时缓冲区时要使用的默认缓冲区大小（以字节为单位）。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer size is less than 1.">缓冲区大小小于 1。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此属性在序列化或反序列化发生后设置。</exception>
      <returns vsli:raw="The default buffer size in bytes.">默认缓冲区大小（以字节为单位）。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition">
      <summary vsli:raw="Gets or sets a value that determines when properties with default values are ignored during serialization or deserialization.&#xA; The default value is &lt;see cref=&quot;F:System.Text.Json.Serialization.JsonIgnoreCondition.Never&quot; /&gt;.">指定一个条件，用于确定何时在序列化或反序列化过程中忽略具有默认值的属性。
默认值为 <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="This property is set to &lt;see cref=&quot;F:System.Text.Json.Serialization.JsonIgnoreCondition.Always&quot; /&gt;.">此属性设置为 <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues&quot; /&gt; has been set to &lt;see langword=&quot;true&quot; /&gt;. These properties cannot be used together.">此属性在序列化或反序列化后设置。

- 或 -

<see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> 已设置为 <see langword="true" />。 这些属性不能一起使用。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary vsli:raw="Gets or sets the policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format, such as camel-casing.">获取或设置用于将 <see cref="T:System.Collections.IDictionary" /> 密钥名称转换为其他格式（如 camel 大小写）的策略。</summary>
      <returns vsli:raw="The policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format.">用于将 <see cref="T:System.Collections.IDictionary" /> 密钥名称转换为另一种格式的策略。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">获取或设置要在转义字符串时使用的编码器，或为 <see langword="null" />（要使用默认编码器的话）。</summary>
      <returns vsli:raw="The JavaScript character encoding.">JavaScript 字符编码。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary vsli:raw="Gets or sets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; values are ignored during serialization and deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">获取或设置一个值，该值确定序列化和反序列化过程中是否忽略 <see langword="null" /> 值。 默认值为 <see langword="false" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition&quot; /&gt; has been set to a non-default value. These properties cannot be used together.">此属性在序列化或反序列化发生后设置。

- 或 -

<see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" /> 已设置为非默认值。 这些属性不能一起使用。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if null values are ignored during serialization and deserialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 若为，则在序列化和反序列化期间忽略 null 值;否则，请参阅 langword = "false"/ &gt; 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyFields">
      <summary vsli:raw="Gets or sets a value that indicates whether read-only fields are ignored during serialization. A field is read-only if it is marked with the &lt;see langword=&quot;readonly&quot; /&gt; keyword. The default value is &lt;see langword=&quot;false&quot; /&gt;.">确定序列化过程中是否忽略只读字段。 如果属性未用 <see langword="readonly" /> 关键字进行标记，则该属性为只读。 默认值为 <see langword="false" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">此属性在序列化或反序列化后设置。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only fields are ignored during serialization; &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" /> 如果在序列化过程中应忽略只读字段，则为; <see langword="false" /> 否则为。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary vsli:raw="Gets a value that indicates whether read-only properties are ignored during serialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">获取一个值，该值确定序列化过程中是否忽略只读属性。 默认值为 <see langword="false" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此属性在序列化或反序列化发生后设置。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only properties are ignored during serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果在序列化过程中忽略只读属性，则为;否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IncludeFields">
      <summary vsli:raw="Gets or sets a value that indicates whether fields are handled during serialization and deserialization.&#xA;            The default value is &lt;see langword=&quot;false&quot; /&gt;.">确定是否对字段进行序列化和反序列化处理。
默认值为 <see langword="false" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">此属性在序列化或反序列化后设置。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.">获取或设置序列化或反序列化 JSON 时允许的最大深度，默认值 0 表示最大深度为 64。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此属性在序列化或反序列化发生后设置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">最大深度设置为负值。</exception>
      <returns vsli:raw="The maximum depth allowed when serializing or deserializing JSON.">序列化或反序列化 JSON 时允许的最大深度。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.NumberHandling">
      <summary vsli:raw="Gets or sets an object that specifies how number types should be handled when serializing or deserializing.">指定序列化或反序列化时应如何处理数字类型。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">此属性在序列化或反序列化后设置。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary vsli:raw="Gets or sets a value that indicates whether a property's name uses a case-insensitive comparison during deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">获取或设置一个值，该值确定在反序列化过程中属性名称是否使用不区分大小写的比较。 默认值为 <see langword="false" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if property names are compared case-insensitively; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 使用不区分大小写的比较比较属性名称;否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary vsli:raw="Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">获取或设置一个值，该值指定用于将对象的属性名称转换为其他格式（例如 camel 大小写）的策略；若为 <see langword="null" />，则保持属性名称不变。</summary>
      <returns vsli:raw="A property naming policy, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">属性命名策略，或 <see langword="null" /> 保留属性名称不变。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary vsli:raw="Gets or sets a value that defines how comments are handled during deserialization.">获取或设置一个值，该值定义反序列化过程中如何处理注释。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此属性在序列化或反序列化发生后设置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">注释处理枚举设置为不受支持的值（或不在 <see cref="T:System.Text.Json.JsonCommentHandling" /> 枚举范围内）。</exception>
      <returns vsli:raw="A value that indicates whether comments are allowed, disallowed, or skipped.">一个值，该值指示是否允许、不允许或跳过注释。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler">
      <summary vsli:raw="Gets or sets an object that specifies how object references are handled when reading and writing JSON.">配置在读取和写入 JSON 时如何处理对象引用。</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary vsli:raw="Gets or sets a value that indicates whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.">获取或设置一个值，该值定义 JSON 是否应使用整齐打印。 默认情况下，不使用任何额外的空白来序列化 JSON。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此属性在序列化或反序列化发生后设置。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if JSON is pretty printed on serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果 JSON 应该在序列化时进行整齐打印，则为;否则为 <see langword="false" /> 。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary vsli:raw="Defines the various JSON tokens that make up a JSON text.">定义组成 JSON 文本的各种 JSON 令牌。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary vsli:raw="The token type is a comment string.">令牌类型为注释字符串。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary vsli:raw="The token type is the end of a JSON array.">令牌类型是 JSON 数组的结尾。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary vsli:raw="The token type is the end of a JSON object.">令牌类型是 JSON 对象的结尾。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary vsli:raw="The token type is the JSON literal false.">令牌类型是 JSON 文本 false。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;). This is the default token type if no data has been read by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">没有值（不同于 <see cref="F:System.Text.Json.JsonTokenType.Null" />）。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary vsli:raw="The token type is the JSON literal null.">令牌类型是 JSON 文本 null。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary vsli:raw="The token type is a JSON number.">令牌类型是 JSON 数字。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary vsli:raw="The token type is a JSON property name.">令牌类型是 JSON 属性名称。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary vsli:raw="The token type is the start of a JSON array.">令牌类型是 JSON 数组的开头。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary vsli:raw="The token type is the start of a JSON object.">令牌类型是 JSON 对象的开头。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary vsli:raw="The token type is a JSON string.">令牌类型是 JSON 字符串。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary vsli:raw="The token type is the JSON literal true.">令牌类型是 JSON 文本 true。</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary vsli:raw="Specifies the data type of a JSON value.">指定 JSON 值的数据类型。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary vsli:raw="A JSON array.">JSON 数组。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary vsli:raw="The JSON value false.">JSON 值 false。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary vsli:raw="The JSON value null.">JSON 值 null。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary vsli:raw="A JSON number.">JSON 数字。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary vsli:raw="A JSON object.">JSON 对象。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary vsli:raw="A JSON string.">JSON 字符串。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary vsli:raw="The JSON value true.">JSON 值 true。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;).">没有值（不同于 <see cref="F:System.Text.Json.JsonValueKind.Null" />）。</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary vsli:raw="Allows the user to define custom behavior when writing JSON using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;.">允许用户在使用 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 编写 JSON 时定义自定义行为。</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">获取或设置要在转义字符串时使用的编码器，或为 <see langword="null" />（要使用默认编码器的话）。</summary>
      <returns vsli:raw="The JavaScript character encoder used to override the escaping behavior.">用于重写转义行为的 JavaScript 字符编码器。</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.">获取或设置一个值，该值指示 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否应对 JSON 输入进行格式设置，包括缩进嵌套的 JSON 令牌、添加新行以及在属性名称和值之间添加空格。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON output is formatted; &lt;see langword=&quot;false&quot; /&gt; if the JSON is written without any extra white space. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 设置 JSON 输出的格式; <see langword="false" /> 写入而不包含任何额外的空格。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should skip structural validation and allow the user to write invalid JSON.">获取或设置一个值，该值指示 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否应跳过结构验证并允许用户编写无效 JSON。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if structural validation is skipped and invalid JSON is allowed; &lt;see langword=&quot;false&quot; /&gt; if an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown on any attempt to write invalid JSON.">
        <see langword="true" /> 若要跳过结构验证并允许无效的 JSON，则为;如果 <see langword="false" /><see cref="T:System.InvalidOperationException" /> 尝试编写无效的 JSON，则引发。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary vsli:raw="Provides the base class for serialization attributes.">提供序列化属性的基类。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonAttribute&quot; /&gt;.">创建 <see cref="T:System.Text.Json.Serialization.JsonAttribute" /> 的新实例。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConstructorAttribute">
      <summary vsli:raw="When placed on a constructor, indicates that the constructor should be used to create instances of the type on deserialization.">当放置在构造函数上时，指示应使用构造函数在反序列化时创建类型的实例。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConstructorAttribute&quot; /&gt;.">初始化 <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute" /> 的新实例。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary vsli:raw="Converts an object or value to or from JSON.">将对象或值转换为 JSON，或是从 JSON 转换为对象或值。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary vsli:raw="When overridden in a derived class, determines whether the converter instance can convert the specified object type.">在派生类中重写时，确定转换器实例是否可以转换指定的对象类型。</summary>
      <param name="typeToConvert" vsli:raw="The type of the object to check whether it can be converted by this converter instance.">要检查此转换器实例是否可以对其进行转换的对象类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance can convert the specified object type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该实例可以转换指定的对象类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary vsli:raw="Converts an object or value to or from JSON.">将对象或值转换为 JSON，或是从 JSON 转换为对象或值。</summary>
      <typeparam name="T" vsli:raw="The type of object or value handled by the converter.">转换器处理的对象或值的类型。</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter`1&quot; /&gt; instance.">初始化一个新 <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> 实例。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted.">确定是否可以转换指定类型。</summary>
      <param name="typeToConvert" vsli:raw="The type to compare against.">要针对其进行比较的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以转换类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads and converts the JSON to type &lt;typeparamref name=&quot;T&quot; /&gt;.">读取 JSON 并转换为类型 <typeparamref name="T" />。</summary>
      <param name="reader" vsli:raw="The reader.">读取器。</param>
      <param name="typeToConvert" vsli:raw="The type to convert.">要转换的类型。</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">一个对象，指定要使用的序列化选项。</param>
      <returns vsli:raw="The converted value.">转换后的值。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes a specified value as JSON.">将指定值作为 JSON 写入。</summary>
      <param name="writer" vsli:raw="The writer to write to.">要写入到的编写器。</param>
      <param name="value" vsli:raw="The value to convert to JSON.">要转换为 JSON 的值。</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">一个对象，指定要使用的序列化选项。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull">
      <summary vsli:raw="Gets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; should be passed to the converter on serialization, and whether &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt; should be passed on deserialization.">指示是否应在序列化时将 <see langword="null" /> 传递到转换器，以及是否应在反序列化时传递 <see cref="F:System.Text.Json.JsonTokenType.Null" />。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary vsli:raw="When placed on a property or type, specifies the converter type to use.">当放置在某一属性或类型上时，指定要使用的转换器类型。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;.">初始化 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> 的新实例。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt; with the specified converter type.">使用指定的转换器类型初始化 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> 的新实例。</summary>
      <param name="converterType" vsli:raw="The type of the converter.">转换器的类型。</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary vsli:raw="When overridden in a derived class and &lt;see cref=&quot;P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, allows the derived class to create a &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter&quot; /&gt; in order to pass additional state.">在派生类中重写且 <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> 为 <see langword="null" /> 时，允许派生类创建 <see cref="T:System.Text.Json.Serialization.JsonConverter" /> 以传递附加状态。</summary>
      <param name="typeToConvert" vsli:raw="The type of the converter.">转换器的类型。</param>
      <returns vsli:raw="The custom converter.">自定义转换器。</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">获取 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> 的类型；如果它是在没有类型的情况下创建的，则为 <see langword="null" />。</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">的类型 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> ; 或者， <see langword="null" /> 如果它是在没有类型的情况下创建的，则为。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary vsli:raw="Supports converting several types by using a factory pattern.">支持使用工厂模式转换多种类型。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary vsli:raw="When overridden in a derived class, initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterFactory&quot; /&gt; class.">在派生类中重写时，初始化 <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for a specified type.">创建指定类型的转换器。</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">转换器处理的类型。</param>
      <param name="options" vsli:raw="The serialization options to use.">要使用的序列化选项。</param>
      <returns vsli:raw="A converter for which &lt;typeparamref name=&quot;T&quot; /&gt; is compatible with &lt;paramref name=&quot;typeToConvert&quot; /&gt;.">
        <typeparamref name="T" /> 与 <paramref name="typeToConvert" /> 兼容的转换器。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary vsli:raw="When placed on a property of type &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.">当属性的类型为 <see cref="T:System.Collections.Generic.IDictionary`2" /> 时，没有匹配成员的任何属性都会在反序列化期间添加到该字典中，并在序列化期间中写入。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonExtensionDataAttribute&quot; /&gt; class.">实例化 <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary vsli:raw="Prevents a property from being serialized or deserialized.">阻止对属性进行序列化或反序列化。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt;.">初始化 <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> 的新实例。</summary>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition">
      <summary vsli:raw="Gets or sets the condition that must be met before a property will be ignored.">指定将忽略属性之前必须满足的条件。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreCondition">
      <summary vsli:raw="Controls how the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt; ignores properties on serialization and deserialization.">控制 <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> 如何忽略序列化和反序列化时的属性。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always">
      <summary vsli:raw="Property is always ignored.">属性将始终被忽略。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never">
      <summary vsli:raw="Property is always serialized and deserialized, regardless of &lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues&quot; /&gt; configuration.">不管 <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> 配置如何，都将始终序列化和反序列化属性。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault">
      <summary vsli:raw="Property is ignored only if it equals the default value for its type.">仅当为 <see langword="null" /> 时才会忽略属性。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull">
      <summary vsli:raw="Property is ignored if its value is &lt;see langword=&quot;null&quot; /&gt;. This is applied only to reference-type properties and fields.">如果值为 <see langword="null" />，则在序列化过程中将忽略该属性。 这仅适用于引用类型属性和字段。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIncludeAttribute">
      <summary vsli:raw="Indicates that the member should be included for serialization and deserialization.">指示应包含成员以进行序列化和反序列化。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The attribute is applied to a non-public property.">特性应用于非公共属性。</exception>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIncludeAttribute&quot; /&gt;.">初始化 <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute" /> 的新实例。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandling">
      <summary vsli:raw="Determines how &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; handles numbers when serializing and deserializing.">确定在序列化和反序列化时 <see cref="T:System.Text.Json.JsonSerializer" /> 如何处理数字。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals">
      <summary vsli:raw="The &quot;NaN&quot;, &quot;Infinity&quot;, and &quot;-Infinity&quot; &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; tokens can be read as floating-point constants, and the &lt;see cref=&quot;T:System.Single&quot; /&gt; and &lt;see cref=&quot;T:System.Double&quot; /&gt; values for these constants will be written as their corresponding JSON string representations.">“NaN”、“Infinity”和“-Infinity”<see cref="F:System.Text.Json.JsonTokenType.String" /> 标记可以读为浮点常量，并且这些常量的 <see cref="T:System.Single" /> 和 <see cref="T:System.Double" /> 值将写为其相应的 JSON 字符串表示形式。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString">
      <summary vsli:raw="Numbers can be read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; tokens. Does not prevent numbers from being read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt; token.">可以从 <see cref="F:System.Text.Json.JsonTokenType.String" /> 标记中读取数字。 不会阻止从 <see cref="F:System.Text.Json.JsonTokenType.Number" /> 标记中读取数字。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.Strict">
      <summary vsli:raw="Numbers will only be read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt; tokens and will only be written as JSON numbers (without quotes).">数字仅将从 <see cref="F:System.Text.Json.JsonTokenType.Number" /> 标记中读取，并且仅写为 JSON 数字（不带引号）。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString">
      <summary vsli:raw="Numbers will be written as JSON strings (with quotes), not as JSON numbers.">数字将写为 JSON 字符串（带有引号），而不是 JSON 数字。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute">
      <summary vsli:raw="When placed on a type, property, or field, indicates what &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonNumberHandling&quot; /&gt; settings should be used when serializing or deserializing numbers.">当放置在类型、属性或字段上时，指示在序列化或反序列化数字时应使用的 <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> 设置。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonNumberHandlingAttribute&quot; /&gt;.">初始化 <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute" /> 的新实例。</summary>
      <param name="handling" vsli:raw="A bitwise combination of the enumeration values that specify how number types should be handled when serializing or deserializing.">枚举值的按位组合，用于指定序列化或反序列化时应如何处理数字类型。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonNumberHandlingAttribute.Handling">
      <summary vsli:raw="Indicates what settings should be used when serializing or deserializing numbers.">指示序列化或反序列化数字时应使用的设置。</summary>
      <returns vsli:raw="An object that determines the number serialization and deserialization settings.">一个对象，该对象确定数字序列化和反序列化设置。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary vsli:raw="Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">指定序列化和反序列化时 JSON 中存在的属性名称。 这将重写 <see cref="T:System.Text.Json.JsonNamingPolicy" /> 指定的任何命名策略。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonPropertyNameAttribute&quot; /&gt; with the specified property name.">使用指定的属性名称初始化 <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> 的新实例。</summary>
      <param name="name" vsli:raw="The name of the property.">属性的名称。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the name of the property.">获取属性的名称。</summary>
      <returns vsli:raw="The name of the property.">属性的名称。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary vsli:raw="Converts enumeration values to and from strings.">将枚举值转换为字符串以及从字符串转换为枚举值。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with the default naming policy that allows integer values.">使用允许整数值的默认命名策略初始化 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 类的实例。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.">使用指定命名策略以及指示是否允许未定义枚举值的值初始化 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 类的实例。</summary>
      <param name="namingPolicy" vsli:raw="The optional naming policy for writing enum values.">用于写入枚举值的可选命名策略。</param>
      <param name="allowIntegerValues" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow undefined enum values; otherwise, &lt;see langword=&quot;false&quot; /&gt;. When &lt;see langword=&quot;true&quot; /&gt;, if an enum value isn't defined, it will output as a number rather than a string.">
        <see langword="true" /> 表示允许未定义的枚举值；否则为 <see langword="false" />。 为 <see langword="true" /> 时，如果未定义枚举值，则它将输出为数字而不是字符串。</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted to an enum.">确定是否可将指定类型转换为枚举。</summary>
      <param name="typeToConvert" vsli:raw="The type to be checked.">要检查的类型。</param>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the type can be converted; otherwise, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt;.">如果可以转换类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for the specified type.">创建指定类型的转换器。</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">转换器处理的类型。</param>
      <param name="options" vsli:raw="The serialization options to use.">要使用的序列化选项。</param>
      <returns vsli:raw="A converter for which &lt;code data-dev-comment-type=&quot;typeparamref&quot;&gt;T&lt;/code&gt; is compatible with &lt;code data-dev-comment-type=&quot;paramref&quot;&gt;typeToConvert&lt;/code&gt;.">
        <typeparamref name="T" /> 与 <paramref name="typeToConvert" /> 兼容的转换器。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.">此类定义 <see cref="T:System.Text.Json.JsonSerializer" /> 如何处理对序列化和反序列化的引用。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceHandler&quot; /&gt; class.">初始化 <see cref="T:System.Text.Json.Serialization.ReferenceHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; used for each serialization call.">返回用于每个序列化调用的 <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />。</summary>
      <returns vsli:raw="The resolver to use for serialization and deserialization.">用于序列化和反序列化的解析器。</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.ReferenceHandler.Preserve">
      <summary vsli:raw="Gets an object that indicates whether metadata properties are honored when JSON objects and arrays are deserialized into reference types, and written when reference types are serialized. This is necessary to create round-trippable JSON from objects that contain cycles or duplicate references.">将 JSON 对象和数组反序列化为引用类型时，元数据属性将有效，并在序列化引用类型时写入。 这对于从包含循环或重复引用的对象创建往返 JSON 是必需的。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler`1">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.">此类定义 <see cref="T:System.Text.Json.JsonSerializer" /> 如何处理对序列化和反序列化的引用。</summary>
      <typeparam name="T" vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; to create on each serialization or deserialization call.">
        <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />要对每个序列化或反序列化调用创建的的类型。</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceHandler`1&quot; /&gt; generic class that can create a &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; instance of the specified type.">初始化可创建指定的 <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> 实例的 <see cref="T:System.Text.Json.Serialization.ReferenceHandler`1" /> 泛型类的新实例 <typeparam name="T" />。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; of type &lt;typeparamref name=&quot;T&quot; /&gt; used for each serialization call.">创建用于每个序列化调用的新的 <typeparamref name="T" /> 类型的 <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />。</summary>
      <returns vsli:raw="The new resolver to use for serialization and deserialization.">用于序列化和反序列化的新解析器。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceResolver">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.&#xA; Defines the core behavior of preserving references on serialization and deserialization.">此类定义 <see cref="T:System.Text.Json.JsonSerializer" /> 如何处理对序列化和反序列化的引用。
定义在序列化和反序列化过程中保留引用的核心行为。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; class.">初始化 <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)">
      <summary vsli:raw="Adds an entry to the bag of references using the specified id and value.&#xA; This method gets called when an $id metadata property from a JSON object is read.">使用指定的 ID 和值向引用包中添加一个项。
从 JSON 对象中读取 $id 元数据属性时，将调用此方法。</summary>
      <param name="referenceId" vsli:raw="The identifier of the JSON object or array.">JSON 对象或数组的标识符。</param>
      <param name="value" vsli:raw="The value of the CLR reference type object that results from parsing the JSON object.">通过分析 JSON 对象生成的 CLR 引用类型对象的值。</param>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)">
      <summary vsli:raw="Gets the reference identifier of the specified value if exists; otherwise a new id is assigned.&#xA; This method gets called before a CLR object is written so we can decide whether to write $id and enumerate the rest of its properties or $ref and step into the next object.">获取指定值的引用标识符（如果存在）；否则，将分配一个新 ID。
在编写 CLR 对象之前调用此方法，便于我们决定是写入 $id 并枚举其属性的其余部分，还是写入 $ref 并单步执行下一个对象。</summary>
      <param name="value" vsli:raw="The value of the CLR reference type object to get an id for.">要获取其 ID 的 CLR 引用类型对象的值。</param>
      <param name="alreadyExists" vsli:raw="When this method returns, &lt;see langword=&quot;true&quot; /&gt; if a reference to value already exists; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">此方法返回时，如果对值的引用已存在，则为 <see langword="true" />，否则为 <see langword="false" />。</param>
      <returns vsli:raw="The reference id for the specified object.">指定对象的引用 ID。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)">
      <summary vsli:raw="Returns the CLR reference type object related to the specified reference id.&#xA; This method gets called when $ref metadata property is read.">返回与指定的引用 ID 相关的 CLR 引用类型对象。当读取 $ref 元数据属性时，将调用此方法。</summary>
      <param name="referenceId" vsli:raw="The reference id related to the returned object.">与返回的对象相关的引用 ID。</param>
      <returns vsli:raw="The reference type object related to the specified reference id.">与指定的引用 ID 相关的引用类型对象。</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary vsli:raw="Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.">提供高性能的 API，以便提供对 UTF-8 编码 JSON 文本的只进和只读访问权限。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.">初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 结构的新实例，该实例用于处理 UTF-8 编码文本的只读序列，并指示输入是否包含要处理的所有文本。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">要处理的 UTF-8 编码 JSON 文本。</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" /> 用于表示输入序列包含要处理的全部数据；<see langword="false" /> 用于表示输入范围包含部分数据，随后还有更多数据。</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">包含读取器状态的对象。 如果这是构造函数的第一次调用，则传递默认状态；否则，请从 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的上一个实例中传递 <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> 属性的值。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text using the specified options.">初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 结构的新实例，该实例使用指定选项处理 UTF-8 编码文本的只读序列。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">要处理的 UTF-8 编码 JSON 文本。</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">定义 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的自定义行为，它不同于 JSON RFC（例如，处理注释的方式，或读取时允许的最大深度）。 默认情况下，<see cref="T:System.Text.Json.Utf8JsonReader" /> 严格遵循 JSON RFC（JSON 中的注释无效）且最大深度为 64。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.">初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 结构的新实例，该实例用于处理 UTF-8 编码文本的只读范围，并指示输入是否包含要处理的所有文本。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">要处理的 UTF-8 编码 JSON 文本。</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" /> 用于表示输入序列包含要处理的全部数据；<see langword="false" /> 用于表示输入范围包含部分数据，随后还有更多数据。</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">包含读取器状态的对象。 如果这是构造函数的第一次调用，则传递默认状态；否则，请从 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的上一个实例中传递 <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> 属性的值。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text using the specified options.">初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 结构的新实例，该实例使用指定选项处理 UTF-8 编码文本的只读范围。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">要处理的 UTF-8 编码 JSON 文本。</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">定义 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的自定义行为，它不同于 JSON RFC（例如，处理注释的方式，或读取时允许的最大深度）。 默认情况下，<see cref="T:System.Text.Json.Utf8JsonReader" /> 严格遵循 JSON RFC（JSON 中的注释无效）且最大深度为 64。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary vsli:raw="Reads the next JSON token value from the source as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">从源中将下一个 JSON 令牌值读取为 <see cref="T:System.Boolean" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a Boolean value (that is, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;).">JSON 令牌的值不是布尔值（即 <see cref="F:System.Text.Json.JsonTokenType.True" /> 或 <see cref="F:System.Text.Json.JsonTokenType.False" />）。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;.">如果 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> 为 <see cref="F:System.Text.Json.JsonTokenType.True" />，则为 <see langword="true" />；如果 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> 为 <see cref="F:System.Text.Json.JsonTokenType.False" />，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">将源中的当前 JSON 令牌值分析为 <see cref="T:System.Byte" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">JSON 令牌值的数字格式不正确（例如，它包含小数值或使用科学记数法编写）。
          
- 或 -

JSON 令牌值表示小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
      <returns vsli:raw="The value of the UTF-8 encoded token.">UTF-8 编码令牌的值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary vsli:raw="Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.">分析源中的当前 JSON 令牌值并将 Base64 编码的 JSON 字符串解码为字节数组。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 令牌的类型不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text, so it can't be decoded to bytes.&#xA;&#xA;-or-&#xA;&#xA;The value contains invalid or more than two padding characters.&#xA;&#xA;-or-&#xA;&#xA;The value is incomplete. That is, the JSON string length is not a multiple of 4.">值未编码为 base 64 文本，因此无法解码为字节。

- 或 -

值包含无效或两个以上的填充字符。

- 或 -

值未完成。 也就是说，JSON 字符串长度不是 4 的倍数。</exception>
      <returns vsli:raw="The byte array that represents the current JSON token value.">表示当前 JSON 令牌值的字节数组。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary vsli:raw="Parses the current JSON token value from the source as a comment and transcodes it as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将源中的当前 JSON 令牌值分析为注释，将其转码为 <see cref="T:System.String" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a comment.">JSON 令牌不是注释。</exception>
      <returns vsli:raw="The comment that represents the current JSON token value.">表示当前 JSON 令牌值的注释。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">从源中读取下一个 JSON 令牌值，并将该值解析为 <see cref="T:System.DateTime" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 令牌的值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&#xA;        &#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">JSON 令牌值不可作为 <see cref="T:System.DateTime" /> 读取。
        
- 或 - 
无法将整个 UTF-8 编码令牌值解析为 <see cref="T:System.DateTime" /> 值。

- 或 -

JSON 令牌值的格式不受支持。</exception>
      <returns vsli:raw="The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.">如果可成功解析整个 UTF-8 编码的令牌值，则为日期和时间值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">从源中读取下一个 JSON 令牌值，并将该值解析为 <see cref="T:System.DateTimeOffset" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 令牌的值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.&#xA;&#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">JSON 令牌值不可作为 <see cref="T:System.DateTimeOffset" /> 读取。

- 或 - 
无法将整个 UTF-8 编码令牌值解析为 <see cref="T:System.DateTimeOffset" /> 值。

- 或 -

JSON 令牌值的格式不受支持。</exception>
      <returns vsli:raw="The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.">如果可成功解析整个 UTF-8 编码的令牌值，则为日期和时间偏移。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">从源中读取下一个 JSON 令牌值，并将该值解析为 <see cref="T:System.Decimal" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">JSON 令牌值表示小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">解析为 <see cref="T:System.Decimal" /> 的 UTF-8 编码令牌值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">从源中读取下一个 JSON 令牌值，并将该值解析为 <see cref="T:System.Double" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">JSON 令牌值表示小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">解析为 <see cref="T:System.Double" /> 的 UTF-8 编码令牌值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">从源中读取下一个 JSON 令牌值，并将该值解析为 <see cref="T:System.Guid" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 令牌的值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is in an unsupported format for a Guid.&#xA;        &#xA;-or-&#xA;&#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">Guid 不支持 JSON 令牌值的格式。
        
- 或 -

无法将整个 UTF-8 编码令牌值解析为 <see cref="T:System.Guid" /> 值。</exception>
      <returns vsli:raw="The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.">如果可成功解析整个 UTF-8 编码的令牌值，则为 GUID 值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">将源中的当前 JSON 令牌值分析为 <see cref="T:System.Int16" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">JSON 令牌值的数字格式不正确（例如，它包含小数值或使用科学记数法编写）。
          
- 或 -

JSON 令牌值表示小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">解析为 <see cref="T:System.Int16" /> 的 UTF-8 编码令牌值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">从源中读取下一个 JSON 令牌值，并将该值解析为 <see cref="T:System.Int32" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">JSON 令牌值的数值格式不正确。 例如，它包含小数或采用科学记数法编写。
            
- 或 -

JSON 令牌值表示小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">解析为 <see cref="T:System.Int32" /> 的 UTF-8 编码令牌值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">从源中读取下一个 JSON 令牌值，并将该值解析为 <see cref="T:System.Int64" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">JSON 令牌值的数值格式不正确。 例如，它包含小数或采用科学记数法编写。
            
- 或 -

JSON 令牌值表示小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">解析为 <see cref="T:System.Int64" /> 的 UTF-8 编码令牌值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary vsli:raw="Parses the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">将源中的当前 JSON 令牌值分析为 <see cref="T:System.SByte" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">JSON 令牌值的数字格式不正确（例如，它包含小数值或使用科学记数法编写）。
          
- 或 -

JSON 令牌值表示小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">解析为 <see cref="T:System.SByte" /> 的 UTF-8 编码令牌值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">从源中读取下一个 JSON 令牌值，并将该值解析为 <see cref="T:System.Single" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">JSON 令牌值表示小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">解析为 <see cref="T:System.Single" /> 的 UTF-8 编码令牌值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary vsli:raw="Reads the next JSON token value from the source unescaped and transcodes it as a string.">从源中读取下一个 JSON 令牌值，并作为字符串进行反转义和转码。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a string (that is, not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;, or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.">JSON 令牌值不是字符串（即不是 <see cref="F:System.Text.Json.JsonTokenType.String" /><see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> 或 <see cref="F:System.Text.Json.JsonTokenType.Null" />）。

- 或 -

JSON 字符串包含无效的 UTF-8 字节或无效的 UTF-16 替代项。</exception>
      <returns vsli:raw="The token value parsed to a string, or &lt;see langword=&quot;null&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;.">令牌值分析为字符串，如果 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> 为 <see cref="F:System.Text.Json.JsonTokenType.Null" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">将源中的当前 JSON 令牌值分析为 <see cref="T:System.UInt16" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">JSON 令牌值的数字格式不正确（例如，它包含小数值或使用科学记数法编写）。
          
- 或 -

JSON 令牌值表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">解析为 <see cref="T:System.UInt16" /> 的 UTF-8 编码令牌值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">从源中读取下一个 JSON 令牌值，并将该值解析为 <see cref="T:System.UInt32" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">JSON 令牌值的数值格式不正确。 例如，它包含小数或采用科学记数法编写。

- 或 -

JSON 令牌值表示小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">解析为 <see cref="T:System.UInt32" /> 的 UTF-8 编码令牌值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">从源中读取下一个 JSON 令牌值，并将该值解析为 <see cref="T:System.UInt64" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">JSON 令牌值的数值格式不正确。 例如，它包含小数或采用科学记数法编写。
            
- 或 -

JSON 令牌值表示小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">解析为 <see cref="T:System.UInt64" /> 的 UTF-8 编码令牌值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary vsli:raw="Reads the next JSON token from the input source.">从输入源中读取下一个 JSON 令牌。</summary>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token according to the JSON RFC is encountered.&#xA;        &#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">根据 JSON RFC，遇到无效的 JSON 令牌。
        
- 或 -

当前深度超过由最大深度决定的递归限值。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the token was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功读取下一令牌，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary vsli:raw="Skips the children of the current JSON token.">跳过当前 JSON 令牌的子级。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader was given partial data with more data to follow (that is, &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.IsFinalBlock&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).">已向读取器提供了部分数据，随后会提供更多数据（即 <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> 为 <see langword="false" />）。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;&#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">根据 JSON RFC，跳过时出现无效 JSON 令牌。

- 或 -

当前深度超过由最大深度决定的递归限值。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.Byte" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.Byte" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.">尝试分析源中的当前 JSON 令牌值，将 Base64 编码 JSON 字符串解码为字节数组，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the decoded binary representation of the Base64 text.">如果该方法返回，则包含 base 64 文本的已解码二进制表示形式。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 令牌不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整个标记值编码为有效 base 64 文本并且可以成功解码为字节，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.DateTime" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 令牌的值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.DateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.DateTimeOffset" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 令牌的值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.DateTimeOffset" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.Decimal" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.Decimal" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Double&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.Double" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.Double" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Guid&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.Guid" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 令牌的值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.Guid" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.Int16" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.Int16" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.Int32" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.Int32" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.Int64" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.Int64" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.SByte" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.SByte" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Single&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.Single" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Single&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.Single" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.UInt16" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.UInt16" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.UInt32" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.UInt32" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">尝试将源中的当前 JSON 令牌值分析为 <see cref="T:System.UInt64" />，并返回一个指示操作是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">在此方法返回时，包含已解析的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 令牌值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将整个 UTF-8 编码令牌值成功解析为 <see cref="T:System.UInt64" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary vsli:raw="Tries to skip the children of the current JSON token.">尝试跳过当前 JSON 令牌的子级。</summary>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;          &#xA;-or -&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">根据 JSON RFC，跳过时出现无效 JSON 令牌。
          
- 或 -

当前深度超过由最大深度决定的递归限值。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there was enough data for the children to be skipped successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功跳过子项的足够数据，则为 <see langword="true" />否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">比较只读字节范围中 UTF-8 编码文本与源中未转义的 JSON 令牌值，返回指示其是否匹配的值。</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">要进行比较的 UTF-8 编码文本。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">JSON 令牌不是 JSON 字符串（即不是 <see cref="F:System.Text.Json.JsonTokenType.String" /> 或 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />）。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果源中的 JSON 令牌值与 UTF-8 编码查找文本匹配，则 <see langword="true" />；否则 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">比较只读字符范围中文本与源中未转义的 JSON 令牌值，返回指示其是否匹配的值。</summary>
      <param name="text" vsli:raw="The text to compare against.">要针对其进行比较的文本。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">JSON 令牌不是 JSON 字符串（即不是 <see cref="F:System.Text.Json.JsonTokenType.String" /> 或 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />）。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果源中的 JSON 令牌值与查找文本匹配，则 <see langword="true" />；否则 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary vsli:raw="Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.">比较字符串文本与源中未转义的 JSON 令牌值，返回指示其是否匹配的值。</summary>
      <param name="text" vsli:raw="The text to compare against.">要针对其进行比较的文本。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">JSON 令牌不是 JSON 字符串（即不是 <see cref="F:System.Text.Json.JsonTokenType.String" /> 或 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />）。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果源中的 JSON 令牌值与查找文本匹配，则 <see langword="true" />；否则 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary vsli:raw="Gets the total number of bytes consumed so far by this instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">获取 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的此实例到目前为止使用的总字节数。</summary>
      <returns vsli:raw="The total number of bytes consumed so far.">迄今为止使用的总字节数。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">获取当前标记的深度。</summary>
      <returns vsli:raw="The depth of the current token.">当前标记的深度。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; state to pass to a &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; constructor with more data.">获取当前 <see cref="T:System.Text.Json.Utf8JsonReader" /> 状态，将更多数据传递到 <see cref="T:System.Text.Json.Utf8JsonReader" /> 构造函数。</summary>
      <returns vsli:raw="The current reader state.">当前读取器状态。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary vsli:raw="Gets a value that indicates which &lt;c&gt;Value&lt;/c&gt; property to use to get the token value.">获取值，该值指示要使用哪个 <c>Value</c> 属性来获取令牌值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSequence&quot; /&gt; should be used to get the token value; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSpan&quot; /&gt; should be used instead.">
        <see langword="true" /> 如果 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> 应使用获取令牌值，则为; <see langword="false" /> 如果 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> 应使用，则为。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary vsli:raw="Gets a value that indicates whether all the JSON data was provided or there is more data to come.">获取 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的此实例的模式，它指示是已提供了所有 JSON 数据，还是随后会提供更多的数据。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader was constructed with the input span or sequence containing the entire JSON data to process; &lt;see langword=&quot;false&quot; /&gt; if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.">
        <see langword="true" /> 如果读取器是用输入跨距构造的，或者是包含要处理的整个 JSON 数据的序列，则为; <see langword="false" /> 如果读取器是使用输入范围或序列构造的，则该输入范围或序列可能包含部分 JSON 数据，并具有更多数据。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">如果 <see cref="T:System.Text.Json.Utf8JsonReader" /> 结构使用 ReadOnlySpan&lt;byte&gt; 构造，则获取所提供的 UTF-8 编码输入 ReadOnlySequence&lt;byte&gt; 内的当前 <see cref="T:System.SequencePosition" /> 或默认的 <see cref="T:System.SequencePosition" />。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">在 <see cref="T:System.SequencePosition" /> 提供的 utf-8 编码输入 ReadOnlySequence 字节内的当前 &lt; 值，或者， &gt; <see cref="T:System.SequencePosition" /> 如果 <see cref="T:System.Text.Json.Utf8JsonReader" /> 结构是使用 ReadOnlySpan 字节构造 &lt; &gt; 的，则为默认值。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary vsli:raw="Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.">获取上次处理的 JSON 令牌开始处的索引（在给定的 UTF-8 编码输入文本中），跳过所有空白。</summary>
      <returns vsli:raw="The starting index of the last processed JSON token within the given UTF-8 encoded input text.">给定 UTF-8 编码输入文本中最后处理的 JSON 标记的起始索引。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary vsli:raw="Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.">获取 UTF-8 编码 JSON 文本中最后一个处理的 JSON 令牌的类型。</summary>
      <returns vsli:raw="The type of the last processed JSON token.">上次处理的 JSON 令牌的类型。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySequence&amp;lt;byte&amp;gt; slice of the input payload, only if the token is contained within multiple segments.">仅当令牌包含在多个段内时，获取上次处理的令牌的原始值作为输入有效负载的 ReadOnlySequence&lt;byte&gt; 切片。</summary>
      <returns vsli:raw="A byte read-only sequence.">一个字节的只读序列。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySpan&amp;lt;byte&amp;gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&amp;lt;byte&amp;gt;.">如果令牌适合单个段，或者如果读取器是使用 ReadOnlySpan&lt;byte&gt; 中包含的 JSON 有效负载构造的，则获取上次处理的令牌的原始值作为输入有效负载的 ReadOnlySpan&lt;byte&gt; 切片。</summary>
      <returns vsli:raw="A read-only span of bytes.">字节的只读范围。</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary vsli:raw="Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.">提供高性能的 API，以便提供 UTF-8 编码 JSON 文本的只进和非缓存编写权限。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; to write the output to and customization options.">使用要写入输出的指定 <see cref="T:System.Buffers.IBufferWriter`1" /> 和自定义选项初始化 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 类的新实例。</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">用于编写 JSON 文本的目标。</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">定义 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自定义行为。 默认情况下，它会编写最小化的 JSON（不含额外空格）并根据 JSON RFC 验证正在编写的 JSON 在结构上是否有效。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified stream to write the output to and customization options.">使用要写入输出的指定流和自定义选项初始化 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 类的新实例。</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">用于编写 JSON 文本的目标。</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">定义 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自定义行为。 默认情况下，它会编写最小化的 JSON（不含额外空格）并根据 JSON RFC 验证正在编写的 JSON 在结构上是否有效。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary vsli:raw="Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">提交尚未刷新的所有剩余 JSON 文本，并释放当前实例使用的所有资源。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary vsli:raw="Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">异步提交尚未刷新的所有剩余 JSON 文本，并释放当前实例使用的所有资源。</summary>
      <returns vsli:raw="A task representing the asynchronous dispose operation.">表示异步释放操作的任务。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary vsli:raw="Commits the JSON text written so far, which makes it visible to the output destination.">提交目前为止编写的 JSON 文本，使其对输出目标可见。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">已释放此实例。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously commits the JSON text written so far, which makes it visible to the output destination.">异步提交目前为止编写的 JSON 文本，使其对输出目标可见。</summary>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests. The default value is &lt;see cref=&quot;P:System.Threading.CancellationToken.None&quot; /&gt;.">要监视取消请求的标记。 默认值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">已释放此实例。</exception>
      <returns vsli:raw="A task representing the asynchronous flush operation.">表示异步刷新操作的任务。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused.">重置此实例的内部状态，以便可以重复使用它。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">已释放此实例。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">重置此实例的内部状态，以便可以结合 <see cref="T:System.Buffers.IBufferWriter`1" /> 的新实例重复使用它。</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">用于编写 JSON 文本的目标。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">已释放此实例。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">重置此实例的内部状态，以便可以结合 <see cref="T:System.IO.Stream" /> 的新实例重复使用它。</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">用于编写 JSON 文本的目标。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">已释放此实例。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">将属性名称和原始字节值（作为 Base 64 编码的 JSON 字符串）写入 JSON 对象的名称/值对。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded name of the property to write.">要写入的属性的 UTF-8 编码名称。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">要编写为 Base64 编码文本的二进制数据。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">将属性名称和原始字节值（作为 Base 64 编码的 JSON 字符串）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">要编写为 Base64 编码文本的二进制数据。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">将属性名称和原始字节值（作为 Base 64 编码的 JSON 字符串）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">要编写为 Base64 编码文本的二进制数据。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">将预编码属性名称和原始字节值（作为 Base64 编码的 JSON 字符串）编写为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON-encoded name of the property to write.">要写入的属性的 JSON 编码名称。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">要编写为 Base64 编码文本的二进制数据。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.">将原始字节值以 Base64 编码的 JSON 字符串形式编写为 JSON 数组的元素。</summary>
      <param name="bytes" vsli:raw="The binary data to be written as a Base64 encoded JSON string element of a JSON array.">要编写为某个 JSON 数组的 Base 64 编码的 JSON 字符串元素的二进制数据。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">写入指定为一个字节的只读范围的属性名，并将 <see cref="T:System.Boolean" /> 值 (为 json 文本 true 或 false) 作为 json 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">要作为 JSON 文本 true 或 false 写入名称/值对的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">写入指定为只读字符跨度的属性名称，并将 <see cref="T:System.Boolean" /> (为 json 文本 true 或 FALSE 的值作为 json 对象的名称/值对的一部分) 。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">要作为 JSON 文本 true 或 false 写入名称/值对的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">写入指定为字符串的属性名称，并将 <see cref="T:System.Boolean" /> (为 json 文本 true 或 false 的值作为 json 对象的名称/值对的一部分) 。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">要作为 JSON 文本 true 或 false 写入名称/值对的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">将预编码属性名称和一个 <see cref="T:System.Boolean" /> 值（作为 JSON 文本 true 或 false）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">要作为 JSON 文本 true 或 false 写入名称/值对的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as an element of a JSON array.">作为 json <see cref="T:System.Boolean" /> 数组的元素，写入作为 json 文本 true 或 false (的值) 。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as an element of a JSON array.">要以 JSON 文本 true 或 false 的形式写入 JSON 数组元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value as a JSON comment.">将 UTF-8 文本值编写为 JSON 注释。</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">要作为 JSON 注释写入<c> / *..* / 到中的</c>utf-8 编码值</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">指定的值太大。
        
- 或 -

<paramref name="utf8Value" /> 包含注释分隔符 (， <c>*/</c>) 。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value as a JSON comment.">将 UTF-16 文本值编写为 JSON 注释。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">要以 UTF-8 转码 JSON 注释形式写入<c> / *..* / 到其中的</c>utf-16 编码值</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">指定的值太大。
        
- 或 -

<paramref name="value" /> 包含注释分隔符 (， <c>*/</c>) 。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary vsli:raw="Writes a string text value as a JSON comment.">将字符串文本值编写为 JSON 注释。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">要以 UTF-8 转码 JSON 注释形式写入<c> / *..* / 到其中的</c>utf-16 编码值</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">指定的值太大。
        
- 或 -

<paramref name="value" /> 包含注释分隔符 (， <c>*/</c>) 。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary vsli:raw="Writes the end of a JSON array.">编写 JSON 数组的结尾。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary vsli:raw="Writes the end of a JSON object.">编写 JSON 对象的结尾。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.">写入指定为字节的只读范围的属性名，并将 JSON 文本 null 作为 json 对象的名称/值对的一部分写入。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.">写入指定为只读字符跨度的属性名称，并将 JSON 文本 null 作为 json 对象的名称/值对的一部分写入。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary vsli:raw="Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.">写入指定为字符串的属性名称，并将 JSON 文本 null 作为 json 对象的名称/值对的一部分写入。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.">将预编码的属性名称和 JSON 文本 null 写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary vsli:raw="Writes the JSON literal null as an element of a JSON array.">将 JSON 文本 null 写为 JSON 数组的元素。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字节只读范围的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字节只读范围的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字节只读范围的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字节只读范围的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字节只读范围的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字节只读范围的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字节只读范围的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为只读字符范围的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为只读字符范围的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为只读字符范围的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为只读字符范围的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为只读字符范围的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为只读字符范围的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为只读字符范围的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">将预编码的属性名称和 <see cref="T:System.Decimal" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">将预编码的属性名称和 <see cref="T:System.Double" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">将预编码的属性名称和 <see cref="T:System.Int32" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">将预编码的属性名称和 <see cref="T:System.Int64" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">将预编码的属性名称和 <see cref="T:System.Single" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">将预编码的属性名称和 <see cref="T:System.UInt32" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">将预编码的属性名称和 <see cref="T:System.UInt64" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 数字形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as an element of a JSON array.">编写 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as an element of a JSON array.">编写 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">编写 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">编写 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as an element of a JSON array.">编写 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">编写 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">编写 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.">编写 UTF-8 属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">编写属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">编写属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.">编写预编码属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary vsli:raw="Writes the beginning of a JSON array.">编写 JSON 数组的开头。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超过最大深度 1,000。

- 或 -

系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.">编写 JSON 数组的开头，将指定为字节只读范围的属性名称作为键。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON array to be written.">要编写的 JSON 数组的 UTF-8 编码属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超过最大深度 1,000。

- 或 -
       
系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.">编写 JSON 数组的开头，将指定为只读字符范围的属性名称作为键。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超过最大深度 1,000。

- 或 -
       
系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a string as the key.">编写 JSON 数组的开头，将指定为字符串的属性名称作为键。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超过最大深度 1,000。

- 或 -
       
系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON array with a pre-encoded property name as the key.">编写将预编码属性名称作为键的 JSON 数组的开头。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 数字的 JSON 编码属性名称。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;    &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">JSON 的深度超过最大深度 1,000。
    
- 或 -

系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary vsli:raw="Writes the beginning of a JSON object.">编写 JSON 对象的开头。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and the operation would result in writing invalid JSON.">JSON 的深度超过最大深度 1,000。

- 或 -

系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.">编写 JSON 对象的开头，将指定为字节只读范围的属性名称作为键。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超过最大深度 1,000。 

- 或 -
       
系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only character span as the key.">编写 JSON 对象的开头，将指定为只读字符范围的属性名称作为键。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超过最大深度 1,000。 

- 或 -
       
系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a string as the key.">编写 JSON 对象的开头，将指定为字符串的属性名称作为键。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超过最大深度 1,000。 

- 或 -
       
系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON object with a pre-encoded property name as the key.">编写将预编码属性名称作为键的 JSON 对象的开头。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;          &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">JSON 的深度超过最大深度 1,000。
          
- 或 -

系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">编写 UTF-8 属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">编写 UTF-8 属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">编写 UTF-8 属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">编写 UTF-8 属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">编写 UTF-8 属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary vsli:raw="Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">编写 UTF-8 属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">将 UTF-8 属性名称和预编码值（作为 JSON 字符串）写入 JSON 对象的名称/值对分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要编写的 JSON 对象的 UTF-8 编码属性名称。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">系统已启用验证，此方法将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">编写指定为只读字符范围的属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">编写指定为只读字符范围的属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">编写指定为只读字符范围的属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">编写 UTF-16 属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">编写 UTF-16 属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary vsli:raw="Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">编写 UTF-16 属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">将属性名称和预编码值（作为 JSON 字符串）写入 JSON 对象的名称/值对分。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary vsli:raw="Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.">编写指定为字符串的属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的属性名称或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">将属性名称和预编码值（作为 JSON 字符串）写入 JSON 对象的名称/值对分。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的属性名称过长。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">将预编码的属性名称和 <see cref="T:System.DateTime" /> 值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">将预编码的属性名称和 <see cref="T:System.DateTimeOffset" /> 值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">将预编码的属性名称和 <see cref="T:System.Guid" /> 值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">将预编码的属性名称和 UTF-8 文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.">将预编码的属性名称和文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要作为 UTF-8 转码的 JSON 字符串写入名称/值对的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary vsli:raw="Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">将预编码的属性名称和字符串文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要作为 UTF-8 转码的 JSON 字符串写入名称/值对的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">将预编码的属性名称和预编码的文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as an element of a JSON array.">编写 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as an element of a JSON array.">编写 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as an element of a JSON array.">编写 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">系统已启用验证，该操作将导致编写无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.">编写 UTF-8 文本值（写为 JSON 字符串）作为 JSON 数组的元素。</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string element of a JSON array.">要编写为 JSON 数组的 JSON 字符串元素的 UTF-8 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.">编写 UTF-16 文本值（写为 JSON 字符串）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary vsli:raw="Writes a string text value (as a JSON string) as an element of a JSON array.">编写字符串文本值（写为 JSON 字符串）作为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.">将预编码的文本值（作为 JSON 字符串）写为 JSON 数组的元素。</summary>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">要写为 JSON 数组的 UTF-8 转码的 JSON 字符串元素的 JSON 编码值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">系统已启用验证，该编写操作将生成无效的 JSON。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary vsli:raw="Gets the total number of bytes committed to the output by the current instance so far.">获取目前为止当前实例提交到输出的字节总数。</summary>
      <returns vsli:raw="The total number of bytes committed to the output by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far.">迄今为止提交给输出的总字节数 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary vsli:raw="Gets the number of bytes written by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far that have not yet been flushed to the output and committed.">获取目前为止由 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 编写但尚未刷新到输出并提交的字节数。</summary>
      <returns vsli:raw="The number of bytes written so far by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; that have not yet been flushed to the output and committed.">到目前为止 <see cref="T:System.Text.Json.Utf8JsonWriter" /> ，尚未刷新到输出并提交的字节数。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">获取当前标记的深度。</summary>
      <returns vsli:raw="The depth of the current token.">当前标记的深度。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary vsli:raw="Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.">获取使用此实例编写 JSON 时的自定义行为，以指示在编写时是否格式化输出，是否跳过结构化 JSON 验证以及要转义哪些字符。</summary>
      <returns vsli:raw="The custom behavior of this instance of the writer for formatting, validating, and escaping.">此编写器实例的自定义行为，用于设置格式、验证和转义。</returns>
    </member>
  </members>
</doc>
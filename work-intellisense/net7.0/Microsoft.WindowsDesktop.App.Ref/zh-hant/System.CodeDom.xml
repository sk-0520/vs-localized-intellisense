<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>提供存取 C# 程式碼產生器和程式碼編譯器的執行個體。</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>初始化 <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>使用指定的提供者選項，初始化 <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 類別的新執行個體。</summary>
      <param name="providerOptions">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 物件，包含來自組態檔的提供者選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>取得 C# 程式碼編譯器的執行個體。</summary>
      <returns>C# <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 實作的執行個體。</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>取得 C# 程式碼產生器的執行個體。</summary>
      <returns>C# <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 實作的執行個體。</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>使用指定的文字寫入器與程式碼產生器選項，產生指定類別成員的程式碼。</summary>
      <param name="member">要為其產生程式碼的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <param name="writer">要寫入的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">產生程式碼時所使用的 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>取得物件指定類型的 <see cref="T:System.ComponentModel.TypeConverter" />。</summary>
      <param name="type">物件的類型，要為其擷取類型轉換子。</param>
      <returns>指定類型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>取得建立原始程式碼檔案時要使用的副檔名。</summary>
      <returns>產生的原始程式碼檔案所要使用的副檔名。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>提供存取 Visual Basic 程式碼產生器和程式碼編譯器的執行個體。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>使用指定的提供者選項，初始化 <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 類別的新執行個體。</summary>
      <param name="providerOptions">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 物件，包含來自組態檔的提供者選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>取得 Visual Basic 程式碼編譯器的執行個體。</summary>
      <returns>Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 實作的執行個體。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>取得 Visual Basic 程式碼產生器的執行個體。</summary>
      <returns>Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 實作的執行個體。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>使用指定的文字寫入器與程式碼產生器選項，產生指定類別成員的程式碼。</summary>
      <param name="member">要為其產生程式碼的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <param name="writer">要寫入的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">產生程式碼時所使用的 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>取得物件指定類型的 <see cref="T:System.ComponentModel.TypeConverter" />。</summary>
      <param name="type">物件的類型，要為其擷取類型轉換子。</param>
      <returns>指定類型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>取得建立原始程式碼檔案時要使用的副檔名。</summary>
      <returns>產生的原始程式碼檔案所要使用的副檔名。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>取得語言功能識別項。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" />，表示語言的特殊功能。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>代表傳遞至方法之引數值的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>使用指定的參數名稱來初始化 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 類別的新執行個體。</summary>
      <param name="parameterName">要參考的參數名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>取得或設定本運算式參考的參數名稱。</summary>
      <returns>要參考的參數名稱。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>表示建立陣列的運算式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>使用指定的陣列資料型別和指示陣列的索引數目的程式碼運算式，初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示要建立的陣列之資料型別。</param>
      <param name="size">運算式，表示要建立的陣列之索引數目。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>使用指定的陣列資料型別和初始化運算式，初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示要建立的陣列之資料型別。</param>
      <param name="initializers">要用來初始化陣列的運算式陣列。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>使用指定的陣列資料型別和陣列的索引數目，初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示要建立的陣列之資料型別。</param>
      <param name="size">要建立的陣列的索引數目。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的陣列資料型別名稱和指示陣列的索引數目的程式碼運算式，初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">要建立陣列的資料型別名稱。</param>
      <param name="size">運算式，表示要建立的陣列之索引數目。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>使用指定的陣列資料型別名稱和初始設定式，初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">要建立陣列的資料型別名稱。</param>
      <param name="initializers">要用來初始化陣列的運算式陣列。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>使用指定的陣列資料型別名稱和陣列的索引數目，初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">要建立陣列的資料型別名稱。</param>
      <param name="size">要建立的陣列的索引數目。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>使用指定的陣列資料型別和指示陣列的索引數目的程式碼運算式，初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">要建立陣列的資料型別。</param>
      <param name="size">運算式，表示要建立的陣列之索引數目。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>使用指定的陣列資料型別和初始設定式來初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">要建立陣列的資料型別。</param>
      <param name="initializers">要用來初始化陣列的運算式陣列。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>使用指定的陣列資料型別和陣列的索引數目，初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">要建立陣列的資料型別。</param>
      <param name="size">要建立的陣列的索引數目。</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>取得或設定要建立陣列的型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示陣列的型別。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>取得用來初始化陣列的初始設定式。</summary>
      <returns>指示初始設定值的 <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>取得或設定陣列的索引數目。</summary>
      <returns>陣列的索引數目。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>取得或設定指示陣列大小的運算式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示陣列的大小。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>表示陣列索引的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目標物件和索引來初始化 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 類別的新執行個體。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，表示索引子目標陣列。</param>
      <param name="indices">要參考的索引。</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>取得或設定索引子運算式的索引。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，表示索引子運算式的索引。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>取得或設定這個陣列索引子的目標物件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示正被索引的陣列。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>表示簡單的指派陳述式 (Assignment Statement)。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAssignStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>使用指定的運算式來初始化 <see cref="T:System.CodeDom.CodeAssignStatement" /> 類別的新執行個體。</summary>
      <param name="left">指派的目的變數。</param>
      <param name="right">要指派的值。</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>取得或設定表示要指派之物件或參考的運算式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> 表示要指派的物件或參考。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>取得或設定指派物件或參考的運算式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> 表示要指派的物件或參考。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>表示將事件處理常式委派附加至事件的陳述式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>使用指定的事件與委派，初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 類別的新執行個體。</summary>
      <param name="eventRef">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 表示要附加事件處理常式的目的事件。</param>
      <param name="listener">表示新事件處理常式的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>使用包含事件、事件名稱和事件處理常式的指定物件，初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 類別的新執行個體。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，表示包含事件的物件。</param>
      <param name="eventName">要附加事件處理常式的目的事件名稱。</param>
      <param name="listener">表示新事件處理常式的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>取得或設定要附加事件處理常式委派的目的事件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 表示要附加事件處理常式的目的事件。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>取得或設定要附加至事件的新事件處理常式委派。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> 表示要附加的新事件處理常式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>表示用於中繼資料 (Metadata) 屬性宣告的引數。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的值初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 類別的新執行個體。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpression" />，表示引數的值。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的名稱和數值，初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 類別的新執行個體。</summary>
      <param name="name">套用引數的屬性 (Attribute) Property 名稱。</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpression" />，表示引數的值。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>取得或設定屬性的名稱。</summary>
      <returns>引數的屬性 (Attribute) Property 名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>取得或設定屬性引數的值。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示屬性引數的值。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 類別 (含有 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件的指定陣列) 的新執行個體。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">陣列中的一個或多個物件都是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 類別 (含有指定來源集合的元素) 的新執行個體。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 陣列元素複製到集合的末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>將另一個 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 物件的內容複製到集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>取得值，這個值表示集合是否包含指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件。</summary>
      <param name="value">要放置在集合中的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件。</param>
      <returns>如果集合包含指定的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>將集合物件複製到指定索引開頭的一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">目的端陣列為多維。  
  
-或- 
在 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 中的元素數目大於由 <paramref name="index" /> 參數指定的目標陣列索引和目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>取得集合中指定之 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件的索引 (如果它存在於集合中的話)。</summary>
      <param name="value">要放置在集合中的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件。</param>
      <returns>如果找到的話，就是集合中指定的物件之索引，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件插入至集合中所指定索引處。</summary>
      <param name="index">以零起始的索引，是應將指定物件插入的位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件。</summary>
      <param name="value">要從集合移除的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>取得或設定位於集合中所指定索引處的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 物件。</summary>
      <param name="index">要存取的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>在每一個有效索引上的 <see cref="T:System.CodeDom.CodeAttributeArgument" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>表示屬性宣告。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>使用指定的程式碼型別參考，初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 類別的新執行個體。</summary>
      <param name="attributeType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，辨識屬性。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>使用指定的程式碼型別參考和引數，初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 類別的新執行個體。</summary>
      <param name="attributeType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，辨識屬性。</param>
      <param name="arguments">型別 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 的陣列，包含屬性的引數。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>使用指定的名稱來初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 類別的新執行個體。</summary>
      <param name="name">屬性的名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>使用指定的名稱和引數，初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 類別的新執行個體。</summary>
      <param name="name">屬性的名稱。</param>
      <param name="arguments">型別 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 的陣列，包含屬性的引數。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>取得屬性的引數。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />，包含屬性的引數。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>取得程式碼屬性宣告的程式碼型別參考。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，辨識 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>取得或設定正在宣告的屬性名稱。</summary>
      <returns>屬性的名稱。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 類別 (含有 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件的指定陣列) 的新執行個體。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">陣列中的一個或多個物件都是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 類別 (含有指定來源集合的元素) 的新執行個體。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>將具有指定值的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 陣列元素複製到集合的末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>將另一個 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 物件的內容複製到集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>取得或設定值，這個值表示集合是否包含指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件。</summary>
      <param name="value">要尋找的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件。</param>
      <returns>如果集合包含指定的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>將集合物件複製到指定索引開頭的一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">目的端陣列為多維。  
  
-或- 
在 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 中的元素數目大於由 <paramref name="index" /> 參數指定的目標陣列索引和目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>取得集合中指定之 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件的索引 (如果它存在於集合中的話)。</summary>
      <param name="value">要放置在集合中的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件。</param>
      <returns>如果找到的話，索引位於指定物件的集合中，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件插入至集合中所指定索引處。</summary>
      <param name="index">以零起始的索引，是應將指定物件插入的位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件。</summary>
      <param name="value">要從集合移除的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>取得或設定在指定索引處的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 物件。</summary>
      <param name="index">要存取的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>在每一個有效索引上的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>表示基底類別的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>代表在兩個運算式間的二元運算所組成的運算式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>使用指定的參數初始化 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 類別的新執行個體。</summary>
      <param name="left">
        <see cref="T:System.CodeDom.CodeExpression" /> 在運算子的左方。</param>
      <param name="op">
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> 表示運算子型別。</param>
      <param name="right">
        <see cref="T:System.CodeDom.CodeExpression" /> 在運算子的右方。</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>取得或設定運算子左方的程式碼運算式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> 表示左運算元。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>取得或設定二元運算子運算式的運算子。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> 表示運算式中的運算子型別。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>取得或設定運算子右方的程式碼運算式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> 表示右運算元。</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>定義支援二元運算子的識別項。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>加法運算子 (+)。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>指派運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>位元的 AND 運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>位元的 OR 運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>布林值 AND 運算子。 這表示短路的運算子。 在傳回正確的值前，短路的運算子只會評估所需數量的運算式。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>布林值 OR 運算子。 這表示短路的運算子。 在傳回正確的值前，短路的運算子只會評估所需數量的運算式。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>除法運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>大於運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>大於或等於運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>識別等號比較運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>識別不等運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>小於運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>小於或等於運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>模數運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>乘法運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>減法運算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>值相等比運算子。</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>表示一個轉換為資料型別或介面的運算式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>使用指定的目的型別和運算式，初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 類別的新執行個體。</summary>
      <param name="targetType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示轉型的目的型別。</param>
      <param name="expression">要轉換的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的目的型別和運算式，初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 類別的新執行個體。</summary>
      <param name="targetType">轉型的目的型別名稱。</param>
      <param name="expression">要轉換的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>使用指定的目的型別和運算式，初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 類別的新執行個體。</summary>
      <param name="targetType">轉型的目的資料型別。</param>
      <param name="expression">要轉換的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>取得或設定要轉型的運算式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示要轉型的程式碼。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>取得或設定轉型的目的型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示要轉型為的目的型別。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>表示 <see langword="catch" /> 陳述式中的 <see langword="try/catch" /> 例外狀況區塊。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>使用例外狀況的指定區域變數名稱，初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 類別的新執行個體。</summary>
      <param name="localName">針對例外狀況，宣告於 Catch 子句的區域變數名稱。 這是選擇性的。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>使用例外狀況和例外狀況型別的指定區域變數名稱，初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 類別的新執行個體。</summary>
      <param name="localName">針對例外狀況，宣告於 Catch 子句的區域變數名稱。 這是選擇性的。</param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示要攔截的例外狀況型別。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>使用例外狀況、例外狀況型別和陳述式 (Statement) 集合的指定區域變數名稱，初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 類別的新執行個體。</summary>
      <param name="localName">針對例外狀況，宣告於 Catch 子句的區域變數名稱。 這是選擇性的。</param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示要攔截的例外狀況型別。</param>
      <param name="statements">
        <see cref="T:System.CodeDom.CodeStatement" /> 物件的陣列，表示攔截區塊的內容。</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>取得或設定要用 Catch 區塊處理的例外狀況型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> 表示要處理的例外狀況型別。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>取得或設定  <see langword="catch" /> 子句要處理的例外狀況變數名稱。</summary>
      <returns>
        <see langword="catch" /> 子句要處理的例外狀況變數名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>取得 Catch 區塊中的陳述式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> 含有 Catch 區塊中的陳述式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 類別 (含有 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件的指定陣列) 的新執行個體。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">陣列中的一個或多個物件都是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 類別 (含有指定來源集合的元素) 的新執行個體。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeCatchClauseCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 陣列元素複製到集合的末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>將另一個 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 物件的內容複製到集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" />，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>取得值，這個值表示集合是否包含指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件。</summary>
      <param name="value">要放置在集合中的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件。</param>
      <returns>如果集合包含指定的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>將集合物件複製到指定索引開頭的一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">目的端陣列為多維。  
  
-或- 
在 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 中的元素數目大於由 <paramref name="index" /> 參數指定的目標陣列索引和目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>取得集合中指定之 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件的索引 (如果它存在於集合中的話)。</summary>
      <param name="value">要放置在集合中的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件。</param>
      <returns>如果找到的話，就是集合中指定的物件之索引，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件插入至集合中所指定索引處。</summary>
      <param name="index">以零起始的索引，是應將指定物件插入的位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件。</summary>
      <param name="value">要從集合移除的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>取得或設定位於集合中所指定索引處的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件。</summary>
      <param name="index">要存取的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>位於每一個有效索引的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件。</returns>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>表示程式碼總和檢查碼 Pragma 程式碼實體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeChecksumPragma" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>使用檔案名稱、表示總和檢查碼演算法的 GUID，以及表示總和檢查碼資料的位元組資料流，初始化 <see cref="T:System.CodeDom.CodeChecksumPragma" /> 類別的新執行個體。</summary>
      <param name="fileName">總和檢查碼檔案的路徑。</param>
      <param name="checksumAlgorithmId">
        <see cref="T:System.Guid" />，其識別要使用的總和檢查碼演算法。</param>
      <param name="checksumData">包含總和檢查碼資料的位元組陣列。</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>取得或設定 GUID，該 GUID 識別要使用的總和檢查碼演算法。</summary>
      <returns>
        <see cref="T:System.Guid" />，其識別要使用的總和檢查碼演算法。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>取得或設定總和檢查碼計算的資料值。</summary>
      <returns>包含總和檢查碼計算資料的位元組陣列。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>取得或設定總和檢查碼檔案的路徑。</summary>
      <returns>總和檢查碼檔案的路徑。</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>表示註解。</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeComment" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>使用指定的文字為內容，初始化 <see cref="T:System.CodeDom.CodeComment" /> 類別的新執行個體。</summary>
      <param name="text">註解的內容。</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>使用指定的文字和文件註解旗標來初始化 <see cref="T:System.CodeDom.CodeComment" /> 類別的新執行個體。</summary>
      <param name="text">註解的內容。</param>
      <param name="docComment">如果註解是文件註解，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>取得或設定數值，表示註解是否為文件註解。</summary>
      <returns>如果註解是文件註解，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>取得或設定註解的內容。</summary>
      <returns>含有註解文字的字串。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>表示包含單一註解的陳述式 (Statement)。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>使用指定的註解來初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 類別的新執行個體。</summary>
      <param name="comment">
        <see cref="T:System.CodeDom.CodeComment" />，表示註解。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>使用指定的文字為內容來初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 類別的新執行個體。</summary>
      <param name="text">註解的內容。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>使用指定的文字和文件註解旗標來初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 類別的新執行個體。</summary>
      <param name="text">註解的內容。</param>
      <param name="docComment">如果註解是文件註解，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>取得或設定註解的內容。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeComment" />，表示註解。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 類別 (含有 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件的指定陣列) 的新執行個體。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">陣列中的一個或多個物件都是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 類別 (含有指定來源集合的元素) 的新執行個體。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 陣列元素複製到集合的末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>將另一個 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 物件的內容複製到集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" />，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>取得值，這個值表示集合是否包含指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件。</summary>
      <param name="value">要在集合中搜尋的 <see cref="T:System.CodeDom.CodeCommentStatement" />。</param>
      <returns>如果集合包含指定的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>將集合物件複製到開始於指定索引的指定一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">目的端陣列為多維。  
  
-或- 
在 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 中的元素數目大於由 <paramref name="index" /> 參數指定的目標陣列索引和目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>取得集合中指定之 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件的索引 (如果它存在於集合中的話)。</summary>
      <param name="value">要尋找的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件。</param>
      <returns>如果找到的話，就是集合中指定的物件之索引，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>將 <see cref="T:System.CodeDom.CodeCommentStatement" /> 插入位於指定索引的集合。</summary>
      <param name="index">以零起始的索引，是應插入項目的位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件。</summary>
      <param name="value">要從集合移除的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>取得或設定位於集合中所指定索引處的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件。</summary>
      <param name="index">要存取的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>位於每一個有效索引的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 物件。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>提供一個 CodeDOM 程式圖形的容器。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCompileUnit" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>取得已產生組件之自訂屬性的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 表示已產生組件的自訂屬性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>取得包含結尾指示詞的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件，包含結尾指示詞。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>取得命名空間的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespaceCollection" />，表示編譯單位使用的命名空間。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>取得參考的組件。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" /> 含有參考組件的檔名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>取得包含開頭指示詞的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件，包含開頭指示詞。</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>表示條件分支陳述式 (Statement)，通常表示為 <see langword="if" /> 陳述式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>使用指定的條件和陳述式，來初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 類別的新執行個體。</summary>
      <param name="condition">
        <see cref="T:System.CodeDom.CodeExpression" /> 表示要評估的運算式。</param>
      <param name="trueStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 型別的陣列，包含如果條件為 <see langword="true" /> 時，所要執行的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>使用指定的條件和陳述式，來初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 類別的新執行個體。</summary>
      <param name="condition">
        <see cref="T:System.CodeDom.CodeExpression" /> 表示要評估的條件。</param>
      <param name="trueStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 型別的陣列，包含如果條件為 <see langword="true" /> 時，所要執行的陳述式。</param>
      <param name="falseStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 型別的陣列，包含如果條件為 <see langword="false" /> 時，所要執行的陳述式。</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>取得或設定運算式以評估 <see langword="true" /> 或 <see langword="false" />。</summary>
      <returns>評估 <see langword="true" /> 或 <see langword="false" /> 的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>如果條件運算式判定為 <see langword="false" />，則取得要執行的陳述式的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，包含如果條件運算式判定為 <see langword="false" /> 時，所要執行的陳述式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>如果條件運算式判定為 <see langword="true" />，則取得要執行的陳述式的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，包含如果條件運算式判定為 <see langword="true" /> 時，所要執行的陳述式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>代表型別之執行個體建構函式的宣告。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeConstructor" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>取得基底建構函式引數的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> 包含基底建構函式引數。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>取得連鎖建構函式引數的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> 包含連鎖建構函式引數。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>表示參考預設值。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>使用指定的程式碼型別參考，初始化 <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指定參考實值型別。</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>取得或設定預設值的資料型別參考。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> 物件，表示具有預設值的資料型別。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>表示建立委派的運算式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 類別的新執行個體。</summary>
      <param name="delegateType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示委派的資料型別。</param>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> 表示物件含有事件處理常式方法。</param>
      <param name="methodName">事件處理常式方法的名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>取得或設定委派的資料型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示委派的資料型別。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>取得或設定事件處理常式方法的名稱。</summary>
      <returns>事件處理常式方法的名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>取得或設定包含事件處理常式方法的物件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> 表示物件含有事件處理常式方法。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>表示引發事件的運算式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的目標物件來初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 類別的新執行個體。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> 指示目標物件。</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目標物件和參數來初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 類別的新執行個體。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> 指示目標物件。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 物件陣列，表示參數。</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>取得或設定參數，傳遞至附加到事件之事件處理常式方法。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示要傳遞至附加到事件之事件處理常式方法的參數。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>取得或設定要叫用的事件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示要叫用的事件。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>代表做為叫用參數與參考方向指示器之方法的運算式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirectionExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>使用指定的欄位方向和運算式，來初始化 <see cref="T:System.CodeDom.CodeDirectionExpression" /> 類別的新執行個體。</summary>
      <param name="direction">
        <see cref="T:System.CodeDom.FieldDirection" />，表示運算式的欄位方向。</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" />，表示要表示的程式碼運算式。</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>取得或設定這個方向運算式的欄位方向。</summary>
      <returns>
        <see cref="T:System.CodeDom.FieldDirection" />，表示這個方向運算式的欄位方向。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>取得或設定要表示的程式碼運算式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示要表示的運算式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>做為程式碼指示詞類別的基底類別。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirective" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeDirective" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>使用指定陣列中的程式碼指示詞物件，初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 類別的新執行個體。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeDirective" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>使用指定程式碼指示詞集合中的項目，初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 類別的新執行個體。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeDirective" /> 物件加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeDirective" /> 物件。</param>
      <returns>插入新項目的索引位置。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>將 <see cref="T:System.CodeDom.CodeDirective" /> 物件的陣列加入集合結尾。</summary>
      <param name="value">要加入至集合中之 <see cref="T:System.CodeDom.CodeDirective" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件內容加入集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件，包含要加入集合的 <see cref="T:System.CodeDom.CodeDirective" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>取得值，指出集合是否包含指定的 <see cref="T:System.CodeDom.CodeDirective" /> 物件。</summary>
      <param name="value">要在集合中搜尋的 <see cref="T:System.CodeDom.CodeDirective" /> 物件。</param>
      <returns>如果集合包含指定的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>複製集合的內容至指定索引開頭的一維陣列。</summary>
      <param name="array">型別為 <see cref="T:System.CodeDom.CodeDirective" /> 的陣列，其是從集合複製之值的目的端。</param>
      <param name="index">要開始插入集合物件的陣列索引。</param>
      <exception cref="T:System.ArgumentException">目的端陣列為多維。  
  
-或- 
<see cref="T:System.CodeDom.CodeDirectiveCollection" /> 中的項目數，大於 <paramref name="index" /> 指定的目標陣列索引與目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>取得指定 <see cref="T:System.CodeDom.CodeDirective" /> 物件在集合中的索引 (如果它存在於集合中)。</summary>
      <param name="value">要放置在集合中的 <see cref="T:System.CodeDom.CodeDirective" /> 物件。</param>
      <returns>如果找到的話，則為指定物件在集合中的索引位置，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeDirective" /> 物件插入至集合中所指定索引處。</summary>
      <param name="index">以零起始的索引位置，應在該位置插入指定的物件。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeDirective" /> 物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="index" /> 大於 <see cref="P:System.Collections.CollectionBase.Count" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.CodeDirective" /> 物件。</summary>
      <param name="value">要從集合移除的 <see cref="T:System.CodeDom.CodeDirective" /> 物件。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>取得或設定位於集合中所指定索引處的 <see cref="T:System.CodeDom.CodeDirective" /> 物件。</summary>
      <param name="index">要存取的索引位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引位置範圍之外。</exception>
      <returns>索引位置上的 <see cref="T:System.CodeDom.CodeDirective" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>代表可執行檔的進入點方法。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeEntryPointMethod" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>代表事件的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目標物件和事件名稱，來初始化 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 類別的新執行個體。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，表示包含事件的物件。</param>
      <param name="eventName">要參考的事件名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>取得或設定事件的名稱。</summary>
      <returns>事件的名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>取得或設定包含事件的物件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示包含事件的物件。</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>表示程式碼運算式。 這是永不執行個體化之其他程式碼運算式物件的基底類別。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeExpression" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 類別 (含有 <see cref="T:System.CodeDom.CodeExpression" /> 物件的指定陣列) 的新執行個體。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeExpression" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">陣列中的一個或多個物件都是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 類別 (含有指定來源集合的元素) 的新執行個體。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeExpressionCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeExpression" /> 物件加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeExpression" /> 物件。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>將指定的陣列元素複製到集合末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpression" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>將另一個 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 物件的內容複製到集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>取得值，這個值表示集合是否包含指定的 <see cref="T:System.CodeDom.CodeExpression" /> 物件。</summary>
      <param name="value">要放置在集合中的 <see cref="T:System.CodeDom.CodeExpression" /> 物件。</param>
      <returns>如果集合包含指定的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>將集合物件複製到指定索引開頭的一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">目的端陣列為多維。  
  
-或- 
在 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 中的元素數目大於由 <paramref name="index" /> 參數指定的目標陣列索引和目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>取得集合中指定之 <see cref="T:System.CodeDom.CodeExpression" /> 物件的索引 (如果它存在於集合中的話)。</summary>
      <param name="value">要放置在集合中的 <see cref="T:System.CodeDom.CodeExpression" /> 物件。</param>
      <returns>如果找到的話，就是集合中指定的物件之索引，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeExpression" /> 物件插入至集合中所指定索引處。</summary>
      <param name="index">以零起始的索引，是應將指定物件插入的位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeExpression" /> 物件。</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.CodeExpression" /> 物件。</summary>
      <param name="value">要從集合移除的 <see cref="T:System.CodeDom.CodeExpression" /> 物件。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>取得或設定位於集合中所指定索引處的 <see cref="T:System.CodeDom.CodeExpression" /> 物件。</summary>
      <param name="index">要存取之集合以零起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>位於每一個有效索引的 <see cref="T:System.CodeDom.CodeExpression" /> 物件。</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>表示包含單一運算式的陳述式 (Statement)。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的運算式來初始化 <see cref="T:System.CodeDom.CodeExpressionStatement" /> 類別的新執行個體。</summary>
      <param name="expression">陳述式的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>取得或設定陳述式的運算式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示陳述式的運算式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>表示欄位的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目標物件和欄位名稱來初始化 <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 類別的新執行個體。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，表示包含欄位的物件。</param>
      <param name="fieldName">欄位的名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>取得或設定要參考的欄位名稱。</summary>
      <returns>含有欄位名稱的字串。</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>取得或設定包含要參考欄位的物件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示包含要參考欄位的物件。</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>表示 <see langword="goto" /> 陳述式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeGotoStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>使用指定的標記名稱，初始化 <see cref="T:System.CodeDom.CodeGotoStatement" /> 類別的新執行個體。</summary>
      <param name="label">繼續程式執行所在的標記名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Label" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>取得或設定繼續程式執行的標記名稱。</summary>
      <exception cref="T:System.ArgumentNullException">無法設定標記，因為 <paramref name="value" /> 為 <see langword="null" /> 或空字串。</exception>
      <returns>字串，表示繼續程式執行的標記名稱。</returns>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>表示物件的索引子 (Indexer) 屬性的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeIndexerExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目標物件和索引來初始化 <see cref="T:System.CodeDom.CodeIndexerExpression" /> 類別的新執行個體。</summary>
      <param name="targetObject">目標物件。</param>
      <param name="indices">索引子運算式的索引。</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>取得索引子運算式的索引集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，表示索引子運算式的索引。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>取得或設定可以索引的目標物件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示索引子物件。</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>表示 <see langword="for" /> 陳述式或陳述式區塊的迴圈，使用測試運算式做為繼續迴圈的條件。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>使用指定的參數初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 類別的新執行個體。</summary>
      <param name="initStatement">
        <see cref="T:System.CodeDom.CodeStatement" />，包含迴圈初始化陳述式 (Statement)。</param>
      <param name="testExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，包含用於測試離開條件的運算式。</param>
      <param name="incrementStatement">
        <see cref="T:System.CodeDom.CodeStatement" />，包含每個循環遞增陳述式。</param>
      <param name="statements">
        <see cref="T:System.CodeDom.CodeStatement" /> 型別的陣列，包含迴圈中的陳述式。</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>取得或設定在每次迴圈循環之後，所呼叫的陳述式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" />，表示每個循環遞增陳述式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>取得或設定迴圈初始化陳述式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" />，表示迴圈初始化陳述式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>取得在迴圈中要執行的陳述式集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" /> 型別的陣列，表示在迴圈中的陳述式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>取得或設定做為繼續迴圈之條件測試的運算式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示要測試的運算式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>表示標記陳述式 (Label Statement) 或是獨立標記。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>使用指定的標記名稱，初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 類別的新執行個體。</summary>
      <param name="label">標籤名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>使用指定的標記和陳述式，初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 類別的新執行個體。</summary>
      <param name="label">標籤名稱。</param>
      <param name="statement">與標記相關的 <see cref="T:System.CodeDom.CodeStatement" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>取得或設定標記名稱。</summary>
      <returns>標籤名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>取得或設定選擇性相關陳述式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" />，表示與標記相關的陳述式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>表示特定檔案內的特定位置。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLinePragma" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLinePragma" /> 類別的新執行個體。</summary>
      <param name="fileName">相關檔案的檔案名稱。</param>
      <param name="lineNumber">儲存參考的行號。</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>取得或設定相關檔案的名稱。</summary>
      <returns>相關檔案的檔案名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>取得或設定相關參考的行號。</summary>
      <returns>行號。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>表示型別事件的宣告。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberEvent" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>取得或設定成員事件所實作的資料型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，表示成員事件所實作的資料型別。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>取得或設定私下實作的資料型別 (如果有的話)。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示事件私下實作的資料型別。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>取得或設定處理事件之委派型別的資料型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> 指示處理事件的委派型別。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>表示型別欄位的宣告。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>使用指定的欄位型別和欄位名稱，初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 類別的新執行個體。</summary>
      <param name="type">表示欄位型別的物件。</param>
      <param name="name">欄位的名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>使用指定的欄位型別和欄位名稱，初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 類別的新執行個體。</summary>
      <param name="type">欄位的型別。</param>
      <param name="name">欄位的名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>使用指定的欄位型別和欄位名稱，初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 類別的新執行個體。</summary>
      <param name="type">欄位的型別。</param>
      <param name="name">欄位的名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>取得或設定欄位的初始化運算式。</summary>
      <returns>欄位的初始化運算式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>取得或設定欄位的類型。</summary>
      <returns>欄位的型別。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>表示型別方法的宣告。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>第一次存取 <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" /> 集合時，將引發的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>第一次存取 <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" /> 集合時，將引發的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>第一次存取 <see cref="P:System.CodeDom.CodeMemberMethod.Statements" /> 集合時，將引發的事件。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberMethod" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>取得這個方法所實作的介面的資料型別，除非它是 <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" /> 屬性所指示的私用 (Private) 方法實作。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，表示這個方法所實作的介面。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>取得方法的參數宣告。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，表示方法參數。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>取得或設定這個方法之介面的資料型別 (如果是私用)，實作其方法 (如果有的話)。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示介面的資料型別，方式是使用這個 <see cref="T:System.CodeDom.CodeMemberMethod" /> 實作所表示之宣告的私用方法。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>取得或設定方法之傳回值的資料型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示方法所傳回之值的資料型別。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>取得方法之傳回型別的自訂屬性 (Attribute)。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，表示自訂的屬性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>取得方法中的陳述式 (Statement)。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，表示方法中的陳述式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>取得目前泛型方法的型別參數。</summary>
      <returns>含有泛型方法型別參數的 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>表示型別屬性的宣告。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberProperty" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>取得屬性的 <see langword="get" /> 陳述式集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，包含成員屬性 <see langword="get" /> 陳述式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>取得或設定數值，表示屬性是否有 <see langword="get" /> 方法存取子。</summary>
      <returns>如果 <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> 集合的 <see langword="true" /> 屬性不是零，或本屬性的值已設為 <see langword="Count" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>取得或設定數值，表示屬性是否有 <see langword="set" /> 方法存取子。</summary>
      <returns>如果 <see cref="P:System.Collections.CollectionBase.Count" /> 集合的 <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> 屬性不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>取得屬性實作之任何介面的資料型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，表示屬性實作的資料型別。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>取得屬性的宣告運算式集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，表示屬性之宣告運算式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>取得或設定這個屬性 (如果是私用) 實作之介面的資料型別 (如果有的話)。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示屬性 (如果是私用) 實作之介面的資料型別 (如果有的話)。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>取得屬性的 <see langword="set" /> 陳述式集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，包含成員屬性 <see langword="set" /> 陳述式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>取得或設定屬性的資料型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示屬性的資料型別。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>表示叫用 (Invoke) 方法的運算式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目標物件、方法名稱和參數來初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 類別的新執行個體。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，表示要叫用方法的目標物件。</param>
      <param name="methodName">所要叫用之方法的名稱。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 物件陣列，表示一起叫用方法的參數。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的方法和參數來初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 類別的新執行個體。</summary>
      <param name="method">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />，表示要叫用的方法。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 物件的陣列，表示叫用方法的參數。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>取得或設定要叫用的方法。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />，表示要叫用的方法。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>取得一起叫用 (Invoke) 方法的參數。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，表示一起叫用方法的參數。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>表示方法的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目標物件和方法名稱，來初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 類別的新執行個體。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，將物件指示到目標。</param>
      <param name="methodName">要呼叫之方法的名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>使用指定的目標物件、方法名稱和泛型型別參數初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 類別的新執行個體。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，將物件指示到目標。</param>
      <param name="methodName">要呼叫之方法的名稱。</param>
      <param name="typeParameters">由 <see cref="T:System.CodeDom.CodeTypeReference" /> 值組成的陣列，這些值會指定此 <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> 的 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>取得或設定要參考的方法名稱。</summary>
      <returns>要參考的方法名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>取得或設定運算式，表示要參考的方法。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示要參考的方法。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>取得目前泛型方法參考運算式的型別引數。</summary>
      <returns>含有目前程式碼 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 型別引數的 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>表示傳回值陳述式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的運算式，初始化 <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 類別的新執行個體。</summary>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" />，表示傳回值。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>取得或設定傳回值。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示傳回陳述式 (Statement) 要傳回的值，或是如果陳述式為副程式的一部分時，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>表示命名空間 (Namespace) 宣告。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>第一次存取 <see cref="P:System.CodeDom.CodeNamespace.Comments" /> 集合時，將引發的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>第一次存取 <see cref="P:System.CodeDom.CodeNamespace.Imports" /> 集合時，將引發的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>第一次存取 <see cref="P:System.CodeDom.CodeNamespace.Types" /> 集合時，將引發的事件。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespace" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>使用指定的名稱來初始化 <see cref="T:System.CodeDom.CodeNamespace" /> 類別的新執行個體。</summary>
      <param name="name">要宣告的命名空間名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>取得命名空間的註解。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 指示命名空間的註解。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>取得命名空間所用的命名空間 Import 指示詞集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> 指示命名空間所用的命名空間 Import 指示詞。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>取得或設定命名空間的名稱。</summary>
      <returns>命名空間名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>取得命名空間所包含的型別集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 指示命名空間所包含的型別。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeNamespace" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 類別的新執行個體，這個執行個體包含 <see cref="T:System.CodeDom.CodeNamespace" /> 物件的指定陣列。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeNamespace" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">陣列中的一個或多個物件都是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 類別的新執行個體，這個執行個體包含指定之來源集合的元素。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeNamespaceCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 物件加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 陣列元素複製到集合的末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 物件內容加入集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" />，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>取得值，這個值表示集合是否包含指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 物件。</summary>
      <param name="value">要在集合中搜尋的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns>如果 <see cref="T:System.CodeDom.CodeNamespace" /> 包含在集合裡，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>將集合物件複製到指定之索引開頭的一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">目的端陣列為多維。  
  
-或- 
在 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 中的元素數目大於由 <paramref name="index" /> 參數指定的目標陣列索引和目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>取得 <see cref="T:System.CodeDom.CodeNamespace" /> 中指定之 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 物件的索引 (如果它存在於集合中的話)。</summary>
      <param name="value">要尋找的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns>指定之 <see cref="T:System.CodeDom.CodeNamespace" /> 參數的索引 (如果發現它在集合中的話)，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 物件插入至集合中所指定索引處。</summary>
      <param name="index">以零起始的索引，是應插入新項目的位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 物件。</summary>
      <param name="value">要從集合中移除的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>取得或設定位於集合中所指定索引處的 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 物件。</summary>
      <param name="index">要存取的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>在每一個有效索引上的 <see cref="T:System.CodeDom.CodeNamespace" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>表示命名空間匯入指示詞，其指示所要使用的命名空間。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>使用要匯入的指定命名空間來初始化 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 類別的新執行個體。</summary>
      <param name="nameSpace">要匯入的命名空間名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>取得或設定發生陳述式 (Statement) 的行和檔案。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" />，表示陳述式的內容。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>取得或設定要匯入的命名空間。</summary>
      <returns>要匯入的命名空間名稱。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>將 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 物件加入至集合。</summary>
      <param name="value">要新增到集合的 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 物件。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>將一組 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 物件加入至集合中。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>清除成員的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>取得列舉集合成員的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 指示集合成員。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Collections.ICollection" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製到 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來的項目之目的端。 陣列必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回可逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>將物件加入 <see cref="T:System.Collections.IList" />。</summary>
      <param name="value">要加入至 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>插入新項目的位置。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>從 <see cref="T:System.Collections.IList" /> 中移除所有項目。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果值在清單中則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中指定項目的索引。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果在清單中找到，則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入位於指定位置的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="value">要從 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.IList" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.IList" /> 之指定索引處的項目。</summary>
      <param name="index">移除項目之以零為起始的索引。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>取得集合中的命名空間 (Namespace) 數目。</summary>
      <returns>集合中的命名空間數目。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>取得或設定位於集合中所指定索引處的 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 物件。</summary>
      <param name="index">要存取的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>位於每一個有效索引的 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 物件。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>取得 <see cref="T:System.Collections.ICollection" /> 中所包含的項目數。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中所包含的項目數。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。 這個屬性永遠會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用來同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。  這個屬性永遠會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定的大小，即為 <see cref="T:System.Collections.IList" />；否則為 <see langword="false" />。  這個屬性永遠會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。  這個屬性永遠會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定的以零為起始元素索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>提供通用的基底類別 (Base Class) 給大部分的程式碼文件物件模型 (CodeDOM) 物件。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeObject" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>取得目前物件的使用者可定義資料。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />，含有目前物件的使用者資料。</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>表示建立型別之新執行個體的運算式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>使用指定的型別和參數來初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示要建立物件的資料型別。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 物件的陣列，表示要用來建立物件的參數。</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>使用指定的型別和參數來初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">要建立物件的資料型別名稱。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 物件的陣列，表示要用來建立物件的參數。</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>使用指定的型別和參數來初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 類別的新執行個體。</summary>
      <param name="createType">要建立物件的資料型別。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 物件的陣列，表示要用來建立物件的參數。</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>取得或設定要建立物件的資料型別。</summary>
      <returns>要建立物件的資料型別的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>取回或設定在建立物件時使用的參數。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，表示建立物件時要使用的參數。</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>表示方法、屬性或建構函式的參數宣告。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>使用指定的參數型別和名稱來初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 類別的新執行個體。</summary>
      <param name="type">物件，表示要宣告的參數型別。</param>
      <param name="name">要宣告的參數名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>使用指定的參數型別和名稱來初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 類別的新執行個體。</summary>
      <param name="type">要宣告的參數型別。</param>
      <param name="name">要宣告的參數名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>使用指定的參數型別和名稱來初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 類別的新執行個體。</summary>
      <param name="type">要宣告的參數型別。</param>
      <param name="name">要宣告的參數名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>取得或設定參數宣告的自訂屬性 (Attribute)。</summary>
      <returns>表示自訂屬性的物件。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>取得或設定欄位的方向。</summary>
      <returns>表示欄位方向的物件。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>取得或設定參數的名稱。</summary>
      <returns>參數名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>取得或設定參數的類型。</summary>
      <returns>參數的類型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 類別 (含有 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 物件的指定陣列) 的新執行個體。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">此陣列中的一個或多個物件為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 類別 (含有指定來源集合的元素) 的新執行個體。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>將指定的陣列元素複製到集合末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>將另一個 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 的內容加入至集合末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，含有要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>取得值，表示集合是否包含指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</summary>
      <param name="value">要在集合中搜尋的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns>如果集合包含指定的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>將集合物件複製到指定索引開頭的一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">目的端陣列為多維。  
  
-或- 
在 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 中的元素數目大於由 <paramref name="index" /> 參數指定的目標陣列索引和目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>請取得在指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 集合中的索引 (如果它存在於集合中)。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns>如果找到的話，索引位於指定物件的集合中，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 插入至集合中的指定索引處。</summary>
      <param name="index">以零起始的索引，是應將指定物件插入的位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>從集合移除指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</summary>
      <param name="value">要從集合中移除的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>取得或設定在集合的指定索引上的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</summary>
      <param name="index">要存取的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>在每一個有效索引上的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>表示基本資料型別值。</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>使用指定的物件，初始化 <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 類別的新執行個體。</summary>
      <param name="value">要表示的物件。</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>取得或設定要表示的基本資料型別。</summary>
      <returns>表示值的基本資料型別執行個體。</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>表示屬性值的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目標物件和屬性名稱來初始化 <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 類別的新執行個體。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，表示包含參考屬性的物件。</param>
      <param name="propertyName">要參考的屬性名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>取得或設定要參考的屬性名稱。</summary>
      <returns>要參考的屬性名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>取得或設定包含要參考屬性的物件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示包含參考屬性的物件。</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>表示屬性集方法內之屬性集方法呼叫的數值引數。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>指定程式碼區域的名稱和模式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.CodeDom.CodeRegionDirective" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeRegionDirective" /> 類別的新執行個體，指定其模式和名稱。</summary>
      <param name="regionMode">其中一個 <see cref="T:System.CodeDom.CodeRegionMode" /> 值。</param>
      <param name="regionText">區域的名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>取得或設定區域指示詞的模式。</summary>
      <returns>其中一個 <see cref="T:System.CodeDom.CodeRegionMode" /> 值。 預設為 <see cref="F:System.CodeDom.CodeRegionMode.None" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>取得或設定區域的名稱。</summary>
      <returns>區域的名稱。</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>指定程式碼區域的開頭或結尾。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>區域的結尾。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>未使用。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>區域的開頭。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>表示移除事件處理常式的陳述式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>使用指定的事件與事件處理常式，初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 類別的新執行個體。</summary>
      <param name="eventRef">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" />，表示中斷事件處理常式的來源事件。</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" />，表示要移除的事件處理常式。</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的目標物件、事件名稱和事件處理常式，初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 類別的新執行個體。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，表示包含事件的物件。</param>
      <param name="eventName">事件的名稱。</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" />，表示要移除的事件處理常式。</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>取得或設定將接聽程式移除的來源事件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" />，表示將接聽程式移除的來源事件。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>取得或設定要移除的事件處理常式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示要移除的事件處理常式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>表示可以加以編譯的常值 (Literal) 程式碼片段。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 類別的新執行個體。</summary>
      <param name="value">要表示的常值程式碼片段。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>取得或是設定在原始程式碼文件中，程式碼所在行和檔案的資訊。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" />，表示程式碼片段的位置。</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>取得或設定要表示的常值程式碼片段。</summary>
      <returns>常值程式碼片段。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>表示常值 (Literal) 運算式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>使用指定的常值運算式，來初始化 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 類別的新執行個體。</summary>
      <param name="value">要表示的常值運算式。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>取得或設定程式碼的常值字串。</summary>
      <returns>常值字串。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>表示使用常值 (Literal) 程式碼片段的陳述式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>使用指定的程式碼片段，初始化 <see cref="T:System.CodeDom.CodeSnippetStatement" /> 類別的新執行個體。</summary>
      <param name="value">要表示陳述式的常值程式碼片段。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>取得或設定常值程式碼片段陳述式。</summary>
      <returns>常值程式碼片段陳述式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>表示一個使用常值程式碼片段的型別成員。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>使用指定的文字，來初始化 <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 類別的新執行個體。</summary>
      <param name="text">型別成員的常值程式碼片段。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>取得或設定型別成員的常值程式碼片段。</summary>
      <returns>型別成員的常值程式碼片段。</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>表示可衍生出所有程式碼陳述式 (Statement) 的 <see langword="abstract" /> 基底類別。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>取得包含結尾指示詞的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件，包含結尾指示詞。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>取得或設定程式碼陳述式發生所在的行。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" /> 物件，表示程式碼陳述式的內容。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>取得包含開頭指示詞的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件，包含開頭指示詞。</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeStatement" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 類別的新執行個體，這個執行個體包含 <see cref="T:System.CodeDom.CodeStatement" /> 物件的指定陣列。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeStatement" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 類別的新執行個體，這個執行個體包含指定之來源集合的元素。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeStatementCollection" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeExpression" /> 物件加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeExpression" /> 物件。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeStatement" /> 物件加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeStatement" /> 物件。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>將一組 <see cref="T:System.CodeDom.CodeStatement" /> 物件加入至集合中。</summary>
      <param name="value">要加入至集合中之 <see cref="T:System.CodeDom.CodeStatement" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>將另一個 <see cref="T:System.CodeDom.CodeStatementCollection" /> 物件的內容加入至集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> 物件，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>取得值，這個值表示集合是否包含指定的 <see cref="T:System.CodeDom.CodeStatement" /> 物件。</summary>
      <param name="value">要在集合中搜尋的 <see cref="T:System.CodeDom.CodeStatement" /> 物件。</param>
      <returns>如果集合包含指定的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>從指定的索引開始，將 <see cref="T:System.CodeDom.CodeStatementCollection" /> 物件的項目複製到一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">目的端陣列為多維。  
  
-或- 
在 <see cref="T:System.CodeDom.CodeStatementCollection" /> 中的元素數目大於由 <paramref name="index" /> 參數指定的目標陣列索引和目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>取得 <see cref="T:System.CodeDom.CodeStatement" /> 中指定之 <see cref="T:System.CodeDom.CodeStatementCollection" /> 物件的索引 (如果它存在於集合中的話)。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <returns>如果找到的話，就是集合中指定之物件的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeStatement" /> 物件插入至集合中所指定索引處。</summary>
      <param name="index">以零起始的索引，是應將指定物件插入的位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeStatement" /> 物件。</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.CodeStatement" /> 物件。</summary>
      <param name="value">要從集合中移除的 <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>取得或設定位於集合中所指定索引處的 <see cref="T:System.CodeDom.CodeStatement" /> 物件。</summary>
      <param name="index">要存取的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>在每一個有效索引上的 <see cref="T:System.CodeDom.CodeStatement" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>表示目前的區域類別 (Local Class) 執行個體的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeThisReferenceExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>表示擲回例外狀況的陳述式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的例外狀況型別執行個體，初始化 <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 類別的新執行個體。</summary>
      <param name="toThrow">
        <see cref="T:System.CodeDom.CodeExpression" />，表示要擲回的例外狀況。</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>取得或設定要擲回的例外狀況。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> 表示要擲回的例外狀況執行個體。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>表示 <see langword="try" /> 區塊和任意數目的 <see langword="catch" /> 子句，亦可選擇 <see langword="finally" /> 區塊。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>使用指定的 Try 和 Catch 子句陳述式來初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 類別的新執行個體。</summary>
      <param name="tryStatements">指示 Try 陳述式要處理的 <see cref="T:System.CodeDom.CodeStatement" /> 物件陣列。</param>
      <param name="catchClauses">指示 Catch 子句要處理的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件陣列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>使用指定的 Try 陳述式、Catch 子句和 Finally 陳述式來初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 類別的新執行個體。</summary>
      <param name="tryStatements">指示 Try 陳述式要處理的 <see cref="T:System.CodeDom.CodeStatement" /> 物件陣列。</param>
      <param name="catchClauses">指示 Catch 子句要處理的 <see cref="T:System.CodeDom.CodeCatchClause" /> 物件陣列。</param>
      <param name="finallyStatements">指示 Finally 陳述式要使用的 <see cref="T:System.CodeDom.CodeStatement" /> 物件陣列。</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>取得要使用的 Catch 子句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" />，表示要使用的 Catch 子句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>取得要使用的 Finally 陳述式 (Statement)。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，表示 Finally 陳述式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>取得要嘗試的陳述式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，表示要嘗試的 Try 陳述式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>表示類別的靜態建構函式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeConstructor" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>表示類別、結構、介面或列舉型別的型別宣告。</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>發生於第一次存取 <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> 集合時。</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>發生於第一次存取 <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> 集合時。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>使用指定的名稱，初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 類別的新執行個體。</summary>
      <param name="name">新型別的名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>取得型別的基底型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 物件，表示型別的基底型別。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>取得或設定數值，表示型別是否為類別或參考型別。</summary>
      <returns>如果型別為類別或參考型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>取得或設定數值，表示型別是否為列舉型別。</summary>
      <returns>如果型別為列舉型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>取得或設定數值，表示型別是否為介面。</summary>
      <returns>如果型別為介面，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>取得或設定值，指出型別宣告是完整的，還是部分的。</summary>
      <returns>如果類別或結構宣告是實作的部分表示，則為 <see langword="true" />，如果宣告是類別或結構的完整實作，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>取得或設定值，指出型別是否為實值型別 (結構)。</summary>
      <returns>如果型別為實值型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>取得所表示型別之類別成員的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 物件，表示類別成員。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>取得或設定型別的屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.TypeAttributes" /> 物件，表示型別的屬性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>取得型別宣告的型別參數。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" />，包含型別宣告的型別參數。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 類別的新執行個體，這個執行個體包含 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件的指定陣列。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件的陣列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 類別的新執行個體，這個執行個體包含指定之來源集合的元素。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 物件。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>將指定的陣列元素複製到集合末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>將另一個 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 物件的內容加入至集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 物件，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>取得值，這個值表示集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件。</summary>
      <param name="value">要在集合中搜尋的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件。</param>
      <returns>如果集合包含指定的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>從指定的索引開始，將 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 物件中的項目複製到一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">目的端陣列為多維。  
  
-或- 
在 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 中的元素數目大於由 <paramref name="index" /> 參數指定的目標陣列索引和目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>取得 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 中指定之 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 物件的索引 (如果它存在於集合中的話)。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <returns>如果找到的話，就是集合中指定之物件的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件插入至集合中所指定索引處。</summary>
      <param name="index">以零起始的索引，是應將指定物件插入的位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件。</summary>
      <param name="value">要從集合中移除的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>取得或設定位於集合中所指定索引處的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件。</summary>
      <param name="index">要存取的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>在每一個有效索引上的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>表示委派 (Delegate) 宣告。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDelegate" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDelegate" /> 類別的新執行個體。</summary>
      <param name="name">委派的名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>取得委派的參數。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，表示委派的參數。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>取得或設定委派的傳回型別 (Return Type)。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示委派的傳回型別。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>提供型別成員的基底類別。 型別成員包含欄位、方法、屬性、建構函式 (Constructor) 和巢狀型別。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMember" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>取得或設定成員的屬性 (Attribute)。</summary>
      <returns>
        <see cref="T:System.CodeDom.MemberAttributes" /> 值的位元組合，用來指示成員的屬性。 預設值是 <see cref="F:System.CodeDom.MemberAttributes.Private" /> | <see cref="F:System.CodeDom.MemberAttributes.Final" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>取得型別成員的註解集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" />，表示成員的註解。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>取得或設定成員的自訂屬性。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，表示成員的自訂屬性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>取得成員的結尾指示詞。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件，包含結尾指示詞。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>取得或設定型別成員陳述式 (Statement) 所在的行。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" /> 物件，表示型別成員宣告的位置。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>取得或設定成員的名稱。</summary>
      <returns>成員的名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>取得成員的開頭指示詞。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 物件，包含開頭指示詞。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeMember" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 類別 (含有 <see cref="T:System.CodeDom.CodeTypeMember" /> 物件的指定陣列) 的新執行個體。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeTypeMember" /> 物件的陣列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 類別 (含有指定來源集合的元素) 的新執行個體。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeTypeMemberCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>將有指定值的 <see cref="T:System.CodeDom.CodeTypeMember" /> 加入至集合中。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeTypeMember" /> 陣列元素複製到集合的末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>將另一個 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 的內容加入至集合末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" />，含有要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>取得值，表示集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <param name="value">要在集合中搜尋的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns>如果集合包含指定的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>將集合物件複製到一維 <see cref="T:System.Array" /> 執行個體，開始於指定的索引。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">目的端陣列為多維。  
  
-或- 
在 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 中的元素數目大於由 <paramref name="index" /> 參數指定的目標陣列索引和目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>請取得在指定的 <see cref="T:System.CodeDom.CodeTypeMember" /> 集合中的索引 (如果它存在於集合中)。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns>如果找到的話，索引位於指定物件的集合中，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeTypeMember" /> 插入至集合中的指定索引處。</summary>
      <param name="index">以零起始的索引，是應將指定物件插入的位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <param name="value">要從集合中移除的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>取得或設定在集合的指定索引上的 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <param name="index">要存取的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>在每一個有效索引上的 <see cref="T:System.CodeDom.CodeTypeMember" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>表示 <see langword="typeof" /> 運算式，它會傳回指定型別名稱的 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示 <see langword="typeof" /> 運算式的資料型別。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>使用指定的型別，初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 類別的新執行個體。</summary>
      <param name="type">
        <see langword="typeof" /> 運算式的資料型別名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>使用指定的型別，初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 類別的新執行個體。</summary>
      <param name="type">
        <see langword="typeof" /> 運算式資料型別的資料型別。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>取得或設定 <see langword="typeof" /> 運算式所參考的資料型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示 <see langword="typeof" /> 運算式所參考的資料型別。 這個屬性永遠不會傳回 <see langword="null" />，並預設值為 <see cref="T:System.Void" /> 型別。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>表示泛型型別或方法的型別參數。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>使用指定的型別參數名稱，初始化 <see cref="T:System.CodeDom.CodeTypeParameter" /> 類別的新執行個體。</summary>
      <param name="name">型別參數的名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>取得型別參數的條件約束。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 物件，包含型別參數的條件約束。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>取得型別參數的自訂屬性。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，表示型別參數的自訂屬性。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>取得或設定值，指出型別參數是否具有建構函式條件約束。</summary>
      <returns>如果型別參數具有建構函式條件約束，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>取得或設定型別參數的名稱。</summary>
      <returns>型別參數的名稱。 預設為空字串 ("")。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 類別的新的空執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 類別 (含有 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件的指定陣列) 的新執行個體。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件的陣列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 類別 (含有指定來源集合的元素) 的新執行個體。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
      <returns>要插入新項目之以零起始的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>使用指定的資料型別名稱，將指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件加入至集合。</summary>
      <param name="value">資料型別的名稱，要將該資料型別的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件加入至集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 陣列元素複製到集合的末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>將指定 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 的元素複製到集合結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" />，包含要加入至集合的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>判斷集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件。</summary>
      <param name="value">要在集合中搜尋的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件。</param>
      <returns>如果集合中包含 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>將集合中的項目複製到指定索引處指定的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維的。  
  
-或- 
<see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 中的項目數，大於 <paramref name="index" /> 指定的目標陣列索引與目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>取得指定 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件在集合中的索引 (如果它存在於集合中)。</summary>
      <param name="value">要放置在集合中的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件。</param>
      <returns>集合中所指定 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件之以零起始的索引 (如果找得到)，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件插入至集合中所指定索引處。</summary>
      <param name="index">要插入項目之以零起始的索引位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件。</summary>
      <param name="value">要從集合移除的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>取得或設定位於集合中所指定索引處的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件。</summary>
      <param name="index">要存取之集合物件以零起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出集合索引的有效範圍。</exception>
      <returns>位於指定索引處的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 物件。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>表示型別的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>使用指定的程式碼型別參數，初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 類別的新執行個體。</summary>
      <param name="typeParameter">
        <see cref="T:System.CodeDom.CodeTypeParameter" />，表示型別參數的型別。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>使用指定的陣列型別和陣序，初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 類別的新執行個體。</summary>
      <param name="arrayType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示陣列的型別。</param>
      <param name="rank">陣列中維度的數目。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>使用指定的型別名稱，初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 類別的新執行個體。</summary>
      <param name="typeName">要參考的型別名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>使用指定的型別名稱和型別引數，初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 類別的新執行個體。</summary>
      <param name="typeName">要參考的型別名稱。</param>
      <param name="typeArguments">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 值的陣列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>使用指定的型別名稱和程式碼型別參考選項，初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 類別的新執行個體。</summary>
      <param name="typeName">要參考的型別名稱。</param>
      <param name="codeTypeReferenceOption">程式碼型別參考選項 (其中一個 <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 值)。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>使用指定的陣列型別名稱和陣序，初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 類別的新執行個體。</summary>
      <param name="baseType">陣列元素的型別名稱。</param>
      <param name="rank">陣列維度的數目。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>使用指定的型別，初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 類別的新執行個體。</summary>
      <param name="type">要參考的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>使用指定的型別和程式碼型別參考，初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 類別的新執行個體。</summary>
      <param name="type">要參考的 <see cref="T:System.Type" />。</param>
      <param name="codeTypeReferenceOption">程式碼型別參考選項 (其中一個 <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 值)。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>取得或設定陣列中的元素型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示陣列元素的型別。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>取得或設定陣列的陣列陣序。</summary>
      <returns>陣列維度的數目。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>取得或設定要參考的型別名稱。</summary>
      <returns>所參考的型別名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>取得或設定程式碼型別參考選項。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 值的位元組合。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>取得目前泛型型別參考的型別引數。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，包含目前 <see cref="T:System.CodeDom.CodeTypeReference" /> 物件的型別引數。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeReference" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 類別 (含有 <see cref="T:System.CodeDom.CodeTypeReference" /> 物件的指定陣列) 的新執行個體。</summary>
      <param name="value">用於初始化集合之 <see cref="T:System.CodeDom.CodeTypeReference" /> 物件的陣列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 類別 (含有指定來源集合的元素) 的新執行個體。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 加入至集合。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>使用指定的資料型別名稱，將 <see cref="T:System.CodeDom.CodeTypeReference" /> 加入至集合。</summary>
      <param name="value">資料型別名稱，要為其將 <see cref="T:System.CodeDom.CodeTypeReference" /> 加入至集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>使用指定的資料型別，將 <see cref="T:System.CodeDom.CodeTypeReference" /> 加入至集合。</summary>
      <param name="value">資料型別，要為其將 <see cref="T:System.CodeDom.CodeTypeReference" /> 加入至集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 陣列元素複製到集合的末端。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>將指定的 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 內容加入至集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，含有要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>取得值，表示集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="value">要在集合中搜尋的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>如果 <see cref="T:System.CodeDom.CodeTypeReference" /> 包含在集合裡，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>將集合中的項目複製到指定索引處指定的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製之值的目的端。</param>
      <param name="index">要開始插入的陣列索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維參數。  
  
-或- 
在 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 中的元素數目大於由 <paramref name="index" /> 參數指定的目標陣列索引和目標陣列結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於目標陣列的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>請取得在指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 集合中的索引 (如果它存在於集合中)。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>如果找到的話，指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 索引會在集合中，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>將 <see cref="T:System.CodeDom.CodeTypeReference" /> 插入集合中指定的索引處。</summary>
      <param name="index">以零起始的索引，是應插入項目的位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>從集合移除指定的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="value">要從集合中移除的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>取得或設定在集合的指定索引上的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="index">要存取的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數超出集合索引的有效範圍。</exception>
      <returns>在每一個有效索引上的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>表示資料型別的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>使用指定的型別，初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示要參考的資料型別。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>使用指定的資料型別名稱，初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 類別的新執行個體。</summary>
      <param name="type">要參考的資料型別名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>使用指定的資料型別，初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 類別的新執行個體。</summary>
      <param name="type">要參考的資料型別的執行個體。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>取得或設定要參考的資料型別。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示要參考的資料型別。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>指定如何解析程式碼型別參考。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>解析型別參數中的型別。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>解析根命名空間中的型別。</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>表示變數宣告。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>使用指定的型別和名稱來初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 指示變數的資料型別。</param>
      <param name="name">變數的名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的資料型別、變數名稱和初始化運算式，初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示變數的型別。</param>
      <param name="name">變數的名稱。</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，表示變數的初始化運算式。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>使用指定的資料型別名稱和變數名稱來初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 類別的新執行個體。</summary>
      <param name="type">變數的資料型別名稱。</param>
      <param name="name">變數的名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的資料型別、變數名稱和初始化運算式，初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 類別的新執行個體。</summary>
      <param name="type">變數的資料型別名稱。</param>
      <param name="name">變數的名稱。</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，表示變數的初始化運算式。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>使用指定的資料型別和變數名稱來初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 類別的新執行個體。</summary>
      <param name="type">變數的資料型別。</param>
      <param name="name">變數的名稱。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的資料型別、變數名稱和初始化運算式，初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 類別的新執行個體。</summary>
      <param name="type">變數的資料類型。</param>
      <param name="name">變數的名稱。</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，表示變數的初始化運算式。</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>取得或設定變數的初始化運算式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，表示變數的初始化運算式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>取得或設定變數的名稱。</summary>
      <returns>變數的名稱。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>取得或設定變數的資料類型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> 指示變數的資料型別。</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>表示區域變數的參考。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>使用指定的區域變數名稱，初始化 <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 類別的新執行個體。</summary>
      <param name="variableName">要參考的區域變數名稱。</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>取得或設定要參考的區域變數名稱。</summary>
      <returns>要參考的區域變數名稱。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>提供 <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 介面的範例實作。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeCompiler" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>從指定的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 取得要傳遞至編譯器的命令引數。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" />，表示編譯器選項。</param>
      <returns>命令引數。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>使用指定的選項來編譯指定的編譯單位，並從編譯傳回結果。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 物件，表示要編譯的來源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 為 <see langword="null" />。</exception>
      <returns>編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>使用指定的選項來編譯指定的編譯單位，並從編譯傳回結果。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="ea">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 物件的陣列，表示要編譯的來源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="ea" /> 為 <see langword="null" />。</exception>
      <returns>編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>使用指定的選項來編譯指定的檔案，並從編譯傳回結果。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="fileName">要編譯的檔名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="fileName" /> 為 <see langword="null" />。</exception>
      <returns>編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>使用指定的選項來編譯指定的檔案，並從編譯傳回結果。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="fileNames">字串的陣列，表示要編譯的檔案名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="fileNames" /> 為 <see langword="null" />。</exception>
      <returns>編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>使用指定的選項來編譯指定的原始程式碼字串，並從編譯傳回結果。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="source">要編譯的原始程式碼字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 為 <see langword="null" />。</exception>
      <returns>編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>使用指定的選項來編譯指定的原始程式碼字串，並從編譯傳回結果。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="sources">字串的陣列，包含要編譯的原始程式碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="sources" /> 為 <see langword="null" />。</exception>
      <returns>編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>取得叫用編譯器以產生回應檔 (Response File) 時所使用的命令引數。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="cmdArgs">命令引數字串。</param>
      <returns>用來產生回應檔的命令引數；如果沒有回應檔引數，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>聯結指定的字串陣列。</summary>
      <param name="sa">要聯結的字串陣列。</param>
      <param name="separator">要使用的分隔符號。</param>
      <returns>串連的字串。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>處理來自指定的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 之指定行。</summary>
      <param name="results">
        <see cref="T:System.CodeDom.Compiler.CompilerResults" />，表示編譯的結果。</param>
      <param name="line">要處理的行。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCompileUnit" />，表示要編譯的來源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 為 <see langword="null" />。</exception>
      <returns>編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="ea">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 物件的陣列，表示要編譯的來源。</param>
      <returns>編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="fileName">要編譯的檔名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 為 <see langword="null" />。</exception>
      <returns>編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="fileNames">字串的陣列，指出要編譯的檔案名稱。</param>
      <returns>編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="source">字串，表示要編譯的原始程式碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 為 <see langword="null" />。</exception>
      <returns>編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯器選項。</param>
      <param name="sources">字串的陣列，表示要編譯的原始程式碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 為 <see langword="null" />。</exception>
      <returns>編譯的結果。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>取得編譯器可執行檔的名稱。</summary>
      <returns>編譯器可執行檔的名稱。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>取得原始程式檔使用的副檔名。</summary>
      <returns>原始程式檔使用的副檔名。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>提供基底類別 (Base Class) 給 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作。 這個類別是抽象的。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>使用指定的編譯器設定，根據 <see cref="N:System.CodeDom" /> 物件之指定陣列所包含的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 樹狀結構，編譯一個組件。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，指示編譯的設定值。</param>
      <param name="compilationUnits">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 型別的陣列，表示要編譯的程式碼。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法都沒有在衍生類別中覆寫。</exception>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，指示編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>使用指定的編譯器設定，在指定檔案所包含的原始程式碼中，編譯組件。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，指示編譯的設定值。</param>
      <param name="fileNames">要編譯的檔案名稱陣列。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法都沒有在衍生類別中覆寫。</exception>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，表示編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>使用指定的編譯器設定，在含有原始程式碼的指定陣列中，編譯一個組件。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，指示這個編譯的編譯器設定。</param>
      <param name="sources">要編譯的原始程式碼字串陣列。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法都沒有在衍生類別中覆寫。</exception>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，表示編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>在衍生類別中覆寫時，請建立新的程式碼編譯器。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />，可以用來編譯以 <see cref="N:System.CodeDom" /> 為基礎的原始程式碼表示。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>為指定值建立逸出識別項。</summary>
      <param name="value">要建立逸出識別項的字串。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</exception>
      <returns>值的逸出識別項。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>在衍生類別中覆寫時，請建立新的程式碼產生器。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可以用來產生以 <see cref="N:System.CodeDom" /> 為基礎的原始程式碼表示。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>在衍生類別中覆寫時，請使用指定的輸出 <see cref="T:System.IO.TextWriter" /> 建立新的程式碼產生器。</summary>
      <param name="output">用來輸出的 <see cref="T:System.IO.TextWriter" />。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可以用來產生以 <see cref="N:System.CodeDom" /> 為基礎的原始程式碼表示。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>在衍生類別中覆寫時，請使用指定的輸出檔名建立新的程式碼產生器。</summary>
      <param name="fileName">要輸出的檔案名稱。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可以用來產生以 <see cref="N:System.CodeDom" /> 為基礎的原始程式碼表示。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>在衍生類別中覆寫時，請建立新的程式碼剖析器。</summary>
      <returns>可以用來剖析原始程式碼的 <see cref="T:System.CodeDom.Compiler.ICodeParser" />。 這個基底實作一定會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>取得指定語言的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 執行個體。</summary>
      <param name="language">語言名稱。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> 在這部電腦上沒有已設定的提供者。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>為特定語言名稱實作的 CodeDOM 提供者。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>取得指定之語言和提供者選項的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 執行個體。</summary>
      <param name="language">語言名稱。</param>
      <param name="providerOptions">來自組態檔的提供者選項集合。</param>
      <returns>為特定語言名稱和選項實作的 CodeDOM 提供者。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>為指定值建立有效的識別項。</summary>
      <param name="value">要產生有效識別項的字串。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</exception>
      <returns>指定值的有效識別項。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>產生指定程式碼文件物件模型 (CodeDOM) 編譯單位 (Compilation Unit) 的程式碼，並使用指定的選項將其傳送至指定的文字寫入器。</summary>
      <param name="compileUnit">要為其產生程式碼的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <param name="writer">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>產生指定程式碼文件物件模型 (CodeDOM) 運算式的程式碼，並使用指定的選項將其傳送至指定的文字寫入器。</summary>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> 物件，指示要為其產生程式碼的運算式。</param>
      <param name="writer">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>產生指定程式碼文件物件模型 (CodeDOM) 成員宣告的程式碼，並使用指定的選項將其傳送至指定的文字寫入器。</summary>
      <param name="member">
        <see cref="T:System.CodeDom.CodeTypeMember" /> 物件，指示要為其產生程式碼的成員。</param>
      <param name="writer">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</param>
      <exception cref="T:System.NotImplementedException">不可以在衍生類別中覆寫這個方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>產生指定程式碼文件物件模型 (CodeDOM) 命名空間的程式碼，並使用指定選項將其傳送至指定的文字寫入器。</summary>
      <param name="codeNamespace">
        <see cref="T:System.CodeDom.CodeNamespace" /> 物件，指示要為其產生程式碼的命名空間。</param>
      <param name="writer">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>產生指定程式碼文件物件模型 (CodeDOM) 陳述式的程式碼，並使用指定選項將其傳送至指定的文字寫入器。</summary>
      <param name="statement">
        <see cref="T:System.CodeDom.CodeStatement" />，包含要為其產生程式碼的 CodeDOM 項目。</param>
      <param name="writer">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>產生指定程式碼文件物件模型 (CodeDOM) 型別宣告的程式碼，並使用指定選項將其傳送至指定的文字寫入器。</summary>
      <param name="codeType">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 物件，指示要為其產生程式碼的型別。</param>
      <param name="writer">接收輸出程式碼的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>傳回這部電腦的語言提供者和編譯器組態設定。</summary>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 型別的陣列，表示所有已設定 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作的設定。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>傳回指定語言的語言提供者和編譯器組態設定。</summary>
      <param name="language">語言名稱。</param>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="language" /> 在這部電腦上沒有已設定的提供者。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>已設定 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 實作設定填入的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 物件。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>取得指定資料型別的 <see cref="T:System.ComponentModel.TypeConverter" />。</summary>
      <param name="type">物件的類型，要為其擷取類型轉換子。</param>
      <returns>如果找不到特定型別的 <see cref="T:System.ComponentModel.TypeConverter" />，則為特定型別的 <see cref="T:System.ComponentModel.TypeConverter" /> 或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>傳回與指定副檔名關聯的語言名稱，如 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 編譯器組態區段的設定。</summary>
      <param name="extension">副檔名。</param>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="extension" /> 在這部電腦上沒有已設定的語言提供者。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="extension" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>與指定副檔名關聯的語言名稱，如 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 編譯器組態設定的設定。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>取得由指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 所指示的型別。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示要傳回的型別。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</exception>
      <returns>指定型別的文字表示，針對這個程式碼產生器產生程式碼所使用的語言格式化。 例如，在 Visual Basic 中，傳入 <see cref="T:System.CodeDom.CodeTypeReference" /> 型別的 <see cref="T:System.Int32" /> 會傳回 "Integer"。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>測試副檔名在電腦上是否已設定關聯的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作。</summary>
      <param name="extension">副檔名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>如果指定副檔名已設定 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>測試語言在電腦上是否已設定 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作。</summary>
      <param name="language">語言名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>如果指定語言已設定 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 實作，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>傳回值，指出指定的值是否為目前語言的有效識別項。</summary>
      <param name="value">要驗證為有效識別項的值。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</exception>
      <returns>如果 <paramref name="value" /> 參數是有效的識別項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>將指定文字資料流中所讀取的程式碼編譯成 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <param name="codeStream">
        <see cref="T:System.IO.TextReader" /> 物件，用於讀取要剖析的程式碼。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</exception>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" />，含有剖析程式碼的表示。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>傳回值，指出是否提供指定程式碼產生支援。</summary>
      <param name="generatorSupport">
        <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 物件，指示要驗證的程式碼產生支援型別。</param>
      <exception cref="T:System.NotImplementedException">此方法或 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法都沒有在衍生類別中覆寫。</exception>
      <returns>如果提供指定程式碼產生支援，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>取得目前語言的原始程式碼檔案所使用的預設副檔名。</summary>
      <returns>對應至目前語言的原始程式碼的檔案名稱的副檔名。 這個基底實作一定會傳回 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>取得語言功能識別項。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" />，表示語言的特殊功能。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>提供 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 介面的範例實作。 這個類別是抽象的。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>將 <see cref="T:System.CodeDom.Compiler.CodeGenerator" /> 類別的新執行個體初始化。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>產生行接續字元 (Line-Continuation Character)，並將指定字串輸出到新行上。</summary>
      <param name="st">要寫入新行的字串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>為指定值建立逸出識別項。</summary>
      <param name="value">要建立逸出識別項的字串。</param>
      <returns>值的逸出識別項。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>為指定值建立有效的識別項。</summary>
      <param name="value">要建立有效識別項的字串。</param>
      <returns>值的有效識別項。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>為指定的引數參考運算式產生程式碼。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />，指出要為其產生程式碼的運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>為指定的陣列建立運算式產生程式碼。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArrayCreateExpression" />，指出要為其產生程式碼的運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>為指定的陣列索引子運算式產生程式碼。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />，指出要為其產生程式碼的運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>為指定的指派陳述式 (Assignment Statement) 產生程式碼。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeAssignStatement" />，指出要為其產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>為指定的附加事件陳述式產生程式碼。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeAttachEventStatement" />，指出要為其產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>為指定的屬性區塊結尾產生程式碼。</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指出要為其產生程式碼的屬性區塊結尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>為指定的屬性區塊起始產生程式碼。</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指出要為其產生程式碼的屬性區塊起始。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>為指定的基底參考運算式產生程式碼。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />，指出要為其產生程式碼的運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>為指定的二元運算子運算式產生程式碼。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />，指出要為其產生程式碼的運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>為指定的型別轉換運算式產生程式碼。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCastExpression" />，指出要為其產生程式碼的運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>使用指定的文字寫入器與程式碼產生器選項，產生指定類別成員的程式碼。</summary>
      <param name="member">要為其產生程式碼的類別成員。</param>
      <param name="writer">程式碼要輸出到的文字寫入器。</param>
      <param name="options">用來產生程式碼的選項。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> 屬性不是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>為指定的註解產生程式碼。</summary>
      <param name="e">要為其產生程式碼的 <see cref="T:System.CodeDom.CodeComment" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>為指定的註解陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
      <exception cref="T:System.ArgumentException">未設定 <paramref name="e" /> 的 <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> 屬性。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>為指定的註解陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>為指定的編譯單位產生程式碼。</summary>
      <param name="e">要產生程式碼的編譯單元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>為編譯單位的結尾產生程式碼。</summary>
      <param name="e">要產生程式碼的編譯單元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>為編譯單位的起始產生程式碼。</summary>
      <param name="e">要產生程式碼的編譯單元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>為指定的條件陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>為指定的建構函式 (Constructor) 產生程式碼。</summary>
      <param name="e">要為其產生程式碼的建構函式。</param>
      <param name="c">這個建構函式所建構的物件型別。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>為指定的十進位值產生程式碼。</summary>
      <param name="d">要為其產生程式碼的十進位值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>為指定的預設值參考產生程式碼。</summary>
      <param name="e">要為其產生程式碼的參考。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>為指定的委派建立運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>為指定的委派叫用 (Invoke) 運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>為指定的方向運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>為指定的程式碼指示詞產生程式碼。</summary>
      <param name="directives">要為其產生程式碼的程式碼指示詞。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>為雙精確度浮點數產生程式碼。</summary>
      <param name="d">要為其產生程式碼的值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>為指定的進入點 (Entry Point) 方法產生程式碼。</summary>
      <param name="e">程式碼的進入點。</param>
      <param name="c">宣告型別的程式碼。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>為指定的事件產生程式碼。</summary>
      <param name="e">要為其產生程式碼的成員事件。</param>
      <param name="c">發生這個事件的物件型別。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>為指定的事件參考運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>為指定的程式碼運算式產生程式碼。</summary>
      <param name="e">要為其產生程式碼的程式碼運算式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 不是有效的 <see cref="T:System.CodeDom.CodeStatement" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>為指定的運算式陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>為指定的成員欄位產生程式碼。</summary>
      <param name="e">要為其產生程式碼的欄位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>為指定的欄位參考運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>為指定的 <see langword="goto" /> 陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>為指定的索引子運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>為指定的重複陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>為指定的標記陳述式 (Labeled Statement) 產生程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>為指定的行 Pragma 結尾產生程式碼。</summary>
      <param name="e">要為其產生程式碼的行 Pragma 結尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>為指定的行 Pragma 起始產生程式碼。</summary>
      <param name="e">要為其產生程式碼的行 Pragma 開頭。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>為指定的方法產生程式碼。</summary>
      <param name="e">要為其產生程式碼的成員方法。</param>
      <param name="c">發生這個方法的物件型別。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>為指定的方法叫用運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>為指定的方法參考運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>為指定的方法傳回陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>為指定的命名空間 (Namespace) 產生程式碼。</summary>
      <param name="e">要產生其程式碼的命名空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>為命名空間的結尾產生程式碼。</summary>
      <param name="e">要產生其程式碼的命名空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>為指定的命名空間匯入產生程式碼。</summary>
      <param name="e">要為其產生程式碼的命名空間匯入。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>為指定的命名空間匯入產生程式碼。</summary>
      <param name="e">要為其產生程式碼的命名空間匯入。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>為指定編譯單位中的命名空間產生程式碼。</summary>
      <param name="e">要為其產生命名空間的編譯單位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>為命名空間的起始產生程式碼。</summary>
      <param name="e">要產生其程式碼的命名空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>為指定的物件建立運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>為指定的參數宣告運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>為指定的原始運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 使用無效的資料型別。 只有下列各項才是有效的資料型別： 
-   字串 
-   字元 
-   位元組 
-   Int16 
-   Int32 
-   Int64 
-   單精確度 
-   雙精確度 
-   十進位</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>為指定的屬性產生程式碼。</summary>
      <param name="e">要為其產生程式碼的屬性。</param>
      <param name="c">發生這個屬性的物件型別。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>為指定的屬性參考運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>為指定的屬性集 (Property Set) 數值參考運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>為指定的移除事件陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>為單精確度浮點數產生程式碼。</summary>
      <param name="s">要為其產生程式碼的值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>輸出指定常值程式碼片段編譯單位的程式碼。</summary>
      <param name="e">要為其產生程式碼的常值程式碼片段編譯單位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>輸出指定常值程式碼片段運算式的程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>輸出指定常值程式碼片段類別成員的程式碼。</summary>
      <param name="e">要為其產生程式碼的成員。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>輸出指定常值程式碼片段陳述式的程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>為指定的陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 不是有效的 <see cref="T:System.CodeDom.CodeStatement" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>為指定的陳述式集合產生程式碼。</summary>
      <param name="stmts" />
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>為指定的 this 參考運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>為指定的擲回例外狀況 (Exception) 陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>為指定的 <c>try-catch-finally</c> 陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>為指定的類別建構函式產生程式碼。</summary>
      <param name="e">要為其產生程式碼的類別建構函式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>為指定的類別結尾產生程式碼。</summary>
      <param name="e">要為其產生程式碼的類別結尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>為指定的運算式型別產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>為指定的型別參考運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>為指定的命名空間和其所包含的類別產生程式碼。</summary>
      <param name="e">要為其產生類別的命名空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>為指定的類別開頭產生程式碼。</summary>
      <param name="e">要為其產生程式碼的類別開頭。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>為指定的變數宣告陳述式產生程式碼。</summary>
      <param name="e">要產生程式碼的陳述式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>為指定的變數參考運算式產生程式碼。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>取得指定資料型別的名稱。</summary>
      <param name="value">要傳回其名稱的型別。</param>
      <returns>資料型別參考的名稱。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>取得值，指出指定值是否為有效的識別項。</summary>
      <param name="value">要測試有效識別項衝突的值。</param>
      <returns>如果值是有效的識別項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>取得一個數值，指出指定值是否為有效識別項。</summary>
      <param name="value">要測試有效性的字串。</param>
      <returns>如果指定字串是有效的識別項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>輸出屬性區塊中的引數。</summary>
      <param name="arg">要為其產生程式碼的屬性引數。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>為指定的屬性宣告集合產生程式碼。</summary>
      <param name="attributes">要為其產生程式碼的屬性。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>為指定的 <see cref="T:System.CodeDom.FieldDirection" /> 產生程式碼。</summary>
      <param name="dir">一個列舉值，表示欄位的屬性。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>為指定的運算式清單產生程式碼。</summary>
      <param name="expressions">要為其產生程式碼的運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>為指定的運算式清單產生程式碼。</summary>
      <param name="expressions">要為其產生程式碼的運算式。</param>
      <param name="newlineBetweenItems">若要在每個項目後面插入新行，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>輸出對應於指定屬性的欄位範圍修飾詞 (Modifier)。</summary>
      <param name="attributes">一個指定屬性的列舉值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>輸出指定的識別項。</summary>
      <param name="ident">要輸出的識別項。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>為指定的成員存取修飾詞產生程式碼。</summary>
      <param name="attributes">一個列舉值，表示要為其產生程式碼的成員存取修飾詞。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>為指定的成員範圍修飾詞產生程式碼。</summary>
      <param name="attributes">一個列舉值，表示要為其產生程式碼的成員範圍修飾詞。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>為指定的運算子產生程式碼。</summary>
      <param name="op">要為其產生程式碼的運算子。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>為指定的參數產生程式碼。</summary>
      <param name="parameters">要為其產生程式碼的參數宣告運算式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>為指定的型別產生程式碼。</summary>
      <param name="typeRef">要產生其程式碼的型別。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>為指定的型別屬性產生程式碼。</summary>
      <param name="attributes">一個列舉值，表示要為其產生程式碼的型別屬性。</param>
      <param name="isStruct">如果型別為結構，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="isEnum">如果型別為列舉型別，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>為指定的物件型別和名稱配對產生程式碼。</summary>
      <param name="typeRef">類型。</param>
      <param name="name">物件的名稱。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>以逸出程式碼格式化，以轉換指定的字串。</summary>
      <param name="value">要轉換的字串。</param>
      <returns>轉換的字串。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>取得值，指出是否提供指定程式碼產生支援。</summary>
      <param name="support">要測試的程式碼產生支援類型。</param>
      <returns>如果提供指定程式碼產生支援，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>為指定值建立逸出識別項。</summary>
      <param name="value">要建立逸出識別項的字串。</param>
      <returns>值的逸出識別項。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>為指定值建立有效的識別項。</summary>
      <param name="value">要產生有效識別項的字串。</param>
      <returns>指定值的有效識別項。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>為指定的程式碼文件物件模型 (CodeDOM) 編譯單位產生程式碼，並使用指定的選項將它輸出到指定的文字寫入器。</summary>
      <param name="e">要產生程式碼的 CodeDOM 編譯單位。</param>
      <param name="w">程式碼要輸出到的文字寫入器。</param>
      <param name="o">要用於產生程式碼的選項。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 無法使用。 在進行方法呼叫之前可能已關閉 <paramref name="w" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>為指定的程式碼文件物件模型 (CodeDOM) 運算式產生程式碼，並將它輸出到指定的文字寫入器。</summary>
      <param name="e">要產生程式碼的目標運算式。</param>
      <param name="w">程式碼要輸出到的文字寫入器。</param>
      <param name="o">要用於產生程式碼的選項。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 無法使用。 在進行方法呼叫之前可能已關閉 <paramref name="w" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>為指定的程式碼文件物件模型 (CodeDOM) 命名空間產生程式碼，並使用指定的選項將它輸出到指定的文字寫入器。</summary>
      <param name="e">要產生其程式碼的命名空間。</param>
      <param name="w">程式碼要輸出到的文字寫入器。</param>
      <param name="o">要用於產生程式碼的選項。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 無法使用。 在進行方法呼叫之前可能已關閉 <paramref name="w" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>為指定的程式碼文件物件模型 (CodeDOM) 陳述式產生程式碼，並使用指定的選項將它輸出到指定的文字寫入器。</summary>
      <param name="e">包含要轉譯的 CodeDOM 項目的陳述式。</param>
      <param name="w">程式碼要輸出到的文字寫入器。</param>
      <param name="o">要用於產生程式碼的選項。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 無法使用。 在進行方法呼叫之前可能已關閉 <paramref name="w" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>為指定的程式碼文件物件模型 (CodeDOM) 型別宣告產生程式碼，並使用指定的選項將它輸出到指定的文字寫入器。</summary>
      <param name="e">要產生其程式碼的型別。</param>
      <param name="w">程式碼要輸出到的文字寫入器。</param>
      <param name="o">要用於產生程式碼的選項。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 無法使用。 在進行方法呼叫之前可能已關閉 <paramref name="w" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>取得由指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 所指示的型別。</summary>
      <param name="type">要傳回的型別。</param>
      <returns>資料型別參考的名稱。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>取得指示數值，表示指定的值是否為目前語言的有效識別項。</summary>
      <param name="value">要測試的值。</param>
      <returns>如果 <paramref name="value" /> 參數是有效的識別項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>取得值，指出產生器是否支援指定 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 物件所表示的語言功能。</summary>
      <param name="support">要測試的產生器能力。</param>
      <returns>如果支援指定的能力，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>如果指定值不是有效的識別項會擲回例外狀況。</summary>
      <param name="value">要驗證的識別項。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>如果指定字串不是有效的識別項，即擲回例外狀況。</summary>
      <param name="value">用來測試識別項有效性的識別項。</param>
      <exception cref="T:System.ArgumentException">如果指定的識別項無效，或者與保留或語言關鍵字發生衝突。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>嘗試驗證指定 <see cref="T:System.CodeDom.CodeObject" /> 或 <see cref="N:System.CodeDom" /> 樹狀結構中所包含的每個識別項欄位。</summary>
      <param name="e">要測試識別項是否無效的物件。</param>
      <exception cref="T:System.ArgumentException">指定的 <see cref="T:System.CodeDom.CodeObject" /> 包含無效的識別項。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>取得目前類別的程式碼類型宣告。</summary>
      <returns>目前類別的程式碼類型宣告。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>取得類別的目前成員。</summary>
      <returns>類別的目前成員。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>取得目前成員名稱。</summary>
      <returns>目前成員的名稱。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>取得目前類別的名稱。</summary>
      <returns>目前類別的名稱。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>取得或設定縮排每個縮排層次的空格數量。</summary>
      <returns>每個縮排層次的縮排空格數量。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>取得值，指出目前產生的物件是否為類別。</summary>
      <returns>如果目前的物件為類別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>取得值，指出目前產生的物件是否為委派。</summary>
      <returns>如果目前的物件為委派，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>取得值，指出目前產生的物件是否為列舉型別 (Enumeration)。</summary>
      <returns>如果目前的物件是列舉型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>取得值，指出目前產生的物件是否為介面。</summary>
      <returns>如果目前的物件是介面，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>取得值，指出目前產生的物件是否為實值型別 (Value Type) 或結構。</summary>
      <returns>如果目前的物件是實值型別或結構，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>取得表示 <see langword="null" /> 的語彙基元 (Token)。</summary>
      <returns>表示 <see langword="null" /> 的語彙基元。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>取得程式碼產生器使用的選項。</summary>
      <returns>物件，表示程式碼產生器使用的選項。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>取得要用於輸出的文字寫入器。</summary>
      <returns>要用於輸出的文字寫入器。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>表示程式碼產生器使用的選項集。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>取得或設定值，指出是否在成員間插入空白行。</summary>
      <returns>如果應該插入空白行，則為 <see langword="true" />，否則為 <see langword="false" />。 根據預設值，這個屬性的值為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>取得或設定要使用的括號樣式。</summary>
      <returns>字串，包含要使用的括號樣式。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>取得或設定值，指出是否在先前每一個 <see langword="else" /> 或 <see langword="catch" /> 區塊的結尾行處，附加包含括號的 <see langword="finally" />、<see langword="if" /> 或 <see langword="try" /> 區塊。</summary>
      <returns>如果應該附加，則為 <see langword="true" />，否則為 <see langword="false" />。 此屬性的預設值為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>取得或設定用來縮排的字串。</summary>
      <returns>字串，包含用來縮排的字元。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>取得或設定在指定索引處的物件。</summary>
      <param name="index">要擷取之物件的相關名稱。</param>
      <returns>指定名稱相關的物件。 如果集合中沒有與指定名稱相關的物件，則為 <see langword="null" /> 參考。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>取得或設定值，表示是否要依照成員集合中的順序產生成員。</summary>
      <returns>
        <see langword="true" /> 表示要依照成員集合中的順序產生成員，否則為 <see langword="false" />。 此屬性的預設值為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>提供 <see cref="T:System.CodeDom.Compiler.ICodeParser" /> 介面的空白實作。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeParser" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>編譯指定的文字資料流至 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <param name="codeStream">
        <see cref="T:System.IO.TextReader" />，用於讀取要剖析的程式碼。</param>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 包含剖析程式碼所產生的程式碼模型。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>表示編譯器錯誤或警告。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>使用指定的檔名、行、欄、錯誤代碼和錯誤文字來初始化 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 類別的新執行個體。</summary>
      <param name="fileName">編譯器發生錯誤時正在編譯的檔案名稱。</param>
      <param name="line">錯誤來源的行。</param>
      <param name="column">錯誤來源的欄。</param>
      <param name="errorNumber">錯誤的錯誤代碼。</param>
      <param name="errorText">錯誤訊息文字。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>提供物件之 <see cref="M:System.Object.ToString" /> 方法的實作。</summary>
      <returns>編譯器錯誤的字串表示。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>取得或設定發生錯誤的來源的欄號。</summary>
      <returns>編譯器在原始程式檔 (Source File) 發生錯誤的欄位號碼。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>取得或設定錯誤代碼。</summary>
      <returns>做為字串 (String) 的錯誤代碼。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>取得或設定錯誤訊息的文字。</summary>
      <returns>錯誤訊息的文字。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>取得或設定包含導致錯誤之程式碼的原始程式檔檔名。</summary>
      <returns>包含導致錯誤之程式碼的原始程式檔檔名。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>取得或設定數值，表示錯誤是否為警告。</summary>
      <returns>如果錯誤是警告，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>取得或設定錯誤發生來源的行號。</summary>
      <returns>編譯器在原始程式檔中發生錯誤的行號。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>表示 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 物件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 的新執行個體，這個執行個體含有 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 物件的指定陣列。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> 物件的陣列，用來初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 類別的新執行個體，這個執行個體包含指定之 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 的內容。</summary>
      <param name="value">用來初始化集合的 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>將指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 物件加入至錯誤集合中。</summary>
      <param name="value">要加入的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 物件。</param>
      <returns>要插入新項目的索引。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>將陣列的元素複製到錯誤集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> 型別的陣列，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>將指定編譯器錯誤集合加入錯誤集合的結尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 物件，包含要加入至集合的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>取得值，這個值表示集合是否包含指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 物件。</summary>
      <param name="value">要尋找的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
      <returns>如果 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 包含在集合裡，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>將集合值複製到指定索引的一維 <see cref="T:System.Array" /> 執行個體。</summary>
      <param name="array">複製自 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 之值的目的地一維 <see cref="T:System.Array" />。</param>
      <param name="index">要在該處開始複製的陣列索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 參數所表示的陣列是多維的。  
  
-或- 
<see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 中的元素數，大於 <paramref name="arrayIndex" /> 參數表示陣列的 <paramref name="array" /> 參數的索引值與 <paramref name="array" /> 參數所表示陣列的結尾之間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數小於 <paramref name="array" /> 參數所表示的陣列下限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>取得集合中指定之 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 物件的索引 (如果它存在於集合中的話)。</summary>
      <param name="value">要尋找的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
      <returns>如果找到的話，指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 的索引會在 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 中，否則為 -1。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>將指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 插入至集合中的指定索引處。</summary>
      <param name="index">應將指編譯器錯誤插入處的以零起始索引。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>從集合中移除指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</summary>
      <param name="value">要從 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 移除的 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />。</param>
      <exception cref="T:System.ArgumentException">在集合中找不到指定的物件。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>取得值，表示集合是否含有錯誤。</summary>
      <returns>如果集合含有錯誤，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>取得值，表示集合是否含有警告。</summary>
      <returns>如果集合含有警告，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>取得或設定在指定索引處的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</summary>
      <param name="index">集合中以零為基底的項目索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 參數所表示的索引值超過集合的有效索引範圍。</exception>
      <returns>在每一個有效索引上的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>表示語言提供者的組態設定。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>取得語言提供者實作的已設定編譯器設定。</summary>
      <returns>唯讀的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 執行個體，該執行個體包含已經為語言提供者設定的編譯器選項和設定。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>傳回目前語言提供者設定的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 執行個體。</summary>
      <returns>與語言提供者組態相關聯的 CodeDOM 提供者。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>傳回目前語言提供者設定和指定之選項的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 執行個體。</summary>
      <param name="providerOptions">來自組態檔的提供者選項集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">提供者不支援選項。</exception>
      <returns>與語言提供者組態和指定之選項相關聯的 CodeDOM 提供者。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>判斷指定的物件是否表示與目前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 相同的語言提供者和編譯器設定。</summary>
      <param name="o">要與目前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 比較的物件。</param>
      <returns>如果 <paramref name="o" /> 是 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 物件，且其值與這個執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>傳回語言提供者支援的副檔名。</summary>
      <returns>語言提供者支援的副檔名陣列。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 執行個體的 32 位元帶正負號整數雜湊程式碼，適合使用於雜湊演算法和資料結構，例如雜湊表。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>取得語言提供者支援的語言名稱。</summary>
      <returns>語言提供者支援的語言名稱陣列。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>取得已設定 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 之實作的類型。</summary>
      <exception cref="T:System.Configuration.ConfigurationException">在這部電腦上未設定此語言提供者。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到型別，因為該型別為 <see langword="null" /> 或空字串。  
  
-或- 
找不到型別，因為在組態檔中找不到 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 的名稱。</exception>
      <returns>表示已設定之語言提供者類型的唯讀 <see cref="T:System.Type" /> 執行個體。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>傳回值，指出是否已在電腦上設定語言提供者實作。</summary>
      <returns>如果已經在電腦上設定語言提供者實作類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>表示用來叫用編譯器的參數。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>使用指定的組件名稱來初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 類別的新執行個體。</summary>
      <param name="assemblyNames">要參考的組件名稱。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>使用指定的組件名稱和輸出檔名稱來初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 類別的新執行個體。</summary>
      <param name="assemblyNames">要參考的組件名稱。</param>
      <param name="outputName">輸出檔案名稱。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>使用指定的組件名稱、輸出名稱和指示是否要包含偵錯資訊的數值，來初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 類別的新執行個體。</summary>
      <param name="assemblyNames">要參考的組件名稱。</param>
      <param name="outputName">輸出檔案名稱。</param>
      <param name="includeDebugInformation">
        <see langword="true" /> 表示要包含偵錯資訊，<see langword="false" /> 表示要排除偵錯資訊。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>取得或設定在叫用編譯器時，要使用的選擇性命令列引數。</summary>
      <returns>編譯器的任何其他命令列引數。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary>取得或設定核心或標準組件名稱，其中包含基本型別，例如 <see cref="T:System.Object" />、<see cref="T:System.String" /> 或 <see cref="T:System.Int32" />。</summary>
      <returns>包含基本型別的核心組件的名稱。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>取得編譯組件輸出時要包含的 .NET Framework 資源檔。</summary>
      <returns>集合，其中包含 .NET Framework 的資源檔路徑，這些資源要放入所產生的組件內。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>取得或設定值，指出是否產生可執行檔。</summary>
      <returns>如果應該產生可執行檔，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>取得或設定值，指出是否在記憶體中產生輸出。</summary>
      <returns>如果編譯器應該在記憶體中產生輸出，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>取得或設定值，指出是否要在已編譯的可執行檔中包含偵錯資訊。</summary>
      <returns>如果應該產生偵錯資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>取得目前來源中所參考的 .NET Framework 資源檔。</summary>
      <returns>集合，其中包含來源所參考之 .NET Framework 資源的檔案路徑。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>取得或設定主要類別的名稱。</summary>
      <returns>主要類別的名稱。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>取得或設定輸出組件的名稱。</summary>
      <returns>輸出組件的名稱。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>取得目前專案所參考的組件。</summary>
      <returns>集合，其中包含要編譯的來源所參考的組件名稱。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>取得或設定包含暫存檔案的集合。</summary>
      <returns>包含暫存檔案的集合。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>取得或設定值，指出是否將警告當做錯誤。</summary>
      <returns>如果警告應該被視為錯誤，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>取得或設定在建立編譯器處理序 (Process) 時要使用的使用者語彙基元 (Token)。</summary>
      <returns>要使用的使用者語彙基元。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>取得或設定編譯器中止編譯所在的警告層級。</summary>
      <returns>編譯器中止編譯處的警告層級。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>取得或設定要連結至已編譯組件內之 Win32 資源檔的檔名。</summary>
      <returns>將連結至已編譯組件內的 Win32 資源檔。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>表示從編譯器傳回的編譯結果。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 類別的新執行個體，這個執行個體會使用指定的暫存檔案。</summary>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 可用來管理與儲存在編譯期間產生的中繼檔案的參考。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>取得或設定已編譯的組件。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" />，表示已編譯的組件。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>取得編譯器錯誤和警告的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />，表示編譯的錯誤和警告結果 (如果有)。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>取得或設定編譯器的傳回值。</summary>
      <returns>編譯器的傳回值。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>取得編譯器輸出訊息。</summary>
      <returns>含有輸出訊息的 <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>取得或設定已編譯組件的路徑。</summary>
      <returns>若在記憶體中產生組件，則為組件的路徑或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>取得或設定要使用的暫存檔案集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 可用來管理與儲存在編譯期間產生的中繼檔案的參考。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>提供叫用 (Invoke) 編輯器的命令執行函式。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>使用指定的暫存檔來執行命令，並等候呼叫傳回。</summary>
      <param name="cmd">要執行的命令。</param>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 可用來管理與儲存在編譯期間產生的中繼檔案的參考。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的使用者語彙基元和暫存檔來執行指定的命令，並等候呼叫傳回，將編譯器的輸出和錯誤資訊儲存在指定的字串。</summary>
      <param name="userToken">與編譯器處理序一起啟動的語彙基元。</param>
      <param name="cmd">要執行的命令。</param>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 可用來管理與儲存在編譯期間產生的中繼檔案的參考。</param>
      <param name="outputName">字串的參考，將儲存編譯器的訊息輸出。</param>
      <param name="errorName">字串的參考，將儲存發生的錯誤名稱。</param>
      <returns>編譯器的傳回值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的使用者語彙基元、目前的目錄和暫存檔來執行指定的命令，然後等候呼叫傳回，將編譯器的輸出和錯誤資訊儲存在指定的字串中。</summary>
      <param name="userToken">與編譯器處理序一起啟動的語彙基元。</param>
      <param name="cmd">要執行的命令。</param>
      <param name="currentDir">要啟動處理序的目錄。</param>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 可用來管理與儲存在編譯期間產生的中繼檔案的參考。</param>
      <param name="outputName">字串的參考，將儲存編譯器的訊息輸出。</param>
      <param name="errorName">字串的參考，將儲存發生的錯誤名稱。</param>
      <returns>編譯器的傳回值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的暫存檔來執行指定的命令，並等待呼叫傳回，將編譯器的輸出和錯誤資訊儲存在指定的字串。</summary>
      <param name="cmd">要執行的命令。</param>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 可用來管理與儲存在編譯期間產生的中繼檔案的參考。</param>
      <param name="outputName">字串的參考，將儲存編譯器的訊息輸出。</param>
      <param name="errorName">字串的參考，將儲存發生的錯誤名稱。</param>
      <returns>編譯器的傳回值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的目前目錄和暫存檔來執行指定的命令，並等候呼叫傳回，將編譯器的輸出和錯誤資訊儲存在指定的字串。</summary>
      <param name="cmd">要執行的命令。</param>
      <param name="currentDir">目前的目錄。</param>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 可用來管理與儲存在編譯期間產生的中繼檔案的參考。</param>
      <param name="outputName">字串的參考，將儲存編譯器的訊息輸出。</param>
      <param name="errorName">字串的參考，將儲存發生的錯誤名稱。</param>
      <returns>編譯器的傳回值。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>定義識別項，用於判斷程式碼產生器是否支援特定類型的程式碼項目。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>指示產生器支援陣列的陣列。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>指示產生器支援組件屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>指示產生器支援鏈結的建構函式 (Constructor) 引數。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>指示產生器支援複雜運算式。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>指示產生器支援委派 (Delegate) 宣告。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>指示產生器支援列舉型別 (Enumeration) 宣告。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>指示產生器支援事件宣告。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>表示產生器支援索引子屬性的宣告。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>指示產生器支援介面宣告。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>指示產生器支援實值型別 (Value Type) 宣告。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>指示產生器支援程式進入點 (Entry Point) 方法宣告。 建置 (Build) 可執行檔時可使用。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>表示產生器支援泛型型別宣告。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>表示產生器支援泛型型別參考。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>指示產生器支援 Goto 陳述式。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>指示產生器支援參考多維度陣列。 目前，CodeDom 無法用來執行個體化多維度陣列。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>指示產生器支援實作多個介面的成員宣告。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>指示產生器支援巢狀型別 (Nested Type) 的宣告。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>指示產生器支援參數屬性。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>表示產生器支援部分型別宣告。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>指示產生器支援公用靜態成員。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>指示產生器支援參考和輸出參數。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>表示產生器支援用 .NET Framework 資源進行編譯， 包括直接編譯到組件內部的預設資源，以及附屬組件中參考的資源。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>指示產生器支援傳回值屬性宣告。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>指示產生器支援靜態 (Static) 建構函式。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>表示產生 <c>器支援 try-catch</c> 語句。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>指示產生器支援 Win32 資源的編譯 (Compilation)。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>定義一個介面，用於叫用原始程式碼或使用特定編譯器之 CodeDOM 樹狀結構的編譯。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>使用指定的編譯器設定，在指定的 <see cref="N:System.CodeDom" /> 所包含的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 樹狀結構中，編譯一個組件。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯的設定值。</param>
      <param name="compilationUnit">
        <see cref="T:System.CodeDom.CodeCompileUnit" />，表示要編譯的程式碼。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，表示編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>使用指定的編譯器設定，根據 <see cref="N:System.CodeDom" /> 物件之指定陣列所包含的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 樹狀結構，編譯一個組件。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯的設定值。</param>
      <param name="compilationUnits">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 型別的陣列，表示要編譯的程式碼。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，表示編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>使用指定的編譯器設定，在指定檔案所包含的原始程式碼中，編譯一個組件。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯的設定值。</param>
      <param name="fileName">包含要編譯原始程式碼之檔案的檔名。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，表示編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>使用指定的編譯器設定，在指定檔案所包含的原始程式碼中，編譯一個組件。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯的設定值。</param>
      <param name="fileNames">要編譯的檔案名稱。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，表示編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>使用指定的編譯器設定，在含有原始程式碼的指定字串中，編譯一個組件。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯的設定值。</param>
      <param name="source">要編譯的原始程式碼。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，表示編譯的結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>使用指定的編譯器設定，在含有原始程式碼的指定陣列中，編譯一個組件。</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 物件，表示編譯的設定值。</param>
      <param name="sources">要編譯的原始程式碼字串。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 物件，表示編譯的結果。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>定義產生程式碼的介面。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>為指定值建立逸出識別項。</summary>
      <param name="value">要建立逸出識別項的字串。</param>
      <returns>值的逸出識別項。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>為指定值建立有效的識別項。</summary>
      <param name="value">要產生有效識別項的字串。</param>
      <returns>指定值的有效識別項。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>為指定的程式碼文件物件模型 (CodeDOM) 編譯單位產生程式碼，並使用指定的選項將它輸出到指定的文字寫入器。</summary>
      <param name="e">要為其產生程式碼的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <param name="w">為程式碼輸出目的的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>為指定的程式碼文件物件模型 (CodeDOM) 運算式產生程式碼，並將它輸出到指定的文字寫入器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeExpression" />，指出要為其產生程式碼的運算式。</param>
      <param name="w">為程式碼輸出目的的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>為指定的程式碼文件物件模型 (CodeDOM) 命名空間產生程式碼，並使用指定的選項將它輸出到指定的文字寫入器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespace" />，指出要為其產生程式碼的命名空間。</param>
      <param name="w">為程式碼輸出目的的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>為指定的程式碼文件物件模型 (CodeDOM) 陳述式產生程式碼，並使用指定的選項將它輸出到指定的文字寫入器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeStatement" />，包含要轉譯的 CodeDOM 項目。</param>
      <param name="w">為程式碼輸出目的的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>為指定的程式碼文件物件模型 (CodeDOM) 型別宣告產生程式碼，並使用指定的選項將它輸出到指定的文字寫入器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />，表示要為其產生程式碼的型別。</param>
      <param name="w">為程式碼輸出目的的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，表示要用來產生程式碼的選項。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>取得由指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 所指示的型別。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，表示要傳回的型別。</param>
      <returns>某語言的指定型別的文字表示，該語言是這個程式碼產生器所要產生的程式碼使用的語言。 例如，在 Visual Basic 中，傳入型別 System.Int32 將傳回 "Integer"。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>取得指示數值，表示指定的值是否為目前語言的有效識別項。</summary>
      <param name="value">要測試做為有效識別項的值。</param>
      <returns>如果 <paramref name="value" /> 參數是有效的識別項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>取得值，指出產生器是否支援指定 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 物件所表示的語言功能。</summary>
      <param name="supports">要測試的產生器能力。</param>
      <returns>如果支援指定的能力，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>如果指定值不是有效的識別項會擲回例外狀況。</summary>
      <param name="value">要驗證的識別項。</param>
      <exception cref="T:System.ArgumentException">識別項無效。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>定義將程式碼剖析為 <see cref="T:System.CodeDom.CodeCompileUnit" /> 的介面。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>在衍生類別中實作時，將指定的文字資料流編譯為 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <param name="codeStream">
        <see cref="T:System.IO.TextReader" />，可以用來讀取要編譯的程式碼。</param>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" />，含有剖析程式碼的表示。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>定義識別項，表示語言的特殊功能。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>語言是不區分大小寫。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>語言有預設的特性。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>表示暫存檔案的集合。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>使用預設設定在暫存檔產生並使用過後加以刪除的指定暫存目錄，初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 類別的新執行個體。</summary>
      <param name="tempDir">用來儲存暫存檔的暫存目錄路徑。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>使用指定的暫存目錄，以及指示是否要在暫存檔產生並使用過後加以保留或刪除的指定值，初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 類別的新執行個體。</summary>
      <param name="tempDir">用來儲存暫存檔的暫存目錄路徑。</param>
      <param name="keepFiles">如果暫存檔應該在使用後保留，則為 <see langword="true" />；如果暫存檔應該在使用後刪除，則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>將具有指定副檔名的檔名加入至集合中。</summary>
      <param name="fileExtension">要加入集合之自動產生暫存檔名的副檔名。</param>
      <returns>具有指定副檔名的檔名，這個檔名剛加入至集合中。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>使用指示是否應該刪除或保留檔案的指定值，將具有指定副檔名的檔名加入集合中。</summary>
      <param name="fileExtension">要加入集合之自動產生暫存檔名的副檔名。</param>
      <param name="keepFile">如果檔案應該在使用後保留，則為 <see langword="true" />，如果檔案應該刪除，則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileExtension" /> 為 <see langword="null" /> 或空字串。</exception>
      <returns>具有指定副檔名的檔名，這個檔名剛加入至集合中。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>使用指示在處置集合或呼叫 <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 方法之後是否保留檔案的指定值，將指定檔案加入集合中。</summary>
      <param name="fileName">要加入至集合中的檔案名稱。</param>
      <param name="keepFile">如果檔案應該在使用後保留，則為 <see langword="true" />，如果檔案應該刪除，則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> 為 <see langword="null" /> 或空字串。  
  
-或- 
 <paramref name="fileName" /> 已重複。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>將集合的成員複製到指定的字串，從指定的索引開始。</summary>
      <param name="fileNames">複製的目的字串陣列。</param>
      <param name="start">要開始複製的目的陣列索引。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>刪除這個集合中未標記成保留的暫存檔。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>在記憶體回收重新宣告物件前，嘗試刪除暫存檔。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>取得一個列舉值，列舉集合成員。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，包含集合的成員。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從目標陣列之指定的索引開始，將集合的項目複製到陣列。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="start">陣列中以零起始的索引，即複製的起始處。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之應用程式定義的工作。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>在暫存檔目錄中，取得主檔名 (沒有副檔名) 的完整路徑，用於產生集合的暫存檔名。</summary>
      <exception cref="T:System.Security.SecurityException">若未設定 <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> 屬性或將其設為 <see langword="null" />，且未按 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> 屬性的指示將 <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" /> 授與暫存目錄。</exception>
      <returns>在暫存目錄路徑中，主檔名 (沒有副檔名) 的完整路徑用於產生集合的暫存檔名。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>取得集合中的檔案數目。</summary>
      <returns>集合中的檔案數目。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>呼叫 <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 方法或處置集合時，根據預設值取得或設定值，指出是否保留檔案。</summary>
      <returns>如果應該保留檔案，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>取得集合所包含的項目數目。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中所包含的項目數。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，表示是否同步化存取集合 (執行緒安全)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns>可用來同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>取得用來儲存暫存檔的暫存目錄。</summary>
      <returns>用來儲存暫存檔的暫存目錄。</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>定義用於指示參數方向和引數宣告的識別項。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>輸入的欄位。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>輸出的欄位。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>欄位參考。</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>定義類別成員的成員屬性識別項。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>抽象成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>存取遮罩。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>相同組件中的任何類別皆可以存取的成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>常數成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>成員，該成員的類別及衍生類別的家族內皆可以存取該成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>成員，該成員的類別中以及相同組件的衍生類別中皆可以存取該成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>成員，該成員的類別中、任何組件中該成員的衍生類別，以及相同組件的任何類別中皆可以存取該成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>無法在衍生類別中覆寫的成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>New 成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>Overloaded 成員。 某些語言 (例如 Visual Basic) 需要被明確指示的 Overloaded 成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>覆寫基底類別成員的成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>Private 成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>Public 成員。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>範圍遮罩。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>靜態成員。 在 Visual Basic 中，這就等同於 <see langword="Shared" /> 關鍵字。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>VTable 遮罩。</summary>
    </member>
  </members>
</doc>
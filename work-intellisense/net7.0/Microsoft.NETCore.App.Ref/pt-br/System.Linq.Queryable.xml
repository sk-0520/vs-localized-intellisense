<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Linq.Queryable</name>
  </assembly>
  <members>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary vsli:raw="Represents an expression tree and provides functionality to execute the expression tree after rewriting it.">Representa uma árvore de expressão e fornece funcionalidade para executar a árvore de expressão depois de reescrevê-los.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary vsli:raw="Represents an expression tree and provides functionality to execute the expression tree after rewriting it.">Representa uma árvore de expressão e fornece funcionalidade para executar a árvore de expressão depois de reescrevê-los.</summary>
      <typeparam name="T" vsli:raw="The data type of the value that results from executing the expression tree.">O tipo de dados do valor que resulta da execução da árvore de expressão.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableExecutor`1&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Linq.EnumerableExecutor`1" />.</summary>
      <param name="expression" vsli:raw="An expression tree to associate with the new instance.">Uma árvore de expressão para associar à nova instância.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary vsli:raw="Represents an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; as an &lt;see cref=&quot;T:System.Linq.EnumerableQuery&quot; /&gt; data source.">Representa um <see cref="T:System.Collections.IEnumerable" /> como uma fonte de dados <see cref="T:System.Linq.EnumerableQuery" />.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary vsli:raw="Represents an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection as an &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; data source.">Representa uma coleção de <see cref="T:System.Collections.Generic.IEnumerable`1" /> como uma fonte de dados <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <typeparam name="T" vsli:raw="The type of the data in the collection.">O tipo de dados na coleção.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; class and associates it with an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection.">Inicializa uma nova instância da classe <see cref="T:System.Linq.EnumerableQuery`1" /> e a associa a uma coleção <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="enumerable" vsli:raw="A collection to associate with the new instance.">Uma coleção a associar à nova instância.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; class and associates the instance with an expression tree.">Inicializa uma nova instância da classe <see cref="T:System.Linq.EnumerableQuery`1" /> e associa a instância a uma árvore de expressão.</summary>
      <param name="expression" vsli:raw="An expression tree to associate with the new instance.">Uma árvore de expressão para associar à nova instância.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through the associated &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; data source and executing it.">Retorna um enumerador que pode iterar por meio da coleção <see cref="T:System.Collections.Generic.IEnumerable`1" /> associada ou, se for nulo, por meio da coleção que resulta da regravação da árvore de expressão associada como uma consulta em uma fonte de dados <see cref="T:System.Collections.Generic.IEnumerable`1" /> e da execução dela.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the associated data source.">Um enumerador que pode ser usado para iterar pela fonte de dados associada.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through the associated &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; data source and executing it.">Retorna um enumerador que pode iterar por meio da coleção <see cref="T:System.Collections.Generic.IEnumerable`1" /> associada ou, se for nulo, por meio da coleção que resulta da regravação da árvore de expressão associada como uma consulta em uma fonte de dados <see cref="T:System.Collections.Generic.IEnumerable`1" /> e da execução dela.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the associated data source.">Um enumerador que pode ser usado para iterar pela fonte de dados associada.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; object and associates it with a specified expression tree that represents an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; collection of data.">Constrói um novo objeto <see cref="T:System.Linq.EnumerableQuery`1" /> e associa-o a uma árvore de expressão especificada que representa uma coleção de dados <see cref="T:System.Linq.IQueryable" />.</summary>
      <param name="expression" vsli:raw="An expression tree that represents an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; collection of data.">Uma árvore de expressão que representa uma coleção de dados <see cref="T:System.Linq.IQueryable" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; object that is associated with &lt;paramref name=&quot;expression&quot; /&gt;.">Um objeto <see cref="T:System.Linq.EnumerableQuery`1" /> que está associado a <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``2(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; object and associates it with a specified expression tree that represents an &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; collection of data.">Constrói um novo objeto <see cref="T:System.Linq.EnumerableQuery`1" /> e associa-o a uma árvore de expressão especificada que representa uma coleção de dados <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <param name="expression" vsli:raw="An expression tree to execute.">Uma árvore de expressão para executar.</param>
      <typeparam name="S" vsli:raw="The type of the data in the collection that &lt;paramref name=&quot;expression&quot; /&gt; represents.">O tipo dos dados na coleção que <paramref name="expression" /> representa.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements of the &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that is returned." />
      <returns vsli:raw="An EnumerableQuery object that is associated with &lt;paramref name=&quot;expression&quot; /&gt;.">Representa um objeto EnumerableQuery associado a <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes an expression after rewriting it to call &lt;see cref=&quot;T:System.Linq.Enumerable&quot; /&gt; methods instead of &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods on any enumerable data sources that cannot be queried by &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods.">Executa uma expressão depois de reescrevê-la para chamar métodos <see cref="T:System.Linq.Enumerable" /> em vez de métodos <see cref="T:System.Linq.Queryable" /> em quaisquer fontes de dados enumeráveis que não podem ser consultadas por métodos <see cref="T:System.Linq.Queryable" />.</summary>
      <param name="expression" vsli:raw="An expression tree to execute.">Uma árvore de expressão para executar.</param>
      <returns vsli:raw="The value that results from executing &lt;paramref name=&quot;expression&quot; /&gt;.">O valor que resulta da execução de <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``2(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes an expression after rewriting it to call &lt;see cref=&quot;T:System.Linq.Enumerable&quot; /&gt; methods instead of &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods on any enumerable data sources that cannot be queried by &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods.">Executa uma expressão depois de reescrevê-la para chamar métodos <see cref="T:System.Linq.Enumerable" /> em vez de métodos <see cref="T:System.Linq.Queryable" /> em quaisquer fontes de dados enumeráveis que não podem ser consultadas por métodos <see cref="T:System.Linq.Queryable" />.</summary>
      <param name="expression" vsli:raw="An expression tree to execute.">Uma árvore de expressão para executar.</param>
      <typeparam name="S" vsli:raw="The type of the data in the collection that &lt;paramref name=&quot;expression&quot; /&gt; represents.">O tipo dos dados na coleção que <paramref name="expression" /> representa.</typeparam>
      <typeparam name="TElement" vsli:raw="" />
      <returns vsli:raw="The value that results from executing &lt;paramref name=&quot;expression&quot; /&gt;.">O valor que resulta da execução de <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary vsli:raw="Returns a textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.">Retorna uma representação textual da coleção enumerável ou, se for nulo, da árvore de expressão que está associada a esta instância.</summary>
      <returns vsli:raw="A textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.">Uma representação textual da coleção enumerável ou, se for nulo, da árvore de expressão que está associada a esta instância.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary vsli:raw="Gets the type of the data in the collection that this instance represents.">Obtém o tipo dos dados na coleção que são representados por esta instância.</summary>
      <returns vsli:raw="The type of the data in the collection that this instance represents.">O tipo dos dados na coleção que essa instância representa.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary vsli:raw="Gets the expression tree that is associated with or that represents this instance.">Obtém a árvore de expressão que está associada com esta instância ou que a representa.</summary>
      <returns vsli:raw="The expression tree that is associated with or that represents this instance.">A árvore de expressão associada a ou que representa essa instância.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary vsli:raw="Gets the query provider that is associated with this instance.">Obtém o provedor de consulta associado esta instância.</summary>
      <returns vsli:raw="The query provider that is associated with this instance.">O provedor de consulta que está associado a esta instância.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary vsli:raw="Provides a set of &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) methods for querying data structures that implement &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Fornece um conjunto de métodos <see langword="static" /> (<see langword="Shared" /> no Visual Basic) para consultar estruturas de dados que implementam <see cref="T:System.Linq.IQueryable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary vsli:raw="Applies an accumulator function over a sequence.">Aplica uma função de acumulador a uma sequência.</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Uma sequência a ser agregada.</param>
      <param name="func" vsli:raw="An accumulator function to apply to each element.">Uma função do acumulador a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="func" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> não contém elementos.</exception>
      <returns vsli:raw="The final accumulator value.">O valor final do acumulador.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.">Aplica uma função de acumulador a uma sequência. O valor de semente especificado é usado como o valor inicial do acumulador.</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Uma sequência a ser agregada.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">O valor inicial do acumulador.</param>
      <param name="func" vsli:raw="An accumulator function to invoke on each element.">Uma função de acumulador a ser invocada em cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">O tipo do valor do acumulador.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="func" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The final accumulator value.">O valor final do acumulador.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.">Aplica uma função de acumulador a uma sequência. O valor de semente especificado é usado como o valor inicial do acumulador e a função especificada é usada para selecionar o valor do resultado.</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Uma sequência a ser agregada.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">O valor inicial do acumulador.</param>
      <param name="func" vsli:raw="An accumulator function to invoke on each element.">Uma função de acumulador a ser invocada em cada elemento.</param>
      <param name="selector" vsli:raw="A function to transform the final accumulator value into the result value.">Uma função para transformar o valor final do acumulador no valor de resultado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">O tipo do valor do acumulador.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the resulting value.">O tipo do valor resultante.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="func" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The transformed final accumulator value.">O valor final do acumulador transformado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Determines whether all the elements of a sequence satisfy a condition.">Determina se todos os elementos de uma sequência atendem a uma condição.</summary>
      <param name="source" vsli:raw="A sequence whose elements to test for a condition.">A sequência cujos elementos testar quanto a uma condição.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se todos os elementos da sequência de origem passarem no teste no predicado especificado ou se a sequência for vazia; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Determines whether a sequence contains any elements.">Determina se uma sequência contém elementos.</summary>
      <param name="source" vsli:raw="A sequence to check for being empty.">Uma sequência para verificar se está vazia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a sequência de origem contiver elementos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Determines whether any element of a sequence satisfies a condition.">Determina se algum elemento de uma sequência atende a uma condição.</summary>
      <param name="source" vsli:raw="A sequence whose elements to test for a condition.">A sequência cujos elementos testar quanto a uma condição.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any elements in the source sequence pass the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se algum elemento na sequência de origem for aprovado no teste do predicado especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Returns a new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; plus the specified &lt;paramref name=&quot;element&quot; /&gt; appended at the end.">Retorna uma nova sequência passível de consulta que contém os elementos de <paramref name="source" /> mais o <paramref name="element" /> especificado acrescentado ao final.</summary>
      <param name="source" vsli:raw="A queryable sequence.">Uma sequência passível de consulta.</param>
      <param name="element" vsli:raw="An element of type &lt;typeparamref name=&quot;TSource&quot; /&gt; to append to &lt;paramref name=&quot;source&quot; /&gt;.">Um elemento do tipo <typeparamref name="TSource" /> a ser acrescentado a <paramref name="source" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence.">O tipo dos elementos na sequência passível de consulta.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="A new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; plus the specified &lt;paramref name=&quot;element&quot; /&gt; appended at the end.">Uma nova sequência passível de consulta que contém os elementos de <paramref name="source" /> mais o <paramref name="element" /> especificado acrescentado ao final.</returns>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary vsli:raw="Converts an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; to an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt;.">Converte um <see cref="T:System.Collections.IEnumerable" /> em um <see cref="T:System.Linq.IQueryable" />.</summary>
      <param name="source" vsli:raw="A sequence to convert.">Uma sequência a ser convertida.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; does not implement &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; for some &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="source" /> não implementa <see cref="T:System.Collections.Generic.IEnumerable`1" /> para alguns <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; that represents the input sequence.">Um <see cref="T:System.Linq.IQueryable" /> que representa a sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Converts a generic &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Converte um <see cref="T:System.Collections.Generic.IEnumerable`1" /> genérico em um <see cref="T:System.Linq.IQueryable`1" /> genérico.</summary>
      <param name="source" vsli:raw="A sequence to convert.">Uma sequência a ser convertida.</param>
      <typeparam name="TElement" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that represents the input sequence.">Um <see cref="T:System.Linq.IQueryable`1" /> que representa a sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Computa a média de uma sequência de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Uma sequência de valores <see cref="T:System.Decimal" /> para realizar o cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> não contém elementos.</exception>
      <returns vsli:raw="The average of the sequence of values.">A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Computa a média de uma sequência de valores <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Uma sequência de valores <see cref="T:System.Double" /> para realizar o cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> não contém elementos.</exception>
      <returns vsli:raw="The average of the sequence of values.">A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Computa a média de uma sequência de valores <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Uma sequência de valores <see cref="T:System.Int32" /> para realizar o cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> não contém elementos.</exception>
      <returns vsli:raw="The average of the sequence of values.">A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Computa a média de uma sequência de valores <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Uma sequência de valores <see cref="T:System.Int64" /> para realizar o cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> não contém elementos.</exception>
      <returns vsli:raw="The average of the sequence of values.">A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Computa a média de uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos para cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Computa a média de uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos para cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Computa a média de uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos para cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Computa a média de uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos para cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Computa a média de uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos para cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Computa a média de uma sequência de valores <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Uma sequência de valores <see cref="T:System.Single" /> para realizar o cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> não contém elementos.</exception>
      <returns vsli:raw="The average of the sequence of values.">A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a média de uma sequência de valores <see cref="T:System.Decimal" /> obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate an average.">Uma sequência de valores usados para calcular uma média.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> não contém elementos.</exception>
      <returns vsli:raw="The average of the sequence of values.">A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a média de uma sequência de valores <see cref="T:System.Double" /> obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Uma sequência de valores para cálculo da média.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> não contém elementos.</exception>
      <returns vsli:raw="The average of the sequence of values.">A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a média de uma sequência de valores <see cref="T:System.Int32" /> obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Uma sequência de valores para cálculo da média.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> não contém elementos.</exception>
      <returns vsli:raw="The average of the sequence of values.">A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a média de uma sequência de valores <see cref="T:System.Int64" /> obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Uma sequência de valores para cálculo da média.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> não contém elementos.</exception>
      <returns vsli:raw="The average of the sequence of values.">A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a média de uma sequência de valores <see cref="T:System.Decimal" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Uma sequência de valores para cálculo da média.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">A média da sequência de valores ou <see langword="null" /> se a sequência <paramref name="source" /> estiver vazia ou contiver somente valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a média de uma sequência de valores <see cref="T:System.Double" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Uma sequência de valores para cálculo da média.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">A média da sequência de valores ou <see langword="null" /> se a sequência <paramref name="source" /> estiver vazia ou contiver somente valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a média de uma sequência de valores <see cref="T:System.Int32" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Uma sequência de valores para cálculo da média.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">A média da sequência de valores ou <see langword="null" /> se a sequência <paramref name="source" /> estiver vazia ou contiver somente valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a média de uma sequência de valores <see cref="T:System.Int64" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Uma sequência de valores para cálculo da média.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">A média da sequência de valores ou <see langword="null" /> se a sequência <paramref name="source" /> estiver vazia ou contiver somente valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a média de uma sequência de valores <see cref="T:System.Single" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Uma sequência de valores para cálculo da média.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">A média da sequência de valores ou <see langword="null" /> se a sequência <paramref name="source" /> estiver vazia ou contiver somente valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a média de uma sequência de valores <see cref="T:System.Single" /> obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Uma sequência de valores para cálculo da média.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> não contém elementos.</exception>
      <returns vsli:raw="The average of the sequence of values.">A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary vsli:raw="Converts the elements of an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; to the specified type.">Converte os elementos de um <see cref="T:System.Linq.IQueryable" /> para o tipo especificado.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; that contains the elements to be converted.">O <see cref="T:System.Linq.IQueryable" /> que contém os elementos a serem convertidos.</param>
      <typeparam name="TResult" vsli:raw="The type to convert the elements of &lt;paramref name=&quot;source&quot; /&gt; to.">O tipo para o qual os elementos de <paramref name="source" /> deverão ser convertidos.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="An element in the sequence cannot be cast to type &lt;paramref name=&quot;TResult&quot; /&gt;.">Um elemento na sequência não pode ser convertido para o tipo <paramref name="TResult" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains each element of the source sequence converted to the specified type.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém cada elemento da sequência de origem convertido para o tipo especificado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Concatenates two sequences.">Concatena duas sequências.</summary>
      <param name="source1" vsli:raw="The first sequence to concatenate.">A primeira sequência a ser concatenada.</param>
      <param name="source2" vsli:raw="The sequence to concatenate to the first sequence.">A sequência a ser concatenada com a primeira sequência.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the concatenated elements of the two input sequences.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos concatenados das duas sequências de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using the default equality comparer.">Determina se uma sequência contém um elemento especificado usando o comparador de igualdade padrão.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; in which to locate &lt;paramref name=&quot;item&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> no qual <paramref name="item" /> será localizado.</param>
      <param name="item" vsli:raw="The object to locate in the sequence.">O objeto a ser localizado na sequência.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a sequência de entrada contiver um elemento que tem o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Determina se uma sequência contém um elemento especificado usando um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; in which to locate &lt;paramref name=&quot;item&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> no qual <paramref name="item" /> será localizado.</param>
      <param name="item" vsli:raw="The object to locate in the sequence.">O objeto a ser localizado na sequência.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a sequência de entrada contiver um elemento que tem o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the number of elements in a sequence.">Retorna o número de elementos em uma sequência.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">O <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos a serem contados.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">O número de elementos no <paramref name="source" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The number of elements in the input sequence.">O número de elementos na sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the number of elements in the specified sequence that satisfies a condition.">Retorna o número de elementos na sequência especificada que atendem a uma condição.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos a serem contados.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">O número de elementos no <paramref name="source" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The number of elements in the sequence that satisfies the condition in the predicate function.">O número de elementos na sequência que atende à condição na função de predicado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.">Retornará os elementos da sequência especificada ou o valor padrão do parâmetro de tipo em uma coleção de singletons se a sequência estiver vazia.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a default value for if empty.">O <see cref="T:System.Linq.IQueryable`1" /> para o qual será retornado um valor padrão se estiver vazio.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains &lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém <see langword="default" /> (<paramref name="TSource" />) se <paramref name="source" /> estiver vazio; caso contrário, <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.">Retorna os elementos da sequência especificada ou o valor especificado em uma coleção de singletons se a sequência está vazia.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the specified value for if empty.">O <see cref="T:System.Linq.IQueryable`1" /> para o qual será retornado o valor especificado se ele estiver vazio.</param>
      <param name="defaultValue" vsli:raw="The value to return if the sequence is empty.">O valor a ser retornado se a sequência estiver vazia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains &lt;paramref name=&quot;defaultValue&quot; /&gt; if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém <paramref name="defaultValue" /> se <paramref name="source" /> está vazio; caso contrário, <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using the default equality comparer to compare values.">Retorna os elementos distintos de uma sequência usando o comparador de igualdade padrão para comparar valores.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to remove duplicates from.">O <see cref="T:System.Linq.IQueryable`1" /> do qual as duplicatas serão removidas.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains distinct elements from &lt;paramref name=&quot;source&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos distintos do <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Retorna os elementos distintos de uma sequência usando um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar valores.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to remove duplicates from.">O <see cref="T:System.Linq.IQueryable`1" /> do qual as duplicatas serão removidas.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains distinct elements from &lt;paramref name=&quot;source&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos distintos do <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence.">Retorna o elemento de um índice especificado em uma sequência.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">O índice baseado em zero do elemento a ser recuperado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> é menor que zero.</exception>
      <returns vsli:raw="The element at the specified position in &lt;paramref name=&quot;source&quot; /&gt;.">O elemento na posição especificada em <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Retorna o elemento em um índice especificado em uma sequência ou um valor padrão se o índice estiver fora do intervalo.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">O índice baseado em zero do elemento a ser recuperado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;index&quot; /&gt; is outside the bounds of &lt;paramref name=&quot;source&quot; /&gt;; otherwise, the element at the specified position in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) se <paramref name="index" /> estiver fora dos limites de <paramref name="source" />; caso contrário, o elemento na posição especificada em <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the default equality comparer to compare values.">Produz a diferença de conjunto de duas sequências usando o comparador de igualdade padrão para comparar os valores.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;source2&quot; /&gt; will be returned.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos que não estão presentes também no <paramref name="source2" /> serão retornados.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will not appear in the returned sequence.">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos que também ocorrem na primeira sequência não aparecerão na sequência retornada.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set difference of the two sequences.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém a diferença de conjunto das duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Produz a diferença de conjunto de duas sequências usando o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar os valores.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;source2&quot; /&gt; will be returned.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos que não estão presentes também no <paramref name="source2" /> serão retornados.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will not appear in the returned sequence.">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos que também ocorrem na primeira sequência não aparecerão na sequência retornada.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set difference of the two sequences.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém a diferença de conjunto das duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the first element of a sequence.">Retorna o primeiro elemento de uma sequência.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the first element of.">O <see cref="T:System.Linq.IQueryable`1" /> do qual o primeiro elemento será retornado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">Uma sequência de origem está vazia.</exception>
      <returns vsli:raw="The first element in &lt;paramref name=&quot;source&quot; /&gt;.">O primeiro elemento em <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the first element of a sequence that satisfies a specified condition.">Retorna o primeiro elemento de uma sequência que satisfaz uma condição especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Nenhum elemento satisfaz a condição na <paramref name="predicate" />.  
  
- ou - 
Uma sequência de origem está vazia.</exception>
      <returns vsli:raw="The first element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test in &lt;paramref name=&quot;predicate&quot; /&gt;.">O primeiro elemento em <paramref name="source" /> que é aprovado no teste em <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Retorna o primeiro elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the first element of.">O <see cref="T:System.Linq.IQueryable`1" /> do qual o primeiro elemento será retornado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> estiver vazio; caso contrário, o primeiro elemento em <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.">Retorna o primeiro elemento de uma sequência que atende a uma condição especificada ou um valor padrão se esse elemento não é encontrado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty or if no element passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> estiver vazio ou se nenhum elemento for aprovado no teste especificado por <paramref name="predicate" />; caso contrário, o primeiro elemento em <paramref name="source" /> aprovado no teste especificado por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function.">Agrupa os elementos de uma sequência de acordo com uma função de seletor de chave especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Uma função para extrair a chave de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a sequence of objects and a key.">Um <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> em C# ou <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> no Visual Basic em que cada objeto <see cref="T:System.Linq.IGrouping`2" /> contém uma sequência de objetos e uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.">Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e compara as chaves usando um comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Uma função para extrair a chave de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects and a key.">Um <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> em C# ou <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> no Visual Basic em que cada <see cref="T:System.Linq.IGrouping`2" /> contém uma sequência de objetos e uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.">Agrupa os elementos de uma sequência de acordo com a função de seletor de chave especificada e projeta os elementos de cada grupo usando uma função especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Uma função para mapear cada elemento de origem para um elemento em um <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">O tipo dos elementos em cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="elementSelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">Um <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> em C# ou <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> no Visual Basic em que cada <see cref="T:System.Linq.IGrouping`2" /> contém uma sequência de objetos de tipo <paramref name="TElement" /> e uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.">Agrupa os elementos de uma sequência e projeta os elementos para cada grupo usando uma função especificada. Os valores de chave são comparados usando um comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Uma função para mapear cada elemento de origem para um elemento em um <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">O tipo dos elementos em cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">Um <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> em C# ou <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> no Visual Basic em que cada <see cref="T:System.Linq.IGrouping`2" /> contém uma sequência de objetos de tipo <paramref name="TElement" /> e uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.">Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Uma função para extrair a chave de cada elemento.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Uma função para criar um valor de resultado de cada grupo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Um <c>T:System.Linq.IQueryable`1</c> que tem um argumento de tipo de <paramref name="TResult" /> e no qual cada elemento representa uma projeção sobre um grupo e sua chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.">Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave. As chaves são comparadas usando um comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Uma função para extrair a chave de cada elemento.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Uma função para criar um valor de resultado de cada grupo.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="resultSelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Um <c>T:System.Linq.IQueryable`1</c> que tem um argumento de tipo de <paramref name="TResult" /> e no qual cada elemento representa uma projeção sobre um grupo e sua chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.">Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave. Os elementos de cada grupo são projetados usando uma função especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Uma função para mapear cada elemento de origem para um elemento em um <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Uma função para criar um valor de resultado de cada grupo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">O tipo dos elementos em cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Um <c>T:System.Linq.IQueryable`1</c> que tem um argumento de tipo de <paramref name="TResult" /> e no qual cada elemento representa uma projeção sobre um grupo e sua chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.">Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave. As chaves são comparadas usando um comparador especificado e os elementos de cada grupo são projetados usando uma função especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Uma função para mapear cada elemento de origem para um elemento em um <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Uma função para criar um valor de resultado de cada grupo.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">O tipo dos elementos em cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> ou <paramref name="resultSelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Um <c>T:System.Linq.IQueryable`1</c> que tem um argumento de tipo de <paramref name="TResult" /> e no qual cada elemento representa uma projeção sobre um grupo e sua chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary vsli:raw="Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.">Correlaciona os elementos de duas sequências com base na igualdade de chaves e agrupa os resultados. O comparador de igualdade padrão é usado para comparar chaves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">A primeira sequência a ser ingressada.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Uma função para criar um elemento de resultado de um elemento da primeira sequência e uma coleção de elementos correspondentes da segunda sequência.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">O tipo dos elementos de resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing a grouped join on two sequences.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção agrupada em duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on key equality and groups the results. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Correlaciona os elementos de duas sequências com base na igualdade de chaves e agrupa os resultados. Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado é usado para comparar chaves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">A primeira sequência a ser ingressada.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Uma função para criar um elemento de resultado de um elemento da primeira sequência e uma coleção de elementos correspondentes da segunda sequência.</param>
      <param name="comparer" vsli:raw="A comparer to hash and compare keys.">Um comparador para executar hash e comparar chaves.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">O tipo dos elementos de resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing a grouped join on two sequences.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção agrupada em duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the default equality comparer to compare values.">Produz a interseção de conjunto de duas sequências usando o comparador de igualdade padrão para comparar os valores.</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements that also appear in &lt;paramref name=&quot;source2&quot; /&gt; are returned.">Uma sequência cujos elementos distintos que também aparecem em <paramref name="source2" /> são retornados.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements that also appear in the first sequence are returned.">Uma sequência cujos elementos distintos que também aparecem na primeira sequência são retornados.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
      <returns vsli:raw="A sequence that contains the set intersection of the two sequences.">Uma sequência que contém a interseção de conjunto das duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Produz a interseção de conjunto de duas sequências usando o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar os valores.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose distinct elements that also appear in &lt;paramref name=&quot;source2&quot; /&gt; are returned.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos distintos que também aparecem em <paramref name="source2" /> são retornados.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in the first sequence are returned.">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos distintos que também aparecem na primeira sequência são retornados.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set intersection of the two sequences.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém a interseção de conjunto de duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.">Correlaciona os elementos de duas sequências com base em chaves de correspondência. O comparador de igualdade padrão é usado para comparar chaves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">A primeira sequência a ser ingressada.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Uma função para criar um elemento de resultado de dois elementos correspondentes.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">O tipo dos elementos de resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing an inner join on two sequences.">Um <see cref="T:System.Linq.IQueryable`1" /> com elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção interna em duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Correlaciona os elementos de duas sequências com base em chaves de correspondência. Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado é usado para comparar chaves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">A primeira sequência a ser ingressada.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Uma função para criar um elemento de resultado de dois elementos correspondentes.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to hash and compare keys.">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para executar hash e comparar chaves.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">O tipo dos elementos de resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing an inner join on two sequences.">Um <see cref="T:System.Linq.IQueryable`1" /> com elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção interna em duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the last element in a sequence.">Retorna o último elemento em uma sequência.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the last element of.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual o último elemento será retornado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">Uma sequência de origem está vazia.</exception>
      <returns vsli:raw="The value at the last position in &lt;paramref name=&quot;source&quot; /&gt;.">O valor na última posição no <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Retorna o último elemento de uma sequência que satisfaz uma condição especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Nenhum elemento satisfaz a condição na <paramref name="predicate" />.  
  
- ou - 
Uma sequência de origem está vazia.</exception>
      <returns vsli:raw="The last element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">O último elemento em <paramref name="source" /> aprovado no teste especificado por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the last element in a sequence, or a default value if the sequence contains no elements.">Retorna o último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the last element of.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual o último elemento será retornado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, the last element in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> estiver vazio; caso contrário, o último elemento em <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Retorna o último elemento de uma sequência que satisfaz uma condição ou um valor padrão, caso esse elemento não seja encontrado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty or if no elements pass the test in the predicate function; otherwise, the last element of &lt;paramref name=&quot;source&quot; /&gt; that passes the test in the predicate function.">
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> for vazio ou se nenhum elemento for aprovado no teste na função de predicado; caso contrário, o último elemento de <paramref name="source" /> aprovado no teste na função de predicado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents the total number of elements in a sequence.">Retorna um <see cref="T:System.Int64" /> que representa o número total de elementos em uma sequência.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos a serem contados.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">O número de elementos excede <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt;.">O número de elementos em <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents the number of elements in a sequence that satisfy a condition.">Retorna um <see cref="T:System.Int64" /> que representa o número de elementos em uma sequência que atendem a uma condição.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos a serem contados.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of matching elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">O número de elementos correspondentes excede <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; that satisfy the condition in the predicate function.">O número de elementos em <paramref name="source" /> que atendem à condição na função de predicado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the maximum value in a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Retorna o valor máximo em um <see cref="T:System.Linq.IQueryable`1" /> genérico.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum of.">Uma sequência de valores da qual será determinado o valor máximo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The maximum value in the sequence.">O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Invokes a projection function on each element of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; and returns the maximum resulting value.">Invoca uma função de projeção em cada elemento de um <see cref="T:System.Linq.IQueryable`1" /> genérico e retorna o valor resultante máximo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum of.">Uma sequência de valores da qual será determinado o valor máximo.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">O tipo do valor retornado pela função representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The maximum value in the sequence.">O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the minimum value of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Retorna o valor mínimo de um <see cref="T:System.Linq.IQueryable`1" /> genérico.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum of.">Uma sequência de valores para determinar o mínimo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The minimum value in the sequence.">O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Invokes a projection function on each element of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; and returns the minimum resulting value.">Invoca uma função de projeção em cada elemento de um <see cref="T:System.Linq.IQueryable`1" /> genérico e retorna o valor resultante mínimo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum of.">Uma sequência de valores para determinar o mínimo.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">O tipo do valor retornado pela função representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The minimum value in the sequence.">O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary vsli:raw="Filters the elements of an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; based on a specified type.">Filtra os elementos de um <see cref="T:System.Linq.IQueryable" /> com base em um tipo especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; whose elements to filter.">Um <see cref="T:System.Linq.IQueryable" /> cujos elementos devem ser filtrados.</param>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">O tipo no qual filtrar os elementos da sequência.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="A collection that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; that have type &lt;paramref name=&quot;TResult&quot; /&gt;.">Uma coleção que contém os elementos de <paramref name="source" /> que tem o tipo <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order according to a key.">Classifica os elementos de uma sequência em ordem crescente de acordo com uma chave.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Uma função para extrair uma chave de um elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função que é representada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order by using a specified comparer.">Classifica os elementos de uma sequência em ordem crescente usando um comparador especificado.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Uma função para extrair uma chave de um elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função que é representada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order according to a key.">Classifica os elementos de uma sequência em ordem decrescente de acordo com uma chave.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Uma função para extrair uma chave de um elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função que é representada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order by using a specified comparer.">Classifica os elementos de uma sequência em ordem decrescente usando um comparador especificado.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Uma função para extrair uma chave de um elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função que é representada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Returns a new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; plus the specified &lt;paramref name=&quot;element&quot; /&gt; prepended at the beginning.">Retorna uma nova sequência passível de consulta que contém os elementos de <paramref name="source" /> mais o <paramref name="element" /> especificado que foi colocado no início.</summary>
      <param name="source" vsli:raw="A queryable sequence.">Uma sequência passível de consulta.</param>
      <param name="element" vsli:raw="An element of type &lt;typeparamref name=&quot;TSource&quot; /&gt; to prepend to &lt;paramref name=&quot;source&quot; /&gt;.">Um elemento do tipo <typeparamref name="TSource" /> a ser precedido a <paramref name="source" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence.">O tipo dos elementos na sequência passível de consulta.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="A new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; plus the specified &lt;paramref name=&quot;element&quot; /&gt; prepended at the beginning.">Uma nova sequência passível de consulta que contém os elementos de <paramref name="source" /> mais o <paramref name="element" /> especificado que foi colocado no início.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Inverts the order of the elements in a sequence.">Inverte a ordem dos elementos em uma sequência.</summary>
      <param name="source" vsli:raw="A sequence of values to reverse.">Uma sequência de valores a ser revertida.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements correspond to those of the input sequence in reverse order.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos correspondem aos da sequência de entrada em ordem inversa.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Projeta cada elemento de uma sequência em um novo formulário.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Uma sequência de valores a serem projetados.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">O tipo do valor retornado pela função representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a projection function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são o resultado da invocação de uma função de transformação em cada elemento de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary vsli:raw="Projects each element of a sequence into a new form by incorporating the element's index.">Projeta cada elemento de uma sequência em um novo formulário, incorporando o índice do elemento.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Uma sequência de valores a serem projetados.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">O tipo do valor retornado pela função representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a projection function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são o resultado da invocação de uma função de transformação em cada elemento de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and combines the resulting sequences into one sequence.">Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" /> e combina as sequências resultantes em uma sequência.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Uma sequência de valores a serem projetados.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">O tipo dos elementos da sequência retornada pela função representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são resultado da invocação de uma função de projeção de um para muitos em cada elemento da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.">Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" /> e combina as sequências resultantes em uma sequência. O índice de cada elemento de origem é usado no formulário projetado desse elemento.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Uma sequência de valores a serem projetados.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element; the second parameter of this function represents the index of the source element.">Uma função de projeção a ser aplicada a cada elemento; o segundo parâmetro dessa função representa o índice do elemento de origem.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">O tipo dos elementos da sequência retornada pela função representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são resultado da invocação de uma função de projeção de um para muitos em cada elemento da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.">Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" /> e invoca uma função de seletor de resultado em cada elemento contido nele. Os valores resultantes de cada sequência intermediária são combinados em uma única sequência unidimensional e retornada.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Uma sequência de valores a serem projetados.</param>
      <param name="collectionSelector" vsli:raw="A projection function to apply to each element of the input sequence.">Uma função de projeção a ser aplicada a cada elemento da sequência de entrada.</param>
      <param name="resultSelector" vsli:raw="A projection function to apply to each element of each intermediate sequence.">Uma função de projeção a ser aplicada a cada elemento de cada sequência intermediária.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by the function represented by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">O tipo dos elementos intermediários coletados pela função representada por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">O tipo dos elementos da sequência resultante.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="collectionSelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking the one-to-many projection function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding &lt;paramref name=&quot;source&quot; /&gt; element to a result element.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são o resultado de invocar a função de projeção de um para muitos <paramref name="collectionSelector" /> em cada elemento de <paramref name="source" /> e, em seguida, mapear cada um desses elementos de sequência e seu elemento <paramref name="source" /> correspondente para um elemento de resultado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.">Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que incorpora o índice do elemento de origem que o produziu. Uma função seletora de resultados é invocada em cada elemento de cada sequência intermediária e os valores resultantes são combinados em uma única sequência unidimensional e retornados.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Uma sequência de valores a serem projetados.</param>
      <param name="collectionSelector" vsli:raw="A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.">Uma função de projeção a ser aplicada a cada elemento da sequência de entrada; o segundo parâmetro dessa função representa o índice do elemento de origem.</param>
      <param name="resultSelector" vsli:raw="A projection function to apply to each element of each intermediate sequence.">Uma função de projeção a ser aplicada a cada elemento de cada sequência intermediária.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by the function represented by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">O tipo dos elementos intermediários coletados pela função representada por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">O tipo dos elementos da sequência resultante.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="collectionSelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking the one-to-many projection function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding &lt;paramref name=&quot;source&quot; /&gt; element to a result element.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são o resultado de invocar a função de projeção de um para muitos <paramref name="collectionSelector" /> em cada elemento de <paramref name="source" /> e, em seguida, mapear cada um desses elementos de sequência e seu elemento <paramref name="source" /> correspondente para um elemento de resultado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by using the default equality comparer to compare elements.">Determina se duas sequências são iguais usando o comparador de igualdade padrão para comparar elementos.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to compare to those of &lt;paramref name=&quot;source2&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são comparados com os de <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to compare to those of the first sequence.">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são comparados com os da primeira sequência.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as duas sequências de origem tiverem o mesmo tamanho e seus elementos correspondentes forem comparados como iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare elements.">Determina se duas sequências são iguais usando um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar elementos.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to compare to those of &lt;paramref name=&quot;source2&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são comparados com os de <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to compare to those of the first sequence.">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são comparados com os da primeira sequência.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to use to compare elements.">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usado para comparar elementos.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as duas sequências de origem tiverem o mesmo tamanho e seus elementos correspondentes forem comparados como iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Retornará o único elemento de uma sequência e lançará uma exceção se não houver exatamente um elemento na sequência.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the single element of.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual o único elemento será retornado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; has more than one element.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">O <paramref name="source" /> tem mais de um elemento.</exception>
      <returns vsli:raw="The single element of the input sequence.">O único elemento de uma sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Retorna o único elemento de uma sequência que satisfaz uma condição especificada e gera uma exceção se houver mais de um tal elemento.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a single element from.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual retornar um único elemento.</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Uma função para testar um elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Nenhum elemento satisfaz a condição na <paramref name="predicate" />.  
  
- ou - 
Mais de um elemento satisfaz a condição na <paramref name="predicate" />.  
  
- ou - 
Uma sequência de origem está vazia.</exception>
      <returns vsli:raw="The single element of the input sequence that satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">O único elemento da sequência de entrada que atende à condição em <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Retorna o único elemento de uma sequência ou um valor padrão se a sequência é vazia; esse método gera uma exceção se há mais de um elemento na sequência.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the single element of.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual o único elemento será retornado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; has more than one element.">O <paramref name="source" /> tem mais de um elemento.</exception>
      <returns vsli:raw="The single element of the input sequence, or &lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the sequence contains no elements.">O único elemento de sequência de entrada ou <c>default</c>(<paramref name="TSource" />) se a sequência não contiver elementos.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Retorna o único elemento de uma sequência que satisfaz uma condição especificada ou um valor padrão se esse elemento não existir. Esse método lança uma exceção se mais de um elemento satisfizer a condição.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a single element from.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual retornar um único elemento.</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Uma função para testar um elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Mais de um elemento satisfaz a condição na <paramref name="predicate" />.</exception>
      <returns vsli:raw="The single element of the input sequence that satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;, or &lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if no such element is found.">O único elemento da sequência de entrada que atende à condição em <paramref name="predicate" /> ou <c>default</c>(<paramref name="TSource" />) se nenhum elemento for encontrado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Bypasses a specified number of elements in a sequence and then returns the remaining elements.">Ignora um número especificado de elementos em uma sequência e retorna os elementos restantes.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual os elementos serão retornados.</param>
      <param name="count" vsli:raw="The number of elements to skip before returning the remaining elements.">O número de elementos a serem ignorados antes de retornar os elementos restantes.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements that occur after the specified index in the input sequence.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos que ocorrem após o índice especificado na sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns a new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; with the last &lt;paramref name=&quot;count&quot; /&gt; elements of the source queryable sequence omitted.">Retorna uma nova sequência passível de consulta que contém os elementos de <paramref name="source" /> com os últimos elementos de <paramref name="count" /> da sequência de origem passível de consulta omitidos.</summary>
      <param name="source" vsli:raw="A queryable sequence.">Uma sequência passível de consulta.</param>
      <param name="count" vsli:raw="The number of elements to omit from the end of the queryable sequence.">O número de elementos a ser omitido do final da sequência passível de consulta.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence.">O tipo dos elementos na sequência passível de consulta.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="A new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; minus &lt;paramref name=&quot;count&quot; /&gt; elements from the end of the queryable sequence.">Uma nova sequência passível de consulta que contém os elementos de <paramref name="source" /> menos os elementos de <paramref name="count" /> do final da sequência passível de consulta.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.">Ignora elementos em uma sequência, contanto que uma condição especificada seja verdadeira e retorne os elementos restantes.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual os elementos serão retornados.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from &lt;paramref name=&quot;source&quot; /&gt; starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos de <paramref name="source" /> começando no primeiro elemento na série linear não aprovada no teste especificado por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.">Ignora elementos em uma sequência, contanto que uma condição especificada seja verdadeira e retorne os elementos restantes. O índice do elemento é usado na lógica da função de predicado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">Um <see cref="T:System.Linq.IQueryable`1" /> do qual os elementos serão retornados.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of this function represents the index of the source element.">Uma função para testar cada elemento de uma condição; o segundo parâmetro dessa função representa o índice do elemento de origem.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from &lt;paramref name=&quot;source&quot; /&gt; starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos de <paramref name="source" /> começando no primeiro elemento na série linear não aprovada no teste especificado por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcula a soma de uma sequência de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Uma sequência de valores <see cref="T:System.Decimal" /> para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcula a soma de uma sequência de valores <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Uma sequência de valores <see cref="T:System.Double" /> para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcula a soma de uma sequência de valores <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Uma sequência de valores <see cref="T:System.Int32" /> para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcula a soma de uma sequência de valores <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Uma sequência de valores <see cref="T:System.Int64" /> para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Computa a soma de uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Computa a soma de uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Computa a soma de uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Computa a soma de uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Computa a soma de uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcula a soma de uma sequência de valores <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Uma sequência de valores <see cref="T:System.Single" /> para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a soma da sequência de valores <see cref="T:System.Decimal" /> que é obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a soma da sequência de valores <see cref="T:System.Double" /> que é obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a soma da sequência de valores <see cref="T:System.Int32" /> que é obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a soma da sequência de valores <see cref="T:System.Int64" /> que é obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a soma da sequência de valores <see cref="T:System.Decimal" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a soma da sequência de valores <see cref="T:System.Double" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a soma da sequência de valores <see cref="T:System.Int32" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a soma da sequência de valores <see cref="T:System.Int64" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a soma da sequência de valores <see cref="T:System.Single" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula a soma da sequência de valores <see cref="T:System.Single" /> que é obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns a specified number of contiguous elements from the start of a sequence.">Retorna um número especificado de elementos contíguos do início de uma sequência.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">A sequência da qual os elementos serão retornados.</param>
      <param name="count" vsli:raw="The number of elements to return.">O número de elementos a serem retornados.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the specified number of elements from the start of &lt;paramref name=&quot;source&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém o número especificado de elementos do início de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns a new queryable sequence that contains the last &lt;paramref name=&quot;count&quot; /&gt; elements from &lt;paramref name=&quot;source&quot; /&gt;.">Retorna uma nova sequência passível de consulta que contém os últimos elementos de <paramref name="count" /> de <paramref name="source" />.</summary>
      <param name="source" vsli:raw="A queryable sequence instance.">Uma instância da sequência passível de consulta.</param>
      <param name="count" vsli:raw="The number of elements to take from the end of the queryable sequence.">O número de elementos a ser retirado do final da sequência passível de consulta.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence.">O tipo dos elementos na sequência passível de consulta.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns vsli:raw="A new queryable sequence that contains the last &lt;paramref name=&quot;count&quot; /&gt; elements from &lt;paramref name=&quot;source&quot; /&gt;.">Uma nova sequência passível de consulta que contém os últimos elementos de <paramref name="count" /> de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true.">Retorna os elementos de uma sequência contanto que uma condição especificada seja verdadeira.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">A sequência da qual os elementos serão retornados.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence occurring before the element at which the test specified by &lt;paramref name=&quot;predicate&quot; /&gt; no longer passes.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos da sequência de entrada que ocorrem antes do elemento no qual o teste especificado por <paramref name="predicate" /> não é mais aprovado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.">Retorna os elementos de uma sequência contanto que uma condição especificada seja verdadeira. O índice do elemento é usado na lógica da função de predicado.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">A sequência da qual os elementos serão retornados.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.">Uma função para testar cada elemento em relação a uma condição; o segundo parâmetro da função representa o índice do elemento na sequência de origem.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence occurring before the element at which the test specified by &lt;paramref name=&quot;predicate&quot; /&gt; no longer passes.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos da sequência de entrada que ocorrem antes do elemento no qual o teste especificado por <paramref name="predicate" /> não é mais aprovado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.">Executa uma ordenação posterior dos elementos em uma sequência em ordem crescente de acordo com uma chave.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Uma função para extrair uma chave de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função representada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.">Executa uma ordenação posterior dos elementos em uma sequência em ordem crescente usando um comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Uma função para extrair uma chave de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função representada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.">Executa uma ordenação posterior dos elementos em uma sequência em ordem decrescente, de acordo com uma chave.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Uma função para extrair uma chave de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">O tipo da chave retornada pela função representada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.">Executa uma ordenação posterior dos elementos em uma sequência em ordem decrescente usando um comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Uma função para extrair uma chave de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key that is returned by the &lt;paramref name=&quot;keySelector&quot; /&gt; function.">O tipo da chave que é retornada pela <paramref name="keySelector" /> função.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
      <returns vsli:raw="A collection whose elements are sorted in descending order according to a key.">Uma coleção cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using the default equality comparer.">Produz a união de conjunto de duas sequências usando o comparador de igualdade padrão.</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements form the first set for the union operation.">Uma sequência cujos elementos distintos formam o primeiro conjunto da operação de união.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements form the second set for the union operation.">Uma sequência cujos elementos distintos formam o segundo conjunto da operação de união.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos de ambas as sequências de entrada, excluindo as duplicatas.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Produz a união de conjunto de duas sequências usando o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements form the first set for the union operation.">Uma sequência cujos elementos distintos formam o primeiro conjunto da operação de união.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements form the second set for the union operation.">Uma sequência cujos elementos distintos formam o segundo conjunto da operação de união.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos de ambas as sequências de entrada, excluindo as duplicatas.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Filtra uma sequência de valores com base em um predicado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to filter.">Um <see cref="T:System.Linq.IQueryable`1" /> a ser filtrado.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos da sequência de entrada que atendem à condição especificada por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.">Filtra uma sequência de valores com base em um predicado. O índice de cada elemento é usado na lógica da função de predicado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to filter.">Um <see cref="T:System.Linq.IQueryable`1" /> a ser filtrado.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.">Uma função para testar cada elemento em relação a uma condição; o segundo parâmetro da função representa o índice do elemento na sequência de origem.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos da sequência de entrada que atendem à condição especificada por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Zip``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary vsli:raw="Produces a sequence of tuples with elements from the two specified sequences.">Produz uma sequência de tuplas com elementos das duas sequências especificadas.</summary>
      <param name="source1" vsli:raw="The first sequence to merge.">A primeira sequência a ser mesclada.</param>
      <param name="source2" vsli:raw="The second sequence to merge.">A segunda sequência a ser mesclada.</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">O tipo de elementos na primeira sequência de entrada.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">O tipo de elementos na segunda sequência de entrada.</typeparam>
      <returns vsli:raw="A sequence of tuples with elements taken from the first and second sequences, in that order.">Uma sequência de tuplas com elementos extraídos da primeira e segunda sequências, nessa ordem.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Merges two sequences by using the specified predicate function.">Mescla duas sequências usando a função de predicado especificada.</summary>
      <param name="source1" vsli:raw="The first sequence to merge.">A primeira sequência a ser mesclada.</param>
      <param name="source2" vsli:raw="The second sequence to merge.">A segunda sequência a ser mesclada.</param>
      <param name="resultSelector" vsli:raw="A function that specifies how to merge the elements from the two sequences.">Uma função que especifica como mesclar os elementos das duas sequências.</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">O tipo de elementos na primeira sequência de entrada.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">O tipo de elementos na segunda sequência de entrada.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the result sequence.">O tipo de elementos na sequência de resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains merged elements of two input sequences.">Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos mesclados de duas sequências de entrada.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.EventBasedAsync</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>Fornece dados para o evento MethodName <see langword="Completed" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</summary>
      <param name="error">Qualquer erro que tenha ocorrido durante a operação assíncrona.</param>
      <param name="cancelled">Um valor que indica se a operação assíncrona foi cancelada.</param>
      <param name="userState">O objeto de estado fornecido pelo usuário opcional passado para o método <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</param>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>Gera uma exceção fornecida pelo usuário se uma operação assíncrona falhou.</summary>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> é <see langword="true" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A propriedade <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> foi definida pela operação assíncrona. A propriedade <see cref="P:System.Exception.InnerException" /> contém uma referência a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>Obtém um valor que indica se uma operação assíncrona foi cancelada.</summary>
      <returns>
        <see langword="true" /> se a operação em segundo plano tiver sido cancelada; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>Obtém um valor que indica qual erro ocorreu durante uma operação assíncrona.</summary>
      <returns>Uma instância de <see cref="T:System.Exception" />, se ocorreu um erro durante uma operação assíncrona, caso contrário, <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>Obtém o identificador exclusivo para a tarefa assíncrona.</summary>
      <returns>Uma referência de objeto que identifica exclusivamente a tarefa assíncrona, caso contrário, <see langword="null" /> se nenhum valor tiver sido definido.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>Representa o método que manipulará o evento MethodName <see langword="Completed" /> de uma operação assíncrona.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>Controla o tempo de vida de uma operação assíncrona.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Finalize">
      <summary>Finaliza a operação assíncrona.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>Encerra o tempo de vida de uma operação assíncrona.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> foi chamado anteriormente para essa tarefa.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invoca um delegado no thread ou contexto apropriado para o modelo de aplicativo.</summary>
      <param name="d">Um objeto <see cref="T:System.Threading.SendOrPostCallback" /> que encapsula o delegado a ser chamado quando a operação é encerrada.</param>
      <param name="arg">Um argumento para o delegado contido no parâmetro <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException">O método <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> foi chamado anteriormente para essa tarefa.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Encerra o tempo de vida de uma operação assíncrona.</summary>
      <param name="d">Um objeto <see cref="T:System.Threading.SendOrPostCallback" /> que encapsula o delegado a ser chamado quando a operação é encerrada.</param>
      <param name="arg">Um argumento para o delegado contido no parâmetro <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> foi chamado anteriormente para essa tarefa.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>Obtém o objeto <see cref="T:System.Threading.SynchronizationContext" /> que foi transmitido ao construtor.</summary>
      <returns>O <see cref="T:System.Threading.SynchronizationContext" /> objeto que foi passado para o construtor.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>Obtém ou define um objeto usado para identificar uma operação assíncrona de maneira única.</summary>
      <returns>O objeto de estado passado para a invocação do método assíncrono.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>Fornece gerenciamento de simultaneidade para classes que oferecem suporte a chamadas de método assíncrono. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>Retorna um <see cref="T:System.ComponentModel.AsyncOperation" /> para acompanhar a duração de uma operação assíncrona específica.</summary>
      <param name="userSuppliedState">Um objeto usado para associar uma parte do estado do cliente, como uma ID de tarefa, com uma operação assíncrona específica.</param>
      <returns>Um <see cref="T:System.ComponentModel.AsyncOperation" /> que pode ser usado para acompanhar a duração de uma invocação de método assíncrono.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>Obtém ou define o contexto de sincronização para a operação assíncrona.</summary>
      <returns>O contexto de sincronização para a operação assíncrona.</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>Executa uma operação em outro thread.</summary>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>Ocorre quando <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> é chamado.</summary>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>Ocorre quando <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> é chamado.</summary>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>Ocorre quando a operação em segundo plano foi concluída, cancelada ou gerou uma exceção.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BackgroundWorker" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>Solicita o cancelamento de uma operação pendente em segundo plano.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> é <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)">
      <param name="disposing" />
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>Aciona o evento <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
      <param name="e">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>Aciona o evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="e">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>Aciona o evento <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</summary>
      <param name="e">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>Aciona o evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress">O percentual, de 0 a 100, da operação em segundo plano concluída.</param>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> está definida como <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>Aciona o evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress">O percentual, de 0 a 100, da operação em segundo plano concluída.</param>
      <param name="userState">Um <see cref="T:System.Object" /> exclusivo que indica o estado do usuário. Retornado como a propriedade <see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState" /> do <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />.</param>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> está definida como <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>Inicia a execução de uma operação em segundo plano.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> é <see langword="true" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>Inicia a execução de uma operação em segundo plano.</summary>
      <param name="argument">Um parâmetro para uso pela operação em segundo plano a ser executado no manipulador de eventos <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> é <see langword="true" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>Obtém um valor que indica se o aplicativo solicitou o cancelamento de uma operação em segundo plano.</summary>
      <returns>
        <see langword="true" /> se o aplicativo tiver solicitado o cancelamento de uma operação em segundo plano; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>Obtém um valor que indica se o <see cref="T:System.ComponentModel.BackgroundWorker" /> está executando uma operação assíncrona.</summary>
      <returns>
        <see langword="true" />, se o <see cref="T:System.ComponentModel.BackgroundWorker" /> estiver executando uma operação assíncrona; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>Obtém ou define um valor que indica se o <see cref="T:System.ComponentModel.BackgroundWorker" /> pode relatar atualizações de progresso.</summary>
      <returns>
        <see langword="true" /> se <see cref="T:System.ComponentModel.BackgroundWorker" /> der suporte a atualizações de progresso; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>Obtém ou define um valor que indica se o <see cref="T:System.ComponentModel.BackgroundWorker" /> dá suporte ao cancelamento assíncrono.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.BackgroundWorker" /> der suporte ao cancelamento; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>Fornece dados para o manipulador de eventos <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DoWorkEventArgs" />.</summary>
      <param name="argument">Especifica um argumento para uma operação assíncrona.</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>Obtém um valor que representa o argumento de uma operação assíncrona.</summary>
      <returns>Um <see cref="T:System.Object" /> que representa o argumento de uma operação assíncrona.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>Obtém ou define um valor que representa o resultado de uma operação assíncrona.</summary>
      <returns>Um <see cref="T:System.Object" /> que representa o resultado de uma operação assíncrona.</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>Representa o método que manipulará o evento de <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> . Essa classe não pode ser herdada.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.DoWorkEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />.</summary>
      <param name="progressPercentage">O percentual de conclusão de uma tarefa assíncrona.</param>
      <param name="userState">Um estado de usuário único.</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>Obtém o percentual de progresso da tarefa assíncrona.</summary>
      <returns>Um valor de percentual que indica o progresso da tarefa assíncrona.</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>Obtém um estado de usuário exclusivo.</summary>
      <returns>Um <see cref="T:System.Object" /> exclusivo que indica o estado do usuário.</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>Representa o método que manipulará o evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> da classe <see cref="T:System.ComponentModel.BackgroundWorker" />. Essa classe não pode ser herdada.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>Fornece dados para o evento MethodName <see langword="Completed" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />.</summary>
      <param name="result">O resultado de uma operação assíncrona.</param>
      <param name="error">Qualquer erro que tenha ocorrido durante a operação assíncrona.</param>
      <param name="cancelled">Um valor que indica se a operação assíncrona foi cancelada.</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>Obtém um valor que representa o resultado de uma operação assíncrona.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> não é <see langword="null" />. A propriedade <see cref="P:System.Exception.InnerException" /> contém uma referência a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> é <see langword="true" />.</exception>
      <returns>Um <see cref="T:System.Object" /> que representa o resultado de uma operação assíncrona.</returns>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.UserState">
      <summary>Obtém um valor que representa o estado do usuário.</summary>
      <returns>Um <see cref="T:System.Object" /> que representa o estado de usuário.</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>Representa o método que manipulará o evento de <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> de uma classe <see cref="T:System.ComponentModel.BackgroundWorker" />.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> que contém os dados do evento.</param>
    </member>
  </members>
</doc>
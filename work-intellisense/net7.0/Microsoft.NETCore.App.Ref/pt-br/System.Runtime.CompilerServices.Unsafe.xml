<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.CompilerServices.Unsafe</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.Unsafe">
      <summary>Contém a funcionalidade genérica de baixo nível para manipular ponteiros.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)">
      <summary>Adiciona um deslocamento de elementos à referência fornecida.</summary>
      <param name="source">A referência à qual adicionar o deslocamento.</param>
      <param name="elementOffset">O deslocamento a ser adicionado.</param>
      <typeparam name="T">O tipo de referência.</typeparam>
      <returns>Uma nova referência que reflete a adição de deslocamento ao ponteiro.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)">
      <summary>Adiciona um deslocamento de elementos à referência fornecida.</summary>
      <param name="source">A referência à qual adicionar o deslocamento.</param>
      <param name="elementOffset">O deslocamento a ser adicionado.</param>
      <typeparam name="T">O tipo de referência.</typeparam>
      <returns>Uma nova referência que reflete a adição de deslocamento ao ponteiro.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)">
      <summary>Adiciona um deslocamento de elementos ao ponteiro nulo fornecido.</summary>
      <param name="source">O ponteiro nulo ao qual adicionar o deslocamento.</param>
      <param name="elementOffset">O deslocamento a ser adicionado.</param>
      <typeparam name="T">O tipo de ponteiro void.</typeparam>
      <returns>Um novo ponteiro nulo que reflete a adição do deslocamento ao ponteiro especificado.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)">
      <summary>Adiciona um deslocamento de bytes à referência fornecida.</summary>
      <param name="source">A referência à qual adicionar o deslocamento.</param>
      <param name="byteOffset">O deslocamento a ser adicionado.</param>
      <typeparam name="T">O tipo de referência.</typeparam>
      <returns>Uma nova referência que reflete a adição de deslocamento de bytes ao ponteiro.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)">
      <summary>Determina se as referências especificadas apontam para o mesmo local.</summary>
      <param name="left">A primeira referência a ser comparada.</param>
      <param name="right">A segunda referência a ser comparada.</param>
      <typeparam name="T">O tipo de referência.</typeparam>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> apontam para o mesmo local; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)">
      <summary>Converte o objeto fornecido no tipo especificado.</summary>
      <param name="o">O objeto a ser convertido.</param>
      <typeparam name="T">O tipo para o qual o objeto será convertido.</typeparam>
      <returns>O objeto original, convertido no tipo fornecido.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)">
      <summary>Reinterpreta a referência fornecida como uma referência a um valor do tipo <typeparamref name="TTo" />.</summary>
      <param name="source">A referência a ser reinterpretada.</param>
      <typeparam name="TFrom">O tipo de referência a ser reinterpreta.</typeparam>
      <typeparam name="TTo">O tipo desejado da referência.</typeparam>
      <returns>Uma referência a um valor do tipo <typeparamref name="TTo" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)">
      <summary>Retorna um ponteiro para o parâmetro fornecido por referência.</summary>
      <param name="value">O objeto cujo ponteiro é obtido.</param>
      <typeparam name="T">O tipo de objeto.</typeparam>
      <returns>Um ponteiro para o valor especificado.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)">
      <summary>Reinterpreta a referência somente leitura fornecida como uma referência.</summary>
      <param name="source">A referência somente leitura a ser reinterpretada.</param>
      <typeparam name="T">O tipo de referência.</typeparam>
      <returns>Uma referência a um valor do tipo <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)">
      <summary>Reinterpreta o local indicado como referência a um valor do tipo <typeparamref name="T" />.</summary>
      <param name="source">O local do valor de referência.</param>
      <typeparam name="T">O tipo do local interpretado.</typeparam>
      <returns>Uma referência a um valor do tipo <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)">
      <summary>Determina o deslocamento de bytes da origem para o destino das referências fornecidas.</summary>
      <param name="origin">A referência à origem.</param>
      <param name="target">A referência ao destino.</param>
      <typeparam name="T">O tipo de referência.</typeparam>
      <returns>Deslocamento de bytes da origem para o destino, ou seja, <paramref name="target" /> - <paramref name="origin" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)">
      <summary>Copia um valor do tipo <typeparamref name="T" /> para o local em questão.</summary>
      <param name="destination">O local para o qual copiar.</param>
      <param name="source">Um ponteiro para o valor a ser copiado.</param>
      <typeparam name="T">O tipo de valor a ser copiado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)">
      <summary>Copia um valor do tipo <typeparamref name="T" /> para o local em questão.</summary>
      <param name="destination">O local para o qual copiar.</param>
      <param name="source">Uma referência ao valor a ser copiado.</param>
      <typeparam name="T">O tipo de valor a ser copiado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Copia bytes do endereço de origem para o endereço de destino.</summary>
      <param name="destination">O endereço de destino para o qual copiar.</param>
      <param name="source">O endereço de origem do qual copiar.</param>
      <param name="byteCount">O número de bytes a serem copiados.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)">
      <summary>Copia bytes do endereço de origem para o endereço de destino.</summary>
      <param name="destination">O endereço de destino para o qual copiar.</param>
      <param name="source">O endereço de origem do qual copiar.</param>
      <param name="byteCount">O número de bytes a serem copiados.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Copia bytes do endereço de origem para o endereço de destino sem pressupor um alinhamento dependente da arquitetura dos endereços.</summary>
      <param name="destination">O endereço de destino para o qual copiar.</param>
      <param name="source">O endereço de origem do qual copiar.</param>
      <param name="byteCount">O número de bytes a serem copiados.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)">
      <summary>Copia bytes do endereço de origem para o endereço de destino sem pressupor um alinhamento dependente da arquitetura dos endereços.</summary>
      <param name="destination">O endereço de destino para o qual copiar.</param>
      <param name="source">O endereço de origem do qual copiar.</param>
      <param name="byteCount">O número de bytes a serem copiados.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)">
      <summary>Inicializa um bloco de memória no local especificado com um valor inicial fornecido.</summary>
      <param name="startAddress">O endereço do início do bloco de memória a ser inicializado.</param>
      <param name="value">O valor para o qual inicializar o bloco.</param>
      <param name="byteCount">O número de bytes a ser inicializado.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)">
      <summary>Inicializa um bloco de memória no local especificado com um valor inicial fornecido.</summary>
      <param name="startAddress">O endereço do início do bloco de memória a ser inicializado.</param>
      <param name="value">O valor para o qual inicializar o bloco.</param>
      <param name="byteCount">O número de bytes a ser inicializado.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)">
      <summary>Inicializa um bloco de memória no local especificado com um valor inicial fornecido sem pressupor um alinhamento dependente de arquitetura do endereço.</summary>
      <param name="startAddress">O endereço do início do bloco de memória a ser inicializado.</param>
      <param name="value">O valor para o qual inicializar o bloco.</param>
      <param name="byteCount">O número de bytes a ser inicializado.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)">
      <summary>Inicializa um bloco de memória no local especificado com um valor inicial fornecido sem pressupor um alinhamento dependente de arquitetura do endereço.</summary>
      <param name="startAddress">O endereço do início do bloco de memória a ser inicializado.</param>
      <param name="value">O valor para o qual inicializar o bloco.</param>
      <param name="byteCount">O número de bytes a ser inicializado.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)">
      <summary>Retorna um valor que indica se uma referência especificada é maior que outra referência especificada.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <typeparam name="T">O tipo da referência.</typeparam>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)">
      <summary>Retorna um valor que indica se uma referência especificada é menor que outra referência especificada.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <typeparam name="T">O tipo da referência.</typeparam>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja menor que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsNullRef``1(``0@)">
      <param name="source" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.NullRef``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)">
      <summary>Lê um valor do tipo <typeparamref name="T" /> do local indicado.</summary>
      <param name="source">O local do qual ler.</param>
      <typeparam name="T">O tipo a ser lido.</typeparam>
      <returns>Um objeto do tipo <typeparamref name="T" /> lê o local especificado.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)">
      <summary>Lê um valor do tipo <typeparamref name="T" /> do local indicado sem pressupor um alinhamento dependente da arquitetura dos endereços.</summary>
      <param name="source">O local do qual ler.</param>
      <typeparam name="T">O tipo a ser lido.</typeparam>
      <returns>Um objeto do tipo <typeparamref name="T" /> lê o local especificado.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)">
      <summary>Lê um valor do tipo <typeparamref name="T" /> do local indicado sem pressupor um alinhamento dependente da arquitetura dos endereços.</summary>
      <param name="source">O local do qual ler.</param>
      <typeparam name="T">O tipo a ser lido.</typeparam>
      <returns>Um objeto do tipo <typeparamref name="T" /> lê o local especificado.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1">
      <summary>Retorna o tamanho de um objeto do parâmetro de tipo fornecido.</summary>
      <typeparam name="T">O tipo de objeto cujo tamanho é recuperado.</typeparam>
      <returns>O tamanho de um objeto do tipo <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SkipInit``1(``0@)">
      <summary>Ignora regras de atribuição definidas para um determinado valor.</summary>
      <param name="value">O objeto não inicializado.</param>
      <typeparam name="T">O tipo do objeto não inicializado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)">
      <summary>Subtrai um deslocamento de elementos da referência fornecida.</summary>
      <param name="source">A referência da qual subtrair o deslocamento.</param>
      <param name="elementOffset">O deslocamento a ser subtraído.</param>
      <typeparam name="T">O tipo de referência.</typeparam>
      <returns>Uma nova referência que reflete a subtração de deslocamento do ponteiro.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)">
      <summary>Subtrai um deslocamento de elementos da referência fornecida.</summary>
      <param name="source">A referência da qual subtrair o deslocamento.</param>
      <param name="elementOffset">O deslocamento a ser subtraído.</param>
      <typeparam name="T">O tipo de referência.</typeparam>
      <returns>Uma nova referência que reflete a subtração de deslocamento do ponteiro.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)">
      <summary>Subtrai um deslocamento de elementos do ponteiro nulo fornecido.</summary>
      <param name="source">O ponteiro nulo do qual subtrair o deslocamento.</param>
      <param name="elementOffset">O deslocamento a ser subtraído.</param>
      <typeparam name="T">O tipo do ponteiro void.</typeparam>
      <returns>Um novo ponteiro nulo que reflete a subtração do deslocamento do ponteiro especificado.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)">
      <summary>Subtrai um deslocamento de bytes da referência fornecida.</summary>
      <param name="source">A referência da qual subtrair o deslocamento.</param>
      <param name="byteOffset">O deslocamento a ser subtraído.</param>
      <typeparam name="T">O tipo de referência.</typeparam>
      <returns>Uma nova referência que reflete a subtração de deslocamento de bytes do ponteiro.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)">
      <summary>Retorna um <see langword="mutable ref" /> para um valor convertido.</summary>
      <param name="box">O valor para desconversão.</param>
      <typeparam name="T">O tipo a ser desemoldurado.</typeparam>
      <exception cref="T:System.NullReferenceException">
        <paramref name="box" /> é <see langword="null" />, e <typeparamref name="T" /> é um tipo de valor não anulável.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="box" /> não é um tipo de valor convertido.
         
- ou -

<paramref name="box" /> não é um <typeparamref name="T" /> convertido.</exception>
      <exception cref="T:System.TypeLoadException">Não foi possível localizar <typeparamref name="T" />.</exception>
      <returns>Um <see langword="mutable ref" /> para o valor convertido <paramref name="box" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)">
      <summary>Grava um valor do tipo <typeparamref name="T" /> no local em questão.</summary>
      <param name="destination">O local para o qual gravar.</param>
      <param name="value">O valor a ser gravado.</param>
      <typeparam name="T">O tipo de valor a ser gravado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)">
      <summary>Grava um valor do tipo <typeparamref name="T" /> no local indicado sem pressupor um alinhamento dependente da arquitetura dos endereços.</summary>
      <param name="destination">O local para o qual gravar.</param>
      <param name="value">O valor a ser gravado.</param>
      <typeparam name="T">O tipo de valor a ser gravado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)">
      <summary>Grava um valor do tipo <typeparamref name="T" /> no local indicado sem pressupor um alinhamento dependente da arquitetura dos endereços.</summary>
      <param name="destination">O local para o qual gravar.</param>
      <param name="value">O valor a ser gravado.</param>
      <typeparam name="T">O tipo de valor a ser gravado.</typeparam>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary>Dá suporte a modos alternativos de gerar o MSIL (Microsoft Intermediate Language) e metadados para um método dinâmico, incluindo métodos para criar tokens e para inserir os blobs de assinatura de variável local, tratamento de exceção e código.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary>Obtém um token, válido no escopo do <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual, representando a assinatura do método dinâmico associado.</summary>
      <param name="signature">Uma matriz que contém a assinatura.</param>
      <returns>Um token que pode ser inserido em metadados e o fluxo MSIL para o método dinâmico associado.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary>Obtém um token, válido no escopo do <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual, representando um método dinâmico a ser chamado do método associado.</summary>
      <param name="method">O método dinâmico a ser chamado.</param>
      <returns>Um token que pode ser inserido em um fluxo MSIL para o método dinâmico associado, como o destino de uma instrução MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary>Obtém um token válido no escopo atual <see cref="T:System.Reflection.Emit.DynamicILInfo" />, que representa um campo para ser acessado do método dinâmico associado.</summary>
      <param name="field">O campo a ser acessado.</param>
      <returns>Um token que pode ser usado como o operando de uma instrução MSIL que acessa os campos no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>Obtém um token válido no escopo atual <see cref="T:System.Reflection.Emit.DynamicILInfo" />, que representa um campo para ser acessado do método dinâmico associado, o campo está no tipo genérico especificado.</summary>
      <param name="field">O campo a ser acessado.</param>
      <param name="contextType">O tipo genérico ao qual o campo pertence.</param>
      <returns>Um token que pode ser usado como o operando de uma instrução MSIL que acessa os campos no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary>Obtém um token válido no escopo atual <see cref="T:System.Reflection.Emit.DynamicILInfo" />, que representa um método para ser acessado do método dinâmico associado.</summary>
      <param name="method">O método a ser acessado.</param>
      <returns>Um token que pode ser usado como o operando de uma instrução MSIL que acessa os métodos, como <see cref="F:System.Reflection.Emit.OpCodes.Call" /> ou <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>Obtém um token válido no escopo do <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual, que representa um método em um tipo genérico.</summary>
      <param name="method">O método.</param>
      <param name="contextType">O tipo genérico ao qual o método pertence.</param>
      <returns>Um token que pode ser usado como o operando de uma instrução MSIL que acessa os métodos, como <see cref="F:System.Reflection.Emit.OpCodes.Call" /> ou <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary>Obtém um token válido no escopo do <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual, representando um tipo a ser usado no método dinâmico associado.</summary>
      <param name="type">O tipo a ser usado.</param>
      <returns>Um token que pode ser usado como o operando de uma instrução MSIL que exige um tipo no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary>Obtém um token válido no escopo do <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual, representando um literal de cadeia de caracteres a ser usado no método dinâmico associado.</summary>
      <param name="literal">A cadeia de caracteres a ser usada.</param>
      <returns>Um token que pode ser usado como o operando de uma instrução MSIL que exige uma cadeia de caracteres no escopo do objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> atual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary>Define o corpo de código do método dinâmico associado.</summary>
      <param name="code">Um ponteiro para uma matriz de bytes que contém o fluxo MSIL.</param>
      <param name="codeSize">O número de bytes no fluxo MSIL.</param>
      <param name="maxStackSize">O número máximo de itens na pilha de operando quando o método está sendo executado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" /> é <see langword="null" /> e <paramref name="codeSize" /> é maior que 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codeSize" /> é menor que 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary>Define o corpo de código do método dinâmico associado.</summary>
      <param name="code">Uma matriz que contém o fluxo MSIL.</param>
      <param name="maxStackSize">O número máximo de itens na pilha de operando quando o método está sendo executado.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary>Define os metadados de exceção para o método dinâmico associado.</summary>
      <param name="exceptions">Um ponteiro para uma matriz de bytes que contém os metadados de exceção.</param>
      <param name="exceptionsSize">O número de bytes de metadados de exceção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> é <see langword="null" /> e <paramref name="exceptionSize" /> é maior que 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exceptionSize" /> é menor que 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary>Define os metadados de exceção para o método dinâmico associado.</summary>
      <param name="exceptions">Uma matriz que contém os metadados de exceção.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary>Define a assinatura de variável local que descreve o layout de variáveis locais para o método dinâmico associado.</summary>
      <param name="localSignature">Uma matriz que contém o layout de variáveis locais para o <see cref="T:System.Reflection.Emit.DynamicMethod" /> associado.</param>
      <param name="signatureSize">O número de bytes na assinatura.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localSignature" /> é <see langword="null" /> e <paramref name="signatureSize" /> é maior que 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureSize" /> é menor que 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary>Define a assinatura de variável local que descreve o layout de variáveis locais para o método dinâmico associado.</summary>
      <param name="localSignature">Uma matriz que contém o layout de variáveis locais para o <see cref="T:System.Reflection.Emit.DynamicMethod" /> associado.</param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary>Obtém o método dinâmico cujo corpo é gerado pela instância atual.</summary>
      <returns>Um <see cref="T:System.Reflection.Emit.DynamicMethod" /> objeto que representa o método dinâmico para o qual o <see cref="T:System.Reflection.Emit.DynamicILInfo" /> objeto atual está gerando código.</returns>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>Define e representa um método dinâmico que pode ser compilado, executado e descartado. Os métodos descartados estão disponíveis para coleta de lixo.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Cria um método dinâmico que é global para um módulo, especificando o nome do método, os atributos, a convenção de chamada, o tipo de retorno, os tipos de parâmetro, o módulo e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para os tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</summary>
      <param name="name">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="attributes">Uma combinação bit a bit de valores <see cref="T:System.Reflection.MethodAttributes" /> que especifica os atributos do método dinâmico. A única combinação permitida é <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">A convenção de chamada para o método dinâmico. Deve ser <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="m">Um <see cref="T:System.Reflection.Module" /> que representa o módulo com o qual o método dinâmico deve ser logicamente associado.</param>
      <param name="skipVisibility">
        <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="m" /> é um módulo que fornece hospedagem anônima para métodos dinâmicos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="m" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> é uma combinação de sinalizadores diferente de <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.  
  
- ou - 
 <paramref name="callingConvention" /> não é <see cref="F:System.Reflection.CallingConventions.Standard" />.  
  
- ou - 
 <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Cria um método dinâmico, especificando o nome do método, os atributos, a convenção de chamada, o tipo de retorno, os tipos de parâmetro, o tipo como qual o método dinâmico é logicamente associado e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</summary>
      <param name="name">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="attributes">Uma combinação bit a bit de valores <see cref="T:System.Reflection.MethodAttributes" /> que especifica os atributos do método dinâmico. A única combinação permitida é <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">A convenção de chamada para o método dinâmico. Deve ser <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="owner">Um <see cref="T:System.Type" /> ao qual o método dinâmico está logicamente associado. O método dinâmico tem acesso a todos os membros do tipo.</param>
      <param name="skipVisibility">
        <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="owner" /> é uma interface, uma matriz, um tipo genérico aberto ou um parâmetro de tipo de um método ou tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="owner" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> é uma combinação de sinalizadores diferente de <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.  
  
- ou - 
 <paramref name="callingConvention" /> não é <see cref="F:System.Reflection.CallingConventions.Standard" />.  
  
- ou - 
 <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>Inicializa um método dinâmico hospedado anonimamente, especificando o nome do método, o tipo de retorno e os tipos de parâmetro.</summary>
      <param name="name">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <exception cref="T:System.ArgumentException">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>Inicializa um método dinâmico hospedado anonimamente, especificando o nome do método, o tipo de retorno, os tipos de parâmetro e se as verificações de visibilidade JIT (Just-In-Time) devem ser ignoradas para os tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</summary>
      <param name="name">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="restrictedSkipVisibility">
        <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, com essa restrição: o nível de confiança dos assemblies que contêm esses tipos e membros deve ser igual ou menor do que o nível de confiança da pilha de chamadas que emite o método dinâmico, caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>Cria um método dinâmico global para um módulo, especificando o nome do método, o tipo de retorno, os tipos de parâmetro e o módulo.</summary>
      <param name="name">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="m">Um <see cref="T:System.Reflection.Module" /> que representa o módulo com o qual o método dinâmico deve ser logicamente associado.</param>
      <exception cref="T:System.ArgumentException">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="m" /> é um módulo que fornece hospedagem anônima para métodos dinâmicos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="m" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Cria um método dinâmico que é global para um módulo, especificando o nome do método, o tipo de retorno, os tipos de parâmetro, o módulo e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para os tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</summary>
      <param name="name">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="m">Um <see cref="T:System.Reflection.Module" /> que representa o módulo com o qual o método dinâmico deve ser logicamente associado.</param>
      <param name="skipVisibility">
        <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico.</param>
      <exception cref="T:System.ArgumentException">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="m" /> é um módulo que fornece hospedagem anônima para métodos dinâmicos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="m" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>Cria um método dinâmico, especificando o nome do método, o tipo de retorno, os tipos de parâmetro e o tipo ao qual o método dinâmico está logicamente associado.</summary>
      <param name="name">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="owner">Um <see cref="T:System.Type" /> ao qual o método dinâmico está logicamente associado. O método dinâmico tem acesso a todos os membros do tipo.</param>
      <exception cref="T:System.ArgumentException">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="owner" /> é uma interface, uma matriz, um tipo genérico aberto ou um parâmetro de tipo de um método ou tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="owner" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> é <see langword="null" /> ou é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Cria um método dinâmico, especificando o nome do método, o tipo de retorno, os tipos de parâmetro, o tipo como qual o método dinâmico é logicamente associado e se as verificações de visibilidade JIT (just-in-time) devem ser ignoradas para tipos e membros acessados pelo MSIL (Microsoft Intermediate Language) do método dinâmico.</summary>
      <param name="name">O nome do método dinâmico. Isso pode ser uma cadeia de comprimento zero, mas não pode ser <see langword="null" />.</param>
      <param name="returnType">Um objeto <see cref="T:System.Type" /> que especifica o tipo de retorno do método dinâmico ou <see langword="null" /> se o método não tiver nenhum tipo de retorno.</param>
      <param name="parameterTypes">Uma matriz de objetos <see cref="T:System.Type" /> que especifica os tipos dos parâmetros do método dinâmico ou <see langword="null" />, se o método não tiver nenhum parâmetro.</param>
      <param name="owner">Um <see cref="T:System.Type" /> ao qual o método dinâmico está logicamente associado. O método dinâmico tem acesso a todos os membros do tipo.</param>
      <param name="skipVisibility">
        <see langword="true" /> para ignorar as verificações de visibilidade JIT nos tipos e membros acessados pelo MSIL do método dinâmico, caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Um elemento de <paramref name="parameterTypes" /> é <see langword="null" /> ou <see cref="T:System.Void" />.  
  
- ou - 
 <paramref name="owner" /> é uma interface, uma matriz, um tipo genérico aberto ou um parâmetro de tipo de um método ou tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="owner" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> é <see langword="null" /> ou é um tipo para o qual <see cref="P:System.Type.IsByRef" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>Conclui o método dinâmico e cria um delegado que pode ser usado para executá-lo.</summary>
      <param name="delegateType">Um tipo de delegado cuja assinatura corresponde à do método dinâmico.</param>
      <exception cref="T:System.InvalidOperationException">O método dinâmico não tem nenhum corpo de método.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> tem o número de parâmetros incorreto ou tipos de parâmetro incorretos.</exception>
      <returns>Um delegado do tipo especificado, que pode ser usado para executar o método dinâmico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>Conclui o método dinâmico e cria um delegado que pode ser usado para executá-lo, especificando o tipo de delegado e um objeto ao qual o delegado está associado.</summary>
      <param name="delegateType">Um tipo de delegado cuja assinatura corresponde à do método dinâmico, menos o primeiro parâmetro.</param>
      <param name="target">Um objeto ao qual o delegado está associado. Deve ser do mesmo tipo que o primeiro parâmetro do método dinâmico.</param>
      <exception cref="T:System.InvalidOperationException">O método dinâmico não tem nenhum corpo de método.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> não é do mesmo tipo que o primeiro parâmetro do método dinâmico e não é atribuível a esse tipo.  
  
- ou - 
 <paramref name="delegateType" /> tem o número de parâmetros incorreto ou tipos de parâmetro incorretos.</exception>
      <returns>Um delegado do tipo especificado, que pode ser usado para executar o método dinâmico com o objeto de destino especificado.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Define um parâmetro do método dinâmico.</summary>
      <param name="position">A posição do parâmetro na lista de parâmetros. Os parâmetros são indexados começando com o número 1 para o primeiro parâmetro.</param>
      <param name="attributes">Uma combinação bit a bit de valores <see cref="T:System.Reflection.ParameterAttributes" /> que especifica os atributos do parâmetro.</param>
      <param name="parameterName">O nome do parâmetro. O nome pode ser uma cadeia de caracteres de comprimento zero.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O método não tem parâmetros.  
  
- ou - 
 <paramref name="position" /> é menor que 0.  
  
- ou - 
 <paramref name="position" /> é maior que o número de parâmetros do método.</exception>
      <returns>Sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>Retorna a implementação base para o método.</summary>
      <returns>A implementação base do método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>Retorna todos os atributos personalizados definidos para o método.</summary>
      <param name="inherit">
        <see langword="true" /> para pesquisar a cadeia de herança do método para encontrar os atributos personalizados, <see langword="false" /> para verificar apenas o método atual.</param>
      <returns>Uma matriz de objetos que representam todos os atributos personalizados do método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Retorna os atributos personalizados do tipo especificado que foram aplicados ao método.</summary>
      <param name="attributeType">Um <see cref="T:System.Type" /> que representa o tipo de atributo personalizado a ser retornado.</param>
      <param name="inherit">
        <see langword="true" /> para pesquisar a cadeia de herança do método para encontrar os atributos personalizados, <see langword="false" /> para verificar apenas o método atual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> é <see langword="null" />.</exception>
      <returns>Uma matriz de objetos que representa os atributos do método que são do tipo <paramref name="attributeType" /> ou derivados do tipo <paramref name="attributeType" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary>Retorna um <see cref="T:System.Reflection.Emit.DynamicILInfo" /> objeto que pode ser usado para gerar um corpo de método de tokens de metadados, escopos e fluxos MSIL (Microsoft Intermediate Language).</summary>
      <returns>Um objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> que pode ser usado para gerar um corpo de método de tokens de metadados, escopos e fluxos MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>Retorna um gerador de MSIL (Microsoft Intermediate Language) para o método com um tamanho de fluxo MSIL padrão de 64 bytes.</summary>
      <returns>Um objeto <see cref="T:System.Reflection.Emit.ILGenerator" /> para o método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>Retorna um gerador de MSIL (Microsoft Intermediate Language) para o método com o tamanho do fluxo MSIL especificado.</summary>
      <param name="streamSize">O tamanho do fluxo MSIL, em bytes.</param>
      <returns>Um objeto <see cref="T:System.Reflection.Emit.ILGenerator" /> para o método, com o tamanho do fluxo MSIL especificado.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>Retorna os sinalizadores de implementação para o método.</summary>
      <returns>Uma combinação bit a bit de valores <see cref="T:System.Reflection.MethodImplAttributes" /> que representam os sinalizadores de implementação para o método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>Retorna os parâmetros do método dinâmico.</summary>
      <returns>Uma matriz de objetos <see cref="T:System.Reflection.ParameterInfo" /> que representam os parâmetros do método dinâmico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invoca o método dinâmico usando os parâmetros especificados, sob as restrições do associador especificado e com as informações de cultura especificadas.</summary>
      <param name="obj">Esse parâmetro é ignorado para métodos dinâmicos, pois é estático. Especifique <see langword="null" />.</param>
      <param name="invokeAttr">Uma combinação bit a bit dos valores <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="binder">Um objeto <see cref="T:System.Reflection.Binder" /> que permite a associação, coerção de tipos de argumento, invocação de membros e recuperação de objetos <see cref="T:System.Reflection.MemberInfo" /> por meio da reflexão. Caso <paramref name="binder" /> seja <see langword="null" />, o associador padrão é usado. Para obter mais detalhes, confira <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters">Uma lista de argumentos. Essa é uma matriz de argumentos com o mesmo número, ordem e tipo que os parâmetros do método a ser invocado. Se não houver nenhum parâmetro, esse parâmetro deverá ser <see langword="null" />.</param>
      <param name="culture">Uma instância de <see cref="T:System.Globalization.CultureInfo" /> usada para determinar a coerção de tipos. Se isso for <see langword="null" />, será usado o <see cref="T:System.Globalization.CultureInfo" /> para o thread atual. Por exemplo, essas informações são necessárias para converter corretamente um <see cref="T:System.String" /> que representa 1000 em um valor <see cref="T:System.Double" />, pois 1000 é representado de forma diferente por diferentes culturas.</param>
      <exception cref="T:System.NotSupportedException">Não há suporte para a convenção de chamada <see cref="F:System.Reflection.CallingConventions.VarArgs" />.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">O número de elementos em <paramref name="parameters" /> não corresponde ao número de parâmetros no método dinâmico.</exception>
      <exception cref="T:System.ArgumentException">O tipo de um ou mais elementos de <paramref name="parameters" /> não corresponde ao tipo do parâmetro correspondente do método dinâmico.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">O método dinâmico está associado a um módulo, não é hospedado anonimamente e foi construído com <paramref name="skipVisibility" /> definido como <see langword="false" />, mas acessa membros que não são <see langword="public" /> nem <see langword="internal" /> (<see langword="Friend" /> no Visual Basic).  
  
- ou - 
O método dinâmico é hospedado anonimamente e foi construído com <paramref name="skipVisibility" /> definido como <see langword="false" />, mas acessa membros que não são <see langword="public" />.  
  
- ou - 
O método dinâmico contém um código não verificável. Consulte a seção “Verificação” em Comentários de <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
      <returns>Um <see cref="T:System.Object" /> que contém o valor retornado do método invocado.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>Indica se o tipo de atributo personalizado especificado é definido.</summary>
      <param name="attributeType">Um <see cref="T:System.Type" /> que representa o tipo de atributo personalizado a ser pesquisado.</param>
      <param name="inherit">
        <see langword="true" /> para pesquisar a cadeia de herança do método para encontrar os atributos personalizados, <see langword="false" /> para verificar apenas o método atual.</param>
      <returns>
        <see langword="true" /> se o tipo de atributo personalizado especificado estiver definido, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>Retorna a assinatura do método, representada como uma cadeia de caracteres.</summary>
      <returns>Uma cadeia de caracteres que representa a assinatura do método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>Obtém os atributos especificados quando o método dinâmico foi criado.</summary>
      <returns>Uma combinação de bits de bit <see cref="T:System.Reflection.MethodAttributes" /> que representa os atributos para o método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>Obtém a convenção de chamada especificada quando o método dinâmico foi criado.</summary>
      <returns>Um dos <see cref="T:System.Reflection.CallingConventions" /> valores que indica a Convenção de chamada do método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>Obtém o tipo que declara o método, que é sempre <see langword="null" /> para métodos dinâmicos.</summary>
      <returns>Sempre <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>Obtém ou define um valor que indica se as variáveis locais no método são inicializadas em zero.</summary>
      <returns>
        <see langword="true" /> Se as variáveis locais no método forem inicializadas com zero; caso contrário, <see langword="false" /> . O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary>Obtém um valor que indica se o método dinâmico atual é crítico para segurança ou crítico para segurança e disponível no código transparente e, portanto, pode executar operações críticas.</summary>
      <exception cref="T:System.InvalidOperationException">O método dinâmico não tem um corpo de método.</exception>
      <returns>
        <see langword="true" /> Se o método dinâmico atual for de segurança crítica ou segura para segurança, <see langword="false" /> se for transparente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary>Obtém um valor que indica se o método dinâmico é crítico para segurança e disponível no código transparente no nível de confiança atual; ou seja, se ele pode realizar operações críticas e ser acessado pelo código transparente.</summary>
      <exception cref="T:System.InvalidOperationException">O método dinâmico não tem um corpo de método.</exception>
      <returns>
        <see langword="true" /> Se o método dinâmico for de segurança crítica no nível de confiança atual; <see langword="false" /> se for de segurança crítica ou transparente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary>Obtém um valor que indica que se o método dinâmico atual é transparente no nível de confiança atual e, portanto, não é pode realizar operações críticas.</summary>
      <exception cref="T:System.InvalidOperationException">O método dinâmico não tem um corpo de método.</exception>
      <returns>
        <see langword="true" /> Se o método dinâmico for de segurança transparente no nível de confiança atual; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>Não tem suporte para métodos dinâmicos.</summary>
      <exception cref="T:System.InvalidOperationException">Não é permitido para métodos dinâmicos.</exception>
      <returns>Não tem suporte para métodos dinâmicos.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary>Obtém o módulo ao qual o método dinâmico está logicamente associado.</summary>
      <returns>O <see cref="T:System.Reflection.Module" /> com o qual o método dinâmico atual está associado.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>Obtém o nome do método dinâmico.</summary>
      <returns>O nome simples do método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>Obtém a classe que foi usada na reflexão para obter o método.</summary>
      <returns>Sempre <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>Obtém o parâmetro de retorno do método dinâmico.</summary>
      <returns>Sempre <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>Obtém o tipo de valor retornado do método dinâmico.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo do valor de retorno do método atual; <see cref="T:System.Void" /> se o método não tiver nenhum tipo de retorno.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>Obtém os atributos personalizados do tipo de retorno para o método dinâmico.</summary>
      <returns>Um <see cref="T:System.Reflection.ICustomAttributeProvider" /> que representa os atributos personalizados do tipo de retorno para o método dinâmico.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics.Vectors</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Matrix3x2">
      <summary>Représente une matrice 3 x 2.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M11">
      <summary>Premier élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M12">
      <summary>Deuxième élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M21">
      <summary>Premier élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M22">
      <summary>Deuxième élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M31">
      <summary>Premier élément de la troisième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M32">
      <summary>Deuxième élément de la troisième ligne.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crée une matrice 3 x 2 à partir des composants spécifiés.</summary>
      <param name="m11">Valeur à affecter au premier élément de la première ligne.</param>
      <param name="m12">Valeur à affecter au deuxième élément de la première ligne.</param>
      <param name="m21">Valeur à affecter au premier élément de la deuxième ligne.</param>
      <param name="m22">Valeur à affecter au deuxième élément de la deuxième ligne.</param>
      <param name="m31">Valeur à affecter au premier élément de la troisième ligne.</param>
      <param name="m32">Valeur à affecter au deuxième élément de la troisième ligne.</param>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Additionne chaque élément d'une matrice à son élément correspondant dans une deuxième matrice.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>Matrice qui contient les valeurs additionnées de <paramref name="value1" /> et de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single)">
      <summary>Crée une matrice de rotation en utilisant la rotation donnée en radians.</summary>
      <param name="radians">Quantité de rotation, en radians.</param>
      <returns>Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)">
      <summary>Crée une matrice de rotation en utilisant la rotation spécifiée en radians et un point central.</summary>
      <param name="radians">Quantité de rotation, en radians.</param>
      <param name="centerPoint">Point central.</param>
      <returns>Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
      <summary>Crée une matrice de mise à l'échelle à partir de l'échelle du vecteur spécifié.</summary>
      <param name="scales">Échelle à utiliser.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Crée une matrice de mise à l'échelle à partir de l'échelle de vecteur spécifié, avec un décalage à partir du point central spécifié.</summary>
      <param name="scales">Échelle à utiliser.</param>
      <param name="centerPoint">Décalage par rapport au centre.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single)">
      <summary>Crée une matrice de mise à l'échelle qui se met à l'échelle de façon uniforme avec l'échelle donnée.</summary>
      <param name="scale">Échelle uniforme à utiliser.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)">
      <summary>Crée une matrice de mise à l'échelle qui se met à l'échelle de façon uniforme avec l'échelle spécifiée, avec un décalage à partir du point central spécifié.</summary>
      <param name="scale">Échelle uniforme à utiliser.</param>
      <param name="centerPoint">Décalage par rapport au centre.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)">
      <summary>Crée une matrice de mise à l'échelle à partir des composants X et Y spécifiés.</summary>
      <param name="xScale">Valeur selon laquelle mettre à l'échelle sur l'axe X.</param>
      <param name="yScale">Valeur selon laquelle mettre à l'échelle sur l'axe Y.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Crée une matrice de mise à l'échelle qui est décalée par rapport à un point central donné.</summary>
      <param name="xScale">Valeur selon laquelle mettre à l'échelle sur l'axe X.</param>
      <param name="yScale">Valeur selon laquelle mettre à l'échelle sur l'axe Y.</param>
      <param name="centerPoint">Point central.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)">
      <summary>Crée une matrice antisymétrique à partir des angles spécifiés en radians.</summary>
      <param name="radiansX">Angle de X, en radians.</param>
      <param name="radiansY">Angle de Y, en radians.</param>
      <returns>Matrice antisymétrique.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Crée une matrice antisymétrique à partir des angles spécifiés en radians.</summary>
      <param name="radiansX">Angle de X, en radians.</param>
      <param name="radiansY">Angle de Y, en radians.</param>
      <param name="centerPoint">Point central.</param>
      <returns>Matrice antisymétrique.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
      <summary>Crée une matrice de translation à partir du vecteur à deux dimensions spécifié.</summary>
      <param name="position">Position de translation.</param>
      <returns>Matrice de translation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)">
      <summary>Crée une matrice de translation à partir des composants X et Y spécifiés.</summary>
      <param name="xPosition">Position X.</param>
      <param name="yPosition">Position Y.</param>
      <returns>Matrice de translation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
      <summary>Retourne une valeur qui indique si cette instance et une autre matrice 3 x 2 sont égales.</summary>
      <param name="other">L'autre matrice.</param>
      <returns>
        <see langword="true" /> si les deux matrices sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj">Objet à comparer à l’instance actuelle.</param>
      <returns>
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
      <summary>Calcule le déterminant pour cette matrice.</summary>
      <returns>Déterminant.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
      <summary>Inverse la matrice spécifiée. La valeur de retour indique si l'opération a réussi.</summary>
      <param name="matrix">Matrice à inverser.</param>
      <param name="result">Quand cette méthode se termine, contient la matrice inversée si l'opération a réussi.</param>
      <returns>
        <see langword="true" /> si <paramref name="matrix" /> a été convertie correctement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
      <summary>Effectue une interpolation linéaire d'une matrice à une deuxième matrice selon une valeur qui spécifie la pondération de la deuxième matrice.</summary>
      <param name="matrix1">Première matrice.</param>
      <param name="matrix2">Deuxième matrice.</param>
      <param name="amount">Pondération relative de <paramref name="matrix2" />.</param>
      <returns>Matrice interpolée.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Retourne la matrice qui résulte de la multiplication de deux matrices entre elles.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>La matrice produit.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Retourne la matrice qui résulte de la mise à l'échelle de tous les éléments d'une matrice spécifiée selon un facteur scalaire.</summary>
      <param name="value1">Matrice à mettre à l'échelle.</param>
      <param name="value2">Valeur de mise à l'échelle à utiliser.</param>
      <returns>Matrice mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
      <summary>Inverse le signe de la matrice spécifiée en multipliant toutes ses valeurs par -1.</summary>
      <param name="value">Matrice dont il faut inverser le signe.</param>
      <returns>Matrice dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Additionne chaque élément d'une matrice à son élément correspondant dans une deuxième matrice.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>Matrice qui contient les valeurs additionnées.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Retourne une valeur qui indique si les matrices spécifiées sont égales.</summary>
      <param name="value1">Première matrice à comparer.</param>
      <param name="value2">Deuxième matrice à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Retourne une valeur qui indique si les matrices spécifiées ne sont pas égales.</summary>
      <param name="value1">Première matrice à comparer.</param>
      <param name="value2">Deuxième matrice à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Retourne la matrice qui résulte de la multiplication de deux matrices entre elles.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>La matrice produit.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Retourne la matrice qui résulte de la mise à l'échelle de tous les éléments d'une matrice spécifiée selon un facteur scalaire.</summary>
      <param name="value1">Matrice à mettre à l'échelle.</param>
      <param name="value2">Valeur de mise à l'échelle à utiliser.</param>
      <returns>Matrice mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Soustrait chaque élément d'une deuxième matrice de son élément correspondant dans une première matrice.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>Matrice qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
      <summary>Inverse le signe de la matrice spécifiée en multipliant toutes ses valeurs par -1.</summary>
      <param name="value">Matrice dont il faut inverser le signe.</param>
      <returns>Matrice dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Soustrait chaque élément d'une deuxième matrice de son élément correspondant dans une première matrice.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>Matrice qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.ToString">
      <summary>Retourne une chaîne qui représente cette matrice.</summary>
      <returns>Représentation sous forme de chaîne de cette matrice.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Identity">
      <summary>Obtient la matrice identité multiplicative.</summary>
      <returns>Matrice identité multiplicative.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.IsIdentity">
      <summary>Indique si la matrice actuelle est la matrice identité.</summary>
      <returns>
        <see langword="true" /> si la matrice actuelle est la matrice identité ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Translation">
      <summary>Obtient ou définit le composant de translation de cette matrice.</summary>
      <returns>Composant de translation de l'instance actuelle.</returns>
    </member>
    <member name="T:System.Numerics.Matrix4x4">
      <summary>Représente une matrice 4 x 4.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M11">
      <summary>Premier élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M12">
      <summary>Deuxième élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M13">
      <summary>Troisième élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M14">
      <summary>Quatrième élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M21">
      <summary>Premier élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M22">
      <summary>Deuxième élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M23">
      <summary>Troisième élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M24">
      <summary>Quatrième élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M31">
      <summary>Premier élément de la troisième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M32">
      <summary>Deuxième élément de la troisième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M33">
      <summary>Troisième élément de la troisième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M34">
      <summary>Quatrième élément de la troisième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M41">
      <summary>Premier élément de la quatrième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M42">
      <summary>Deuxième élément de la quatrième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M43">
      <summary>Troisième élément de la quatrième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M44">
      <summary>Quatrième élément de la quatrième ligne.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)">
      <summary>Crée un objet <see cref="T:System.Numerics.Matrix4x4" /> à partir d'un objet <see cref="T:System.Numerics.Matrix3x2" /> spécifié.</summary>
      <param name="value">Matrice 3 x 2.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crée une matrice 4 x 4 à partir des composants spécifiés.</summary>
      <param name="m11">Valeur à affecter au premier élément de la première ligne.</param>
      <param name="m12">Valeur à affecter au deuxième élément de la première ligne.</param>
      <param name="m13">Valeur à affecter au troisième élément de la première ligne.</param>
      <param name="m14">Valeur à affecter au quatrième élément de la première ligne.</param>
      <param name="m21">Valeur à affecter au premier élément de la deuxième ligne.</param>
      <param name="m22">Valeur à affecter au deuxième élément de la deuxième ligne.</param>
      <param name="m23">Valeur à affecter au troisième élément de la deuxième ligne.</param>
      <param name="m24">Valeur à affecter au troisième élément de la deuxième ligne.</param>
      <param name="m31">Valeur à affecter au premier élément de la troisième ligne.</param>
      <param name="m32">Valeur à affecter au deuxième élément de la troisième ligne.</param>
      <param name="m33">Valeur à affecter au troisième élément de la troisième ligne.</param>
      <param name="m34">Valeur à affecter au quatrième élément de la troisième ligne.</param>
      <param name="m41">Valeur à affecter au premier élément de la quatrième ligne.</param>
      <param name="m42">Valeur à affecter au deuxième élément de la quatrième ligne.</param>
      <param name="m43">Valeur à affecter au troisième élément de la quatrième ligne.</param>
      <param name="m44">Valeur à affecter au quatrième élément de la quatrième ligne.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Additionne chaque élément d'une matrice à son élément correspondant dans une deuxième matrice.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>Matrice qui contient les valeurs additionnées de <paramref name="value1" /> et de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crée un billboard sphérique qui pivoter autour de la position d'un objet spécifié.</summary>
      <param name="objectPosition">Position de l'objet autour duquel va pivoter le billboard.</param>
      <param name="cameraPosition">Position de la caméra.</param>
      <param name="cameraUpVector">Vecteur de déplacement vers le haut de la caméra.</param>
      <param name="cameraForwardVector">Vecteur de déplacement vers l'avant de la caméra.</param>
      <returns>Billboard créé.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crée un billboard cylindrique qui pivote autour d'un axe spécifié.</summary>
      <param name="objectPosition">Position de l'objet autour duquel va pivoter le billboard.</param>
      <param name="cameraPosition">Position de la caméra.</param>
      <param name="rotateAxis">L'axe autour duquel le billboard va pivoter.</param>
      <param name="cameraForwardVector">Vecteur de déplacement vers l'avant de la caméra.</param>
      <param name="objectForwardVector">Vecteur de déplacement vers l'avant de l'objet.</param>
      <returns>Matrice du billboard.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Crée une matrice qui pivote autour d'un vecteur arbitraire.</summary>
      <param name="axis">L'axe autour duquel pivoter.</param>
      <param name="angle">Angle selon lequel pivoter autour de <paramref name="axis" />, en radians.</param>
      <returns>Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)">
      <summary>Crée une matrice de rotation à partir de la valeur de rotation du quaternion spécifié.</summary>
      <param name="quaternion">Quaternion source.</param>
      <returns>Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Crée une matrice de rotation à partir du lacet, du tangage et du roulis spécifiés.</summary>
      <param name="yaw">Angle de rotation, en radians, autour de l'axe Y.</param>
      <param name="pitch">Angle de rotation, en radians, autour de l'axe X.</param>
      <param name="roll">Angle de rotation, en radians, autour de l'axe Z.</param>
      <returns>Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crée une matrice de vue.</summary>
      <param name="cameraPosition">Position de la caméra.</param>
      <param name="cameraTarget">Cible vers laquelle pointe la caméra.</param>
      <param name="cameraUpVector">La direction « vers le haut » du point de vue de la caméra.</param>
      <returns>Matrice de vue.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crée une matrice de perspective orthographique à partir des dimensions du volume de la vue spécifiée.</summary>
      <param name="width">Largeur du volume de la vue.</param>
      <param name="height">Hauteur du volume de la vue.</param>
      <param name="zNearPlane">Valeur Z minimale du volume de la vue.</param>
      <param name="zFarPlane">Valeur Z maximale du volume de la vue.</param>
      <returns>Matrice de projection orthographique.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crée une matrice de projection orthographique personnalisée.</summary>
      <param name="left">Valeur X minimale du volume de la vue.</param>
      <param name="right">Valeur X maximale du volume de la vue.</param>
      <param name="bottom">Valeur Y minimale du volume de la vue.</param>
      <param name="top">Valeur Y maximale du volume de la vue.</param>
      <param name="zNearPlane">Valeur Z minimale du volume de la vue.</param>
      <param name="zFarPlane">Valeur Z maximale du volume de la vue.</param>
      <returns>Matrice de projection orthographique.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crée une matrice de projection de perspective à partir des dimensions du volume de la vue donnée.</summary>
      <param name="width">Largeur du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="height">Hauteur du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="nearPlaneDistance">Distance au plan de la vue rapprochée.</param>
      <param name="farPlaneDistance">Distance au plan de la vue éloignée.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> est inférieur ou égal à zéro.  
  
- ou - 
 <paramref name="farPlaneDistance" /> est inférieur ou égal à zéro.  
  
-ou- 
 <paramref name="nearPlaneDistance" /> est supérieur ou égal à <paramref name="farPlaneDistance" />.</exception>
      <returns>Matrice de projection de perspective.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crée une matrice de projection de perspective basée sur un champ de vue, une proportion, et des distances au plan de la vue rapprochée et éloignée.</summary>
      <param name="fieldOfView">Champ de vue sur l'axe Y, en radians.</param>
      <param name="aspectRatio">La proportion, définie comme étant la largeur de l'espace de la vue divisée par sa hauteur.</param>
      <param name="nearPlaneDistance">Distance au plan de la vue rapprochée.</param>
      <param name="farPlaneDistance">Distance au plan de la vue éloignée.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfView" /> est inférieur ou égal à zéro.  
  
-ou- 
 <paramref name="fieldOfView" /> est supérieur ou égal à <see cref="F:System.Math.PI" />.  
  
 <paramref name="nearPlaneDistance" /> est inférieur ou égal à zéro.  
  
- ou - 
 <paramref name="farPlaneDistance" /> est inférieur ou égal à zéro.  
  
-ou- 
 <paramref name="nearPlaneDistance" /> est supérieur ou égal à <paramref name="farPlaneDistance" />.</exception>
      <returns>Matrice de projection de perspective.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crée une matrice de projection de perspective personnalisée.</summary>
      <param name="left">Valeur X minimale du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="right">Valeur X maximale du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="bottom">Valeur Y minimale du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="top">Valeur Y maximale du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="nearPlaneDistance">Distance au plan de la vue rapprochée.</param>
      <param name="farPlaneDistance">Distance au plan de la vue éloignée.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> est inférieur ou égal à zéro.  
  
- ou - 
 <paramref name="farPlaneDistance" /> est inférieur ou égal à zéro.  
  
-ou- 
 <paramref name="nearPlaneDistance" /> est supérieur ou égal à <paramref name="farPlaneDistance" />.</exception>
      <returns>Matrice de projection de perspective.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)">
      <summary>Crée une matrice qui reflète le système de coordonnées pour un plan spécifié.</summary>
      <param name="value">Le plan pour lequel créer une réflexion.</param>
      <returns>Une nouvelle matrice exprimant la réflexion.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)">
      <summary>Crée une matrice pour faire pivoter des points autour de l'axe X.</summary>
      <param name="radians">Quantité, en radians, selon laquelle faire pivoter autour de l'axe X.</param>
      <returns>Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)">
      <summary>Crée une matrice pour faire pivoter des points autour de l'axe X à partir d'un point central.</summary>
      <param name="radians">Quantité, en radians, selon laquelle faire pivoter autour de l'axe X.</param>
      <param name="centerPoint">Point central.</param>
      <returns>Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)">
      <summary>Crée une matrice pour faire pivoter des points autour de l'axe Y.</summary>
      <param name="radians">Quantité, en radians, selon laquelle faire pivoter autour de l'axe Y.</param>
      <returns>Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)">
      <summary>Quantité, en radians, selon laquelle faire pivoter autour de l'axe Y.</summary>
      <param name="radians">Quantité, en radians, selon laquelle faire pivoter autour de l'axe Y.</param>
      <param name="centerPoint">Point central.</param>
      <returns>Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)">
      <summary>Crée une matrice pour faire pivoter des points autour de l'axe Z.</summary>
      <param name="radians">Quantité, en radians, selon laquelle faire pivoter autour de l'axe Z.</param>
      <returns>Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)">
      <summary>Crée une matrice pour faire pivoter des points autour de l'axe Z à partir d'un point central.</summary>
      <param name="radians">Quantité, en radians, selon laquelle faire pivoter autour de l'axe Z.</param>
      <param name="centerPoint">Point central.</param>
      <returns>Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)">
      <summary>Crée une matrice de mise à l'échelle à partir de l'échelle du vecteur spécifié.</summary>
      <param name="scales">Échelle à utiliser.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crée une matrice de mise à l'échelle avec un point central.</summary>
      <param name="scales">Le vecteur qui contient la quantité selon laquelle mettre à l'échelle sur chaque axe.</param>
      <param name="centerPoint">Point central.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single)">
      <summary>Crée une matrice de mise à l'échelle uniforme qui met à l'échelle de façon égale sur chaque axe.</summary>
      <param name="scale">Facteur de mise à l'échelle uniforme.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)">
      <summary>Crée une matrice de mise à l'échelle uniforme qui met à l'échelle de façon uniforme sur chaque axe avec un point central.</summary>
      <param name="scale">Facteur de mise à l'échelle uniforme.</param>
      <param name="centerPoint">Point central.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
      <summary>Crée une matrice de mise à l'échelle à partir des composants X, Y et Z spécifiés.</summary>
      <param name="xScale">Valeur selon laquelle mettre à l'échelle sur l'axe X.</param>
      <param name="yScale">Valeur selon laquelle mettre à l'échelle sur l'axe Y.</param>
      <param name="zScale">Valeur selon laquelle mettre à l'échelle sur l'axe Z.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
      <summary>Crée une matrice de mise à l'échelle qui est décalée par rapport à un point central donné.</summary>
      <param name="xScale">Valeur selon laquelle mettre à l'échelle sur l'axe X.</param>
      <param name="yScale">Valeur selon laquelle mettre à l'échelle sur l'axe Y.</param>
      <param name="zScale">Valeur selon laquelle mettre à l'échelle sur l'axe Z.</param>
      <param name="centerPoint">Point central.</param>
      <returns>Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)">
      <summary>Crée une matrice qui aplanit la géométrie dans un plan spécifié en la faisant correspondre à une ombre provenant d'une source de lumière spécifiée.</summary>
      <param name="lightDirection">Direction d'où provient la lumière à l'origine de l'ombre.</param>
      <param name="plane">Plan sur lequel la nouvelle matrice doit aplanir la géométrie pour la faire correspondre à une ombre.</param>
      <returns>Une nouvelle matrice qui peut être utilisée pour aplanir la géométrie sur le plan spécifié depuis la direction spécifiée.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)">
      <summary>Crée une matrice de traduction à partir du vecteur à trois dimensions spécifié.</summary>
      <param name="position">Quantité de laquelle translater dans chaque axe.</param>
      <returns>Matrice de translation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>Crée une matrice de translation à partir des composants X, Y et Z spécifiés.</summary>
      <param name="xPosition">Quantité de laquelle translater sur l'axe X.</param>
      <param name="yPosition">Quantité de laquelle translater sur l'axe Y.</param>
      <param name="zPosition">Quantité de laquelle translater sur l'axe Z.</param>
      <returns>Matrice de translation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crée une matrice du monde avec les paramètres spécifiés.</summary>
      <param name="position">Position de l'objet.</param>
      <param name="forward">Direction vers l'avant de l'objet.</param>
      <param name="up">Direction vers le haut de l'objet. Sa valeur est généralement <c>[0, 1, 0]</c>.</param>
      <returns>Matrice du monde.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
      <summary>Tente d'extraire les composants d'échelle, de translation et de rotation de la matrice de mise à l'échelle, de rotation ou de translation donnée. La valeur de retour indique si l'opération a réussi.</summary>
      <param name="matrix">Matrice source.</param>
      <param name="scale">Quand cette méthode se termine, contient le composant de mise à l'échelle de la matrice de transformation si l'opération a réussi.</param>
      <param name="rotation">Quand cette méthode se termine, contient le composant de rotation de la matrice de transformation si l'opération a réussi.</param>
      <param name="translation">Quand cette méthode se termine, contient le composant de translation de la matrice de transformation si l'opération a réussi.</param>
      <returns>
        <see langword="true" /> si <paramref name="matrix" /> a été décomposée correctement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)">
      <summary>Retourne une valeur qui indique si cette instance et une autre matrice 4 x 4 sont égales.</summary>
      <param name="other">L'autre matrice.</param>
      <returns>
        <see langword="true" /> si les deux matrices sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj">Objet à comparer à l’instance actuelle.</param>
      <returns>
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetDeterminant">
      <summary>Calcule le déterminant de la matrice 4 x 4 actuelle.</summary>
      <returns>Déterminant.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)">
      <summary>Inverse la matrice spécifiée. La valeur de retour indique si l'opération a réussi.</summary>
      <param name="matrix">Matrice à inverser.</param>
      <param name="result">Quand cette méthode se termine, contient la matrice inversée si l'opération a réussi.</param>
      <returns>
        <see langword="true" /> si <paramref name="matrix" /> a été convertie correctement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
      <summary>Effectue une interpolation linéaire d'une matrice à une deuxième matrice selon une valeur qui spécifie la pondération de la deuxième matrice.</summary>
      <param name="matrix1">Première matrice.</param>
      <param name="matrix2">Deuxième matrice.</param>
      <param name="amount">Pondération relative de <paramref name="matrix2" />.</param>
      <returns>Matrice interpolée.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Retourne la matrice qui résulte de la multiplication de deux matrices entre elles.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>La matrice produit.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Retourne la matrice qui résulte de la mise à l'échelle de tous les éléments d'une matrice spécifiée selon un facteur scalaire.</summary>
      <param name="value1">Matrice à mettre à l'échelle.</param>
      <param name="value2">Valeur de mise à l'échelle à utiliser.</param>
      <returns>Matrice mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)">
      <summary>Inverse le signe de la matrice spécifiée en multipliant toutes ses valeurs par -1.</summary>
      <param name="value">Matrice dont il faut inverser le signe.</param>
      <returns>Matrice dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Additionne chaque élément d'une matrice à son élément correspondant dans une deuxième matrice.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>Matrice qui contient les valeurs additionnées.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Retourne une valeur qui indique si les matrices spécifiées sont égales.</summary>
      <param name="value1">Première matrice à comparer.</param>
      <param name="value2">Deuxième matrice à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Retourne une valeur qui indique si les matrices spécifiées ne sont pas égales.</summary>
      <param name="value1">Première matrice à comparer.</param>
      <param name="value2">Deuxième matrice à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Retourne la matrice qui résulte de la multiplication de deux matrices entre elles.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>La matrice produit.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Retourne la matrice qui résulte de la mise à l'échelle de tous les éléments d'une matrice spécifiée selon un facteur scalaire.</summary>
      <param name="value1">Matrice à mettre à l'échelle.</param>
      <param name="value2">Valeur de mise à l'échelle à utiliser.</param>
      <returns>Matrice mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Soustrait chaque élément d'une deuxième matrice de son élément correspondant dans une première matrice.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>Matrice qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)">
      <summary>Inverse le signe de la matrice spécifiée en multipliant toutes ses valeurs par -1.</summary>
      <param name="value">Matrice dont il faut inverser le signe.</param>
      <returns>Matrice dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Soustrait chaque élément d'une deuxième matrice de son élément correspondant dans une première matrice.</summary>
      <param name="value1">Première matrice.</param>
      <param name="value2">Deuxième matrice.</param>
      <returns>Matrice qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.ToString">
      <summary>Retourne une chaîne qui représente cette matrice.</summary>
      <returns>Représentation sous forme de chaîne de cette matrice.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)">
      <summary>Transforme la matrice spécifiée en appliquant la rotation du quaternion spécifié.</summary>
      <param name="value">Matrice à transformer.</param>
      <param name="rotation">Rotation à appliquer.</param>
      <returns>Matrice transformée.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)">
      <summary>Transpose les lignes et les colonnes d'une matrice.</summary>
      <param name="matrix">Matrice à transposer.</param>
      <returns>Matrice transposée.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Identity">
      <summary>Obtient la matrice identité multiplicative.</summary>
      <returns>Obtient la matrice identité multiplicative.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.IsIdentity">
      <summary>Indique si la matrice actuelle est la matrice identité.</summary>
      <returns>
        <see langword="true" /> si la matrice actuelle est la matrice identité ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Translation">
      <summary>Obtient ou définit le composant de translation de cette matrice.</summary>
      <returns>Composant de translation de l'instance actuelle.</returns>
    </member>
    <member name="T:System.Numerics.Plane">
      <summary>Représente un plan dans un espace à trois dimensions.</summary>
    </member>
    <member name="F:System.Numerics.Plane.D">
      <summary>Distance du plan le long de son vecteur normal à partir de l'origine.</summary>
    </member>
    <member name="F:System.Numerics.Plane.Normal">
      <summary>Vecteur normal du plan.</summary>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Crée un objet <see cref="T:System.Numerics.Plane" /> à partir d'un vecteur normal spécifié et de la distance le long du vecteur normal à partir de l'origine.</summary>
      <param name="normal">Vecteur normal du plan.</param>
      <param name="d">Distance du plan à partir de l'origine le long de son vecteur normal.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)">
      <summary>Crée un objet <see cref="T:System.Numerics.Plane" /> à partir d'un vecteur à quatre dimensions spécifié.</summary>
      <param name="value">Vecteur dont les trois premiers éléments décrivent le vecteur normal et dont la valeur <see cref="F:System.Numerics.Vector4.W" /> définit la distance le long de ce vecteur normal à partir de l'origine.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crée un objet <see cref="T:System.Numerics.Plane" /> à partir des composants X, Y et Z de son vecteur normal et de sa distance à partir de l'origine sur ce vecteur normal.</summary>
      <param name="x">Composant X du vecteur normal.</param>
      <param name="y">Composant Y du vecteur normal.</param>
      <param name="z">Composant Z du vecteur normal.</param>
      <param name="d">Distance du plan le long de son vecteur normal à partir de l'origine.</param>
    </member>
    <member name="M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crée un objet <see cref="T:System.Numerics.Plane" /> qui contient trois points spécifiés.</summary>
      <param name="point1">Premier point définissant le plan.</param>
      <param name="point2">Second point définissant le plan.</param>
      <param name="point3">Troisième point définissant le plan.</param>
      <returns>Plan contenant les trois points.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)">
      <summary>Calcule le produit scalaire d'un plan et d'un vecteur à quatre dimensions.</summary>
      <param name="plane">Plan.</param>
      <param name="value">Vecteur à quatre dimensions.</param>
      <returns>Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Retourne le produit scalaire d'un vecteur à trois dimensions spécifié et du vecteur normal de ce plan plus la valeur de distance (<see cref="F:System.Numerics.Plane.D" />) du plan.</summary>
      <param name="plane">Plan.</param>
      <param name="value">Vecteur à trois dimensions.</param>
      <returns>Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Retourne le produit scalaire d'un vecteur à trois dimensions spécifié et du vecteur <see cref="F:System.Numerics.Plane.Normal" /> de ce plan.</summary>
      <param name="plane">Plan.</param>
      <param name="value">Vecteur à trois dimensions.</param>
      <returns>Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Numerics.Plane)">
      <summary>Retourne une valeur qui indique si cette instance et un autre objet plan sont égaux.</summary>
      <param name="other">Autre plan.</param>
      <returns>
        <see langword="true" /> si les deux plans sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj">Objet à comparer à l’instance actuelle.</param>
      <returns>
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Normalize(System.Numerics.Plane)">
      <summary>Crée un objet <see cref="T:System.Numerics.Plane" /> dont le vecteur normal est le vecteur normal du plan source normalisé.</summary>
      <param name="value">Plan source.</param>
      <returns>Plan normalisé.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Retourne une valeur qui indique si deux plans sont égaux.</summary>
      <param name="value1">Premier plan à comparer.</param>
      <param name="value2">Second plan à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Retourne une valeur qui indique si deux plans ne sont pas égaux.</summary>
      <param name="value1">Premier plan à comparer.</param>
      <param name="value2">Second plan à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.ToString">
      <summary>Retourne la représentation sous forme de chaîne de cet objet plan.</summary>
      <returns>Chaîne qui représente cet objet <see cref="T:System.Numerics.Plane" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)">
      <summary>Transforme un plan normalisé par une matrice 4x4.</summary>
      <param name="plane">Plan normalisé à transformer.</param>
      <param name="matrix">Matrice de transformation à appliquer à <paramref name="plane" />.</param>
      <returns>Plan transformé.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)">
      <summary>Transforme un plan normalisé par une rotation de quaternion.</summary>
      <param name="plane">Plan normalisé à transformer.</param>
      <param name="rotation">Rotation de quaternion à appliquer au plan.</param>
      <returns>Nouveau plan résultant de l'application de la rotation de quaternion.</returns>
    </member>
    <member name="T:System.Numerics.Quaternion">
      <summary>Représente un vecteur qui est utilisé pour encoder des rotations physiques en trois dimensions.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary>Composant de rotation du quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary>Valeur X du composant vecteur du quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary>Valeur Y du composant vecteur du quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary>Valeur Z du composant vecteur du quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Crée un quaternion à partir des parties vecteur et rotation spécifiées.</summary>
      <param name="vectorPart">Partie de vecteur de quaternion.</param>
      <param name="scalarPart">Partie rotation du quaternion.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Construit un quaternion à partir des composants spécifiés.</summary>
      <param name="x">Valeur à affecter au composant X du quaternion.</param>
      <param name="y">Valeur à affecter au composant Y du quaternion.</param>
      <param name="z">Valeur à affecter au composant Z du quaternion.</param>
      <param name="w">Valeur à affecter au composant W du quaternion.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Additionne chaque élément d'un quaternion à son élément correspondant dans un deuxième quaternion.</summary>
      <param name="value1">Premier quaternion.</param>
      <param name="value2">Deuxième quaternion.</param>
      <returns>Quaternion qui contient les valeurs additionnées de <paramref name="value1" /> et de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Concatène deux quaternions.</summary>
      <param name="value1">Rotation du premier quaternion de la série.</param>
      <param name="value2">Rotation du deuxième quaternion de la série.</param>
      <returns>Un nouveau quaternion représentant la concaténation de la rotation de  <paramref name="value1" /> suivie de la rotation de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary>Retourne le conjugué d'un quaternion spécifié.</summary>
      <param name="value">Quaternion.</param>
      <returns>Nouveau quaternion qui est le conjugué de <see langword="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Crée un quaternion à partir d’un vecteur d’unité et d’un angle de rotation autour du vecteur.</summary>
      <param name="axis">Vecteur d’unité autour duquel pivoter.</param>
      <param name="angle">L'angle, en radians, dont il faut pivoter autour du vecteur.</param>
      <returns>Quaternion nouvellement créé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary>Crée un quaternion à partir de la matrice de rotation spécifiée.</summary>
      <param name="matrix">Matrice de rotation.</param>
      <returns>Quaternion nouvellement créé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Crée un quaternion à partir du lacet, du tangage et du roulis donnés.</summary>
      <param name="yaw">L'angle du lacet, en radians, autour de l'axe Y.</param>
      <param name="pitch">L'angle du tangage, en radians, autour de l'axe X.</param>
      <param name="roll">L'angle du roulis, en radians, autour de l'axe Z.</param>
      <returns>Quaternion résultant.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divise un quaternion par un deuxième quaternion.</summary>
      <param name="value1">Dividende.</param>
      <param name="value2">Diviseur.</param>
      <returns>Quaternion résultant de la division de <paramref name="value1" /> par <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Calcule le produit scalaire de deux quaternions.</summary>
      <param name="quaternion1">Premier quaternion.</param>
      <param name="quaternion2">Deuxième quaternion.</param>
      <returns>Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary>Retourne une valeur qui indique si cette instance et un autre quaternion sont égaux.</summary>
      <param name="other">L'autre quaternion.</param>
      <returns>
        <see langword="true" /> si les deux quaternions sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj">Objet à comparer à l’instance actuelle.</param>
      <returns>
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary>Retourne l'inverse d'un quaternion.</summary>
      <param name="value">Quaternion.</param>
      <returns>Quaternion inversé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary>Calcule la longueur du quaternion.</summary>
      <returns>Longueur calculée du quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary>Calcule le carré de la longueur du quaternion.</summary>
      <returns>Carré de la longueur du quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Effectue une interpolation linéaire entre deux quaternions selon une valeur qui spécifie la pondération du deuxième quaternion.</summary>
      <param name="quaternion1">Premier quaternion.</param>
      <param name="quaternion2">Deuxième quaternion.</param>
      <param name="amount">Pondération relative de <paramref name="quaternion2" /> dans l'interpolation.</param>
      <returns>Quaternion interpolé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Retourne le quaternion qui résulte de la multiplication de deux quaternions entre eux.</summary>
      <param name="value1">Premier quaternion.</param>
      <param name="value2">Deuxième quaternion.</param>
      <returns>Quaternion résultant du produit.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Retourne le quaternion qui résulte de la mise à l'échelle de tous les composants d'un quaternion spécifié selon un facteur scalaire.</summary>
      <param name="value1">Quaternion source.</param>
      <param name="value2">Valeur scalaire.</param>
      <returns>Quaternion mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary>Inverse le signe de chaque composant du quaternion.</summary>
      <param name="value">Quaternion dont le signe doit être inversé.</param>
      <returns>Quaternion dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary>Divise chaque composant d'un <see cref="T:System.Numerics.Quaternion" /> spécifié par sa longueur.</summary>
      <param name="value">Quaternion à normaliser.</param>
      <returns>Quaternion normalisé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Additionne chaque élément d'un quaternion à son élément correspondant dans un deuxième quaternion.</summary>
      <param name="value1">Premier quaternion.</param>
      <param name="value2">Deuxième quaternion.</param>
      <returns>Quaternion qui contient les valeurs additionnées de <paramref name="value1" /> et de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divise un quaternion par un deuxième quaternion.</summary>
      <param name="value1">Dividende.</param>
      <param name="value2">Diviseur.</param>
      <returns>Quaternion résultant de la division de <paramref name="value1" /> par <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Retourne une valeur qui indique si deux quaternions sont égaux.</summary>
      <param name="value1">Premier quaternion à comparer.</param>
      <param name="value2">Deuxième quaternion à comparer.</param>
      <returns>
        <see langword="true" /> si les deux quaternions sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Retourne une valeur qui indique si deux quaternions ne sont pas égaux.</summary>
      <param name="value1">Premier quaternion à comparer.</param>
      <param name="value2">Deuxième quaternion à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Retourne le quaternion qui résulte de la multiplication de deux quaternions entre eux.</summary>
      <param name="value1">Premier quaternion.</param>
      <param name="value2">Deuxième quaternion.</param>
      <returns>Quaternion résultant du produit.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Retourne le quaternion qui résulte de la mise à l'échelle de tous les composants d'un quaternion spécifié selon un facteur scalaire.</summary>
      <param name="value1">Quaternion source.</param>
      <param name="value2">Valeur scalaire.</param>
      <returns>Quaternion mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Soustrait chaque élément d'un deuxième quaternion de son élément correspondant dans un premier quaternion.</summary>
      <param name="value1">Premier quaternion.</param>
      <param name="value2">Deuxième quaternion.</param>
      <returns>Quaternion qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary>Inverse le signe de chaque composant du quaternion.</summary>
      <param name="value">Quaternion dont le signe doit être inversé.</param>
      <returns>Quaternion dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Effectue une interpolation entre deux quaternions, en utilisant une interpolation linéaire sphérique.</summary>
      <param name="quaternion1">Premier quaternion.</param>
      <param name="quaternion2">Deuxième quaternion.</param>
      <param name="amount">La pondération relative du deuxième quaternion dans l'interpolation.</param>
      <returns>Quaternion interpolé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Soustrait chaque élément d'un deuxième quaternion de son élément correspondant dans un premier quaternion.</summary>
      <param name="value1">Premier quaternion.</param>
      <param name="value2">Deuxième quaternion.</param>
      <returns>Quaternion qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary>Retourne une chaîne qui représente ce quaternion.</summary>
      <returns>Représentation sous forme de chaîne de ce quaternion.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary>Obtient un quaternion qui ne représente pas de rotation.</summary>
      <returns>Quaternion dont les valeurs sont <c>(0, 0, 0, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary>Obtient une valeur qui indique si l'instance actuelle est le quaternion identité.</summary>
      <returns>
        <see langword="true" /> si l'instance actuelle est le quaternion identité ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Numerics.Vector">
      <summary>Fournit une collection de méthodes d’usage statiques pour créer, manipuler, combiner et convertir des vecteurs génériques.</summary>
    </member>
    <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les éléments sont les valeurs absolues des éléments du vecteur spécifié.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur de valeurs absolues.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les valeurs correspondent à la somme de chaque paire d'éléments de deux vecteurs donnés.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur en effectuant une opération Et Pas au niveau du bit sur chaque paire d'éléments correspondants dans deux vecteurs.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
      <summary>Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'octets non signés.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
      <summary>Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur à virgule flottante double précision.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
      <summary>Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers 16 bits.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
      <summary>Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
      <summary>Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers longs.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
      <summary>Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'octets signés.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
      <summary>Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur à virgule flottante simple précision.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
      <summary>Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers 16 bits non signés.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
      <summary>Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers non signés.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
      <summary>Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers longs non signés.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur en effectuant une opération <see langword="And" /> au niveau du bit sur chaque paire d'éléments dans deux vecteurs.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur en effectuant une opération <see langword="Or" /> au niveau du bit sur chaque paire d'éléments dans deux vecteurs.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Ceiling(System.Numerics.Vector{System.Double})">
      <summary>Retourne un nouveau vecteur dont les éléments sont les plus petites valeurs intégrales supérieures ou égales aux éléments du vecteur donné.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur dont les éléments sont les plus petites valeurs intégrales supérieures ou égales aux éléments du vecteur donné.
Si une valeur est égale à <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />, cette valeur est retournée.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Ceiling(System.Numerics.Vector{System.Single})">
      <summary>Retourne un nouveau vecteur dont les éléments sont les plus petites valeurs intégrales supérieures ou égales aux éléments du vecteur donné.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur dont les éléments sont les plus petites valeurs intégrales supérieures ou égales aux éléments du vecteur donné.
Si une valeur est égale à <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> ou <see cref="F:System.Single.PositiveInfinity" />, cette valeur est retournée.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Crée un vecteur simple précision avec des éléments sélectionnés parmi deux vecteurs sources simple précision spécifiés sur la base d'un vecteur de masque intégral.</summary>
      <param name="condition">Vecteur de masque intégral utilisé pour gérer la sélection.</param>
      <param name="left">Premier vecteur source.</param>
      <param name="right">Deuxième vecteur source.</param>
      <returns>Nouveau vecteur avec des éléments sélectionnés en fonction du masque.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Crée un vecteur double précision avec des éléments sélectionnés parmi deux vecteurs sources double précision spécifiés sur la base d'un vecteur de masque intégral.</summary>
      <param name="condition">Vecteur de masque intégral utilisé pour gérer la sélection.</param>
      <param name="left">Premier vecteur source.</param>
      <param name="right">Deuxième vecteur source.</param>
      <returns>Nouveau vecteur avec des éléments sélectionnés en fonction du masque.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Crée un vecteur d'un type spécifié avec des éléments sélectionnés parmi deux vecteurs sources spécifiés du même type sur la base d'un vecteur de masque intégral.</summary>
      <param name="condition">Vecteur de masque intégral utilisé pour gérer la sélection.</param>
      <param name="left">Premier vecteur source.</param>
      <param name="right">Deuxième vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Nouveau vecteur avec des éléments sélectionnés en fonction du masque.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})">
      <summary>Convertit un <c>Vector&lt;Int64&gt;</c> en <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})">
      <summary>Convertit un <c>Vector&lt;UInt64&gt;</c> en <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})">
      <summary>Convertit un <c>Vector&lt;Single&gt;</c> en <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})">
      <summary>Convertit un <c>Vector&lt;Double&gt;</c> en <c>Vector&lt;Int64&gt;</c>.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})">
      <summary>Convertit un <c>Vector&lt;Int32&gt;</c> en <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})">
      <summary>Convertit un <c>Vector&lt;UInt32&gt;</c> en <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})">
      <summary>Convertit un <c>Vector&lt;Single&gt;</c> en <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})">
      <summary>Convertit un <c>Vector&lt;Double&gt;</c> en <c>Vector&lt;UInt64&gt;</c>.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les valeurs sont le résultat de la division des éléments du premier vecteur par les éléments correspondants du second vecteur.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur divisé.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne le produit scalaire de deux vecteurs.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments de deux vecteurs double précision spécifiés sont égaux.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments de deux vecteurs intégraux spécifiés sont égaux.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Retourne un nouveau vecteur dont les éléments indiquent si les éléments de deux vecteurs entiers longs spécifiés sont égaux.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur entier long résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments de deux vecteurs simple précision spécifiés sont égaux.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur d'un type spécifié dont les éléments indiquent si les éléments de deux vecteurs spécifiés du même type sont égaux.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne une valeur qui indique si chaque paire d'éléments dans les vecteurs spécifiés est égale.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>
        <see langword="true" /> si tous les éléments dans <paramref name="left" /> et <paramref name="right" /> sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne une valeur qui indique si au moins deux paires d'éléments dans les vecteurs spécifiés sont égales.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>
        <see langword="true" /> si des paires d'éléments dans <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Floor(System.Numerics.Vector{System.Double})">
      <summary>Retourne un nouveau vecteur dont les éléments sont les plus grandes valeurs intégrales inférieures ou égales aux éléments du vecteur donné.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur dont les éléments sont les plus grandes valeurs intégrales inférieures ou égales aux éléments du vecteur donné.
Si une valeur est égale à <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />, cette valeur est retournée.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Floor(System.Numerics.Vector{System.Single})">
      <summary>Retourne un nouveau vecteur dont les éléments sont les plus grandes valeurs intégrales inférieures ou égales aux éléments du vecteur donné.</summary>
      <param name="value">Vecteur source.</param>
      <returns>Vecteur dont les éléments sont les plus grandes valeurs intégrales inférieures ou égales aux éléments du vecteur donné.
Si une valeur est égale à <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> ou <see cref="F:System.Single.PositiveInfinity" />, cette valeur est retournée.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante double précision sont supérieurs à leurs éléments correspondants dans un second vecteur à virgule flottante double précision.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont supérieurs à leurs éléments correspondants dans un second vecteur intégral.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont supérieurs à leurs éléments correspondants dans un second vecteur entier long.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur entier long résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante simple précision sont supérieurs à leurs éléments correspondants dans un second vecteur à virgule flottante simple précision.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les éléments indiquent si les éléments d'un vecteur d'un type spécifié sont supérieurs à leurs éléments correspondants dans le second vecteur du même type.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne une valeur qui indique si tous les éléments du premier vecteur sont supérieurs aux éléments correspondants dans le second vecteur.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>
        <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont supérieurs aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne une valeur qui indique si un élément du premier vecteur est supérieur à l'élément correspondant dans le second vecteur.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>
        <see langword="true" /> si un élément de <paramref name="left" /> est supérieur à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur à virgule flottante double précision.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur intégral.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur entier long.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur entier long résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur à virgule flottante simple précision.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les éléments indiquent si les éléments d'un vecteur d'un type spécifié sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur du même type.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne une valeur qui indique si tous les éléments du premier vecteur sont supérieurs ou égaux à tous les éléments correspondants dans le second vecteur.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>
        <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont supérieurs ou égaux aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne une valeur qui indique si un élément du premier vecteur est supérieur ou égal à l'élément correspondant dans le second vecteur.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>
        <see langword="true" /> si un élément de <paramref name="left" /> est supérieur ou égal à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante double précision sont inférieurs à leurs éléments correspondants dans un second vecteur à virgule flottante double précision.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont inférieurs à leurs éléments correspondants dans un second vecteur intégral.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont inférieurs à leurs éléments correspondants dans un second vecteur entier long.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur entier long résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur simple précision sont inférieurs à leurs éléments correspondants dans un second vecteur simple précision.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur d'un type spécifié dont les éléments indiquent si les éléments d'un vecteur sont inférieurs à leurs éléments correspondants dans le second vecteur.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne une valeur qui indique si tous les éléments du premier vecteur sont inférieurs à leurs éléments correspondants dans le second vecteur.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>
        <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont inférieurs aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne une valeur qui indique si un élément du premier vecteur est inférieur à l'élément correspondant dans le second vecteur.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>
        <see langword="true" /> si un élément de <paramref name="left" /> est inférieur à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante double précision sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur à virgule flottante double précision.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur intégral.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur entier long.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur entier long résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante simple précision sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur à virgule flottante simple précision.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les éléments indiquent si les éléments d'un vecteur sont inférieurs ou égaux à leurs éléments correspondants dans le second vecteur.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne une valeur qui indique si tous les éléments du premier vecteur sont inférieurs ou égaux à leurs éléments correspondants dans le second vecteur.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>
        <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont inférieurs ou égaux aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne une valeur qui indique si un élément du premier vecteur est inférieur ou égal à l'élément correspondant dans le second vecteur.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>
        <see langword="true" /> si un élément de <paramref name="left" /> est inférieur ou égal à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les valeurs sont le maximum de chaque paire d'éléments dans deux vecteurs donnés.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur maximal.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les valeurs sont le minimum de chaque paire d'éléments dans deux vecteurs donnés.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur minimal.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les valeurs sont une valeur scalaire multipliée par chacune des valeurs d'un vecteur spécifié.</summary>
      <param name="left">Valeur scalaire.</param>
      <param name="right">Vecteur.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
      <summary>Retourne un nouveau vecteur dont les valeurs sont les valeurs d'un vecteur spécifié multipliées chacune par une valeur scalaire.</summary>
      <param name="left">Vecteur.</param>
      <param name="right">Valeur scalaire.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Réduit deux instances de <c>Vector&lt;Double&gt;</c> en un <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns>
        <c>Vector&lt;Single&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <summary>Réduit deux instances de <c>Vector&lt;Int16&gt;</c> en un <c>Vector&lt;SByte&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns>
        <c>Vector&lt;SByte&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Réduit deux instances de <c>Vector&lt;Int32&gt;</c> en un <c>Vector&lt;Int16&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns>
        <c>Vector&lt;Int16&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Réduit deux instances de <c>Vector&lt;Int64&gt;</c> en un <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns>
        <c>Vector&lt;Int32&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <summary>Réduit deux instances de <c>Vector&lt;UInt16&gt;</c> en un <c>Vector&lt;Byte&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns>
        <c>Vector&lt;Byte&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <summary>Réduit deux instances de <c>Vector&lt;UInt32&gt;</c> en un <c>Vector&lt;UInt16&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns>
        <c>Vector&lt;UInt16&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <summary>Réduit deux instances de <c>Vector&lt;UInt64&gt;</c> en un <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns>
        <c>Vector&lt;UInt32&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les éléments sont l'opposé de l'élément correspondant dans le vecteur spécifié.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les éléments sont obtenus en prenant le complément des éléments d'un vecteur spécifié.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les éléments sont la racine carrée des éléments d'un vecteur spécifié.</summary>
      <param name="value">Vecteur source.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Racine carrée du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur dont les valeurs correspondent à la différence entre les éléments du second vecteur et leurs éléments correspondants dans le premier vecteur.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur de différence.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)">
      <summary>Étend un <c>Vector&lt;Byte&gt;</c> dans deux instances <c>Vector&lt;UInt16&gt;</c>.</summary>
      <param name="source">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)">
      <summary>Étend un <c>Vector&lt;Int16&gt;</c> dans deux instances <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="source">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)">
      <summary>Étend un <c>Vector&lt;Int32&gt;</c> dans deux instances <c>Vector&lt;Int64&gt;</c>.</summary>
      <param name="source">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)">
      <summary>Étend un <c>Vector&lt;SByte&gt;</c> dans deux instances <c>Vector&lt;Int16&gt;</c>.</summary>
      <param name="source">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)">
      <summary>Étend un <c>Vector&lt;Single&gt;</c> dans deux instances <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="source">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)">
      <summary>Étend un <c>Vector&lt;UInt16&gt;</c> dans deux instances <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="source">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)">
      <summary>Étend un <c>Vector&lt;UInt32&gt;</c> dans deux instances <c>Vector&lt;UInt64&gt;</c>.</summary>
      <param name="source">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Retourne un nouveau vecteur en effectuant une opération Ou Exclusif au niveau du bit (<see langword="XOr" />) sur chaque paire d'éléments dans deux vecteurs.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns>Vecteur résultant.</returns>
    </member>
    <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
      <summary>Obtient une valeur qui indique si les opérations de vecteur sont soumises à l'accélération matérielle via la prise en charge intrinsèque JIT.</summary>
      <returns>
        <see langword="true" /> si les opérations de vecteur sont soumises à l'accélération matérielle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Numerics.Vector`1">
      <summary>Représente un vecteur unique d'un type numérique spécifié qui convient à l'optimisation de bas niveau des algorithmes parallèles.</summary>
      <typeparam name="T">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0)">
      <summary>Crée un vecteur dont les composants sont d'un type spécifié.</summary>
      <param name="value">Type numérique qui définit le type des composants dans le vecteur.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
      <summary>Crée un vecteur à partir d'un tableau spécifié.</summary>
      <param name="values">Valeurs à ajouter au vecteur, sous la forme d’un tableau d’objets de type T. Le tableau doit contenir au moins les éléments <see cref="P:System.Numerics.Vector`1.Count" /> et seulement les premiers éléments <see cref="P:System.Numerics.Vector`1.Count" /> sont utilisés.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
      <summary>Crée un vecteur à partir d'un tableau spécifié en commençant à la position d'index spécifiée.</summary>
      <param name="values">Valeurs à ajouter au vecteur, sous la forme d’un tableau d’objets de type T. Le tableau doit contenir au moins les éléments <see cref="P:System.Numerics.Vector`1.Count" /> de l’index spécifié et seulement les premiers éléments <see cref="P:System.Numerics.Vector`1.Count" /> sont utilisés.</param>
      <param name="index">Position d'index de départ à partir de laquelle créer le vecteur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
La longueur de <paramref name="values" /> moins <paramref name="index" /> est inférieure à <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
      <summary>Construit un vecteur à partir de la <see cref="T:System.ReadOnlySpan`1" /> donnée.</summary>
      <param name="values">Les valeurs à ajouter au vecteur en tant qu’étendue en lecture seule d’objets de type <see langword="T" />. La plage doit contenir au moins <see cref="P:System.Numerics.Vector`1.Count" /> éléments et seuls les premiers éléments <see cref="P:System.Numerics.Vector`1.Count" /> sont utilisés.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="values" /> ne contenait pas au moins les éléments <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Construit un vecteur à partir de la plage d’octets en lecture seule donnée.</summary>
      <param name="values">Plage d’octets en lecture seule qui contient les valeurs à ajouter au vecteur. La plage doit contenir au moins <see cref="P:System.Numerics.Vector`1.Count" /> éléments et seuls les premiers éléments <see cref="P:System.Numerics.Vector`1.Count" /> sont utilisés.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="values" /> ne contenait pas au moins les éléments <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.Span{`0})">
      <summary>Construit un vecteur à partir de la <see cref="T:System.Span`1" /> donnée.</summary>
      <param name="values">Valeurs à ajouter au vecteur, sous la forme d’une plage d’objets de type T. La plage doit contenir au moins les éléments <see cref="P:System.Numerics.Vector`1.Count" /> et seulement les premiers éléments <see cref="P:System.Numerics.Vector`1.Count" /> sont utilisés.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="values" /> ne contenait pas au moins les éléments <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
      <summary>Copie l'instance de vecteur dans un tableau de destination spécifié.</summary>
      <param name="destination">Tableau devant recevoir une copie des valeurs de vecteur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments dans le vecteur actuel est supérieur au nombre d’éléments disponibles dans le tableau <paramref name="destination" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
      <summary>Copie l'instance de vecteur dans un tableau de destination spécifié, en commençant à une position d'index spécifiée.</summary>
      <param name="destination">Tableau devant recevoir une copie des valeurs de vecteur.</param>
      <param name="startIndex">Index de départ dans <paramref name="destination" /> auquel commencer l'opération de copie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments dans l’instance actuelle est supérieur au nombre d’éléments disponibles entre <paramref name="startIndex" /> et la fin du tableau <paramref name="destination" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro ou supérieur au dernier index dans <paramref name="destination" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{`0})">
      <summary>Copie le vecteur dans la plage donnée. .</summary>
      <param name="destination">Plage de destination dans laquelle les valeurs sont copiées. La taille de la plage de destination doit être au moins de <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments dans le vecteur source est supérieur au nombre disponible dans la plage de destination.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{System.Byte})">
      <summary>Copie le vecteur dans la <see cref="T:System.Span`1" /> donnée.</summary>
      <param name="destination">Plage de destination dans laquelle les valeurs sont copiées. La taille de la plage de destination doit être au moins de <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments dans le vecteur source est supérieur au nombre disponible dans la plage de destination.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
      <summary>Retourne une valeur qui indique si cette instance est égale à un vecteur spécifié.</summary>
      <param name="other">Vecteur à comparer à cette instance.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>
        <see langword="true" /> si l'instance actuelle et <paramref name="other" /> sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj">Objet à comparer avec cette instance.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. La méthode retourne <see langword="false" /> si <paramref name="obj" /> a la valeur null ou si <paramref name="obj" /> est un vecteur d'un type différent de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Code de hachage.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Additionne deux vecteurs.</summary>
      <param name="left">Premier vecteur à additionner.</param>
      <param name="right">Deuxième vecteur à additionner.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retourne un nouveau vecteur en effectuant une opération <see langword="And" /> au niveau du bit sur chacun des éléments dans deux vecteurs.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur qui résulte de l'opération <see langword="And" /> sur <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retourne un nouveau vecteur en effectuant une opération <see langword="Or" /> au niveau du bit sur chacun des éléments dans deux vecteurs.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur qui résulte de l'opération <see langword="Or" /> au niveau du bit sur les éléments dans <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Divise le premier vecteur par le deuxième.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur résultant de la division de <paramref name="left" /> par <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retourne une valeur qui indique si chacune des paires d'éléments dans deux vecteurs spécifiés sont égales.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retourne un nouveau vecteur en effectuant une opération <see langword="XOr" /> au niveau du bit sur chacun des éléments dans deux vecteurs.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur qui résulte de l'opération <see langword="XOr" /> au niveau du bit sur les éléments dans <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
      <summary>Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Byte" />.</summary>
      <param name="value">Vecteur à réinterpréter.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
      <summary>Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Double" />.</summary>
      <param name="value">Vecteur à réinterpréter.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
      <summary>Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Int16" />.</summary>
      <param name="value">Vecteur à réinterpréter.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
      <summary>Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Int32" />.</summary>
      <param name="value">Vecteur à réinterpréter.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
      <summary>Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Int64" />.</summary>
      <param name="value">Vecteur à réinterpréter.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
      <summary>Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.SByte" />.</summary>
      <param name="value">Vecteur à réinterpréter.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
      <summary>Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Single" />.</summary>
      <param name="value">Vecteur à réinterpréter.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
      <summary>Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.UInt16" />.</summary>
      <param name="value">Vecteur à réinterpréter.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
      <summary>Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.UInt32" />.</summary>
      <param name="value">Vecteur à réinterpréter.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
      <summary>Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.UInt64" />.</summary>
      <param name="value">Vecteur à réinterpréter.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retourne une valeur qui indique si au moins deux paires d'éléments dans les vecteurs spécifiés sont égales.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>
        <see langword="true" /> si des paires d'éléments left et right sont égales. <see langword="false" /> si aucune paire d'éléments n'est égale à une autre.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
      <summary>Multiplie un vecteur par une valeur scalaire spécifiée.</summary>
      <param name="factor">Valeur scalaire.</param>
      <param name="value">Vecteur source.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
      <summary>Multiplie un vecteur par une valeur scalaire spécifiée.</summary>
      <param name="value">Vecteur source.</param>
      <param name="factor">Valeur scalaire.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
      <summary>Retourne un nouveau vecteur dont les éléments sont obtenus en prenant le complément des éléments d'un vecteur spécifié.</summary>
      <param name="value">Vecteur source.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur complément d'un autre.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Soustrait le deuxième vecteur du premier.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur résultant de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
      <summary>Inverse un vecteur donné.</summary>
      <param name="value">Vecteur dont le signe doit être inversé.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString">
      <summary>Retourne la représentation sous forme de chaîne de ce vecteur en utilisant la mise en forme par défaut.</summary>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Représentation sous forme de chaîne de ce vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String)">
      <summary>Retourne la représentation sous forme de chaîne de ce vecteur en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels.</summary>
      <param name="format">Un  ou  qui définit le format d’éléments individuels.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
      <summary>Retourne la représentation sous forme de chaîne de ce vecteur en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels et le fournisseur de format spécifié pour définir la mise en forme spécifique à la culture.</summary>
      <param name="format">Un  ou  qui définit le format d’éléments individuels.</param>
      <param name="formatProvider">Fournisseur de format qui fournit les informations de mise en forme spécifiques à la culture.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{`0})">
      <summary>Tente de copier le vecteur vers la <see cref="T:System.Span`1" /> donnée.</summary>
      <param name="destination">Plage de destination dans laquelle les valeurs sont copiées. La taille de la plage de destination doit être au moins de <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>
        <see langword="true" /> si le vecteur source a été correctement copié vers <paramref name="destination" />. <see langword="false" /> si <paramref name="destination" /> n’est pas assez grand pour contenir le vecteur source.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{System.Byte})">
      <summary>Tente de copier le vecteur vers la plage d’octets donnée.</summary>
      <param name="destination">Plage de destination dans laquelle les valeurs sont copiées. La taille de la plage de destination doit être au moins de <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>
        <see langword="true" /> si le vecteur source a été correctement copié vers <paramref name="destination" />. <see langword="false" /> si <paramref name="destination" /> n’est pas assez grand pour contenir le vecteur source.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Count">
      <summary>Retourne le nombre d'éléments stockés dans le vecteur.</summary>
      <exception cref="T:System.NotSupportedException">L’accès à la méthode getter de propriété via réflexion n’est pas pris en charge.
        
- ou - 
.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Nombre d'éléments stockés dans le vecteur.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
      <summary>Obtient l'élément au niveau d'un index spécifié.</summary>
      <param name="index">Index de l'élément à retourner.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Élément à l'index <paramref name="index" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.One">
      <summary>Retourne un vecteur contenant uniquement des 1.</summary>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur contenant uniquement des 1.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Zero">
      <summary>Retourne un vecteur contenant uniquement des 0.</summary>
      <exception cref="T:System.NotSupportedException">.NET 5.0 et ultérieur : Le type <see langword="T" /> n’est pas pris en charge.</exception>
      <returns>Vecteur contenant uniquement des 0.</returns>
    </member>
    <member name="T:System.Numerics.Vector2">
      <summary>Représente un vecteur de deux valeurs en virgule flottante à simple précision.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.X">
      <summary>Composant X du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.Y">
      <summary>Composant Y du vecteur.</summary>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
      <summary>Crée un objet <see cref="T:System.Numerics.Vector2" /> dont les deux éléments ont la même valeur.</summary>
      <param name="value">Valeur à affecter aux deux éléments.</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
      <summary>Crée un vecteur dont les éléments ont les valeurs spécifiées.</summary>
      <param name="x">Valeur à affecter au champ <see cref="F:System.Numerics.Vector2.X" />.</param>
      <param name="y">Valeur à affecter au champ <see cref="F:System.Numerics.Vector2.Y" />.</param>
    </member>
    <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
      <summary>Retourne un vecteur dont les éléments sont les valeurs absolues de chacun des éléments du vecteur spécifié.</summary>
      <param name="value">Un vecteur.</param>
      <returns>Vecteur de valeurs absolues.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Additionne deux vecteurs.</summary>
      <param name="left">Premier vecteur à additionner.</param>
      <param name="right">Deuxième vecteur à additionner.</param>
      <returns>Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Limite un vecteur entre une valeur minimale et une valeur maximale.</summary>
      <param name="value1">Vecteur à limiter.</param>
      <param name="min">Valeur minimale.</param>
      <param name="max">Valeur maximale.</param>
      <returns>Vecteur limité.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[])">
      <summary>Copie les éléments du vecteur dans un tableau spécifié.</summary>
      <param name="array">Tableau de destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
      <summary>Copie les éléments du vecteur dans un tableau spécifié, en commençant à une position d'index spécifiée.</summary>
      <param name="array">Tableau de destination.</param>
      <param name="index">Index auquel copier le premier élément du vecteur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à la longueur du tableau.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Calcule la distance euclidienne entre les deux points donnés.</summary>
      <param name="value1">Premier point.</param>
      <param name="value2">Deuxième point.</param>
      <returns>Distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retourne le carré de la distance euclidienne entre deux points spécifiés.</summary>
      <param name="value1">Premier point.</param>
      <param name="value2">Deuxième point.</param>
      <returns>Carré de la distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Divise le premier vecteur par le deuxième.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)">
      <summary>Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="left">Vecteur.</param>
      <param name="divisor">Valeur scalaire.</param>
      <returns>Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retourne le produit scalaire de deux vecteurs.</summary>
      <param name="value1">Premier vecteur.</param>
      <param name="value2">Deuxième vecteur.</param>
      <returns>Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
      <summary>Retourne une valeur qui indique si cette instance et un autre vecteur sont égaux.</summary>
      <param name="other">L'autre vecteur.</param>
      <returns>
        <see langword="true" /> si les deux vecteurs sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj">Objet à comparer à l’instance actuelle.</param>
      <returns>
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Length">
      <summary>Retourne la longueur du vecteur.</summary>
      <returns>Longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LengthSquared">
      <summary>Retourne le carré de la longueur du vecteur.</summary>
      <returns>Carré de la longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
      <summary>Effectue une interpolation linéaire entre deux vecteurs en fonction de la pondération donnée.</summary>
      <param name="value1">Premier vecteur.</param>
      <param name="value2">Deuxième vecteur.</param>
      <param name="amount">Valeur comprise entre 0 et 1, qui indique la pondération de <paramref name="value2" />.</param>
      <returns>Vecteur interpolé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retourne un vecteur dont les éléments sont la valeur maximale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1">Premier vecteur.</param>
      <param name="value2">Deuxième vecteur.</param>
      <returns>Vecteur constitué des maximums.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retourne un vecteur dont les éléments sont la valeur minimale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1">Premier vecteur.</param>
      <param name="value2">Deuxième vecteur.</param>
      <returns>Vecteur constitué des minimums.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Multiplie un vecteur par un scalaire spécifié.</summary>
      <param name="left">Vecteur à multiplier.</param>
      <param name="right">Valeur scalaire.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Multiplie une valeur scalaire par un vecteur spécifié.</summary>
      <param name="left">Valeur mise à l'échelle.</param>
      <param name="right">Vecteur.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
      <summary>Inverse le signe d'un vecteur spécifié.</summary>
      <param name="value">Vecteur dont le signe doit être inversé.</param>
      <returns>Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
      <summary>Retourne un vecteur avec la même direction que le vecteur spécifié, mais avec une longueur de 1.</summary>
      <param name="value">Vecteur à normaliser.</param>
      <returns>Vecteur normalisé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Additionne deux vecteurs.</summary>
      <param name="left">Premier vecteur à additionner.</param>
      <param name="right">Deuxième vecteur à additionner.</param>
      <returns>Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Divise le premier vecteur par le deuxième.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant de la division de <paramref name="left" /> par <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)">
      <summary>Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="value1">Vecteur.</param>
      <param name="value2">Valeur scalaire.</param>
      <returns>Résultat de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retourne une valeur qui indique si chacune des paires d'éléments dans deux vecteurs spécifiés sont égales.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retourne une valeur qui indique si deux vecteurs spécifiés ne sont pas égaux.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Multiplie le vecteur spécifié par la valeur scalaire spécifiée.</summary>
      <param name="left">Vecteur.</param>
      <param name="right">Valeur scalaire.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Multiplie la valeur scalaire par le vecteur spécifié.</summary>
      <param name="left">Vecteur.</param>
      <param name="right">Valeur scalaire.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Soustrait le deuxième vecteur du premier.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
      <summary>Inverse le signe du vecteur spécifié.</summary>
      <param name="value">Vecteur dont le signe doit être inversé.</param>
      <returns>Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Retourne la réflexion d'un vecteur depuis une surface qui a la normale spécifiée.</summary>
      <param name="vector">Vecteur source.</param>
      <param name="normal">Normale de la surface depuis laquelle la réflexion est effectuée.</param>
      <returns>Vecteur reflété.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
      <summary>Retourne un vecteur dont les éléments sont la racine carrée de chacun des éléments d'un vecteur spécifié.</summary>
      <param name="value">Un vecteur.</param>
      <returns>Racine carrée du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Soustrait le deuxième vecteur du premier.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur de différence.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString">
      <summary>Retourne la représentation sous forme de chaîne de l'instance actuelle en utilisant la mise en forme par défaut.</summary>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String)">
      <summary>Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels.</summary>
      <param name="format">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary>Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels et le fournisseur de format spécifié pour définir la mise en forme spécifique à la culture.</summary>
      <param name="format">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <param name="formatProvider">Fournisseur de format qui fournit les informations de mise en forme spécifiques à la culture.</param>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Transforme un vecteur par une matrice 3 x 2 spécifiée.</summary>
      <param name="position">Vecteur à transformer.</param>
      <param name="matrix">Matrice de transformation.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforme un vecteur par une matrice 3 x 2 spécifiée.</summary>
      <param name="position">Vecteur à transformer.</param>
      <param name="matrix">Matrice de transformation.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Transforme un vecteur par la valeur de rotation du quaternion spécifié.</summary>
      <param name="value">Vecteur à faire pivoter.</param>
      <param name="rotation">Rotation à appliquer.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Transforme un vecteur normal par la matrice 3 x 2 donnée.</summary>
      <param name="normal">Vecteur source.</param>
      <param name="matrix">Matrice.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforme un vecteur normal par la matrice 4 x 4 donnée.</summary>
      <param name="normal">Vecteur source.</param>
      <param name="matrix">Matrice.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.One">
      <summary>Obtient un vecteur dont les 2 éléments valent 1.</summary>
      <returns>Vecteur dont les deux éléments sont égaux à un (autrement dit, il retourne le vecteur <c>(1,1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitX">
      <summary>Obtient le vecteur (1,0).</summary>
      <returns>Vecteur <c>(1,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitY">
      <summary>Obtient le vecteur (0,1).</summary>
      <returns>Vecteur <c>(0, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.Zero">
      <summary>Obtient un vecteur dont les 2 éléments valent zéro.</summary>
      <returns>Vecteur dont les deux éléments sont égaux à zéro (autrement dit, il retourne le vecteur <c>(0, 0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector3">
      <summary>Représente un vecteur de trois valeurs en virgule flottante à simple précision.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.X">
      <summary>Composant X du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Y">
      <summary>Composant Y du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Z">
      <summary>Composant Z du vecteur.</summary>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)">
      <summary>Crée un objet <see cref="T:System.Numerics.Vector3" /> à partir de l'objet <see cref="T:System.Numerics.Vector2" /> spécifié et de la valeur spécifiée.</summary>
      <param name="value">Vecteur avec deux éléments.</param>
      <param name="z">Valeur supplémentaire à affecter au champ <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
      <summary>Crée un objet <see cref="T:System.Numerics.Vector3" /> dont les trois éléments ont la même valeur.</summary>
      <param name="value">Valeur à affecter aux trois éléments.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Crée un vecteur dont les éléments ont les valeurs spécifiées.</summary>
      <param name="x">Valeur à affecter au champ <see cref="F:System.Numerics.Vector3.X" />.</param>
      <param name="y">Valeur à affecter au champ <see cref="F:System.Numerics.Vector3.Y" />.</param>
      <param name="z">Valeur à affecter au champ <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
      <summary>Retourne un vecteur dont les éléments sont les valeurs absolues de chacun des éléments du vecteur spécifié.</summary>
      <param name="value">Un vecteur.</param>
      <returns>Vecteur de valeurs absolues.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Additionne deux vecteurs.</summary>
      <param name="left">Premier vecteur à additionner.</param>
      <param name="right">Deuxième vecteur à additionner.</param>
      <returns>Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Limite un vecteur entre une valeur minimale et une valeur maximale.</summary>
      <param name="value1">Vecteur à limiter.</param>
      <param name="min">Valeur minimale.</param>
      <param name="max">Valeur maximale.</param>
      <returns>Vecteur limité.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
      <summary>Copie les éléments du vecteur dans un tableau spécifié.</summary>
      <param name="array">Tableau de destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
      <summary>Copie les éléments du vecteur dans un tableau spécifié, en commençant à une position d'index spécifiée.</summary>
      <param name="array">Tableau de destination.</param>
      <param name="index">Index auquel copier le premier élément du vecteur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à la longueur du tableau.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Calcule le produit croisé de deux vecteurs.</summary>
      <param name="vector1">Premier vecteur.</param>
      <param name="vector2">Deuxième vecteur.</param>
      <returns>Produit croisé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Calcule la distance euclidienne entre les deux points donnés.</summary>
      <param name="value1">Premier point.</param>
      <param name="value2">Deuxième point.</param>
      <returns>Distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retourne le carré de la distance euclidienne entre deux points spécifiés.</summary>
      <param name="value1">Premier point.</param>
      <param name="value2">Deuxième point.</param>
      <returns>Carré de la distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Divise le premier vecteur par le deuxième.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)">
      <summary>Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="left">Vecteur.</param>
      <param name="divisor">Valeur scalaire.</param>
      <returns>Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retourne le produit scalaire de deux vecteurs.</summary>
      <param name="vector1">Premier vecteur.</param>
      <param name="vector2">Deuxième vecteur.</param>
      <returns>Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
      <summary>Retourne une valeur qui indique si cette instance et un autre vecteur sont égaux.</summary>
      <param name="other">L'autre vecteur.</param>
      <returns>
        <see langword="true" /> si les deux vecteurs sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj">Objet à comparer à l’instance actuelle.</param>
      <returns>
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Length">
      <summary>Retourne la longueur de cet objet vecteur.</summary>
      <returns>Longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LengthSquared">
      <summary>Retourne le carré de la longueur du vecteur.</summary>
      <returns>Carré de la longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
      <summary>Effectue une interpolation linéaire entre deux vecteurs en fonction de la pondération donnée.</summary>
      <param name="value1">Premier vecteur.</param>
      <param name="value2">Deuxième vecteur.</param>
      <param name="amount">Valeur comprise entre 0 et 1, qui indique la pondération de <paramref name="value2" />.</param>
      <returns>Vecteur interpolé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retourne un vecteur dont les éléments sont la valeur maximale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1">Premier vecteur.</param>
      <param name="value2">Deuxième vecteur.</param>
      <returns>Vecteur constitué des maximums.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retourne un vecteur dont les éléments sont la valeur minimale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1">Premier vecteur.</param>
      <param name="value2">Deuxième vecteur.</param>
      <returns>Vecteur constitué des minimums.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Multiplie un vecteur par un scalaire spécifié.</summary>
      <param name="left">Vecteur à multiplier.</param>
      <param name="right">Valeur scalaire.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Multiplie une valeur scalaire par un vecteur spécifié.</summary>
      <param name="left">Valeur mise à l'échelle.</param>
      <param name="right">Vecteur.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
      <summary>Inverse le signe d'un vecteur spécifié.</summary>
      <param name="value">Vecteur dont le signe doit être inversé.</param>
      <returns>Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
      <summary>Retourne un vecteur avec la même direction que le vecteur spécifié, mais avec une longueur de 1.</summary>
      <param name="value">Vecteur à normaliser.</param>
      <returns>Vecteur normalisé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Additionne deux vecteurs.</summary>
      <param name="left">Premier vecteur à additionner.</param>
      <param name="right">Deuxième vecteur à additionner.</param>
      <returns>Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Divise le premier vecteur par le deuxième.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant de la division de <paramref name="left" /> par <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)">
      <summary>Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="value1">Vecteur.</param>
      <param name="value2">Valeur scalaire.</param>
      <returns>Résultat de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retourne une valeur qui indique si chacune des paires d'éléments dans deux vecteurs spécifiés sont égales.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retourne une valeur qui indique si deux vecteurs spécifiés ne sont pas égaux.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Multiplie le vecteur spécifié par la valeur scalaire spécifiée.</summary>
      <param name="left">Vecteur.</param>
      <param name="right">Valeur scalaire.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Multiplie la valeur scalaire par le vecteur spécifié.</summary>
      <param name="left">Vecteur.</param>
      <param name="right">Valeur scalaire.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Soustrait le deuxième vecteur du premier.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
      <summary>Inverse le signe du vecteur spécifié.</summary>
      <param name="value">Vecteur dont le signe doit être inversé.</param>
      <returns>Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Retourne la réflexion d'un vecteur depuis une surface qui a la normale spécifiée.</summary>
      <param name="vector">Vecteur source.</param>
      <param name="normal">Normale de la surface depuis laquelle la réflexion est effectuée.</param>
      <returns>Vecteur reflété.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
      <summary>Retourne un vecteur dont les éléments sont la racine carrée de chacun des éléments d'un vecteur spécifié.</summary>
      <param name="value">Un vecteur.</param>
      <returns>Racine carrée du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Soustrait le deuxième vecteur du premier.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur de différence.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString">
      <summary>Retourne la représentation sous forme de chaîne de l'instance actuelle en utilisant la mise en forme par défaut.</summary>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String)">
      <summary>Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels.</summary>
      <param name="format">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary>Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels et le fournisseur de format spécifié pour définir la mise en forme spécifique à la culture.</summary>
      <param name="format">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <param name="formatProvider">Fournisseur de format qui fournit les informations de mise en forme spécifiques à la culture.</param>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforme un vecteur par une matrice 3 x 2 spécifiée.</summary>
      <param name="position">Vecteur à transformer.</param>
      <param name="matrix">Matrice de transformation.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Transforme un vecteur par la valeur de rotation du quaternion spécifié.</summary>
      <param name="value">Vecteur à faire pivoter.</param>
      <param name="rotation">Rotation à appliquer.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforme un vecteur normal par la matrice 4 x 4 donnée.</summary>
      <param name="normal">Vecteur source.</param>
      <param name="matrix">Matrice.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.One">
      <summary>Obtient un vecteur dont les 3 éléments valent 1.</summary>
      <returns>Vecteur dont les trois éléments sont égaux à un (autrement dit, il retourne le vecteur <c>(1, 1, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitX">
      <summary>Obtient le vecteur (1,0,0).</summary>
      <returns>Vecteur <c>(1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitY">
      <summary>Obtient le vecteur (0,1,0).</summary>
      <returns>Vecteur <c>(0, 1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitZ">
      <summary>Obtient le vecteur (0,0,1).</summary>
      <returns>Vecteur <c>(0, 0, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.Zero">
      <summary>Obtient un vecteur dont les 3 éléments valent zéro.</summary>
      <returns>Vecteur dont les trois éléments sont égaux à zéro (autrement dit, il retourne le vecteur <c>(0, 0, 0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector4">
      <summary>Représente un vecteur de quatre valeurs en virgule flottante à simple précision.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.W">
      <summary>Composant W du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.X">
      <summary>Composant X du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Y">
      <summary>Composant Y du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Z">
      <summary>Composant Z du vecteur.</summary>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
      <summary>Crée un objet <see cref="T:System.Numerics.Vector4" /> à partir de l'objet <see cref="T:System.Numerics.Vector2" /> spécifié et d'un composant Z et W.</summary>
      <param name="value">Vecteur à utiliser pour les composants X et Y.</param>
      <param name="z">Composant Z.</param>
      <param name="w">Composant W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Crée un objet <see cref="T:System.Numerics.Vector4" /> à partir de l'objet <see cref="T:System.Numerics.Vector3" /> spécifié et d'un composant W.</summary>
      <param name="value">Vecteur à utiliser pour les composants X, Y et Z.</param>
      <param name="w">Composant W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
      <summary>Crée un objet <see cref="T:System.Numerics.Vector4" /> dont les quatre éléments ont la même valeur.</summary>
      <param name="value">Valeur à affecter aux quatre éléments.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crée un vecteur dont les éléments ont les valeurs spécifiées.</summary>
      <param name="x">Valeur à affecter au champ <see cref="F:System.Numerics.Vector4.X" />.</param>
      <param name="y">Valeur à affecter au champ <see cref="F:System.Numerics.Vector4.Y" />.</param>
      <param name="z">Valeur à affecter au champ <see cref="F:System.Numerics.Vector4.Z" />.</param>
      <param name="w">Valeur à affecter au champ <see cref="F:System.Numerics.Vector4.W" />.</param>
    </member>
    <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
      <summary>Retourne un vecteur dont les éléments sont les valeurs absolues de chacun des éléments du vecteur spécifié.</summary>
      <param name="value">Un vecteur.</param>
      <returns>Vecteur de valeurs absolues.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Additionne deux vecteurs.</summary>
      <param name="left">Premier vecteur à additionner.</param>
      <param name="right">Deuxième vecteur à additionner.</param>
      <returns>Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Limite un vecteur entre une valeur minimale et une valeur maximale.</summary>
      <param name="value1">Vecteur à limiter.</param>
      <param name="min">Valeur minimale.</param>
      <param name="max">Valeur maximale.</param>
      <returns>Vecteur limité.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[])">
      <summary>Copie les éléments du vecteur dans un tableau spécifié.</summary>
      <param name="array">Tableau de destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
      <summary>Copie les éléments du vecteur dans un tableau spécifié, en commençant à une position d'index spécifiée.</summary>
      <param name="array">Tableau de destination.</param>
      <param name="index">Index auquel copier le premier élément du vecteur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à la longueur du tableau.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Calcule la distance euclidienne entre les deux points donnés.</summary>
      <param name="value1">Premier point.</param>
      <param name="value2">Deuxième point.</param>
      <returns>Distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retourne le carré de la distance euclidienne entre deux points spécifiés.</summary>
      <param name="value1">Premier point.</param>
      <param name="value2">Deuxième point.</param>
      <returns>Carré de la distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Divise le premier vecteur par le deuxième.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)">
      <summary>Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="left">Vecteur.</param>
      <param name="divisor">Valeur scalaire.</param>
      <returns>Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retourne le produit scalaire de deux vecteurs.</summary>
      <param name="vector1">Premier vecteur.</param>
      <param name="vector2">Deuxième vecteur.</param>
      <returns>Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
      <summary>Retourne une valeur qui indique si cette instance et un autre vecteur sont égaux.</summary>
      <param name="other">L'autre vecteur.</param>
      <returns>
        <see langword="true" /> si les deux vecteurs sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj">Objet à comparer à l’instance actuelle.</param>
      <returns>
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Length">
      <summary>Retourne la longueur de cet objet vecteur.</summary>
      <returns>Longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LengthSquared">
      <summary>Retourne le carré de la longueur du vecteur.</summary>
      <returns>Carré de la longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
      <summary>Effectue une interpolation linéaire entre deux vecteurs en fonction de la pondération donnée.</summary>
      <param name="value1">Premier vecteur.</param>
      <param name="value2">Deuxième vecteur.</param>
      <param name="amount">Valeur comprise entre 0 et 1, qui indique la pondération de <paramref name="value2" />.</param>
      <returns>Vecteur interpolé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retourne un vecteur dont les éléments sont la valeur maximale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1">Premier vecteur.</param>
      <param name="value2">Deuxième vecteur.</param>
      <returns>Vecteur constitué des maximums.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retourne un vecteur dont les éléments sont la valeur minimale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1">Premier vecteur.</param>
      <param name="value2">Deuxième vecteur.</param>
      <returns>Vecteur constitué des minimums.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Multiplie un vecteur par un scalaire spécifié.</summary>
      <param name="left">Vecteur à multiplier.</param>
      <param name="right">Valeur scalaire.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Multiplie une valeur scalaire par un vecteur spécifié.</summary>
      <param name="left">Valeur mise à l'échelle.</param>
      <param name="right">Vecteur.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
      <summary>Inverse le signe d'un vecteur spécifié.</summary>
      <param name="value">Vecteur dont le signe doit être inversé.</param>
      <returns>Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
      <summary>Retourne un vecteur avec la même direction que le vecteur spécifié, mais avec une longueur de 1.</summary>
      <param name="vector">Vecteur à normaliser.</param>
      <returns>Vecteur normalisé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Additionne deux vecteurs.</summary>
      <param name="left">Premier vecteur à additionner.</param>
      <param name="right">Deuxième vecteur à additionner.</param>
      <returns>Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Divise le premier vecteur par le deuxième.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant de la division de <paramref name="left" /> par <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)">
      <summary>Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="value1">Vecteur.</param>
      <param name="value2">Valeur scalaire.</param>
      <returns>Résultat de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retourne une valeur qui indique si chacune des paires d'éléments dans deux vecteurs spécifiés sont égales.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retourne une valeur qui indique si deux vecteurs spécifiés ne sont pas égaux.</summary>
      <param name="left">Premier vecteur à comparer.</param>
      <param name="right">Deuxième vecteur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Multiplie le vecteur spécifié par la valeur scalaire spécifiée.</summary>
      <param name="left">Vecteur.</param>
      <param name="right">Valeur scalaire.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Multiplie la valeur scalaire par le vecteur spécifié.</summary>
      <param name="left">Vecteur.</param>
      <param name="right">Valeur scalaire.</param>
      <returns>Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Soustrait le deuxième vecteur du premier.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur résultant de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
      <summary>Inverse le signe du vecteur spécifié.</summary>
      <param name="value">Vecteur dont le signe doit être inversé.</param>
      <returns>Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
      <summary>Retourne un vecteur dont les éléments sont la racine carrée de chacun des éléments d'un vecteur spécifié.</summary>
      <param name="value">Un vecteur.</param>
      <returns>Racine carrée du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Soustrait le deuxième vecteur du premier.</summary>
      <param name="left">Premier vecteur.</param>
      <param name="right">Deuxième vecteur.</param>
      <returns>Vecteur de différence.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString">
      <summary>Retourne la représentation sous forme de chaîne de l'instance actuelle en utilisant la mise en forme par défaut.</summary>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String)">
      <summary>Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels.</summary>
      <param name="format">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary>Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels et le fournisseur de format spécifié pour définir la mise en forme spécifique à la culture.</summary>
      <param name="format">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <param name="formatProvider">Fournisseur de format qui fournit les informations de mise en forme spécifiques à la culture.</param>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforme un vecteur à deux dimensions par une matrice 4 x 4 spécifiée.</summary>
      <param name="position">Vecteur à transformer.</param>
      <param name="matrix">Matrice de transformation.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Transforme un vecteur à deux dimensions par la valeur de rotation du quaternion spécifié.</summary>
      <param name="value">Vecteur à faire pivoter.</param>
      <param name="rotation">Rotation à appliquer.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforme un vecteur à trois dimensions par une matrice 4 x 4 spécifiée.</summary>
      <param name="position">Vecteur à transformer.</param>
      <param name="matrix">Matrice de transformation.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Transforme un vecteur à trois dimensions par la valeur de rotation du quaternion spécifié.</summary>
      <param name="value">Vecteur à faire pivoter.</param>
      <param name="rotation">Rotation à appliquer.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)">
      <summary>Transforme un vecteur à quatre dimensions par une matrice 4 x 4 spécifiée.</summary>
      <param name="vector">Vecteur à transformer.</param>
      <param name="matrix">Matrice de transformation.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
      <summary>Transforme un vecteur à quatre dimensions par la valeur de rotation du quaternion spécifié.</summary>
      <param name="value">Vecteur à faire pivoter.</param>
      <param name="rotation">Rotation à appliquer.</param>
      <returns>Vecteur transformé.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.One">
      <summary>Obtient un vecteur dont les 4 éléments valent 1.</summary>
      <returns>Retourne <see cref="T:System.Numerics.Vector4" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitW">
      <summary>Obtient le vecteur (0,0,0,1).</summary>
      <returns>Vecteur (0, 0, <c>0, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitX">
      <summary>Obtient le vecteur (1,0,0,0).</summary>
      <returns>Vecteur <c>(1, 0, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitY">
      <summary>Obtient le vecteur (0,1,0,0).</summary>
      <returns>Vecteur <c>(0, 1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitZ">
      <summary>Obtient le vecteur (0,0,1,0).</summary>
      <returns>Vecteur <c>(0, 0, 1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.Zero">
      <summary>Obtient un vecteur dont les 4 éléments valent zéro.</summary>
      <returns>Vecteur dont les quatre éléments sont égaux à zéro (autrement dit, il retourne le vecteur <c>(0</c>, 0, 0, 0).</returns>
    </member>
  </members>
</doc>
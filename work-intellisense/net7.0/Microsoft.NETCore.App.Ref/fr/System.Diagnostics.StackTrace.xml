<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>Fournit des informations sur un <see cref="T:System.Diagnostics.StackFrame" />, qui représente un appel de fonction sur la pile des appels du thread en cours.</summary>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>Définit la valeur retournée par la méthode <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> ou <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> lorsque l'offset natif ou MSIL (Microsoft Intermediate Language) est inconnu. Ce champ est constant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" />.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" /> en capturant éventuellement les informations sur la source.</summary>
      <param name="needFileInfo" />
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" /> qui correspond au frame situé au-dessus du frame de pile en cours.</summary>
      <param name="skipFrames">Nombre de frames au sommet de la pile à ignorer.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" /> qui correspond à un frame situé au-dessus du frame de pile en cours, en capturant éventuellement les informations sur la source.</summary>
      <param name="skipFrames">Nombre de frames au sommet de la pile à ignorer.</param>
      <param name="needFileInfo" />
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" /> qui ne contient que le nom de fichier et le numéro de ligne donnés.</summary>
      <param name="fileName">Nom du fichier.</param>
      <param name="lineNumber">Numéro de la ligne dans le fichier spécifié.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" /> qui ne contient que le nom de fichier, le numéro de ligne et le numéro de colonne donnés.</summary>
      <param name="fileName">Nom du fichier.</param>
      <param name="lineNumber">Numéro de la ligne dans le fichier spécifié.</param>
      <param name="colNumber">Numéro de la colonne dans le fichier spécifié.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>Obtient le numéro de la colonne dans le fichier qui contient le code en cours d'exécution. Cette information est généralement extraite des symboles de débogage de l'exécutable.</summary>
      <returns>Numéro de colonne du fichier, ou 0 (zéro) si le numéro de la colonne dans le fichier ne peut pas être déterminé.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>Obtient le numéro de la ligne dans le fichier qui contient le code en cours d'exécution. Cette information est généralement extraite des symboles de débogage de l'exécutable.</summary>
      <returns>Numéro de ligne du fichier, ou 0 (zéro) si le numéro de la ligne dans le fichier ne peut pas être déterminé.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>Obtient le nom du fichier qui contient le code en cours d'exécution. Cette information est généralement extraite des symboles de débogage de l'exécutable.</summary>
      <returns>Nom du fichier, ou <see langword="null" /> si le nom du fichier ne peut être déterminé.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>Obtient l'offset par rapport au début du code MSIL (Microsoft Intermediate Language) pour la méthode en cours d'exécution. Cet offset peut être une approximation selon que le compilateur juste-à-temps (JIT) génère actuellement du code, ou non. La génération d'informations de débogage est déterminée par <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns>Offset par rapport au début du code MSIL pour la méthode en cours d'exécution.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>Obtient la méthode dans laquelle le frame s'exécute.</summary>
      <returns>Méthode dans laquelle le frame s'exécute.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary>Obtient l'offset par rapport au début du code natif compilé juste-à-temps (par JIT) pour la méthode en cours d'exécution. La génération d'informations de débogage est déterminée par la classe <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns>Offset par rapport au début du code compilé par JIT pour la méthode en cours d'exécution.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>Génère une représentation lisible de la trace de la pile.</summary>
      <returns>Représentation lisible de la trace de la pile.</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary>Fournit des méthodes d’extension pour la classe <see cref="T:System.Diagnostics.StackFrame" />, qui représente un appel de fonction sur la pile des appels du thread actuel.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary>Retourne un pointeur vers l’adresse de base de l’image native exécutée par ce frame de pile.</summary>
      <param name="stackFrame">Frame de pile.</param>
      <returns>Pointeur vers l’adresse de base de l’image native ou <see cref="F:System.IntPtr.Zero" /> si vous ciblez le .NET Framework.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary>Obtient un pointeur d’interface vers le début du code natif pour la méthode en cours d’exécution.</summary>
      <param name="stackFrame">Frame de pile.</param>
      <returns>Pointeur d’interface vers le début du code natif pour la méthode à exécuter ou <see cref="F:System.IntPtr.Zero" /> si vous ciblez le .NET Framework.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary>Indique si un offset par rapport au début du code MSIL pour la méthode en cours d’exécution est disponible.</summary>
      <param name="stackFrame">Frame de pile.</param>
      <returns>
        <see langword="true" /> si l’offset est disponible ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary>Indique si les informations sur la méthode dans laquelle s’exécute le frame spécifié sont disponibles.</summary>
      <param name="stackFrame">Frame de pile.</param>
      <returns>
        <see langword="true" /> si les informations sur la méthode dans laquelle le frame actuel s’exécute sont disponibles ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary>Indique si l’image native est disponible pour le frame de pile spécifié.</summary>
      <param name="stackFrame">Frame de pile.</param>
      <returns>
        <see langword="true" /> si une image native est disponible pour ce frame de pile ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary>Indique si le fichier qui contient le code exécuté par le frame de pile spécifié est disponible.</summary>
      <param name="stackFrame">Frame de pile.</param>
      <returns>
        <see langword="true" /> si le code exécuté par le frame de pile spécifié est disponible ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>Représente une trace de la pile, à savoir une collection ordonnée de frames de pile.</summary>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary>Définit la valeur par défaut pour le nombre de méthodes à omettre dans la trace de la pile. Ce champ est constant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> à partir du frame d'un appelant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> à partir du frame d'un appelant, en capturant éventuellement les informations sur la source.</summary>
      <param name="fNeedFileInfo">
        <see langword="true" /> pour capturer le nom de fichier, le numéro de ligne et le numéro de colonne ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> qui contient un frame unique.</summary>
      <param name="frame">Frame que l'objet <see cref="T:System.Diagnostics.StackTrace" /> doit contenir.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" />, à l'aide de l'objet exception fourni.</summary>
      <param name="e">Objet exception à partir duquel créer la trace de la pile.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="e" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> à l'aide de l'objet exception fourni, en capturant éventuellement les informations sur la source.</summary>
      <param name="e">Objet exception à partir duquel créer la trace de la pile.</param>
      <param name="fNeedFileInfo">
        <see langword="true" /> pour capturer le nom de fichier, le numéro de ligne et le numéro de colonne ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="e" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> à l'aide de l'objet exception fourni et en ignorant le nombre spécifié de frames.</summary>
      <param name="e">Objet exception à partir duquel créer la trace de la pile.</param>
      <param name="skipFrames">Nombre de frames au sommet de la pile à partir de laquelle commencer la trace.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="e" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="skipFrames" /> est négatif.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" />, à l'aide de l'objet exception fourni, en ignorant le nombre spécifié de frames et en capturant éventuellement les informations sur la source.</summary>
      <param name="e">Objet exception à partir duquel créer la trace de la pile.</param>
      <param name="skipFrames">Nombre de frames au sommet de la pile à partir de laquelle commencer la trace.</param>
      <param name="fNeedFileInfo">
        <see langword="true" /> pour capturer le nom de fichier, le numéro de ligne et le numéro de colonne ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="e" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="skipFrames" /> est négatif.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" />, à partir du frame d'un appelant, en ignorant le nombre spécifié de frames.</summary>
      <param name="skipFrames">Nombre de frames au sommet de la pile à partir de laquelle commencer la trace.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="skipFrames" /> est négatif.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> à partir du frame d'un appelant, en ignorant le nombre spécifié de frames et en capturant éventuellement les informations sur la source.</summary>
      <param name="skipFrames">Nombre de frames au sommet de la pile à partir de laquelle commencer la trace.</param>
      <param name="fNeedFileInfo">
        <see langword="true" /> pour capturer le nom de fichier, le numéro de ligne et le numéro de colonne ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="skipFrames" /> est négatif.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary>Obtient le frame de pile spécifié.</summary>
      <param name="index">Index du frame de pile demandé.</param>
      <returns>Frame de pile spécifié.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary>Retourne une copie de tous les frames de pile dans la trace de la pile actuelle.</summary>
      <returns>Tableau de type <see cref="T:System.Diagnostics.StackFrame" /> représentant les appels de fonctions dans la trace de la pile.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>Génère une représentation lisible de la trace de la pile.</summary>
      <returns>Représentation lisible de la trace de la pile.</returns>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary>Obtient le nombre de frames dans la trace de la pile.</summary>
      <returns>Nombre de frames dans l’arborescence des appels de procédure.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary>Représente un binder de symboles pour le code managé.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary>Obtient l'interface du lecteur de symboles pour le fichier actif.</summary>
      <param name="importer">Interface d'importation de métadonnées.</param>
      <param name="filename">Nom du fichier pour lequel l'interface de lecteur est requise.</param>
      <param name="searchPath">Chemin de recherche utilisé pour localiser le fichier de symboles.</param>
      <returns>Interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> qui lit les symboles de débogage.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary>Représente un binder de symboles pour le code managé.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary>Obtient l'interface du lecteur de symboles pour le fichier actif.</summary>
      <param name="importer">
        <see cref="T:System.IntPtr" /> qui fait référence à l'interface d'importation des métadonnées.</param>
      <param name="filename">Nom du fichier pour lequel l'interface de lecteur est requise.</param>
      <param name="searchPath">Chemin de recherche utilisé pour localiser le fichier de symboles.</param>
      <returns>Interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> qui lit les symboles de débogage.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary>Représente un document référencé par un magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary>Retourne la ligne la plus proche constituant un point de séquence, en fonction d'une ligne du document actif qui peut être, ou non, un point de séquence.</summary>
      <param name="line">Ligne spécifiée du document.</param>
      <returns>Ligne la plus proche qui est un point de séquence.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary>Obtient la somme de contrôle.</summary>
      <returns>Somme de contrôle.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Obtient la source incorporée du document pour la plage spécifiée.</summary>
      <param name="startLine">Ligne de début dans le document actif.</param>
      <param name="startColumn">Colonne de début dans le document actif.</param>
      <param name="endLine">Ligne de fin dans le document actif.</param>
      <param name="endColumn">Colonne de fin dans le document actif.</param>
      <returns>Source du document pour la plage spécifiée.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary>Obtient l'identificateur de l'algorithme de somme de contrôle.</summary>
      <returns>GUID identifiant l'algorithme de somme de contrôle. En l'absence de somme de contrôle, la valeur comprend uniquement des zéros.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary>Obtient le type du document actif.</summary>
      <returns>Type du document actif.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary>Vérifie si le document actif est enregistré dans le magasin de symboles.</summary>
      <returns>
        <see langword="true" /> si le document actif est enregistré dans le magasin de symboles ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary>Obtient le langage du document actif.</summary>
      <returns>Langage du document actif.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary>Obtient le fournisseur de langage du document actif.</summary>
      <returns>Fournisseur de langage du document actif.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary>Obtient la longueur, en octets, de la source incorporée.</summary>
      <returns>Longueur de la source du document actif.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary>Obtient l'URL du document actif.</summary>
      <returns>URL du document actif.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary>Représente un document référencé par un magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary>Définit les informations de la somme de contrôle.</summary>
      <param name="algorithmId">GUID représentant l'ID de l'algorithme.</param>
      <param name="checkSum">Somme de contrôle.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary>Enregistre la source brute d'un document dans le magasin de symboles.</summary>
      <param name="source">Source du document représentée par des octets non signés.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary>Représente une méthode dans un magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary>Obtient l'espace de noms dans lequel la méthode actuelle est définie.</summary>
      <returns>Espace de noms dans lequel la méthode actuelle est définie.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Obtient l'offset MSIL (Microsoft Intermediate Language) de la méthode correspondant à la position spécifiée.</summary>
      <param name="document">Document pour lequel l'offset est demandé.</param>
      <param name="line">Ligne du document correspondant à l'offset.</param>
      <param name="column">Colonne du document correspondant à l'offset.</param>
      <returns>Offset dans le document spécifié.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary>Obtient les paramètres de la méthode actuelle.</summary>
      <returns>Tableau de paramètres de la méthode actuelle.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Obtient un tableau de paires d'offsets de début et de fin correspondant aux plages d'offsets MSIL (Microsoft Intermediate Language) couvertes par une position donnée dans cette méthode.</summary>
      <param name="document">Document pour lequel l'offset est demandé.</param>
      <param name="line">Ligne du document correspondant aux plages.</param>
      <param name="column">Colonne du document correspondant aux plages.</param>
      <returns>Tableau de paires d'offsets de début et de fin.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary>Retourne la portée lexicale la plus englobante lorsqu'un offset est spécifié dans une méthode.</summary>
      <param name="offset">Offset d'octet dans la méthode de la portée lexicale.</param>
      <returns>Portée lexicale la plus englobante pour l'offset d'octet donné dans la méthode.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>Obtient les points de séquence de la méthode actuelle.</summary>
      <param name="offsets">Tableau d'offsets d'octets pour les points de séquence, à compter du début de la méthode.</param>
      <param name="documents">Tableau de documents dans lesquels se trouvent les points de séquence.</param>
      <param name="lines">Tableau des lignes des documents auxquelles figurent les points de séquence.</param>
      <param name="columns">Tableau des colonnes des documents auxquelles figurent les points de séquence.</param>
      <param name="endLines">Tableau des lignes des documents auxquelles se terminent les points de séquence.</param>
      <param name="endColumns">Tableau des colonnes des documents auxquelles se terminent les points de séquence.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary>Obtient les positions de début et de fin de la source de la méthode actuelle.</summary>
      <param name="docs">Documents sources de début et de fin.</param>
      <param name="lines">Lignes de début et de fin dans les documents sources correspondants.</param>
      <param name="columns">Colonnes de début et de fin dans les documents sources correspondants.</param>
      <returns>
        <see langword="true" /> si les positions ont été définies ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary>Obtient la portée lexicale racine de la méthode actuelle. Cette portée englobe la totalité de la méthode.</summary>
      <returns>Portée lexicale racine englobant la totalité de la méthode.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary>Obtient le nombre de points de séquence dans la méthode.</summary>
      <returns>Nombre de points de séquence dans la méthode.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary>Obtient le <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> contenant les métadonnées de la méthode actuelle.</summary>
      <returns>Jeton de métadonnées de la méthode actuelle.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary>Représente un espace de noms dans un magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary>Obtient les membres enfants de l'espace de noms en cours.</summary>
      <returns>Membres enfants de l'espace de noms en cours.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary>Obtient toutes les variables définies avec une portée globale dans l'espace de noms en cours.</summary>
      <returns>Variables définies avec une portée globale dans l'espace de noms en cours.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary>Obtient l'espace de noms en cours.</summary>
      <returns>Espace de noms actuel.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary>Représente un lecteur de symboles pour le code managé.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Obtient un document spécifié par la langue, le fournisseur et le type.</summary>
      <param name="url">URL identifiant le document.</param>
      <param name="language">Langage du document. Ce paramètre peut avoir la valeur <see cref="F:System.Guid.Empty" /></param>
      <param name="languageVendor">Identité du fournisseur pour le langage du document. Ce paramètre peut avoir la valeur <see cref="F:System.Guid.Empty" /></param>
      <param name="documentType">Type du document. Ce paramètre peut avoir la valeur <see cref="F:System.Guid.Empty" /></param>
      <returns>Document spécifié.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary>Obtient un tableau de tous les documents définis dans le magasin de symboles.</summary>
      <returns>Tableau de tous les documents définis dans le magasin de symboles.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary>Obtient toutes les variables globales du module.</summary>
      <returns>Tableau de l'ensemble des variables du module.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Obtient un objet de méthode de lecteur de symboles lorsque l'identificateur d'une méthode est fourni.</summary>
      <param name="method">Jeton de métadonnées de la méthode.</param>
      <returns>Objet de méthode de lecteur de symboles pour l'identificateur de méthode spécifié.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary>Obtient un objet de méthode de lecteur de symboles lorsque l'identificateur et la version Modifier &amp;amp; Continuer d'une méthode sont fournis.</summary>
      <param name="method">Jeton de métadonnées de la méthode.</param>
      <param name="version">Version Modifier &amp; Continuer de la méthode.</param>
      <returns>Objet de méthode de lecteur de symboles pour l'identificateur de méthode spécifié.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Obtient un objet de méthode de lecteur de symboles contenant une position spécifiée dans un document.</summary>
      <param name="document">Document dans lequel se trouve la méthode.</param>
      <param name="line">Position de la ligne dans le document. Les lignes sont numérotées, en commençant à 1.</param>
      <param name="column">Position de la colonne dans le document. Les colonnes sont numérotées, en commençant à 1.</param>
      <returns>Objet méthode de lecteur pour la position spécifiée dans le document.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary>Obtient les espaces de noms définis dans la portée globale dans le magasin de symboles en cours.</summary>
      <returns>Espaces de noms définis dans la portée globale dans le magasin de symboles en cours.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary>Obtient la valeur d'un attribut dont le nom est fourni.</summary>
      <param name="parent">Jeton de métadonnées de l'objet pour lequel l'attribut est demandé.</param>
      <param name="name">Nom de l'attribut.</param>
      <returns>Valeur de l'attribut.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Obtient les variables qui ne sont pas locales lorsque le parent est spécifié.</summary>
      <param name="parent">Jeton de métadonnées du type pour lequel les variables sont demandées.</param>
      <returns>Tableau de variables pour le parent.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary>Obtient le jeton de métadonnées de la méthode spécifiée en tant que point d'entrée utilisateur pour le module, le cas échéant.</summary>
      <returns>Jeton de métadonnées de la méthode représentant le point d'entrée utilisateur pour le module.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary>Représente une portée lexicale dans <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" /> qui donne accès aux offsets de début et de fin de la portée, ainsi qu'à ses portées enfants et parents.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary>Obtient les portées lexicales enfants de la portée actuelle.</summary>
      <returns>Portées lexicales enfants de la portée actuelle.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary>Obtient les variables locales de la portée lexicale actuelle.</summary>
      <returns>Variables locales de la portée lexicale actuelle.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary>Obtient les espaces de noms utilisés dans la portée actuelle.</summary>
      <returns>Espaces de noms utilisés dans la portée actuelle.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary>Obtient l'offset de fin de la portée lexicale actuelle.</summary>
      <returns>Offset de fin de la portée lexicale en cours.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary>Obtient la méthode contenant la portée lexicale actuelle.</summary>
      <returns>Méthode contenant la portée lexicale actuelle.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary>Obtient la portée lexicale parente de la portée actuelle.</summary>
      <returns>Portée lexicale parente de la portée actuelle.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary>Obtient l'offset de début de la portée lexicale actuelle.</summary>
      <returns>Offset de début de la portée lexicale en cours.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary>Représente une variable dans un magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary>Obtient la signature de la variable.</summary>
      <returns>Signature de la variable sous forme d'un objet blob opaque.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary>Obtient la première adresse d'une variable.</summary>
      <returns>Première adresse de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary>Obtient la deuxième adresse d'une variable.</summary>
      <returns>Deuxième adresse de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary>Obtient la troisième adresse d'une variable.</summary>
      <returns>Troisième adresse de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary>Obtient la valeur <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> décrivant le type de l'adresse.</summary>
      <returns>Type de l'adresse. Une des valeurs de l'objet <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary>Obtient les attributs de la variable.</summary>
      <returns>Attributs de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary>Obtient l'offset de fin d'une variable dans la portée de cette dernière.</summary>
      <returns>Offset de fin de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary>Obtient le nom de la variable.</summary>
      <returns>Nom de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary>Obtient l'offset de début d'une variable dans la portée de cette dernière.</summary>
      <returns>Offset de début de la variable.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary>Représente un writer de symbole pour le code managé.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary>Ferme <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> et valide les symboles dans le magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary>Ferme la méthode actuelle.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary>Ferme l'espace de noms le plus récent.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary>Ferme la portée lexicale actuelle.</summary>
      <param name="endOffset">Points figurant au-delà de la dernière instruction dans la portée.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Définit un document source.</summary>
      <param name="url">URL identifiant le document.</param>
      <param name="language">Langage du document. Ce paramètre peut être <see cref="F:System.Guid.Empty" />.</param>
      <param name="languageVendor">Identité du fournisseur pour le langage du document. Ce paramètre peut être <see cref="F:System.Guid.Empty" />.</param>
      <param name="documentType">Type du document. Ce paramètre peut être <see cref="F:System.Guid.Empty" />.</param>
      <returns>Objet qui représente le document.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Définit un champ dans un type ou un champ global.</summary>
      <param name="parent">Type de métadonnées ou jeton de méthode.</param>
      <param name="name">Nom du champ.</param>
      <param name="attributes">Combinaison d'opérations de bits des attributs d'un champ.</param>
      <param name="signature">Signature du champ.</param>
      <param name="addrKind">Types d'adresses de <paramref name="addr1" /> et <paramref name="addr2" />.</param>
      <param name="addr1">Première adresse de la spécification de champ.</param>
      <param name="addr2">Seconde adresse de la spécification de champ.</param>
      <param name="addr3">Troisième adresse de la spécification de champ.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Définit une variable globale unique.</summary>
      <param name="name">Nom de la variable globale.</param>
      <param name="attributes">Combinaison d'opérations de bits des attributs de variable globale.</param>
      <param name="signature">Signature de la variable globale.</param>
      <param name="addrKind">Types d'adresses de <paramref name="addr1" />, <paramref name="addr2" /> et <paramref name="addr3" />.</param>
      <param name="addr1">Première adresse de la spécification de variable globale.</param>
      <param name="addr2">Seconde adresse de la spécification de variable globale.</param>
      <param name="addr3">Troisième adresse de la spécification de variable globale.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Définit une variable unique dans la portée lexicale actuelle.</summary>
      <param name="name">Nom de la variable locale.</param>
      <param name="attributes">Combinaison d'opérations de bits des attributs de variable locale.</param>
      <param name="signature">Signature de la variable locale.</param>
      <param name="addrKind">Types d'adresses de <paramref name="addr1" />, <paramref name="addr2" /> et <paramref name="addr3" />.</param>
      <param name="addr1">Première adresse de la spécification de variable locale.</param>
      <param name="addr2">Deuxième adresse de la spécification de variable locale.</param>
      <param name="addr3">Troisième adresse de la spécification de variable locale.</param>
      <param name="startOffset">Offset de début de la variable. Si la valeur de ce paramètre est de zéro, il est ignoré et la variable est définie dans l'ensemble de la portée. Si la valeur de ce paramètre est différente de zéro, la variable est comprise entre les offsets de la portée actuelle.</param>
      <param name="endOffset">Offset de fin de la variable. Si la valeur de ce paramètre est de zéro, il est ignoré et la variable est définie dans l'ensemble de la portée. Si la valeur de ce paramètre est différente de zéro, la variable est comprise entre les offsets de la portée actuelle.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Définit un paramètre unique dans la méthode en cours. Le type de chaque paramètre est obtenu à partir de sa position dans la signature de la méthode.</summary>
      <param name="name">Nom du paramètre.</param>
      <param name="attributes">Combinaison d'opérations de bits des attributs de paramètre.</param>
      <param name="sequence">Signature du paramètre.</param>
      <param name="addrKind">Types d'adresses de <paramref name="addr1" />, <paramref name="addr2" /> et <paramref name="addr3" />.</param>
      <param name="addr1">Première adresse de la spécification de paramètre.</param>
      <param name="addr2">Seconde adresse de la spécification de paramètre.</param>
      <param name="addr3">Troisième adresse de la spécification de paramètre.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>Définit un groupe de points de séquence dans la méthode actuelle.</summary>
      <param name="document">Objet de document pour lequel sont définis les points de séquence.</param>
      <param name="offsets">Offsets de points de séquence, mesurés à partir du début des méthodes.</param>
      <param name="lines">Lignes du document pour les points de séquence.</param>
      <param name="columns">Positions du document pour les points de séquence.</param>
      <param name="endLines">Lignes de fin du document pour les points de séquence.</param>
      <param name="endColumns">Positions de fin du document pour les points de séquence.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary>Définit l'interface d'émetteur de métadonnées à associer à un writer.</summary>
      <param name="emitter">Interface d'émetteur de métadonnées.</param>
      <param name="filename">Nom de fichier pour lequel sont écrits les symboles de débogage. Certains writers requièrent un nom de fichier et d'autres non. Si vous spécifiez un nom de fichier pour un writer qui n'utilise pas les noms de fichiers, ce paramètre est ignoré.</param>
      <param name="fFullBuild">
        <see langword="true" /> indique qu'il s'agit d'une régénération complète ; <see langword="false" /> indique qu'il s'agit d'une compilation incrémentielle.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Ouvre une méthode pour y placer des informations de symboles.</summary>
      <param name="method">Jeton de métadonnées de la méthode à ouvrir.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary>Ouvre un nouvel espace de noms.</summary>
      <param name="name">Nom du nouvel espace de noms.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary>Ouvre une nouvelle portée lexicale dans la méthode actuelle.</summary>
      <param name="startOffset">Offset, en octets, du début de la méthode à la première instruction dans la portée lexicale.</param>
      <returns>Identificateur de portée opaque pouvant être utilisé avec <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /> pour définir ultérieurement les offsets de début et de fin d'une portée. Dans ce cas, les offsets passés à <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> et <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /> sont ignorés. Un identificateur de portée est valide uniquement dans la méthode actuelle.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary>Spécifie les véritables début et fin d'une méthode dans un fichier source. Utilisez <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /> pour spécifier l'étendue d'une méthode, indépendamment des points de séquence existant dans la méthode.</summary>
      <param name="startDoc">Document qui contient la position de départ.</param>
      <param name="startLine">Numéro de ligne de départ.</param>
      <param name="startColumn">Colonne de départ.</param>
      <param name="endDoc">Document qui contient la position de fin.</param>
      <param name="endLine">Numéro de ligne de fin.</param>
      <param name="endColumn">Numéro de colonne de fin.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary>Définit la plage d'offsets pour la portée lexicale spécifiée.</summary>
      <param name="scopeID">Identificateur de la portée lexicale.</param>
      <param name="startOffset">Offset d'octets du début de la portée lexicale.</param>
      <param name="endOffset">Offset d'octets de la fin de la portée lexicale.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary>Définit un attribut lorsque son nom et sa valeur sont fournis.</summary>
      <param name="parent">Jeton de métadonnées pour lequel est défini l'attribut.</param>
      <param name="name">Nom de l'attribut.</param>
      <param name="data">Valeur de l'attribut</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary>Définit le <see langword="ISymUnmanagedWriter" /> sous-jacent (l'interface non managée correspondante) utilisé par un <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> managé pour émettre des symboles.</summary>
      <param name="underlyingWriter">Pointeur vers du code qui représente le writer sous-jacent.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Identifie la méthode définie par l'utilisateur comme point d'entrée du module actuel.</summary>
      <param name="entryMethod">Jeton de métadonnées pour la méthode correspondant au point d'entrée utilisateur.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary>Spécifie que le nom d'espace de noms complet donné est utilisé dans la portée lexicale ouverte.</summary>
      <param name="fullName">Nom complet de l'espace de noms.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary>Spécifie le type d'adresse des variables locales, des paramètres et des champs dans les méthodes <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />, <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> et <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> de l'interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary>Champ de bits. Le paramètre <paramref name="addr1" /> correspond à la position de départ du champ et le paramètre <paramref name="addr2" /> à la longueur de champ.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary>Offset MSIL (Microsoft Intermediate Language). Le paramètre <paramref name="addr1" /> correspond à la variable locale MSIL ou à l'index de paramètre.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary>Offset natif. Le paramètre <paramref name="addr1" /> correspond à l'offset à partir du début du parent.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary>Adresse native de Registre. Le paramètre <paramref name="addr1" /> représente le Registre dans lequel la variable est enregistrée.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary>Adresse relative au Registre. Le paramètre <paramref name="addr1" /> représente le Registre de poids faible et le paramètre <paramref name="addr2" /> le Registre de poids fort.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary>Adresse relative au Registre. Le paramètre <paramref name="addr1" /> représente le Registre et le paramètre <paramref name="addr2" /> l'offset.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary>Adresse relative au Registre. Le paramètre <paramref name="addr1" /> représente le Registre de poids faible, le paramètre <paramref name="addr2" /> le Registre de pile et le paramètre <paramref name="addr3" /> l'offset du pointeur de pile vers la partie de poids fort de la valeur.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary>Adresse RVA (Relevant Virtual Address) native. Le paramètre <paramref name="addr1" /> représente l'adresse RVA dans le module.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary>Offset de section natif. Le paramètre <paramref name="addr1" /> correspond à la section et le paramètre <paramref name="addr2" /> à l'offset.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary>Adresse relative au Registre. Le paramètre <paramref name="addr1" /> représente le Registre de pile, le paramètre <paramref name="addr2" /> l'offset du pointeur de pile vers la partie de poids faible de la valeur et le paramètre <paramref name="addr3" /> le Registre de poids fort.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary>La structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> est une représentation objet d'un jeton qui représente une information symbolique.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> lorsqu'une valeur est fournie.</summary>
      <param name="val">Valeur à utiliser pour le jeton.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Détermine si <paramref name="obj" /> est égal à cette instance.</summary>
      <param name="obj">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> à vérifier.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> est égal à cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary>Détermine si <paramref name="obj" /> est une instance de <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> et s'il est égal à cette instance.</summary>
      <param name="obj">Objet à vérifier.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> est une instance de <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> et s'il est égal à cette instance ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary>Génère le code de hachage pour le jeton en cours.</summary>
      <returns>Code de hachage du jeton en cours.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary>Obtient la valeur du jeton en cours.</summary>
      <returns>Valeur du jeton en cours.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Retourne une valeur indiquant si deux objets <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> sont égaux.</summary>
      <param name="a">Structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <param name="b">Structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="a" /> et <paramref name="b" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Retourne une valeur indiquant si deux objets <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> sont égaux.</summary>
      <param name="a">Structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <param name="b">Structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="a" /> et <paramref name="b" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary>Contient les GUID publics des types de documents à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary>Spécifie le GUID du type de document à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" />.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary>Contient les GUID publics des types de langages à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary>Spécifie le GUID du type de langage Basic à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary>Spécifie le GUID du type de langage C à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary>Spécifie le GUID du type de langage Cobol à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary>Spécifie le GUID du type de langage C++ à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary>Spécifie le GUID du type de langage C# à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary>Spécifie le GUID du type de langage ILAssembly à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary>Spécifie le GUID du type de langage Java à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary>Spécifie le GUID du type de langage JScript à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary>Spécifie le GUID du type de langage C++ à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary>Spécifie le GUID du type de langage Pascal à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary>Spécifie le GUID du type de langage SMC à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" />.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary>Contient les GUID publics des fournisseurs de langage à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary>Spécifie le GUID du fournisseur de langage Microsoft.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" />.</summary>
    </member>
  </members>
</doc>
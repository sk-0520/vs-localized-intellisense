<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections</name>
  </assembly>
  <members>
    <member name="T:System.Collections.BitArray">
      <summary vsli:raw="Manages a compact array of bit values, which are represented as Booleans, where &lt;see langword=&quot;true&quot; /&gt; indicates that the bit is on (1) and &lt;see langword=&quot;false&quot; /&gt; indicates the bit is off (0).">Gère un tableau compact de valeurs de bit représentées par des valeurs booléennes, où <see langword="true" /> indique que le bit est activé (1) et <see langword="false" /> que le bit est désactivé (0).</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of Booleans.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.BitArray" /> qui contient des valeurs de bit copiées à partir du tableau de valeurs booléennes spécifié.</summary>
      <param name="values" vsli:raw="An array of Booleans to copy.">Tableau de valeurs booléennes à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="values" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of bytes.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.BitArray" /> qui contient des valeurs de bit copiées à partir du tableau d'octets spécifié.</summary>
      <param name="bytes" vsli:raw="An array of bytes containing the values to copy, where each byte represents eight consecutive bits.">Tableau d’octets contenant les valeurs à copier, dans lequel chaque octet représente huit bits consécutifs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bytes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bytes" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;bytes&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La longueur de <paramref name="bytes" /> est supérieure à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.BitArray" /> qui contient des valeurs de bit copiées à partir du <see cref="T:System.Collections.BitArray" /> spécifié.</summary>
      <param name="bits" vsli:raw="The &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to copy.">
        <see cref="T:System.Collections.BitArray" /> à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bits&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bits" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that can hold the specified number of bit values, which are initially set to &lt;see langword=&quot;false&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.BitArray" /> qui peut contenir le nombre spécifié de valeurs de bit, dont la valeur initiale est <see langword="false" />.</summary>
      <param name="length" vsli:raw="The number of bit values in the new &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Nombre de valeurs de bit dans le nouveau <see cref="T:System.Collections.BitArray" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="length" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that can hold the specified number of bit values, which are initially set to the specified value.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.BitArray" /> qui peut contenir le nombre spécifié de valeurs de bit auxquelles la valeur spécifiée est affectée initialement.</summary>
      <param name="length" vsli:raw="The number of bit values in the new &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Nombre de valeurs de bit dans le nouveau <see cref="T:System.Collections.BitArray" />.</param>
      <param name="defaultValue" vsli:raw="The Boolean value to assign to each bit.">Valeur booléenne à affecter à chaque bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="length" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of 32-bit integers.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.BitArray" /> qui contient des valeurs de bits copiées à partir du tableau spécifié d’entiers 32 bits.</summary>
      <param name="values" vsli:raw="An array of integers containing the values to copy, where each integer represents 32 consecutive bits.">Tableau d’entiers contenant les valeurs à copier, où chaque entier représente 32 bits consécutifs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="values" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;values&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">La longueur de <paramref name="values" /> est supérieure à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise AND operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object and the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise AND operation.">Exécute l’opération AND au niveau du bit entre les éléments de l’objet <see cref="T:System.Collections.BitArray" /> actuel et les éléments correspondants dans le tableau spécifié. L’objet <see cref="T:System.Collections.BitArray" /> actuel est modifié pour stocker le résultat de l’opération AND au niveau du bit.</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise AND operation.">Tableau utilisé pour exécuter l’opération AND au niveau du bit.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" /> et le <see cref="T:System.Collections.BitArray" /> actuel n’ont pas le même nombre d’éléments.</exception>
      <returns vsli:raw="An array containing the result of the bitwise AND operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">Tableau qui contient le résultat de l’opération AND au niveau du bit, qui est une référence à l’objet <see cref="T:System.Collections.BitArray" /> actuel.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary vsli:raw="Creates a shallow copy of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Crée une copie superficielle de <see cref="T:System.Collections.BitArray" />.</summary>
      <returns vsli:raw="A shallow copy of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Copie superficielle de <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">Copie l'ensemble de l'objet <see cref="T:System.Collections.BitArray" /> vers un objet <see cref="T:System.Array" /> unidimensionnel compatible, en commençant à l'index spécifié du tableau cible.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.BitArray" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.BitArray" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The type of the source &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le type du <see cref="T:System.Collections.BitArray" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary vsli:raw="Gets the value of the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Obtient la valeur du bit à une position spécifique dans le <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the value to get.">Index de base zéro de la valeur à obtenir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal au nombre d'éléments dans le <see cref="T:System.Collections.BitArray" />.</exception>
      <returns vsli:raw="The value of the bit at position &lt;paramref name=&quot;index&quot; /&gt;.">Valeur du bit à la position <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.BitArray" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the entire &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> pour l’intégralité de <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.LeftShift(System.Int32)">
      <summary vsli:raw="Shifts all the bit values of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the left on &lt;paramref name=&quot;count&quot; /&gt; bits.">Déplace toutes les valeurs de bits du <see cref="T:System.Collections.BitArray" /> actuel vers la gauche sur <paramref name="count" /> bits.</summary>
      <param name="count" vsli:raw="The number of shifts to make for each bit.">Nombre de décalages à effectuer pour chaque bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="count" /> est inférieur à zéro.</exception>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> actuel.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary vsli:raw="Inverts all the bit values in the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;, so that elements set to &lt;see langword=&quot;true&quot; /&gt; are changed to &lt;see langword=&quot;false&quot; /&gt;, and elements set to &lt;see langword=&quot;false&quot; /&gt; are changed to &lt;see langword=&quot;true&quot; /&gt;.">Inverse toutes les valeurs de bits dans le <see cref="T:System.Collections.BitArray" /> en cours, de sorte que les éléments ayant la valeur <see langword="true" /> prennent la valeur <see langword="false" /> et que les éléments ayant la valeur <see langword="false" /> prennent la valeur <see langword="true" />.</summary>
      <returns vsli:raw="The current instance with inverted bit values.">L'instance actuelle comportant des valeurs de bit inversées.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise OR operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object and the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise OR operation.">Exécute l’opération OR au niveau du bit entre les éléments de l’objet <see cref="T:System.Collections.BitArray" /> actif et les éléments correspondants dans le tableau spécifié. L’objet <see cref="T:System.Collections.BitArray" /> actif est modifié pour stocker le résultat de l’opération OR au niveau du bit.</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise OR operation.">Tableau utilisé pour exécuter l’opération OR au niveau du bit.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" /> et le <see cref="T:System.Collections.BitArray" /> actuel n’ont pas le même nombre d’éléments.</exception>
      <returns vsli:raw="An array containing the result of the bitwise OR operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">Tableau qui contient le résultat de l’opération OR au niveau du bit, qui est une référence à l’objet <see cref="T:System.Collections.BitArray" /> actif.</returns>
    </member>
    <member name="M:System.Collections.BitArray.RightShift(System.Int32)">
      <summary vsli:raw="Shifts all the bit values of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the right on &lt;paramref name=&quot;count&quot; /&gt; bits.">Déplace toutes les valeurs de bits du <see cref="T:System.Collections.BitArray" /> actuel vers la droite sur <paramref name="count" /> bits.</summary>
      <param name="count" vsli:raw="The number of shifts to make for each bit.">Nombre de décalages à effectuer pour chaque bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="count" /> est inférieur à zéro.</exception>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> actuel.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary vsli:raw="Sets the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the specified value.">Affecte la valeur spécifiée au bit à une position spécifique dans le <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the bit to set.">Index de base zéro du bit à définir.</param>
      <param name="value" vsli:raw="The Boolean value to assign to the bit.">Valeur Boolean à assigner au bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal au nombre d’éléments dans le <see cref="T:System.Collections.BitArray" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary vsli:raw="Sets all bits in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the specified value.">Affecte la valeur spécifiée à tous les bits de <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="value" vsli:raw="The Boolean value to assign to all bits.">Valeur Boolean à assigner à tous les bits.</param>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise exclusive OR operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object against the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise exclusive OR operation.">Exécute l’opération OR exclusive au niveau du bit entre les éléments de l’objet <see cref="T:System.Collections.BitArray" /> actif par rapport aux éléments correspondants dans le tableau spécifié. L’objet <see cref="T:System.Collections.BitArray" /> actif est modifié pour stocker le résultat de l’opération OR exclusive au niveau du bit.</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise exclusive OR operation.">Tableau utilisé pour exécuter l’opération OR exclusive au niveau du bit.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" /> et le <see cref="T:System.Collections.BitArray" /> actuel n’ont pas le même nombre d’éléments.</exception>
      <returns vsli:raw="An array containing the result of the bitwise exclusive OR operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">Tableau qui contient le résultat de l’opération OR exclusive au niveau du bit, qui est une référence à l’objet <see cref="T:System.Collections.BitArray" /> actif.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Obtient le nombre d’éléments contenus dans le <see cref="T:System.Collections.BitArray" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Nombre d'éléments contenus dans <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.BitArray" /> est en lecture seule.</summary>
      <returns vsli:raw="This property is always &lt;see langword=&quot;false&quot; /&gt;.">Cette propriété a toujours la valeur <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à <see cref="T:System.Collections.BitArray" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="This property is always &lt;see langword=&quot;false&quot; /&gt;.">Cette propriété a toujours la valeur <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value of the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Obtient ou définit la valeur du bit à une position spécifique dans le <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the value to get or set.">Index de base zéro de la valeur à obtenir ou définir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.BitArray.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à <see cref="P:System.Collections.BitArray.Count" />.</exception>
      <returns vsli:raw="The value of the bit at position &lt;paramref name=&quot;index&quot; /&gt;.">Valeur du bit à la position <paramref name="index" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary vsli:raw="Gets or sets the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Obtient ou définit le nombre d’éléments du <see cref="T:System.Collections.BitArray" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is set to a value that is less than zero.">La valeur affectée à la propriété est inférieure à 0.</exception>
      <returns vsli:raw="The number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Nombre d'éléments dans <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.BitArray" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.CollectionExtensions">
      <summary vsli:raw="Provides extension methods for generic collections.">Fournit les méthodes d’extension pour les collections génériques.</summary>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
      <summary vsli:raw="Tries to get the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt; in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Tente d’obtenir la valeur associée à la <paramref name="key" /> spécifiée dans le <paramref name="dictionary" />.</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Dictionnaire avec des clés de type <typeparamref name="TKey" /> et des valeurs de type <typeparamref name="TValue" />.</param>
      <param name="key" vsli:raw="The key of the value to get.">Clé de la valeur à obtenir.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; instance. When the method is successful, the returned object is the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;. When the method fails, it returns the &lt;see langword=&quot;default&quot; /&gt; value for &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Instance de <typeparamref name="TValue" />. Lorsque la méthode réussit, l’objet retourné est la valeur associée à la <paramref name="key" />spécifiée. Lorsque la méthode échoue, elle retourne la valeur <see langword="default" /> pour <typeparamref name="TValue" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Tries to get the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt; in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Tente d’obtenir la valeur associée à la clé spécifiée dans le <paramref name="dictionary" />.</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Dictionnaire avec des clés de type <typeparamref name="TKey" /> et des valeurs de type <typeparamref name="TValue" />.</param>
      <param name="key" vsli:raw="The key of the value to get.">Clé de la valeur à obtenir.</param>
      <param name="defaultValue" vsli:raw="The default value to return when the &lt;paramref name=&quot;dictionary&quot; /&gt; cannot find a value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;.">Valeur par défaut à retourner lorsque le <paramref name="dictionary" /> n’arrive pas à trouver de valeur associée à la <paramref name="key" />spécifiée.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; instance. When the method is successful, the returned object is the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;. When the method fails, it returns &lt;paramref name=&quot;defaultValue&quot; /&gt;.">Instance de <typeparamref name="TValue" />. Lorsque la méthode réussit, l’objet retourné est la valeur associée à la <paramref name="key" />spécifiée. Lorsque la méthode échoue, elle retourne <paramref name="defaultValue" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
      <summary vsli:raw="Tries to remove the value with the specified &lt;paramref name=&quot;key&quot; /&gt; from the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Tente de supprime la valeur ayant la <paramref name="key" /> spécifiée du <paramref name="dictionary" />.</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Dictionnaire avec des clés de type <typeparamref name="TKey" /> et des valeurs de type <typeparamref name="TValue" />.</param>
      <param name="key" vsli:raw="The key of the value to remove.">Clé de la valeur à supprimer.</param>
      <param name="value" vsli:raw="When this method returns &lt;see langword=&quot;true&quot; /&gt;, the removed value; when this method returns &lt;see langword=&quot;false&quot; /&gt;, the &lt;see langword=&quot;default&quot; /&gt; value for &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Quand cette méthode retourne <see langword="true" />, la valeur est supprimée ; quand cette méthode retourne <see langword="false" />, la valeur <see langword="default" /> est pour <typeparamref name="TValue" />.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Type des clés contenues dans <paramref name="dictionary" />.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Type des valeurs de <paramref name="dictionary" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; when a value is found in the &lt;paramref name=&quot;dictionary&quot; /&gt; with the specified &lt;paramref name=&quot;key&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; when the &lt;paramref name=&quot;dictionary&quot; /&gt; cannot find a value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;.">
        <see langword="true" /> quand une valeur est trouvée dans le <paramref name="dictionary" /> avec la <paramref name="key" />spécifiée ; <see langword="false" /> quand le <paramref name="dictionary" /> n’arrive pas à trouver de valeur associée à la <paramref name="key" />spécifiée.</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Tries to add the specified &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; to the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Tente d’ajouter la <paramref name="key" /> spécifiée et <paramref name="value" /> dans le <paramref name="dictionary" />.</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Dictionnaire avec des clés de type <typeparamref name="TKey" /> et des valeurs de type <typeparamref name="TValue" />.</param>
      <param name="key" vsli:raw="The key of the value to add.">Clé de la valeur à ajouter.</param>
      <param name="value" vsli:raw="The value to add.">Valeur à ajouter.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; when the &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are successfully added to the &lt;paramref name=&quot;dictionary&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; when the &lt;paramref name=&quot;dictionary&quot; /&gt; already contains the specified &lt;paramref name=&quot;key&quot; /&gt;, in which case nothing gets added.">
        <see langword="true" /> quand la <paramref name="key" /> et <paramref name="value" /> sont correctement ajoutés au <paramref name="dictionary" /> ; <see langword="false" /> quand le <paramref name="dictionary" /> contient déjà la <paramref name="key" />spécifiée, auquel cas rien n’est ajouté.</returns>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary vsli:raw="Provides a base class for implementations of the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; generic interface.">Fournit une classe de base pour les implémentations de l'interface générique <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
      <typeparam name="T" vsli:raw="The type of objects to compare.">Type des objets à comparer.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Comparer`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary vsli:raw="When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.">En cas de substitution dans une classe dérivée, effectue une comparaison de deux objets du même type et retourne une valeur indiquant si l'un est inférieur, égal ou supérieur à l'autre.</summary>
      <param name="x" vsli:raw="The first object to compare.">Premier objet à comparer.</param>
      <param name="y" vsli:raw="The second object to compare.">Deuxième objet à comparer.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Type &lt;paramref name=&quot;T&quot; /&gt; does not implement either the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface.">Le type <paramref name="T" /> n'implémente pas l'interface générique <see cref="T:System.IComparable`1" /> ni l'interface <see cref="T:System.IComparable" />.</exception>
      <returns vsli:raw="A signed integer that indicates the relative values of &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is less than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; equals &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is greater than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Entier signé qui indique les valeurs relatives de <paramref name="x" /> et <paramref name="y" />, comme indiqué dans le tableau suivant.  
  
 <list type="table"><listheader><term> Value</term><description> Signification</description></listheader><item><term> Inférieure à zéro</term><description><paramref name="x" /> est inférieur à <paramref name="y" />.</description></item><item><term> Zéro</term><description><paramref name="x" /> est égal à <paramref name="y" />.</description></item><item><term> Supérieure à zéro</term><description><paramref name="x" /> est supérieur à <paramref name="y" />.</description></item></list></returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})">
      <summary vsli:raw="Creates a comparer by using the specified comparison.">Crée un comparateur à partir d'une comparaison spécifiée.</summary>
      <param name="comparison" vsli:raw="The comparison to use.">La comparaison à utiliser.</param>
      <returns vsli:raw="The new comparer.">Nouveau comparateur.</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary vsli:raw="Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.">Compare deux objets et retourne une valeur indiquant si le premier est inférieur, égal ou supérieur au second.</summary>
      <param name="x" vsli:raw="The first object to compare.">Premier objet à comparer.</param>
      <param name="y" vsli:raw="The second object to compare.">Deuxième objet à comparer.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;x&quot; /&gt; or &lt;paramref name=&quot;y&quot; /&gt; is of a type that cannot be cast to type &lt;paramref name=&quot;T&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; do not implement either the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface.">
        <paramref name="x" /> ou <paramref name="y" /> est d'un type qui ne peut pas être casté en type <paramref name="T" />.  
  
- ou - 
 <paramref name="x" /> et <paramref name="y" /> n'implémentent pas l'interface générique <see cref="T:System.IComparable`1" /> ni l'interface <see cref="T:System.IComparable" />.</exception>
      <returns vsli:raw="A signed integer that indicates the relative values of &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is less than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; equals &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is greater than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Entier signé qui indique les valeurs relatives de <paramref name="x" /> et <paramref name="y" />, comme indiqué dans le tableau suivant.  
  
 <list type="table"><listheader><term> Value</term><description> Signification</description></listheader><item><term> Inférieure à zéro</term><description><paramref name="x" /> est inférieur à <paramref name="y" />.</description></item><item><term> Zéro</term><description><paramref name="x" /> est égal à <paramref name="y" />.</description></item><item><term> Supérieure à zéro</term><description><paramref name="x" /> est supérieur à <paramref name="y" />.</description></item></list></returns>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary vsli:raw="Returns a default sort order comparer for the type specified by the generic argument.">Retourne un comparateur d'ordre de tri par défaut pour le type spécifié par l'argument générique.</summary>
      <returns vsli:raw="An object that inherits &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; and serves as a sort order comparer for type &lt;paramref name=&quot;T&quot; /&gt;.">Objet qui hérite de <see cref="T:System.Collections.Generic.Comparer`1" /> et sert de comparateur d'ordre de tri pour le type <paramref name="T" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary vsli:raw="Represents a collection of keys and values.">Représente une collection de clés et de valeurs.</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Dictionary`2" /> qui est vide, possède la capacité initiale par défaut et utilise le comparateur d'égalité par défaut pour le type de clé.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the default equality comparer for the key type.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des éléments copiés à partir du <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié et utilise le comparateur d'égalité par défaut pour le type de clé.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contient une ou plusieurs clés en double.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des éléments copiés à partir du <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié et utilise le <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">Implémentation de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> à utiliser pendant la comparaison de clés, ou <see langword="null" /> pour utiliser le <see cref="T:System.Collections.Generic.EqualityComparer`1" /> par défaut pour le type de la clé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contient une ou plusieurs clés en double.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des éléments copiés à partir du <see cref="T:System.Collections.Generic.IEnumerable`1" /> spécifié.</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;  whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicated keys.">
        <paramref name="collection" /> contient une ou plusieurs clés en double.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des éléments copiés de <see cref="T:System.Collections.Generic.IEnumerable`1" /> et utilise le <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié.</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">Implémentation de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> à utiliser pendant la comparaison de clés, ou <see langword="null" /> pour utiliser le <see cref="T:System.Collections.Generic.EqualityComparer`1" /> par défaut pour le type de la clé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicated keys.">
        <paramref name="collection" /> contient une ou plusieurs clés en double.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Dictionary`2" /> qui est vide, possède la capacité initiale par défaut et utilise le <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">Implémentation de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> à utiliser pendant la comparaison de clés, ou <see langword="null" /> pour utiliser le <see cref="T:System.Collections.Generic.EqualityComparer`1" /> par défaut pour le type de la clé.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Dictionary`2" /> qui est vide, possède la capacité initiale spécifiée et utilise le comparateur d'égalité par défaut pour le type de clé.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; can contain.">Nombre initial d'éléments que <see cref="T:System.Collections.Generic.Dictionary`2" /> peut contenir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Dictionary`2" /> qui est vide, possède la capacité initiale spécifiée et utilise le <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; can contain.">Nombre initial d'éléments que <see cref="T:System.Collections.Generic.Dictionary`2" /> peut contenir.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">Implémentation de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> à utiliser pendant la comparaison de clés, ou <see langword="null" /> pour utiliser le <see cref="T:System.Collections.Generic.EqualityComparer`1" /> par défaut pour le type de la clé.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class with serialized data.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Dictionary`2" /> avec des données sérialisées.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object containing the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> contenant les informations nécessaires pour sérialiser <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure containing the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Structure <see cref="T:System.Runtime.Serialization.StreamingContext" /> contenant la source et la destination du flux sérialisé associé à <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary.">Ajoute la clé et la valeur spécifiées au dictionnaire.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur de l'élément à ajouter. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary vsli:raw="Removes all keys and values from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Supprime toutes les clés et les valeurs de <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains the specified key.">Détermine si <see cref="T:System.Collections.Generic.Dictionary`2" /> contient la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Clé à rechercher dans <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> est <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.Dictionary`2" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains a specific value.">Détermine si <see cref="T:System.Collections.Generic.Dictionary`2" /> contient une valeur spécifique.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur à trouver dans <see cref="T:System.Collections.Generic.Dictionary`2" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.Dictionary`2" /> contient un élément correspondant à la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.EnsureCapacity(System.Int32)">
      <summary vsli:raw="Ensures that the dictionary can hold up to a specified number of entries without any further expansion of its backing storage.">Garantit que le dictionnaire peut contenir jusqu’à un nombre spécifié d’entrées sans nécessiter d’expansion de son stockage.</summary>
      <param name="capacity" vsli:raw="The number of entries.">Nombre d’entrées.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> est inférieur à 0.</exception>
      <returns vsli:raw="The current capacity of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">La capacité actuelle du <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Structure <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> pour l'objet <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">Implémente l'interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et retourne les données nécessaires pour sérialiser l'instance <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les informations nécessaires pour sérialiser l'instance <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">Structure <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient la source et la destination du flux sérialisé associé à l'instance de <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">Implémente l’interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et déclenche l’événement de désérialisation une fois la désérialisation terminée.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Source de l'événement de désérialisation.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance is invalid.">L’objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associé à l’instance de <see cref="T:System.Collections.Generic.Dictionary`2" /> actuelle n’est pas valide.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the value with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Supprime de <see cref="T:System.Collections.Generic.Dictionary`2" /> la valeur ayant la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> est <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see langword="true" /> si la recherche et la suppression de l'élément réussissent ; sinon, <see langword="false" />.  Cette méthode retourne <see langword="false" /> si <paramref name="key" /> est introuvable dans <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)">
      <summary vsli:raw="Removes the value with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, and copies the element to the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Supprime la valeur avec la clé spécifiée du <see cref="T:System.Collections.Generic.Dictionary`2" />et copie l’élément dans le paramètre <paramref name="value" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <param name="value" vsli:raw="The removed element.">Élément supprimé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> est <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la recherche et la suppression de l'élément réussissent ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified value to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; with the specified key.">Ajoute la valeur spécifiée à <see cref="T:System.Collections.Generic.ICollection`1" /> avec la clé spécifiée.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure representing the key and value to add to the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Structure <see cref="T:System.Collections.Generic.KeyValuePair`2" /> qui représente la clé et la valeur à ajouter à <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The key of &lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">La clé de <paramref name="keyValuePair" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific key and value.">Détermine si <see cref="T:System.Collections.Generic.ICollection`1" /> contient une clé et une valeur spécifiques.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Structure <see cref="T:System.Collections.Generic.KeyValuePair`2" /> à rechercher dans <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="keyValuePair" /> existe dans <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">Copie les éléments de <see cref="T:System.Collections.Generic.ICollection`1" /> dans un tableau de type <see cref="T:System.Collections.Generic.KeyValuePair`2" />, en commençant au niveau de l'index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">Tableau unidimensionnel de type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> constituant la destination des éléments <see cref="T:System.Collections.Generic.KeyValuePair`2" /> copiés à partir de <see cref="T:System.Collections.Generic.ICollection`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.ICollection`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes a key and value from the dictionary.">Supprime une clé et une valeur du dictionnaire.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure representing the key and value to remove from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Structure <see cref="T:System.Collections.Generic.KeyValuePair`2" /> qui représente la clé et la valeur à supprimer de <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key and value represented by &lt;paramref name=&quot;keyValuePair&quot; /&gt; is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> si la recherche et la suppression de la clé et de la valeur représentées par <paramref name="keyValuePair" /> réussissent ; sinon, <see langword="false" />. Cette méthode retourne <see langword="false" /> si <paramref name="keyValuePair" /> est introuvable dans <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array, starting at the specified array index.">Copie les éléments de <see cref="T:System.Collections.Generic.ICollection`1" /> dans un tableau, en commençant au niveau d'un index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">Tableau unidimensionnel correspondant à la destination des éléments copiés à partir depuis <see cref="T:System.Collections.Generic.ICollection`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
 <paramref name="array" /> n’a pas d’indexation de base zéro.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.ICollection`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.  
  
- ou - 
Le type du <see cref="T:System.Collections.Generic.ICollection`1" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds the specified key and value to the dictionary.">Ajoute la clé et la valeur spécifiées au dictionnaire.</summary>
      <param name="key" vsli:raw="The object to use as the key.">Objet à utiliser comme clé.</param>
      <param name="value" vsli:raw="The object to use as the value.">Objet à utiliser comme valeur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to &lt;paramref name=&quot;TValue&quot; /&gt;, the type of values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <paramref name="key" /> a un type qui ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
- ou - 
 <paramref name="value" /> a un type qui ne peut pas être assigné à <paramref name="TValue" />, le type des valeurs dans <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
- ou - 
Une valeur ayant la même clé existe déjà dans <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">Détermine si <see cref="T:System.Collections.IDictionary" /> contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Clé à rechercher dans <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> est <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Retourne <see cref="T:System.Collections.IDictionaryEnumerator" /> pour l'objet <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Supprime l'élément avec la clé spécifiée d'<see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess">
      <summary vsli:raw="Sets the capacity of this dictionary to what it would be if it had been originally initialized with all its entries.">Définit la capacité de ce dictionnaire à ce qu’elle serait si elle avait été initialisé à l’origine avec toutes ses entrées.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess(System.Int32)">
      <summary vsli:raw="Sets the capacity of this dictionary to hold up a specified number of entries without any further expansion of its backing storage.">Définit la capacité de ce dictionnaire pour contenir un nombre spécifié d’entrées sans nécessiter d’expansion de son stockage.</summary>
      <param name="capacity" vsli:raw="The new capacity.">Nouvelle capacité.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than &lt;see cref=&quot;P:System.Collections.Generic.Dictionary`2.Count&quot; /&gt;.">
        <paramref name="capacity" /> est inférieur à <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)">
      <summary vsli:raw="Attempts to add the specified key and value to the dictionary.">Tente d’ajouter la clé et la valeur spécifiées au dictionnaire.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The value of the element to add. It can be &lt;see langword=&quot;null&quot; /&gt;.">Valeur de l'élément à ajouter. Elle peut être <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> est <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key/value pair was added to the dictionary successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la paire clé/valeur a été ajoutée au dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtient la valeur associée à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the value to get.">Clé de la valeur à obtenir.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Cette méthode retourne la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, retourne la valeur par défaut pour le type du paramètre <paramref name="value" />. Ce paramètre est passé sans être initialisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> est <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.Dictionary`2" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; that is used to determine equality of keys for the dictionary.">Obtient le <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> qui est utilisé pour déterminer l'égalité des clés pour le dictionnaire.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface implementation that is used to determine equality of keys for the current &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; and to provide hash values for the keys.">Implémentation d'interface générique <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> qui est utilisée pour déterminer l'égalité des clés pour le <see cref="T:System.Collections.Generic.Dictionary`2" /> actuel et pour fournir des valeurs de hachage pour les clés.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Obtient le nombre de paires clé/valeur contenues dans <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Nombre de paires clé/valeur contenues dans <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">Obtient ou définit la valeur associée à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">Clé de la valeur à obtenir ou à définir.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> est <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">La propriété est récupérée et <paramref name="key" /> n’existe pas dans la collection.</exception>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt;, and a set operation creates a new element with the specified key.">Valeur associée à la clé spécifiée. Si la clé spécifiée est introuvable, une opération Get retourne <see cref="T:System.Collections.Generic.KeyNotFoundException" /> et une opération Set crée un nouvel élément avec la clé spécifiée.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Obtient une collection contenant les clés dans <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> contenant les clés de <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the dictionary is read-only.">Obtient une valeur indiquant si le dictionnaire est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />. Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; of type &lt;paramref name=&quot;TKey&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> de type <paramref name="TKey" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; of type &lt;paramref name=&quot;TValue&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> de type <paramref name="TValue" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">Obtient une collection contenant les clés de <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</summary>
      <returns vsli:raw="A collection containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">Collection contenant les clés de <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection containing the values of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">Obtient une collection contenant les valeurs de <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</summary>
      <returns vsli:raw="A collection containing the values of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">Collection contenant les valeurs de <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur qui indique si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">Obtient une valeur qui indique si <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> est de taille fixe ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">Obtient une valeur qui indique si l’objet <see cref="T:System.Collections.IDictionary" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> est en lecture seule ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the value with the specified key.">Obtient ou définit la valeur avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the value to get.">Clé de la valeur à obtenir.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Une valeur est assignée et <paramref name="key" /> a un type qui ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
- ou - 
Une valeur est assignée et <paramref name="value" /> a un type qui ne peut pas être assigné au type valeur <paramref name="TValue" /> de <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
      <returns vsli:raw="The value associated with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Valeur associée à la clé spécifiée, ou <see langword="null" /> si <paramref name="key" /> ne figure pas dans le dictionnaire ou si le type de <paramref name="key" /> ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtient un <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtient <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Obtient une collection contenant les valeurs dans <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> contenant les valeurs de <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Énumère les éléments d'un élément <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.Enumerator&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Avance l'énumérateur à l'élément suivant du <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; at the current position of the enumerator.">Élément situé dans le <see cref="T:System.Collections.Generic.Dictionary`2" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator, as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt;.">Élément dans le dictionnaire à la position actuelle de l'énumérateur en tant que <see cref="T:System.Collections.DictionaryEntry" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary vsli:raw="Gets the key of the element at the current position of the enumerator.">Obtient la clé de l’élément à la position actuelle de l’énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The key of the element in the dictionary at the current position of the enumerator.">Clé de l'élément dans le dictionnaire à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary vsli:raw="Gets the value of the element at the current position of the enumerator.">Obtient la valeur de l’élément à la position actuelle de l’énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The value of the element in the dictionary at the current position of the enumerator.">Valeur de l'élément dans le dictionnaire à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator, as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Élément dans la collection à la position actuelle de l'énumérateur en tant que <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary vsli:raw="Represents the collection of keys in a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. This class cannot be inherited.">Représente la collection de clés dans <see cref="T:System.Collections.Generic.Dictionary`2" />. Cette classe ne peut pas être héritée.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; class that reflects the keys in the specified &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> qui reflète les clés dans le <see cref="T:System.Collections.Generic.Dictionary`2" /> spécifié.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; whose keys are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> dont les clés sont reflétées dans le nouveau <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">Copie les éléments <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> dans un <see cref="T:System.Array" /> unidimensionnel existant, en commençant au niveau de l'index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> pour l'objet <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Ajoute un élément à <see cref="T:System.Collections.Generic.ICollection`1" />. Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objet à ajouter à <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Supprime tous les éléments de <see cref="T:System.Collections.Generic.ICollection`1" />. Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Détermine si <see cref="T:System.Collections.Generic.ICollection`1" /> contient une valeur spécifique.</summary>
      <param name="item">Objet à rechercher dans <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> existe dans <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Supprime la première occurrence d’un objet spécifique de <see cref="T:System.Collections.Generic.ICollection`1" />. Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objet à supprimer de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Toujours levée.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé de <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon <see langword="false" />. Cette méthode retourne également <see langword="false" /> si l’élément est introuvable dans le <see cref="T:System.Collections.Generic.ICollection`1" /> d’origine.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
 <paramref name="array" /> n’a pas d’indexation de base zéro.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.  
  
- ou - 
Le type du <see cref="T:System.Collections.ICollection" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">Obtient le nombre d’éléments contenus dans le <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.  &#xA;  &#xA; Retrieving the value of this property is an O(1) operation.">Nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.  
  
La récupération de la valeur de cette propriété est une opération O(1).</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, cette propriété retourne toujours <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">Énumère les éléments d'un élément <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">Avance l'énumérateur à l'élément suivant du <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; at the current position of the enumerator.">Élément situé dans le <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary vsli:raw="Represents the collection of values in a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. This class cannot be inherited.">Représente la collection de valeurs dans un <see cref="T:System.Collections.Generic.Dictionary`2" />. Cette classe ne peut pas être héritée.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; class that reflects the values in the specified &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> qui reflète les valeurs dans le <see cref="T:System.Collections.Generic.Dictionary`2" /> spécifié.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; whose values are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> dont les valeurs sont reflétées dans le nouveau <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">Copie les éléments <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> dans un <see cref="T:System.Array" /> unidimensionnel existant, en commençant au niveau de l'index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> pour l'objet <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Ajoute un élément à <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objet à ajouter à <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Supprime tous les éléments de <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific value.">Détermine si <see cref="T:System.Collections.Generic.ICollection`1" /> contient une valeur spécifique.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objet à rechercher dans <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> existe dans <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Supprime la première occurrence d’un objet spécifique de <see cref="T:System.Collections.Generic.ICollection`1" />. Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objet à supprimer de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Toujours levée.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé de <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="item" /> est introuvable dans le <see cref="T:System.Collections.Generic.ICollection`1" /> d'origine.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
 <paramref name="array" /> n’a pas d’indexation de base zéro.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.  
  
- ou - 
Le type du <see cref="T:System.Collections.ICollection" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Obtient le nombre d’éléments contenus dans le <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, cette propriété retourne toujours <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns the current instance.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Énumère les éléments d'un élément <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Avance l'énumérateur à l'élément suivant du <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; at the current position of the enumerator.">Élément situé dans le <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary vsli:raw="Provides a base class for implementations of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface.">Fournit une classe de base pour les implémentations de l'interface générique <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <typeparam name="T" vsli:raw="The type of objects to compare.">Type des objets à comparer.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.EqualityComparer`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary vsli:raw="When overridden in a derived class, determines whether two objects of type &lt;typeparamref name=&quot;T&quot; /&gt; are equal.">En cas de substitution dans une classe dérivée, détermine si deux objets de type <typeparamref name="T" /> sont égaux.</summary>
      <param name="x" vsli:raw="The first object to compare.">Premier objet à comparer.</param>
      <param name="y" vsli:raw="The second object to compare.">Deuxième objet à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les objets spécifiés sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary vsli:raw="When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.">En cas de substitution dans une classe dérivée, sert de fonction de hachage pour l'objet spécifié pour le hachage d'algorithmes et des structures de données, telles qu'une table de hachage.</summary>
      <param name="obj" vsli:raw="The object for which to get a hash code.">Objet pour lequel obtenir un code de hachage.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The type of &lt;paramref name=&quot;obj&quot; /&gt; is a reference type and &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Le type de <paramref name="obj" /> est un type référence et <paramref name="obj" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="A hash code for the specified object.">Code de hachage pour l'objet spécifié.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary vsli:raw="Determines whether the specified objects are equal.">Détermine si les objets spécifiés sont égaux.</summary>
      <param name="x" vsli:raw="The first object to compare.">Premier objet à comparer.</param>
      <param name="y" vsli:raw="The second object to compare.">Deuxième objet à comparer.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;x&quot; /&gt; or &lt;paramref name=&quot;y&quot; /&gt; is of a type that cannot be cast to type &lt;typeparamref name=&quot;T&quot; /&gt;.">
        <paramref name="x" /> ou <paramref name="y" /> est d'un type qui ne peut pas être casté en type <typeparamref name="T" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les objets spécifiés sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary vsli:raw="Returns a hash code for the specified object.">Retourne un code de hachage pour l'objet spécifié.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which a hash code is to be returned.">
        <see cref="T:System.Object" /> pour lequel un code de hachage doit être retourné.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The type of &lt;paramref name=&quot;obj&quot; /&gt; is a reference type and &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;obj&quot; /&gt; is of a type that cannot be cast to type &lt;typeparamref name=&quot;T&quot; /&gt;.">Le type de <paramref name="obj" /> est un type référence et <paramref name="obj" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="obj" /> est d'un type qui ne peut pas être casté en type <typeparamref name="T" />.</exception>
      <returns vsli:raw="A hash code for the specified object.">Code de hachage pour l'objet spécifié.</returns>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary vsli:raw="Returns a default equality comparer for the type specified by the generic argument.">Retourne un comparateur d’égalité par défaut pour le type spécifié par l’argument générique.</summary>
      <returns vsli:raw="The default instance of the &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; class for type &lt;typeparamref name=&quot;T&quot; /&gt;.">Instance par défaut de la classe <see cref="T:System.Collections.Generic.EqualityComparer`1" /> pour le type <typeparamref name="T" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary vsli:raw="Represents a set of values.">Représente un ensemble de valeurs.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">Type d'éléments de l'ensemble de hachages.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty and uses the default equality comparer for the set type.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.HashSet`1" /> vide et utilise le comparateur d'égalité par défaut pour le type du jeu.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.HashSet`1" /> qui utilise le comparateur d'égalité par défaut pour le type du jeu, contient des éléments copiés à partir de la collection spécifiée et possède une capacité suffisante pour accueillir le nombre d'éléments copiés.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new set.">Collection dont les éléments sont copiés dans le nouvel ensemble.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.HashSet`1" /> qui utilise le comparateur d'égalité spécifié pour le type du jeu, contient des éléments copiés à partir de la collection spécifiée et possède une capacité suffisante pour accueillir le nombre d'éléments copiés.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new set.">Collection dont les éléments sont copiés dans le nouvel ensemble.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; implementation for the set type.">Implémentation du <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> à utiliser pendant la comparaison des valeurs du jeu, ou <see langword="null" /> pour utiliser l'implémentation du <see cref="T:System.Collections.Generic.EqualityComparer`1" /> par défaut pour le type du jeu.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty and uses the specified equality comparer for the set type.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.HashSet`1" /> vide et utilise le comparateur d'égalité spécifié pour le type du jeu.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; implementation for the set type.">Implémentation du <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> à utiliser pendant la comparaison des valeurs du jeu, ou <see langword="null" /> pour utiliser l'implémentation du <see cref="T:System.Collections.Generic.EqualityComparer`1" /> par défaut pour le type du jeu.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty, but has reserved space for &lt;paramref name=&quot;capacity&quot; /&gt; items and uses the default equality comparer for the set type.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.HashSet`1" /> qui est vide, mais qui a de l’espace réservé pour des éléments <paramref name="capacity" /> et qui utilise le comparateur d’égalité par défaut pour le type de l’ensemble.</summary>
      <param name="capacity" vsli:raw="The initial size of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt;.">Taille initiale du <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the specified equality comparer for the set type, and has sufficient capacity to accommodate &lt;paramref name=&quot;capacity&quot; /&gt; elements.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.HashSet`1" /> qui utilise le comparateur d’égalité spécifié pour le type de jeu et dispose d’une capacité suffisante pour accueillir les éléments <paramref name="capacity" />.</summary>
      <param name="capacity" vsli:raw="The initial size of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt;.">Taille initiale du <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or null (Nothing in Visual Basic) to use the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation for the set type.">Implémentation de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> à utiliser lors de la comparaison des valeurs du jeu, ou null (Nothing en Visual Basic) pour utiliser l’implémentation de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> par défaut pour le type de jeu.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class with serialized data.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.HashSet`1" /> avec des données sérialisées.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les informations nécessaires pour sérialiser l'objet <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Structure de <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient la source et la destination du flux sérialisé associé à l'objet <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to a set.">Ajoute l'élément spécifié à un ensemble.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Élément à ajouter à l'ensemble.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object; &lt;see langword=&quot;false&quot; /&gt; if the element is already present.">
        <see langword="true" /> si l'élément est ajouté à l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> ; <see langword="false" /> si l'élément est déjà présent.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary vsli:raw="Removes all elements from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Supprime tous les éléments d'un objet <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object contains the specified element.">Détermine si un objet <see cref="T:System.Collections.Generic.HashSet`1" /> contient l'élément spécifié.</summary>
      <param name="item" vsli:raw="The element to locate in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Élément à rechercher dans l'objet <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object contains the specified element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> contient l'élément spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array.">Copie les éléments d'un objet <see cref="T:System.Collections.Generic.HashSet`1" /> dans un tableau.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l'objet <see cref="T:System.Collections.Generic.HashSet`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array, starting at the specified array index.">Copie les éléments d'un objet <see cref="T:System.Collections.Generic.HashSet`1" /> dans un tableau, en commençant à l'index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l'objet <see cref="T:System.Collections.Generic.HashSet`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is greater than the length of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="arrayIndex" /> est supérieur à la longueur du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified number of elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array, starting at the specified array index.">Copie le nombre spécifié d'éléments d'un objet <see cref="T:System.Collections.Generic.HashSet`1" /> dans un tableau, en commençant à l'index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l'objet <see cref="T:System.Collections.Generic.HashSet`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <param name="count" vsli:raw="The number of elements to copy to &lt;paramref name=&quot;array&quot; /&gt;.">Nombre d'éléments à copier dans l'élément <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> est inférieur à 0.  
  
- ou - 
 <paramref name="count" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is greater than the length of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is greater than the available space from the &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="arrayIndex" /> est supérieur à la longueur du <paramref name="array" /> de destination.  
  
- ou - 
 Le nombre d'éléments dans le <paramref name="count" /> est supérieur à la quantité d'espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used for equality testing of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Retourne un objet <see cref="T:System.Collections.IEqualityComparer" /> qui peut être utilisé pour tester l'égalité d'un objet <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used for deep equality testing of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Objet <see cref="T:System.Collections.IEqualityComparer" /> qui peut être utilisé pour tester l'égalité profonde de l'objet <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.EnsureCapacity(System.Int32)">
      <summary vsli:raw="Ensures that this hash set can hold the specified number of elements without growing.">Garantit que ce jeu de hachage peut contenir le nombre spécifié d’éléments sans croître.</summary>
      <param name="capacity" vsli:raw="The minimum capacity to ensure.">Capacité minimale à garantir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> est inférieur à zéro.</exception>
      <returns vsli:raw="The new capacity of this instance.">Nouvelle capacité de cette instance.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Supprime tous les éléments dans la collection spécifiée de l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Collection d’éléments à supprimer de l’objet <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Retourne un énumérateur qui itère au sein d'un objet <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1.Enumerator&quot; /&gt; object for the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Objet <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> pour l'objet <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Implémente l'interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et retourne les données requises pour sérialiser un objet <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les informations nécessaires pour sérialiser l'objet <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Structure de <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient la source et la destination du flux sérialisé associé à l'objet <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain only elements that are present in that object and in the specified collection.">Modifie l’objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif afin qu’il contienne uniquement les éléments qui sont présents dans cet objet et dans la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper subset of the specified collection.">Détermine si un objet <see cref="T:System.Collections.Generic.HashSet`1" /> appartient à la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> appartient à l'élément <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper superset of the specified collection.">Détermine si un objet <see cref="T:System.Collections.Generic.HashSet`1" /> contient la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> contient l'élément <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a subset of the specified collection.">Détermine si un objet <see cref="T:System.Collections.Generic.HashSet`1" /> est un sous-ensemble de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> est un sous-ensemble de l'élément <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a superset of the specified collection.">Détermine si un objet <see cref="T:System.Collections.Generic.HashSet`1" /> est un sur-ensemble de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> est un sur-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">Implémente l’interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et déclenche l’événement de désérialisation une fois la désérialisation terminée.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Source de l'événement de désérialisation.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is invalid.">L'objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associé à l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actuel n'est pas valide.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and a specified collection share common elements.">Détermine si l’objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif et une collection spécifiée partagent des éléments communs.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> et l'élément <paramref name="other" /> partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Supprime l'élément spécifié d'un objet <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <param name="item" vsli:raw="The element to remove.">Élément à supprimer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see langword="true" /> si la recherche et la suppression de l'élément réussissent ; sinon, <see langword="false" />.  Cette méthode retourne <see langword="false" /> si <paramref name="item" /> est introuvable dans l'objet <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary vsli:raw="Removes all elements that match the conditions defined by the specified predicate from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">Supprime de la collection <see cref="T:System.Collections.Generic.HashSet`1" /> tous les éléments qui respectent les conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to remove.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions des éléments à supprimer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="The number of elements that were removed from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">Nombre d'éléments supprimés de la collection <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and the specified collection contain the same elements.">Détermine si un objet <see cref="T:System.Collections.Generic.HashSet`1" /> et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet <see cref="T:System.Collections.Generic.HashSet`1" /> est égal à <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain only elements that are present either in that object or in the specified collection, but not both.">Modifie l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif afin qu'il contienne uniquement les éléments présents dans cet objet ou dans la collection spécifiée, mais pas dans les deux.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">Ajoute un élément à un objet <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">Objet à ajouter à l'objet <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; object that can be used to iterate through the collection.">Objet <see cref="T:System.Collections.Generic.IEnumerator`1" /> pouvant être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Objet <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary vsli:raw="Sets the capacity of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.">Affecte à la capacité d'un objet <see cref="T:System.Collections.Generic.HashSet`1" /> le nombre réel d'éléments qu'il contient, arrondi à une valeur proche spécifique à l'implémentation.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Recherche dans l’ensemble une valeur donnée et retourne la valeur égale qu’il trouve, le cas échéant.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">La valeur à rechercher.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the default value of T when the search yielded no match.">Valeur de l’ensemble que la recherche a trouvée, ou valeur par défaut de T quand la recherche n’a trouvé aucune correspondance.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Valeur qui indique si la recherche a réussi.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain all elements that are present in itself, the specified collection, or both.">Modifie l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif afin qu'il contienne tous les éléments qui sont présents dans cet objet, dans la collection spécifiée ou dans les deux.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.HashSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; object that is used to determine equality for the values in the set.">Obtient l'objet <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> qui est utilisé pour déterminer l'égalité des valeurs du jeu.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; object that is used to determine equality for the values in the set.">Objet <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> qui est utilisé pour déterminer l'égalité des valeurs du jeu.</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary vsli:raw="Gets the number of elements that are contained in a set.">Obtient le nombre d'éléments contenus dans un ensemble.</summary>
      <returns vsli:raw="The number of elements that are contained in the set.">Nombre d'éléments contenus dans l'ensemble.</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether a collection is read-only.">Obtient une valeur indiquant si une collection est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Énumère les éléments d’un objet <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1.Enumerator&quot; /&gt; object.">Libère toutes les ressources utilisées par un objet <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">Avance l’énumérateur à l’élément suivant de la collection <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection at the current position of the enumerator.">Élément dans la <see cref="T:System.Collections.Generic.HashSet`1" /> collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator, as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Élément dans la collection à la position actuelle de l'énumérateur en tant que <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary vsli:raw="Represents a doubly linked list.">Représente une liste doublement liée.</summary>
      <typeparam name="T" vsli:raw="Specifies the element type of the linked list.">Spécifie le type d’élément de la liste liée.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that is empty.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.LinkedList`1" /> qui est vide.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; and has sufficient capacity to accommodate the number of elements copied.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.LinkedList`1" /> qui contient des éléments copiés à partir du <see cref="T:System.Collections.IEnumerable" /> spécifié et qui possède une capacité suffisante pour accepter le nombre d'éléments copiés.</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerable" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that is serializable with the specified &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.LinkedList`1" /> qui est sérialisable avec les <see cref="T:System.Runtime.Serialization.SerializationInfo" /> et <see cref="T:System.Runtime.Serialization.StreamingContext" /> spécifiés.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object containing the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> contenant les informations nécessaires pour sérialiser <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object containing the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Objet <see cref="T:System.Runtime.Serialization.StreamingContext" /> contenant la source et la destination du flux sérialisé associé à <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary vsli:raw="Adds a new node containing the specified value after the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Ajoute un nouveau nœud qui contient la valeur spécifiée après le nœud existant spécifié dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; after which to insert a new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> après lequel insérer un nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> qui contient <paramref name="value" />.</param>
      <param name="value" vsli:raw="The value to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valeur à ajouter à <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> n'est pas dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> actuel.</exception>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contenant <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node after the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Ajoute le nouveau nœud spécifié après le nœud existant spécifié dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; after which to insert &lt;paramref name=&quot;newNode&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> après lequel insérer <paramref name="newNode" />.</param>
      <param name="newNode" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> à ajouter à <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="newNode" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> n'est pas dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> actuel.  
  
- ou - 
 <paramref name="newNode" /> appartient à une autre <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary vsli:raw="Adds a new node containing the specified value before the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Ajoute un nouveau nœud qui contient la valeur spécifiée avant le nœud existant spécifié dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; before which to insert a new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> avant lequel insérer un nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> qui contient <paramref name="value" />.</param>
      <param name="value" vsli:raw="The value to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valeur à ajouter à <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> n'est pas dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> actuel.</exception>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contenant <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node before the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Ajoute le nouveau nœud spécifié avant le nœud existant spécifié dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; before which to insert &lt;paramref name=&quot;newNode&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> avant lequel insérer <paramref name="newNode" />.</param>
      <param name="newNode" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> à ajouter à <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="newNode" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> n'est pas dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> actuel.  
  
- ou - 
 <paramref name="newNode" /> appartient à une autre <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary vsli:raw="Adds a new node containing the specified value at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Ajoute un nouveau nœud qui contient la valeur spécifiée au début de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value" vsli:raw="The value to add at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valeur à ajouter au début de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contenant <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Ajoute le nouveau nœud spécifié au début de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> à ajouter au début de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> appartient à une autre <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary vsli:raw="Adds a new node containing the specified value at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Ajoute un nouveau nœud qui contient la valeur spécifiée à la fin de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value" vsli:raw="The value to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valeur à ajouter à la fin de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contenant <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Ajoute le nouveau nœud spécifié à la fin de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Le nouveau <see cref="T:System.Collections.Generic.LinkedListNode`1" /> à ajouter à la fin de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> appartient à une autre <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary vsli:raw="Removes all nodes from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Supprime tous les nœuds de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary vsli:raw="Determines whether a value is in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Détermine si une valeur est dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur à trouver dans <see cref="T:System.Collections.Generic.LinkedList`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value" /> existe dans <see cref="T:System.Collections.Generic.LinkedList`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">Copie l'ensemble de l'objet <see cref="T:System.Collections.Generic.LinkedList`1" /> vers un objet <see cref="T:System.Array" /> unidimensionnel compatible, en commençant à l'index spécifié du tableau cible.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.LinkedList`1" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary vsli:raw="Finds the first node that contains the specified value.">Recherche le premier nœud qui contient la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valeur à trouver dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; that contains the specified value, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Le premier <see cref="T:System.Collections.Generic.LinkedListNode`1" /> qui contient la valeur spécifiée, s'il est trouvé ; sinon, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary vsli:raw="Finds the last node that contains the specified value.">Recherche le dernier nœud qui contient la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valeur à trouver dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns vsli:raw="The last &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; that contains the specified value, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Le dernier <see cref="T:System.Collections.Generic.LinkedListNode`1" /> qui contient la valeur spécifiée, s'il est trouvé ; sinon, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> pour <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Implémente l'interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et retourne les données nécessaires pour sérialiser l'instance <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les informations nécessaires pour sérialiser l'instance <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Objet <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient la source et la destination du flux sérialisé associé à l'instance du <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">Implémente l’interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et déclenche l’événement de désérialisation une fois la désérialisation terminée.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Source de l'événement de désérialisation.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance is invalid.">L’objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associé à l’instance de <see cref="T:System.Collections.Generic.LinkedList`1" /> actuelle n’est pas valide.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified value from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Supprime la première occurrence de la valeur spécifiée dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value" vsli:raw="The value to remove from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valeur à supprimer de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element containing &lt;paramref name=&quot;value&quot; /&gt; is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see langword="true" /> si la suppression de l'élément contenant <paramref name="value" /> réussit ; sinon, <see langword="false" />.  Cette méthode retourne également <see langword="false" /> si <paramref name="value" /> est introuvable dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> d'origine.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Removes the specified node from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Supprime le nœud spécifié de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> à supprimer de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> n'est pas dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> actuel.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary vsli:raw="Removes the node at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Supprime le nœud au début de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is empty.">La <see cref="T:System.Collections.Generic.LinkedList`1" /> est vide.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary vsli:raw="Removes the node at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Supprime le nœud à la fin de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is empty.">La <see cref="T:System.Collections.Generic.LinkedList`1" /> est vide.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item at the end of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Ajoute un élément à la fin de <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="value" vsli:raw="The value to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Valeur à ajouter à la fin de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
 <paramref name="array" /> n’a pas d’indexation de base zéro.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.  
  
- ou - 
Le type du <see cref="T:System.Collections.ICollection" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the linked list as a collection.">Retourne un énumérateur qui itère au sein de la liste liée en tant que collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the linked list as a collection.">
        <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la liste liée en tant que collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary vsli:raw="Gets the number of nodes actually contained in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Obtient le nombre de nœuds réellement contenus dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="The number of nodes actually contained in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Nombre de nœuds réellement contenus dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary vsli:raw="Gets the first node of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Obtient le premier nœud de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Le premier <see cref="T:System.Collections.Generic.LinkedListNode`1" /> de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary vsli:raw="Gets the last node of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Obtient le dernier nœud de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="The last &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Le dernier <see cref="T:System.Collections.Generic.LinkedListNode`1" /> de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.LinkedList`1" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.LinkedList`1" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns the current instance.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.LinkedList`1" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Énumère les éléments d'un élément <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1.Enumerator&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Avance l'énumérateur à l'élément suivant du <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection. Cette classe ne peut pas être héritée.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">Implémente l’interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et déclenche l’événement de désérialisation une fois la désérialisation terminée.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Source de l'événement de désérialisation.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance is invalid.">L’objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associé à l’instance de <see cref="T:System.Collections.Generic.LinkedList`1" /> actuelle n’est pas valide.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Implémente l'interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et retourne les données nécessaires pour sérialiser l'instance <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les informations nécessaires pour sérialiser l'instance <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Objet <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient la source et la destination du flux sérialisé associé à l'instance du <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; at the current position of the enumerator.">Élément situé dans le <see cref="T:System.Collections.Generic.LinkedList`1" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary vsli:raw="Represents a node in a &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. This class cannot be inherited.">Représente un nœud dans un <see cref="T:System.Collections.Generic.LinkedList`1" />. Cette classe ne peut pas être héritée.</summary>
      <typeparam name="T" vsli:raw="Specifies the element type of the linked list.">Spécifie le type d’élément de la liste liée.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; class, containing the specified value.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.LinkedListNode`1" />, contenant la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The value to contain in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt;.">Valeur à contenir dans <see cref="T:System.Collections.Generic.LinkedListNode`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; that the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; belongs to.">Obtient le <see cref="T:System.Collections.Generic.LinkedList`1" /> auquel appartient <see cref="T:System.Collections.Generic.LinkedListNode`1" />.</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; that the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; belongs to, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; is not linked.">Référence à <see cref="T:System.Collections.Generic.LinkedList`1" /> à laquelle appartient <see cref="T:System.Collections.Generic.LinkedListNode`1" />, ou <see langword="null" /> si <see cref="T:System.Collections.Generic.LinkedListNode`1" /> n'est pas lié.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary vsli:raw="Gets the next node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Obtient le nœud suivant dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="A reference to the next node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the current node is the last element (&lt;see cref=&quot;P:System.Collections.Generic.LinkedList`1.Last&quot; /&gt;) of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Référence au nœud suivant dans <see cref="T:System.Collections.Generic.LinkedList`1" />, ou <see langword="null" /> si le nœud actuel est le dernier élément (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />) de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary vsli:raw="Gets the previous node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Obtient le nœud précédent dans <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="A reference to the previous node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the current node is the first element (&lt;see cref=&quot;P:System.Collections.Generic.LinkedList`1.First&quot; /&gt;) of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Référence au nœud précédent dans <see cref="T:System.Collections.Generic.LinkedList`1" />, ou <see langword="null" /> si le nœud actuel est le premier élément (<see cref="P:System.Collections.Generic.LinkedList`1.First" />) de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary vsli:raw="Gets the value contained in the node.">Obtient la valeur contenue dans le nœud.</summary>
      <returns vsli:raw="The value contained in the node.">Valeur contenue dans le nœud.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.ValueRef">
      <summary vsli:raw="Gets a reference to the value held by the node.">Obtient une référence à la valeur détenue par le nœud.</summary>
      <returns vsli:raw="A reference to the value held by the node.">Référence à la valeur détenue par le nœud.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary vsli:raw="Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.">Représente une liste fortement typée d'objets accessibles par index. Fournit des méthodes de recherche, de tri et de manipulation de listes.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Type d'éléments de la liste.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that is empty and has the default initial capacity.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.List`1" /> qui est vide et possède la capacité initiale par défaut.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.List`1" /> qui contient des éléments copiés à partir de la collection spécifiée et qui possède une capacité suffisante pour accepter le nombre d’éléments copiés.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new list.">Collection dont les éléments sont copiés dans la nouvelle liste.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that is empty and has the specified initial capacity.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.List`1" /> qui est vide et a la capacité initiale spécifiée.</summary>
      <param name="capacity" vsli:raw="The number of elements that the new list can initially store.">Nombre d'éléments que la nouvelle liste peut initialement stocker.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary vsli:raw="Adds an object to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Ajoute un objet à la fin de la <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item" vsli:raw="The object to be added to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à ajouter à la fin de <see cref="T:System.Collections.Generic.List`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Ajoute les éléments de la collection spécifiée à la fin de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="collection" vsli:raw="The collection whose elements should be added to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are &lt;see langword=&quot;null&quot; /&gt;, if type &lt;paramref name=&quot;T&quot; /&gt; is a reference type.">Collection dont les éléments devraient être ajoutés à la fin de <see cref="T:System.Collections.Generic.List`1" />. La collection elle-même ne peut pas avoir la valeur <see langword="null" />, mais elle peut contenir des éléments qui sont <see langword="null" />, si le type <paramref name="T" /> est un type référence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary vsli:raw="Returns a read-only &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; wrapper for the current collection.">Retourne un wrapper <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> en lecture seule pour la collection actuelle.</summary>
      <returns vsli:raw="An object that acts as a read-only wrapper around the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Objet qui joue le rôle de wrapper en lecture seule autour du <see cref="T:System.Collections.Generic.List`1" /> actuel.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">Recherche un élément utilisant le comparateur par défaut dans le <see cref="T:System.Collections.Generic.List`1" /> entièrement trié et retourne l'index de base zéro de l'élément.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à trouver. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">Le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver une implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type <paramref name="T" />.</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">Index de base zéro de <paramref name="item" /> dans le <see cref="T:System.Collections.Generic.List`1" /> trié, si <paramref name="item" /> existe ; sinon, un nombre négatif qui est le complément de bits de l'index de l'élément suivant supérieur à <paramref name="item" /> ou, s'il n'existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Recherche un élément utilisant le comparateur spécifié dans le <see cref="T:System.Collections.Generic.List`1" /> entièrement trié et retourne l'index de base zéro de l'élément.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à trouver. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">Implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> à utiliser pendant la comparaison d’éléments.  
  
- ou - 
 <see langword="null" /> pour utiliser le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> est <see langword="null" />, et le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver une implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type <paramref name="T" />.</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">Index de base zéro de <paramref name="item" /> dans le <see cref="T:System.Collections.Generic.List`1" /> trié, si <paramref name="item" /> existe ; sinon, un nombre négatif qui est le complément de bits de l'index de l'élément suivant supérieur à <paramref name="item" /> ou, s'il n'existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Recherche un élément utilisant le comparateur spécifié dans une plage d'éléments du <see cref="T:System.Collections.Generic.List`1" /> trié et retourne l'index de base zéro de l'élément.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Index de début de base zéro de la plage dans laquelle effectuer la recherche.</param>
      <param name="count" vsli:raw="The length of the range to search.">Longueur de la plage dans laquelle effectuer la recherche.</param>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à trouver. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">Implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> à utiliser pendant la comparaison d'éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.  
  
- ou - 
 <paramref name="count" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> et <paramref name="count" /> ne désignent pas une plage valide dans <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> est <see langword="null" />, et le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver une implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type <paramref name="T" />.</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">Index de base zéro de <paramref name="item" /> dans le <see cref="T:System.Collections.Generic.List`1" /> trié, si <paramref name="item" /> existe ; sinon, un nombre négatif qui est le complément de bits de l'index de l'élément suivant supérieur à <paramref name="item" /> ou, s'il n'existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Supprime tous les éléments de <see cref="T:System.Collections.Generic.List`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Détermine si le <see cref="T:System.Collections.Generic.List`1" /> contient un élément.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à rechercher dans <see cref="T:System.Collections.Generic.List`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> existe dans <see cref="T:System.Collections.Generic.List`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
      <summary vsli:raw="Converts the elements in the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to another type, and returns a list containing the converted elements.">Convertit les éléments du <see cref="T:System.Collections.Generic.List`1" /> actuel dans un autre type et retourne une liste qui contient les éléments convertis.</summary>
      <param name="converter" vsli:raw="A &lt;see cref=&quot;T:System.Converter`2&quot; /&gt; delegate that converts each element from one type to another type.">Délégué <see cref="T:System.Converter`2" /> qui convertit chaque élément d'un type vers un autre.</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">Type des éléments du tableau cible.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;converter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="converter" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> du type cible contenant les éléments convertis du <see cref="T:System.Collections.Generic.List`1" /> actuel.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the beginning of the target array.">Copie l'ensemble du <see cref="T:System.Collections.Generic.List`1" /> dans un tableau compatible unidimensionnel en partant du début du tableau cible.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.List`1" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the number of elements that the destination &lt;paramref name=&quot;array&quot; /&gt; can contain.">Le nombre d’éléments du <see cref="T:System.Collections.Generic.List`1" /> source est supérieur au nombre d’éléments que la destination <paramref name="array" /> peut contenir.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified index of the target array.">Copie l'ensemble du <see cref="T:System.Collections.Generic.List`1" /> dans un tableau compatible unidimensionnel en partant de l'index spécifié du tableau cible.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.List`1" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.List`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified index of the target array.">Copie une plage d'éléments de <see cref="T:System.Collections.Generic.List`1" /> dans un tableau compatible unidimensionnel en partant de l'index spécifié du tableau cible.</summary>
      <param name="index" vsli:raw="The zero-based index in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at which copying begins.">Index de base zéro dans le <see cref="T:System.Collections.Generic.List`1" /> source au niveau duquel la copie commence.</param>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.List`1" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Nombre d’éléments à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.  
  
- ou - 
 <paramref name="arrayIndex" /> est inférieur à 0.  
  
- ou - 
 <paramref name="count" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt; of the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements from &lt;paramref name=&quot;index&quot; /&gt; to the end of the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> est égal ou supérieur au <see cref="P:System.Collections.Generic.List`1.Count" /> de la source <see cref="T:System.Collections.Generic.List`1" />.  
  
- ou - 
Le nombre d’éléments entre <paramref name="index" /> et la fin de la source <see cref="T:System.Collections.Generic.List`1" /> est supérieur à l’espace disponible entre <paramref name="arrayIndex" /> et la fin de la destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; contains elements that match the conditions defined by the specified predicate.">Détermine si <see cref="T:System.Collections.Generic.List`1" /> contient des éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to search for.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions des éléments à rechercher.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.List`1" /> contient un ou plusieurs éléments qui correspondent aux conditions définies par le prédicat spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la première occurrence dans le <see cref="T:System.Collections.Generic.List`1" /> entier.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions de l'élément à rechercher.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Premier élément qui correspond aux conditions définies par le prédicat spécifié, s’il est trouvé ; sinon, valeur par défaut du type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Récupère tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to search for.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions des éléments à rechercher.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> contenant tous les éléments qui correspondent aux conditions définies par le prédicat spécifié, le cas échéant ; sinon, <see cref="T:System.Collections.Generic.List`1" /> vide.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Generic.List`1" /> qui commence à l'index spécifié et contient le nombre d'éléments spécifié.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Index de début de base zéro de la recherche.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d’éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions de l'élément à rechercher.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.Generic.List`1" />.  
  
- ou - 
 <paramref name="count" /> est inférieur à 0.  
  
- ou - 
 <paramref name="startIndex" /> et <paramref name="count" /> ne spécifient pas une section valide dans <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the specified index to the last element.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Generic.List`1" /> qui s'étend de l'index spécifié au dernier élément.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Index de début de base zéro de la recherche.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions de l'élément à rechercher.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la première occurrence trouvée dans le <see cref="T:System.Collections.Generic.List`1" /> entier.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions de l'élément à rechercher.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la dernière occurrence dans le <see cref="T:System.Collections.Generic.List`1" /> entier.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions de l'élément à rechercher.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Dernier élément qui correspond aux conditions définies par le prédicat spécifié, le cas échéant ; sinon, valeur par défaut du type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans la plage d’éléments du <see cref="T:System.Collections.Generic.List`1" /> qui contient le nombre d’éléments spécifié et se termine à l’index spécifié.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d’éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions de l'élément à rechercher.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.Generic.List`1" />.  
  
- ou - 
 <paramref name="count" /> est inférieur à 0.  
  
- ou - 
 <paramref name="startIndex" /> et <paramref name="count" /> ne spécifient pas une section valide dans <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to the specified index.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans la plage d'éléments du <see cref="T:System.Collections.Generic.List`1" /> qui s'étend du premier élément à l'index spécifié.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions de l'élément à rechercher.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans le <see cref="T:System.Collections.Generic.List`1" /> entier.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions de l'élément à rechercher.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Exécute l'action spécifiée sur chaque élément de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="action" vsli:raw="The &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate to perform on each element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Délégué <see cref="T:System.Action`1" /> à exécuter sur chaque élément de <see cref="T:System.Collections.Generic.List`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An element in the collection has been modified.">Un élément a été modifié dans la collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1.Enumerator" /> pour l'objet <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Crée une copie superficielle d'une plage d'éléments de la source <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index" vsli:raw="The zero-based &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; index at which the range starts.">Index de base zéro <see cref="T:System.Collections.Generic.List`1" /> où débute la plage.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Nombre d'éléments dans la plage.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.  
  
- ou - 
 <paramref name="count" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> et <paramref name="count" /> ne désignent pas une plage d’éléments valide du <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="A shallow copy of a range of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Copie superficielle d'une plage d'éléments de la source <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Recherche l'objet spécifié et retourne l'index de base zéro de la première occurrence trouvée dans l'ensemble du <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à rechercher dans <see cref="T:System.Collections.Generic.List`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la première occurrence de <paramref name="item" /> dans l'ensemble du <see cref="T:System.Collections.Generic.List`1" />, s'il existe ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the specified index to the last element.">Recherche l'objet spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Generic.List`1" /> qui s'étend de l'index spécifié au dernier élément.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à rechercher dans <see cref="T:System.Collections.Generic.List`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">Index de base zéro de la première occurrence de <paramref name="item" /> trouvée dans la plage d’éléments de <see cref="T:System.Collections.Generic.List`1" /> qui s’étend de <paramref name="index" /> jusqu’au dernier élément, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Recherche l'objet spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Generic.List`1" /> qui commence à l'index spécifié et qui contient le nombre d'éléments spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à rechercher dans <see cref="T:System.Collections.Generic.List`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d’éléments contenus dans la section où la recherche doit être effectuée.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.Generic.List`1" />.  
  
- ou - 
 <paramref name="count" /> est inférieur à 0.  
  
- ou - 
 <paramref name="index" /> et <paramref name="count" /> ne spécifient pas une section valide dans <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">Index de base zéro de la première occurrence de <paramref name="item" /> trouvée dans la plage d’éléments de <see cref="T:System.Collections.Generic.List`1" /> qui commence à <paramref name="index" /> et contient le nombre <paramref name="count" /> d’éléments, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an element into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the specified index.">Insère un élément dans la classe <see cref="T:System.Collections.Generic.List`1" /> au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="item" /> doit être inséré.</param>
      <param name="item" vsli:raw="The object to insert. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à insérer. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à 0.  
  
-ou- 
 <paramref name="index" /> est supérieur à <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the specified index.">Insère les éléments d'une collection dans <see cref="T:System.Collections.Generic.List`1" /> au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Index de base zéro au niveau duquel les nouveaux éléments devraient être insérés.</param>
      <param name="collection" vsli:raw="The collection whose elements should be inserted into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are &lt;see langword=&quot;null&quot; /&gt;, if type &lt;paramref name=&quot;T&quot; /&gt; is a reference type.">Collection dont les éléments doivent être insérés dans <see cref="T:System.Collections.Generic.List`1" />. La collection elle-même ne peut pas avoir la valeur <see langword="null" />, mais elle peut contenir des éléments qui sont <see langword="null" />, si le type <paramref name="T" /> est un type référence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à 0.  
  
-ou- 
 <paramref name="index" /> est supérieur à <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Recherche l'objet spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans l'ensemble de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à rechercher dans <see cref="T:System.Collections.Generic.List`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la dernière occurrence de <paramref name="item" /> trouvée dans l’ensemble de <see cref="T:System.Collections.Generic.List`1" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to the specified index.">Recherche l'objet spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Generic.List`1" /> qui s'étend du premier élément à l'index spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à rechercher dans <see cref="T:System.Collections.Generic.List`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la dernière occurrence de <paramref name="item" /> trouvée dans la plage d’éléments d’<see cref="T:System.Collections.Generic.List`1" /> qui s’étend du premier élément à <paramref name="index" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">Recherche l'objet spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Generic.List`1" /> qui contient le nombre spécifié d'éléments et se termine à l'index spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à rechercher dans <see cref="T:System.Collections.Generic.List`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d’éléments contenus dans la section où la recherche doit être effectuée.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.Generic.List`1" />.  
  
- ou - 
 <paramref name="count" /> est inférieur à 0.  
  
- ou - 
 <paramref name="index" /> et <paramref name="count" /> ne spécifient pas une section valide dans <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la dernière occurrence de <paramref name="item" /> trouvée dans la plage d’éléments de <see cref="T:System.Collections.Generic.List`1" /> qui contient le nombre <paramref name="count" /> d’éléments et se termine à <paramref name="index" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Supprime la première occurrence d’un objet spécifique de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à supprimer de <see cref="T:System.Collections.Generic.List`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> est bien supprimé ; sinon, <see langword="false" />.  Cette méthode retourne également <see langword="false" /> si <paramref name="item" /> est introuvable dans <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to remove.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions des éléments à supprimer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="The number of elements removed from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Nombre d’éléments supprimés du <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Supprime l'élément au niveau de l'index spécifié de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à 0.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Supprime une plage d'éléments de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">Index de début de base zéro de la plage d'éléments à supprimer.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Nombre d'éléments à supprimer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.  
  
- ou - 
 <paramref name="count" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> et <paramref name="count" /> ne désignent pas une plage d’éléments valide du <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Inverse l'ordre des éléments dans l'ensemble de <see cref="T:System.Collections.Generic.List`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range.">Inverse l'ordre des éléments dans la plage spécifiée.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Index de début de base zéro de la plage à inverser.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Nombre d'éléments à inverser dans la plage.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.  
  
- ou - 
 <paramref name="count" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> et <paramref name="count" /> ne désignent pas une plage d’éléments valide du <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the default comparer.">Trie les éléments dans l'ensemble de <see cref="T:System.Collections.Generic.List`1" /> à l'aide du comparateur par défaut.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">Le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver une implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified comparer.">Trie les éléments dans l'ensemble de <see cref="T:System.Collections.Generic.List`1" /> à l'aide du comparateur spécifié.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">Implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> à utiliser pendant la comparaison d'éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> a la valeur <see langword="null" />, et le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver d’implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The implementation of &lt;paramref name=&quot;comparer&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparer&quot; /&gt; might not return 0 when comparing an item with itself.">L’implémentation de <paramref name="comparer" /> a provoqué une erreur pendant le tri. Par exemple, <paramref name="comparer" /> peut ne pas retourner 0 lors de la comparaison d’un élément à lui-même.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Trie les éléments dans l'ensemble de <see cref="T:System.Collections.Generic.List`1" /> à l'aide du <see cref="T:System.Comparison`1" /> spécifié.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">
        <see cref="T:System.Comparison`1" /> à utiliser pendant la comparaison d’éléments.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The implementation of &lt;paramref name=&quot;comparison&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparison&quot; /&gt; might not return 0 when comparing an item with itself.">L’implémentation de <paramref name="comparison" /> a provoqué une erreur pendant le tri. Par exemple, <paramref name="comparison" /> peut ne pas retourner 0 lors de la comparaison d’un élément à lui-même.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified comparer.">Trie les éléments dans une plage d'éléments de <see cref="T:System.Collections.Generic.List`1" /> à l'aide du comparateur spécifié.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Index de début de base zéro de la plage à trier.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Longueur de la plage à trier.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">Implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> à utiliser pendant la comparaison d'éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.  
  
- ou - 
 <paramref name="count" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The implementation of &lt;paramref name=&quot;comparer&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparer&quot; /&gt; might not return 0 when comparing an item with itself.">
        <paramref name="index" /> et <paramref name="count" /> ne spécifient pas une plage valide dans le <see cref="T:System.Collections.Generic.List`1" />.  
  
- ou - 
L’implémentation de <paramref name="comparer" /> a provoqué une erreur pendant le tri. Par exemple, <paramref name="comparer" /> peut ne pas retourner 0 lors de la comparaison d’un élément à lui-même.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> a la valeur <see langword="null" />, et le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver d’implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
 <paramref name="array" /> n’a pas d’indexation de base zéro.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.  
  
- ou - 
Le type du <see cref="T:System.Collections.ICollection" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Ajoute un élément à <see cref="T:System.Collections.IList" />.</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> à ajouter à <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> est d’un type qui ne peut pas être assigné à <see cref="T:System.Collections.IList" />.</exception>
      <returns vsli:raw="The position into which the new element was inserted.">Position à laquelle le nouvel élément est inséré.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">Détermine si <see cref="T:System.Collections.IList" /> contient une valeur spécifique.</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> existe dans <see cref="T:System.Collections.IList" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Détermine l'index d'un élément spécifique d'<see cref="T:System.Collections.IList" />.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Objet à rechercher dans <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> est d’un type qui ne peut pas être assigné à <see cref="T:System.Collections.IList" />.</exception>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if found in the list; otherwise, -1.">Index de <paramref name="item" /> s'il figure dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified index.">Insère un élément dans <see cref="T:System.Collections.IList" /> à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="item" /> doit être inséré.</param>
      <param name="item" vsli:raw="The object to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Objet à insérer dans <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="index" /> n’est pas un index valide dans <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> est d’un type qui ne peut pas être assigné à <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Supprime la première occurrence d’un objet spécifique de <see cref="T:System.Collections.IList" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Objet à supprimer de <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> est d’un type qui ne peut pas être assigné à <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a new array.">Copie les éléments de <see cref="T:System.Collections.Generic.List`1" /> dans un nouveau tableau.</summary>
      <returns vsli:raw="An array containing copies of the elements of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Tableau contenant les copies des éléments de <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if that number is less than a threshold value.">Définit la capacité en fonction du nombre effectif d'éléments situés dans <see cref="T:System.Collections.Generic.List`1" />, si ce nombre est inférieur à une valeur de seuil.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; matches the conditions defined by the specified predicate.">Détermine si chaque élément de <see cref="T:System.Collections.Generic.List`1" /> correspond aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions to check against the elements.">Délégué <see cref="T:System.Predicate`1" /> qui définit les conditions à vérifier par rapport aux éléments.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si chaque élément de <see cref="T:System.Collections.Generic.List`1" /> correspond aux conditions définies par le prédicat spécifié ; sinon, <see langword="false" />. Si la liste ne comporte pas d'éléments, la valeur de retour est <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary vsli:raw="Gets or sets the total number of elements the internal data structure can hold without resizing.">Obtient ou définit le nombre total des éléments que la structure de données interne peut contenir sans redimensionnement.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;see cref=&quot;P:System.Collections.Generic.List`1.Capacity&quot; /&gt; is set to a value that is less than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">La valeur affectée à <see cref="P:System.Collections.Generic.List`1.Capacity" /> est inférieure à <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is not enough memory available on the system.">Il n’y a pas assez de mémoire disponible sur le système.</exception>
      <returns vsli:raw="The number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; can contain before resizing is required.">Nombre d'éléments que <see cref="T:System.Collections.Generic.List`1" /> peut contenir avant que le redimensionnement soit nécessaire.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Obtient le nombre d’éléments contenus dans le <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Obtient ou définit l'élément au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Index de base zéro de l'élément à obtenir ou à définir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à 0.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
      <returns vsli:raw="The element at the specified index.">Élément au niveau de l'index spécifié.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.List`1" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.List`1" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns the current instance.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.List`1" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtient une valeur indiquant si <see cref="T:System.Collections.IList" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est de taille fixe ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.List`1" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.IList" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est en lecture seule ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.List`1" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Obtient ou définit l'élément au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Index de base zéro de l'élément à obtenir ou à définir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="index" /> n’est pas un index valide dans <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The property is set and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">La propriété est définie et <paramref name="value" /> a un type qui ne peut pas être assigné à <see cref="T:System.Collections.IList" />.</exception>
      <returns vsli:raw="The element at the specified index.">Élément au niveau de l'index spécifié.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Énumère les éléments d'un élément <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.List`1.Enumerator&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.List`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Avance l'énumérateur à l'élément suivant du <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the current position of the enumerator.">Élément situé dans le <see cref="T:System.Collections.Generic.List`1" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the current position of the enumerator.">Élément situé dans le <see cref="T:System.Collections.Generic.List`1" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary vsli:raw="Represents a first-in, first-out collection of objects.">Représente une collection d’objets premier entré, premier sorti.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of elements in the queue.">Spécifie le type d'éléments dans la file d'attente.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that is empty and has the default initial capacity.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Queue`1" /> qui est vide et possède la capacité initiale par défaut.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Queue`1" /> qui contient des éléments copiés à partir de la collection spécifiée et qui possède une capacité suffisante pour accepter le nombre d’éléments copiés.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Collection dont les éléments sont copiés dans la nouvelle <see cref="T:System.Collections.Generic.Queue`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that is empty and has the specified initial capacity.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Queue`1" /> qui est vide et a la capacité initiale spécifiée.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; can contain.">Nombre initial d'éléments que <see cref="T:System.Collections.Generic.Queue`1" /> peut contenir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Supprime tous les objets du <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Détermine si le <see cref="T:System.Collections.Generic.Queue`1" /> contient un élément.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à rechercher dans <see cref="T:System.Collections.Generic.Queue`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> existe dans <see cref="T:System.Collections.Generic.Queue`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">Copie les éléments <see cref="T:System.Collections.Generic.Queue`1" /> dans un <see cref="T:System.Array" /> unidimensionnel existant, en commençant au niveau de l'index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.Queue`1" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.Queue`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary vsli:raw="Removes and returns the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Supprime et renvoie l'objet au début de la <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">La <see cref="T:System.Collections.Generic.Queue`1" /> est vide.</exception>
      <returns vsli:raw="The object that is removed from the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Objet supprimé du début de la <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an object to the end of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Ajoute un objet à la fin de la <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à ajouter à <see cref="T:System.Collections.Generic.Queue`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.Queue`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> pour <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary vsli:raw="Returns the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; without removing it.">Renvoie l'objet situé au début de la <see cref="T:System.Collections.Generic.Queue`1" /> sans le supprimer.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">La <see cref="T:System.Collections.Generic.Queue`1" /> est vide.</exception>
      <returns vsli:raw="The object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Objet situé au début de la <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
 <paramref name="array" /> n’a pas d’indexation de base zéro.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.  
  
- ou - 
Le type du <see cref="T:System.Collections.ICollection" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; elements to a new array.">Copie les éléments <see cref="T:System.Collections.Generic.Queue`1" /> vers un nouveau tableau.</summary>
      <returns vsli:raw="A new array containing elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Nouveau tableau contenant les éléments copiés à partir de <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, if that number is less than 90 percent of current capacity.">Définit la capacité au nombre réel d'éléments dans <see cref="T:System.Collections.Generic.Queue`1" />, si ce nombre est inférieur à 90 pour cent de la capacité actuelle.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)">
      <summary vsli:raw="Removes the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, and copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter.">Supprime l’objet au début du et le <see cref="T:System.Collections.Generic.Queue`1" /> copie dans le <paramref name="result" /> paramètre.</summary>
      <param name="result" vsli:raw="The removed object.">Objet supprimé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is successfully removed; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">
        <see langword="true" /> Si l’objet est supprimé avec succès ; <see langword="false" /> si <see cref="T:System.Collections.Generic.Queue`1" /> est vide.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryPeek(`0@)">
      <summary vsli:raw="Returns a value that indicates whether there is an object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, and if one is present, copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter. The object is not removed from the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Retourne une valeur qui indique s’il existe un objet au début de <see cref="T:System.Collections.Generic.Queue`1" /> et, le cas échéant, le copie dans le <paramref name="result" /> paramètre. L’objet n’est pas supprimé de <see cref="T:System.Collections.Generic.Queue`1" /> .</summary>
      <param name="result" vsli:raw="If present, the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;.">S’il est présent, l’objet situé au début de <see cref="T:System.Collections.Generic.Queue`1" /> ; sinon, la valeur par défaut de <typeparamref name="T" /> .</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">
        <see langword="true" /> s’il existe un objet au début de <see cref="T:System.Collections.Generic.Queue`1" /> ; <see langword="false" /> si le <see cref="T:System.Collections.Generic.Queue`1" /> est vide.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Obtient le nombre d’éléments contenus dans le <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Queue`1" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, this property always returns the current instance.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Queue`1" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Énumère les éléments d'un élément <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1.Enumerator&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Avance l'énumérateur à l'élément suivant du <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; at the current position of the enumerator.">Élément situé dans le <see cref="T:System.Collections.Generic.Queue`1" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="T:System.Collections.Generic.ReferenceEqualityComparer">
      <summary vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; that uses reference equality (&lt;see cref=&quot;M:System.Object.ReferenceEquals(System.Object,System.Object)&quot; /&gt;) instead of value equality (&lt;see cref=&quot;M:System.Object.Equals(System.Object)&quot; /&gt;) when comparing two object instances.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> qui utilise l’égalité des références (<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />) au lieu de l’égalité des valeurs (<see cref="M:System.Object.Equals(System.Object)" />) lors de la comparaison de deux instances d’objet.</summary>
    </member>
    <member name="M:System.Collections.Generic.ReferenceEqualityComparer.Equals(System.Object,System.Object)">
      <summary vsli:raw="Determines whether two object references refer to the same object instance.">Détermine si deux références d’objet font référence à la même instance d’objet.</summary>
      <param name="x" vsli:raw="The first object to compare.">Premier objet à comparer.</param>
      <param name="y" vsli:raw="The second object to compare.">Deuxième objet à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; refer to the same object instance or if both are &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> font référence à la même instance d’objet ou si les deux sont <see langword="null" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.ReferenceEqualityComparer.GetHashCode(System.Object)">
      <summary vsli:raw="Returns a hash code for the specified object. The returned hash code is based on the object identity, not on the contents of the object.">Retourne un code de hachage pour l'objet spécifié. Le code de hachage retourné est basé sur l’identité de l’objet, et non sur le contenu de l’objet.</summary>
      <param name="obj" vsli:raw="The object for which to retrieve the hash code.">Objet pour lequel récupérer le code de hachage.</param>
      <returns vsli:raw="A hash code for the identity of &lt;paramref name=&quot;obj&quot; /&gt;.">Code de hachage pour l’identité de <paramref name="obj" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.ReferenceEqualityComparer.Instance">
      <summary vsli:raw="Gets the singleton &lt;see cref=&quot;T:System.Collections.Generic.ReferenceEqualityComparer&quot; /&gt; instance.">Obtient l’instance <see cref="T:System.Collections.Generic.ReferenceEqualityComparer" /> de singleton.</summary>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary vsli:raw="Represents a collection of key/value pairs that are sorted on the key.">Représente une collection de paires clé/valeur triées sur la clé.</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that is empty and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation for the key type.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> vide et utilise l'implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> par défaut pour le type de clé.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that is empty and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to compare keys.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> vide et utilise l'implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> spécifiée pour comparer les clés.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">Implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> à utiliser pendant la comparaison de clés, ou <see langword="null" /> pour utiliser le <see cref="T:System.Collections.Generic.Comparer`1" /> par défaut pour le type de la clé.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation for the key type.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> qui contient des éléments copiés du <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié et utilise l'implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> par défaut pour le type de clé.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contient une ou plusieurs clés en double.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to compare keys.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> qui contient des éléments copiés à partir du <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié et utilise l'implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> spécifiée pour comparer les clés.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">Implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> à utiliser pendant la comparaison de clés, ou <see langword="null" /> pour utiliser le <see cref="T:System.Collections.Generic.Comparer`1" /> par défaut pour le type de la clé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contient une ou plusieurs clés en double.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value into the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Ajoute un élément avec la clé et la valeur spécifiées dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur de l'élément à ajouter. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Supprime tous les éléments de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key.">Détermine si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Clé à rechercher dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified value.">Détermine si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contient un élément avec la clé spécifiée.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur à trouver dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contient un élément correspondant à la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; to the specified array of &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structures, starting at the specified index.">Copie les éléments de <see cref="T:System.Collections.Generic.SortedDictionary`2" /> dans le tableau de structures <see cref="T:System.Collections.Generic.KeyValuePair`2" /> spécifié, en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional array of &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structures that is the destination of the elements copied from the current &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; The array must have zero-based indexing.">Tableau unidimensionnel de structures <see cref="T:System.Collections.Generic.KeyValuePair`2" /> qui correspond à la destination des éléments copiés à partir du <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Le tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.SortedDictionary`2" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> pour l'objet <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Supprime l'élément avec la clé spécifiée d'<see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see langword="true" /> si la suppression de l'élément réussit ; sinon, <see langword="false" />.  Cette méthode retourne également <see langword="false" /> si <paramref name="key" /> est introuvable dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Ajoute un élément à <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Structure <see cref="T:System.Collections.Generic.KeyValuePair`2" /> à ajouter à <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyValuePair" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific key and value.">Détermine si <see cref="T:System.Collections.Generic.ICollection`1" /> contient une clé et une valeur spécifiques.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Structure <see cref="T:System.Collections.Generic.KeyValuePair`2" /> à rechercher dans <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="keyValuePair" /> existe dans <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of the specified element from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Supprime la première occurrence de l'élément spécifié dans <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Structure <see cref="T:System.Collections.Generic.KeyValuePair`2" /> à supprimer de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> si <paramref name="keyValuePair" /> a été correctement supprimé de <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="keyValuePair" /> est introuvable dans <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array, starting at the specified array index.">Copie les éléments de l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> dans un tableau, en commençant au niveau d'un index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">Le tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.ICollection`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
 <paramref name="array" /> n’a pas d’indexation de base zéro.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.ICollection`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.  
  
- ou - 
Le type du <see cref="T:System.Collections.Generic.ICollection`1" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Ajoute un élément avec la clé et la valeur fournies à <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Objet à utiliser comme clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">Objet à utiliser comme valeur de l'élément à ajouter.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <paramref name="key" /> a un type qui ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.IDictionary" />.  
  
- ou - 
 <paramref name="value" /> a un type qui ne peut pas être assigné au type valeur <paramref name="TValue" /> de <see cref="T:System.Collections.IDictionary" />.  
  
- ou - 
Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.IDictionary" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">Détermine si <see cref="T:System.Collections.IDictionary" /> contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Clé à rechercher dans <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Retourne un <see cref="T:System.Collections.IDictionaryEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Supprime l'élément avec la clé spécifiée d'<see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtient la valeur associée à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the value to get.">Clé de la valeur à obtenir.</param>
      <param name="value" vsli:raw="When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Lorsque cette méthode est retournée, la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, la valeur par défaut pour le type du paramètre <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; used to order the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtient le <see cref="T:System.Collections.Generic.IComparer`1" /> utilisé pour ordonnancer les éléments du <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; used to order the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;">
        <see cref="T:System.Collections.Generic.IComparer`1" /> utilisé pour ordonnancer les éléments du <see cref="T:System.Collections.Generic.SortedDictionary`2" /></returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtient le nombre de paires clé/valeur contenues dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Nombre de paires clé/valeur contenues dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">Obtient ou définit la valeur associée à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">Clé de la valeur à obtenir ou à définir.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">La propriété est récupérée et <paramref name="key" /> n’existe pas dans la collection.</exception>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt;, and a set operation creates a new element with the specified key.">Valeur associée à la clé spécifiée. Si la clé spécifiée est introuvable, une opération Get retourne <see cref="T:System.Collections.Generic.KeyNotFoundException" /> et une opération Set crée un nouvel élément avec la clé spécifiée.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtient une collection contenant les clés dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> contenant les clés de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />. Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtient une collection contenant les clés dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="A collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Collection contenant les clés dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtient une collection contenant les valeurs dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="A collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Collection contenant les valeurs de <see cref="T:System.Collections.Generic.SortedDictionary`2" /> .</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">Obtient une valeur indiquant si <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> est de taille fixe ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.IDictionary" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> est en lecture seule ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the element to get.">Clé de l'élément à obtenir.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Une valeur est assignée et <paramref name="key" /> a un type qui ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.  
  
- ou - 
Une valeur est assignée et <paramref name="value" /> a un type qui ne peut pas être assigné au type valeur <paramref name="TValue" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
      <returns vsli:raw="The element with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Élément avec la clé spécifiée, ou <see langword="null" /> si <paramref name="key" /> ne figure pas dans le dictionnaire ou si le type de <paramref name="key" /> ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtient un <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtient <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtient une collection contenant les valeurs dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> contenant les valeurs de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Énumère les éléments d'un élément <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.Enumerator&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Avance l'énumérateur à l'élément suivant du <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; at the current position of the enumerator.">Élément situé dans le <see cref="T:System.Collections.Generic.SortedDictionary`2" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary vsli:raw="Gets the element at the current position of the enumerator as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt; structure.">Obtient l’élément à la position actuelle de l’énumérateur sous la forme d’une structure <see cref="T:System.Collections.DictionaryEntry" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the dictionary, as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt; structure.">Élément dans la collection à la position actuelle du dictionnaire, sous la forme d'une structure <see cref="T:System.Collections.DictionaryEntry" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary vsli:raw="Gets the key of the element at the current position of the enumerator.">Obtient la clé de l’élément à la position actuelle de l’énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The key of the element in the collection at the current position of the enumerator.">Clé de l'élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary vsli:raw="Gets the value of the element at the current position of the enumerator.">Obtient la valeur de l’élément à la position actuelle de l’énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The value of the element in the collection at the current position of the enumerator.">Valeur de l'élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary vsli:raw="Represents the collection of keys in a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. This class cannot be inherited.">Représente la collection de clés dans <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Cette classe ne peut pas être héritée.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; class that reflects the keys in the specified &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> qui reflète les clés dans le <see cref="T:System.Collections.Generic.SortedDictionary`2" /> spécifié.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; whose keys are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> dont les clés sont reflétées dans le nouveau <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; elements to an existing one-dimensional array, starting at the specified array index.">Copie les éléments <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> dans un tableau unidimensionnel existant commençant au niveau de l'index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;. The array must have zero-based indexing.">Le tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Structure <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> pour l'objet <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Ajoute un élément à <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objet à ajouter à <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Toujours levée ; la collection est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Supprime tous les éléments de <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Toujours levée ; la collection est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Détermine si le <see cref="T:System.Collections.Generic.ICollection`1" /> contient la valeur spécifiée.</summary>
      <param name="item">Objet à rechercher dans <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> si l'élément est trouvé dans <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Supprime la première occurrence d’un objet spécifique de <see cref="T:System.Collections.Generic.ICollection`1" />.  Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objet à supprimer de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Toujours levée ; la collection est en lecture seule.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> si l’élément est correctement supprimé de <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si l’élément est introuvable dans <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at a particular array index.">Copie les éléments d'<see cref="T:System.Collections.ICollection" /> dans un tableau, en commençant au niveau d'un index de tableau particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">Le tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
 <paramref name="array" /> n’a pas d’indexation de base zéro.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.  
  
- ou - 
Le type du <see cref="T:System.Collections.ICollection" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Obtient le nombre d’éléments contenus dans le <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Énumère les éléments d'un élément <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Avance l'énumérateur à l'élément suivant du <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; at the current position of the enumerator.">Élément situé dans le <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary vsli:raw="Represents the collection of values in a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. This class cannot be inherited.">Représente la collection de valeurs dans un <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Cette classe ne peut pas être héritée.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; class that reflects the values in the specified &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> qui reflète les valeurs dans le <see cref="T:System.Collections.Generic.SortedDictionary`2" /> spécifié.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; whose values are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> dont les valeurs sont reflétées dans le nouveau <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; elements to an existing one-dimensional array, starting at the specified array index.">Copie les éléments <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> dans un tableau unidimensionnel existant commençant au niveau de l'index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;. The array must have zero-based indexing.">Le tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Structure <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> pour l'objet <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Ajoute un élément à <see cref="T:System.Collections.Generic.ICollection`1" />. Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objet à ajouter à <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Toujours levée ; la collection est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Supprime tous les éléments de <see cref="T:System.Collections.Generic.ICollection`1" />. Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Toujours levée ; la collection est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specified value.">Détermine si <see cref="T:System.Collections.Generic.ICollection`1" /> contient une valeur spécifiée.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objet à rechercher dans <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> existe dans <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Supprime la première occurrence d’un objet spécifique de <see cref="T:System.Collections.Generic.ICollection`1" />. Cette implémentation lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objet à supprimer de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Toujours levée ; la collection est en lecture seule.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé de <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="item" /> est introuvable dans <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at a particular array index.">Copie les éléments d'<see cref="T:System.Collections.ICollection" /> dans un tableau, en commençant au niveau d'un index de tableau particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">Le tableau unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
 <paramref name="array" /> n’a pas d’indexation de base zéro.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.  
  
- ou - 
Le type du <see cref="T:System.Collections.ICollection" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Obtient le nombre d’éléments contenus dans le <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns the current instance.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Énumère les éléments d'un élément <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Avance l'énumérateur à l'élément suivant du <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; at the current position of the enumerator.">Élément situé dans le <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedList`2">
      <summary vsli:raw="Represents a collection of key/value pairs that are sorted by key based on the associated &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation.">Représente une collection de paires clé/valeur triées par clé en fonction de l'implémentation <see cref="T:System.Collections.Generic.IComparer`1" /> associée.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the collection.">Type de clés de la collection.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the collection.">Type de valeurs de la collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedList`2" /> qui est vide, possède la capacité initiale par défaut et utilise le <see cref="T:System.Collections.Generic.IComparer`1" /> par défaut.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedList`2" /> qui est vide, possède la capacité initiale par défaut et utilise le <see cref="T:System.Collections.Generic.IComparer`1" /> spécifié.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">Implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> à utiliser lors de la comparaison de clés.  
  
- ou - 
 <see langword="null" /> pour utiliser <see cref="T:System.Collections.Generic.Comparer`1" /> par défaut pour le type de la clé.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, has sufficient capacity to accommodate the number of elements copied, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedList`2" /> qui contient des éléments copiés à partir du <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié, possède une capacité suffisante pour accepter le nombre d'éléments copiés et utilise le <see cref="T:System.Collections.Generic.IComparer`1" /> par défaut.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contient une ou plusieurs clés en double.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, has sufficient capacity to accommodate the number of elements copied, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedList`2" /> qui contient des éléments copiés à partir du <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié, possède une capacité suffisante pour accepter le nombre d'éléments copiés et utilise le <see cref="T:System.Collections.Generic.IComparer`1" /> spécifié.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> dont les éléments sont copiés dans le nouveau <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">Implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> à utiliser lors de la comparaison de clés.  
  
- ou - 
 <see langword="null" /> pour utiliser <see cref="T:System.Collections.Generic.Comparer`1" /> par défaut pour le type de la clé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contient une ou plusieurs clés en double.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedList`2" /> qui est vide, possède la capacité initiale spécifiée et utilise le <see cref="T:System.Collections.Generic.IComparer`1" /> par défaut.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">Nombre initial d'éléments que <see cref="T:System.Collections.Generic.SortedList`2" /> peut contenir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedList`2" /> qui est vide, possède la capacité initiale spécifiée et utilise le <see cref="T:System.Collections.Generic.IComparer`1" /> spécifié.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">Nombre initial d'éléments que <see cref="T:System.Collections.Generic.SortedList`2" /> peut contenir.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">Implémentation de <see cref="T:System.Collections.Generic.IComparer`1" /> à utiliser lors de la comparaison de clés.  
  
- ou - 
 <see langword="null" /> pour utiliser <see cref="T:System.Collections.Generic.Comparer`1" /> par défaut pour le type de la clé.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value into the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Ajoute un élément avec la clé et la valeur spécifiées dans <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur de l'élément à ajouter. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.Generic.SortedList`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Supprime tous les éléments de <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains a specific key.">Détermine si <see cref="T:System.Collections.Generic.SortedList`2" /> contient une clé spécifique.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Clé à rechercher dans <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.SortedList`2" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains a specific value.">Détermine si <see cref="T:System.Collections.Generic.SortedList`2" /> contient une valeur spécifique.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur à trouver dans <see cref="T:System.Collections.Generic.SortedList`2" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.SortedList`2" /> contient un élément correspondant à la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> de type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> pour <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
      <summary vsli:raw="Searches for the specified key and returns the zero-based index within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Recherche la clé spécifiée et retourne l'index de base zéro dans le <see cref="T:System.Collections.Generic.SortedList`2" /> entier.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Clé à rechercher dans <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;key&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de <paramref name="key" /> dans le <see cref="T:System.Collections.Generic.SortedList`2" /> entier, si elle existe ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
      <summary vsli:raw="Searches for the specified value and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Recherche la valeur spécifiée et retourne l'index de base zéro de la première occurrence dans l'ensemble du <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.  The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur à trouver dans <see cref="T:System.Collections.Generic.SortedList`2" />.  La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la première occurrence de <paramref name="value" /> dans l'ensemble du <see cref="T:System.Collections.Generic.SortedList`2" />, s'il existe ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Supprime de <see cref="T:System.Collections.Generic.SortedList`2" /> l'élément ayant la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see langword="true" /> si la suppression de l'élément réussit ; sinon, <see langword="false" />.  Cette méthode retourne également <see langword="false" /> si <paramref name="key" /> est introuvable dans le <see cref="T:System.Collections.Generic.SortedList`2" /> d'origine.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Supprime l'élément au niveau de l'index spécifié de <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Ajoute une paire clé/valeur à <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> à ajouter à <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific element.">Détermine si <see cref="T:System.Collections.Generic.ICollection`1" /> contient un élément spécifique.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> à rechercher dans <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="keyValuePair" /> existe dans <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copie les éléments de <see cref="T:System.Collections.Generic.ICollection`1" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.ICollection`1" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.ICollection`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific key/value pair from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Supprime de <see cref="T:System.Collections.Generic.ICollection`1" /> la première occurrence d'une paire clé/valeur spécifique.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> à supprimer de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> si <paramref name="keyValuePair" /> a été correctement supprimé de <see cref="T:System.Collections.Generic.ICollection`1" /> ; sinon <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="keyValuePair" /> est introuvable dans le <see cref="T:System.Collections.Generic.ICollection`1" /> d'origine.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
 <paramref name="array" /> n’a pas d’indexation de base zéro.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.  
  
- ou - 
Le type du <see cref="T:System.Collections.ICollection" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Ajoute un élément avec la clé et la valeur fournies à <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">
        <see cref="T:System.Object" /> à utiliser comme clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">
        <see cref="T:System.Object" /> à utiliser comme valeur de l'élément à ajouter.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <paramref name="key" /> a un type qui ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.IDictionary" />.  
  
- ou - 
 <paramref name="value" /> a un type qui ne peut pas être assigné au type valeur <paramref name="TValue" /> de <see cref="T:System.Collections.IDictionary" />.  
  
- ou - 
Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.IDictionary" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">Détermine si <see cref="T:System.Collections.IDictionary" /> contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Clé à rechercher dans <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Retourne un <see cref="T:System.Collections.IDictionaryEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Supprime de <see cref="T:System.Collections.IDictionary" /> l'élément ayant la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if that number is less than 90 percent of current capacity.">Définit la capacité au nombre réel d'éléments dans <see cref="T:System.Collections.Generic.SortedList`2" />, si ce nombre est inférieur à 90 pour cent de la capacité actuelle.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtient la valeur associée à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key whose value to get.">Clé dont la valeur doit être obtenue.</param>
      <param name="value" vsli:raw="When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, la valeur par défaut pour le type du paramètre <paramref name="value" />. Ce paramètre est passé sans être initialisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.SortedList`2" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Capacity">
      <summary vsli:raw="Gets or sets the number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">Obtient ou définit le nombre d'éléments que <see cref="T:System.Collections.Generic.SortedList`2" /> peut contenir.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Capacity&quot; /&gt; is set to a value that is less than &lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Count&quot; /&gt;.">La valeur affectée à <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> est inférieure à <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is not enough memory available on the system.">Il n’y a pas assez de mémoire disponible sur le système.</exception>
      <returns vsli:raw="The number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">Nombre initial d'éléments que <see cref="T:System.Collections.Generic.SortedList`2" /> peut contenir.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; for the sorted list.">Obtient <see cref="T:System.Collections.Generic.IComparer`1" /> pour la liste triée.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; for the current &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.IComparable`1" /> pour la <see cref="T:System.Collections.Generic.SortedList`2" /> actuelle.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Obtient le nombre de paires clé/valeur contenues dans <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Nombre de paires clé/valeur contenues dans <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">Obtient ou définit la valeur associée à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key whose value to get or set.">Clé dont la valeur doit être obtenue ou définie.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">La propriété est récupérée et <paramref name="key" /> n’existe pas dans la collection.</exception>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt; and a set operation creates a new element using the specified key.">Valeur associée à la clé spécifiée. Si la clé spécifiée est introuvable, une opération Get retourne <see cref="T:System.Collections.Generic.KeyNotFoundException" /> et une opération Set crée un élément à l'aide de la clé spécifiée.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, in sorted order.">Obtient une collection contenant les clés de la <see cref="T:System.Collections.Generic.SortedList`2" />, dans un ordre trié.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IList`1" /> contenant les clés de <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />. Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedList`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An object containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Objet contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" /> .</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an enumerable collection that contains the keys in the read-only dictionary.">Obtient une collection énumérable qui contient les clés dans dictionnaire en lecture seule.</summary>
      <returns vsli:raw="An enumerable collection that contains the keys in the read-only dictionary.">Collection énumérable qui contient les clés dans dictionnaire en lecture seule.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an enumerable collection that contains the values in the read-only dictionary.">Obtient une collection énumérable qui contient les valeurs dans dictionnaire en lecture seule.</summary>
      <returns vsli:raw="An enumerable collection that contains the values in the read-only dictionary.">Collection énumérable qui contient les valeurs dans dictionnaire en lecture seule.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedList`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns the current instance.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedList`2" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">Obtient une valeur indiquant si <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> est de taille fixe ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedList`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.IDictionary" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> est en lecture seule ; sinon, <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.SortedList`2" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">Clé de l'élément à obtenir ou définir.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Une valeur est assignée et <paramref name="key" /> a un type qui ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedList`2" />.  
  
- ou - 
Une valeur est assignée et <paramref name="value" /> a un type qui ne peut pas être assigné au type valeur <paramref name="TValue" /> de <see cref="T:System.Collections.Generic.SortedList`2" />.</exception>
      <returns vsli:raw="The element with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Élément avec la clé spécifiée, ou <see langword="null" /> si <paramref name="key" /> ne figure pas dans le dictionnaire ou si le type de <paramref name="key" /> ne peut pas être assigné au type de clé <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtient un <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtient <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Obtient une collection contenant les valeurs dans <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IList`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary vsli:raw="Represents a collection of objects that is maintained in sorted order.">Représente une collection d’objets tenue à jour en ordre trié.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">Type d'éléments de l'ensemble.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that uses a specified comparer.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedSet`1" /> qui utilise un comparateur spécifié.</summary>
      <param name="comparer" vsli:raw="The default comparer to use for comparing objects.">Comparateur par défaut à utiliser pour la comparaison d'objets.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains elements copied from a specified enumerable collection.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedSet`1" /> qui contient des éléments copiés d'une collection énumérable spécifiée.</summary>
      <param name="collection" vsli:raw="The enumerable collection to be copied.">Collection énumérable à copier.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains elements copied from a specified enumerable collection and that uses a specified comparer.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedSet`1" /> qui contient des éléments copiés d'une collection énumérable spécifiée et qui utilise un comparateur spécifié.</summary>
      <param name="collection" vsli:raw="The enumerable collection to be copied.">Collection énumérable à copier.</param>
      <param name="comparer" vsli:raw="The default comparer to use for comparing objects.">Comparateur par défaut à utiliser pour la comparaison d'objets.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains serialized data.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.SortedSet`1" /> qui contient des données sérialisées.</summary>
      <param name="info" vsli:raw="The object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Objet qui contient les informations nécessaires pour sérialiser l'objet <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context" vsli:raw="The structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Structure qui contient la source et la destination du flux sérialisé associé à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary vsli:raw="Adds an element to the set and returns a value that indicates if it was successfully added.">Ajoute un élément à l'ensemble et retourne une valeur qui indique si l'ajout a réussi.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Élément à ajouter à l'ensemble.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is added to the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> est ajouté à l'ensemble ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the set.">Supprime tous les éléments du jeu.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains a specific element.">Détermine si l'ensemble contient un élément spécifique.</summary>
      <param name="item" vsli:raw="The element to locate in the set.">Élément à rechercher dans l'ensemble.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains &lt;paramref name=&quot;item&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'ensemble contient <paramref name="item" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the beginning of the target array.">Copie l'ensemble du <see cref="T:System.Collections.Generic.SortedSet`1" /> dans un tableau unidimensionnel compatible, en commençant au début du tableau cible.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; exceeds the number of elements that the destination array can contain.">Le nombre d'éléments dans le <see cref="T:System.Collections.Generic.SortedSet`1" /> source est supérieur au nombre d'éléments que le tableau de destination peut contenir.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">Copie l'ensemble du <see cref="T:System.Collections.Generic.SortedSet`1" /> dans un tableau unidimensionnel compatible, en commençant au niveau de l'index spécifié du tableau.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du <see cref="T:System.Collections.Generic.SortedSet`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">Le nombre d'éléments dans le tableau source est supérieur à la quantité d'espace disponible entre <paramref name="index" /> et la fin du tableau de destination.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a specified number of elements from &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">Copie un nombre d'éléments spécifié à partir de <see cref="T:System.Collections.Generic.SortedSet`1" /> dans un tableau unidimensionnel compatible en commençant au niveau de l'index spécifié du tableau.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du <see cref="T:System.Collections.Generic.SortedSet`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Nombre d’éléments à copier.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">Le nombre d'éléments dans le tableau source est supérieur à la quantité d'espace disponible entre <paramref name="index" /> et la fin du tableau de destination.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="count" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used to create a collection that contains individual sets.">Retourne un objet <see cref="T:System.Collections.IEqualityComparer" /> qui peut être utilisé pour créer une collection qui contient des jeux individuels.</summary>
      <returns vsli:raw="A comparer for creating a collection of sets.">Comparateur pour la création d’une collection d’ensembles.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object, according to a specified comparer, that can be used to create a collection that contains individual sets.">Retourne un objet <see cref="T:System.Collections.IEqualityComparer" />, d'après un comparateur spécifié, qui peut être utilisé pour créer une collection qui contient des ensembles individuels.</summary>
      <param name="memberEqualityComparer" vsli:raw="The comparer to use for creating the returned comparer.">Comparateur à utiliser pour la création du comparateur retourné.</param>
      <returns vsli:raw="A comparer for creating a collection of sets.">Comparateur pour la création d’une collection d’ensembles.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements that are in a specified collection from the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Supprime tous les éléments figurant dans la collection spécifiée de l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Collection d’éléments à supprimer de l’objet <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns vsli:raw="An enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in sorted order.">Énumérateur qui itère au sein du <see cref="T:System.Collections.Generic.SortedSet`1" /> selon un tri spécifié.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data that you must have to serialize a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Implémente l'interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et retourne les données requises pour sérialiser un objet <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les informations nécessaires pour sérialiser l’objet <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Structure de <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient la source et la destination du flux sérialisé associé à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary vsli:raw="Returns a view of a subset in a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Retourne une vue d'un sous-ensemble dans un <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="lowerValue" vsli:raw="The lowest desired value in the view.">Valeur la plus faible souhaitée dans la vue.</param>
      <param name="upperValue" vsli:raw="The highest desired value in the view.">Valeur la plus élevée souhaitée dans la vue.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;lowerValue&quot; /&gt; is more than &lt;paramref name=&quot;upperValue&quot; /&gt; according to the comparer.">
        <paramref name="lowerValue" /> est supérieur à <paramref name="upperValue" /> d'après le comparateur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="A tried operation on the view was outside the range specified by &lt;paramref name=&quot;lowerValue&quot; /&gt; and &lt;paramref name=&quot;upperValue&quot; /&gt;.">Une opération éprouvée sur la vue était à l'extérieur de la plage spécifiée par <paramref name="lowerValue" /> et <paramref name="upperValue" />.</exception>
      <returns vsli:raw="A subset view that contains only the values in the specified range.">Vue de sous-ensemble qui contient uniquement les valeurs de la plage spécifiée.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains only elements that are also in a specified collection.">Modifie l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel afin qu'il contienne uniquement les éléments qui figurent également dans une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper subset of the specified collection.">Détermine si un objet <see cref="T:System.Collections.Generic.SortedSet`1" /> appartient à la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> appartient à l'élément <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper superset of the specified collection.">Détermine si un objet <see cref="T:System.Collections.Generic.SortedSet`1" /> contient la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> contient l'élément <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a subset of the specified collection.">Détermine si un objet <see cref="T:System.Collections.Generic.SortedSet`1" /> est un sous-ensemble de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel est un sous-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a superset of the specified collection.">Détermine si un objet <see cref="T:System.Collections.Generic.SortedSet`1" /> est un sur-ensemble de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> est un sur-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface, and raises the deserialization event when the deserialization is completed.">Implémente l'interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et déclenche l'événement de désérialisation une fois que la désérialisation est terminée.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Source de l'événement de désérialisation.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is invalid.">L'objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associé à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel n'est pas valide.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and a specified collection share common elements.">Détermine si l’objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif et une collection spécifiée partagent des éléments communs.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> et l'élément <paramref name="other" /> partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes a specified item from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Supprime un élément spécifié de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="item" vsli:raw="The element to remove.">Élément à supprimer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is found and successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la recherche et la suppression de l'élément réussissent ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary vsli:raw="Removes all elements that match the conditions defined by the specified predicate from a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié de la collection <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Délégué qui définit les conditions des éléments à supprimer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="The number of elements that were removed from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; collection.">Nombre d'éléments supprimés de la collection <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in reverse order.">Retourne un <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui itère dans l'ordre inverse au sein de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns vsli:raw="An enumerator that iterates over the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in reverse order.">Énumérateur qui itère dans l'ordre inverse au sein de <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and the specified collection contain the same elements.">Détermine si l'objet <see cref="T:System.Collections.Generic.SortedSet`1" />actif et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif est égal à <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains only elements that are present either in the current object or in the specified collection, but not both.">Modifie l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel afin qu'il contienne uniquement les éléments présents dans l'objet actuel ou dans la collection spécifiée, mais pas dans les deux à la fois.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">Ajoute un élément à un objet <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">Objet à ajouter à l'objet <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">Copie l'ensemble du <see cref="T:System.Collections.Generic.SortedSet`1" /> dans un tableau unidimensionnel compatible, en commençant au niveau de l'index spécifié du tableau.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du <see cref="T:System.Collections.Generic.SortedSet`1" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">Le nombre d'éléments dans le tableau source est supérieur à la quantité d'espace disponible entre <paramref name="index" /> et la fin du tableau de destination.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.IDeserializationCallback&quot; /&gt; interface, and raises the deserialization event when the deserialization is completed.">Implémente l'interface <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> et déclenche l'événement de désérialisation une fois que la désérialisation est terminée.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Source de l'événement de désérialisation.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance is invalid.">L’objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associé à l’instance de <see cref="T:System.Collections.Generic.SortedSet`1" /> actuelle n’est pas valide.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface, and returns the data that you need to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Implémente l'interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et retourne les données requises pour sérialiser l'instance de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les informations nécessaires pour sérialiser l'instance de <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Structure <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient la source et la destination du flux sérialisé associé à l'instance <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Recherche dans l’ensemble une valeur donnée et retourne la valeur égale qu’il trouve, le cas échéant.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">La valeur à rechercher.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the default value of T when the search yielded no match.">Valeur de l’ensemble que la recherche a trouvée, ou valeur par défaut de T quand la recherche n’a trouvé aucune correspondance.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Valeur qui indique si la recherche a réussi.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains all elements that are present in either the current object or the specified collection.">Modifie l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actuel afin qu'il contienne tous les éléments présents dans l'objet actif ou dans la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Collection à comparer à l'objet <see cref="T:System.Collections.Generic.SortedSet`1" /> actif.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; object that is used to order the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Obtient l’objet <see cref="T:System.Collections.Generic.IComparer`1" /> qui est utilisé pour ordonner les valeurs du <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns vsli:raw="The comparer that is used to order the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Le comparateur qui est utilisé pour ordonner les valeurs du <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Obtient le nombre d’éléments dans <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns vsli:raw="The number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Nombre d'éléments dans <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;, as defined by the comparer.">Obtient la valeur maximale de <see cref="T:System.Collections.Generic.SortedSet`1" />, tel que défini par le comparateur.</summary>
      <returns vsli:raw="The maximum value in the set.">Valeur maximale dans l'ensemble.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;, as defined by the comparer.">Obtient la valeur minimale de <see cref="T:System.Collections.Generic.SortedSet`1" />, tel que défini par le comparateur.</summary>
      <returns vsli:raw="The minimum value in the set.">Valeur minimale dans l'ensemble.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether a &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is read-only.">Obtient une valeur qui indique si <see cref="T:System.Collections.ICollection" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur qui indique si l'accès à l'objet <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à la <see cref="T:System.Collections.ICollection" /> est synchronisé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />. Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Énumère les éléments d’un objet <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1.Enumerator&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; collection.">Avance l’énumérateur à l’élément suivant de la collection <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">Implémente l’interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et déclenche l’événement de désérialisation une fois la désérialisation terminée.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Source de l'événement de désérialisation.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance is invalid.">L’objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associé à l’instance de <see cref="T:System.Collections.Generic.SortedSet`1" /> actuelle n’est pas valide.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Implémente l'interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et retourne les données nécessaires pour sérialiser l'instance <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les informations nécessaires pour sérialiser l'instance <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Objet <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient la source et la destination du flux sérialisé associé à l'instance du <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary vsli:raw="Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.">Représente une collection d’instances à taille variable de type dernier entré, premier sorti (LIFO) du même type spécifié.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of elements in the stack.">Spécifie le type d'éléments dans la pile.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that is empty and has the default initial capacity.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Stack`1" /> qui est vide et possède la capacité initiale par défaut.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Stack`1" /> qui contient des éléments copiés à partir de la collection spécifiée et qui possède une capacité suffisante pour accepter le nombre d’éléments copiés.</summary>
      <param name="collection" vsli:raw="The collection to copy elements from.">Collection à partir de laquelle copier les éléments.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Generic.Stack`1" /> qui est vide et possède une capacité égale à la plus grande valeur parmi la capacité initiale spécifiée et la capacité initiale par défaut.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; can contain.">Nombre initial d'éléments que <see cref="T:System.Collections.Generic.Stack`1" /> peut contenir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Supprime tous les objets du <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Détermine si le <see cref="T:System.Collections.Generic.Stack`1" /> contient un élément.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à rechercher dans <see cref="T:System.Collections.Generic.Stack`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> existe dans <see cref="T:System.Collections.Generic.Stack`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">Copie <see cref="T:System.Collections.Generic.Stack`1" /> dans un tableau <see cref="T:System.Array" /> unidimensionnel existant, en commençant à l'index du tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.Generic.Stack`1" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">Le nombre d’éléments dans le <see cref="T:System.Collections.Generic.Stack`1" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Retourne un énumérateur pour <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.Stack`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> pour <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; without removing it.">Retourne l'objet situé en haut de <see cref="T:System.Collections.Generic.Stack`1" /> sans le supprimer.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">La <see cref="T:System.Collections.Generic.Stack`1" /> est vide.</exception>
      <returns vsli:raw="The object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Objet situé en haut de <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary vsli:raw="Removes and returns the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Supprime et retourne l’objet en haut de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">La <see cref="T:System.Collections.Generic.Stack`1" /> est vide.</exception>
      <returns vsli:raw="The object removed from the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Objet supprimé du haut de <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Insère un objet en haut de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <param name="item" vsli:raw="The object to push onto the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à placer dans <see cref="T:System.Collections.Generic.Stack`1" />. La valeur peut être <see langword="null" /> pour les types référence.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> est multidimensionnel.  
  
- ou - 
 <paramref name="array" /> n’a pas d’indexation de base zéro.  
  
- ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.ICollection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.  
  
- ou - 
Le type du <see cref="T:System.Collections.ICollection" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; to a new array.">Copie <see cref="T:System.Collections.Generic.Stack`1" /> vers un nouveau tableau.</summary>
      <returns vsli:raw="A new array containing copies of the elements of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Nouveau tableau contenant les copies des éléments de <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, if that number is less than 90 percent of current capacity.">Définit la capacité au nombre réel d'éléments dans <see cref="T:System.Collections.Generic.Stack`1" />, si ce nombre est inférieur à 90 pour cent de la capacité actuelle.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPeek(`0@)">
      <summary vsli:raw="Returns a value that indicates whether there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, and if one is present, copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter. The object is not removed from the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Retourne une valeur qui indique s’il existe un objet en haut de et, <see cref="T:System.Collections.Generic.Stack`1" /> le cas échéant, le copie dans le <paramref name="result" /> paramètre. L’objet n’est pas supprimé de <see cref="T:System.Collections.Generic.Stack`1" /> .</summary>
      <param name="result" vsli:raw="If present, the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;.">S’il est présent, l’objet situé en haut de <see cref="T:System.Collections.Generic.Stack`1" /> ; sinon, la valeur par défaut de <typeparamref name="T" /> .</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">
        <see langword="true" /> s’il existe un objet en haut de <see cref="T:System.Collections.Generic.Stack`1" /> ; <see langword="false" /> si le <see cref="T:System.Collections.Generic.Stack`1" /> est vide.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPop(`0@)">
      <summary vsli:raw="Returns a value that indicates whether there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, and if one is present, copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter, and removes it from the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Retourne une valeur qui indique s’il existe un objet en haut de et, s’il en existe un <see cref="T:System.Collections.Generic.Stack`1" /> , le copie dans le <paramref name="result" /> paramètre et le supprime de <see cref="T:System.Collections.Generic.Stack`1" /> .</summary>
      <param name="result" vsli:raw="If present, the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;.">S’il est présent, l’objet situé en haut de <see cref="T:System.Collections.Generic.Stack`1" /> ; sinon, la valeur par défaut de <typeparamref name="T" /> .</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">
        <see langword="true" /> s’il existe un objet en haut de <see cref="T:System.Collections.Generic.Stack`1" /> ; <see langword="false" /> si le <see cref="T:System.Collections.Generic.Stack`1" /> est vide.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Obtient le nombre d’éléments contenus dans le <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Nombre d'éléments contenus dans <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Stack`1" />, cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, this property always returns the current instance.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Dans l'implémentation par défaut de <see cref="T:System.Collections.Generic.Stack`1" />, cette propriété retourne toujours l'instance actuelle.</returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Énumère les éléments d'un élément <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1.Enumerator&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Avance l'énumérateur à l'élément suivant du <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection. Cette classe ne peut pas être héritée.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La collection a été modifiée après la création de l'énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; at the current position of the enumerator.">Élément situé dans le <see cref="T:System.Collections.Generic.Stack`1" /> à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="T:System.Collections.StructuralComparisons">
      <summary vsli:raw="Provides objects for performing a structural comparison of two collection objects.">Fournit des objets pour effectuer une comparaison structurelle de deux objets de collection.</summary>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralComparer">
      <summary vsli:raw="Gets a predefined object that performs a structural comparison of two objects.">Obtient un objet prédéfini qui effectue une comparaison structurelle de deux objets.</summary>
      <returns vsli:raw="A predefined object that is used to perform a structural comparison of two collection objects.">Objet prédéfini utilisé pour effectuer une comparaison structurelle de deux objets collection.</returns>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralEqualityComparer">
      <summary vsli:raw="Gets a predefined object that compares two objects for structural equality.">Obtient un objet prédéfini qui compare deux objets pour déterminer l'égalité structurelle.</summary>
      <returns vsli:raw="A predefined object that is used to compare two collection objects for structural equality.">Objet prédéfini utilisé pour comparer deux objets collection pour déterminer l'égalité structurelle.</returns>
    </member>
  </members>
</doc>
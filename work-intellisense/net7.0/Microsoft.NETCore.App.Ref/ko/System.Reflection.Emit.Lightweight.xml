<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary>토큰을 만들고 코드, 예외 처리 및 지역 변수 시그니처 blob을 삽입하는 메서드 등의 동적 메서드에 대한 MSIL(Microsoft Intermediate Language)과 메타데이터를 생성할 수 있는 다른 방법을 지원합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드의 시그니처를 나타내는 토큰을 가져옵니다.</summary>
      <param name="signature">시그니처를 포함하는 배열입니다.</param>
      <returns>연결된 동적 메서드의 MSIL 스트림과 메타데이터에 포함할 수 있는 토큰입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 메서드에서 호출할 동적 메서드를 나타내는 토큰을 가져옵니다.</summary>
      <param name="method">호출할 동적 메서드입니다.</param>
      <returns>연결된 동적 메서드의 MSIL 스트림에 MSIL 명령의 대상으로 포함할 수 있는 토큰입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드에서 액세스할 필드를 나타내는 토큰을 가져옵니다.</summary>
      <param name="field">액세스할 필드입니다.</param>
      <returns>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체의 범위 내에 있고, 필드에 액세스하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드에서 액세스할 필드를 나타내는 토큰을 가져옵니다. 해당 필드는 지정된 제네릭 형식에 있습니다.</summary>
      <param name="field">액세스할 필드입니다.</param>
      <param name="contextType">필드가 속한 제네릭 형식입니다.</param>
      <returns>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체의 범위 내에 있고, 필드에 액세스하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드에서 액세스할 메서드를 나타내는 토큰을 가져옵니다.</summary>
      <param name="method">액세스할 메서드입니다.</param>
      <returns>현재 <see cref="F:System.Reflection.Emit.OpCodes.Call" /> 개체의 범위 내에 있고, <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> 또는 <see cref="T:System.Reflection.Emit.DynamicILInfo" />과 같이 메서드에 액세스하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 제네릭 형식에 대한 메서드를 나타내는 토큰을 가져옵니다.</summary>
      <param name="method">메서드입니다.</param>
      <param name="contextType">메서드가 속한 제네릭 형식입니다.</param>
      <returns>현재 <see cref="F:System.Reflection.Emit.OpCodes.Call" /> 개체의 범위 내에 있고, <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> 또는 <see cref="T:System.Reflection.Emit.DynamicILInfo" />과 같이 메서드에 액세스하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드에서 사용할 형식을 나타내는 토큰을 가져옵니다.</summary>
      <param name="type">사용할 유형입니다.</param>
      <returns>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체의 범위 내에 있고, 형식이 필요한 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드에서 사용할 문자열 리터럴을 나타내는 토큰을 가져옵니다.</summary>
      <param name="literal">사용할 문자열입니다.</param>
      <returns>현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체의 범위 내에 있고, 문자열이 필요한 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary>연결된 동적 메서드의 코드 본문을 설정합니다.</summary>
      <param name="code">MSIL 스트림이 포함된 바이트 배열에 대한 포인터입니다.</param>
      <param name="codeSize">MSIL 스트림의 바이트 수입니다.</param>
      <param name="maxStackSize">메서드를 실행 중일 때 피연산자 스택에 있는 최대 항목 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" />는 <see langword="null" />이고 <paramref name="codeSize" />가 0보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codeSize" /> 가 0보다 작습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary>연결된 동적 메서드의 코드 본문을 설정합니다.</summary>
      <param name="code">MSIL 스트림이 들어 있는 배열입니다.</param>
      <param name="maxStackSize">메서드를 실행 중일 때 피연산자 스택에 있는 최대 항목 수입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary>연결된 동적 메서드의 예외 메타데이터를 설정합니다.</summary>
      <param name="exceptions">예외 메타데이터가 포함된 바이트 배열에 대한 포인터입니다.</param>
      <param name="exceptionsSize">예외 메타데이터의 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" />는 <see langword="null" />이고 <paramref name="exceptionSize" />가 0보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exceptionSize" /> 가 0보다 작습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary>연결된 동적 메서드의 예외 메타데이터를 설정합니다.</summary>
      <param name="exceptions">예외 메타데이터가 들어 있는 배열입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary>연결된 동적 메서드의 지역 변수 레이아웃을 설명하는 지역 변수 시그니처를 설정합니다.</summary>
      <param name="localSignature">연결된 <see cref="T:System.Reflection.Emit.DynamicMethod" />의 지역 변수 레이아웃이 들어 있는 배열입니다.</param>
      <param name="signatureSize">시그니처의 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localSignature" />는 <see langword="null" />이고 <paramref name="signatureSize" />가 0보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureSize" /> 가 0보다 작습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary>연결된 동적 메서드의 지역 변수 레이아웃을 설명하는 지역 변수 시그니처를 설정합니다.</summary>
      <param name="localSignature">연결된 <see cref="T:System.Reflection.Emit.DynamicMethod" />의 지역 변수 레이아웃이 들어 있는 배열입니다.</param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary>현재 인스턴스를 통해 본문이 생성되는 동적 메서드를 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Reflection.Emit.DynamicMethod" /> 개체가 생성하는 코드의 대상인 동적 메서드를 나타내는 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>컴파일, 실행, 삭제 가능한 동적 메서드를 정의하고 나타냅니다. 삭제된 메서드는 가비지 수집에 사용할 수 있습니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>모듈 전체에 적용되는 동적 메서드를 만들어 메서드 이름, 특성, 호출 규칙, 반환 형식, 매개 변수 형식, 모듈을 지정하고, 동적 메서드의 MSIL(Microsoft Intermediate Language)이 액세스하는 형식과 멤버에 대해 JIT(just-in-time) 표시 유형 확인을 건너뛸지 여부를 지정합니다.</summary>
      <param name="name">동적 메서드의 이름입니다. 이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</param>
      <param name="attributes">동적 메서드의 특성을 지정하는 <see cref="T:System.Reflection.MethodAttributes" /> 값의 비트 조합입니다. 허용되는 유일한 조합은 <see cref="F:System.Reflection.MethodAttributes.Public" /> 및 <see cref="F:System.Reflection.MethodAttributes.Static" />입니다.</param>
      <param name="callingConvention">동적 메서드의 호출 규칙입니다. <see cref="F:System.Reflection.CallingConventions.Standard" />이어야 합니다.</param>
      <param name="returnType">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</param>
      <param name="parameterTypes">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</param>
      <param name="m">동적 메서드를 논리적으로 연결할 모듈을 나타내는 <see cref="T:System.Reflection.Module" /> 입니다.</param>
      <param name="skipVisibility">동적 메서드의 MSIL에서 액세스하는 형식 및 멤버에서 JIT 표시 유형 확인을 건너뛰는 경우<see langword="true" /> 이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.  
  
또는 
 <paramref name="m" /> 이 동적 메서드에 대한 익명 호스팅을 제공하는 모듈입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="m" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> 는 <see cref="F:System.Reflection.MethodAttributes.Public" /> 및 <see cref="F:System.Reflection.MethodAttributes.Static" />이외의 플래그 조합입니다.  
  
또는 
 <paramref name="callingConvention" />이 <see cref="F:System.Reflection.CallingConventions.Standard" />가 아닙니다.  
  
또는 
 <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>동적 메서드를 만들고, 메서드 이름, 특성, 호출 규칙, 반환 형식, 매개 변수 형식, 동적 메서드가 논리적으로 연결되는 형식, 동적 메서드의 MSIL(Microsoft Intermediate Language)이 액세스하는 형식과 멤버에 대해 JIT(just-in-time) 표시 유형 확인을 건너뛸지 여부를 지정합니다.</summary>
      <param name="name">동적 메서드의 이름입니다. 이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</param>
      <param name="attributes">동적 메서드의 특성을 지정하는 <see cref="T:System.Reflection.MethodAttributes" /> 값의 비트 조합입니다. 허용되는 유일한 조합은 <see cref="F:System.Reflection.MethodAttributes.Public" /> 및 <see cref="F:System.Reflection.MethodAttributes.Static" />입니다.</param>
      <param name="callingConvention">동적 메서드의 호출 규칙입니다. <see cref="F:System.Reflection.CallingConventions.Standard" />이어야 합니다.</param>
      <param name="returnType">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</param>
      <param name="parameterTypes">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</param>
      <param name="owner">동적 메서드가 논리적으로 연결되는 <see cref="T:System.Type" /> 입니다. 동적 메서드에 해당 형식의 모든 멤버에 대한 액세스 권한이 있습니다.</param>
      <param name="skipVisibility">동적 메서드의 MSIL에서 액세스하는 형식 및 멤버에서 JIT 표시 유형 확인을 건너뛰는 경우<see langword="true" /> 이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.  
  
또는 
 <paramref name="owner" /> 가 인터페이스, 배열, 개방형 제네릭 형식, 제네릭 형식 또는 메서드의 형식 매개 변수입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="owner" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> 는 <see cref="F:System.Reflection.MethodAttributes.Public" /> 및 <see cref="F:System.Reflection.MethodAttributes.Static" />이외의 플래그 조합입니다.  
  
또는 
 <paramref name="callingConvention" />이 <see cref="F:System.Reflection.CallingConventions.Standard" />가 아닙니다.  
  
또는 
 <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>메서드 이름, 반환 형식 및 매개 변수 형식을 지정하여 익명으로 호스트되는 동적 메서드를 초기화합니다.</summary>
      <param name="name">동적 메서드의 이름입니다. 이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</param>
      <param name="returnType">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</param>
      <param name="parameterTypes">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>메서드 이름, 반환 형식, 매개 변수 형식, 그리고 동적 메서드의 MSIL(Microsoft Intermediate Language)에서 액세스하는 형식 및 멤버에 대해 JIT(적시) 가시성 검사를 건너뛰어야 하는지 여부를 지정하는 익명으로 호스팅된 동적 메서드를 초기화합니다.</summary>
      <param name="name">동적 메서드의 이름입니다. 이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</param>
      <param name="returnType">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</param>
      <param name="parameterTypes">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</param>
      <param name="restrictedSkipVisibility">동적 메서드의 MSIL에서 액세스하는 형식 및 멤버에 대해 JIT 가시성 검사를 건너뛰려면(단, 이러한 형식과 멤버를 포함하는 어셈블리의 트러스트 수준이 동적 메서드를 내보내는 호출 스택의 트러스트 수준보다 작거나 같아야 한다는 제한이 적용되는 경우) <see langword="true" />이며, 건너뛰지 않으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>메서드 이름, 반환 형식, 매개 변수 형식 및 모듈을 지정하여 모듈 전체에서 사용되는 동적 메서드를 만듭니다.</summary>
      <param name="name">동적 메서드의 이름입니다. 이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</param>
      <param name="returnType">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</param>
      <param name="parameterTypes">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</param>
      <param name="m">동적 메서드를 논리적으로 연결할 모듈을 나타내는 <see cref="T:System.Reflection.Module" /> 입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.  
  
또는 
 <paramref name="m" /> 이 동적 메서드에 대한 익명 호스팅을 제공하는 모듈입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="m" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>모듈 전체에 적용되는 동적 메서드를 만들어 메서드 이름, 반환 형식, 매개 변수 형식, 모듈을 지정하고, 동적 메서드의 MSIL(Microsoft Intermediate Language)이 액세스하는 형식과 멤버에 대해 JIT(just-in-time) 표시 유형 확인을 건너뛸지 여부를 지정합니다.</summary>
      <param name="name">동적 메서드의 이름입니다. 이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</param>
      <param name="returnType">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</param>
      <param name="parameterTypes">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</param>
      <param name="m">동적 메서드를 논리적으로 연결할 모듈을 나타내는 <see cref="T:System.Reflection.Module" /> 입니다.</param>
      <param name="skipVisibility">동적 메서드의 MSIL에서 액세스하는 형식 및 멤버에서 JIT 표시 유형 확인을 건너뛰는 경우<see langword="true" /> 입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.  
  
또는 
 <paramref name="m" /> 이 동적 메서드에 대한 익명 호스팅을 제공하는 모듈입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="m" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>메서드 이름, 반환 형식, 매개 변수 형식 및 동적 메서드가 논리적으로 연결된 형식을 지정하여 동적 메서드를 만듭니다.</summary>
      <param name="name">동적 메서드의 이름입니다. 이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</param>
      <param name="returnType">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</param>
      <param name="parameterTypes">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</param>
      <param name="owner">동적 메서드가 논리적으로 연결되는 <see cref="T:System.Type" /> 입니다. 동적 메서드에 해당 형식의 모든 멤버에 대한 액세스 권한이 있습니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.  
  
또는 
 <paramref name="owner" /> 가 인터페이스, 배열, 개방형 제네릭 형식, 제네릭 형식 또는 메서드의 형식 매개 변수입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="owner" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 은 <see langword="null" />이거나 <see cref="P:System.Type.IsByRef" /> 가 <see langword="true" />를 반환하는 형식입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>동적 메서드를 만들고, 메서드 이름, 반환 형식, 매개 변수 형식, 동적 메서드가 논리적으로 연결되는 형식, 동적 메서드의 MSIL(Microsoft Intermediate Language)이 액세스하는 형식과 멤버에 대해 JIT(just-in-time) 표시 유형 확인을 건너뛸지 여부를 지정합니다.</summary>
      <param name="name">동적 메서드의 이름입니다. 이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</param>
      <param name="returnType">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</param>
      <param name="parameterTypes">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</param>
      <param name="owner">동적 메서드가 논리적으로 연결되는 <see cref="T:System.Type" /> 입니다. 동적 메서드에 해당 형식의 모든 멤버에 대한 액세스 권한이 있습니다.</param>
      <param name="skipVisibility">동적 메서드의 MSIL에서 액세스하는 형식 및 멤버에서 JIT 표시 유형 확인을 건너뛰는 경우<see langword="true" /> 이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.  
  
또는 
 <paramref name="owner" /> 가 인터페이스, 배열, 개방형 제네릭 형식, 제네릭 형식 또는 메서드의 형식 매개 변수입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="owner" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 은 <see langword="null" />이거나 <see cref="P:System.Type.IsByRef" /> 가 <see langword="true" />를 반환하는 형식입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>동적 메서드를 완료하고 실행하는 데 사용할 수 있는 대리자를 만듭니다.</summary>
      <param name="delegateType">서명이 동적 메서드의 서명과 일치하는 대리자 형식입니다.</param>
      <exception cref="T:System.InvalidOperationException">동적 메서드에 메서드 본문이 없는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 의 매개 변수 개수가 잘못되었거나 매개 변수 유형이 잘못되었습니다.</exception>
      <returns>지정된 형식의 대리자로, 동적 메서드를 실행하는 데 사용할 수 있습니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>동적 메서드를 완료하고 대리자 형식과 대리자가 바인딩되는 개체를 지정하여 해당 메서드를 실행하는 데 사용할 수 있는 대리자를 만듭니다.</summary>
      <param name="delegateType">서명이 동적 메서드의 서명과 일치하는 대리자 형식에서 첫 번째 매개 변수를 뺀 값입니다.</param>
      <param name="target">대리자가 바인딩될 개체입니다. 동적 메서드의 첫 번째 매개 변수와 동일한 형식이어야 합니다.</param>
      <exception cref="T:System.InvalidOperationException">동적 메서드에 메서드 본문이 없는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 이 동적 메서드의 첫 번째 매개 변수와 동일한 형식이 아니며 해당 형식에 할당할 수 없습니다.  
  
또는 
 <paramref name="delegateType" /> 의 매개 변수 개수가 잘못되었거나 매개 변수 유형이 잘못되었습니다.</exception>
      <returns>지정된 형식의 대리자로, 지정된 대상 개체를 사용하여 동적 메서드를 실행하는 데 사용할 수 있습니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>동적 메서드의 매개 변수를 정의합니다.</summary>
      <param name="position">매개 변수 목록에서 매개 변수의 위치입니다. 매개 변수는 첫 번째 매개 변수가 숫자 1부터 시작하여 인덱싱됩니다.</param>
      <param name="attributes">매개 변수의 특성을 지정하는 <see cref="T:System.Reflection.ParameterAttributes" /> 값의 비트 조합입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다. 이름은 빈 문자열일 수 있습니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">메서드에 매개 변수가 없습니다.  
  
또는 
 <paramref name="position" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="position" />이 메서드의 매개 변수 수보다 큽니다.</exception>
      <returns>항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>메서드에 대한 기본 구현을 반환합니다.</summary>
      <returns>메서드의 기본 구현입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>이 메서드에 대해 정의된 모든 사용자 지정 특성을 반환합니다.</summary>
      <param name="inherit">상속 체인을 검색하여 사용자 지정 특성을 찾으려면<see langword="true" /> 이고, 현재 메서드만 확인하려면 <see langword="false" /> 입니다.</param>
      <returns>이 메서드의 모든 사용자 지정 특성을 나타내는 개체 배열입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>메서드에 적용된 지정된 형식의 사용자 지정 특성을 반환합니다.</summary>
      <param name="attributeType">반환할 사용자 지정 특성의 형식을 나타내는 <see cref="T:System.Type" /> 입니다.</param>
      <param name="inherit">상속 체인을 검색하여 사용자 지정 특성을 찾으려면<see langword="true" /> 이고, 현재 메서드만 확인하려면 <see langword="false" /> 입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="attributeType" /> 형식의 메서드 또는 <paramref name="attributeType" /> 형식에서 파생된 메서드의 특성을 나타내는 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary>메타데이터 토큰, 범위 및 MSIL(Microsoft Intermediate Language) 스트림에서 메서드 본문을 생성하는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체입니다.</summary>
      <returns>메타데이터 토큰, 범위 및 MSIL 스트림에서 메서드 본문을 생성하는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>64바이트의 기본 MSIL(Microsoft Intermediate Language) 스트림 크기를 사용하는 메서드에 대한 MSIL 생성기를 반환합니다.</summary>
      <returns>메서드에 대한 <see cref="T:System.Reflection.Emit.ILGenerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>지정된 된 MSIL 스트림 크기를 사용하는 메서드에 대한 MSIL(Microsoft Intermediate Language) 생성기를 반환합니다.</summary>
      <param name="streamSize">MSIL 스트림에 바이트의 크기입니다.</param>
      <returns>지정된 MSIL 스트림 크기를 가진 메서드의 <see cref="T:System.Reflection.Emit.ILGenerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>메서드에 대한 구현 플래그를 반환합니다.</summary>
      <returns>메서드의 구현 플래그를 나타내는 <see cref="T:System.Reflection.MethodImplAttributes" /> 값의 비트 조합입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>동적 메서드의 매개 변수를 반환합니다.</summary>
      <returns>동적 메서드의 매개 변수를 나타내는 <see cref="T:System.Reflection.ParameterInfo" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>지정된 문화권 정보를 사용하고 지정된 바인더의 제약 조건에 따라, 지정된 매개 변수를 사용하여 동적 메서드를 호출합니다.</summary>
      <param name="obj">이 매개 변수는 정적이기 때문에 동적 메서드에 대해 무시됩니다. <see langword="null" />을 지정합니다.</param>
      <param name="invokeAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 값의 비트 조합입니다.</param>
      <param name="binder">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.Binder" /> 개체 검색을 사용할 수 있도록 하는 <see cref="T:System.Reflection.MemberInfo" /> 개체입니다. <paramref name="binder" />가 <see langword="null" />이면 기본 바인더가 사용됩니다. 자세한 내용은 <see cref="T:System.Reflection.Binder" />를 참조하세요.</param>
      <param name="parameters">인수 목록입니다. 이것은 호출된 메서드의 매개 변수와 같은 개수, 순서 및 형식의 인수 배열입니다. 매개 변수가 없는 경우에는 이 매개 변수가 <see langword="null" />이어야 합니다.</param>
      <param name="culture">형식의 강제 변환을 제어하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" /> 의 인스턴스입니다. 이 매개 변수가 <see langword="null" />이면 현재 스레드에 대한 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다. 예를 들어 1,000은 각 문화권마다 다르게 표현되므로 1,000을 나타내는 <see cref="T:System.String" /> 을 <see cref="T:System.Double" /> 값으로 올바르게 변환하기 위해 이 정보가 필요합니다.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 호출 규칙은 지원되지 않습니다.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" />에 있는 요소의 수가 동적 메서드에 있는 매개 변수의 수와 일치하지 않는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" />에 있는 하나 이상의 요소 형식이 동적 메서드에 있는 해당 매개 변수의 형식과 일치하지 않는 경우</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">동적 메서드를 모듈과 연결했고 익명으로 호스팅하지 않았으며 이를 생성할 때 <paramref name="skipVisibility" />를 <see langword="false" />로 설정했지만 이 동적 메서드에서 <see langword="public" /> 또는 <see langword="internal" />(Visual Basic의 경우 <see langword="Friend" />)이 아닌 멤버에 액세스하는 경우  
  
또는 
동적 메서드를 익명으로 호스팅했고 이를 생성할 때 <paramref name="skipVisibility" />를 <see langword="false" />로 설정했지만 이 동적 메서드에서 <see langword="public" />이 아닌 멤버에 액세스하는 경우  
  
또는 
동적 메서드는 확인할 수 있는 코드를 포함합니다. <see cref="T:System.Reflection.Emit.DynamicMethod" />에 대한 설명에서 "확인" 섹션을 참조하세요.</exception>
      <returns>호출된 메서드의 반환 값을 포함하는 <see cref="T:System.Object" /> 입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>지정된 사용자 지정 특성 유형이 정의되었는지 여부를 나타냅니다.</summary>
      <param name="attributeType">검색할 사용자 지정 특성의 형식을 나타내는 <see cref="T:System.Type" /> 입니다.</param>
      <param name="inherit">상속 체인을 검색하여 사용자 지정 특성을 찾으려면<see langword="true" /> 이고, 현재 메서드만 확인하려면 <see langword="false" /> 입니다.</param>
      <returns>지정된 사용자 지정 특성 유형이 정의되어 있으면<see langword="true" /> 이고, 정의되어 있지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>문자열로 표현된 메서드의 서명을 반환합니다.</summary>
      <returns>메서드 시그니처를 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>동적 메서드를 만들 때 지정된 특성을 가져옵니다.</summary>
      <returns>메서드의 특성을 나타내는 <see cref="T:System.Reflection.MethodAttributes" /> 값의 비트 조합입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>동적 메서드를 만들 때 지정된 호출 규칙을 가져옵니다.</summary>
      <returns>메서드의 호출 규칙을 나타내는 <see cref="T:System.Reflection.CallingConventions" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>동적 메서드에 대해 항상 <see langword="null" /> 인 메서드를 선언하는 형식을 가져옵니다.</summary>
      <returns>항상 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>메서드의 로컬 변수가 0으로 초기화되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>메서드의 로컬 변수가 0으로 초기화되었으면<see langword="true" /> 이고, 초기화되지 않았으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary>현재 동적 메서드가 보안에 중요한 형식이거나 보안 안전에 중요한 형식이어서 중요한 작업을 수행할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">동적 메서드에 메서드 본문이 없습니다.</exception>
      <returns>현재 동적 메서드가 보안에 중요한 형식이거나 보안 안전에 중요한 형식이면 <see langword="true" />이고, 투명 형식이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary>현재 동적 메서드가 현재 신뢰 수준에서 보안 안전에 중요한 형식인지, 즉 중요한 작업을 수행할 수 있고 투명 코드로 액세스할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">동적 메서드에 메서드 본문이 없습니다.</exception>
      <returns>동적 메서드가 현재 신뢰 수준에서 보안 안전에 중요하면 <see langword="true" />이고, 보안에 중요하거나 투명하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary>현재 동적 메서드가 현재 신뢰 수준에서 투명하여 중요한 작업을 수행할 수 없는지 여부를 나타내는 값을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">동적 메서드에 메서드 본문이 없습니다.</exception>
      <returns>동적 메서드가 현재 신뢰 수준에서 보안에 투명하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>동적 메서드에는 지원되지 않습니다.</summary>
      <exception cref="T:System.InvalidOperationException">동적 메서드에는 허용되지 않는 경우</exception>
      <returns>동적 메서드에는 지원되지 않습니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary>동적 메서드가 논리적으로 연결된 모듈을 가져옵니다.</summary>
      <returns>현재 동적 메서드가 연결되는 <see cref="T:System.Reflection.Module" /> 입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>동적 메서드의 이름입니다.</summary>
      <returns>메서드의 단순한 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>메서드를 얻기 위해 리플렉션에서 사용된 클래스를 가져옵니다.</summary>
      <returns>항상 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>동적 메서드의 반환 매개 변수를 가져옵니다.</summary>
      <returns>항상 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>동적 메서드의 반환 값 형식을 가져옵니다.</summary>
      <returns>현재 메서드의 반환 값 형식을 나타내는 <see cref="T:System.Type" /> 입니다. 메서드에 반환 형식이 없으면 <see cref="T:System.Void" /> 입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>동적 메서드에 대한 반환 형식의 사용자 지정 특성을 가져옵니다.</summary>
      <returns>동적 메서드에 대한 반환 형식의 사용자 지정 특성을 나타내는 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 입니다.</returns>
    </member>
  </members>
</doc>
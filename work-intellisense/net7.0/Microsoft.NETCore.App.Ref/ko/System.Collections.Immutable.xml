<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>키/값 쌍의 변경할 수 없는 컬렉션을 나타냅니다.  

 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey">사전의 키 형식입니다.</typeparam>
      <typeparam name="TValue">사전의 값 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>지정한 키와 값을 가진 요소를 사전에 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 키가 이미 사전에 있지만 값이 다릅니다.</exception>
      <returns>추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>지정한 키/값 쌍을 사전에 추가합니다.</summary>
      <param name="pairs">추가할 키/값 쌍입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 키 중 하나가 이미 사전에 있지만 값이 다릅니다.</exception>
      <returns>추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>이 사전 인스턴스와 순서 및 키/값 비교 규칙이 동일한 빈 사전을 검색합니다.</summary>
      <returns>순서 및 키/값 비교 규칙이 동일한 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>변경할 수 없는 사전에 지정된 키/값 쌍이 들어 있는지 여부를 확인합니다.</summary>
      <param name="pair">찾을 키/값 쌍입니다.</param>
      <returns>지정된 키/값 쌍이 사전에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>변경할 수 없는 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <returns>지정된 요소가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>변경할 수 없는 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="keys">제거할 요소의 키입니다.</param>
      <returns>지정된 키가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>변경할 수 없는 사전에서 지정된 키와 값을 설정합니다. 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="key">추가할 엔트리의 키입니다.</param>
      <param name="value">설정할 키 값입니다.</param>
      <returns>지정된 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>변경할 수 없는 사전에서 지정된 키/값 쌍을 설정합니다. 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="items">사전에서 설정할 키/값 쌍입니다. 사전에 키가 이미 있는 경우 이 메서드는 해당 키의 이전 값을 덮어씁니다.</param>
      <returns>지정된 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>이 사전에 지정된 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalKey">검색할 키입니다.</param>
      <param name="actualKey">사전에서 일치하는 키가 있으면 그대로이고, 일치하는 키가 없으면 <c>equalkey</c>입니다.</param>
      <returns>
        <paramref name="equalKey" />에 대한 일치하는 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>수정할 수 없는 요소의 목록을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T">목록에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>목록의 복사본을 만들고 복사한 목록의 끝에 지정된 개체를 추가합니다.</summary>
      <param name="value">목록에 추가할 개체입니다.</param>
      <returns>개체가 추가된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>목록의 복사본을 만들고 복사한 목록의 끝에 지정된 개체를 추가합니다.</summary>
      <param name="items">목록에 추가할 개체입니다.</param>
      <returns>요소가 추가된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>모든 항목이 제거되었지만 정렬 및 순서 의미 체계가 이 목록과 동일한 목록을 만듭니다.</summary>
      <returns>정렬 및 순서 의미 체계가 이 인스턴스와 동일한 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Collections.Immutable.IImmutableList`1" />의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Immutable.IImmutableList`1" />에서 찾을 개체입니다. 참조 형식의 경우 이 값은 null일 수 있습니다.</param>
      <param name="index">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="equalityComparer">
        <paramref name="item" />을 찾을 같음 비교자입니다.</param>
      <returns>
        <paramref name="index" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 <see cref="T:System.Collections.Immutable.IImmutableList`1" />의 요소 범위에 <paramref name="item" />이 있으면 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>변경할 수 없는 목록의 지정된 인덱스에 지정된 요소를 삽입합니다.</summary>
      <param name="index">값을 삽입할 0부터 시작하는 인덱스입니다.</param>
      <param name="element">삽입할 개체입니다.</param>
      <returns>지정된 요소가 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>변경할 수 없는 목록의 지정된 인덱스에 지정된 요소를 삽입합니다.</summary>
      <param name="index">새 요소가 삽입되어야 하는 0부터 시작하는 인덱스입니다.</param>
      <param name="items">삽입할 요소입니다.</param>
      <returns>지정된 요소가 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 <see cref="T:System.Collections.Immutable.IImmutableList`1" />의 요소 범위에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item">목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="equalityComparer">
        <paramref name="item" />을 일치시킬 같음 비교자입니다.</param>
      <returns>
        <see cref="T:System.Int32" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>이 변경할 수 없는 목록에서 첫 번째로 나타나는 지정된 개체를 제거합니다.</summary>
      <param name="value">목록에서 제거할 개체입니다.</param>
      <param name="equalityComparer">
        <paramref name="value" />을 찾을 같음 비교자입니다.</param>
      <returns>지정된 개체가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>요소가 제거된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>변경할 수 없는 목록의 지정한 인덱스에서 요소를 제거합니다.</summary>
      <param name="index">제거할 요소의 인덱스입니다.</param>
      <returns>요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>목록에서 지정한 개체를 제거합니다.</summary>
      <param name="items">목록에서 제거할 개체입니다.</param>
      <param name="equalityComparer">
        <paramref name="items" />가 목록의 개체와 일치하는지 확인하는 데 사용할 같음 비교자입니다.</param>
      <returns>
        <paramref name="items" />가 목록의 개체와 일치하는 경우 지정된 개체가 제거된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableList`1" />에서 요소의 범위를 제거합니다.</summary>
      <param name="index">제거할 요소의 범위에 대한 0부터 시작하는 인덱스입니다.</param>
      <param name="count">제거할 요소의 수입니다.</param>
      <returns>요소가 제거된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>목록에서 일치하는 첫 번째 요소가 지정된 요소로 바뀐 새 목록을 반환합니다.</summary>
      <param name="oldValue">바꿀 요소입니다.</param>
      <param name="newValue">첫 번째로 나타나는 <paramref name="oldValue" />를 바꿀 요소입니다.</param>
      <param name="equalityComparer">
        <paramref name="oldValue" />와 일치시키는 데 사용할 같음 비교자입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" />가 목록에 없습니다.</exception>
      <returns>
        <paramref name="newValue" />가 포함된 새 목록입니다. 이는 <paramref name="oldvalue" />가 <paramref name="newValue" />와 같은 경우에도 마찬가지입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>목록에서 지정된 위치에 있는 요소를 지정된 요소로 바꿉니다.</summary>
      <param name="index">바꿀 요소의 목록 내 위치입니다.</param>
      <param name="value">이전 요소와 바꿀 요소입니다.</param>
      <returns>새 요소가 포함된 새 목록입니다. 이는 지정된 위치의 요소가 새 요소와 같은 경우에도 마찬가지입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>개체의 변경할 수 없는 선입선출(FIFO) 컬렉션을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T">큐에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>모든 요소가 제거된 새 큐를 반환합니다.</summary>
      <returns>변경할 수 없는 빈 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>변경할 수 없는 큐에서 첫 번째 요소를 제거하고 새 큐를 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">큐가 비어 있습니다.</exception>
      <returns>첫 번째 요소가 제거된 변경할 수 없는 새 큐입니다. 이 값은 <see langword="null" />일 수 없습니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>변경할 수 없는 큐의 끝에 요소를 추가하고 새 큐를 반환합니다.</summary>
      <param name="value">추가할 요소입니다.</param>
      <returns>지정된 요소가 추가된 변경할 수 없는 새 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하지 않고 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">큐가 비어 있습니다.</exception>
      <returns>큐의 시작 부분에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>이 변경할 수 없는 큐가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 큐가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>집합의 새 인스턴스를 만드는 방식으로만 수정할 수 있는 요소 집합을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T">집합에 저장된 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>지정한 요소를 이 변경할 수 없는 집합에 추가합니다.</summary>
      <param name="value">추가할 요소입니다.</param>
      <returns>요소가 추가된 새 집합입니다. 해당 요소가 집합에 이미 있는 경우 이 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 집합을 검색합니다.</summary>
      <returns>정렬 및 순서 의미 체계가 이 인스턴스와 동일한 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>이 변경할 수 없는 집합에 지정한 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">집합에서 찾을 요소입니다.</param>
      <returns>집합에 지정된 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 집합에서 지정된 컬렉션의 요소를 제거합니다.</summary>
      <param name="other">이 집합에서 제거할 항목의 컬렉션입니다.</param>
      <returns>항목이 제거된 새 집합입니다. 집합에 항목이 없는 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>이 집합과 지정된 집합에 존재하는 요소만 포함된 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Immutable.IImmutableSet`1" />과 비교할 컬렉션입니다.</param>
      <returns>두 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 지정된 컬렉션의 적절한 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 집합이 지정된 컬렉션의 적절한(고급) 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 지정된 컬렉션의 적절한 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 지정된 컬렉션의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 지정된 컬렉션의 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 집합이 지정된 컬렉션과 겹치는지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합과 지정된 컬렉션이 하나 이상 공통 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>이 변경할 수 없는 집합에서 지정된 요소를 제거합니다.</summary>
      <param name="value">제거할 요소입니다.</param>
      <returns>지정된 요소가 제거된 새 집합입니다. 집합에서 요소를 찾을 수 없는 경우 현재 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>집합이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하는 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소를 포함하는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>집합에 지정된 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalValue">검색할 값입니다.</param>
      <param name="actualValue">집합에 일치하는 값이 있으면 해당 값이고, 일치하는 값이 없으면 <c>equalvalue</c>입니다.</param>
      <returns>일치하는 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 모든 요소를 포함하는 변경할 수 없는 새 집합을 만듭니다.</summary>
      <param name="other">요소를 추가할 컬렉션입니다.</param>
      <returns>항목이 추가된 변경할 수 없는 새 집합입니다. 모든 항목이 집합에 이미 있던 경우 원래 집합입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>변경할 수 없는 LIFO(후입선출) 방식의 컬렉션을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T">스택에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>변경할 수 없는 스택에서 모든 개체를 제거합니다.</summary>
      <returns>변경할 수 없는 빈 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>변경할 수 없는 스택의 맨 위에 있는 요소를 제거하지 않고 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">스택이 비어 있습니다.</exception>
      <returns>스택의 맨 위에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>변경할 수 없는 스택의 맨 위에 있는 요소를 제거하고 새 스택을 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">스택이 비어 있습니다.</exception>
      <returns>새 스택입니다. <see langword="null" />일 수 없습니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>변경할 수 없는 스택의 맨 위에 요소를 삽입하고 새 스택을 반환합니다.</summary>
      <param name="value">스택에 적용할 요소입니다.</param>
      <returns>새 스택입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>이 변경할 수 없는 스택이 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 스택이 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>변경할 수 없는 배열을 만드는 메서드를 제공합니다. 즉, 배열을 만든 후에는 변경할 수 없습니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>기본 비교자를 사용하여 지정된 요소에서 정렬된 불변형 배열을 검색하고 해당 요소의 0부터 시작하는 인덱스(있는 경우)를 반환합니다.</summary>
      <param name="array">검색할 정렬된 배열입니다.</param>
      <param name="value">검색할 개체입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" />가 <see cref="T:System.IComparable" />을 구현하지 않거나 검색 중에 <see cref="T:System.IComparable" />을 구현하지 않는 요소가 발견되었습니다.</exception>
      <returns>항목이 있으면 배열에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.ICollection`1.Count" />의 비트 보수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>지정된 요소에서 정렬된 불변형 배열을 검색하고 해당 요소의 0부터 시작하는 인덱스(있는 경우)를 반환합니다.</summary>
      <param name="array">검색할 정렬된 배열입니다.</param>
      <param name="value">검색할 개체입니다.</param>
      <param name="comparer">요소를 비교할 때 사용할 비교자 구현이거나, 기본 비교자를 사용하려면 null입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" />가 null이고 <paramref name="value" />가 <see cref="T:System.IComparable" />을 구현하지 않거나 검색 중에 <see cref="T:System.IComparable" />을 구현하지 않는 요소가 발견되었습니다.</exception>
      <returns>항목이 있으면 배열에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.ICollection`1.Count" />의 비트 보수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>지정된 요소에서 정렬된 불변형 배열을 검색하고 해당 요소의 0부터 시작하는 인덱스(있는 경우)를 반환합니다.</summary>
      <param name="array">검색할 정렬된 배열입니다.</param>
      <param name="index">검색할 범위의 시작 인덱스입니다.</param>
      <param name="length">검색할 범위의 길이입니다.</param>
      <param name="value">검색할 개체입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" />가 <see cref="T:System.IComparable" />을 구현하지 않거나 검색 중에 <see cref="T:System.IComparable" />을 구현하지 않는 요소가 발견되었습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.
        
또는

<paramref name="length" />가 0보다 작은 경우</exception>
      <returns>항목이 있으면 배열에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.ICollection`1.Count" />의 비트 보수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>변경할 수 없는 정렬된 배열에서 지정된 요소를 검색하고 해당 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="array">검색할 정렬된 배열입니다.</param>
      <param name="index">검색할 범위의 시작 인덱스입니다.</param>
      <param name="length">검색할 범위의 길이입니다.</param>
      <param name="value">검색할 개체입니다.</param>
      <param name="comparer">요소가 같은지 비교할 때 사용할 비교자이거나, 기본 비교자를 사용하려면 <see langword="null" />입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" />가 null이고 <paramref name="value" />가 <see cref="T:System.IComparable" />을 구현하지 않거나 검색 중에 <see cref="T:System.IComparable" />을 구현하지 않는 요소가 발견되었습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.
        
또는

<paramref name="comparer" />가 <see langword="null" />이고 <paramref name="value" />가 <paramref name="array" />의 요소와 호환되지 않는 형식입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.

또는

<paramref name="length" />가 0보다 작은 경우</exception>
      <returns>항목이 있으면 배열에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.ICollection`1.Count" />의 비트 보수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>변경할 수 없는 빈 배열을 만듭니다.</summary>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns>변경할 수 없는 빈 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>지정된 개체를 포함하는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="item">배열에 저장할 개체입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns>지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>지정된 개체를 포함하는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="item1">배열에 저장할 첫 번째 개체입니다.</param>
      <param name="item2">배열에 저장할 두 번째 개체입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns>지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>지정된 개체를 포함하는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="item1">배열에 저장할 첫 번째 개체입니다.</param>
      <param name="item2">배열에 저장할 두 번째 개체입니다.</param>
      <param name="item3">배열에 저장할 세 번째 개체입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns>지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>지정된 개체를 포함하는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="item1">배열에 저장할 첫 번째 개체입니다.</param>
      <param name="item2">배열에 저장할 두 번째 개체입니다.</param>
      <param name="item3">배열에 저장할 세 번째 개체입니다.</param>
      <param name="item4">배열에 저장할 네 번째 개체입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns>지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>지정된 개체 배열에서 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="items">배열을 채울 개체의 배열입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns>항목의 배열을 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>다른 배열의 지정된 개체가 있는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="items">개체의 원본 배열입니다.</param>
      <param name="start">
        <paramref name="items" />에서 복사할 첫 번째 요소의 인덱스입니다.</param>
      <param name="length">이 변경할 수 없는 배열에 포함할 <paramref name="items" />의 요소 수입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns>원본 배열의 지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>다른 변경할 수 없는 배열의 지정된 개체가 있는 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="items">개체의 원본 배열입니다.</param>
      <param name="start">
        <paramref name="items" />에서 복사할 첫 번째 요소의 인덱스입니다.</param>
      <param name="length">이 변경할 수 없는 배열에 포함할 <paramref name="items" />의 요소 수입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns>원본 배열의 지정된 개체를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>새 메모리를 할당하지 않고 <see cref="T:System.Collections.Immutable.ImmutableArray" />로 변환할 수 있는 변경 가능한 배열을 만듭니다.</summary>
      <typeparam name="T">작성기에 저장된 요소의 형식입니다.</typeparam>
      <returns>변경할 수 없는 배열로 효율적으로 변환할 수 있는 지정된 형식의 변경 가능한 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>새 메모리를 할당하지 않고 <see cref="T:System.Collections.Immutable.ImmutableArray" />로 변환할 수 있는 변경 가능한 배열을 만듭니다.</summary>
      <param name="initialCapacity">작성기의 초기 용량입니다.</param>
      <typeparam name="T">작성기에 저장된 요소의 형식입니다.</typeparam>
      <returns>변경할 수 없는 배열로 효율적으로 변환할 수 있는 지정된 형식의 변경 가능한 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>지정된 항목으로 채워진 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />를 만듭니다.</summary>
      <param name="items">배열에 추가할 요소입니다.</param>
      <typeparam name="T">배열에 저장된 요소의 형식입니다.</typeparam>
      <returns>지정된 항목을 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="items">결과 배열을 초기화할 원본 배열입니다.</param>
      <param name="selector">원본 배열의 각 요소에 적용할 함수입니다.</param>
      <typeparam name="TSource">소스 배열에 저장 된 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">대상 배열에 저장할 요소의 형식입니다.</typeparam>
      <returns>지정된 항목을 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="items">결과 배열을 초기화할 원본 배열입니다.</param>
      <param name="start">결과 배열에 포함할 원본 배열에 있는 첫 번째 요소 의 인덱스입니다.</param>
      <param name="length">결과 배열에 포함할 원본 배열의 요소 수입니다.</param>
      <param name="selector">결과 배열에 포함된 소스 배열의 각 요소에 적용할 함수입니다.</param>
      <typeparam name="TSource">소스 배열에 저장 된 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">대상 배열에 저장할 요소의 형식입니다.</typeparam>
      <returns>지정된 항목을 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="items">결과 배열을 초기화할 원본 배열입니다.</param>
      <param name="selector">원본 배열의 각 요소에 적용할 함수입니다.</param>
      <param name="arg">선택기 매핑 함수에 전달될 인수입니다.</param>
      <typeparam name="TSource">소스 배열에 저장 된 요소의 형식입니다.</typeparam>
      <typeparam name="TArg">선택기 매핑 함수에 전달할 인수의 형식입니다.</typeparam>
      <typeparam name="TResult">대상 배열에 저장할 요소의 형식입니다.</typeparam>
      <returns>지정된 항목을 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="items">결과 배열을 초기화할 원본 배열입니다.</param>
      <param name="start">결과 배열에 포함할 원본 배열에 있는 첫 번째 요소 의 인덱스입니다.</param>
      <param name="length">결과 배열에 포함할 원본 배열의 요소 수입니다.</param>
      <param name="selector">결과 배열에 포함된 소스 배열의 각 요소에 적용할 함수입니다.</param>
      <param name="arg">선택기 매핑 함수에 전달될 인수입니다.</param>
      <typeparam name="TSource">소스 배열에 저장 된 요소의 형식입니다.</typeparam>
      <typeparam name="TArg">선택기 매핑 함수에 전달할 인수의 형식입니다.</typeparam>
      <typeparam name="TResult">대상 배열에 저장할 요소의 형식입니다.</typeparam>
      <returns>지정된 항목을 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>지정된 컬렉션에서 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="items">변경할 수 없는 배열에 복사할 개체의 컬렉션입니다.</param>
      <typeparam name="TSource">
        <paramref name="items" />에 포함된 요소의 형식입니다.</typeparam>
      <returns>지정된 개체 컬렉션을 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>작성기 배열의 현재 콘텐츠에서 변경할 수 없는 배열을 만듭니다.</summary>
      <param name="builder">변경할 수 없는 배열을 만들 작성기입니다.</param>
      <typeparam name="TSource">변경할 수 없는 배열에 포함 된 요소의 형식입니다.</typeparam>
      <returns>작성기 배열의 현재 콘텐츠를 포함하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary>변경할 수 없는 배열을 나타냅니다. 즉, 배열을 만든 후에는 변경할 수 없습니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T">배열에 의해 저장되는 요소의 형식입니다.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary>변경할 수 없는 빈 배열을 가져옵니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary>지정된 항목이 끝에 추가된 원래 배열의 복사본을 반환합니다.</summary>
      <param name="item">배열의 끝에 추가할 항목입니다.</param>
      <returns>지정된 항목이 끝에 추가된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 요소가 배열의 끝에 추가된 원래 배열의 복사본을 반환합니다.</summary>
      <param name="items">배열에 추가할 요소입니다.</param>
      <returns>요소가 추가된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>지정된 요소가 배열의 끝에 추가된 원래 배열의 복사본을 반환합니다.</summary>
      <param name="items">배열에 추가할 요소입니다.</param>
      <returns>요소가 추가된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary>다른 형식으로 캐스팅된 이 배열의 요소를 포함하는 변경할 수 없는 새 배열을 반환합니다.</summary>
      <typeparam name="TOther">반환할 배열 요소의 형식입니다.</typeparam>
      <returns>다른 형식으로 캐스팅된 이 배열의 요소를 포함하는 변경할 수 없는 배열입니다. 캐스팅에 실패한 경우 해당 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성에서 <see langword="true" />를 반환하는 배열을 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary>이 변경할 수 없는 배열에 대해 새 읽기 전용 메모리 영역을 만듭니다.</summary>
      <returns>이 변경할 수 없는 배열의 읽기 전용 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary>이 변경할 수 없는 배열에 대해 새 읽기 전용 범위를 만듭니다.</summary>
      <returns>이 변경할 수 없는 배열의 읽기 전용 범위 표현입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary>기본 배열을 <typeparamref name="TOther" /> 형식의 배열로 캐스팅하여 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <typeparam name="TOther">반환할 배열 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidCastException">캐스팅이 잘못된 경우 throw됩니다.</exception>
      <returns>요소가 새 형식으로 캐스팅된 변경 불가능한 배열 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>기존 인스턴스의 내용에 따라 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 구조체의 새 인스턴스를 초기화하면 공변(covariant) 고정 캐스트가 기존 배열을 효율적으로 다시 사용할 수 있습니다.</summary>
      <param name="items">배열을 초기화할 배열입니다. 복사는 수행되지 않습니다.</param>
      <typeparam name="TDerived">반환할 배열 요소의 형식입니다.</typeparam>
      <returns>요소가 새 형식으로 캐스팅된 변경 불가능한 배열 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary>모든 요소가 제거된 배열을 반환합니다.</summary>
      <returns>모든 요소가 제거된 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary>지정한 항목이 배열에 있는지 확인합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <returns>지정된 항목이 배열에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary>이 배열의 내용을 지정된 배열에 복사합니다.</summary>
      <param name="destination">복사할 대상 배열입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary>지정된 대상 인덱스에서 시작하여 이 배열의 내용을 지정된 배열에 복사합니다.</summary>
      <param name="destination">복사할 대상 배열입니다.</param>
      <param name="destinationIndex">복사를 시작할 <paramref name="array" />의 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>지정된 시작 인덱스에서 이 배열의 지정된 항목을 지정된 배열에 복사합니다.</summary>
      <param name="sourceIndex">복사를 시작할 이 배열의 인덱스입니다.</param>
      <param name="destination">복사할 대상 배열입니다.</param>
      <param name="destinationIndex">복사를 시작할 <paramref name="array" />의 인덱스입니다.</param>
      <param name="length">이 배열에서 복사할 요소 수입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>지정된 배열이 이 배열과 같은지 여부를 나타냅니다.</summary>
      <param name="other">이 개체와 비교할 개체입니다.</param>
      <returns>
        <see langword="true" />가 이 배열과 같으면 <paramref name="other" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary>이 배열이 지정된 개체와 같은지 여부를 확인합니다.</summary>
      <param name="obj">이 배열과 비교할 <see cref="T:System.Object" />입니다.</param>
      <returns>이 배열이 <paramref name="obj" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary>배열 내용에서 반복되는 열거자를 반환합니다.</summary>
      <returns>열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 알고리즘 및 해시 테이블과 같은 데이터 구조에 사용하기 적합한 이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary>배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <returns>해당 항목이 있으면 항목의 0부터 시작하는 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary>배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <param name="startIndex">검색을 시작할 인덱스입니다.</param>
      <returns>해당 항목이 있으면 항목의 0부터 시작하는 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <param name="startIndex">검색을 시작할 인덱스입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>해당 항목이 있으면 항목의 0부터 시작하는 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <param name="startIndex">검색을 시작할 인덱스입니다.</param>
      <param name="count">검색할 요소의 수입니다.</param>
      <returns>해당 항목이 있으면 항목의 0부터 시작하는 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <param name="startIndex">검색을 시작할 인덱스입니다.</param>
      <param name="count">검색할 요소의 수입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>해당 항목이 있으면 항목의 0부터 시작하는 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary>지정된 위치에 지정된 값이 삽입된 새 배열을 반환합니다.</summary>
      <param name="index">새 항목을 추가해야 하는 배열의 0부터 시작하는 인덱스입니다.</param>
      <param name="item">배열의 시작 부분에 삽입할 항목입니다.</param>
      <returns>지정된 인덱스에 항목이 삽입된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 인덱스에 지정된 값을 삽입합니다.</summary>
      <param name="index">값을 삽입할 인덱스입니다.</param>
      <param name="items">삽입할 요소입니다.</param>
      <returns>지정된 인덱스에 항목이 삽입된 변경할 수 없는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>지정된 인덱스에 지정된 값을 삽입합니다.</summary>
      <param name="index">값을 삽입할 인덱스입니다.</param>
      <param name="items">삽입할 요소입니다.</param>
      <returns>지정된 인덱스에 항목이 삽입된 변경할 수 없는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary>읽기 전용 목록에서 지정된 <paramref name="index" />에 있는 요소에 대한 읽기 전용 참조를 가져옵니다.</summary>
      <param name="index">참조를 가져올 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>읽기 전용 목록에서 지정된 <paramref name="index" />에 있는 요소에 대한 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary>배열에서 끝에서 시작하여 배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <returns>항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary>배열에서 끝에서 시작하여 배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <param name="startIndex">검색을 시작할 인덱스입니다.</param>
      <returns>항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>배열에서 끝에서 시작하여 배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <param name="startIndex">검색을 시작할 인덱스입니다.</param>
      <param name="count">검색할 요소의 수입니다.</param>
      <returns>항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>배열에서 끝에서 시작하여 배열에서 지정된 항목을 검색합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <param name="startIndex">검색을 시작할 인덱스입니다.</param>
      <param name="count">검색할 요소의 수입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary>이 배열의 요소를 지정된 형식에 할당할 수 있는 요소로 필터링합니다.</summary>
      <typeparam name="TResult">시퀀스의 요소를 필터링할 형식입니다.</typeparam>
      <returns>
        <paramref name="TResult" /> 형식의 입력 시퀀스에서 가져온 요소가 들어 있는 <see cref="T:System.Collections.IEnumerable" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>두 배열이 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="left">연산자 왼쪽에 있는 배열입니다.</param>
      <param name="right">연산자 오른쪽에 있는 배열입니다.</param>
      <returns>배열이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>두 배열이 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="left">연산자 왼쪽에 있는 배열입니다.</param>
      <param name="right">연산자 오른쪽에 있는 배열입니다.</param>
      <returns>배열이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>두 배열이 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">연산자 왼쪽에 있는 배열입니다.</param>
      <param name="right">연산자 오른쪽에 있는 배열입니다.</param>
      <returns>배열이 서로 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>두 배열이 다른지 확인합니다.</summary>
      <param name="left">연산자 왼쪽에 있는 개체입니다.</param>
      <param name="right">연산자 오른쪽에 있는 개체입니다.</param>
      <returns>두 배열이 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary>첫 번째로 나타나는 지정된 요소가 제거된 배열을 반환합니다. 일치하는 항목이 없는 경우 현재 배열이 반환됩니다.</summary>
      <param name="item">제거할 항목입니다.</param>
      <returns>항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>첫 번째로 나타나는 지정된 요소가 제거된 배열을 반환합니다.  
  
 일치하는 항목이 없는 경우 현재 배열이 반환됩니다.</summary>
      <param name="item">제거할 항목입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>지정된 항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary>지정된 조건을 충족하는 모든 항목을 배열에서 제거합니다.</summary>
      <param name="match">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>지정된 조건을 충족하는 항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary>지정된 위치의 요소가 제거된 배열을 반환합니다.</summary>
      <param name="index">반환된 배열에서 제거할 요소의 0부터 시작하는 인덱스입니다.</param>
      <returns>지정된 인덱스의 항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>이 배열에서 지정된 항목을 제거합니다.</summary>
      <param name="items">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <returns>요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>이 배열에서 지정된 항목을 제거합니다.</summary>
      <param name="items">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>이 목록에서 지정된 값을 제거합니다.</summary>
      <param name="items">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <returns>요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>이 목록에서 지정된 항목을 제거합니다.</summary>
      <param name="items">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>지정된 위치의 요소가 제거된 배열을 반환합니다.</summary>
      <param name="index">배열에서 제거할 시작 요소의 0부터 시작하는 인덱스입니다.</param>
      <param name="length">배열에서 제거할 요소 수입니다.</param>
      <returns>지정된 요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary>배열에서 지정된 값과 같은 첫 번째 요소를 찾아 해당 값을 지정된 새 값으로 바꿉니다.</summary>
      <param name="oldValue">배열에서 찾아서 바꿀 값입니다.</param>
      <param name="newValue">
        <c>oldvalue</c>를 바꿀 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" />가 배열에 없습니다.</exception>
      <returns>
        <paramref name="newValue" />가 포함된 새 배열입니다. 이는 새 값과 이전 값이 동일한 경우에도 마찬가지입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>배열에서 지정된 값과 같은 첫 번째 요소를 찾아 해당 값을 지정된 새 값으로 바꿉니다.</summary>
      <param name="oldValue">배열에서 찾아서 바꿀 값입니다.</param>
      <param name="newValue">
        <c>oldvalue</c>를 바꿀 값입니다.</param>
      <param name="equalityComparer">값을 비교하는 데 사용할 같음 비교자입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" />가 배열에 없습니다.</exception>
      <returns>
        <paramref name="newValue" />가 포함된 새 배열입니다. 이는 새 값과 이전 값이 동일한 경우에도 마찬가지입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary>지정된 인덱스에 있는 항목을 지정된 항목으로 바꿉니다.</summary>
      <param name="index">바꿀 항목의 인덱스입니다.</param>
      <param name="item">목록에 추가할 항목입니다.</param>
      <returns>지정된 인덱스에 있는 <paramref name="item" />을 포함하는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary>기본 비교자를 사용하여 변경할 수 없는 배열의 요소를 정렬합니다.</summary>
      <returns>이 배열의 항목을 정렬된 순서대로 포함하는 변경할 수 없는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 변경할 수 없는 배열의 요소를 정렬합니다.</summary>
      <param name="comparer">요소를 비교할 때 사용할 구현이거나, 기본 비교자를 사용하려면 <see langword="null" />입니다.</param>
      <returns>이 배열의 항목을 정렬된 순서대로 포함하는 변경할 수 없는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary>지정된 <see cref="T:System.Comparison`1" />을 사용하여 전체 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />의 요소를 정렬합니다.</summary>
      <param name="comparison">요소를 비교할 때 사용할 <see cref="T:System.Comparison`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" />가 null입니다.</exception>
      <returns>정렬된 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 변경할 수 없는 배열의 지정된 요소를 정렬합니다.</summary>
      <param name="index">정렬할 첫 번째 요소의 인덱스입니다.</param>
      <param name="count">정렬에 포함할 요소 수입니다.</param>
      <param name="comparer">요소를 비교할 때 사용할 구현이거나, 기본 비교자를 사용하려면 <see langword="null" />입니다.</param>
      <returns>이 배열의 항목을 정렬된 순서대로 포함하는 변경할 수 없는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="item">배열의 끝에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="item">배열에서 제거할 개체입니다.</param>
      <returns>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>배열에서 반복되는 열거자를 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 <see langword="true" />를 반환합니다.</exception>
      <returns>배열에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="index">항목을 삽입할 위치의 인덱스입니다.</param>
      <param name="item">삽입할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="index">인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>지정된 인덱스에서 시작하여 이 배열을 다른 배열에 복사합니다.</summary>
      <param name="array">이 배열을 복사할 배열입니다.</param>
      <param name="index">복사 작업을 시작할 대상 배열의 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>변경할 수 없는 배열에서 반복되는 열거자를 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 <see langword="true" />를 반환합니다.</exception>
      <returns>변경할 수 없는 배열에서 반복되는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="value">배열에 추가할 값입니다.</param>
      <exception cref="T:System.NotSupportedException">모든 경우에 throw됩니다.</exception>
      <returns>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <exception cref="T:System.NotSupportedException">모든 경우에 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="value">확인할 값입니다.</param>
      <returns>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>지정한 인덱스의 값을 가져옵니다.</summary>
      <param name="value">인덱스를 반환할 값입니다.</param>
      <returns>지정된 인덱스에 있는 요소의 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="index">항목을 삽입할 위치를 나타내는 인덱스입니다.</param>
      <param name="value">삽입할 값입니다.</param>
      <exception cref="T:System.NotSupportedException">모든 경우에 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="value">배열에서 제거할 값입니다.</param>
      <exception cref="T:System.NotSupportedException">모든 경우에 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>모든 경우에 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="index">제거할 항목의 인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException">모든 경우에 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>지정된 항목이 끝에 추가된 원래 배열의 복사본을 반환합니다.</summary>
      <param name="value">배열의 끝에 추가할 값입니다.</param>
      <returns>지정된 항목이 끝에 추가된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 요소가 배열의 끝에 추가된 원래 배열의 복사본을 반환합니다.</summary>
      <param name="items">배열의 끝에 추가할 요소입니다.</param>
      <returns>요소가 끝에 추가된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>모든 요소가 제거된 배열을 반환합니다.</summary>
      <returns>모든 요소가 제거된 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>지정된 위치에 지정된 값이 삽입된 새 배열을 반환합니다.</summary>
      <param name="index">새 항목을 추가해야 하는 배열의 0부터 시작하는 인덱스입니다.</param>
      <param name="element">배열의 시작 부분에 삽입할 항목입니다.</param>
      <returns>지정된 값이 삽입된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 인덱스에 지정된 값을 삽입합니다.</summary>
      <param name="index">값을 삽입할 인덱스입니다.</param>
      <param name="items">삽입할 요소입니다.</param>
      <returns>지정된 값이 삽입된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>첫 번째로 나타나는 지정된 요소가 제거된 배열을 반환합니다. 일치하는 항목이 없는 경우 현재 배열이 반환됩니다.</summary>
      <param name="value">배열에서 제거할 값입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>값이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>지정된 조건을 충족하는 모든 항목을 배열에서 제거합니다.</summary>
      <param name="match">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>지정된 조건을 충족하는 항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>지정된 위치의 요소가 제거된 배열을 반환합니다.</summary>
      <param name="index">반환된 배열에서 제거할 요소의 0부터 시작하는 인덱스입니다.</param>
      <returns>지정된 항목이 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>이 배열에서 지정된 항목을 제거합니다.</summary>
      <param name="items">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>지정된 위치의 요소가 제거된 배열을 반환합니다.</summary>
      <param name="index">배열에서 제거할 시작 요소의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">배열에서 제거할 요소 수입니다.</param>
      <returns>지정된 요소가 제거된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>배열에서 지정된 값과 같은 첫 번째 요소를 찾아 해당 값을 지정된 새 값으로 바꿉니다.</summary>
      <param name="oldValue">배열에서 찾아서 바꿀 값입니다.</param>
      <param name="newValue">
        <c>oldvalue</c>를 바꿀 값입니다.</param>
      <param name="equalityComparer">값을 비교하는 데 사용할 같음 비교자입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" />가 배열에 없습니다.</exception>
      <returns>
        <paramref name="newValue" />가 포함된 새 배열입니다. 이는 새 값과 이전 값이 동일한 경우에도 마찬가지입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>지정된 인덱스에 있는 항목을 지정된 항목으로 바꿉니다.</summary>
      <param name="index">바꿀 항목의 인덱스입니다.</param>
      <param name="value">목록에 추가할 값입니다.</param>
      <returns>지정된 인덱스에 있는 <paramref name="item" />을 포함하는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>정렬 순서에서 현재 컬렉션 요소의 위치가 다른 요소보다 앞인지, 뒤인지 또는 동일한지를 확인합니다.</summary>
      <param name="other">현재 인스턴스와 비교할 요소입니다.</param>
      <param name="comparer">현재 배열의 구성원을 다른 배열의 해당 구성원과 비교하는 데 사용되는 개체입니다.</param>
      <exception cref="T:System.ArgumentException">배열은 길이가 동일하지 않습니다.</exception>
      <returns>현재 요소가 다른 요소 앞에 있는지, 같은 위치에 있는지 또는 뒤에 있는지를 나타내는 정수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>이 배열이 지정된 배열과 구조적으로 동일한지 여부를 확인합니다.</summary>
      <param name="other">현재 인스턴스와 비교할 배열입니다.</param>
      <param name="comparer">현재 인스턴스와 다른 인스턴스가 구조적으로 동일한지 여부를 확인하는 개체입니다.</param>
      <returns>두 배열이 구조적으로 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>현재 인스턴스의 해시 코드를 반환합니다.</summary>
      <param name="comparer">현재 개체의 해시 코드를 계산하는 개체입니다.</param>
      <returns>현재 인스턴스에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary>변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 배열과 내용이 동일한 변경 가능한 해시 집합을 만듭니다.</summary>
      <returns>이 배열과 내용이 동일한 새 작성기입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary>이 배열이 선언되었지만 초기화되지 않았는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" />가 <see langword="null" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" />가 비어 있는지 또는 초기화되지 않았는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" />이 또는 이면 <see langword="null" /><see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" /> 이 고, 그렇지 않으면 <see langword="false" /> 입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary>이 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 비어 있으면 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary>변경할 수 없는 배열에서 지정된 인덱스의 요소를 가져옵니다.</summary>
      <param name="index">가져올 요소의 0부터 시작하는 인덱스입니다.</param>
      <returns>변경할 수 없는 배열의 지정된 인덱스에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary>배열의 요소 수를 가져옵니다.</summary>
      <returns>배열의 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary>컬렉션의 항목 수를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
      <returns>컬렉션의 항목 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>이 인스턴스가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 인스턴스가 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>읽기 전용 목록에서 지정된 인덱스의 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져올 요소의 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException">setter에서 항상 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
      <returns>읽기 전용 목록에서 지정된 인덱스의 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary>컬렉션의 항목 수를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
      <returns>컬렉션의 항목 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져옵니다.</summary>
      <param name="index">인덱스입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
      <returns>요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary>배열의 크기를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
      <returns>컬렉션의 항목 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> 인터페이스를 확인합니다. 변경할 수 없는 컬렉션이 스레드로부터 안전하기 때문에 항상 <see langword="true" />를 반환합니다.</summary>
      <returns>컬렉션이 스레드로부터 안전한 지 여부를 확인 하는 부울 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary>동기화 루트를 가져옵니다.</summary>
      <returns>컬렉션에 대 한 액세스를 동기화 하기 위한 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary>이 인스턴스가 고정된 크기인지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 이 인스턴스가 고정 크기 이면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" /> 입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary>이 인스턴스가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 인스턴스가 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary>지정된 인덱스에 있는 <see cref="T:System.Object" />를 가져오거나 설정합니다.</summary>
      <param name="index">인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException">setter에서 항상 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 속성이 true를 반환하는 경우 throw됩니다.</exception>
      <returns>지정한 인덱스에 있는 개체입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>추가 메모리 할당 없이 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 인스턴스로 변환할 수 있는 쓰기 가능한 배열 접근자입니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary>지정된 항목을 배열에 추가합니다.</summary>
      <param name="item">배열에 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary>지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items">배열에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary>지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items">배열에 추가할 항목입니다.</param>
      <param name="length">추가할 원본 배열의 요소 수입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items">배열에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary>지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items">배열에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items">배열에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary>지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items">배열에 추가할 항목입니다.</param>
      <param name="length">추가할 원본 배열의 요소 수입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary>현재 배열의 형식에서 파생된 지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items">배열의 끝에 추가할 항목입니다.</param>
      <typeparam name="TDerived">배열에 이미 있는 항목의 형식에서 파생되는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>현재 배열의 형식에서 파생된 지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items">배열의 끝에 추가할 항목입니다.</param>
      <typeparam name="TDerived">배열에 이미 있는 항목의 형식에서 파생되는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>현재 배열의 형식에서 파생된 지정된 항목을 배열의 끝에 추가합니다.</summary>
      <param name="items">배열의 끝에 추가할 항목입니다.</param>
      <typeparam name="TDerived">배열에 이미 있는 항목의 형식에서 파생되는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>배열에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary>배열에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">배열에서 찾을 개체입니다.</param>
      <returns>개체가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>현재 내용을 지정된 배열에 복사합니다.</summary>
      <param name="array">복사할 대상 배열입니다.</param>
      <param name="index">복사 작업을 시작할 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary>컬렉션을 반복하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary>배열에서 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="item">배열에서 찾을 항목입니다.</param>
      <returns>목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary>지정된 항목의 인덱스를 확인합니다.</summary>
      <param name="item">배열에서 찾을 항목입니다.</param>
      <param name="startIndex">검색을 시작할 위치입니다.</param>
      <returns>목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>지정된 항목의 인덱스를 확인합니다.</summary>
      <param name="item">배열에서 찾을 항목입니다.</param>
      <param name="startIndex">검색을 시작할 위치입니다.</param>
      <param name="count">검색할 요소의 수입니다.</param>
      <returns>목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정된 항목의 인덱스를 확인합니다.</summary>
      <param name="item">배열에서 찾을 항목입니다.</param>
      <param name="startIndex">검색을 시작할 인덱스입니다.</param>
      <param name="count">검색을 시작할 위치입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary>배열의 지정된 인덱스에 항목을 삽입합니다.</summary>
      <param name="index">항목을 삽입할 0부터 시작하는 인덱스입니다.</param>
      <param name="item">배열에 삽입할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary>지정된 인덱스에 있는 요소에 대한 읽기 전용 참조를 가져옵니다.</summary>
      <param name="index">항목 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" />가 배열 수보다 크거나 같습니다.</exception>
      <returns>지정된 인덱스에 있는 요소에 대한 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary>이 배열에서 마지막으로 나타나는 지정된 항목의 0부터 시작하는 인덱스를 확인합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <returns>항목을 찾은 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>이 배열에서 마지막으로 나타나는 지정된 항목의 0부터 시작하는 인덱스를 확인합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <param name="startIndex">검색을 시작할 위치입니다.</param>
      <returns>항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>이 배열에서 마지막으로 나타나는 지정된 항목의 0부터 시작하는 인덱스를 확인합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <param name="startIndex">검색을 시작할 위치입니다.</param>
      <param name="count">검색할 요소의 수입니다.</param>
      <returns>항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>이 배열에서 마지막으로 나타나는 지정된 항목의 0부터 시작하는 인덱스를 확인합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <param name="startIndex">검색을 시작할 위치입니다.</param>
      <param name="count">검색할 요소의 수입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>항목을 찾은 배열의 0부터 시작하는 인덱스입니다. 항목을 찾을 수 없는 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary>내부 배열을 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />로 추출하고 길이가 0인 배열로 바꿉니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" />가 <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />와 같지 않은 경우입니다.</exception>
      <returns>작성기의 요소를 포함 하는 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary>지정된 요소를 제거합니다.</summary>
      <param name="element">제거할 항목입니다.</param>
      <returns>
        <paramref name="element" />을 찾아 제거했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary>배열에서 지정된 인덱스의 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary>컬렉션에서 요소의 순서를 반대로 바꿉니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>배열의 내용을 정렬합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>배열의 내용을 정렬합니다.</summary>
      <param name="comparer">정렬에 사용할 비교자입니다. 비교자가 <see langword="null" />인 경우 배열에 있는 요소 형식의 기본 비교자가 사용됩니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary>지정된 <see cref="T:System.Comparison`1" />을 사용하여 전체 배열의 요소를 정렬합니다.</summary>
      <param name="comparison">요소를 비교할 때 사용할 <see cref="T:System.Comparison`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" />가 null입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>배열의 내용을 정렬합니다.</summary>
      <param name="index">정렬의 시작 인덱스입니다.</param>
      <param name="count">정렬에 포함할 요소 수입니다.</param>
      <param name="comparer">정렬에 사용할 비교자입니다. 비교자가 <see langword="null" />인 경우 배열에 있는 요소 형식의 기본 비교자가 사용됩니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>배열에서 반복되는 열거자를 반환합니다.</summary>
      <returns>배열에서 반복되는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>배열에서 반복되는 열거자를 반환합니다.</summary>
      <returns>배열에서 반복되는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary>이 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />의 현재 내용이 포함된 새 배열을 만듭니다.</summary>
      <returns>이 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />의 현재 내용이 포함된 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary>이 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />의 현재 내용이 포함된 변경할 수 없는 배열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />의 현재 내용이 포함된 변경할 수 없는 배열입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary>내부 배열의 길이를 가져오거나 설정합니다. 설정될 때 내부 배열에 길이가 지정되지 않으면 지정된 용량에 다시 할당됩니다.</summary>
      <returns>내부 배열의 길이입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary>배열의 항목 수를 가져오거나 설정합니다.</summary>
      <returns>배열의 항목 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary>지정한 인덱스에 있는 항목을 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 항목의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 인덱스가 배열에 포함되지 않는 경우</exception>
      <returns>지정된 인덱스에 있는 항목입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>배열 열거자입니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>배열의 다음 값으로 이동합니다.</summary>
      <returns>배열에 다른 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>현재 항목을 가져옵니다.</summary>
      <returns>현재 항목입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>변경할 수 없는 지정된 사전에 지정된 키/값 쌍이 들어 있는지 여부를 확인합니다.</summary>
      <param name="map">검색할 변경할 수 없는 사전입니다.</param>
      <param name="key">변경할 수 없는 사전에서 찾을 키입니다.</param>
      <param name="value">키가 있는 경우 지정된 키에서 찾을 값입니다.</param>
      <typeparam name="TKey">변경할 수 없는 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">변경할 수 없는 사전에 있는 값의 형식입니다.</typeparam>
      <returns>이 맵에 지정된 키/값 쌍이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>변경할 수 없는 빈 사전을 만듭니다.</summary>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>변경할 수 없는 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 키 비교자를 사용하는 변경할 수 없는 빈 사전을 만듭니다.</summary>
      <param name="keyComparer">사전의 키와 동일한지 확인하는 데 사용할 구현입니다.</param>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>변경할 수 없는 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 및 값 비교자를 사용하는 변경할 수 없는 빈 사전을 만듭니다.</summary>
      <param name="keyComparer">사전의 키와 동일한지 확인하는 데 사용할 구현입니다.</param>
      <param name="valueComparer">사전의 값과 동일한지 확인하는 데 사용할 구현입니다.</param>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>변경할 수 없는 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>변경할 수 없는 새 사전 작성기를 만듭니다.</summary>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>새 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>변경할 수 없는 새 사전 작성기를 만듭니다.</summary>
      <param name="keyComparer">키 비교자입니다.</param>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>새 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>변경할 수 없는 새 사전 작성기를 만듭니다.</summary>
      <param name="keyComparer">키 비교자입니다.</param>
      <param name="valueComparer">값 비교자입니다.</param>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>새 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>지정된 항목이 포함된 변경할 수 없는 새 사전을 만듭니다.</summary>
      <param name="items">변경할 수 없는 상태가 되기 전에 사전을 채우는 데 사용할 항목입니다.</param>
      <typeparam name="TKey">사전의 키 형식입니다.</typeparam>
      <typeparam name="TValue">사전의 값 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>지정된 항목을 포함하고 지정된 키 비교자를 사용하는 변경할 수 없는 새 사전을 만듭니다.</summary>
      <param name="keyComparer">키가 같은지 비교하는 데 사용할 비교자 구현입니다.</param>
      <param name="items">변경할 수 없는 상태가 되기 전에 사전에 추가할 항목입니다.</param>
      <typeparam name="TKey">사전의 키 형식입니다.</typeparam>
      <typeparam name="TValue">사전의 값 형식입니다.</typeparam>
      <returns>지정된 항목을 포함하고 지정된 비교자를 사용하는 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>지정된 항목을 포함하고 지정된 키 비교자를 사용하는 변경할 수 없는 새 사전을 만듭니다.</summary>
      <param name="keyComparer">키가 같은지 비교하는 데 사용할 비교자 구현입니다.</param>
      <param name="valueComparer">값이 같은지 비교하는 데 사용할 비교자 구현입니다.</param>
      <param name="items">변경할 수 없는 상태가 되기 전에 사전에 추가할 항목입니다.</param>
      <typeparam name="TKey">사전의 키 형식입니다.</typeparam>
      <typeparam name="TValue">사전의 값 형식입니다.</typeparam>
      <returns>지정된 항목을 포함하고 지정된 비교자를 사용하는 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져옵니다.</summary>
      <param name="dictionary">값을 검색할 사전입니다.</param>
      <param name="key">검색할 키입니다.</param>
      <typeparam name="TKey">키의 형식입니다.</typeparam>
      <typeparam name="TValue">값의 유형입니다.</typeparam>
      <returns>키의 값입니다. 일치하는 키가 없는 경우 <c>기본값(TValue)</c>입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져옵니다.</summary>
      <param name="dictionary">값을 검색할 사전입니다.</param>
      <param name="key">검색할 키입니다.</param>
      <param name="defaultValue">일치하는 키가 사전에 없는 경우에 반환할 기본값입니다.</param>
      <typeparam name="TKey">키의 형식입니다.</typeparam>
      <typeparam name="TValue">값의 유형입니다.</typeparam>
      <returns>키의 값입니다. 일치하는 키가 없는 경우 <paramref name="defaultValue" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>원본 키에 변형 함수를 적용하여 기존 요소 컬렉션에서 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source">변경할 수 없는 사전을 생성하는 데 사용되는 원본 컬렉션입니다.</param>
      <param name="keySelector">변경할 수 없는 사전에 대한 키를 변환하는 데 사용되는 함수입니다.</param>
      <typeparam name="TSource">원본 컬렉션에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">변경할 수 없는 결과 사전에 있는 키의 형식입니다.</typeparam>
      <returns>
        <paramref name="source" />의 요소를 포함하고 <paramref name="keySelector" />를 적용하여 키를 변환한 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>시퀀스의 일부 변환에 따라 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source">변경할 수 없는 사전을 생성하는 데 사용되는 원본 컬렉션입니다.</param>
      <param name="keySelector">변경할 수 없는 사전에 대한 키를 변환하는 데 사용되는 함수입니다.</param>
      <param name="keyComparer">사전에 사용할 키 비교자입니다.</param>
      <typeparam name="TSource">원본 컬렉션에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">변경할 수 없는 결과 사전에 있는 키의 형식입니다.</typeparam>
      <returns>
        <paramref name="source" />의 요소를 포함하고 <paramref name="keySelector" />를 적용하여 키를 변환한 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>키/값 쌍의 시퀀스를 열거하고 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source">열거할 키/값 쌍의 시퀀스입니다.</param>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>키/값 쌍의 시퀀스를 열거하고, 지정된 키 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source">열거할 키/값 쌍의 시퀀스입니다.</param>
      <param name="keyComparer">변경할 수 없는 사전을 바인딩할 때 사용할 키 비교자입니다.</param>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>키/값 쌍의 시퀀스를 열거하고, 지정된 키 및 값 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source">열거할 키/값 쌍의 시퀀스입니다.</param>
      <param name="keyComparer">변경할 수 없는 사전을 바인딩할 때 사용할 키 비교자입니다.</param>
      <param name="valueComparer">변경할 수 없는 사전에 사용할 값 비교자입니다.</param>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary>작성기 사전의 현재 콘텐츠에서 변경할 수 없는 사전을 만듭니다.</summary>
      <param name="builder">변경할 수 없는 사전을 만들 작성기입니다.</param>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
      <returns>작성기 사전의 현재 콘텐츠를 포함하는 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>시퀀스를 열거 및 변형하고 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <typeparam name="TSource">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 항목을 포함하는 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>시퀀스를 열거 및 변형하고, 지정된 키 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <param name="keyComparer">사전에 사용할 키 비교자입니다.</param>
      <typeparam name="TSource">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 항목을 포함하는 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>시퀀스를 열거 및 변형하고, 지정된 키 및 값 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <param name="keyComparer">사전에 사용할 키 비교자입니다.</param>
      <param name="valueComparer">사전에 사용할 값 비교자입니다.</param>
      <typeparam name="TSource">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 항목을 포함하는 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>순서가 지정되지 않은 변경할 수 없는 키/값 컬렉션을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary>변경할 수 없는 빈 사전을 가져옵니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>지정한 키와 값을 가진 요소를 변경할 수 없는 사전에 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 키가 이미 사전에 있지만 값이 다릅니다.</exception>
      <returns>추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>지정한 키/값 쌍을 변경할 수 없는 사전에 추가합니다.</summary>
      <param name="pairs">추가할 키/값 쌍입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 키 중 하나가 이미 사전에 있지만 값이 다릅니다.</exception>
      <returns>추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>이 사전 인스턴스와 순서 및 키/값 비교 규칙이 동일한 변경할 수 없는 빈 사전을 검색합니다.</summary>
      <returns>순서 및 키/값 비교 규칙이 동일한 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>이 변경할 수 없는 사전에 지정된 키/값 쌍이 들어 있는지 여부를 확인합니다.</summary>
      <param name="pair">찾을 키/값 쌍입니다.</param>
      <returns>지정된 키/값 쌍이 사전에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>변경할 수 없는 사전에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key">찾을 키입니다.</param>
      <returns>변경할 수 없는 사전에 지정된 키를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>변경할 수 없는 사전에 지정된 값을 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="value">찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>사전에 지정된 값을 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>변경할 수 없는 사전에서 반복되는 열거자를 반환합니다.</summary>
      <returns>사전에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>변경할 수 없는 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <returns>지정된 요소가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>변경할 수 없는 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="keys">제거할 요소의 키입니다.</param>
      <returns>지정된 키가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>변경할 수 없는 사전에서 지정된 키와 값을 설정합니다. 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="key">추가할 엔트리의 키입니다.</param>
      <param name="value">설정할 키 값입니다.</param>
      <returns>지정된 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>변경할 수 없는 사전에서 지정된 키/값 쌍을 설정합니다. 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="items">사전에서 설정할 키/값 쌍입니다. 사전에 키가 이미 있는 경우 이 메서드는 해당 키의 이전 값을 덮어씁니다.</param>
      <returns>지정된 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>특정 <see cref="T:System.Collections.Generic.ICollection`1" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.ICollection`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <returns>
        <see langword="true" />이 <paramref name="item" />에서 제거되면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <see langword="false" />이 원래 <paramref name="item" />에 없는 경우에도 <see cref="T:System.Collections.Generic.ICollection`1" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>제공된 키와 값을 가진 요소를 변경할 수 없는 사전에 추가합니다.</summary>
      <param name="key">추가할 요소의 키로 사용할 개체입니다.</param>
      <param name="value">추가할 요소의 값으로 사용할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.IDictionary`2" />에 있는 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" />이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>지정된 키를 가진 요소를 제네릭 사전에서 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" />이 읽기 전용인 경우</exception>
      <returns>요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <paramref name="key" />가 원래의 제네릭 사전에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 배열 인덱스부터 시작하여 사전의 요소를 배열에 복사합니다.</summary>
      <param name="array">사전에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>제공한 키와 값을 가진 요소를 변경할 수 없는 사전 개체에 추가합니다.</summary>
      <param name="key">추가할 요소의 키로 사용할 개체입니다.</param>
      <param name="value">추가할 요소의 값으로 사용할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary>이 인스턴스를 지웁니다.</summary>
      <exception cref="T:System.NotSupportedException">사전 개체는 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>변경할 수 없는 사전 개체에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key">사전 개체에서 찾을 키입니다.</param>
      <returns>키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>변경할 수 없는 사전 개체에 대한 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체를 반환합니다.</summary>
      <returns>사전 개체에 대한 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>변경할 수 없는 사전 개체에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인터페이스를 확인합니다.</summary>
      <param name="key">추가할 항목의 키입니다.</param>
      <param name="value">추가할 항목의 값입니다.</param>
      <returns>추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인터페이스를 확인합니다.</summary>
      <param name="pairs">사전에 추가할 키/값 쌍의 시퀀스입니다.</param>
      <returns>추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear">
      <summary>이 사전 인스턴스와 순서 및 키-값 비교 규칙이 동일한 빈 사전을 검색합니다.</summary>
      <returns>변경할 수 없는 사전 인스턴스.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인터페이스를 확인합니다.</summary>
      <param name="key">제거할 항목의 키입니다.</param>
      <returns>지정된 요소가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인터페이스를 확인합니다.</summary>
      <param name="keys">제거할 키의 시퀀스입니다.</param>
      <returns>지정된 키가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인터페이스를 확인합니다.</summary>
      <param name="key">추가할 항목의 키입니다.</param>
      <param name="value">추가할 항목의 값입니다.</param>
      <returns>지정된 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>지정된 키-값 쌍 집합을 변경할 수 없는 사전에 적용하여 결과 사전에서 충돌하는 키를 바꿉니다.</summary>
      <param name="items">맵에서 설정할 키-값 쌍. 기존 키와 충돌 하는 키는 모두 이전 값을 대신합니다.</param>
      <returns>키-값 쌍이 업데이트된 변경할 수 없는 사전의 복사본.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 사전과 내용이 동일한 변경할 수 없는 사전을 만듭니다.</summary>
      <returns>변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 사전과 내용이 동일한 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>이 사전에 지정된 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalKey">검색할 키입니다.</param>
      <param name="actualKey">사전에서 일치하는 키가 있으면 그대로이고, 일치하는 키가 없으면 <c>equalkey</c>입니다.</param>
      <returns>
        <paramref name="equalKey" />에 대한 일치하는 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key">값을 검색할 키입니다.</param>
      <param name="value">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값을 포함하고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <returns>사전을 구현하는 개체에 지정된 키를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정된 키 비교자를 사용하는 변경할 수 없는 사전의 인스턴스를 가져옵니다.</summary>
      <param name="keyComparer">사용할 키 비교자입니다.</param>
      <returns>지정된 비교자를 사용하는 변경할 수 없는 사전의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>지정된 키 및 값 비교자를 사용하는 변경할 수 없는 사전의 인스턴스를 가져옵니다.</summary>
      <param name="keyComparer">사용할 키 비교자입니다.</param>
      <param name="valueComparer">사용할 값 비교자입니다.</param>
      <returns>지정된 비교자를 사용하는 변경할 수 없는 사전의 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>변경할 수 없는 사전에서 키/값 쌍 수를 가져옵니다.</summary>
      <returns>사전에 있는 키/값 쌍 수를 가져옵니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>변경할 수 없는 사전의 이 인스턴스가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 인스턴스가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>지정된 키와 연결된 <paramref name="TValue" />를 가져옵니다.</summary>
      <param name="key">키의 형식입니다.</param>
      <returns>지정한 키와 연결된 값입니다. 결과가 없으면 작업에서 예외를 throw합니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>변경할 수 없는 사전에 대한 키 비교자를 가져옵니다.</summary>
      <returns>키 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>변경할 수 없는 사전에서 키를 가져옵니다.</summary>
      <returns>변경할 수 없는 사전의 키입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>지정한 키가 있는 <typeparamref name="TValue" />를 가져오거나 설정합니다.</summary>
      <param name="key">키의 형식입니다.</param>
      <returns>와 연결 된 형식의 개체 <typeparamref name="TValue" /><paramref name="key" /> 입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>키를 가져옵니다.</summary>
      <returns>키를 포함 하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>값을 가져옵니다.</summary>
      <returns>값을 포함 하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key">키입니다.</param>
      <returns>지정 된 키 아래에 저장 된 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 값을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>값이 같은지 여부를 확인하는 데 사용되는 값 비교자를 가져옵니다.</summary>
      <returns>값이 같은지 여부를 확인하는 데 사용되는 값 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>변경할 수 없는 사전에서 값을 가져옵니다.</summary>
      <returns>변경할 수 없는 사전의 값입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>메모리 할당 없이 변경되고, 변경할 수 없는 해시 맵 인스턴스를 매우 효율적으로 생성하거나 빌드할 수 있는 해시 맵을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary>지정한 키와 값을 가진 요소를 변경할 수 없는 사전에 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">같은 키를 가진 요소가 이미 사전에 있습니다.</exception>
      <exception cref="T:System.NotSupportedException">사전은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>변경할 수 없는 사전에 지정된 항목을 추가합니다.</summary>
      <param name="item">사전에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">사전은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>값의 시퀀스를 이 컬렉션에 추가합니다.</summary>
      <param name="items">이 컬렉션에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>변경할 수 없는 사전에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">사전은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>변경할 수 없는 사전에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">사전에서 찾을 개체입니다.</param>
      <returns>
        <paramref name="item" />이 사전에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary>변경할 수 없는 사전에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key">사전에서 찾을 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <returns>키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary>변경할 수 없는 사전에 지정된 값을 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="value">변경할 수 없는 사전에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>사전에 지정된 값을 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>변경할 수 없는 사전에서 반복되는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져옵니다.</summary>
      <param name="key">검색할 키입니다.</param>
      <returns>키의 값입니다. 일치하는 키가 없는 경우 <c>기본값(TValue)</c>입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져옵니다.</summary>
      <param name="key">검색할 키입니다.</param>
      <param name="defaultValue">일치하는 키가 사전에 없는 경우에 반환할 기본값입니다.</param>
      <returns>키의 값입니다. 일치하는 키가 없는 경우 <paramref name="defaultValue" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary>변경할 수 없는 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <exception cref="T:System.NotSupportedException">사전은 읽기 전용입니다.</exception>
      <returns>요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <paramref name="key" />가 사전에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>변경할 수 없는 사전에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item">사전에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">사전은 읽기 전용입니다.</exception>
      <returns>
        <paramref name="item" />이 사전에서 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="item" />이 사전에 없는 경우에도 false를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 시퀀스에서 찾은 것과 일치하는 키를 가진 모든 항목을 변경할 수 없는 사전에서 제거합니다.</summary>
      <param name="keys">사전에서 제거할 항목의 키입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>지정한 배열 인덱스부터 사전의 요소를 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 형식의 배열에 복사합니다.</summary>
      <param name="array">사전에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>지정한 배열 인덱스부터 사전의 요소를 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 형식의 배열에 복사합니다.</summary>
      <param name="array">사전에서 복사한 요소의 대상인 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 형식의 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>제공한 키와 값을 가진 요소를 사전 개체에 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>사전 개체에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key">찾을 키입니다.</param>
      <returns>키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>사전의 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체를 반환합니다.</summary>
      <exception cref="T:System.NotImplementedException" />
      <returns>사전의 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>지정된 키를 가진 요소를 사전에서 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>이 인스턴스의 내용을 기반으로 변경할 수 없는 사전을 만듭니다.</summary>
      <returns>변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>이 사전에 지정된 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalKey">검색할 키입니다.</param>
      <param name="actualKey">사전에서 일치하는 키가 있으면 그대로이고, 일치하는 키가 없으면 <c>equalkey</c>입니다.</param>
      <returns>
        <paramref name="equalKey" />에 대한 일치하는 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>지정된 키와 연결된 값을 가져옵니다.</summary>
      <param name="key">값을 검색할 키입니다.</param>
      <param name="value">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값을 포함하고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식의 기본값을 반환합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <returns>변경할 수 없는 사전을 구현하는 개체에 지정된 키를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>변경할 수 없는 사전에 포함된 요소 수를 가져옵니다.</summary>
      <returns>변경할 수 없는 사전에 포함된 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary>지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key">가져오거나 설정할 요소입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">속성을 검색중이며 <paramref name="key" />가 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">속성을 설정중이며 <see cref="T:System.Collections.Generic.IDictionary`2" />가 읽기 전용입니다.</exception>
      <returns>지정된 키를 가진 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>키 비교자를 가져오거나 설정합니다.</summary>
      <returns>키 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>변경할 수 없는 사전의 키가 들어 있는 컬렉션을 가져옵니다.</summary>
      <returns>변경할 수 없는 사전을 구현하는 개체의 키가 들어 있는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>제네릭 사전의 키를 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>제네릭 사전을 구현 하는 개체의 키를 포함 하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>제네릭 사전의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>제네릭 사전을 구현 하는 개체의 값을 포함 하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되었는지(스레드로부터 안전한지) 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key">키입니다.</param>
      <returns>지정 된 키 아래에 저장 된 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 값을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>값 비교자를 가져오거나 설정합니다.</summary>
      <returns>값 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>변경할 수 없는 사전의 값이 들어 있는 컬렉션을 가져옵니다.</summary>
      <returns>사전을 구현하는 개체의 값이 들어 있는 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>메모리를 할당하지 않고 변경할 수 없는 사전의 내용을 열거합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>열거자를 변경할 수 없는 사전의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 사전이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 사전의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>사전의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 사전이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>사전에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>현재 요소를 가져옵니다.</summary>
      <returns>열거형의 현재 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>변경할 수 없는 빈 해시 집합을 만듭니다.</summary>
      <typeparam name="T">변경할 수 없는 해시 집합에 저장할 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 빈 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>지정된 항목이 포함된 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="item">해시 집합을 미리 채울 항목입니다.</param>
      <typeparam name="T">변경할 수 없는 해시 집합에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>지정된 항목 배열이 포함된 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="items">해시 집합을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T">변경할 수 없는 해시 집합에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 같음 비교자를 사용하는 변경할 수 없는 빈 해시 집합을 만듭니다.</summary>
      <param name="equalityComparer">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <typeparam name="T">변경할 수 없는 해시 집합에 있는 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 빈 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>지정된 항목을 포함하고 집합 형식에 지정된 같음 비교자를 사용하는 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="equalityComparer">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <param name="item">해시 집합을 미리 채울 항목입니다.</param>
      <typeparam name="T">변경할 수 없는 해시 집합에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>지정된 컬렉션의 항목을 포함하고 집합 형식에 지정된 같음 비교자를 사용하는 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="equalityComparer">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <param name="items">해시 집합을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T">변경할 수 없는 해시 집합에 저장된 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>변경할 수 없는 새 해시 집합 작성기를 만듭니다.</summary>
      <typeparam name="T">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 해시 집합 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>변경할 수 없는 새 해시 집합 작성기를 만듭니다.</summary>
      <param name="equalityComparer">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <typeparam name="T">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 새 해시 집합 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>지정된 항목으로 미리 채워진 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="items">해시 집합에 추가할 항목입니다.</param>
      <typeparam name="T">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>지정된 항목을 포함하고 집합 형식에 지정된 같음 비교자를 사용하는 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="equalityComparer">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <param name="items">불변성이 적용되기 전에 컬렉션에 추가할 항목입니다.</param>
      <typeparam name="T">컬렉션에 저장되는 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 새 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스를 열거하고 해당 시퀀스의 내용에 대한 변경할 수 없는 해시 집합을 생성합니다.</summary>
      <param name="source">열거할 시퀀스입니다.</param>
      <typeparam name="TSource">시퀀스의 요소 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 항목을 포함하는 변경할 수 없는 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>시퀀스를 열거하고, 해당 시퀀스의 내용에 대한 변경할 수 없는 해시 집합을 생성하며, 형식 집합에 지정된 같음 비교자를 사용합니다.</summary>
      <param name="source">열거할 시퀀스입니다.</param>
      <param name="equalityComparer">집합의 개체가 같은지 비교하는 데 사용할 개체입니다.</param>
      <typeparam name="TSource">시퀀스의 요소 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 항목을 포함하고 지정된 같음 비교자를 사용하는 변경할 수 없는 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary>작성기 집합의 현재 콘텐츠에서 변경할 수 없는 해시 집합을 만듭니다.</summary>
      <param name="builder">변경할 수 없는 해시 집합을 만들 작성기입니다.</param>
      <typeparam name="TSource">해시 집합에 있는 요소의 형식입니다.</typeparam>
      <returns>작성기 집합의 현재 콘텐츠를 포함하는 변경할 수 없는 해시 집합입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>변경할 수 없는 정렬되지 않은 해시 집합을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T">해시 집합에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary>기본 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />를 사용하는 이 형식에 대한 변경할 수 없는 해시 집합을 가져옵니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>지정한 요소를 해시 집합에 추가합니다.</summary>
      <param name="item">집합에 추가할 요소입니다.</param>
      <returns>추가된 값 및 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 개체에서 이전에 보유한 모든 값을 포함하는 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 해시 집합을 검색합니다.</summary>
      <returns>정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 해시 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>이 변경할 수 없는 해시 집합에 지정한 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">변경할 수 없는 해시 집합에서 찾을 개체입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 해시 집합에서 지정된 컬렉션의 요소를 제거합니다.</summary>
      <param name="other">이 집합에서 제거할 항목의 컬렉션입니다.</param>
      <returns>항목이 제거된 새 집합입니다. 집합에 항목이 없는 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>이 집합과 지정된 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 해시 집합을 만듭니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>두 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 해시 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 지정된 컬렉션의 적절한 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 해시 집합이 지정된 컬렉션의 적절한(고급) 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 지정된 컬렉션의 적절한 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 해시 집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 지정된 컬렉션의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 해시 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 지정된 컬렉션의 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 해시 집합이 지정된 컬렉션과 겹치는지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합과 지정된 컬렉션이 하나 이상 공통 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>이 변경할 수 없는 해시 집합에서 지정된 요소를 제거합니다.</summary>
      <param name="item">제거할 요소입니다.</param>
      <returns>지정된 요소가 제거된 새 집합입니다. 집합에서 요소를 찾을 수 없는 경우 현재 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 해시 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>집합이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하는 변경할 수 없는 해시 집합을 만듭니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소를 포함하는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>집합에 항목을 추가합니다.</summary>
      <param name="item">집합에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">집합은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>이 집합서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">집합은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>특정 인덱스에서 시작하여 집합의 요소를 배열에 복사합니다.</summary>
      <param name="array">집합에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>집합에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item">집합에서 제거할 개체입니다.</param>
      <returns>요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>현재 집합에 요소를 추가하고 요소가 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="item">컬렉션에 추가할 요소입니다.</param>
      <returns>요소가 집합에 추가되었으면 <see langword="true" />이고, 요소가 집합에 이미 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합에서 지정된 컬렉션의 모든 요소를 제거합니다.</summary>
      <param name="other">제거할 항목의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션에도 있는 요소만 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 컬렉션과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합 또는 지정된 컬렉션 중 하나에 있는 요소가 모두 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 인덱스에서 시작하여 집합의 요소를 배열에 복사합니다.</summary>
      <param name="array">집합에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>집합에서 반복되는 열거자를 반환합니다.</summary>
      <returns>집합에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>지정한 요소를 이 변경할 수 없는 집합에 추가합니다.</summary>
      <param name="item">추가할 요소입니다.</param>
      <returns>요소가 추가된 새 집합입니다. 해당 요소가 집합에 이미 있는 경우 이 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 집합을 검색합니다.</summary>
      <returns>정렬 또는 순서 의미 체계가 이 인스턴스와 동일한 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합에서 지정된 컬렉션의 요소를 제거합니다.</summary>
      <param name="other">이 집합에서 제거할 항목의 컬렉션입니다.</param>
      <returns>항목이 제거된 새 집합입니다. 집합에 항목이 없는 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>이 집합과 지정된 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>두 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>이 변경할 수 없는 집합에서 지정된 요소를 제거합니다.</summary>
      <param name="item">제거할 요소입니다.</param>
      <returns>지정된 요소가 제거된 새 집합입니다. 집합에서 요소를 찾을 수 없는 경우 현재 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하는 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소를 포함하는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 모든 요소를 포함하는 변경할 수 없는 새 집합을 만듭니다.</summary>
      <param name="other">요소를 추가할 컬렉션입니다.</param>
      <returns>항목이 추가된 변경할 수 없는 새 집합입니다. 모든 항목이 집합에 이미 있던 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 집합과 내용이 동일한 변경할 수 없는 해시 집합을 만듭니다.</summary>
      <returns>변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 집합과 내용이 동일한 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>집합에서 지정된 값을 검색하여 동일한 값을 찾은 경우 해당 값을 반환합니다.</summary>
      <param name="equalValue">검색할 값입니다.</param>
      <param name="actualValue">집합에서 검색한 값입니다. 검색에서 일치하는 항목을 찾지 못한 경우 원래 값입니다.</param>
      <returns>검색에 성공했는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 모든 요소를 포함하는 변경할 수 없는 새 해시 집합을 만듭니다.</summary>
      <param name="other">요소를 추가할 컬렉션입니다.</param>
      <returns>항목이 추가된 변경할 수 없는 새 해시 집합입니다. 모든 항목이 집합에 이미 있던 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>해당 검색 메서드에 지정된 같음 비교자를 사용하는 변경할 수 없는 해시 집합의 인스턴스를 가져옵니다.</summary>
      <param name="equalityComparer">사용할 같음 비교자입니다.</param>
      <returns>지정된 비교자를 사용하는 이 변경할 수 없는 해시 집합의 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>변경할 수 없는 해시 집합의 요소 수를 가져옵니다.</summary>
      <returns>해시 집합에 있는 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>현재 변경할 수 없는 해시 집합이 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 인스턴스가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>키의 해시 코드를 가져오고 변경할 수 없는 해시 집합의 값과 동일한지 확인하는 데 사용되는 개체를 가져옵니다.</summary>
      <returns>키에 대 한 해시 코드를 가져오고 같은지 여부를 확인하는 데 사용되는 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 인터페이스를 확인합니다.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> 인터페이스를 확인합니다.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />을 참조하세요.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>메모리 할당 없이 변경되고, 변경할 수 없는 해시 집합 인스턴스를 매우 효율적으로 생성하거나 빌드할 수 있는 해시 집합을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary>변경할 수 없는 해시 집합에 지정된 항목을 추가합니다.</summary>
      <param name="item">추가할 항목입니다.</param>
      <returns>항목이 컬렉션에 이미 속해 있으면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>변경할 수 없는 해시 집합에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">해시 집합은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary>변경할 수 없는 해시 집합에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">해시 집합에서 찾을 개체입니다.</param>
      <returns>
        <paramref name="item" />이 해시 집합에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 해시 집합에서 지정된 컬렉션의 모든 요소를 제거합니다.</summary>
      <param name="other">집합에서 제거할 항목의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>변경할 수 없는 해시 집합에서 반복되는 열거자를 반환합니다.</summary>
      <returns>집합에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션에도 있는 요소만 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 적절한 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 적절한 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션과 겹치는지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합과 <paramref name="other" />가 적어도 하나의 공통 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary>변경할 수 없는 해시 집합에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item">집합에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">집합은 읽기 전용입니다.</exception>
      <returns>
        <paramref name="item" />이 집합에서 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="item" />이 원래 집합에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>해시 집합에 항목을 추가합니다.</summary>
      <param name="item">집합에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">집합은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>해시 집합의 요소를 특정 배열 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array">해시 집합에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>이 인스턴스의 내용을 기반으로 변경할 수 없는 해시 집합을 만듭니다.</summary>
      <returns>변경할 수 없는 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.TryGetValue(`0,`0@)">
      <summary>집합에서 지정된 값을 검색하여 동일한 값을 찾은 경우 해당 값을 반환합니다.</summary>
      <param name="equalValue">검색할 값입니다.</param>
      <param name="actualValue">집합에서 검색한 값입니다. 검색에서 일치하는 항목을 찾지 못한 경우 원래 값입니다.</param>
      <returns>검색에 성공했는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 다에 있는 모든 요소를 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>변경할 수 없는 해시 집합에 포함된 요소 수를 가져옵니다.</summary>
      <returns>변경할 수 없는 해시 집합에 포함된 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>키 비교자를 가져오거나 설정합니다.</summary>
      <returns>키 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>메모리를 할당하지 않고 변경할 수 없는 해시 집합의 내용을 열거합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>열거자를 변경할 수 없는 해시 집합의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 생성된 후에 해시 집합이 수정됩니다.</exception>
      <returns>열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 해시 집합의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>해시 집합의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 생성된 후에 해시 집합이 수정됩니다.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>현재 요소를 가져옵니다.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>변경할 수 없는 컬렉션에 대한 연동된 교환 메커니즘을 포함합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>값을 추가하거나 기존 항목을 업데이트한 후 사전에서 값을 가져옵니다.</summary>
      <param name="location">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="key">추가하거나 업데이트할 값의 키입니다.</param>
      <param name="addValue">이전 값이 없는 경우에 사용할 값입니다.</param>
      <param name="updateValueFactory">키와 이전 값을 받고 사전을 업데이트할 새 값을 반환하는 함수입니다.</param>
      <typeparam name="TKey">사전에 저장 된 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장 되는 값의 형식입니다.</typeparam>
      <returns>추가되거나 업데이트된 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>값을 추가하거나 기존 항목을 업데이트한 후 사전에서 값을 가져옵니다.</summary>
      <param name="location">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="key">추가하거나 업데이트할 값의 키입니다.</param>
      <param name="addValueFactory">키를 받고 이전 값이 없는 경우 사전에 추가할 새 값을 반환하는 함수입니다.</param>
      <param name="updateValueFactory">키와 이전 값을 받고 사전을 업데이트할 새 값을 반환하는 함수입니다.</param>
      <typeparam name="TKey">사전에 저장 된 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장 되는 값의 형식입니다.</typeparam>
      <returns>추가되거나 업데이트된 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>원자적으로 큐의 끝에 요소를 넣습니다.</summary>
      <param name="location">원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="value">큐에 넣을 값입니다.</param>
      <typeparam name="T">컬렉션에 포함된 항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>사전에서 지정된 키의 값을 가져오거나, 키가 없는 경우 새 값을 사전에 추가합니다.</summary>
      <param name="location">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="key">가져오거나 추가할 값의 키입니다.</param>
      <param name="value">키가 없는 경우 사전에 추가할 값입니다.</param>
      <typeparam name="TKey">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <returns>지정된 키의 값 또는 <paramref name="valueFactory" />(키가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>사전에서 지정된 키의 값을 가져오거나, 키가 없는 경우 새 값을 사전에 추가합니다.</summary>
      <param name="location">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="key">검색하거나 추가할 값의 키입니다.</param>
      <param name="valueFactory">키가 없는 경우 사전에 삽입할 값을 가져오기 위해 실행할 함수입니다. 이 대리자는 두 번 이상 호출되지 않습니다.</param>
      <typeparam name="TKey">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <returns>지정된 키의 값 또는 <paramref name="valueFactory" />(키가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>사전에서 지정된 키의 값을 가져오거나, 키가 없는 경우 새 값을 사전에 추가합니다.</summary>
      <param name="location">지정된 키가 사전에 없는 경우 업데이트할 변수 또는 필드입니다.</param>
      <param name="key">검색하거나 추가할 값의 키입니다.</param>
      <param name="valueFactory">키가 없는 경우 사전에 삽입할 값을 가져오기 위해 실행할 함수입니다.</param>
      <param name="factoryArgument">값 팩터리에 전달할 인수입니다.</param>
      <typeparam name="TKey">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <typeparam name="TArg">값 팩터리에 제공 된 인수의 형식입니다.</typeparam>
      <returns>지정된 키의 값 또는 <paramref name="valueFactory" />(키가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>변경할 수 없는 두 배열이 같은지 비교하여 같으면 배열 중 하나를 바꿉니다.</summary>
      <param name="location">
        <paramref name="comparand" />와 비교하여 바뀔 수 있는 값을 가진 대상입니다.</param>
      <param name="value">비교 결과가 같은 경우 대상 값을 바꿀 값입니다.</param>
      <param name="comparand">
        <paramref name="location" />의 값과 비교할 값입니다.</param>
      <typeparam name="T">배열에 의해 저장되는 요소의 형식입니다.</typeparam>
      <returns>
        <paramref name="location" />의 원래 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>원자 단위 연산으로 배열을 지정된 배열로 설정하고 참조를 원래 배열로 반환합니다.</summary>
      <param name="location">지정된 값으로 설정할 배열입니다.</param>
      <param name="value">
        <paramref name="location" /> 매개 변수의 설정 값입니다.</param>
      <typeparam name="T">배열에 의해 저장되는 요소의 형식입니다.</typeparam>
      <returns>
        <paramref name="location" />의 원래 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>배열이 초기화되지 않은 경우 배열을 지정된 배열로 설정합니다.</summary>
      <param name="location">지정된 값으로 설정할 배열입니다.</param>
      <param name="value">매개 변수가 초기화되지 않은 경우 <paramref name="location" /> 매개 변수의 설정 값입니다.</param>
      <typeparam name="T">배열에 의해 저장되는 요소의 형식입니다.</typeparam>
      <returns>배열에 지정된 값이 할당되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>새 요소를 스택에 푸시합니다.</summary>
      <param name="location">업데이트할 스택입니다.</param>
      <param name="value">스택에 푸시할 값입니다.</param>
      <typeparam name="T">스택에 있는 항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>키가 사전에 없는 경우 지정된 키와 값을 사전에 추가합니다.</summary>
      <param name="location">지정한 키와 값으로 업데이트할 사전입니다.</param>
      <param name="key">사전에 아직 정의되지 않은 경우 추가할 키입니다.</param>
      <param name="value">추가할 값입니다.</param>
      <typeparam name="TKey">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <returns>키가 사전에 있으면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>큐가 비어 있지 않은 경우 큐의 헤드에서 지정된 요소를 원자적으로 제거하고 반환합니다.</summary>
      <param name="location">원자적으로 업데이트할 변수 또는 필드입니다.</param>
      <param name="value">큐가 비어 있지 않은 경우 큐의 헤드에 있는 값으로 설정합니다.</param>
      <typeparam name="T">큐에 있는 항목의 형식입니다.</typeparam>
      <returns>큐가 비어 있지 않고 헤드 요소가 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>스택의 맨 위에 제거할 요소가 있는 경우 해당 요소를 제거합니다.</summary>
      <param name="location">업데이트할 스택입니다.</param>
      <param name="value">스택이 비어 있지 않은 경우 스택에서 제거된 값을 받습니다.</param>
      <typeparam name="T">스택에 있는 항목의 형식입니다.</typeparam>
      <returns>스택에서 요소가 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>키가 있는 경우 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="location">업데이트할 사전입니다.</param>
      <param name="key">제거할 키입니다.</param>
      <param name="value">사전이 비어 있지 않은 경우 제거된 항목의 값을 받습니다.</param>
      <typeparam name="TKey">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <returns>키를 찾아서 제거했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>지정된 키가 특정 값으로 이미 설정된 경우 지정된 키를 지정된 값으로 설정합니다.</summary>
      <param name="location">업데이트할 사전입니다.</param>
      <param name="key">업데이트할 키입니다.</param>
      <param name="newValue">설정할 새 값입니다.</param>
      <param name="comparisonValue">업데이트에 성공하기 위한 <paramref name="key" />의 현재 값입니다.</param>
      <typeparam name="TKey">컬렉션에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue">컬렉션에 포함된 값의 형식입니다.</typeparam>
      <returns>
        <paramref name="key" /> 및 <paramref name="comparisonValue" />가 사전에 있고 비교가 <paramref name="newValue" />로 업데이트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary>지정된 변환 함수를 통해 낙관적 잠금 트랜잭션 의미 체계를 사용하여 준비된 값을 변경합니다.             변환은 낙관적 잠금 레이스에서 이기기 위해 필요한 만큼 여러 번 다시 시도됩니다.</summary>
      <param name="location">여러 스레드에서 액세스할 수 있는 변경될 변수 또는 필드입니다.</param>
      <param name="transformer">값을 변경하는 함수입니다. 이 함수는 다른 스레드에서 레이스가 발생하는 경우 여러 번 실행할 수 있으므로 부작용이 없어야 합니다.</param>
      <typeparam name="T">데이터의 형식입니다.</typeparam>
      <returns>
        <paramref name="transformer" /> 함수의 결과를 적용하여 해당 위치 값이 변경되면 <see langword="true" />이고, <paramref name="transformer" />의 마지막 호출이 기존 값을 반환하기 때문에 해당 위치 값이 동일하게 유지되면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Func{System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0}})">
      <summary>지정 된 변환 함수를 통해 낙관적 잠금 트랜잭션 의미 체계를 사용 하 여 변경할 수 없는 배열을 capture 합니다.
변환은 낙관적 잠금 레이스에서 이기기 위해 필요한 만큼 여러 번 다시 시도됩니다.</summary>
      <param name="location">변경할 변경할 수 없는 배열입니다.</param>
      <param name="transformer">이전에서 새 배열을 생성 하는 함수입니다. 이 함수는 다른 스레드와 함께 경합이 발생할 때 여러 번 실행 될 수 있으므로 부작용 없이 사용 가능 해야 합니다.</param>
      <typeparam name="T">변경할 수 없는 배열의 데이터 형식입니다.</typeparam>
      <returns>
        <paramref name="transformer" /> 함수의 결과를 적용하여 해당 위치 값이 변경되면 <see langword="true" />이고, <paramref name="transformer" />의 마지막 호출이 기존 값을 반환하기 때문에 해당 위치 값이 동일하게 유지되면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary>지정된 변환 함수를 통해 낙관적 잠금 트랜잭션 의미 체계를 사용하여 준비된 값을 변경합니다.             변환은 낙관적 잠금 레이스에서 이기기 위해 필요한 만큼 여러 번 다시 시도됩니다.</summary>
      <param name="location">여러 스레드에서 액세스할 수 있는 변경될 변수 또는 필드입니다.</param>
      <param name="transformer">값을 변경하는 함수입니다. 이 함수는 다른 스레드에서 레이스가 발생하는 경우 여러 번 실행할 수 있으므로 부작용이 없어야 합니다.</param>
      <param name="transformerArgument">
        <paramref name="transformer" />에 전달할 인수입니다.</param>
      <typeparam name="T">데이터의 형식입니다.</typeparam>
      <typeparam name="TArg">에 전달 되는 인수의 형식 <paramref name="transformer" /> 입니다.</typeparam>
      <returns>
        <paramref name="transformer" /> 함수의 결과를 적용하여 해당 위치 값이 변경되면 <see langword="true" />이고, <paramref name="transformer" />의 마지막 호출이 기존 값을 반환하기 때문에 해당 위치 값이 동일하게 유지되면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(System.Collections.Immutable.ImmutableArray{``0}@,System.Func{System.Collections.Immutable.ImmutableArray{``0},``1,System.Collections.Immutable.ImmutableArray{``0}},``1)">
      <summary>지정 된 변환 함수를 통해 낙관적 잠금 트랜잭션 의미 체계를 사용 하 여 변경할 수 없는 배열을 capture 합니다.
변환은 낙관적 잠금 레이스에서 이기기 위해 필요한 만큼 여러 번 다시 시도됩니다.</summary>
      <param name="location">변경할 변경할 수 없는 배열입니다.</param>
      <param name="transformer">이전에서 새 배열을 생성 하는 함수입니다. 이 함수는 다른 스레드와 함께 경합이 발생할 때 여러 번 실행 될 수 있으므로 부작용 없이 사용 가능 해야 합니다.</param>
      <param name="transformerArgument">
        <paramref name="transformer" />에 전달할 인수입니다.</param>
      <typeparam name="T">변경할 수 없는 배열의 데이터 형식입니다.</typeparam>
      <typeparam name="TArg">에 전달 되는 인수의 형식 <paramref name="transformer" /> 입니다.</typeparam>
      <returns>
        <paramref name="transformer" /> 함수의 결과를 적용하여 해당 위치 값이 변경되면 <see langword="true" />이고, <paramref name="transformer" />의 마지막 호출이 기존 값을 반환하기 때문에 해당 위치 값이 동일하게 유지되면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableList`1" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>변경할 수 없는 빈 목록을 만듭니다.</summary>
      <typeparam name="T">변경할 수 없는 목록에 저장할 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>지정된 항목이 포함된 변경할 수 없는 새 목록을 만듭니다.</summary>
      <param name="item">목록을 미리 채울 항목입니다.</param>
      <typeparam name="T">변경할 수 없는 목록에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>지정된 항목 배열이 포함된 변경할 수 없는 새 목록을 만듭니다.</summary>
      <param name="items">목록을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T">변경할 수 없는 목록에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>변경할 수 없는 새 목록 작성기를 만듭니다.</summary>
      <typeparam name="T">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 컬렉션 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>지정된 항목이 포함된 변경할 수 없는 새 목록을 만듭니다.</summary>
      <param name="items">목록에 추가할 항목입니다.</param>
      <typeparam name="T">변경할 수 없는 목록에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>지정된 개체를 검색하고, 목록에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list">검색할 목록입니다.</param>
      <param name="item">목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <typeparam name="T">목록에 있는 항목의 형식입니다.</typeparam>
      <returns>인덱스에서 마지막 요소까지 확장하는 목록의 요소 범위 내에서 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 개체를 검색하고, 목록에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list">검색할 목록입니다.</param>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <typeparam name="T">목록에 있는 항목의 형식입니다.</typeparam>
      <returns>인덱스에서 마지막 요소까지 확장하는 변경할 수 없는 목록의 요소 범위 내에서 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>지정된 개체를 검색하고, 지정된 인덱스에서 마지막 요소로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list">검색할 목록입니다.</param>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="startIndex">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <typeparam name="T">목록에 있는 항목의 형식입니다.</typeparam>
      <returns>인덱스에서 마지막 요소까지 확장하는 변경할 수 없는 목록의 요소 범위 내에서 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>지정된 개체를 검색하고, 지정된 인덱스에서 마지막 요소로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list">검색할 목록입니다.</param>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="startIndex">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <typeparam name="T">목록에 있는 항목의 형식입니다.</typeparam>
      <returns>인덱스에서 마지막 요소까지 확장하는 변경할 수 없는 목록의 요소 범위 내에서 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>지정된 개체를 검색하고 전체 변경할 수 없는 목록에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list">검색할 목록입니다.</param>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <typeparam name="T">목록에 있는 항목의 형식입니다.</typeparam>
      <returns>전체 변경할 수 없는 목록 내에서 항목이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 개체를 검색하고 전체 변경할 수 없는 목록에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list">검색할 목록입니다.</param>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <typeparam name="T">목록에 있는 항목의 형식입니다.</typeparam>
      <returns>전체 변경할 수 없는 목록 내에서 항목이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>지정된 개체를 검색하고, 첫 번째 요소에서 지정된 인덱스로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list">검색할 목록입니다.</param>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <typeparam name="T">목록에 있는 항목의 형식입니다.</typeparam>
      <returns>첫 번째 요소에서 인덱스로 확장되는 변경할 수 없는 목록의 요소 범위 내에서 항목이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>지정된 개체를 검색하고, 첫 번째 요소에서 지정된 인덱스로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="list">검색할 목록입니다.</param>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <typeparam name="T">목록에 있는 항목의 형식입니다.</typeparam>
      <returns>첫 번째 요소에서 인덱스로 확장되는 변경할 수 없는 목록의 요소 범위 내에서 항목이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>이 목록에서 지정된 값을 제거합니다.</summary>
      <param name="list">검색할 목록입니다.</param>
      <param name="value">제거할 값입니다.</param>
      <typeparam name="T">목록에 있는 항목의 형식입니다.</typeparam>
      <returns>요소가 제거된 변경할 수 없는 새 목록입니다. 요소가 이 목록에 없는 경우 이 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>이 목록에서 지정된 값을 제거합니다.</summary>
      <param name="list">검색할 목록입니다.</param>
      <param name="items">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <typeparam name="T">목록에 있는 항목의 형식입니다.</typeparam>
      <returns>요소가 제거된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>목록에서 동일한 첫 번째 요소를 지정된 요소로 바꿉니다.</summary>
      <param name="list">검색할 목록입니다.</param>
      <param name="oldValue">바꿀 요소입니다.</param>
      <param name="newValue">이전 요소와 바꿀 요소입니다.</param>
      <typeparam name="T">목록에 있는 항목의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">이전 값이 목록에 없는 경우 throw됩니다.</exception>
      <returns>새 목록입니다. 이는 바꾸려는 값이 해당 위치의 새 값과 동일한 경우에도 마찬가지입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스를 열거하고 해당 시퀀스의 내용에 대한 변경할 수 없는 목록을 생성합니다.</summary>
      <param name="source">열거할 시퀀스입니다.</param>
      <typeparam name="TSource">시퀀스의 요소 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 항목을 포함하는 변경할 수 없는 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary>작성기 컬렉션의 현재 콘텐츠에서 변경할 수 없는 목록을 만듭니다.</summary>
      <param name="builder">변경할 수 없는 목록을 만들 작성기입니다.</param>
      <typeparam name="TSource">목록에 있는 요소의 유형입니다.</typeparam>
      <returns>작성기 컬렉션의 현재 콘텐츠를 포함하는 변경할 수 없는 목록입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>인덱스로 액세스할 수 있는 강력한 형식의 개체 목록인 변경할 수 없는 목록을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T">목록에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary>기본 정렬 비교자를 사용하는 빈 집합을 가져옵니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>변경할 수 없는 목록의 끝에 지정된 개체를 추가합니다.</summary>
      <param name="value">추가할 개체입니다.</param>
      <returns>개체가 추가된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션의 요소를 변경할 수 없는 목록의 끝에 추가합니다.</summary>
      <param name="items">요소를 목록의 끝에 추가할 컬렉션입니다.</param>
      <returns>요소가 추가된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary>기본 비교자를 사용하여 정렬된 전체 목록에서 요소를 검색하고 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.InvalidOperationException">기본 비교자는 T 형식의 비교자 구현을 찾을 수 없습니다.</exception>
      <returns>항목이 있으면 정렬된 목록에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 항목보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.ICollection.Count" />의 비트 보수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 정렬된 전체 목록에서 요소를 검색하고 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="comparer">요소를 비교할 때 사용할 비교자 구현이거나, 기본 비교자를 사용하려면 null입니다.</param>
      <exception cref="T:System.InvalidOperationException">비교자는 <see langword="null" />이며 기본 비교자는 T 형식의 비교자 구현을 찾을 수 없습니다.</exception>
      <returns>항목이 있으면 정렬된 목록에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 항목보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.ICollection.Count" />의 비트 보수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 정렬된 목록의 요소 범위에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="index">검색할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 범위의 길이입니다.</param>
      <param name="item">찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="comparer">요소를 비교할 때 사용할 비교자 구현이거나, 기본 비교자를 사용하려면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">인덱스가 0보다 작거나 <paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">인덱스 및 <paramref name="count" />가 목록에서 올바른 범위를 나타내지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" />는 <see langword="null" />이며 기본 비교자는 T 형식의 비교자 구현을 찾을 수 없습니다.</exception>
      <returns>항목이 있으면 정렬된 목록에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 항목보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <paramref name="count" />의 비트 보수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>변경할 수 없는 목록에서 모든 요소를 제거합니다.</summary>
      <returns>이 인스턴스와 동일한 정렬 또는 순서가 지정되지 않은 의미 체계를 유지하는 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>변경할 수 없는 이 목록에 지정한 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">찾을 값입니다.</param>
      <returns>목록에 지정된 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>현재 변경할 수 없는 목록의 요소를 다른 형식으로 변환하고 변환된 요소를 포함하는 목록을 반환합니다.</summary>
      <param name="converter">각 요소를 한 형식에서 다른 형식으로 변환하는 대리자입니다.</param>
      <typeparam name="TOutput">대상 배열 요소의 형식입니다.</typeparam>
      <returns>현재 <see cref="T:System.Collections.Immutable.ImmutableList`1" />에서 변환된 요소를 포함하는 대상 유형의 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>대상 배열의 처음부터 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>대상 배열의 지정된 인덱스에서 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>대상 배열의 지정된 인덱스에서 시작하여 변경할 수 없는 목록에 있는 일련의 요소를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="index">변경할 수 없는 원본 목록에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="array">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">배열에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</param>
      <param name="count">복사할 요소의 수입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소가 변경할 수 없는 목록에 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 변경할 수 없는 목록에 하나 이상 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 변경할 수 없는 목록에서 첫 번째로 나타나는 요소를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>지정한 조건자에 정의된 조건과 일치하는 모든 요소를 검색합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 해당 요소를 모두 포함하는 변경할 수 없는 목록이고, 그렇지 않으면 변경할 수 없는 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 지정된 인덱스부터 시작하여 지정된 수의 요소를 포함하는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 첫 번째로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>일치 항목에 의해 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 처음으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 인덱스에서 마지막 요소로 확장되는 변경할 수 없는 목록의 요소 범위 내에서 일치하는 요소 중 첫 번째 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>일치 항목에 의해 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 처음으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 변경할 수 없는 목록에서 일치하는 요소 중 첫 번째로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>일치 항목에 의해 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 처음으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 변경할 수 없는 목록에서 마지막으로 나타나는 요소를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 수의 요소가 들어 있고 지정된 인덱스에서 끝나는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 첫 번째 요소에서 지정된 인덱스로 확장하는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 변경할 수 없는 목록에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>변경할 수 없는 목록의 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <param name="action">변경할 수 없는 목록의 각 요소에 대해 수행할 대리자입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>변경할 수 없는 목록에서 반복되는 열거자를 반환합니다.</summary>
      <returns>변경할 수 없는 목록에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>변경할 수 없는 원본 목록에 있는 일련의 요소에 대한 부분 복사본을 만듭니다.</summary>
      <param name="index">범위가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count">범위의 요소 수입니다.</param>
      <returns>변경할 수 없는 원본 목록에 있는 일련의 요소에 대한 부분 복사본입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>지정된 개체를 검색하고 전체 변경할 수 없는 목록에서 처음으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="value">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>전체 변경할 수 없는 목록에 <paramref name="value" />이 있으면 처음으로 나타나는 개체의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 목록의 요소 범위에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="index">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>인덱스에서 시작하여 요소 수를 포함하는 목록의 요소 범위 내에서 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>변경할 수 없는 목록의 지정된 인덱스에 지정된 개체를 삽입합니다.</summary>
      <param name="index">개체를 삽입할 0부터 시작하는 인덱스입니다.</param>
      <param name="item">삽입할 개체입니다.</param>
      <returns>개체가 삽입된 이후의 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>변경할 수 없는 목록의 지정된 인덱스에 컬렉션의 요소를 삽입합니다.</summary>
      <param name="index">요소를 삽입할 0부터 시작하는 인덱스입니다.</param>
      <param name="items">요소를 삽입해야 하는 컬렉션입니다.</param>
      <returns>요소가 삽입된 이후의 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary>지정된 <paramref name="index" />에 있는 집합 요소의 읽기 전용 참조를 가져옵니다.</summary>
      <param name="index">반환할 집합에서 요소의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" />가 음수이거나 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />보다 작지 않습니다.</exception>
      <returns>지정된 위치에 있는 요소에 대한 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 목록의 요소 범위에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">목록에서 찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <param name="index">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>요소 수를 포함하고 인덱스에서 끝나는 목록의 요소 범위 내에서 항목이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>이 변경할 수 없는 목록에서 첫 번째로 나타나는 지정된 개체를 제거합니다.</summary>
      <param name="value">제거할 개체입니다.</param>
      <returns>개체가 제거된 새 목록입니다. 지정된 개체가 이 목록에 없는 경우 이 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>이 변경할 수 없는 목록의 지정된 값과 일치하는 첫 번째로 나타나는 개체를 제거합니다.</summary>
      <param name="value">목록에서 제거할 요소의 값입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>개체가 제거된 새 목록입니다. 지정된 개체가 이 목록에 없는 경우 이 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>지정된 인덱스에 있는 요소를 제거합니다.</summary>
      <param name="index">제거할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>이 변경할 수 없는 목록에서 요소 범위를 제거합니다.</summary>
      <param name="items">이 목록에 일치하는 항목이 있는 경우 해당 요소를 제거해야 하는 컬렉션입니다.</param>
      <returns>요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>이 목록에서 지정된 값을 제거합니다.</summary>
      <param name="items">이 목록에 일치하는 항목이 있는 경우 제거할 항목입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <returns>요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>지정된 인덱스에서 시작하여 지정된 개수의 요소를 포함하는 요소 범위를 이 변경할 수 없는 목록에서 제거합니다.</summary>
      <param name="index">제거를 시작할 시작 인덱스입니다.</param>
      <param name="count">제거할 요소의 수입니다.</param>
      <returns>요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>변경할 수 없는 목록의 지정된 요소를 새 요소로 바꿉니다.</summary>
      <param name="oldValue">바꿀 요소입니다.</param>
      <param name="newValue">
        <paramref name="oldValue" />를 바꿀 요소입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" />가 변경할 수 없는 목록에 없습니다.</exception>
      <returns>바뀐 요소가 있는 새 목록입니다. 이는 바뀐 요소가 이전 요소와 동일한 경우에도 마찬가지입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>변경할 수 없는 목록의 지정된 요소를 새 요소로 바꿉니다.</summary>
      <param name="oldValue">목록에서 바꿀 요소입니다.</param>
      <param name="newValue">
        <paramref name="oldValue" />를 바꿀 요소입니다.</param>
      <param name="equalityComparer">같은지 확인하는 데 사용할 비교자입니다.</param>
      <returns>개체가 바뀐 새 목록입니다. 지정된 개체가 이 목록에 없는 경우 이 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>전체 변경할 수 없는 목록에서 요소의 순서를 반대로 바꿉니다.</summary>
      <returns>역순 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>변경할 수 없는 목록의 지정된 범위에서 요소의 순서를 반대로 바꿉니다.</summary>
      <param name="index">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">순서를 반대로 바꿀 범위의 요소 수입니다.</param>
      <returns>역순 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>변경할 수 없는 목록에서 지정된 위치에 있는 요소를 지정된 요소로 바꿉니다.</summary>
      <param name="index">바꿀 요소의 목록 내 위치입니다.</param>
      <param name="value">이전 요소와 바꿀 요소입니다.</param>
      <returns>바뀐 요소가 있는 새 목록입니다. 이는 바뀐 요소가 해당 위치의 이전 요소와 동일한 경우에도 마찬가지입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>기본 비교자를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
      <returns>정렬된 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
      <param name="comparer">요소를 비교할 때 사용할 구현이거나, 기본 비교자(<see cref="P:System.Collections.Generic.Comparer`1.Default" />)를 사용하려면 <see langword="null" />입니다.</param>
      <returns>정렬된 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>지정된 비교자를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
      <param name="comparison">요소를 비교할 때 사용할 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" />이(가) <see langword="null" />인 경우</exception>
      <returns>정렬된 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 변경할 수 없는 목록의 요소 범위를 정렬합니다.</summary>
      <param name="index">정렬할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">정렬할 범위의 길이입니다.</param>
      <param name="comparer">요소를 비교할 때 사용할 구현이거나, 기본 비교자(<see cref="P:System.Collections.Generic.Comparer`1.Default" />)를 사용하려면 <see langword="null" />입니다.</param>
      <returns>정렬된 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>변경할 수 없는 목록에 지정된 항목을 추가합니다.</summary>
      <param name="item">추가할 항목입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>변경할 수 없는 목록에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>변경할 수 없는 목록에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item">제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
      <returns>
        <paramref name="item" />가 목록에서 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="item" />가 원래 목록에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>변경할 수 없는 목록에서 반복되는 열거자를 반환합니다.</summary>
      <returns>목록에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>변경할 수 없는 목록의 지정된 인덱스에 개체를 삽입합니다.</summary>
      <param name="index">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item">삽입할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>지정한 인덱스의 값을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>변경할 수 없는 목록에서 반복되는 열거자를 반환합니다.</summary>
      <returns>목록에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary>변경할 수 없는 목록에 항목을 추가합니다.</summary>
      <param name="value">목록에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
      <returns>새 요소가 삽입된 위치 또는 -1(항목이 목록에 삽입되지 않았음을 나타냄)입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary>변경할 수 없는 목록에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary>변경할 수 없는 목록에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">목록에서 찾을 개체입니다.</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>개체가 목록에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>변경할 수 없는 목록에서 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value">목록에서 찾을 개체입니다.</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>변경할 수 없는 목록의 지정된 인덱스에 항목을 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">목록에 삽입할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary>변경할 수 없는 목록에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="value">목록에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>변경할 수 없는 목록의 지정한 인덱스에서 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>이 변경할 수 없는 목록에 지정된 값을 추가합니다.</summary>
      <param name="value">추가할 값입니다.</param>
      <returns>요소가 추가된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>이 변경할 수 없는 목록에 지정된 값을 추가합니다.</summary>
      <param name="items">추가할 값입니다.</param>
      <returns>요소가 추가된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 목록을 검색합니다.</summary>
      <returns>정렬 및 순서 의미 체계가 이 인스턴스와 동일한 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>변경할 수 없는 목록의 지정된 인덱스에 지정된 요소를 삽입합니다.</summary>
      <param name="index">값을 삽입할 인덱스입니다.</param>
      <param name="item">삽입할 요소입니다.</param>
      <returns>지정된 요소가 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>변경할 수 없는 목록의 지정된 인덱스에 지정된 요소를 삽입합니다.</summary>
      <param name="index">요소를 삽입할 인덱스입니다.</param>
      <param name="items">삽입할 요소입니다.</param>
      <returns>지정된 요소가 포함된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>목록에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="value">목록에서 제거할 요소의 값입니다.</param>
      <param name="equalityComparer">요소가 같은지 비교하는 데 사용할 비교자입니다.</param>
      <returns>지정된 개체가 제거된 새 <see cref="T:System.Collections.Immutable.ImmutableList`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>요소가 제거된 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>변경할 수 없는 목록의 지정한 인덱스에서 요소를 제거합니다.</summary>
      <param name="index">제거할 요소의 인덱스입니다.</param>
      <returns>요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>이 변경할 수 없는 목록에서 지정된 항목과 일치하는 요소 범위를 제거합니다.</summary>
      <param name="items">목록에서 제거할 항목의 범위입니다(있는 경우).</param>
      <param name="equalityComparer">요소를 비교하는 데 사용할 같음 비교자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 또는 <paramref name="equalityComparer" />가 <see langword="null" />인 경우</exception>
      <returns>항목이 제거된 변경할 수 없는 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>지정된 위치에 있는 지정된 개수의 요소를 이 목록에서 제거합니다.</summary>
      <param name="index">제거할 요소 범위의 시작 인덱스입니다.</param>
      <param name="count">제거할 요소의 수입니다.</param>
      <returns>요소가 제거된 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>목록의 요소를 지정된 요소로 바꿉니다.</summary>
      <param name="oldValue">바꿀 요소입니다.</param>
      <param name="newValue">이전 요소와 바꿀 요소입니다.</param>
      <param name="equalityComparer">검색에서 사용할 같음 비교자입니다.</param>
      <exception cref="T:System.ArgumentException">이전 값이 목록에 없는 경우 throw됩니다.</exception>
      <returns>새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>목록에서 지정된 위치에 있는 요소를 지정된 요소로 바꿉니다.</summary>
      <param name="index">바꿀 요소의 목록 내 위치입니다.</param>
      <param name="value">이전 요소와 바꿀 요소입니다.</param>
      <returns>새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 목록과 내용이 동일한 목록을 만듭니다.</summary>
      <returns>이 목록과 내용이 동일한 새로 만든 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>변경할 수 없는 목록의 모든 요소가 지정한 조건자에 정의된 조건과 일치하는지를 확인합니다.</summary>
      <param name="match">요소에 대해 확인할 조건을 정의하는 대리자입니다.</param>
      <returns>변경할 수 없는 목록의 모든 요소가 지정된 조건자에 정의된 조건과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 목록에 요소가 없으면 반환 값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>목록에 포함된 요소 수를 가져옵니다.</summary>
      <returns>목록에 있는 요소의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>이 목록이 비어 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>목록이 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>목록의 지정된 인덱스에서 요소를 가져옵니다.</summary>
      <param name="index">검색할 요소의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">가져오기 작업에서 <paramref name="index" />는 음수이거나 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />보다 작지 않습니다.</exception>
      <returns>지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>지정한 인덱스에 있는 값을 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" />가 음수이거나 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />보다 작지 않은 경우 getter에서 throw됩니다.</exception>
      <exception cref="T:System.NotSupportedException">setter에서 항상 throw됩니다.</exception>
      <returns>지정 된 인덱스에 저장 된 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary>이 형식은 변경할 수 없으므로 항상 스레드로부터 안전합니다. <see cref="T:System.Collections.ICollection" /> 인터페이스를 확인합니다.</summary>
      <returns>컬렉션이 스레드로부터 안전한 지 여부를 확인 하는 부울 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />을 참조하세요.</summary>
      <returns>컬렉션에 대 한 액세스를 동기화 하는 데 사용 되는 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />가 고정 크기인 경우 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary>지정된 인덱스에 있는 <see cref="T:System.Object" />를 가져오거나 설정합니다.</summary>
      <param name="index">인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" />가 음수이거나 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />보다 작지 않은 경우 getter에서 throw됩니다.</exception>
      <exception cref="T:System.NotSupportedException">setter에서 항상 throw됩니다.</exception>
      <returns>지정한 인덱스의 값입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>메모리 할당 없이 변경되고, 변경할 수 없는 목록 인스턴스를 매우 효율적으로 생성하거나 빌드할 수 있는 목록을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary>변경할 수 없는 목록에 항목을 추가합니다.</summary>
      <param name="item">목록에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>이 목록의 끝에 일련의 요소를 추가합니다.</summary>
      <param name="items">목록의 끝에 추가할 요소입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary>기본 비교자를 사용하여 전체 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />에서 요소를 검색하고 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">찾을 개체입니다. 참조 형식의 경우 값은 null일 수 있습니다.</param>
      <exception cref="T:System.InvalidOperationException">기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 T의 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
      <returns>항목이 있으면 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 정렬된 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />에서 요소를 검색하고 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">찾을 개체입니다. 참조 형식의 경우 이 값은 null일 수 있습니다.</param>
      <param name="comparer">요소를 비교할 때 사용할 구현이거나, 기본 비교자의 경우 <see langword="null" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 T의 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
      <returns>항목이 있으면 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />의 지정된 범위에서 요소를 검색하고 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="index">검색할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 범위의 길이입니다.</param>
      <param name="item">찾을 개체입니다. 참조 형식의 경우 이 값은 null일 수 있습니다.</param>
      <param name="comparer">요소를 비교할 때 사용할 구현이거나, 기본 비교자의 경우 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.
또는

<paramref name="count" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 범위를 나타내지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 T의 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
      <returns>항목이 있으면 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />에 있는 항목의 0부터 시작하는 인덱스이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>변경할 수 없는 목록에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary>변경할 수 없는 목록에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">목록에서 찾을 개체입니다.</param>
      <returns>목록에서 항목을 찾은 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary>변환기 함수를 사용하여 이 작성기가 나타내는 목록에서 변경할 수 없는 새 목록을 만듭니다.</summary>
      <param name="converter">변환기 함수입니다.</param>
      <typeparam name="TOutput">대리자 변환기 함수의 출력 형식입니다.</typeparam>
      <returns>이 작성기가 나타내는 목록에서 만든 변경할 수 없는 새 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary>대상 배열의 처음부터 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>대상 배열의 지정된 인덱스에서 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">배열에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>대상 배열의 지정된 인덱스에서 시작하여 변경할 수 없는 전체 목록을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="index">변경할 수 없는 원본 목록에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="array">변경할 수 없는 목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count">복사할 요소의 수입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소가 변경할 수 없는 목록에 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 변경할 수 없는 목록에 하나 이상 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 변경할 수 없는 목록에서 첫 번째로 나타나는 요소를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary>지정한 조건자에 정의된 조건과 일치하는 모든 요소를 검색합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 해당 요소를 모두 포함하는 변경할 수 없는 목록이고, 그렇지 않으면 변경할 수 없는 빈 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 지정된 인덱스부터 시작하여 지정된 수의 요소를 포함하는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 첫 번째로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 인덱스에서 마지막 요소로 확장되는 변경할 수 없는 목록의 요소 범위 내에서 일치하는 요소 중 첫 번째 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 변경할 수 없는 목록에서 일치하는 요소 중 첫 번째로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 변경할 수 없는 목록에서 마지막으로 나타나는 요소를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 수의 요소가 들어 있고 지정된 인덱스에서 끝나는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 첫 번째 요소에서 지정된 인덱스로 확장하는 변경할 수 없는 목록의 요소 범위에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 변경할 수 없는 목록에서 일치하는 요소 중 마지막으로 나타나는 요소의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary>목록의 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <param name="action">목록의 각 요소에 대해 수행할 대리자입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>목록에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>변경할 수 없는 원본 목록에 있는 일련의 요소에 대한 부분 복사본을 만듭니다.</summary>
      <param name="index">범위가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count">범위의 요소 수입니다.</param>
      <returns>변경할 수 없는 원본 목록에 있는 일련의 요소에 대한 부분 복사본입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary>지정된 개체를 검색하고, 변경할 수 없는 목록의 요소 범위 내에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>변경할 수 없는 목록의 요소 범위 내에서 <paramref name="item" />이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary>지정된 개체를 검색하고, 지정된 인덱스에서 마지막 요소로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <returns>
        <paramref name="index" />에서 마지막 요소로 확장되는 변경할 수 없는 목록의 요소 범위 내에 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 변경할 수 없는 목록의 요소 범위 내에서 첫 번째로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <returns>
        <paramref name="index" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 변경할 수 없는 목록의 요소 범위 내에 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count">검색할 요소의 수입니다.</param>
      <param name="equalityComparer">요소가 같은지 비교하는 데 사용할 값 비교자입니다.</param>
      <returns>
        <paramref name="index" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 변경할 수 없는 목록의 요소 범위 내에 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary>변경할 수 없는 목록의 지정된 인덱스에 항목을 삽입합니다.</summary>
      <param name="index">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item">변경할 수 없는 목록에 삽입할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>변경할 수 없는 목록의 지정된 인덱스에 컬렉션의 요소를 삽입합니다.</summary>
      <param name="index">새 요소가 삽입되어야 하는 0부터 시작하는 인덱스입니다.</param>
      <param name="items">변경할 수 없는 목록에 요소를 삽입해야 하는 컬렉션입니다. 컬렉션 자체가 <see langword="null" />일 수는 없지만 <c>T</c> 형식이 참조 형식인 경우 null인 요소를 포함할 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary>지정된 <paramref name="index" />의 값에 대한 읽기 전용 참조를 목록으로 가져옵니다.</summary>
      <param name="index">원하는 요소의 인덱스입니다.</param>
      <returns>지정된 <paramref name="index" />에서 값에 대한 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary>지정된 개체를 검색하고 전체 변경할 수 없는 목록에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>전체 변경할 수 없는 목록에 <paramref name="item" />이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>지정된 개체를 검색하고, 첫 번째 요소에서 지정된 인덱스로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <returns>첫 번째 요소에서 <paramref name="index" />로 확장하는 변경할 수 없는 목록의 요소 범위 내에서 <paramref name="item" />이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 변경할 수 없는 목록의 요소 범위 내에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <returns>
        <paramref name="count" />개의 요소를 포함하고 <paramref name="index" />에서 끝나는 변경할 수 없는 목록의 요소 범위 내에 <paramref name="item" />이 있으면 마지막으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 변경할 수 없는 목록의 요소 범위 내에서 마지막으로 나타나는 개체의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="item">변경할 수 없는 목록에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="startIndex">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count">검색할 요소의 수입니다.</param>
      <param name="equalityComparer">요소가 같은지 비교하는 데 사용할 값 비교자입니다.</param>
      <returns>
        <paramref name="index" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 변경할 수 없는 목록의 요소 범위 내에 항목이 있으면 처음으로 나타나는 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary>변경할 수 없는 목록에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item">목록에서 제거할 개체입니다.</param>
      <returns>항목이 목록에서 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 항목이 목록에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns>변경할 수 없는 목록에서 제거한 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>변경할 수 없는 목록의 지정한 인덱스에서 항목을 제거합니다.</summary>
      <param name="index">목록에서 제거할 항목의 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>전체 변경할 수 없는 목록에서 요소의 순서를 반대로 바꿉니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>변경할 수 없는 목록의 지정된 범위에서 요소의 순서를 반대로 바꿉니다.</summary>
      <param name="index">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">순서를 반대로 바꿀 범위의 요소 수입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>기본 비교자를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
      <param name="comparer">요소를 비교할 때 사용할 구현이거나, 기본 비교자(<see cref="P:System.Collections.Generic.Comparer`1.Default" />)를 사용하려면 <see langword="null" />입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary>지정된 비교 개체를 사용하여 전체 변경할 수 없는 목록의 요소를 정렬합니다.</summary>
      <param name="comparison">요소를 비교할 때 사용할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 변경할 수 없는 목록의 요소 범위에 있는 요소를 정렬합니다.</summary>
      <param name="index">정렬할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">정렬할 범위의 길이입니다.</param>
      <param name="comparer">요소를 비교할 때 사용할 구현이거나, 기본 비교자(<see cref="P:System.Collections.Generic.Comparer`1.Default" />)를 사용하려면 <see langword="null" />입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 배열 인덱스에서 시작하여 목록의 요소를 배열에 복사합니다.</summary>
      <param name="array">목록에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary>목록에 항목을 추가합니다.</summary>
      <param name="value">목록에 추가할 개체입니다.</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>새 요소를 삽입한 위치이거나, 항목이 컬렉션에 삽입되지 않았음을 나타내는 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary>목록에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary>목록에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">목록에서 찾을 개체입니다.</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>
        <see cref="T:System.Object" />가 목록에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary>목록에 있는 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value">목록에서 찾을 개체입니다.</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>지정한 인덱스의 목록에 항목을 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">목록에 삽입할 개체입니다.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary>목록에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="value">목록에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>이 인스턴스의 내용을 기반으로 변경할 수 없는 목록을 만듭니다.</summary>
      <returns>변경할 수 없는 목록입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary>변경할 수 없는 목록의 모든 요소가 지정한 조건자에 정의된 조건과 일치하는지를 확인합니다.</summary>
      <param name="match">요소에 대해 확인할 조건을 정의하는 대리자입니다.</param>
      <returns>변경할 수 없는 목록의 모든 요소가 지정된 조건자에 정의된 조건과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 목록에 요소가 없으면 반환 값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>이 변경할 수 없는 목록에 있는 요소 수를 가져옵니다.</summary>
      <returns>이 목록에 있는 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>목록에서 지정된 인덱스의 값을 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 항목의 인덱스입니다.</param>
      <returns>지정한 인덱스의 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>이 인스턴스가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되었는지(스레드로부터 안전한지) 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />가 고정 크기인 경우 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary>지정된 인덱스에 있는 <see cref="T:System.Object" />를 가져오거나 설정합니다.</summary>
      <param name="index">인덱스입니다.</param>
      <returns>지정한 인덱스에 있는 개체입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>이진 트리의 내용을 열거합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>열거형을 변경할 수 없는 목록의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 목록의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>변경할 수 없는 목록의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>현재 요소입니다.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableQueue`1" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>변경할 수 없는 빈 큐를 만듭니다.</summary>
      <typeparam name="T">변경할 수 없는 큐에 저장할 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 빈 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>지정된 항목이 포함된 변경할 수 없는 새 큐를 만듭니다.</summary>
      <param name="item">큐를 미리 채울 항목입니다.</param>
      <typeparam name="T">변경할 수 없는 큐에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>지정된 항목 배열이 포함된 변경할 수 없는 새 큐를 만듭니다.</summary>
      <param name="items">큐를 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T">변경할 수 없는 큐에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>지정된 항목이 포함된 변경할 수 없는 새 큐를 만듭니다.</summary>
      <param name="items">불변성이 적용되기 전에 큐에 추가할 항목입니다.</param>
      <typeparam name="T">큐에 있는 요소의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하고 새 큐를 반환합니다.</summary>
      <param name="queue">항목을 제거할 큐입니다.</param>
      <param name="value">이 메서드가 반환되는 경우 큐의 시작 부분에서 항목을 포함합니다.</param>
      <typeparam name="T">변경할 수 없는 큐에 있는 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">스택이 비어 있습니다.</exception>
      <returns>항목이 제거된 새 큐입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>변경할 수 없는 큐를 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T">큐에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>변경할 수 없는 큐에서 모든 개체를 제거합니다.</summary>
      <returns>변경할 수 없는 빈 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하고 새 큐를 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">큐가 비어 있습니다.</exception>
      <returns>변경할 수 없는 새 큐입니다. <see langword="null" />일 수 없습니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하고 새 큐를 반환합니다.</summary>
      <param name="value">이 메서드가 반환되는 경우 큐의 시작 부분에서 요소를 포함합니다.</param>
      <exception cref="T:System.InvalidOperationException">큐가 비어 있습니다.</exception>
      <returns>시작 요소가 제거된 변경할 수 없는 새 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>변경할 수 없는 큐의 끝에 요소를 추가하고 새 큐를 반환합니다.</summary>
      <param name="value">추가할 요소입니다.</param>
      <returns>변경할 수 없는 새 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>변경할 수 없는 큐에서 반복되는 열거자를 반환합니다.</summary>
      <returns>큐에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하지 않고 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">큐가 비어 있습니다.</exception>
      <returns>큐의 시작 부분에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary>큐 앞에 있는 요소의 읽기 전용 참조를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">큐가 비어 있습니다.</exception>
      <returns>큐 앞에 있는 요소의 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary>변경할 수 없는 큐에서 모든 요소를 제거합니다.</summary>
      <returns>변경할 수 없는 빈 큐입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary>변경할 수 없는 큐의 시작 부분에 있는 요소를 제거하고 새 큐를 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">큐가 비어 있는 경우 throw됩니다.</exception>
      <returns>변경할 수 없는 새 큐입니다. <see langword="null" />일 수 없습니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary>변경할 수 없는 큐의 끝에 요소를 추가하고 새 큐를 반환합니다.</summary>
      <param name="value">추가할 요소입니다.</param>
      <returns>변경할 수 없는 새 큐입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary>변경할 수 없는 빈 큐를 가져옵니다.</summary>
      <returns>변경할 수 없는 빈 큐입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>이 변경할 수 없는 큐가 비어 있는지 여부를 나타내는 값을 가져옵니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <returns>이 큐가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>메모리를 할당하지 않고 변경할 수 없는 큐의 내용을 열거합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>열거자를 변경할 수 없는 큐의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 큐의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>변경할 수 없는 정렬된 빈 사전을 만듭니다.</summary>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>변경할 수 없는 정렬된 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>지정된 키 비교자를 사용하는 변경할 수 없는 정렬된 빈 사전을 만듭니다.</summary>
      <param name="keyComparer">사전의 키와 동일한지 확인하는 데 사용할 구현입니다.</param>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>변경할 수 없는 정렬된 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 및 값 비교자를 사용하는 변경할 수 없는 정렬된 빈 사전을 만듭니다.</summary>
      <param name="keyComparer">사전의 키와 동일한지 확인하는 데 사용할 구현입니다.</param>
      <param name="valueComparer">사전의 값과 동일한지 확인하는 데 사용할 구현입니다.</param>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>변경할 수 없는 정렬된 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>변경할 수 없는 정렬된 새 사전 작성기를 만듭니다.</summary>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>변경할 수 없는 컬렉션 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>변경할 수 없는 정렬된 새 사전 작성기를 만듭니다.</summary>
      <param name="keyComparer">키 비교자입니다.</param>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>변경할 수 없는 컬렉션 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>변경할 수 없는 정렬된 새 사전 작성기를 만듭니다.</summary>
      <param name="keyComparer">키 비교자입니다.</param>
      <param name="valueComparer">값 비교자입니다.</param>
      <typeparam name="TKey">사전에 의해 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 의해 저장되는 값의 형식입니다.</typeparam>
      <returns>변경할 수 없는 컬렉션 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>지정된 키 비교자를 사용하여 지정된 항목 범위에서 변경할 수 없는 정렬된 새 사전을 만듭니다.</summary>
      <param name="keyComparer">키가 같은지 비교하고 정렬하는 데 사용할 비교자 구현입니다.</param>
      <param name="items">정렬된 사전에 추가할 항목입니다.</param>
      <typeparam name="TKey">사전에 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 저장되는 값의 형식입니다.</typeparam>
      <returns>지정된 항목을 포함하고 지정된 키 비교자를 사용하는 변경할 수 없는 정렬된 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>지정된 키 및 값 비교자를 사용하여 지정된 항목 범위에서 변경할 수 없는 정렬된 새 사전을 만듭니다.</summary>
      <param name="keyComparer">키가 같은지 비교하고 정렬하는 데 사용할 비교자 구현입니다.</param>
      <param name="valueComparer">값이 같은지 비교하고 정렬하는 데 사용할 비교자 구현입니다.</param>
      <param name="items">변경할 수 없는 상태가 되기 전에 정렬된 사전에 추가할 항목입니다.</param>
      <typeparam name="TKey">사전에 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 저장되는 값의 형식입니다.</typeparam>
      <returns>지정된 항목을 포함하고 지정된 비교자를 사용하는 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>지정된 항목을 포함하고 기본 비교자를 사용하는 변경할 수 없는 정렬된 사전을 만듭니다.</summary>
      <param name="items">변경할 수 없는 상태가 되기 전에 정렬된 사전에 추가할 항목입니다.</param>
      <typeparam name="TKey">사전에 저장되는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 저장되는 값의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>키/값 쌍의 시퀀스를 열거하고 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 사전을 생성합니다.</summary>
      <param name="source">열거할 키/값 쌍의 시퀀스입니다.</param>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>키/값 쌍의 시퀀스를 열거하고, 지정된 키 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 사전을 생성합니다.</summary>
      <param name="source">열거할 키/값 쌍의 시퀀스입니다.</param>
      <param name="keyComparer">변경할 수 없는 사전을 바인딩할 때 사용할 키 비교자입니다.</param>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>키/값 쌍의 시퀀스를 열거하고, 지정된 키 및 값 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 사전을 생성합니다.</summary>
      <param name="source">열거할 키/값 쌍의 시퀀스입니다.</param>
      <param name="keyComparer">변경할 수 없는 사전을 바인딩할 때 사용할 키 비교자입니다.</param>
      <param name="valueComparer">변경할 수 없는 사전에 사용할 값 비교자입니다.</param>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 키/값 쌍이 포함된 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary>작성기 사전의 현재 콘텐츠에서 변경할 수 없는 정렬된 사전을 만듭니다.</summary>
      <param name="builder">변경할 수 없는 정렬된 사전을 만들 작성기입니다.</param>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
      <returns>작성기 사전의 현재 콘텐츠를 포함하는 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>시퀀스를 열거 및 변환하고 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 사전을 생성합니다.</summary>
      <param name="source">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <typeparam name="TSource">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 항목을 포함하는 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>시퀀스를 열거 및 변형하고, 지정된 키 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 사전을 생성합니다.</summary>
      <param name="source">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <param name="keyComparer">사전에 사용할 키 비교자입니다.</param>
      <typeparam name="TSource">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 항목을 포함하는 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>시퀀스를 열거 및 변형하고, 지정된 키 및 값 비교자를 사용하여 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 사전을 생성합니다.</summary>
      <param name="source">사전을 생성하기 위해 열거할 시퀀스입니다.</param>
      <param name="keySelector">각 시퀀스 요소에서 사전에 대한 키를 생성하는 함수입니다.</param>
      <param name="elementSelector">각 시퀀스 요소에서 사전에 대한 값을 생성하는 함수입니다.</param>
      <param name="keyComparer">사전에 사용할 키 비교자입니다.</param>
      <param name="valueComparer">사전에 사용할 값 비교자입니다.</param>
      <typeparam name="TSource">시퀀스의 요소 형식입니다.</typeparam>
      <typeparam name="TKey">결과 사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">결과 사전에 있는 값의 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 항목을 포함하는 변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>변경할 수 없는 정렬된 사전을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey">사전에 포함된 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 포함된 값의 형식입니다.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary>변경할 수 없는 정렬된 빈 사전을 가져옵니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>지정한 키와 값을 가진 요소를 변경할 수 없는 정렬된 사전에 추가합니다.</summary>
      <param name="key">추가할 엔트리의 키입니다.</param>
      <param name="value">추가할 항목의 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 키가 이미 사전에 있지만 값이 다릅니다.</exception>
      <returns>추가 키/값 쌍이 포함된 변경할 수 없는 정렬된 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>특정 키/값 쌍을 변경할 수 없는 정렬된 사전에 추가합니다.</summary>
      <param name="items">추가할 키/값 쌍입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 키 중 하나가 이미 사전에 있지만 값이 다릅니다.</exception>
      <returns>추가 키/값 쌍이 포함된 변경할 수 없는 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>이 사전 인스턴스와 순서 및 키/값 비교 규칙이 동일한 변경할 수 없는 정렬된 빈 사전을 검색합니다.</summary>
      <returns>순서 및 키/값 비교 규칙이 동일한 빈 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>이 변경할 수 없는 정렬된 사전에 지정된 키/값 쌍이 들어 있는지 여부를 확인합니다.</summary>
      <param name="pair">찾을 키/값 쌍입니다.</param>
      <returns>지정된 키/값 쌍이 사전에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>이 변경할 수 없는 정렬된 맵에 지정한 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="key">찾을 키입니다.</param>
      <returns>변경할 수 없는 사전에 지정된 키가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>변경할 수 없는 정렬된 사전에 지정된 값을 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="value">찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>사전에 지정된 값을 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>변경할 수 없는 정렬된 사전에서 반복되는 열거자를 반환합니다.</summary>
      <returns>사전에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>변경할 수 없는 정렬된 사전에서 지정된 값을 가진 요소를 제거합니다.</summary>
      <param name="value">제거할 요소의 값입니다.</param>
      <returns>지정된 요소가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 값을 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>변경할 수 없는 정렬된 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="keys">제거할 요소의 키입니다.</param>
      <returns>지정된 키가 제거된 변경할 수 없는 새 사전입니다. 또는 사전에서 지정된 키를 찾을 수 없는 경우 이 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>변경할 수 없는 정렬된 사전에서 지정된 키와 값을 설정합니다. 지정된 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="key">추가할 엔트리의 키입니다.</param>
      <param name="value">설정할 키 값입니다.</param>
      <returns>지정된 키/값 쌍이 포함된 변경할 수 없는 정렬된 새 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>변경할 수 없는 정렬된 사전에서 지정된 키/값 쌍을 설정합니다. 키의 기존 값을 덮어쓸 수 있습니다.</summary>
      <param name="items">사전에서 설정할 키/값 쌍입니다. 사전에 키가 이미 있는 경우 이 메서드는 해당 키의 이전 값을 덮어씁니다.</param>
      <returns>지정된 키/값 쌍이 포함된 변경할 수 없는 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>특정 <see cref="T:System.Collections.Generic.ICollection`1" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.ICollection`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <returns>
        <see langword="true" />이 <paramref name="item" />에서 제거되면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <see langword="false" />이 원래 <paramref name="item" />에 없는 경우에도 <see cref="T:System.Collections.Generic.ICollection`1" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>제공한 키와 값을 가진 요소를 제네릭 사전에 추가합니다.</summary>
      <param name="key">추가할 요소의 키로 사용할 개체입니다.</param>
      <param name="value">추가할 요소의 값으로 사용할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.IDictionary`2" />에 있는 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" />이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>지정된 키를 가진 요소를 제네릭 사전에서 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" />이 읽기 전용인 경우</exception>
      <returns>요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <paramref name="key" />가 원래의 제네릭 사전에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 배열 인덱스부터 시작하여 사전의 요소를 배열에 복사합니다.</summary>
      <param name="array">사전에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>제공한 키와 값을 가진 요소를 사전 개체에 추가합니다.</summary>
      <param name="key">추가할 요소의 키로 사용할 개체입니다.</param>
      <param name="value">추가할 요소의 값으로 사용할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary>이 인스턴스를 지웁니다.</summary>
      <exception cref="T:System.NotSupportedException">사전 개체는 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>변경할 수 없는 사전 개체에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key">사전 개체에서 찾을 키입니다.</param>
      <returns>키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>변경할 수 없는 사전 개체에 대한 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체를 반환합니다.</summary>
      <returns>사전 개체에 대한 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>변경할 수 없는 사전 개체에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인터페이스를 확인합니다.</summary>
      <param name="key">추가할 항목의 키입니다.</param>
      <param name="value">추가할 항목의 값입니다.</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인터페이스를 확인합니다.</summary>
      <param name="pairs">추가할 키/값 쌍의 시퀀스입니다.</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인터페이스를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인터페이스를 확인합니다.</summary>
      <param name="key">제거할 항목의 키입니다.</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인터페이스를 확인합니다.</summary>
      <param name="keys">제거할 키의 시퀀스입니다.</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인터페이스를 확인합니다.</summary>
      <param name="key">업데이트할 항목의 키입니다.</param>
      <param name="value">업데이트할 항목의 값입니다.</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>지정된 키-값 쌍 집합을 변경할 수 없는 사전에 적용하여 결과 사전에서 충돌하는 키를 바꿉니다.</summary>
      <param name="items">지도에서 설정할 키-값 쌍의 집합입니다.</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>변경 가능한 표준 인터페이스를 사용하여 여러 작업 간에 효율적으로 변경할 수 있으며 이 사전과 내용이 동일한 변경할 수 없는 정렬된 사전을 만듭니다.</summary>
      <returns>이 사전과 내용이 동일한 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>이 사전에 지정된 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalKey">검색할 키입니다.</param>
      <param name="actualKey">사전에서 일치하는 키가 있으면 그대로이고, 일치하는 키가 없으면 <c>equalkey</c>입니다.</param>
      <returns>
        <paramref name="equalKey" />에 대한 일치하는 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key">값을 검색할 키입니다.</param>
      <param name="value">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값을 포함하고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값을 포함합니다.</param>
      <returns>사전에 지정된 키를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary>제공된 <paramref name="key" />과 연결된 값의 읽기 전용 참조를 반환합니다.</summary>
      <param name="key">조회할 항목의 키입니다.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" />가 없습니다.</exception>
      <returns>제공된 <paramref name="key" />와 연결된 값의 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>지정된 키 비교자를 사용하는 변경할 수 없는 정렬된 사전의 인스턴스를 가져옵니다.</summary>
      <param name="keyComparer">사용할 키 비교자입니다.</param>
      <returns>지정된 비교자를 사용하는 변경할 수 없는 사전의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>지정된 키 및 값 비교자를 사용하는 변경할 수 없는 정렬된 사전의 인스턴스를 가져옵니다.</summary>
      <param name="keyComparer">사용할 키 비교자입니다.</param>
      <param name="valueComparer">사용할 값 비교자입니다.</param>
      <returns>지정된 비교자를 사용하는 변경할 수 없는 사전의 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>변경할 수 없는 정렬된 사전에서 키/값 쌍 수를 가져옵니다.</summary>
      <returns>사전에 있는 키/값 쌍 수를 가져옵니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>변경할 수 없는 정렬된 사전의 이 인스턴스가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 인스턴스가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>지정된 키와 연결된 <paramref name="TValue" />를 가져옵니다.</summary>
      <param name="key">값을 검색할 키입니다.</param>
      <returns>지정한 키와 연결된 값입니다. 결과가 없으면 작업에서 예외를 throw합니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>변경할 수 없는 정렬된 사전에 대한 키 비교자를 가져옵니다.</summary>
      <returns>사전의 키 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>변경할 수 없는 정렬된 사전의 키를 가져옵니다.</summary>
      <returns>변경할 수 없는 사전의 키입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>지정한 키가 있는 <typeparamref name="TValue" />를 가져오거나 설정합니다.</summary>
      <param name="key">액세스할 요소의 키로 사용할 개체입니다.</param>
      <returns>와 연결 된 형식의 개체 <typeparamref name="TValue" /><paramref name="key" /> 입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>키를 가져옵니다.</summary>
      <returns>키를 포함 하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>값을 가져옵니다.</summary>
      <returns>값을 포함 하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되었으면(스레드로부터 안전하면) <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key">액세스할 요소의 키입니다.</param>
      <returns>지정 된 키 아래에 저장 된 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 값을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>값이 같은지 여부를 확인하는 데 사용되는 값 비교자를 가져옵니다.</summary>
      <returns>값이 같은지 여부를 확인하는 데 사용되는 값 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>변경할 수 없는 정렬된 사전의 값을 가져옵니다.</summary>
      <returns>사전의 값입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>메모리 할당 없이 변경되고, 변경할 수 없는 정렬된 사전 인스턴스를 매우 효율적으로 생성하거나 빌드할 수 있는 정렬된 사전을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary>지정한 키와 값을 가진 요소를 변경할 수 없는 정렬된 사전에 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>변경할 수 없는 정렬된 사전에 지정된 항목을 추가합니다.</summary>
      <param name="item">사전에 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>변경할 수 없는 정렬된 사전에 값의 시퀀스를 추가합니다.</summary>
      <param name="items">사전에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>변경할 수 없는 정렬된 사전에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>변경할 수 없는 정렬된 사전에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">사전에서 찾을 개체입니다.</param>
      <returns>
        <paramref name="item" />이 사전에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary>변경할 수 없는 정렬된 사전에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key">사전에서 찾을 키입니다.</param>
      <returns>키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary>변경할 수 없는 정렬된 사전에 지정된 값을 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="value">사전에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>변경할 수 없는 정렬된 사전에 지정된 값을 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>변경할 수 없는 정렬된 사전에서 반복되는 열거자를 반환합니다.</summary>
      <returns>사전에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져오고, 그렇지 않으면 기본값을 가져옵니다.</summary>
      <param name="key">검색할 키입니다.</param>
      <returns>키의 값입니다. 일치하는 키가 없는 경우 <c>기본값(TValue)</c>입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>일치하는 키가 사전에 있는 경우 지정된 키의 값을 가져오고, 그렇지 않으면 기본값을 가져옵니다.</summary>
      <param name="key">검색할 키입니다.</param>
      <param name="defaultValue">일치하는 키가 사전에 없는 경우에 반환할 기본값입니다.</param>
      <returns>키의 값입니다. 일치하는 키가 없는 경우 <paramref name="defaultValue" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary>변경할 수 없는 정렬된 사전에서 지정된 키를 가진 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <returns>요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="key" />가 원래 사전에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>변경할 수 없는 정렬된 사전에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item">사전에서 제거할 개체입니다.</param>
      <returns>
        <paramref name="item" />이 사전에서 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="item" />가 사전에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 시퀀스에서 찾은 것과 일치하는 키를 가진 모든 항목을 변경할 수 없는 정렬된 사전에서 제거합니다.</summary>
      <param name="keys">사전에서 제거할 항목의 키입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" />을 참조하십시오.</summary>
      <param name="array">사전에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" />을 참조하십시오.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 배열 인덱스부터 시작하여 사전의 요소를 배열에 복사합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <param name="array">사전에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>제공한 키와 값을 가진 요소를 사전 개체에 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>사전 개체에 지정된 키를 가진 요소가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key">찾을 키입니다.</param>
      <returns>키를 가진 요소가 사전에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>사전의 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체를 반환합니다.</summary>
      <returns>사전의 <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>지정된 키를 가진 요소를 사전에서 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>이 인스턴스의 내용을 기반으로 변경할 수 없는 정렬된 사전을 만듭니다.</summary>
      <returns>변경할 수 없는 정렬된 사전입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>이 사전에 지정된 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="equalKey">검색할 키입니다.</param>
      <param name="actualKey">사전에서 일치하는 키가 있으면 그대로이고, 일치하는 키가 없으면 <c>equalkey</c>입니다.</param>
      <returns>
        <paramref name="equalKey" />에 대한 일치하는 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key">값을 검색할 키입니다.</param>
      <param name="value">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값을 포함하고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns>사전을 구현하는 개체에 지정된 키를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary>제공된 <paramref name="key" />과 연결된 값의 읽기 전용 참조를 반환합니다.</summary>
      <param name="key">조회할 항목의 키입니다.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" />가 없습니다.</exception>
      <returns>제공된 <paramref name="key" />와 연결된 값의 읽기 전용 참조입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>이 변경할 수 없는 정렬된 사전에 있는 요소 수를 가져옵니다.</summary>
      <returns>이 사전에 있는 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary>변경할 수 없는 정렬된 사전에서 지정된 키의 값을 가져오거나 설정합니다.</summary>
      <param name="key">값을 검색할 키입니다.</param>
      <returns>지정된 키와 연결된 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>키 비교자를 가져오거나 설정합니다.</summary>
      <returns>키 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>강력한 형식의 읽기 전용 요소 컬렉션을 가져옵니다.</summary>
      <returns>강력한 형식의 읽기 전용 요소 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>이 인스턴스가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>사전에 저장된 모든 키를 포함하는 컬렉션을 반환합니다. <see cref="T:System.Collections.Generic.IDictionary`2" />을 참조하십시오.</summary>
      <returns>사전에 저장 된 모든 키를 포함 하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>사전에 저장된 모든 값을 포함하는 컬렉션을 반환합니다. <see cref="T:System.Collections.Generic.IDictionary`2" />을 참조하십시오.</summary>
      <returns>사전에 저장 된 모든 값을 포함 하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 개체의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key">키입니다.</param>
      <returns>지정한 키와 연결된 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />를 구현하는 개체의 값을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>값 비교자를 가져오거나 설정합니다.</summary>
      <returns>값 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>변경할 수 없는 정렬된 사전의 값이 들어 있는 컬렉션을 가져옵니다.</summary>
      <returns>사전을 구현하는 개체의 값이 들어 있는 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>이진 트리의 내용을 열거합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>열거자를 변경할 수 없는 정렬된 사전의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 정렬된 사전의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>변경할 수 없는 정렬된 사전의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>현재 요소입니다.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>변경할 수 없는 정렬된 빈 집합을 만듭니다.</summary>
      <typeparam name="T">변경할 수 없는 집합에 저장할 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 정렬된 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>지정된 항목이 포함된 변경할 수 없는 정렬된 새 집합을 만듭니다.</summary>
      <param name="item">집합을 미리 채울 항목입니다.</param>
      <typeparam name="T">변경할 수 없는 집합에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>지정된 항목 배열이 포함된 변경할 수 없는 정렬된 새 집합을 만듭니다.</summary>
      <param name="items">집합을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T">변경할 수 없는 집합에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>지정된 비교자를 사용하는 변경할 수 없는 정렬된 빈 집합을 만듭니다.</summary>
      <param name="comparer">집합의 항목을 비교할 때 사용할 구현입니다.</param>
      <typeparam name="T">변경할 수 없는 집합에 있는 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>지정된 항목을 포함하고 지정된 비교자를 사용하는 변경할 수 없는 정렬된 새 집합을 만듭니다.</summary>
      <param name="comparer">집합의 항목을 비교할 때 사용할 구현입니다.</param>
      <param name="item">집합을 미리 채울 항목입니다.</param>
      <typeparam name="T">변경할 수 없는 집합에 저장된 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>지정된 항목 배열을 포함하고 지정된 비교자를 사용하는 변경할 수 없는 정렬된 새 집합을 만듭니다.</summary>
      <param name="comparer">집합의 항목을 비교할 때 사용할 구현입니다.</param>
      <param name="items">집합을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T">변경할 수 없는 집합에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>변경할 수 없는 정렬된 집합을 작성하는 데 사용할 수 있는 컬렉션을 반환합니다.</summary>
      <typeparam name="T">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 컬렉션 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>변경할 수 없는 정렬된 집합을 작성하는 데 사용할 수 있는 컬렉션을 반환합니다.</summary>
      <param name="comparer">집합의 항목이 같은지 비교하는 데 사용되는 비교자입니다.</param>
      <typeparam name="T">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>지정된 항목이 포함된 변경할 수 없는 새 컬렉션을 만듭니다.</summary>
      <param name="comparer">이 집합의 요소를 비교하는 데 사용할 비교자입니다.</param>
      <param name="items">변경할 수 없는 상태가 되기 전에 집합에 추가할 항목입니다.</param>
      <typeparam name="T">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>지정된 항목이 포함된 변경할 수 없는 새 컬렉션을 만듭니다.</summary>
      <param name="items">변경할 수 없는 상태가 되기 전에 집합에 추가할 항목입니다.</param>
      <typeparam name="T">컬렉션에 의해 저장되는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>시퀀스를 열거하고 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 집합을 생성합니다.</summary>
      <param name="source">열거할 시퀀스입니다.</param>
      <typeparam name="TSource">시퀀스의 요소 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 항목을 포함하는 변경할 수 없는 정렬된 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>시퀀스를 열거하고, 해당 시퀀스의 내용에 대한 변경할 수 없는 정렬된 집합을 생성하며, 지정된 비교자를 사용합니다.</summary>
      <param name="source">열거할 시퀀스입니다.</param>
      <param name="comparer">정렬된 집합을 초기화하고 구성원을 추가하는 데 사용할 비교자입니다.</param>
      <typeparam name="TSource">시퀀스의 요소 형식입니다.</typeparam>
      <returns>지정된 시퀀스의 항목을 포함하는 변경할 수 없는 정렬된 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary>작성기 집합의 현재 콘텐츠에서 변경할 수 없는 정렬된 집합을 만듭니다.</summary>
      <param name="builder">변경할 수 없는 정렬된 집합을 만들 작성기입니다.</param>
      <typeparam name="TSource">변경할 수 없는 정렬 된 집합에 있는 요소의 형식입니다.</typeparam>
      <returns>작성기 집합의 현재 콘텐츠를 포함하는 변경할 수 없는 정렬된 집합입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>변경할 수 없는 정렬된 집합 구현을 나타냅니다.

NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T">집합에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary>변경할 수 없는 정렬된 빈 집합을 가져옵니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>이 변경할 수 없는 정렬된 집합에 지정된 값을 추가합니다.</summary>
      <param name="value">추가할 값입니다.</param>
      <returns>요소가 추가된 새 집합입니다. 해당 요소가 이 집합에 이미 있는 경우 이 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>변경할 수 없는 정렬된 집합에서 모든 요소를 제거합니다.</summary>
      <returns>요소가 제거된 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>이 변경할 수 없는 정렬된 집합에 지정한 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">확인할 값입니다.</param>
      <returns>집합에 지정된 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>이 변경할 수 없는 정렬된 집합에서 지정된 항목 집합을 제거합니다.</summary>
      <param name="other">이 집합에서 제거할 항목입니다.</param>
      <returns>항목이 제거된 새 집합입니다. 집합에 항목이 없는 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>변경할 수 없는 정렬된 집합을 반복하는 열거자를 반환합니다.</summary>
      <returns>집합에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>이 변경할 수 없는 정렬된 집합 내에서 지정된 값이 표시되는 위치를 가져옵니다.</summary>
      <param name="item">해당 위치를 찾아야 하는 값입니다.</param>
      <returns>
        <paramref name="item" />이 있는 경우 정렬된 집합에 있는 지정된 <paramref name="item" />의 인덱스입니다. <paramref name="item" />이 없고 이 집합에 있는 하나 이상의 요소보다 작은 경우 이 메서드는 값보다 큰 첫 번째 요소 인덱스의 비트 보수인 음수를 반환합니다. <paramref name="item" />이 없고 집합에 있는 요소보다 큰 경우 이 메서드는 마지막 요소에 1을 더한 인덱스의 비트 보수인 음수를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>이 집합과 지정된 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 정렬된 집합을 만듭니다.</summary>
      <param name="other">이 집합과 교차하는 집합입니다.</param>
      <returns>두 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 정렬된 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 정렬된 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 적절한 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 정렬된 집합이 지정된 컬렉션의 적절한 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 적절한 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 정렬된 집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 정렬된 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary>지정된 <paramref name="index" />에 있는 집합 요소에 대한 읽기 전용 참조를 가져옵니다.</summary>
      <param name="index">반환할 집합에서 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정된 위치에 있는 요소의 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 정렬된 집합과 지정된 컬렉션이 공통 요소를 공유하는지 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합과 <paramref name="other" />가 적어도 하나의 공통 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>이 변경할 수 없는 정렬된 집합에서 지정된 값을 제거합니다.</summary>
      <param name="value">제거할 요소입니다.</param>
      <returns>요소가 제거된 변경할 수 없는 정렬된 새 집합입니다. 집합에 요소가 없는 경우 이 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>이 변경할 수 없는 정렬된 집합을 역순으로 반복하는 <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</summary>
      <returns>이 변경할 수 없는 정렬된 집합을 역순으로 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 정렬된 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>집합이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>이 집합에 존재하거나 아니면 지정된 시퀀스로 존재하는(둘 중 하나로 존재) 요소가 포함된 변경할 수 없는 정렬된 집합을 만듭니다.</summary>
      <param name="other">항목의 다른 시퀀스입니다.</param>
      <returns>변경할 수 없는 정렬된 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>지정된 값을 컬렉션에 추가합니다.</summary>
      <param name="item">추가할 값입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>컬렉션에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>특정 배열 인덱스부터 시작하여 컬렉션의 요소를 배열에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>컬렉션에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="item">컬렉션에서 제거할 개체입니다.</param>
      <returns>컬렉션에서 <paramref name="item" />이 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>지정된 인덱스에 세트의 항목을 삽입합니다.</summary>
      <param name="index">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item">집합에 삽입할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>지정한 인덱스에서 해당 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>현재 집합에 요소를 추가하고 요소가 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="item">집합에 추가할 요소입니다.</param>
      <returns>요소가 집합에 추가되었으면 <see langword="true" />이고, 요소가 집합에 이미 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합에서 지정된 컬렉션의 모든 요소를 제거합니다.</summary>
      <param name="other">집합에서 제거할 항목의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션에도 있는 요소만 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합 또는 지정된 컬렉션 중 하나에 있는 요소가 모두 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>집합의 요소를 특정 배열 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array">집합에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary>집합에 항목을 추가합니다.</summary>
      <param name="value">집합에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">집합이 읽기 전용이거나 크기가 고정되어 있습니다.</exception>
      <returns>새 요소를 삽입한 위치이거나, 항목이 컬렉션에 삽입되지 않았음을 나타내는 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary>집합에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">모든 경우에 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary>집합에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">집합에서 찾을 개체입니다.</param>
      <returns>집합에 개체가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>집합에서 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value">집합에서 찾을 개체입니다.</param>
      <returns>목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>집합 내의 지정된 인덱스에 항목을 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">집합에 삽입할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">집합이 읽기 전용이거나 크기가 고정되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary>집합에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="value">집합에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">집합이 읽기 전용이거나 크기가 고정되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>집합의 지정된 인덱스에서 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException">집합이 읽기 전용이거나 크기가 고정되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>지정한 요소를 이 변경할 수 없는 집합에 추가합니다.</summary>
      <param name="value">추가할 요소입니다.</param>
      <returns>요소가 추가된 새 집합입니다. 해당 요소가 집합에 이미 있는 경우 이 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 집합을 검색합니다.</summary>
      <returns>정렬 및 순서 의미 체계가 이 인스턴스와 동일한 빈 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 변경할 수 없는 집합에서 지정된 컬렉션의 요소를 제거합니다.</summary>
      <param name="other">이 집합에서 제거할 항목입니다.</param>
      <returns>항목이 제거된 새 집합입니다. 집합에 항목이 없는 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>이 집합과 지정된 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>두 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>이 변경할 수 없는 집합에서 지정된 요소를 제거합니다.</summary>
      <param name="value">제거할 요소입니다.</param>
      <returns>지정된 요소가 제거된 새 집합입니다. 집합에서 요소를 찾을 수 없는 경우 현재 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하는 변경할 수 없는 집합을 만듭니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소를 포함하는 새 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 모든 요소를 포함하는 변경할 수 없는 새 집합을 만듭니다.</summary>
      <param name="other">요소를 추가할 컬렉션입니다.</param>
      <returns>항목이 추가된 변경할 수 없는 새 집합입니다. 모든 항목이 집합에 이미 있던 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>변경 가능한 표준 인터페이스를 사용하여 효율적으로 조작할 수 있으며 이 변경할 수 없는 정렬된 집합과 내용이 동일한 컬렉션을 만듭니다.</summary>
      <returns>정렬된 집합 작성기입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>집합에서 지정된 값을 검색하여 동일한 값을 찾은 경우 해당 값을 반환합니다.</summary>
      <param name="equalValue">검색할 값입니다.</param>
      <param name="actualValue">집합에서 검색한 값입니다. 검색에서 일치하는 항목을 찾지 못한 경우 원래 값입니다.</param>
      <returns>검색에 성공했는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 항목 집합을 이 변경할 수 없는 정렬된 집합에 추가합니다.</summary>
      <param name="other">추가할 항목입니다.</param>
      <returns>항목이 추가된 새 집합입니다. 모든 항목이 집합에 이미 있던 경우 원래 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>지정된 키 비교자가 있는 변경할 수 없는 정렬된 집합을 반환합니다.</summary>
      <param name="comparer">확인할 비교자입니다.</param>
      <returns>지정된 키 비교자가 있는 변경할 수 없는 정렬된 집합입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>변경할 수 없는 정렬된 집합의 요소 수를 가져옵니다.</summary>
      <returns>변경할 수 없는 정렬된 집합의 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>이 변경할 수 없는 정렬된 집합이 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 집합이 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>지정된 인덱스에서 변경할 수 없는 정렬된 집합의 요소를 가져옵니다.</summary>
      <param name="index">정렬된 집합에서 검색할 요소의 인덱스입니다.</param>
      <returns>지정된 인덱스의 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>변경할 수 없는 정렬된 집합에서 키를 정렬하는 데 사용되는 비교자를 가져옵니다.</summary>
      <returns>키를 정렬하는 데 사용되는 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>비교자로 정의된 변경할 수 없는 정렬된 집합의 최대값을 가져옵니다.</summary>
      <returns>집합의 최대값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>비교자로 정의된 변경할 수 없는 정렬된 집합의 최소값을 가져옵니다.</summary>
      <returns>집합의 최소값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>변경할 수 없는 컬렉션은 항상 읽기 전용이기 때문에 true를 반환합니다. <see cref="T:System.Collections.Generic.ICollection`1" /> 인터페이스를 확인합니다.</summary>
      <returns>컬렉션이 읽기 전용인 지 여부를 나타내는 부울 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.IList`1" /> 인터페이스를 확인합니다.</summary>
      <param name="index">액세스할 항목의 인덱스(0부터 시작)입니다.</param>
      <returns>지정 된 인덱스에 저장 된 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>변경할 수 없는 컬렉션은 항상 스레드로부터 안전하기 때문에 true를 반환합니다. <see cref="T:System.Collections.ICollection" /> 인터페이스를 확인합니다.</summary>
      <returns>컬렉션이 스레드로부터 안전한 지 여부를 나타내는 부울 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />을 참조하세요.</summary>
      <returns>컬렉션에 대 한 액세스를 동기화 하는 데 사용 되는 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />가 고정 크기인 경우 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary>지정된 인덱스에 있는 <see cref="T:System.Object" />를 가져오거나 설정합니다.</summary>
      <param name="index">인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException" />
      <returns>
        <see cref="T:System.Object" />
      </returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>메모리 할당 없이 변경 가능하고 변경할 수 없는 정렬된 집합을 효율적으로 조작하거나 작성하는 정렬된 집합을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary>현재 집합에 요소를 추가하고 요소가 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="item">집합에 추가할 요소입니다.</param>
      <returns>요소가 집합에 추가되었으면 <see langword="true" />이고, 요소가 집합에 이미 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>이 집합에서 모든 요소를 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary>집합에 지정한 개체가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="item">집합에서 찾을 개체입니다.</param>
      <returns>
        <paramref name="item" />가 집합에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합에서 지정된 항목 집합을 제거합니다.</summary>
      <param name="other">집합에서 제거할 항목의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>집합을 반복하는 열거자를 반환합니다.</summary>
      <returns>집합에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션에도 있는 요소만 포함되도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 적절한 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 적절한 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />의 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary>지정된 <paramref name="index" />에 있는 집합 요소의 읽기 전용 참조를 가져옵니다.</summary>
      <param name="index">반환할 집합에서 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정된 위치에 있는 요소에 대한 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합이 지정된 컬렉션과 겹치는지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합과 <paramref name="other" />가 적어도 하나의 공통 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary>집합에서 첫 번째로 나타나는 지정된 개체를 제거합니다.</summary>
      <param name="item">집합에서 제거할 개체입니다.</param>
      <returns>
        <paramref name="item" />가 집합에서 제거되었으면 <see langword="true" />이고, <paramref name="item" />가 집합에 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>이 변경할 수 없는 정렬된 집합을 역순으로 반복하는 열거자를 반환합니다.</summary>
      <returns>집합을 역순으로 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
      <returns>현재 집합이 <paramref name="other" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 집합과 비교할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>현재 집합에 요소를 추가하고 요소가 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="item">집합에 추가할 요소입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>특정 배열 인덱스부터 시작하여 컬렉션의 요소를 배열에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>집합의 요소를 특정 배열 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array">집합에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>이 인스턴스의 내용을 기반으로 변경할 수 없는 정렬된 집합을 만듭니다.</summary>
      <returns>변경할 수 없는 집합입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.TryGetValue(`0,`0@)">
      <summary>집합에서 지정된 값을 검색하여 동일한 값을 찾은 경우 해당 값을 반환합니다.</summary>
      <param name="equalValue">검색할 값입니다.</param>
      <param name="actualValue">집합에서 검색한 값입니다. 검색에서 일치하는 항목을 찾지 못한 경우 원래 값입니다.</param>
      <returns>검색에 성공했는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 집합과 지정된 컬렉션 둘 다에 있는 모든 요소를 포함하도록 현재 집합을 수정합니다.</summary>
      <param name="other">현재 상태와 비교할 컬렉션입니다.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>변경할 수 없는 정렬된 집합의 요소 수를 가져옵니다.</summary>
      <returns>이 집합의 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary>지정된 인덱스에서 집합의 요소를 가져옵니다.</summary>
      <param name="index">반환할 집합에서 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정 된 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>변경할 수 없는 정렬된 집합의 값이 같은지 확인하는 데 사용되는 개체를 가져오거나 설정합니다.</summary>
      <returns>집합의 값이 같은지 확인하는 데 사용되는 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>비교자로 정의된 변경할 수 없는 정렬된 집합의 최대값을 가져옵니다.</summary>
      <returns>집합의 최대값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>비교자로 정의된 변경할 수 없는 정렬된 집합의 최소값을 가져옵니다.</summary>
      <returns>집합의 최소값입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>이 인스턴스가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되었으면(스레드로부터 안전하면) <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>이진 트리의 내용을 열거합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>열거자를 변경할 수 없는 정렬된 집합의 다음 요소로 이동합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <returns>열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 정렬된 집합의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>변경할 수 없는 정렬된 집합의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <returns>열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>현재 요소입니다.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableStack`1" /> 클래스의 인스턴스에 대한 초기화 메서드 집합을 제공합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>변경할 수 없는 빈 스택을 만듭니다.</summary>
      <typeparam name="T">변경할 수 없는 스택에 저장할 항목의 형식입니다.</typeparam>
      <returns>변경할 수 없는 빈 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>지정된 항목이 포함된 변경할 수 없는 새 스택을 만듭니다.</summary>
      <param name="item">스택을 미리 채울 항목입니다.</param>
      <typeparam name="T">변경할 수 없는 스택에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>지정된 항목 배열이 포함된 변경할 수 없는 새 스택을 만듭니다.</summary>
      <param name="items">스택을 미리 채우는 데 사용할 항목이 포함된 배열입니다.</param>
      <typeparam name="T">변경할 수 없는 스택에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 새 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>지정된 항목이 포함된 변경할 수 없는 새 스택을 만듭니다.</summary>
      <param name="items">변경할 수 없는 상태가 되기 전에 스택에 추가할 항목입니다.</param>
      <typeparam name="T">스택에 있는 항목의 형식입니다.</typeparam>
      <returns>지정된 항목이 포함된 변경할 수 없는 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>변경할 수 없는 스택에서 지정된 항목을 제거합니다.</summary>
      <param name="stack">수정할 스택입니다.</param>
      <param name="value">스택에서 제거할 항목입니다.</param>
      <typeparam name="T">스택에 들어 있는 항목의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">스택이 비어 있습니다.</exception>
      <returns>스택입니다. <see langword="null" />일 수 없습니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>변경할 수 없는 스택을 나타냅니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T">스택에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>변경할 수 없는 스택에서 모든 개체를 제거합니다.</summary>
      <returns>변경할 수 없는 빈 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>변경할 수 없는 스택에서 반복되는 열거자를 반환합니다.</summary>
      <returns>스택에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>스택의 맨 위에 있는 개체를 제거하지 않고 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">스택이 비어 있습니다.</exception>
      <returns>스택의 맨 위에 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary>스택의 맨 위에 있는 요소의 읽기 전용 참조를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">스택이 비어 있는 경우 throw됩니다.</exception>
      <returns>스택의 맨 위에 있는 요소의 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>변경할 수 없는 스택의 맨 위에 있는 요소를 제거한 후 스택을 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">스택이 비어 있습니다.</exception>
      <returns>스택입니다. <see langword="null" />일 수 없습니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>변경할 수 없는 스택에서 지정된 요소를 제거한 후 스택을 반환합니다.</summary>
      <param name="value">스택에서 제거할 값입니다.</param>
      <returns>스택입니다. <see langword="null" />일 수 없습니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>변경할 수 없는 스택의 맨 위에 개체를 삽입하고 새 스택을 반환합니다.</summary>
      <param name="value">스택에 적용할 개체입니다.</param>
      <returns>새 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary>변경할 수 없는 스택에서 모든 요소를 제거합니다.</summary>
      <returns>변경할 수 없는 빈 스택입니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary>변경할 수 없는 스택의 맨 위에 있는 요소를 제거하고 새 스택을 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">스택이 비어 있습니다.</exception>
      <returns>새 스택입니다. <see langword="null" />일 수 없습니다.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary>변경할 수 없는 스택의 맨 위에 요소를 삽입하고 새 스택을 반환합니다.</summary>
      <param name="value">스택에 적용할 요소입니다.</param>
      <returns>새 스택입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary>변경할 수 없는 빈 스택을 가져옵니다.</summary>
      <returns>변경할 수 없는 빈 스택입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>변경할 수 없는 스택의 이 인스턴스가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 인스턴스가 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>메모리를 할당하지 않고 변경할 수 없는 스택의 내용을 열거합니다.  
  
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>열거자를 변경할 수 없는 스택의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동했으면 <see langword="true" />이고, 스택의 끝을 지났으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>표준 LINQ 메서드보다 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />에 대한 효율성이 뛰어난 LINQ 확장명 메서드 재정의입니다. 
 NuGet 패키지: System.Collections.Immutable (변경할 수 없는 컬렉션 정보 및 설치 방법)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>누적 방식으로 요소의 시퀀스에 함수를 적용합니다.</summary>
      <param name="immutableArray">함수를 적용할 컬렉션입니다.</param>
      <param name="func">누적 방식으로 각 요소에서 호출할 함수입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>누적 함수가 모든 요소에 적용된 이후의 최종 값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>누적 방식으로 요소의 시퀀스에 함수를 적용합니다.</summary>
      <param name="immutableArray">함수를 적용할 컬렉션입니다.</param>
      <param name="seed">초기 누적기 값입니다.</param>
      <param name="func">누적 방식으로 각 요소에서 호출할 함수입니다.</param>
      <typeparam name="TAccumulate">누적된 값의 형식입니다.</typeparam>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>최종 누적기 값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>누적 방식으로 요소의 시퀀스에 함수를 적용합니다.</summary>
      <param name="immutableArray">함수를 적용할 컬렉션입니다.</param>
      <param name="seed">초기 누적기 값입니다.</param>
      <param name="func">누적 방식으로 각 요소에서 호출할 함수입니다.</param>
      <param name="resultSelector" />
      <typeparam name="TAccumulate">누적된 값의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 선택기에서 반환되는 결과의 형식입니다.</typeparam>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>최종 누적기 값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>이 배열의 모든 요소가 지정된 조건과 일치하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="immutableArray">일치하는 항목을 확인할 배열입니다.</param>
      <param name="predicate">조건자입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>원본 시퀀스의 모든 요소가 지정된 조건자의 테스트를 통과하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>이 컬렉션에 요소가 들어 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="builder">일치하는 항목을 확인할 작성기입니다.</param>
      <typeparam name="T">배열 요소의 형식입니다.</typeparam>
      <returns>배열 작성기에 요소가 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>배열에 요소가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="immutableArray">요소를 확인할 배열입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>배열에 요소가 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>배열에 지정된 조건과 일치하는 요소가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="immutableArray">요소를 확인할 배열입니다.</param>
      <param name="predicate">요소와 일치시킬 조건을 정의하는 대리자입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>요소가 지정된 조건과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>배열의 지정된 인덱스에 있는 요소를 반환합니다.</summary>
      <param name="immutableArray">요소를 찾을 배열입니다.</param>
      <param name="index">검색할 요소의 인덱스입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>지정된 인덱스에 있는 항목입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>시퀀스에서 지정된 인덱스의 요소를 반환하거나, 인덱스가 범위를 벗어나면 기본 값을 반환합니다.</summary>
      <param name="immutableArray">요소를 찾을 배열입니다.</param>
      <param name="index">검색할 요소의 인덱스입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>지정된 인덱스의 항목입니다. 인덱스가 없는 경우 기본값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>컬렉션의 첫 번째 요소를 반환합니다.</summary>
      <param name="builder">항목을 검색할 작성기입니다.</param>
      <typeparam name="T">컬렉션에 있는 항목의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">배열이 비어 있는 경우입니다.</exception>
      <returns>목록의 첫 번째 항목입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>배열의 첫 번째 요소를 반환합니다.</summary>
      <param name="immutableArray">항목을 가져올 배열입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">배열이 비어 있는 경우입니다.</exception>
      <returns>배열의 첫 번째 항목입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스에서 지정된 조건에 맞는 첫 번째 요소를 반환합니다.</summary>
      <param name="immutableArray">항목을 가져올 배열입니다.</param>
      <param name="predicate">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">배열이 비어 있는 경우입니다.</exception>
      <returns>
        <paramref name="predicate" />에 의해 지정된 조건을 충족하는 경우 목록의 첫 번째 항목입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>컬렉션의 첫 번째 요소 또는 기본값(컬렉션이 비어 있는 경우)을 반환합니다.</summary>
      <param name="builder">요소를 검색할 작성기입니다.</param>
      <typeparam name="T">작성기에 있는 항목의 형식입니다.</typeparam>
      <returns>목록의 첫 번째 항목(있는 경우) 또는 항목 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>시퀀스의 첫 번째 요소를 반환하거나, 시퀀스에 요소가 없으면 기본값을 반환합니다.</summary>
      <param name="immutableArray">항목을 검색할 배열입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>목록의 첫 번째 항목(있는 경우) 또는 항목 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스에서 특정 조건에 맞는 첫 번째 요소를 반환하거나, 이러한 요소가 없으면 기본값을 반환합니다.</summary>
      <param name="immutableArray">요소를 검색할 배열입니다.</param>
      <param name="predicate">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>목록의 첫 번째 항목(있는 경우) 또는 항목 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>컬렉션의 마지막 요소를 반환합니다.</summary>
      <param name="builder">요소를 검색할 작성기입니다.</param>
      <typeparam name="T">작성기에 있는 항목의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">컬렉션이 비어 있는 경우 throw됩니다.</exception>
      <returns>작성기의 마지막 요소입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>배열의 마지막 요소를 반환합니다.</summary>
      <param name="immutableArray">항목을 검색할 배열입니다.</param>
      <typeparam name="T">배열에 의해 포함되는 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">컬렉션이 비어 있는 경우 throw됩니다.</exception>
      <returns>배열의 마지막 요소입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스에서 지정된 조건에 맞는 마지막 요소를 반환합니다.</summary>
      <param name="immutableArray">요소를 검색할 배열입니다.</param>
      <param name="predicate">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">컬렉션이 비어 있는 경우 throw됩니다.</exception>
      <returns>
        <paramref name="predicate" /> 조건을 충족하는 배열의 마지막 요소입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>컬렉션의 마지막 요소 또는 기본값(컬렉션이 비어 있는 경우)을 반환합니다.</summary>
      <param name="builder">요소를 검색할 작성기입니다.</param>
      <typeparam name="T">작성기에 있는 항목의 형식입니다.</typeparam>
      <returns>시퀀스의 마지막 요소 또는 기본값(시퀀스에 요소가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>시퀀스의 마지막 요소를 반환하거나, 시퀀스에 요소가 없으면 기본값을 반환합니다.</summary>
      <param name="immutableArray">항목을 검색할 배열입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>시퀀스의 마지막 요소 또는 기본값(시퀀스에 요소가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스에서 특정 조건에 맞는 마지막 요소를 반환하거나, 이러한 요소가 없으면 기본값을 반환합니다.</summary>
      <param name="immutableArray">요소를 검색할 배열입니다.</param>
      <param name="predicate">검색할 요소의 조건을 정의하는 대리자입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>시퀀스의 마지막 요소 또는 기본값(시퀀스에 요소가 없는 경우)입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>시퀀스의 각 요소를 새 폼에 투영합니다.</summary>
      <param name="immutableArray">항목을 선택할 변경할 수 없는 배열입니다.</param>
      <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 요소의 형식입니다.</typeparam>
      <returns>해당 요소가 원본의 각 요소에 대해 변형 함수를 호출한 결과인 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>시퀀스의 각 요소를 <see cref="T:System.Collections.Generic.IEnumerable`1" />로 투영하고, 결과 시퀀스를 단일 시퀀스로 평면화한 다음 포함된 각 요소에 대해 결과 선택기 함수를 호출합니다.</summary>
      <param name="immutableArray">변경할 수 없는 배열입니다.</param>
      <param name="collectionSelector">입력 시퀀스의 각 요소에 적용할 변형 함수입니다.</param>
      <param name="resultSelector">중간 시퀀스의 각 요소에 적용할 변형 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="immutableArray" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" />에서 수집하는 중간 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">결과 시퀀스 요소의 형식입니다.</typeparam>
      <returns>해당 요소가 <paramref name="immutableArray" />의 각 요소에 대해 일대다 변형 함수 <paramref name="collectionSelector" />를 호출한 다음 이러한 시퀀스 요소와 해당 소스 요소를 각각 결과 요소에 매핑한 결과인 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>같음 비교자에 따라 두 시퀀스가 서로 같은지 확인합니다.</summary>
      <param name="immutableArray">비교에 사용할 배열입니다.</param>
      <param name="items">비교에 사용할 항목입니다.</param>
      <param name="comparer">같은지 확인하는 데 사용할 비교자입니다.</param>
      <typeparam name="TDerived">비교한 배열에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TBase">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>시퀀스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>같음 비교자에 따라 두 시퀀스가 서로 같은지 확인합니다.</summary>
      <param name="immutableArray">비교에 사용할 배열입니다.</param>
      <param name="items">비교에 사용할 항목입니다.</param>
      <param name="comparer">같은지 확인하는 데 사용할 비교자입니다.</param>
      <typeparam name="TDerived">비교한 배열에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TBase">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>시퀀스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>같음 비교자에 따라 두 시퀀스가 서로 같은지 확인합니다.</summary>
      <param name="immutableArray">비교에 사용할 배열입니다.</param>
      <param name="items">비교에 사용할 항목입니다.</param>
      <param name="predicate">같은지 확인하는 데 사용할 비교자입니다.</param>
      <typeparam name="TDerived">비교한 배열에 있는 요소의 형식입니다.</typeparam>
      <typeparam name="TBase">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>시퀀스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>시퀀스의 유일한 요소를 반환하고, 시퀀스에 요소가 정확히 하나 들어 있지 않으면 예외를 throw합니다.</summary>
      <param name="immutableArray">요소를 검색할 배열입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>시퀀스의 요소입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스에서 지정된 조건에 맞는 유일한 요소를 반환하고, 이러한 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <param name="immutableArray" />
      <param name="predicate" />
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>
        <see cref="T:System.Boolean" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>배열의 유일한 요소를 반환하거나 시퀀스가 비어 있으면 기본값을 반환합니다. 시퀀스에 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <param name="immutableArray">배열입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에는 둘 이상의 요소가 있습니다.</exception>
      <returns>배열의 요소 또는 기본값(배열이 비어 있는 경우)입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>시퀀스에서 지정된 조건에 맞는 유일한 요소를 반환하거나 이러한 요소가 없으면 기본값을 반환합니다. 조건에 맞는 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <param name="immutableArray">요소를 가져올 배열입니다.</param>
      <param name="predicate">요소가 충족해야 하는 조건입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건에 맞는 요소가 둘 이상인 경우</exception>
      <returns>지정된 조건을 충족하면 해당 요소이고, 그렇지 않으면 기본 요소입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>이 배열의 내용을 변경 가능한 배열에 복사합니다.</summary>
      <param name="immutableArray" />
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>새로 인스턴스화된 배열입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>이 배열의 내용을 기반으로 사전을 만듭니다.</summary>
      <param name="immutableArray">사전을 만들 배열입니다.</param>
      <param name="keySelector">키 선택기입니다.</param>
      <typeparam name="TKey">키의 형식입니다.</typeparam>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>새로 초기화된 사전입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>이 배열의 내용을 기반으로 사전을 만듭니다.</summary>
      <param name="immutableArray">사전을 만들 배열입니다.</param>
      <param name="keySelector">키 선택기입니다.</param>
      <param name="comparer">사전을 초기화할 비교자입니다.</param>
      <typeparam name="TKey">키의 형식입니다.</typeparam>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>새로 초기화된 사전입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>이 배열의 내용을 기반으로 사전을 만듭니다.</summary>
      <param name="immutableArray">사전을 만들 배열입니다.</param>
      <param name="keySelector">키 선택기입니다.</param>
      <param name="elementSelector">요소 선택기입니다.</param>
      <typeparam name="TKey">키의 형식입니다.</typeparam>
      <typeparam name="TElement">요소의 유형입니다.</typeparam>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>새로 초기화된 사전입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>이 배열의 내용을 기반으로 사전을 만듭니다.</summary>
      <param name="immutableArray">사전을 만들 배열입니다.</param>
      <param name="keySelector">키 선택기입니다.</param>
      <param name="elementSelector">요소 선택기입니다.</param>
      <param name="comparer">사전을 초기화할 비교자입니다.</param>
      <typeparam name="TKey">키의 형식입니다.</typeparam>
      <typeparam name="TElement">요소의 유형입니다.</typeparam>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>새로 초기화된 사전입니다.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>조건자에 따라 값의 시퀀스를 필터링합니다.</summary>
      <param name="immutableArray">필터링할 배열입니다.</param>
      <param name="predicate">배열 내용을 필터링하는 데 사용할 조건입니다.</param>
      <typeparam name="T">컬렉션에 의해 포함되는 요소의 형식입니다.</typeparam>
      <returns>조건을 충족하는 요소가 포함된 <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
  </members>
</doc>
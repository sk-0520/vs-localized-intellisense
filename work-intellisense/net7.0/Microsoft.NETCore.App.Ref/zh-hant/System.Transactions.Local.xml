<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Transactions.Local</name>
  </assembly>
  <members>
    <member name="T:System.Transactions.CommittableTransaction">
      <summary>描述可認可的交易。</summary>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor">
      <summary>初始化 <see cref="T:System.Transactions.CommittableTransaction" /> 類別的新執行個體。</summary>
      <exception cref="T:System.PlatformNotSupportedException">嘗試在 Windows 98、Windows 98 Second Edition 或 Windows Millennium Edition 下建立交易。</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
      <summary>使用指定的 <paramref name="timeout" /> 值，初始化 <see cref="T:System.Transactions.CommittableTransaction" /> 類別的新執行個體。</summary>
      <param name="timeout">交易在中止之前可存在的最大時間量。</param>
      <exception cref="T:System.PlatformNotSupportedException">嘗試在 Windows 98、Windows 98 Second Edition 或 Windows Millennium Edition 下建立交易。</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
      <summary>使用指定的交易選項，初始化 <see cref="T:System.Transactions.CommittableTransaction" /> 類別的新執行個體。</summary>
      <param name="options">
        <see cref="T:System.Transactions.TransactionOptions" /> 結構，描述要用於新交易的交易選項。</param>
      <exception cref="T:System.PlatformNotSupportedException">嘗試在 Windows 98、Windows 98 Second Edition 或 Windows Millennium Edition 下建立交易。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 無效。</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
      <summary>開始嘗試非同步認可交易。</summary>
      <param name="asyncCallback">在交易完成時所叫用 (Invoke) 的 <see cref="T:System.AsyncCallback" /> 委派。 這個參數可以是 <see langword="null" />，在此情況下，不會告知應用程式交易的完成狀態， 而是應用程式必須使用 <see cref="T:System.IAsyncResult" /> 介面來檢查是否完成並適當地等候，或呼叫 <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" /> 以等候完成。</param>
      <param name="asyncState">與非同步認可關聯的物件，該物件可能包含任意狀態資訊。 這個物件會傳遞至回呼 (Callback)，且不會由 <see cref="N:System.Transactions" /> 所解譯。 允許使用 null 參考。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 介面，可由呼叫端用來檢查非同步作業的狀態，或等候作業完成。</returns>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.Commit">
      <summary>嘗試認可交易。</summary>
      <exception cref="T:System.Transactions.TransactionInDoubtException">在交易上呼叫 <see cref="M:System.Transactions.CommittableTransaction.Commit" />，且交易成為 <see cref="F:System.Transactions.TransactionStatus.InDoubt" />。</exception>
      <exception cref="T:System.Transactions.TransactionAbortedException">呼叫 <see cref="M:System.Transactions.CommittableTransaction.Commit" /> 且交易第一次復原。</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
      <summary>結束非同步認可交易的嘗試。</summary>
      <param name="asyncResult">與非同步認可關聯的 <see cref="T:System.IAsyncResult" /> 物件。</param>
      <exception cref="T:System.Transactions.TransactionAbortedException">呼叫 <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> 且交易第一次復原。</exception>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
      <summary>取得當做 <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> 方法呼叫之最後一個參數來提供的物件。</summary>
      <returns>當做 <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> 方法呼叫之最後一個參數來提供的物件。</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
      <summary>取得 <see cref="T:System.Threading.WaitHandle" />，用來等候非同步作業完成。</summary>
      <returns>
        <see cref="T:System.Threading.WaitHandle" />，用來等候非同步作業完成。</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
      <summary>取得非同步認可作業是否已同步完成的指示。</summary>
      <returns>如果非同步認可作業已同步完成則為 <see langword="true" />，否則為 <see langword="false" />。 這個屬性一定會傳回 <see langword="false" />，即使作業已同步完成。</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
      <summary>取得非同步認可作業是否已完成的指示。</summary>
      <returns>如果作業完成，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Transactions.DependentCloneOption">
      <summary>控制要建立何種相依交易。</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.BlockCommitUntilComplete">
      <summary>相依交易會封鎖交易的認可處理序，直到父交易逾時或呼叫 <see cref="M:System.Transactions.DependentTransaction.Complete" /> 為止。 在此情況下，可以在交易上執行額外的工作，並建立新的登記。</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.RollbackIfNotComplete">
      <summary>如果呼叫 <see cref="M:System.Transactions.DependentTransaction.Complete" /> 之前在父交易上呼叫 Commit，則相依交易會自動中止交易。</summary>
    </member>
    <member name="T:System.Transactions.DependentTransaction">
      <summary>描述交易的複製品 (Clone)，其可保證在交易上執行工作時，必須等到應用程式停止後才能認可交易。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.Transactions.DependentTransaction.Complete">
      <summary>嘗試完成相依交易。</summary>
      <exception cref="T:System.Transactions.TransactionException">任何嘗試在此方法呼叫後於交易上進行其他的工作。 這些嘗試包括叫用方法 (例如 <see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />、<see cref="Overload:System.Transactions.Transaction.EnlistDurable" />、<see cref="M:System.Transactions.Transaction.Clone" />、<see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" />) 或對交易的任何序列化作業。</exception>
    </member>
    <member name="T:System.Transactions.Enlistment">
      <summary>在交易的最後階段，協助登記的交易參與者與交易管理員之間的通訊。</summary>
    </member>
    <member name="M:System.Transactions.Enlistment.Done">
      <summary>指出交易參與者已完成其工作。</summary>
    </member>
    <member name="T:System.Transactions.EnlistmentOptions">
      <summary>判斷是否應該在準備階段登記物件。</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired">
      <summary>物件必須在認可程序的初始階段登記。</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.None">
      <summary>在認可程序的初始階段，物件不需要登記。</summary>
    </member>
    <member name="T:System.Transactions.EnterpriseServicesInteropOption">
      <summary>指定分散式交易如何與 COM+ 交易互動。</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Automatic">
      <summary>搜尋現有的 COM+ 內容，並在該內容存在時與其同步處理。</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Full">
      <summary>
        <see cref="N:System.EnterpriseServices" /> 內容 (可藉由呼叫 <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> 類別的靜態方法 <see cref="T:System.EnterpriseServices.ContextUtil" /> 來擷取) 和 <see cref="N:System.Transactions" /> 環境交易 (可藉由呼叫 <see cref="P:System.Transactions.Transaction.Current" /> 類別的靜態方法 <see cref="T:System.Transactions.Transaction" /> 來擷取) 永遠會同步處理。 這會對效能帶來負面影響，因為可能需要建立新的 <see cref="N:System.EnterpriseServices" /> 內容。</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.None">
      <summary>
        <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> 和 <see cref="P:System.Transactions.Transaction.Current" /> 之間不會進行同步處理。</summary>
    </member>
    <member name="T:System.Transactions.HostCurrentTransactionCallback">
      <summary>提供一個機制，讓裝載環境提供自己的 <see cref="P:System.Transactions.Transaction.Current" /> 預設概念。</summary>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> 物件。</returns>
    </member>
    <member name="T:System.Transactions.IDtcTransaction">
      <summary>描述 DTC 交易。</summary>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Abort(System.IntPtr,System.Int32,System.Int32)">
      <summary>中止交易。</summary>
      <param name="reason">選擇性 <see cref="T:System.EnterpriseServices.BOID" />，指出交易為何將要被中止。 這個參數可以為 <see langword="null" />，指出沒有提供中止的理由。</param>
      <param name="retaining">這個值必須為 <see langword="false" />。</param>
      <param name="async">
        <paramref name="async" /> 為 <see langword="true" /> 時，會執行非同步 (Asynchronous) 中止，並且呼叫端必須使用 <see langword="ITransactionOutcomeEvents" /> 來得知交易的結果。</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Commit(System.Int32,System.Int32,System.Int32)">
      <summary>認可交易。</summary>
      <param name="retaining">這個值必須為 <see langword="false" />。</param>
      <param name="commitType">取自 OLE DB 列舉型別 <see langword="XACTTC" /> 的值</param>
      <param name="reserved">這個值必須為零。</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.GetTransactionInfo(System.IntPtr)">
      <summary>擷取交易的資訊。</summary>
      <param name="transactionInformation">呼叫端配置的 <see cref="T:System.EnterpriseServices.XACTTRANSINFO" /> 結構 (將接收交易資訊) 的指標。 這個值不可以是 <see langword="null" />。</param>
    </member>
    <member name="T:System.Transactions.IEnlistmentNotification">
      <summary>描述資源管理員應該實作的介面，可提供兩階段認可告知回呼，讓交易管理員用來登記參與。</summary>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)">
      <summary>告知登記的物件正在認可交易。</summary>
      <param name="enlistment">
        <see cref="T:System.Transactions.Enlistment" /> 物件，用來傳送回應給交易管理員。</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)">
      <summary>告知登記的物件交易的狀態不確定。</summary>
      <param name="enlistment">
        <see cref="T:System.Transactions.Enlistment" /> 物件，用來傳送回應給交易管理員。</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)">
      <summary>告知登記的物件正在準備認可交易。</summary>
      <param name="preparingEnlistment">
        <see cref="T:System.Transactions.PreparingEnlistment" /> 物件，用來傳送回應給交易管理員。</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)">
      <summary>告知登記的物件正在復原 (中止) 交易。</summary>
      <param name="enlistment">
        <see cref="T:System.Transactions.Enlistment" /> 物件，用來傳送回應給交易管理員。</param>
    </member>
    <member name="T:System.Transactions.IPromotableSinglePhaseNotification">
      <summary>描述物件，該物件用來當做資源管理員內部之非分散式交易的認可委派。</summary>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Initialize">
      <summary>告知交易參與者已成功完成登記。</summary>
      <exception cref="T:System.Transactions.TransactionException">嘗試登記或序列化交易。</exception>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Rollback(System.Transactions.SinglePhaseEnlistment)">
      <summary>告知登記的物件正在復原交易。</summary>
      <param name="singlePhaseEnlistment">
        <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 物件，用來傳送回應給交易管理員。</param>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>告知登記的物件正在認可交易。</summary>
      <param name="singlePhaseEnlistment">
        <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 介面，用來傳送對交易管理員的回應。</param>
    </member>
    <member name="T:System.Transactions.ISimpleTransactionSuperior">
      <summary>表示不是根交易，但可擴大以便由 MSDTC 管理的交易。</summary>
    </member>
    <member name="M:System.Transactions.ISimpleTransactionSuperior.Rollback">
      <summary>告知登記的物件正在復原交易。</summary>
    </member>
    <member name="T:System.Transactions.ISinglePhaseNotification">
      <summary>描述一個資源物件，其支援參與交易的單一階段交易認可最佳化。</summary>
    </member>
    <member name="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>表示資源管理員之單一階段交易認可最佳化的回呼實作。</summary>
      <param name="singlePhaseEnlistment">用於傳送回應至交易管理員的 <see cref="T:System.Transactions.SinglePhaseEnlistment" />。</param>
    </member>
    <member name="T:System.Transactions.IsolationLevel">
      <summary>指定交易的隔離等級 (Isolation Level)。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Chaos">
      <summary>無法覆寫來自隔離程度更深之交易的暫止變更。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadCommitted">
      <summary>在交易期間無法讀取 Volatile 資料，但可以修改該資料。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadUncommitted">
      <summary>在交易期間可以讀取和修改 Volatile 資料。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.RepeatableRead">
      <summary>在交易期間可以讀取 Volatile 資料，但無法修改該資料。 在交易期間可以加入新資料。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Serializable">
      <summary>在交易期間可以讀取 Volatile 資料，但無法修改該資料，且不能加入新資料。</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Snapshot">
      <summary>
        <para>可以讀取 Volatile 資料。 交易會在修改資料之前，先驗證在最初讀取資料後是否有另一個交易已變更該資料。 如果資料已更新，則會引發錯誤， 如此可允許交易回到先前所認可的資料值。</para>
        <para>當您升級使用 <see langword="Snapshot" /> 隔離層級建立的交易時，會擲回具有錯誤訊息「無法升級 IsolationLevel 為快照的交易」的 <see cref="T:System.InvalidOperationException" />。</para>
      </summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Unspecified">
      <summary>使用與指定不同的隔離等級，但無法判斷該等級。 如果設定這個值，會擲回例外狀況。</summary>
    </member>
    <member name="T:System.Transactions.ITransactionPromoter">
      <summary>描述現有交易之已委派交易，其可在需要時擴大以由 MSDTC 管理。</summary>
    </member>
    <member name="M:System.Transactions.ITransactionPromoter.Promote">
      <summary>向未登記的物件告知已經要求擴大已委派之交易的規模。</summary>
      <returns>封送處理分散式交易的傳送/接收傳用語彙基元。 如需詳細資訊，請參閱<see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />。</returns>
    </member>
    <member name="T:System.Transactions.PreparingEnlistment">
      <summary>在交易的準備階段，協助登記的交易參與者與交易管理員之間的通訊。</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback">
      <summary>表示應該復原交易。</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)">
      <summary>表示應該復原交易。</summary>
      <param name="e">說明觸發復原的原因。</param>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.Prepared">
      <summary>指出可以認可交易。</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.RecoveryInformation">
      <summary>取得登記的復原資訊。</summary>
      <exception cref="T:System.InvalidOperationException">嘗試取得暫時性 (Volatile) 登記內部的復原資訊，而該登記並未產生任何復原資訊。</exception>
      <returns>登記的復原資訊。</returns>
    </member>
    <member name="T:System.Transactions.SinglePhaseEnlistment">
      <summary>提供一組回呼，在收到 <see cref="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)" /> 告知時，用來協助登記於單一階段交易認可之參與者和交易管理員之間的通訊。</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted">
      <summary>表示回呼，用來向交易管理員指出應該復原交易。</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted(System.Exception)">
      <summary>表示回呼，用來向交易管理員指出應該復原交易，並提供說明。</summary>
      <param name="e">說明初始化復原的原因。</param>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Committed">
      <summary>表示回呼，用來向交易管理員指出 SinglePhaseCommit 已成功。</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt">
      <summary>表示回呼，用來向交易管理員指出交易的狀態不確定。</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt(System.Exception)">
      <summary>表示回呼，用來向交易管理員指出交易的狀態不確定，並提供說明。</summary>
      <param name="e">說明交易處於不確定狀態的原因。</param>
    </member>
    <member name="T:System.Transactions.SubordinateTransaction">
      <summary>表示可以委派的非根交易。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.Transactions.SubordinateTransaction.#ctor(System.Transactions.IsolationLevel,System.Transactions.ISimpleTransactionSuperior)">
      <summary>初始化 <see cref="T:System.Transactions.SubordinateTransaction" /> 類別的新執行個體。</summary>
      <param name="isoLevel">交易的隔離等級 (Isolation Level)</param>
      <param name="superior">
        <see cref="T:System.Transactions.ISimpleTransactionSuperior" />
      </param>
    </member>
    <member name="T:System.Transactions.Transaction">
      <summary>表示交易。</summary>
    </member>
    <member name="E:System.Transactions.Transaction.TransactionCompleted">
      <summary>指出交易已完成。</summary>
      <exception cref="T:System.ObjectDisposedException">嘗試在已經處置的交易上訂閱這個事件。</exception>
    </member>
    <member name="M:System.Transactions.Transaction.Clone">
      <summary>建立交易的複製品 (Clone)。</summary>
      <returns>
        <see cref="T:System.Transactions.Transaction" />，其為目前交易物件的複本。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)">
      <summary>建立交易的相依複製品。</summary>
      <param name="cloneOption">
        <see cref="T:System.Transactions.DependentCloneOption" />，用來控制要建立何種相依交易。</param>
      <returns>
        <see cref="T:System.Transactions.DependentTransaction" />，表示相依的複製品。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Dispose">
      <summary>釋放該物件所持有的資源。</summary>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>登記支援兩階段交易認可 (Two-Phase Commit) 的長期資源管理員以參與交易。</summary>
      <param name="resourceManagerIdentifier">資源管理員的唯一識別項，其應該在整個資源管理員失敗或重新開機期間持續。</param>
      <param name="enlistmentNotification">實作 <see cref="T:System.Transactions.IEnlistmentNotification" /> 介面以接收兩階段交易認可告知的物件。</param>
      <param name="enlistmentOptions">如果資源管理員想要在準備階段執行額外的工作，即為 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />。</param>
      <returns>描述登錄的 <see cref="T:System.Transactions.Enlistment" /> 物件。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>登記支援單一階段交易認可最佳化的長期資源管理員以參與交易。</summary>
      <param name="resourceManagerIdentifier">資源管理員的唯一識別項，其應該在整個資源管理員失敗或重新開機期間持續。</param>
      <param name="singlePhaseNotification">實作 <see cref="T:System.Transactions.ISinglePhaseNotification" /> 介面的物件，該介面必須可以接收單一階段交易認可和兩階段交易認可告知。</param>
      <param name="enlistmentOptions">如果資源管理員想要在準備階段執行額外的工作，即為 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />。</param>
      <returns>描述登錄的 <see cref="T:System.Transactions.Enlistment" /> 物件。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)">
      <summary>使用可提升單一階段登記 (PSPE) 來登記具有內部交易的資源管理員。</summary>
      <param name="promotableSinglePhaseNotification">參與者所實作的 <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> 介面。</param>
      <returns>
        <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 介面實作，可描述此登記。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>使用可提升單一階段登記 (PSPE) 來登記具有內部交易的資源管理員。</summary>
      <param name="promotableSinglePhaseNotification">參與者所實作的 <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> 介面。</param>
      <param name="promoterType">分散式交易處理器的類型。</param>
      <returns>
        <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 介面實作，可描述此登記。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>登錄暫時性資源管理員，支援兩階段交易認可參與交易。</summary>
      <param name="enlistmentNotification">該物件會實作 <see cref="T:System.Transactions.IEnlistmentNotification" /> 介面，以接收兩階段交易認可通知。</param>
      <param name="enlistmentOptions">如果資源管理員想要在準備階段執行額外的工作，即為 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />。</param>
      <returns>描述登錄的 <see cref="T:System.Transactions.Enlistment" /> 物件。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>登記支援單一階段交易認可最佳化的暫時性 (Volatile) 資源管理員以參與交易。</summary>
      <param name="singlePhaseNotification">實作 <see cref="T:System.Transactions.ISinglePhaseNotification" /> 介面的物件，該介面必須可以接收單一階段交易認可和兩階段交易認可告知。</param>
      <param name="enlistmentOptions">如果資源管理員想要在準備階段執行額外的工作，即為 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />。</param>
      <returns>描述登錄的 <see cref="T:System.Transactions.Enlistment" /> 物件。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Equals(System.Object)">
      <summary>判斷這個交易和指定的物件是否相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 和這個交易相同則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetPromotedToken">
      <summary>當此交易升級時，取得 <c>Promote</c> 方法傳回的 <c>byte[]</c>。</summary>
      <returns>當此交易升級時，<c>Promote</c> 方法傳回的 <c>byte[]</c>。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>測試兩個指定的 <see cref="T:System.Transactions.Transaction" /> 執行個體是否相等。</summary>
      <param name="x">在相等運算子左邊的 <see cref="T:System.Transactions.Transaction" /> 執行個體。</param>
      <param name="y">在相等運算子右方的 <see cref="T:System.Transactions.Transaction" /> 執行個體。</param>
      <returns>如果 <paramref name="x" /> 和 <paramref name="y" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>傳回值，這個值表示兩個 <see cref="T:System.Transactions.Transaction" /> 執行個體是否不相等。</summary>
      <param name="x">在不等比較運算子左方的 <see cref="T:System.Transactions.Transaction" /> 執行個體。</param>
      <param name="y">在不相等運算子右方的 <see cref="T:System.Transactions.Transaction" /> 執行個體。</param>
      <returns>如果 <paramref name="x" /> 和 <paramref name="y" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>提升和登記支援兩階段交易認可 (Two-Phase Commit) 的長期資源管理員以參與異動。</summary>
      <param name="resourceManagerIdentifier">資源管理員的唯一識別項，其應該在整個資源管理員失敗或重新開機期間持續。</param>
      <param name="promotableNotification">物件，該物件用來當做資源管理員內部之非分散式異動的認可委派。</param>
      <param name="enlistmentNotification">實作 <see cref="T:System.Transactions.IEnlistmentNotification" /> 介面以接收兩階段交易認可告知的物件。</param>
      <param name="enlistmentOptions">如果資源管理員想要在準備階段執行額外的工作，即為 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />。</param>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback">
      <summary>復原 (中止) 交易。</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback(System.Exception)">
      <summary>復原 (中止) 交易。</summary>
      <param name="e">說明發生復原的原因。</param>
    </member>
    <member name="M:System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>設定非 MSDTC Promoter 所產生的分散式異動識別碼。</summary>
      <param name="promotableNotification">參與者所實作的 <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> 介面。</param>
      <param name="distributedTransactionIdentifier">分散式異動管理員所使用之異動的識別項。</param>
    </member>
    <member name="M:System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>取得 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，其中含有序列化這個交易所需的資料。</summary>
      <param name="serializationInfo">要以資料填入的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
    </member>
    <member name="P:System.Transactions.Transaction.Current">
      <summary>取得或設定環境交易。</summary>
      <returns>
        <see cref="T:System.Transactions.Transaction" />，說明目前交易。</returns>
    </member>
    <member name="P:System.Transactions.Transaction.IsolationLevel">
      <summary>取得交易的隔離等級 (Isolation Level)。</summary>
      <returns>其中一個 <see cref="T:System.Transactions.IsolationLevel" /> 值，指出交易的隔離等級。</returns>
    </member>
    <member name="P:System.Transactions.Transaction.PromoterType">
      <summary>可唯一識別 <c>byte[]</c> 的格式，其由 Promote 方法在交易升級時傳回。</summary>
      <returns>Guid，可唯一識別升級方法在交易升級時傳回的 <c>byte []</c> 格式。</returns>
    </member>
    <member name="P:System.Transactions.Transaction.TransactionInformation">
      <summary>擷取交易的其他資訊。</summary>
      <returns>包含交易之其他資訊的 <see cref="T:System.Transactions.TransactionInformation" />。</returns>
    </member>
    <member name="T:System.Transactions.TransactionAbortedException">
      <summary>嘗試在已經復原的交易上執行作業時，或是嘗試認可交易而交易中止時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor">
      <summary>初始化 <see cref="T:System.Transactions.TransactionAbortedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化和資料流內容資訊，初始化 <see cref="T:System.Transactions.TransactionAbortedException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，描述已失敗的序列化作業。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，描述已失敗的序列化內容。</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String)">
      <summary>使用指定的訊息初始化 <see cref="T:System.Transactions.TransactionAbortedException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see cref="T:System.String" />，其中包含說明例外狀況發生原因的訊息。</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的訊息和內部例外狀況初始化 <see cref="T:System.Transactions.TransactionAbortedException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see cref="T:System.String" />，其中包含說明例外狀況發生原因的訊息。</param>
      <param name="innerException">取得造成目前例外狀況的例外狀況執行個體。 如需詳細資訊，請參閱 <see cref="P:System.Exception.InnerException" /> 屬性 (Property)。</param>
    </member>
    <member name="T:System.Transactions.TransactionCompletedEventHandler">
      <summary>表示處理 <see cref="E:System.Transactions.Transaction.TransactionCompleted" /> 類別之 <see cref="T:System.Transactions.Transaction" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.Transactions.TransactionEventArgs" />。</param>
    </member>
    <member name="T:System.Transactions.TransactionEventArgs">
      <summary>提供下列交易事件的資料：<see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" />、<see cref="E:System.Transactions.Transaction.TransactionCompleted" />。</summary>
    </member>
    <member name="M:System.Transactions.TransactionEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.Transactions.TransactionEventArgs" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Transactions.TransactionEventArgs.Transaction">
      <summary>取得為其提供事件狀態的交易。</summary>
      <returns>要提供其事件狀態的 <see cref="T:System.Transactions.Transaction" />。</returns>
    </member>
    <member name="T:System.Transactions.TransactionException">
      <summary>當您嘗試在無法接受新工作的交易上執行工作時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor">
      <summary>初始化 <see cref="T:System.Transactions.TransactionException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化和資料流內容資訊，初始化 <see cref="T:System.Transactions.TransactionException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，描述已失敗的序列化作業。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，描述已失敗的序列化內容。</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String)">
      <summary>使用指定的訊息初始化 <see cref="T:System.Transactions.TransactionException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see cref="T:System.String" />，其中包含說明例外狀況發生原因的訊息。</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String,System.Exception)">
      <summary>使用指定的訊息和內部例外狀況初始化 <see cref="T:System.Transactions.TransactionException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see cref="T:System.String" />，其中包含說明例外狀況發生原因的訊息。</param>
      <param name="innerException">取得造成目前例外狀況的例外狀況執行個體。 如需詳細資訊，請參閱 <see cref="P:System.Exception.InnerException" /> 屬性 (Property)。</param>
    </member>
    <member name="T:System.Transactions.TransactionInDoubtException">
      <summary>嘗試在不確定的交易上執行作業時，或是嘗試認可交易而交易成為 InDoubt 時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor">
      <summary>初始化 <see cref="T:System.Transactions.TransactionInDoubtException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化和資料流內容資訊，初始化 <see cref="T:System.Transactions.TransactionInDoubtException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，描述已失敗的序列化作業。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，描述已失敗的序列化內容。</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String)">
      <summary>使用指定的訊息初始化 <see cref="T:System.Transactions.TransactionInDoubtException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see cref="T:System.String" />，其中包含說明例外狀況發生原因的訊息。</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String,System.Exception)">
      <summary>使用指定的訊息和內部例外狀況初始化 <see cref="T:System.Transactions.TransactionInDoubtException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see cref="T:System.String" />，其中包含說明例外狀況發生原因的訊息。</param>
      <param name="innerException">取得造成目前例外狀況的例外狀況執行個體。 如需詳細資訊，請參閱 <see cref="P:System.Exception.InnerException" /> 屬性 (Property)。</param>
    </member>
    <member name="T:System.Transactions.TransactionInformation">
      <summary>提供有關交易的其他資訊。</summary>
    </member>
    <member name="P:System.Transactions.TransactionInformation.CreationTime">
      <summary>取得交易的建立時間。</summary>
      <returns>
        <see cref="T:System.DateTime" />，包含交易的建立時間。</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.DistributedIdentifier">
      <summary>取得擴大之交易的唯一識別項。</summary>
      <returns>
        <see cref="T:System.Guid" />，包含擴大之交易的唯一識別項。</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.LocalIdentifier">
      <summary>取得交易的唯一識別項。</summary>
      <returns>交易的唯一識別項。</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.Status">
      <summary>取得交易的狀態。</summary>
      <returns>
        <see cref="T:System.Transactions.TransactionStatus" />，包含交易的狀態。</returns>
    </member>
    <member name="T:System.Transactions.TransactionInterop">
      <summary>加強 <see cref="N:System.Transactions" /> 與元件之間的互動，這些元件是在先前所寫入，以便與 MSDTC、COM+ 或 <see cref="N:System.EnterpriseServices" /> 互動。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.Transactions.TransactionInterop.PromoterTypeDtc">
      <summary>分散式交易處理器的類型。</summary>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)">
      <summary>取得表示 <see cref="T:System.Transactions.Transaction" /> 的 <see cref="T:System.Transactions.IDtcTransaction" /> 執行個體。</summary>
      <param name="transaction">要封送處理的 <see cref="T:System.Transactions.Transaction" /> 執行個體。</param>
      <returns>表示 <see cref="T:System.Transactions.IDtcTransaction" /> 的 <see cref="T:System.Transactions.Transaction" /> 執行個體。  <see cref="T:System.Transactions.IDtcTransaction" /> 執行個體相容於 MSDTC 所使用之 Unmanaged 形式的 ITransaction，以及 <see cref="N:System.EnterpriseServices" /> 使用之 Managed 形式的 <see cref="T:System.EnterpriseServices.ITransaction" />。</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])">
      <summary>將異動物件轉換成匯出異動 Cookie。</summary>
      <param name="transaction">要封送處理的 <see cref="T:System.Transactions.Transaction" /> 物件。</param>
      <param name="whereabouts">描述目的地交易管理員位置的位址， 其可允許兩個交易管理員彼此通訊，藉此將交易從一個系統傳播至另一個系統。</param>
      <returns>表示指定之 <see cref="T:System.Transactions.Transaction" /> 物件的匯出異動 Cookie。</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)">
      <summary>從指定的 <see cref="T:System.Transactions.IDtcTransaction" /> 產生 <see cref="T:System.Transactions.Transaction" />。</summary>
      <param name="transactionNative">要封送處理的 <see cref="T:System.Transactions.IDtcTransaction" /> 物件。</param>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> 執行個體，表示指定的 <see cref="T:System.Transactions.IDtcTransaction" />。</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])">
      <summary>從指定的匯出 Cookie 產生 <see cref="T:System.Transactions.Transaction" />。</summary>
      <param name="cookie">異動物件的封送處理形式。</param>
      <returns>來自指定匯出 Cookie 的 <see cref="T:System.Transactions.Transaction" />。</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])">
      <summary>從指定的傳送者傳播權杖產生 <see cref="T:System.Transactions.Transaction" /> 執行個體。</summary>
      <param name="propagationToken">表示異動的傳播權杖。</param>
      <exception cref="T:System.Transactions.TransactionManagerCommunicationException">由於無法聯絡交易管理員，交易的還原序列化 (Deserialization) 失敗。 這可能由網路防火牆 (Firewall) 或安全性設定導致。</exception>
      <returns>來自指定傳送者傳播權杖的 <see cref="T:System.Transactions.Transaction" />。</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)">
      <summary>針對指定的 <see cref="T:System.Transactions.Transaction" /> 產生傳送者傳播權杖。</summary>
      <param name="transaction">要封送處理至傳播權杖中的異動。</param>
      <returns>這個方法會與 <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" /> 方法一起提供「傳送者/接收者」傳播的功能，當呼叫後者來解除封送處理交易時，會從遠端機器「提取」交易。  
  
如需不同傳播模型的詳細資訊，請參閱 <see cref="T:System.Transactions.TransactionInterop" /> 類別。</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetWhereabouts">
      <summary>取得 <see cref="N:System.Transactions" /> 使用之分散式交易管理員的所在資訊。</summary>
      <returns>
        <see cref="N:System.Transactions" /> 使用之分散式交易管理員的所在資訊。</returns>
    </member>
    <member name="T:System.Transactions.TransactionManager">
      <summary>包含用於交易管理的方法。 此類別無法獲得繼承。</summary>
    </member>
    <member name="E:System.Transactions.TransactionManager.DistributedTransactionStarted">
      <summary>指出分散式交易已開始。</summary>
    </member>
    <member name="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)">
      <summary>告知交易管理員從失敗中復原之資源管理員已在所有無法解析的交易中完成重新登記。</summary>
      <param name="resourceManagerIdentifier">
        <see cref="T:System.Guid" />，可唯一識別要復原的資源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceManagerIdentifier" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)">
      <summary>重新登記交易中的長期參與者。</summary>
      <param name="resourceManagerIdentifier">
        <see cref="T:System.Guid" />，可唯一識別資源管理員。</param>
      <param name="recoveryInformation">包含復原資訊的其他資訊。</param>
      <param name="enlistmentNotification">實作 <see cref="T:System.Transactions.IEnlistmentNotification" /> 以接收告知的資源物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="recoveryInformation" /> 無效。  
  
-或- 
<paramref name="recoveryInformation" /> 中的交易管理員資訊不符合所設定的交易管理員。  
  
-或- 
 <see cref="N:System.Transactions" /> 無法辨識 <paramref name="RecoveryInformation" />。</exception>
      <exception cref="T:System.InvalidOperationException">已經為每個指定的 <paramref name="resourceManagerIdentifier" /> 呼叫 <see cref="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)" />。 重新登記遭拒。</exception>
      <exception cref="T:System.Transactions.TransactionException">
        <paramref name="resourceManagerIdentifier" /> 不符合 <paramref name="recoveryInformation" /> 中指定之復原資訊的內容。</exception>
      <returns>描述登記 (Enlistment) 的 <see cref="T:System.Transactions.Enlistment" />。</returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.DefaultTimeout">
      <summary>取得新交易的預設逾時間隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 值，其會指定新交易的逾時間隔。</returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.HostCurrentCallback">
      <summary>取得或設定自訂交易 Factory。</summary>
      <returns>
        <see cref="T:System.Transactions.HostCurrentTransactionCallback" />，包含自訂交易 Factory。</returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.MaximumTimeout">
      <summary>取得新交易的預設最大逾時間隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 值，其會指定建立新交易時所允許的最大逾時間隔。</returns>
    </member>
    <member name="T:System.Transactions.TransactionManagerCommunicationException">
      <summary>當資源管理員無法與交易管理員通訊時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor">
      <summary>初始化 <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化和資料流內容資訊，初始化 <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，描述已失敗的序列化作業。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，描述已失敗的序列化內容。</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String)">
      <summary>使用指定的訊息初始化 <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see cref="T:System.String" />，其中包含說明例外狀況發生原因的訊息。</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的訊息和內部例外狀況初始化 <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see cref="T:System.String" />，其中包含說明例外狀況發生原因的訊息。</param>
      <param name="innerException">取得造成目前例外狀況的例外狀況執行個體。 如需詳細資訊，請參閱 <see cref="P:System.Exception.InnerException" /> 屬性 (Property)。</param>
    </member>
    <member name="T:System.Transactions.TransactionOptions">
      <summary>包含指定交易行為的其他資訊。</summary>
    </member>
    <member name="M:System.Transactions.TransactionOptions.Equals(System.Object)">
      <summary>判斷這個 <see cref="T:System.Transactions.TransactionOptions" /> 執行個體和指定的物件是否相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 和這個 <see cref="T:System.Transactions.TransactionOptions" /> 執行個體相同則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Equality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>測試兩個指定的 <see cref="T:System.Transactions.TransactionOptions" /> 執行個體是否相等。</summary>
      <param name="x">在相等運算子左邊的 <see cref="T:System.Transactions.TransactionOptions" /> 執行個體。</param>
      <param name="y">在相等運算子右方的 <see cref="T:System.Transactions.TransactionOptions" /> 執行個體。</param>
      <returns>如果 <paramref name="x" /> 和 <paramref name="y" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Inequality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>傳回值，這個值表示兩個 <see cref="T:System.Transactions.TransactionOptions" /> 執行個體是否不相等。</summary>
      <param name="x">在相等運算子左邊的 <see cref="T:System.Transactions.TransactionOptions" /> 執行個體。</param>
      <param name="y">在相等運算子右方的 <see cref="T:System.Transactions.TransactionOptions" /> 執行個體。</param>
      <returns>如果 <paramref name="x" /> 和 <paramref name="y" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.IsolationLevel">
      <summary>取得或設定交易的隔離等級 (Isolation Level)。</summary>
      <returns>
        <see cref="T:System.Transactions.IsolationLevel" /> 列舉，會指定交易的隔離等級。</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.Timeout">
      <summary>取得或設定交易的逾時期限。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 值，會指定交易的逾時期限。</returns>
    </member>
    <member name="T:System.Transactions.TransactionPromotionException">
      <summary>提升失敗時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor">
      <summary>初始化 <see cref="T:System.Transactions.TransactionPromotionException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化和資料流內容資訊，初始化 <see cref="T:System.Transactions.TransactionPromotionException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，描述已失敗的序列化作業。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，描述已失敗的序列化內容。</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String)">
      <summary>使用指定的訊息初始化 <see cref="T:System.Transactions.TransactionPromotionException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see cref="T:System.String" />，其中包含說明例外狀況發生原因的訊息。</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String,System.Exception)">
      <summary>使用指定的訊息和內部例外狀況初始化 <see cref="T:System.Transactions.TransactionPromotionException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see cref="T:System.String" />，其中包含說明例外狀況發生原因的訊息。</param>
      <param name="innerException">取得造成目前例外狀況的例外狀況執行個體。 如需詳細資訊，請參閱 <see cref="P:System.Exception.InnerException" /> 屬性 (Property)。</param>
    </member>
    <member name="T:System.Transactions.TransactionScope">
      <summary>使程式碼區塊成為異動式。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor">
      <summary>初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)">
      <summary>初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體，並將指定的異動設定為環境異動，以便在範圍內執行的異動式工作使用這個異動。</summary>
      <param name="transactionToUse">要設定為環境異動的異動，以便在範圍內執行的異動式工作使用這個異動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)">
      <summary>使用指定的逾時值，初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體，並將指定的異動設定為環境異動，以便在範圍內執行的異動式工作使用這個異動。</summary>
      <param name="transactionToUse">要設定為環境異動的異動，以便在範圍內執行的異動式工作使用這個異動。</param>
      <param name="scopeTimeout">在 <see cref="T:System.TimeSpan" /> 之後，異動範圍將逾時而中止異動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>使用指定的逾時值和 COM+ 互通性需求，初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體，並將指定的異動設定為環境異動，以便在範圍內執行的異動式工作使用這個異動。</summary>
      <param name="transactionToUse">要設定為環境異動的異動，以便在範圍內執行的異動式工作使用這個異動。</param>
      <param name="scopeTimeout">在 <see cref="T:System.TimeSpan" /> 之後，異動範圍將逾時而中止異動。</param>
      <param name="interopOption">
        <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> 列舉的執行個體，會描述關聯的異動如何與 COM+ 異動互動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[在 .NET Framework 4.5.1 及更新版本中支援] 
使用指定的逾時值，初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體，並將指定的異動設定為環境異動，以便在範圍內執行的異動式工作使用這個異動。</summary>
      <param name="transactionToUse">要設定為環境異動的異動，以便在範圍內執行的異動式工作使用這個異動。</param>
      <param name="scopeTimeout">在 <see cref="T:System.TimeSpan" /> 之後，異動範圍將逾時而中止異動。</param>
      <param name="asyncFlowOption">
        <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列舉執行個體，這個執行個體描述異動範圍相關聯的環境異動是否會在使用 Task 或 async/await .NET 非同步程式設計模式時，跨執行緒接續流動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[在 .NET Framework 4.5.1 及更新版本中支援] 
初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體，並將指定的異動設定為環境異動，以便在範圍內執行的異動式工作使用這個異動。</summary>
      <param name="transactionToUse">要設定為環境異動的異動，以便在範圍內執行的異動式工作使用這個異動。</param>
      <param name="asyncFlowOption">
        <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列舉執行個體，這個執行個體描述異動範圍相關聯的環境異動是否會在使用 Task 或 async/await .NET 非同步程式設計模式時，跨執行緒接續流動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>使用指定的非同步流程選項，初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體。</summary>
      <param name="asyncFlowOption">
        <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列舉執行個體，這個執行個體描述異動範圍相關聯的環境異動是否會在使用 Task 或 async/await .NET 非同步程式設計模式時，跨執行緒接續流動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
      <summary>使用指定的需求，初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體。</summary>
      <param name="scopeOption">
        <see cref="T:System.Transactions.TransactionScopeOption" /> 列舉的執行個體，會描述與此異動範圍有關聯的異動需求。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)">
      <summary>使用指定的逾時值和需求，初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體。</summary>
      <param name="scopeOption">
        <see cref="T:System.Transactions.TransactionScopeOption" /> 列舉的執行個體，會描述與此異動範圍有關聯的異動需求。</param>
      <param name="scopeTimeout">在 <see cref="T:System.TimeSpan" /> 之後，異動範圍將逾時而中止異動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>使用指定的逾時值、需求和非同步流程選項，初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體。</summary>
      <param name="scopeOption">
        <see cref="T:System.Transactions.TransactionScopeOption" /> 列舉的執行個體，會描述與此異動範圍有關聯的異動需求。</param>
      <param name="scopeTimeout">在 <see cref="T:System.TimeSpan" /> 之後，異動範圍將逾時而中止異動。</param>
      <param name="asyncFlowOption">
        <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列舉執行個體，這個執行個體描述異動範圍相關聯的環境異動是否會在使用 Task 或 async/await .NET 非同步程式設計模式時，跨執行緒接續流動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
      <summary>使用指定的需求，初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體。</summary>
      <param name="scopeOption">
        <see cref="T:System.Transactions.TransactionScopeOption" /> 列舉的執行個體，會描述與此異動範圍有關聯的異動需求。</param>
      <param name="transactionOptions">
        <see cref="T:System.Transactions.TransactionOptions" /> 結構，描述建立新異動時要使用的異動選項。 如果使用現有的異動，則這個參數中的逾時值會套用至異動範圍。 如果該時間在處置範圍之前過期，則會中止異動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>使用指定的範圍和 COM+ 互通性需求，以及異動選項，初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體。</summary>
      <param name="scopeOption">
        <see cref="T:System.Transactions.TransactionScopeOption" /> 列舉的執行個體，會描述與此異動範圍有關聯的異動需求。</param>
      <param name="transactionOptions">
        <see cref="T:System.Transactions.TransactionOptions" /> 結構，描述建立新異動時要使用的異動選項。 如果使用現有的異動，則這個參數中的逾時值會套用至異動範圍。 如果該時間在處置範圍之前過期，則會中止異動。</param>
      <param name="interopOption">
        <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> 列舉的執行個體，會描述關聯的異動如何與 COM+ 異動互動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[在 .NET Framework 4.5.1 及更新版本中支援] 
使用指定的需求和非同步流程選項，初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體。</summary>
      <param name="scopeOption">
        <see cref="T:System.Transactions.TransactionScopeOption" /> 列舉的執行個體，會描述與此異動範圍有關聯的異動需求。</param>
      <param name="transactionOptions">
        <see cref="T:System.Transactions.TransactionOptions" /> 結構，描述建立新異動時要使用的異動選項。 如果使用現有的異動，則這個參數中的逾時值會套用至異動範圍。 如果該時間在處置範圍之前過期，則會中止異動。</param>
      <param name="asyncFlowOption">
        <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列舉執行個體，這個執行個體描述異動範圍相關聯的環境異動是否會在使用 Task 或 async/await .NET 非同步程式設計模式時，跨執行緒接續流動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>使用指定的需求和非同步流程選項，初始化 <see cref="T:System.Transactions.TransactionScope" /> 類別的新執行個體。</summary>
      <param name="scopeOption">
        <see cref="T:System.Transactions.TransactionScopeOption" /> 列舉的執行個體，會描述與此異動範圍有關聯的異動需求。</param>
      <param name="asyncFlowOption">
        <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 列舉執行個體，這個執行個體描述異動範圍相關聯的環境異動是否會在使用 Task 或 async/await .NET 非同步程式設計模式時，跨執行緒接續流動。</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.Complete">
      <summary>表示範圍內的所有作業都已成功完成。</summary>
      <exception cref="T:System.InvalidOperationException">已經呼叫這個方法一次。</exception>
    </member>
    <member name="M:System.Transactions.TransactionScope.Dispose">
      <summary>結束交易範圍。</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeAsyncFlowOption">
      <summary>指定 <see cref="T:System.Transactions.TransactionScope" /> 是否啟用跨執行緒接續的異動流程。</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled">
      <summary>指定是否啟用跨執行緒接續的異動流程。</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Suppress">
      <summary>指定是否隱藏跨執行緒接續的異動流程。 若 <see cref="Overload:System.Transactions.TransactionScope.#ctor" /> 建構函式中未指定任何 <see langword="TransactionScopeAsyncFlowOption" />，則這是預設設定。</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeOption">
      <summary>提供建立交易範圍的其他選項。</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Required">
      <summary>交易為範圍所需。 如果已經存在環境交易，則會使用環境交易， 否則會在進入範圍前建立新的交易。 這是預設值。</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.RequiresNew">
      <summary>一定會建立該範圍的新交易。</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Suppress">
      <summary>當建立範圍時，會隱藏環境交易內容， 範圍內的所有作業都是在不使用環境交易內容的情況下完成。</summary>
    </member>
    <member name="T:System.Transactions.TransactionStartedEventHandler">
      <summary>表示處理 <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" /> 類別的 <see cref="T:System.Transactions.TransactionManager" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.Transactions.TransactionEventArgs" />，包含可從中擷取交易資訊的交易。</param>
    </member>
    <member name="T:System.Transactions.TransactionStatus">
      <summary>描述分散式交易的目前狀態。</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Aborted">
      <summary>已經復原交易。</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Active">
      <summary>交易的狀態不明，因為仍必須輪詢某些參與者。</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Committed">
      <summary>已經認可交易。</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.InDoubt">
      <summary>交易的狀態不明。</summary>
    </member>
  </members>
</doc>
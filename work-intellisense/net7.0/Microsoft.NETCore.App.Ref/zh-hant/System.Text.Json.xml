<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary>定義 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構如何處理註解。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary>允許在 JSON 輸入內使用註解，並將其視為有效的權杖。 讀取時，呼叫端可以存取註解值。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary>不允許在 JSON 輸入內使用註解。 找到的註解會視為無效 JSON，並擲回 <see cref="T:System.Text.Json.JsonException" />。 這是預設值。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary>允許在 JSON 輸入內使用註解，並予以忽略。 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的行為就如同未呈現任何註解。</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary>提供機制用於檢查 JSON 值的結構化內容，而不需自動具現化資料值。</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary>釋放這個 <see cref="T:System.Text.Json.JsonDocument" /> 執行個體所使用的資源。</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>將序列剖析為 UTF-8 編碼的文字，將單一 JSON 位元組值表示為 JsonDocument。</summary>
      <param name="utf8Json">要剖析的 JSON 文字。</param>
      <param name="options">在剖析期間控制讀取器行為的選項。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含不支援的選項。</exception>
      <returns>JSON 值的 JsonDocument 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary>將 <see cref="T:System.IO.Stream" /> 剖析為 UTF-8 編碼的資料，將單一 JSON 值表示為 JsonDocument。 資料流讀取完成。</summary>
      <param name="utf8Json">要剖析的 JSON 資料。</param>
      <param name="options">在剖析期間控制讀取器行為的選項。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含不支援的選項。</exception>
      <returns>JSON 值的 JsonDocument 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>將記憶體剖析為 UTF-8 編碼的文字，將單一 JSON 位元組值表示為 JsonDocument。</summary>
      <param name="utf8Json">要剖析的 JSON 文字。</param>
      <param name="options">在剖析期間控制讀取器行為的選項。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含不支援的選項。</exception>
      <returns>JSON 值的 JsonDocument 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary>將表示單一 JSON 字元值的文字剖析為 JsonDocument。</summary>
      <param name="json">要剖析的 JSON 文字。</param>
      <param name="options">在剖析期間控制讀取器行為的選項。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含不支援的選項。</exception>
      <returns>JSON 值的 JsonDocument 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary>將表示單一 JSON 字串值的文字剖析為 JsonDocument。</summary>
      <param name="json">要剖析的 JSON 文字。</param>
      <param name="options">在剖析期間控制讀取器行為的選項。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含不支援的選項。</exception>
      <returns>JSON 值的 JsonDocument 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary>將 <see cref="T:System.IO.Stream" /> 剖析為 UTF-8 編碼的資料，將單一 JSON 值表示為 JsonDocument。 資料流讀取完成。</summary>
      <param name="utf8Json">要剖析的 JSON 資料。</param>
      <param name="options">在剖析期間控制讀取器行為的選項。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含不支援的選項。</exception>
      <returns>產生 JSON 值之 JsonDocument 表示法的工作。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary>從提供的讀取器剖析一個 JSON 值 (包括物件或陣列)。</summary>
      <param name="reader">要讀取的讀取器。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> 包含不支援的選項。

-或-

目前的 <paramref name="reader" /> 權杖不會啟動或表示值。</exception>
      <exception cref="T:System.Text.Json.JsonException">無法從讀取器讀取某個值。</exception>
      <returns>JsonDocument，表示從讀取器讀取的值 (和巢狀值)。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary>會嘗試從提供的讀取器剖析一個 JSON 值 (包括物件或陣列)。</summary>
      <param name="reader">要讀取的讀取器。</param>
      <param name="document">當這個方法傳回時，會包含剖析的文件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> 包含不支援的選項。

-或-

目前的 <paramref name="reader" /> 權杖不會啟動或表示值。</exception>
      <exception cref="T:System.Text.Json.JsonException">無法從讀取器讀取某個值。</exception>
      <returns>如果已讀取值並已將其剖析為 JsonDocument，則為 <see langword="true" />；如果讀取器在剖析時用盡資料，則為 <see langword="false" />。 所有其他情況都會導致擲回例外狀況。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>將元素以 JSON 值形式寫入提供的寫入器。</summary>
      <param name="writer">要將文件寫入其中的寫入器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="P:System.Text.Json.JsonDocument.RootElement" /> 的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 會導致 JSON 無效。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary>取得此 JSON 文件的根項目。</summary>
      <returns>， <see cref="T:System.Text.Json.JsonElement" /> 表示檔的值。</returns>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary>提供使用者在剖析 JSON 以建立 <see cref="T:System.Text.Json.JsonDocument" /> 時，定義自訂行為的功能。</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary>取得或設定值，指出在所要讀取的 JSON 承載內，是否允許 (並忽略) 物件或陣列中的 JSON 值清單結尾有額外逗號。</summary>
      <returns>
        <see langword="true" /> 如果允許在物件或陣列中的 JSON 值清單結尾有額外的逗號，則為，否則為 <see langword="false" /> 。 預設為 <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary>取得或設定值，判斷 <see cref="T:System.Text.Json.JsonDocument" /> 如何在讀取 JSON 資料時處理註解。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">註解處理列舉設定為不支援的值 (或不在 <see cref="T:System.Text.Json.JsonCommentHandling" /> 列舉範圍內)。</exception>
      <returns>其中一個列舉值，表示如何處理批註。</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary>取得或設定剖析 JSON 資料時允許的最大深度，預設值 (亦即 0) 表示最大深度為 64。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">最大深度設定為負值。</exception>
      <returns>剖析 JSON 資料時允許的最大深度。</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary>表示 <see cref="T:System.Text.Json.JsonDocument" /> 內的特定 JSON 值。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary>取得可安全儲存超過原始 <see cref="T:System.Text.Json.JsonDocument" /> 存留期的 JsonElement。</summary>
      <returns>可安全儲存超過原始 <see cref="T:System.Text.Json.JsonDocument" /> 存留期的 JsonElement。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary>取得列舉值，列舉此 JsonElement 所表示 JSON 陣列中的值。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Array" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>列舉值，列舉此 JsonElement 所表示 JSON 陣列中的值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary>取得列舉值，列舉此 JsonElement 所表示 JSON 物件中的屬性。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>列舉值，列舉此 JsonElement 所表示 JSON 物件中的屬性。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary>取得目前陣列值內所包含的值數目。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Array" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>目前陣列值內所包含的值數目。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary>取得 <see cref="T:System.Boolean" /> 形式的項目值。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 既不是 <see cref="F:System.Text.Json.JsonValueKind.True" /> 也不是 <see cref="F:System.Text.Json.JsonValueKind.False" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Boolean" /> 形式的項目值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary>取得 <see cref="T:System.Byte" /> 形式的目前 JSON 數字。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Byte" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Byte" /> 形式的目前 JSON 數字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary>取得元素的值作為位元組陣列。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException">該值未編碼為 Base64 文字，因此無法解碼為位元組。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>已解碼為位元組陣列的值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary>取得 <see cref="T:System.DateTime" /> 形式的項目值。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException">這個值不能讀取為 <see cref="T:System.DateTime" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.DateTime" /> 形式的項目值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary>取得 <see cref="T:System.DateTimeOffset" /> 形式的項目值。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException">這個值不能讀取為 <see cref="T:System.DateTimeOffset" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 形式的項目值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary>取得 <see cref="T:System.Decimal" /> 形式的目前 JSON 數字。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Decimal" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Decimal" /> 形式的目前 JSON 數字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary>取得 <see cref="T:System.Double" /> 形式的目前 JSON 數字。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Double" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Double" /> 形式的目前 JSON 數字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary>取得 <see cref="T:System.Guid" /> 形式的項目值。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Guid" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Guid" /> 形式的項目值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary>取得 <see cref="T:System.Int16" /> 形式的目前 JSON 數字。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Int16" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Int16" /> 形式的目前 JSON 數字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary>取得 <see cref="T:System.Int32" /> 形式的目前 JSON 數字。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Int32" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Int32" /> 形式的目前 JSON 數字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary>取得 <see cref="T:System.Int64" /> 形式的目前 JSON 數字。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Int64" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Int64" /> 形式的目前 JSON 數字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary>取得 <see cref="T:System.Text.Json.JsonElement" />，表示 <paramref name="utf8PropertyName" /> 所識別的必要屬性值。</summary>
      <param name="utf8PropertyName">要傳回的屬性名稱 UTF-8 表示 (沒有位元組順序標記 (BOM))。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">找不到具有所要求名稱的屬性。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" />，表示必要屬性值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary>取得 <see cref="T:System.Text.Json.JsonElement" />，表示 <paramref name="propertyName" /> 所識別的必要屬性值。</summary>
      <param name="propertyName">要傳回其值的屬性名稱。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">找不到具有所要求名稱的屬性。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" />，表示必要屬性值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary>取得 <see cref="T:System.Text.Json.JsonElement" />，表示 <paramref name="propertyName" /> 所識別的必要屬性值。</summary>
      <param name="propertyName">要傳回其值的屬性名稱。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">找不到具有所要求名稱的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" />，表示必要屬性值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary>取得字串，表示支援此值的原始輸入資料。</summary>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>支援此值的原始輸入資料。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary>取得 <see cref="T:System.SByte" /> 形式的目前 JSON 數字。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.SByte" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.SByte" /> 形式的目前 JSON 數字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary>取得 <see cref="T:System.Single" /> 形式的目前 JSON 數字。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Single" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.Single" /> 形式的目前 JSON 數字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary>取得 <see cref="T:System.String" /> 形式的項目值。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 既不是 <see cref="F:System.Text.Json.JsonValueKind.String" /> 也不是 <see cref="F:System.Text.Json.JsonValueKind.Null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.String" /> 形式的項目值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary>取得 <see cref="T:System.UInt16" /> 形式的目前 JSON 數字。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.UInt16" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.UInt16" /> 形式的目前 JSON 數字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary>取得 <see cref="T:System.UInt32" /> 形式的目前 JSON 數字。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.UInt32" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.UInt32" /> 形式的目前 JSON 數字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary>取得 <see cref="T:System.UInt64" /> 形式的目前 JSON 數字。</summary>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.UInt64" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>
        <see cref="T:System.UInt64" /> 形式的目前 JSON 數字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary>取得適用於實值型別的目前值字串表示。</summary>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>適用於實值型別的目前值字串表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary>嘗試以 <see cref="T:System.Byte" /> 表示目前的 JSON 數字。</summary>
      <param name="value">當方法傳回時，如果轉換成功，則會包含相當於目前 JSON 數字的位元組。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若數字可以表示為 <see cref="T:System.Byte" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>假設 JSON 字串已經過 Base 64 編碼，並嘗試以位元組陣列加以表示。</summary>
      <param name="value">若方法成功，則包含解碼後的 Base64 文字二進位表示。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若整個權杖值已編碼為有效的 Base64 文字，並可以成功解碼為位元組，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary>嘗試以 <see cref="T:System.DateTime" /> 表示目前的 JSON 字串。</summary>
      <param name="value">當這個方法傳回時，會包含與目前 JSON 字串相等的日期和時間值。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若字串可以表示為 <see cref="T:System.DateTime" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>嘗試以 <see cref="T:System.DateTimeOffset" /> 表示目前的 JSON 字串。</summary>
      <param name="value">當這個方法傳回時，會包含與目前 JSON 字串相等的日期和時間。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若字串可以表示為 <see cref="T:System.DateTimeOffset" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary>嘗試以 <see cref="T:System.Decimal" /> 表示目前的 JSON 數字。</summary>
      <param name="value">當這個方法傳回時，會包含與目前 JSON 數字相等的十進位。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若數字可以表示為 <see cref="T:System.Decimal" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary>嘗試以 <see cref="T:System.Double" /> 表示目前的 JSON 數字。</summary>
      <param name="value">當這個方法傳回時，會包含與目前 JSON 數字相等的雙精確度浮點數值。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若數字可以表示為 <see cref="T:System.Double" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary>嘗試以 <see cref="T:System.Guid" /> 表示目前的 JSON 字串。</summary>
      <param name="value">當這個方法傳回時，會包含與目前 JSON 字串相等的 GUID。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若字串可以表示為 <see cref="T:System.Guid" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary>嘗試以 <see cref="T:System.Int16" /> 表示目前的 JSON 數字。</summary>
      <param name="value">當方法傳回時，如果轉換成功，則會包含相當於目前 JSON 數字的 16 位元整數。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若數字可以表示為 <see cref="T:System.Int16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary>嘗試以 <see cref="T:System.Int32" /> 表示目前的 JSON 數字。</summary>
      <param name="value">當這個方法傳回時，會包含與目前 JSON 數字相等的 32 位元整數值。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若數字可以表示為 <see cref="T:System.Int32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary>嘗試以 <see cref="T:System.Int64" /> 表示目前的 JSON 數字。</summary>
      <param name="value">當這個方法傳回時，會包含與目前 JSON 數字相等的 64 位元整數值。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若數字可以表示為 <see cref="T:System.Int64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary>尋找目前物件中名為 <paramref name="utf8PropertyName" /> 的屬性，並傳回指出這類屬性是否存在的值。 當屬性存在時，方法會將其值指派給 <paramref name="value" /> 引數。</summary>
      <param name="utf8PropertyName">要傳回的屬性名稱 UTF-8 表示 (沒有位元組順序標記 (BOM))。</param>
      <param name="value">接收所找到的屬性值。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若找到屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary>尋找目前物件中名為 <paramref name="propertyName" /> 的屬性，並傳回指出這類屬性是否存在的值。 當屬性存在時，方法會將其值指派給 <paramref name="value" /> 引數。</summary>
      <param name="propertyName">要尋找的屬性名稱。</param>
      <param name="value">當這個方法傳回時，會包含指定屬性的值。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若找到屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary>尋找目前物件中名為 <paramref name="propertyName" /> 的屬性，並傳回指出這類屬性是否存在的值。 當屬性存在時，會將其值指派給 <paramref name="value" /> 引數。</summary>
      <param name="propertyName">要尋找的屬性名稱。</param>
      <param name="value">當這個方法傳回時，會包含指定屬性的值。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若找到屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary>嘗試以 <see cref="T:System.SByte" /> 表示目前的 JSON 數字。</summary>
      <param name="value">當方法傳回時，如果轉換成功，則會包含相當於目前 JSON 數字的帶正負號位元組。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若數字可以表示為 <see cref="T:System.SByte" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary>嘗試以 <see cref="T:System.Single" /> 表示目前的 JSON 數字。</summary>
      <param name="value">當這個方法傳回時，會包含與目前 JSON 數字相等的單精確度浮點數值。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若數字可以表示為 <see cref="T:System.Single" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary>嘗試以 <see cref="T:System.UInt16" /> 表示目前的 JSON 數字。</summary>
      <param name="value">當方法傳回時，如果轉換成功，則會包含相當於目前 JSON 數字的不帶正負號 16 位元整數。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若數字可以表示為 <see cref="T:System.UInt16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary>嘗試以 <see cref="T:System.UInt32" /> 表示目前的 JSON 數字。</summary>
      <param name="value">當這個方法傳回時，會包含與目前 JSON 數字相等的不帶正負號 32 位元整數值。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若數字可以表示為 <see cref="T:System.UInt32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary>嘗試以 <see cref="T:System.UInt64" /> 表示目前的 JSON 數字。</summary>
      <param name="value">當這個方法傳回時，會包含與目前 JSON 數字相等的不帶正負號 64 位元整數值。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>若數字可以表示為 <see cref="T:System.UInt64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary>比較 UTF8 編碼位元組範圍所呈現的文字與此元素的字串值。</summary>
      <param name="utf8Text">要用來比較的 UTF-8 編碼文字。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <returns>若此元素的字串值和 <paramref name="utf8Text" /> 有相同的 UTF-8 編碼，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary>比較指定的唯讀字元範圍與此元素的字串值。</summary>
      <param name="text">要比較的文字。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <returns>若此元素的字串值符合 <paramref name="text" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary>比較指定字串與此元素的字串值。</summary>
      <param name="text">要比較的文字。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <returns>若此元素的字串值符合 <paramref name="text" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>將項目以 JSON 值格式寫入指定的寫入器。</summary>
      <param name="writer">要接受項目寫入的寫入器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 為 <see cref="F:System.Text.Json.JsonValueKind.Undefined" />。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary>取得目前值為 <see cref="F:System.Text.Json.JsonValueKind.Array" /> 時位於指定索引的值。</summary>
      <param name="index">項目索引。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Array" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 不在 [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()) 範圍內。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>位於指定索引處的值。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary>取得目前 JSON 值的類型。</summary>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
      <returns>目前 JSON 值的型別。</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary>表示 JSON 陣列內容的列舉值。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary>釋放這個 <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" /> 執行個體所使用的資源。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看陣列的列舉程式。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary>將列舉值往前推至下集合中的下一個項目。</summary>
      <returns>如果列舉值成功前移至下一個項目，則為 <see langword="true" />；如果列舉值超過集合的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary>設定列舉值至它的初始位置，這是在集合中第一個項目之前。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的 <see cref="T:System.Text.Json.JsonElement" /> 陣列列舉程式。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary>取得集合中位於列舉值目前位置的元素。</summary>
      <returns>位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary>取得集合中位於列舉值目前位置的元素。</summary>
      <returns>位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary>表示 JSON 物件屬性的列舉值。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary>釋放這個 <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" /> 執行個體所使用的資源。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary>傳回會逐一查看物件屬性的列舉值。</summary>
      <returns>可用來逐一查看物件的列舉值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary>將列舉值往前推至下集合中的下一個項目。</summary>
      <returns>如果列舉值成功前移至下一個項目，則為 <see langword="true" />；如果列舉值超過集合的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary>設定列舉值至它的初始位置，這是在集合中第一個項目之前。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的 <see cref="T:System.Text.Json.JsonProperty" /> 物件列舉程式。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary>取得集合中位於列舉值目前位置的元素。</summary>
      <returns>位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>取得集合中位於列舉值目前位置的元素。</summary>
      <returns>位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary>提供方法，將 UTF-8 或 UTF-16 編碼文字轉換成適用於 JSON 的格式。</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>將 UTF-8 文字值編碼為 JSON 字串。</summary>
      <param name="utf8Value">要轉換為 JSON 編碼文字的 UTF-8 編碼文字。</param>
      <param name="encoder">要在逸出字元串時使用的編碼器；<see langword="null" /> 表示使用預設的編碼器。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="utf8Value" /> 太大。

-或-

<paramref name="utf8Value" /> 包含無效的 UTF-8 位元組。</exception>
      <returns>編碼的 JSON 文字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>將指定的文字值編碼為 JSON 字串。</summary>
      <param name="value">要轉換為 JSON 編碼文字的值。</param>
      <param name="encoder">要在逸出字元串時使用的編碼器；<see langword="null" /> 表示使用預設的編碼器。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 太大。

-或-

<paramref name="value" /> 包含無效的 UTF-16 字元。</exception>
      <returns>編碼的 JSON 文字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>將字串文字值編碼為 JSON 字串。</summary>
      <param name="value">要轉換為 JSON 編碼文字的值。</param>
      <param name="encoder">要在逸出字元串時使用的編碼器；<see langword="null" /> 表示使用預設的編碼器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 太大。

-或-

<paramref name="value" /> 包含無效的 UTF-16 字元。</exception>
      <returns>編碼的 JSON 文字。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary>判斷這個執行個體和指定的物件 (同時還必須是 <see cref="T:System.Text.Json.JsonEncodedText" /> 執行個體) 是否具有相同值。</summary>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <returns>如果目前的執行個體和 <paramref name="obj" /> 相等則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary>判斷這個執行個體和另一個指定的 <see cref="T:System.Text.Json.JsonEncodedText" /> 執行個體是否具有相同值。</summary>
      <param name="other">與這個執行個體相比較的物件。</param>
      <returns>若這個執行個體與 <paramref name="other" /> 具有相同值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary>傳回這個 <see cref="T:System.Text.Json.JsonEncodedText" /> 的雜湊程式碼。</summary>
      <returns>這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary>將這個執行個體的值轉換為 <see cref="T:System.String" />。</summary>
      <returns>基礎 UTF-16 編碼字串。</returns>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary>取得預先編碼 JSON 文字的 UTF-8 編碼表示。</summary>
      <returns>預先編碼 JSON 文字的 UTF-8 編碼標記法。</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary>定義當發現無效的 JSON 文字、超過定義的最大深度，或 JSON 文字與物件上的屬性類型不相容時，所擲回的自訂例外狀況物件。</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary>初始化 <see cref="T:System.Text.Json.JsonException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料建立新的例外狀況物件。</summary>
      <param name="info">擲回例外狀況相關的序列化物件資料。</param>
      <param name="context">物件，包含關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Text.Json.JsonException" /> 類別的新執行個體。</summary>
      <param name="message">特定內容的錯誤訊息。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況參考，以初始化 <see cref="T:System.Text.Json.JsonException" /> 類別的新執行個體。</summary>
      <param name="message">特定內容的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>建立新的例外狀況物件，將錯誤資訊轉送給使用者。</summary>
      <param name="message">特定內容的錯誤訊息。</param>
      <param name="path">發現無效 JSON 所在的路徑。</param>
      <param name="lineNumber">還原序列化時發現無效 JSON 處的行號 (從 0 開始)。</param>
      <param name="bytePositionInLine">發現無效 JSON 所在的目前這一行內位元組計數 (從 0 開始)。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary>建立新的例外狀況物件，將錯誤資訊轉送給使用者，包括指定的內部例外狀況。</summary>
      <param name="message">特定內容的錯誤訊息。</param>
      <param name="path">發現無效 JSON 所在的路徑。</param>
      <param name="lineNumber">還原序列化時發現無效 JSON 處的行號 (從 0 開始)。</param>
      <param name="bytePositionInLine">發現無效 JSON 所在的目前這一行內位元組計數 (從 0 開始)。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用例外狀況的相關資訊來設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">擲回例外狀況相關的序列化物件資料。</param>
      <param name="context">物件，包含關於來源或目的端的內容資訊。</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary>取得例外狀況之前，在目前這一行內讀取的以零起始位元組數。</summary>
      <returns>在例外狀況之前，在目前一行內讀取的位元組數目（以零為基底）。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary>取得例外狀況之前讀取的以零起始行數。</summary>
      <returns>在例外狀況之前讀取之以零為基底的行數。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary>取得描述目前例外狀況的訊息。</summary>
      <returns>描述目前例外狀況的錯誤訊息。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary>取得 JSON 內遇到例外狀況的路徑。</summary>
      <returns>JSON 中遇到例外狀況的路徑。</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary>判斷用來將字串型名稱轉換為另一種格式的命名原則，例如 Camel 命名法大小寫格式。</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary>初始化 <see cref="T:System.Text.Json.JsonNamingPolicy" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary>在衍生類別中覆寫時，根據原則轉換指定的名稱。</summary>
      <param name="name">要轉換的名稱。</param>
      <returns>轉換的名稱。</returns>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary>取得 Camel 命名法大小寫的命名原則。</summary>
      <returns>適用于 camel 大小寫的命名原則。</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary>表示 JSON 物件的單一屬性。</summary>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary>將指定的 UTF-8 編碼文字與此屬性名稱進行比較。</summary>
      <param name="utf8Text">要用來比較的 UTF-8 編碼文字。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="T:System.Type" /> 不是 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />。</exception>
      <returns>如果此屬性名稱具有與 <paramref name="utf8Text" /> 相同的 UTF-8 編碼，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary>將指定的文字作為字元範圍，與此屬性的名稱進行比較。</summary>
      <param name="text">要比較的文字。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="T:System.Type" /> 不是 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />。</exception>
      <returns>如果此屬性的名稱符合 <paramref name="text" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary>將指定的字串與此屬性名稱進行比較。</summary>
      <param name="text">要比較的文字。</param>
      <exception cref="T:System.InvalidOperationException">此值的 <see cref="T:System.Type" /> 不是 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />。</exception>
      <returns>如果此屬性的名稱符合 <paramref name="text" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary>提供屬性的字串表示，以進行偵錯。</summary>
      <returns>字串，其中包含未解譯的屬性值，從宣告 open-quote 開始，在值的最後一個字元結束。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>將屬性以具名 JSON 物件屬性的形式，寫入所提供的寫入器。</summary>
      <param name="writer">要將屬性寫入其中的寫入器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> 大小太大，無法成為 JSON 物件屬性。</exception>
      <exception cref="T:System.InvalidOperationException">這個 JSON 屬性 <see cref="P:System.Text.Json.JsonProperty.Value" /> 的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 會導致 JSON 無效。</exception>
      <exception cref="T:System.ObjectDisposedException">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary>取得這個屬性的名稱。</summary>
      <returns>這個屬性的名稱。</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary>取得此屬性的值。</summary>
      <returns>這個屬性的值。</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary>可讓使用者定義讀取 JSON 時的自訂行為。</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary>取得或設定值，定義在所要讀取的 JSON 承載內，是否允許 (並忽略) 物件或陣列中的 JSON 值清單結尾有額外逗號。</summary>
      <returns>
        <see langword="true" /> 如果允許額外的逗號，則為，否則為 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary>取得或設定值，判斷 <see cref="T:System.Text.Json.Utf8JsonReader" /> 如何在讀取 JSON 資料時處理註解。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">此屬性將設定為非 <see cref="T:System.Text.Json.JsonCommentHandling" /> 列舉成員的值。</exception>
      <returns>其中一個列舉值，表示如何處理批註。</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary>取得或設定讀取 JSON 時允許的最大深度，預設值 (亦即 0) 表示最大深度為 64。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">最大深度將設定為負值。</exception>
      <returns>讀取 JSON 時允許的最大深度。</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary>定義不透明的類型，以保留和儲存必須提供給 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的所有相關狀態資訊，以便在處理未完成資料之後繼續讀取。</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary>建構新的 <see cref="T:System.Text.Json.JsonReaderState" /> 執行個體。</summary>
      <param name="options">定義不同於 JSON RFC 的自訂 <see cref="T:System.Text.Json.Utf8JsonReader" /> 行為 (例如處理註解的方式，或讀取時允許的最大深度)。 根據預設，<see cref="T:System.Text.Json.Utf8JsonReader" /> 會嚴格遵循 JSON RFC (JSON 內的註解無效)，且最多可讀取最大深度 64。</param>
      <exception cref="T:System.ArgumentException">最大深度設定為非正數值 (&lt; 0)。</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary>取得使用 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構讀取 JSON 資料時要使用的自訂行為，該結構可能會偏離嚴格遵守的 JSON 規格，這是預設行為。</summary>
      <returns>要在讀取 JSON 資料時使用的自訂行為。</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary>提供功能將物件或實值型別序列化為 JSON，並將 JSON 還原序列化為物件或實值型別。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>將表示單一 JSON 值的 UTF-8 編碼文字，剖析為指定類型的執行個體。</summary>
      <param name="utf8Json">要剖析的 JSON 文字。</param>
      <param name="returnType">要轉換並傳回的物件類型。</param>
      <param name="options">在剖析期間控制行為的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON 無效。

-或-

<typeparamref name="returnType" /> 與 JSON 不相容。

-或-

超出單一 JSON 值的範圍中有剩餘的資料。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>JSON 值的 <paramref name="returnType" /> 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>將表示單一 JSON 值的文字，剖析為指定類型的執行個體。</summary>
      <param name="json">要剖析的 JSON 文字。</param>
      <param name="returnType">要轉換並傳回的物件類型。</param>
      <param name="options">在剖析期間控制行為的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> 或 <paramref name="returnType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON 無效。
          
-或-

<typeparamref name="TValue" /> 與 JSON 不相容。

-或-

超出單一 JSON 值的字串中有剩餘的資料。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>JSON 值的 <paramref name="returnType" /> 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>從提供的讀取器讀取一個 JSON 值 (包括物件或陣列)，並將其轉換為指定類型的執行個體。</summary>
      <param name="reader">讀取 JSON 的來源讀取器。</param>
      <param name="returnType">要轉換並傳回的物件類型。</param>
      <param name="options">在讀取期間控制序列化程式行為的選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON 無效。
          
-或-

<typeparamref name="returnType" /> 與 JSON 不相容。

-或-

無法從讀取器讀取某個值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> 正在使用不支援的選項。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>JSON 值的 <paramref name="returnType" /> 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary>將表示單一 JSON 值的 UTF-8 編碼文字，剖析成泛型型別參數所指定類型的執行個體。</summary>
      <param name="utf8Json">要剖析的 JSON 文字。</param>
      <param name="options">在剖析期間控制行為的選項。</param>
      <typeparam name="TValue">UTF-8 編碼文字的目標型別。</typeparam>
      <exception cref="T:System.Text.Json.JsonException">JSON 無效。

-或-

<typeparamref name="TValue" /> 與 JSON 不相容。

-或-

超出單一 JSON 值的範圍中有剩餘的資料。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>JSON 值的 <typeparamref name="TValue" /> 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary>將表示單一 JSON 值的文字，剖析成泛型型別參數所指定類型的執行個體。</summary>
      <param name="json">要剖析的 JSON 文字。</param>
      <param name="options">在剖析期間控制行為的選項。</param>
      <typeparam name="TValue">JSON 值的目標型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON 無效。

-或-

<typeparamref name="TValue" /> 與 JSON 不相容。

-或-

超出單一 JSON 值的字串中有剩餘的資料。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>JSON 值的 <typeparamref name="TValue" /> 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary>從提供的讀取器，將一個 JSON 值 (包括物件或陣列) 讀取至泛型型別參數所指定類型的執行個體。</summary>
      <param name="reader">讀取 JSON 的來源讀取器。</param>
      <param name="options">在讀取期間控制序列化程式行為的選項。</param>
      <typeparam name="TValue">JSON 值的目標型別。</typeparam>
      <exception cref="T:System.Text.Json.JsonException">JSON 無效。

-或-

<typeparamref name="TValue" /> 與 JSON 不相容。

-或-

無法從讀取器讀取某個值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> 使用不支援的選項。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>JSON 值的 <typeparamref name="TValue" /> 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>將代表單一 JSON 值的 UTF-8 編碼文字，以非同步方式讀取到指定類型的執行個體中。 資料流將會讀取至完成。</summary>
      <param name="utf8Json">要剖析的 JSON 資料。</param>
      <param name="returnType">要轉換並傳回的物件類型。</param>
      <param name="options">在讀取期間控制行為的選項。</param>
      <param name="cancellationToken">可用來取消讀取作業的取消語彙基元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> 或 <paramref name="returnType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON 無效。

-或-

<typeparamref name="TValue" /> 與 JSON 不相容。

-或-

資料流中有剩餘的資料。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>JSON 值的 <paramref name="returnType" /> 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>將表示單一 JSON 值的 UTF-8 編碼文字，以非同步方式讀取到泛型型別參數所指定類型的執行個體中。 資料流將會讀取至完成。</summary>
      <param name="utf8Json">要剖析的 JSON 資料。</param>
      <param name="options">在讀取期間控制行為的選項。</param>
      <param name="cancellationToken">可用來取消讀取作業的語彙基元。</param>
      <typeparam name="TValue">JSON 值的目標型別。</typeparam>
      <exception cref="T:System.Text.Json.JsonException">JSON 無效。

-或-

<typeparamref name="TValue" /> 與 JSON 不相容。

-或-

資料流中有剩餘的資料。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> 為 <see langword="null" />。</exception>
      <returns>JSON 值的 <typeparamref name="TValue" /> 表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>將指定型別的值轉換為 JSON 字串。</summary>
      <param name="value">要進行轉換的值。</param>
      <param name="inputType">要轉換的 <paramref name="value" /> 類型。</param>
      <param name="options">控制轉換行為的選項。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> 與 <paramref name="value" /> 不相容。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputType" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>值的 JSON 字串表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>將指定型別的 JSON 表示法寫入至提供的寫入器。</summary>
      <param name="writer">要寫入的目標 JSON 寫入器。</param>
      <param name="value">要轉換和寫入的值。</param>
      <param name="inputType">要轉換的 <paramref name="value" /> 類型。</param>
      <param name="options">控制序列化行為的選項。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> 與 <paramref name="value" /> 不相容</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 或 <paramref name="inputType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputType" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>將泛型型別參數所指定型別的值轉換為 JSON 字串。</summary>
      <param name="value">要進行轉換的值。</param>
      <param name="options">控制序列化行為的選項。</param>
      <typeparam name="TValue">要序列化之值的類型。</typeparam>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>值的 JSON 字串表示法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary>將泛型型別參數所指定型別的 JSON 表示法寫入至提供的寫入器。</summary>
      <param name="writer">要寫入的目標 JSON 寫入器。</param>
      <param name="value">要轉換和寫入的值。</param>
      <param name="options">控制序列化行為的選項。</param>
      <typeparam name="TValue">要序列化之值的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>將指定類型的值，以非同步方式轉換成 UTF-8 編碼的 JSON 文字，並將其寫入指定的資料流。</summary>
      <param name="utf8Json">要寫入的 UTF-8 資料流。</param>
      <param name="value">要進行轉換的值。</param>
      <param name="inputType">要轉換的 <paramref name="value" /> 類型。</param>
      <param name="options">控制序列化行為的選項。</param>
      <param name="cancellationToken">可用來取消寫入作業的語彙基元。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> 與 <paramref name="value" /> 不相容。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> 或 <paramref name="inputType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputType" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>將泛型型別參數所指定類型的值，以非同步方式轉換為 UTF-8 編碼的 JSON 文字，並將它寫入資料流。</summary>
      <param name="utf8Json">要寫入的 UTF-8 資料流。</param>
      <param name="value">要進行轉換的值。</param>
      <param name="options">控制序列化行為的選項。</param>
      <param name="cancellationToken">可用來取消寫入作業的語彙基元。</param>
      <typeparam name="TValue">要序列化之值的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>將指定型別的值轉換為 JSON 字串 (以 UTF-8 位元組編碼)。</summary>
      <param name="value">要進行轉換的值。</param>
      <param name="inputType">要轉換的 <paramref name="value" /> 類型。</param>
      <param name="options">控制轉換行為的選項。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> 與 <paramref name="value" /> 不相容。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputType" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>值的 JSON 字串表示法 (以 UTF-8 位元組編碼)。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>將泛型型別參數所指定型別的值轉換為 JSON 字串 (以 UTF-8 位元組編碼)。</summary>
      <param name="value">要進行轉換的值。</param>
      <param name="options">控制轉換行為的選項。</param>
      <typeparam name="TValue">值的型別。</typeparam>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>值的 JSON 字串表示法 (以 UTF-8 位元組編碼)。</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerDefaults">
      <summary>指定 <see cref="T:System.Text.Json.JsonSerializerOptions" /> 所使用的預設選項。</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.General">
      <summary>指定應使用的一般用途值。 如果未指定 <see cref="T:System.Text.Json.JsonSerializerDefaults" />，則會套用這些相同的設定。</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.Web">
      <summary>指定值應該更適合用於 Web 架構的案例。</summary>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary>提供搭配 <see cref="T:System.Text.Json.JsonSerializer" /> 使用的選項。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary>初始化 <see cref="T:System.Text.Json.JsonSerializerOptions" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)">
      <summary>使用由指定 <see cref="T:System.Text.Json.JsonSerializerDefaults" /> 所判斷的預先定義選項組，來建構新的 <see cref="T:System.Text.Json.JsonSerializerOptions" /> 執行個體。</summary>
      <param name="defaults">要找出原因的 <see cref="T:System.Text.Json.JsonSerializerDefaults" />。</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)">
      <summary>將選項從 <see cref="T:System.Text.Json.JsonSerializerOptions" /> 執行個體複製到新的執行個體。</summary>
      <param name="options">要從中複製選項的選項執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary>傳回所指定類型的轉換器。</summary>
      <param name="typeToConvert">要針對其傳回轉換器的類型。</param>
      <exception cref="T:System.InvalidOperationException">為 <paramref name="typeToConvert" /> 設定的 <see cref="System.Text.Json.Serialization.JsonConverter" /> 傳回無效轉換器。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="typeToConvert" /> 或其可序列化成員沒有相容的 <see cref="System.Text.Json.Serialization.JsonConverter" />。</exception>
      <returns>第一個支援給定類型的轉換器，或若沒有任何轉換器，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary>取得或設定值，指出在所要還原序列化的 JSON 承載內，是否允許 (並忽略) 物件或陣列中的 JSON 值清單結尾有額外逗號。</summary>
      <exception cref="T:System.InvalidOperationException">此屬性是在序列化或還原序列化發生後設定的。</exception>
      <returns>
        <see langword="true" /> 如果允許在物件或陣列中的 JSON 值清單結尾有額外的逗號， (並忽略) ; <see langword="false" /> 否則為。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary>取得已註冊的使用者定義轉換器清單。</summary>
      <returns>自訂轉換器的清單。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary>取得或設定建立暫存緩衝區時要使用的預設緩衝區大小 (以位元組為單位)。</summary>
      <exception cref="T:System.ArgumentException">緩衝區大小小於 1。</exception>
      <exception cref="T:System.InvalidOperationException">此屬性是在序列化或還原序列化發生後設定的。</exception>
      <returns>預設的緩衝區大小（以位元組為單位）。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition">
      <summary>指定條件，以判斷在序列化或還原序列化期間何時要忽略具有預設值的屬性。
預設值是 <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />。</summary>
      <exception cref="T:System.ArgumentException">此屬性設定為 <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always" />。</exception>
      <exception cref="T:System.InvalidOperationException">此屬性會在發生序列化或還原序列化後設定。

-或-

<see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> 已設定為 <see langword="true" />。 這些屬性不能同時使用。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary>取得或設定用來將 <see cref="T:System.Collections.IDictionary" /> 機碼名稱轉換為另一種格式 (例如，駝峰式大小寫) 的原則。</summary>
      <returns>用來將 <see cref="T:System.Collections.IDictionary" /> 金鑰名稱轉換成另一種格式的原則。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary>取得或設定要在逸出字串時使用的編碼器，設為 <see langword="null" /> 則可使用預設編碼器。</summary>
      <returns>JavaScript 字元編碼。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary>取得或設定值，該值決定序列化與還原序列化期間是否忽略 <see langword="null" /> 值。 預設值是 <see langword="false" />。</summary>
      <exception cref="T:System.InvalidOperationException">此屬性是在序列化或還原序列化發生後設定的。

-或-

<see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" /> 已設定為非預設值。 這些屬性不能同時使用。</exception>
      <returns>
        <see langword="true" /> 在序列化和還原序列化期間忽略 null 值;否則，請參閱 langword = "false"/ &gt; 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyFields">
      <summary>判斷在序列化期間是否忽略唯讀欄位。 如果屬性未使用 <see langword="readonly" /> 關鍵字標記，便代表其為唯讀。 預設值是 <see langword="false" />。</summary>
      <exception cref="T:System.InvalidOperationException">此屬性會在發生序列化或還原序列化後設定。</exception>
      <returns>
        <see langword="true" /> 如果在序列化期間應該忽略唯讀欄位， <see langword="false" /> 否則為。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary>取得值，此值決定序列化期間是否忽略唯讀屬性。 預設值是 <see langword="false" />。</summary>
      <exception cref="T:System.InvalidOperationException">此屬性是在序列化或還原序列化發生後設定的。</exception>
      <returns>
        <see langword="true" /> 在序列化期間忽略唯讀屬性;否則為 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IncludeFields">
      <summary>判斷是否要在序列化及還原序列化期間處理欄位。
預設值是 <see langword="false" />。</summary>
      <exception cref="T:System.InvalidOperationException">此屬性會在發生序列化或還原序列化後設定。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary>取得或設定序劣化或還原序列化 JSON 時允許的最大深度，預設值 (亦即 0) 指出 64 的最大深度。</summary>
      <exception cref="T:System.InvalidOperationException">此屬性是在序列化或還原序列化發生後設定的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">最大深度設定為負值。</exception>
      <returns>序列化或還原序列化 JSON 時允許的最大深度。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.NumberHandling">
      <summary>指定在序列化及還原序列化時應如何處理數字類型。</summary>
      <exception cref="T:System.InvalidOperationException">此屬性會在發生序列化或還原序列化後設定。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary>取得或設定值，此值決定屬性的名稱在還原序列化期間是否使用不區分大小寫的比較。 預設值是 <see langword="false" />。</summary>
      <returns>
        <see langword="true" /> 使用不區分大小寫的比較來比較屬性名稱;否則為 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary>取得或設定用來指定的值，該值會指定在物件上將屬性的名稱轉換為另一個格式的原則，例如駝峰式大寫，或 <see langword="null" /> 以讓屬性名稱保持不變。</summary>
      <returns>屬性命名原則，或 <see langword="null" /> 讓屬性名稱保持不變。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary>取得或設定值，此值定義在還原序列化期間如何處理註解。</summary>
      <exception cref="T:System.InvalidOperationException">此屬性是在序列化或還原序列化發生後設定的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">註解處理列舉設定為不支援的值 (或不在 <see cref="T:System.Text.Json.JsonCommentHandling" /> 列舉範圍內)。</exception>
      <returns>值，指出是否允許、不允許或略過批註。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler">
      <summary>設定讀取及寫入 JSON 時，物件參考的處理方式。</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary>取得或設定值，此值定義 JSON 是否應該使用美化顯示。 根據預設，JSON 會序列化，而不會有任何額外的空白字元。</summary>
      <exception cref="T:System.InvalidOperationException">此屬性是在序列化或還原序列化發生後設定的。</exception>
      <returns>
        <see langword="true" /> 如果 JSON 應該在序列化時進行美觀的列印;否則為 <see langword="false" /> 。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary>定義組成 JSON 文字的各種 JSON 權杖。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary>權杖類型是註解字串。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary>權杖類型是 JSON 陣列的結尾。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary>權杖類型是 JSON 物件的結尾。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary>權杖類型是 JSON 常值 false。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary>沒有值 (與 <see cref="F:System.Text.Json.JsonTokenType.Null" /> 不同)。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary>權杖類型是 JSON 常值 null。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary>權杖類型是 JSON 數字。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary>權杖類型是 JSON 屬性名稱。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary>權杖類型是 JSON 陣列的開頭。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary>權杖類型是 JSON 物件的開頭。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary>權杖類型是 JSON 字串。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary>權杖類型是 JSON 常值 true。</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary>指定 JSON 值的資料型別。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary>JSON 陣列。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary>JSON 值 false。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary>JSON 值 null。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary>JSON 數字。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary>JSON 物件。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary>JSON 字串。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary>JSON 值 true。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary>沒有值 (與 <see cref="F:System.Text.Json.JsonValueKind.Null" /> 不同)。</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary>可讓使用者在使用 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 撰寫 JSON 時，定義自訂行為。</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary>取得或設定要在逸出字串時使用的編碼器，設為 <see langword="null" /> 則可使用預設編碼器。</summary>
      <returns>用來覆寫轉義行為的 JavaScript 字元編碼器。</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary>取得或設定值，這個值指出 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否應將 JSON 輸出格式化，其中包含縮排巢狀 JSON 權杖、新增新行，以及在屬性名稱與值之間新增空白字元。</summary>
      <returns>
        <see langword="true" /> 格式化 JSON 輸出; <see langword="false" /> 寫入，不含任何額外的空白字元。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary>取得或設定值，這個值指出 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否應該略過結構化驗證，並允許使用者寫入無效 JSON。</summary>
      <returns>
        <see langword="true" /> 略過結構驗證並允許不正確 JSON; <see langword="false" /><see cref="T:System.InvalidOperationException" /> 在任何嘗試寫入不正確 JSON 時擲回。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary>提供序列化屬性的基底類別。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary>建立 <see cref="T:System.Text.Json.Serialization.JsonAttribute" /> 的新執行個體。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConstructorAttribute">
      <summary>放置在建構函式上時，指出應該在還原序列化時使用該建構函式來建立類型的執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute" /> 的新執行個體。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary>將物件或值轉換成或轉換自 JSON。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary>在衍生類別中覆寫時，會決定轉換器執行個體是否可以轉換指定的物件類型。</summary>
      <param name="typeToConvert">要檢查類型是否可由此轉換器執行個體轉換之物件的類型。</param>
      <returns>若執行個體可以轉換指定的物件類型，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary>將物件或值轉換成或轉換自 JSON。</summary>
      <typeparam name="T">轉換器所處理之物件或值的型別。</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary>初始化新的 <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> 執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary>判斷是否可轉換指定的類型。</summary>
      <param name="typeToConvert">要比較的類型。</param>
      <returns>如果型別可以轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>讀取 JSON 並加以轉換為類型 <typeparamref name="T" />。</summary>
      <param name="reader">讀取器。</param>
      <param name="typeToConvert">要轉換的類型。</param>
      <param name="options">物件，指定要使用的序列化選項。</param>
      <returns>轉換的值。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary>將指定的值寫為 JSON。</summary>
      <param name="writer">要寫入的寫入器。</param>
      <param name="value">要轉換為 JSON 的值。</param>
      <param name="options">物件，指定要使用的序列化選項。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull">
      <summary>指出是否應該在序列化時將 <see langword="null" /> 傳遞至轉換器，以及是否應該在還原序列化時傳遞 <see cref="F:System.Text.Json.JsonTokenType.Null" />。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary>放在屬性或類型上時，可指定要使用的轉換器類型。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary>使用指定的轉換器類型初始化 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> 的新執行個體。</summary>
      <param name="converterType">轉換器的類型。</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary>在衍生類別中覆寫且 <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> 是 <see langword="null" /> 時，允許衍生類別建立 <see cref="T:System.Text.Json.Serialization.JsonConverter" /> 以傳遞額外狀態。</summary>
      <param name="typeToConvert">轉換器的類型。</param>
      <returns>自訂轉換器。</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary>取得 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> 的類型，若它是在沒有類型的情況下建立的，則為 <see langword="null" />。</summary>
      <returns>的型別 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> ，或者， <see langword="null" /> 如果它是在沒有型別的情況下建立的，則為。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary>支援使用 factory 模式轉換多種類型。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary>在衍生類別中覆寫時，初始化 <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>建立指定類型的轉換器。</summary>
      <param name="typeToConvert">轉換器處理的類型。</param>
      <param name="options">要使用的序列化選項。</param>
      <returns>
        <typeparamref name="T" /> 與 <paramref name="typeToConvert" /> 相容的轉換器。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary>置於 <see cref="T:System.Collections.Generic.IDictionary`2" /> 類型的屬性上時，任何沒有相符成員的屬性都會在還原序列化期間新增至該字典，並在序列化期間寫入。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary>執行個體化 <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary>避免將屬性序列化或還原序列化。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> 的新執行個體。</summary>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition">
      <summary>指定忽略屬性之前必須符合的條件。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreCondition">
      <summary>控制 <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> 如何在序列化及還原序列化時忽略屬性。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always">
      <summary>一律會忽略屬性。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never">
      <summary>一律會將屬性序列化及還原序列化，不論 <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> 設定為何。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault">
      <summary>只有在其為 <see langword="null" /> 時，才會忽略屬性。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull">
      <summary>如果值是 <see langword="null" />，系統會在序列化期間忽略該屬性。 這僅適用於參考類型的屬性與欄位。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIncludeAttribute">
      <summary>指出應該包含成員以進行序列化及還原序列化。</summary>
      <exception cref="T:System.InvalidOperationException">屬性會套用到非公用屬性。</exception>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute" /> 的新執行個體。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandling">
      <summary>判斷 <see cref="T:System.Text.Json.JsonSerializer" /> 如何在序列化及還原序列化時處理數字。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals">
      <summary>"NaN"、"Infinity" 與 "-Infinity" <see cref="F:System.Text.Json.JsonTokenType.String" /> 語彙基元可以讀取為浮點數常數，而且這些常數的 <see cref="T:System.Single" /> 與 <see cref="T:System.Double" /> 值將會寫入為其相對應的 JSON 字串表示法。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString">
      <summary>可以從 <see cref="F:System.Text.Json.JsonTokenType.String" /> 語彙基元讀取數字。 無法防止從 <see cref="F:System.Text.Json.JsonTokenType.Number" /> 語彙基元讀取數字。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.Strict">
      <summary>只會從 <see cref="F:System.Text.Json.JsonTokenType.Number" /> 語彙基元讀取數字，而且只會將其寫入為 JSON 數字 (不含引號)。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString">
      <summary>數字將會寫入為 JSON 字串 (含引號)，而非 JSON 數字。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute">
      <summary>置於類型、屬性或欄位上時，指出在將數字序列化或還原序列化時應該使用哪些 <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> 設定。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)">
      <summary>初始化 <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute" /> 的新執行個體。</summary>
      <param name="handling">列舉值的位元組合，可指定在序列化或還原序列化時應如何處理數字類型。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonNumberHandlingAttribute.Handling">
      <summary>指出在將數字序列化或還原序列化時應該使用哪些設定。</summary>
      <returns>決定數位序列化和還原序列化設定的物件。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary>指定在序列化和還原序列化時，存在於 JSON 中的屬性名稱。 這會覆寫 <see cref="T:System.Text.Json.JsonNamingPolicy" /> 所指定的任何命名原則。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary>使用指定的屬性名稱，初始化 <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> 的新執行個體。</summary>
      <param name="name">屬性的名稱。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary>取得屬性的名稱。</summary>
      <returns>屬性的名稱。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary>將列舉值與字串相互轉換。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary>使用允許整數值的預設命名原則，初始化 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 類別的執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary>使用指定命名原則和指出是否允許未定義列舉值的值，來初始化 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 類別的執行個體。</summary>
      <param name="namingPolicy">用於寫入列舉值的選擇性命名原則。</param>
      <param name="allowIntegerValues">
        <see langword="true" /> 表示允許未定義的列舉值；否則為 <see langword="false" />。 當 <see langword="true" /> 時，如果列舉值未定義，則會輸出為數字而非字串。</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary>判斷指定的類型是否可以轉換為列舉。</summary>
      <param name="typeToConvert">要檢查的型別。</param>
      <returns>如果型別可以轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>建立指定類型的轉換器。</summary>
      <param name="typeToConvert">轉換器處理的類型。</param>
      <param name="options">要使用的序列化選項。</param>
      <returns>
        <typeparamref name="T" /> 與 <paramref name="typeToConvert" /> 相容的轉換器。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler">
      <summary>這個類別會定義 <see cref="T:System.Text.Json.JsonSerializer" /> 如何在序列化和還原序列化時處理參考。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.#ctor">
      <summary>初始化 <see cref="T:System.Text.Json.Serialization.ReferenceHandler" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver">
      <summary>傳回用於每個序列化呼叫的 <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />。</summary>
      <returns>用於序列化和還原序列化的解析程式。</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.ReferenceHandler.Preserve">
      <summary>將 JSON 物件和陣列還原序列化為參考型別時，將接受中繼資料屬性，並在將參考型別序列化時寫入。 若要從包含迴圈或重複參考的物件建立可往返的 JSON，這是必要的。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler`1">
      <summary>這個類別會定義 <see cref="T:System.Text.Json.JsonSerializer" /> 如何在序列化和還原序列化時處理參考。</summary>
      <typeparam name="T">
        <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />要在每個序列化或還原序列化呼叫上建立的型別。</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.#ctor">
      <summary>初始化 <see cref="T:System.Text.Json.Serialization.ReferenceHandler`1" /> 泛型類別的新執行個體，該類別可建立 <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> 執行個體 (針對指定的 <typeparam name="T" />)。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver">
      <summary>建立用於每個序列化呼叫且型別為 <typeparamref name="T" /> 的新 <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />。</summary>
      <returns>用於序列化和還原序列化的新解析程式。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceResolver">
      <summary>這個類別會定義 <see cref="T:System.Text.Json.JsonSerializer" /> 如何在序列化和還原序列化時處理參考。
定義在序列化和還原序列化時保留參考的核心行為。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.#ctor">
      <summary>初始化 <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)">
      <summary>使用指定的識別碼和值，將項目新增至參考包。
從 JSON 物件讀取 $id 中繼資料屬性時，即會呼叫這個方法。</summary>
      <param name="referenceId">JSON 物件或陣列的識別碼。</param>
      <param name="value">剖析 JSON 物件所產生之 CLR 參考型別物件的值。</param>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)">
      <summary>如果有的話，取得指定值的參考識別碼，否則會指派新的識別碼。
這個方法會在寫入 CLR 物件之前呼叫，因此，我們可以決定是否要寫入 $id 並列舉其屬性的其餘部分或 $ref，然後逐步執行至下一個物件。</summary>
      <param name="value">要取得識別碼之 CLR 參考型別物件的值。</param>
      <param name="alreadyExists">當這個方法傳回時，如果值的參考已經存在，即為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>指定物件的參考識別碼。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)">
      <summary>傳回與指定參考識別碼相關的 CLR 參考型別物件。讀取 $ref 中繼資料屬性時，即會呼叫這個方法。</summary>
      <param name="referenceId">與傳回物件相關的參考識別碼。</param>
      <returns>與指定參考識別碼相關的參考型別物件。</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary>提供高效能 API，以便對 UTF-8 編碼的 JSON 文字進行唯讀的順向存取。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構的新執行個體，以處理 UTF-8 編碼文字的唯讀序列，並指出輸入是否包含要處理的所有文字。</summary>
      <param name="jsonData">要處理的 UTF-8 編碼 JSON 文字。</param>
      <param name="isFinalBlock">
        <see langword="true" /> 表示輸入序列包含要處理的整個資料；<see langword="false" /> 表示輸入範圍包含有更多資料可供追蹤的部分資料。</param>
      <param name="state">包含讀取器狀態的物件。 如果這是第一次呼叫建構函式，請傳遞預設狀態；否則傳遞來自先前 <see cref="T:System.Text.Json.Utf8JsonReader" /> 執行個體的 <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> 屬性值。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>使用指定的選項初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構的新執行個體，以處理 UTF-8 編碼文字的唯讀序列。</summary>
      <param name="jsonData">要處理的 UTF-8 編碼 JSON 文字。</param>
      <param name="options">定義不同於 JSON RFC 的自訂 <see cref="T:System.Text.Json.Utf8JsonReader" /> 行為 (例如，處理註解的方式或讀取時允許的最大深度)。 根據預設，<see cref="T:System.Text.Json.Utf8JsonReader" /> 會嚴格遵循 JSON RFC；JSON 內的註解無效，且最大深度是 64。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構的新執行個體，以處理 UTF-8 編碼文字的唯讀反為，並指出輸入是否包含要處理的所有文字。</summary>
      <param name="jsonData">要處理的 UTF-8 編碼 JSON 文字。</param>
      <param name="isFinalBlock">
        <see langword="true" /> 表示輸入序列包含要處理的整個資料；<see langword="false" /> 表示輸入範圍包含有更多資料可供追蹤的部分資料。</param>
      <param name="state">包含讀取器狀態的物件。 如果這是第一次呼叫建構函式，請傳遞預設狀態；否則傳遞來自先前 <see cref="T:System.Text.Json.Utf8JsonReader" /> 執行個體的 <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> 屬性值。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>使用指定的選項初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構的新執行個體，以處理 UTF-8 編碼文字的唯讀範圍。</summary>
      <param name="jsonData">要處理的 UTF-8 編碼 JSON 文字。</param>
      <param name="options">定義不同於 JSON RFC 的自訂 <see cref="T:System.Text.Json.Utf8JsonReader" /> 行為 (例如，處理註解的方式或讀取時允許的最大深度)。 根據預設，<see cref="T:System.Text.Json.Utf8JsonReader" /> 會嚴格遵循 JSON RFC；JSON 內的註解無效，且最大深度是 64。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary>從來源讀取下一個 JSON 權杖值作為 <see cref="T:System.Boolean" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是布林值 (亦即，<see cref="F:System.Text.Json.JsonTokenType.True" /> 或 <see cref="F:System.Text.Json.JsonTokenType.False" />)。</exception>
      <returns>如果 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> 是 <see cref="F:System.Text.Json.JsonTokenType.True" />，則為 <see langword="true" />；如果 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> 是 <see cref="F:System.Text.Json.JsonTokenType.False" />，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary>從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Byte" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值的數值格式不正確 (例如，它包含小數值或以科學記號標記法撰寫)。
          
-或-

JSON 權杖值表示小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
      <returns>UTF-8 編碼權杖的值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary>從來源剖析目前 JSON 權杖值，並將 Base64 編碼的 JSON 字串解碼為位元組陣列。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖類型不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException">此值未編碼為 Base64 文字，因此無法解碼為位元組。

-或-

值包含無效的填補字元或包含兩個以上的填補字元。

-或-

值不完整。 也就是，JSON 字串長度不是 4 的倍數。</exception>
      <returns>表示目前 JSON 權杖值的位元組陣列。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary>從來源將目前 JSON 權杖值剖析為註解，並已將其轉碼為 <see cref="T:System.String" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖不是註解。</exception>
      <returns>表示目前 JSON 權杖值的註解。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary>從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.DateTime" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值不能讀取為 <see cref="T:System.DateTime" />。
        
-或- 
整個 UTF-8 編碼的權杖值無法剖析為 <see cref="T:System.DateTime" /> 值。

-或-

JSON 權杖值不是支援的格式。</exception>
      <returns>日期和時間值 (如果可以成功剖析整個 UTF-8 編碼權杖值)。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary>從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.DateTimeOffset" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值不能讀取為 <see cref="T:System.DateTimeOffset" />。

-或- 
整個 UTF-8 編碼的權杖值無法剖析為 <see cref="T:System.DateTimeOffset" /> 值。

-或-

JSON 權杖值不是支援的格式。</exception>
      <returns>日期和時間位移 (如果可以成功剖析整個 UTF-8 編碼的權杖值)。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary>從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Decimal" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值表示小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
      <returns>剖析為 <see cref="T:System.Decimal" /> 的 UTF-8 編碼權杖值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary>從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Double" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值表示小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
      <returns>剖析為 <see cref="T:System.Double" /> 的 UTF-8 編碼權杖值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary>從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Guid" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值不是支援的 GUID 格式。
        
-或-

整個 UTF-8 編碼的權杖值無法剖析為 <see cref="T:System.Guid" /> 值。</exception>
      <returns>GUID 值 (如果可以成功剖析整個 UTF-8 編碼權杖值)。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary>從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Int16" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值的數值格式不正確 (例如，它包含小數值或以科學記號標記法撰寫)。
          
-或-

JSON 權杖值表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
      <returns>剖析為 <see cref="T:System.Int16" /> 的 UTF-8 編碼權杖值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary>從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Int32" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值的數字格式不正確。 例如，包含小數或是以科學記號標記法撰寫。
            
-或-

JSON 權杖值表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
      <returns>剖析為 <see cref="T:System.Int32" /> 的 UTF-8 編碼權杖值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary>從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Int64" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值的數字格式不正確。 例如，包含小數或是以科學記號標記法撰寫。
            
-或-

JSON 權杖值表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
      <returns>剖析為 <see cref="T:System.Int64" /> 的 UTF-8 編碼權杖值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary>從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.SByte" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值的數值格式不正確 (例如，它包含小數值或以科學記號標記法撰寫)。
          
-或-

JSON 權杖值表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
      <returns>剖析為 <see cref="T:System.SByte" /> 的 UTF-8 編碼權杖值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary>從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Single" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值表示小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
      <returns>剖析為 <see cref="T:System.Single" /> 的 UTF-8 編碼權杖值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary>從來源讀取下一個 JSON 權杖值，並轉碼為字串。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是字串 (亦即，不是 <see cref="F:System.Text.Json.JsonTokenType.String" />、<see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> 或 <see cref="F:System.Text.Json.JsonTokenType.Null" />)。

-或-

JSON 字串包含無效 UTF-8 位元組或無效 UTF-16 Surrogate。</exception>
      <returns>剖析為字串的權杖值，或若 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> 是 <see cref="F:System.Text.Json.JsonTokenType.Null" /> 則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary>從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.UInt16" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值的數值格式不正確 (例如，它包含小數值或以科學記號標記法撰寫)。
          
-或-

JSON 權杖值表示小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
      <returns>剖析為 <see cref="T:System.UInt16" /> 的 UTF-8 編碼權杖值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary>從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.UInt32" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值的數字格式不正確。 例如，包含小數或是以科學記號標記法撰寫。

-或-

JSON 權杖值表示小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
      <returns>剖析為 <see cref="T:System.UInt32" /> 的 UTF-8 編碼權杖值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary>從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.UInt64" />。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException">JSON 權杖值的數字格式不正確。 例如，包含小數或是以科學記號標記法撰寫。
            
-或-

JSON 權杖值表示小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
      <returns>剖析為 <see cref="T:System.UInt64" /> 的 UTF-8 編碼權杖值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary>從輸入來源讀取下一個 JSON 權杖。</summary>
      <exception cref="T:System.Text.Json.JsonException">發現根據 JSON RFC 無效的 JSON 權杖。
        
-或-

目前深度超過最大深度設定的遞迴限制。</exception>
      <returns>如果成功讀取權杖，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary>略過目前 JSON 權杖的子系。</summary>
      <exception cref="T:System.InvalidOperationException">已提供部分資料給讀取器，後續還有更多資料 (亦即 <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> 為 <see langword="false" />)。</exception>
      <exception cref="T:System.Text.Json.JsonException">根據 JSON RFC，略過時發現無效的 JSON 權杖。

-或-

目前深度超過最大深度設定的遞迴限制。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Byte" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Byte" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值、將 Base64 編碼的 JSON 字串解碼為位元組陣列，並傳回指出作業是否成功的值。</summary>
      <param name="value">當此方法傳回時，包含 Base64 文字的已解碼二進位表示。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <returns>若整個權杖值已編碼為有效的 Base64 文字，並可以成功解碼為位元組，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.DateTime" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.DateTime" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.DateTimeOffset" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.DateTimeOffset" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Decimal" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Decimal" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Double" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Double" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Guid" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Guid" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Int16" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Int16" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Int32" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Int32" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Int64" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Int64" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.SByte" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.SByte" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Single" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Single" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.UInt16" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.UInt16" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.UInt32" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.UInt32" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary>嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.UInt64" />，並傳回指出作業是否成功的值。</summary>
      <param name="value">當這個方法傳回時，會包含剖析的值。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <returns>如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.UInt64" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary>嘗試略過目前 JSON 權杖的子系。</summary>
      <exception cref="T:System.Text.Json.JsonException">根據 JSON RFC，略過時發現無效的 JSON 權杖。
          
-或-

目前深度超過最大深度設定的遞迴限制。</exception>
      <returns>若有足夠的資料可成功略過子系，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary>將唯讀位元組範圍中的 UTF-8 編碼文字與來源中未逸出的 JSON 權杖值比較，並傳回指出它們是否相符的值。</summary>
      <param name="utf8Text">要用來比較的 UTF-8 編碼文字。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖不是 JSON 字串 (亦即，它不是 <see cref="F:System.Text.Json.JsonTokenType.String" /> 或 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />)。</exception>
      <returns>若來源中的 JSON 權杖值符合 UTF-8 編碼查閱文字，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary>將唯讀字元範圍中的文字與來源中未逸出的 JSON 權杖值進行比較，並傳回指出它們是否相符的值。</summary>
      <param name="text">要比較的文字。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖不是 JSON 字串 (亦即，它不是 <see cref="F:System.Text.Json.JsonTokenType.String" /> 或 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />)。</exception>
      <returns>若來源中的 JSON 權杖值符合查閱文字，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary>將字串文字與來源中未逸出的 JSON 權杖值進行比較，並傳回指出它們是否相符的值。</summary>
      <param name="text">要比較的文字。</param>
      <exception cref="T:System.InvalidOperationException">JSON 權杖不是 JSON 字串 (亦即，它不是 <see cref="F:System.Text.Json.JsonTokenType.String" /> 或 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />)。</exception>
      <returns>若來源中的 JSON 權杖值符合查閱文字，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary>取得 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的這個執行個體到目前為止所取用的位元組總數。</summary>
      <returns>到目前為止所耗用的位元組總數。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary>取得目前權杖的深度。</summary>
      <returns>目前 token 的深度。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary>取得要傳遞到具有更多資料之 <see cref="T:System.Text.Json.Utf8JsonReader" /> 建構函式的目前 <see cref="T:System.Text.Json.Utf8JsonReader" /> 狀態。</summary>
      <returns>目前的讀取器狀態。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary>取得值，這個值表示要用來取得權杖值的 <c>Value</c> 屬性。</summary>
      <returns>
        <see langword="true" /> 如果 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> 應該使用來取得權杖值，則為， <see langword="false" /> 如果 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> 應該改用則為。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary>取得這個 <see cref="T:System.Text.Json.Utf8JsonReader" /> 執行個體的模式，指出已提供所有 JSON 資料，或後續還有更多資料。</summary>
      <returns>
        <see langword="true" /> 如果讀取器是使用包含要處理之整個 JSON 資料的輸入範圍或序列所建立的， <see langword="false" /> 如果讀取器是使用輸入範圍或序列所建立，且其中可能包含具有更多資料的部分 JSON 資料。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary>取得所提供 UTF-8 編碼輸入ReadOnlySequence&lt;位元組&gt; 內的目前 <see cref="T:System.SequencePosition" />，或是使用 ReadOnlySpan&lt;位元組&gt; 建構 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構時的預設 <see cref="T:System.SequencePosition" />。</summary>
      <returns>提供的 <see cref="T:System.SequencePosition" /> utf-8 編碼輸入 ReadOnlySequence 位元組內的目前， &lt; &gt; <see cref="T:System.SequencePosition" /> 如果 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構是使用 ReadOnlySpan 位元組所建立，則為預設 &lt; 值 &gt; 。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary>取得上次所處理 JSON 權杖的起始索引 (位於指定的 UTF-8 編碼輸入文字內)，並略過任何空白字元。</summary>
      <returns>指定 UTF-8 編碼輸入文字內最後處理之 JSON 權杖的起始索引。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary>取得 UTF-8 編碼 JSON 文字中上次處理 JSON 權杖的類型。</summary>
      <returns>上次處理之 JSON 權杖的類型。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary>只有當權杖包含於多個區段內時，才要取得上次處理之權杖的原始值作為輸入承載的 ReadOnlySequence&lt;byte&gt; 配量。</summary>
      <returns>位元組唯讀序列。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary>如果權杖適用於單一區段，或者，如果讀取器是使用 ReadOnlySpan&lt;byte&gt; 內含的 JSON 承載所建構的，則取得最後處理之權杖的原始值作為輸入承載的 ReadOnlySpan&lt;byte&gt; 配量。</summary>
      <returns>位元組的唯讀範圍。</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary>提供高效能 API，以便對 UTF-8 編碼的 JSON 文字進行非快取的順向寫入。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary>使用指定的 <see cref="T:System.Buffers.IBufferWriter`1" /> 來將輸出寫入和自訂選項，藉以將 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 類別的新執行個體初始化。</summary>
      <param name="bufferWriter">寫入 JSON 文字的目的地。</param>
      <param name="options">定義 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自訂行為。 根據預設，它會寫入最小化的 JSON (不含額外的空白字元)，並根據 JSON RFC 驗證所寫入的 JSON 在結構上是有效的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary>使用指定的串流來將輸出寫入和自訂選項，藉以將 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 類別的新執行個體初始化。</summary>
      <param name="utf8Json">寫入 JSON 文字的目的地。</param>
      <param name="options">定義 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自訂行為。 根據預設，它會寫入最小化的 JSON (不含額外的空白字元)，並根據 JSON RFC 驗證所寫入的 JSON 在結構上是有效的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary>認可尚未排清的任何剩餘 JSON 文字，並釋出目前執行個體使用的所有資源。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary>以非同步方式認可尚未排清的任何剩餘 JSON 文字，並釋出目前執行個體使用的所有資源。</summary>
      <returns>代表非同步處置作業的工作。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary>認可到目前為止所寫入的 JSON 文字，以便向輸出目的地顯示。</summary>
      <exception cref="T:System.ObjectDisposedException">這個執行個體已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式認可到目前為止所寫入的 JSON 文字，以便向輸出目的地顯示。</summary>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <exception cref="T:System.ObjectDisposedException">這個執行個體已經過處置。</exception>
      <returns>表示非同步排清作業的工作。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary>重設此執行個體的內部狀態，使其能重複使用。</summary>
      <exception cref="T:System.ObjectDisposedException">這個執行個體已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary>重設此執行個體的內部狀態，使其能重複用於 <see cref="T:System.Buffers.IBufferWriter`1" /> 的新執行個體。</summary>
      <param name="bufferWriter">寫入 JSON 文字的目的地。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">這個執行個體已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary>重設此執行個體的內部狀態，使其能重複用於 <see cref="T:System.IO.Stream" /> 的新執行個體。</summary>
      <param name="utf8Json">寫入 JSON 文字的目的地。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">這個執行個體已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>寫入屬性名稱和原始位元組值 (以 Base64 編碼 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入的屬性 UTF-8 編碼名稱。</param>
      <param name="bytes">要以 Base64 編碼文字形式寫入的二進位資料。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>寫入屬性名稱和原始位元組值 (以 Base64 編碼 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <param name="bytes">要以 Base64 編碼文字形式寫入的二進位資料。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>寫入屬性名稱和原始位元組值 (以 Base64 編碼 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <param name="bytes">要以 Base64 編碼文字形式寫入的二進位資料。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>寫入預先編碼的屬性名稱和原始位元組值 (以 Base 64 編碼的 JSON 字串形式)，成為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要寫入的屬性 JSON 編碼名稱。</param>
      <param name="bytes">要以 Base64 編碼文字形式寫入的二進位資料。</param>
      <exception cref="T:System.ArgumentException">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary>以 Base64 編碼 JSON 字串將原始位元組值寫入為 JSON 陣列元素。</summary>
      <param name="bytes">要以 Base64 編碼 JSON 字串形式寫入為 JSON 陣列元素的二進位資料。</param>
      <exception cref="T:System.ArgumentException">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary>寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 true 或 false)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 JSON 常值 true 或 false 寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 true 或 false)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 常值 true 或 false 寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary>寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 true 或 false)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 常值 true 或 false 寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary>寫入預先編碼的屬性名稱和 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 true 或 false)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 JSON 常值 true 或 false 寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary>寫入 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 true 或 false)，作為 JSON 陣列的元素。</summary>
      <param name="value">要以 JSON 常值 true 或 FALSE 寫入作為 json 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary>寫入 UTF-8 文字值作為 JSON 註解。</summary>
      <param name="utf8Value">要<c> / *..* / 在其中寫入</c>為 JSON 批註的 utf-8 編碼值 .。。</param>
      <exception cref="T:System.ArgumentException">指定的值太大。
        
-或-

<paramref name="utf8Value" /> 包含批註分隔符號 (也就是 <c>*/</c>) 。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary>寫入 UTF-16 文字值作為 JSON 註解。</summary>
      <param name="value">要<c> / *..* / 在其中寫入</c>為 utf-8 轉碼 JSON 批註的 utf-16 編碼值 .。。</param>
      <exception cref="T:System.ArgumentException">指定的值太大。
        
-或-

<paramref name="value" /> 包含批註分隔符號 (也就是 <c>*/</c>) 。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary>寫入字串文字值作為 JSON 註解。</summary>
      <param name="value">要<c> / *..* / 在其中寫入</c>為 utf-8 轉碼 JSON 批註的 utf-16 編碼值 .。。</param>
      <exception cref="T:System.ArgumentException">指定的值太大。
        
-或-

<paramref name="value" /> 包含批註分隔符號 (也就是 <c>*/</c>) 。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary>寫入 JSON 陣列的結尾。</summary>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary>寫入 JSON 物件的結尾。</summary>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary>寫入屬性名稱 (指定為唯讀位元組範圍) 和 JSON 常值 null，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 JSON 常值 null，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary>寫入屬性名稱 (指定為字串) 和 JSON 常值 null，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary>寫入預先編碼的屬性名稱和 JSON 常值 null，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary>寫入 JSON 常 值 null 做為 json 陣列的元素。</summary>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary>寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary>寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary>寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary>寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary>寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary>寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary>寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary>寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary>寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary>寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary>寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary>寫入屬性名稱 (指定為字串) 和 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary>寫入屬性名稱 (指定為字串) 和 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary>寫入預先編碼的屬性名稱和 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary>寫入預先編碼的屬性名稱和 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary>寫入預先編碼的屬性名稱和 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary>寫入預先編碼的屬性名稱和 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary>寫入預先編碼的屬性名稱和 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary>寫入預先編碼的屬性名稱和 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary>寫入預先編碼的屬性名稱和 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary>寫入 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary>寫入 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary>寫入 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary>寫入 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary>寫入 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary>寫入 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary>寫入 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary>寫入 UTF-8 屬性名稱 (以 JSON 字串形式)，作為 JSON 物件名稱/值組的第一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary>寫入屬性名稱 (以 JSON 字串形式)，作為 JSON 物件名稱/值組的第一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary>寫入屬性名稱 (以 JSON 字串形式)，作為 JSON 物件名稱/值組的第一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary>寫入預先編碼的屬性名稱 (以 JSON 字串形式)，作為 JSON 物件名稱/值組的第一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary>寫入 JSON 陣列的開頭。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 的深度超過最大深度 1,000。

-或-

已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary>以屬性名稱 (指定為唯讀位元組範圍) 作為索引鍵，寫入 JSON 陣列的開頭。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 陣列的 UTF-8 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">JSON 的深度超過最大深度 1,000。

-或-
       
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary>以屬性名稱 (指定為唯讀字元範圍) 作為索引鍵，寫入 JSON 陣列的開頭。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 陣列的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">JSON 的深度超過最大深度 1,000。

-或-
       
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary>以屬性名稱 (指定為字串) 作為索引鍵，寫入 JSON 陣列的開頭。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 陣列的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">JSON 的深度超過最大深度 1,000。

-或-
       
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary>以預先編碼的屬性名稱作為索引鍵，寫入 JSON 陣列的開頭。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 陣列的 JSON 編碼屬性名稱。</param>
      <exception cref="T:System.InvalidOperationException">JSON 的深度已超過最大深度 1,000。
    
-或-

已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary>寫入 JSON 物件的開頭。</summary>
      <exception cref="T:System.InvalidOperationException">JSON 的深度超過最大深度 1,000。

-或-

已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary>以屬性名稱 (指定為唯讀位元組範圍) 作為索引鍵，寫入 JSON 物件的開頭。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">JSON 的深度超過最大深度 1,000。 

-或-
       
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary>以屬性名稱 (指定為唯讀字元範圍) 作為索引鍵，寫入 JSON 物件的開頭。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">JSON 的深度超過最大深度 1,000。 

-或-
       
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary>以屬性名稱 (指定為字串) 作為索引鍵，寫入 JSON 物件的開頭。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">JSON 的深度超過最大深度 1,000。 

-或-
       
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary>以預先編碼的屬性名稱作為索引鍵，寫入 JSON 物件的開頭。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <exception cref="T:System.InvalidOperationException">JSON 的深度已超過最大深度 1,000。
          
-或-

已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary>寫入 UTF-8 屬性名稱和 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary>寫入 UTF-8 屬性名稱和 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary>寫入 UTF-8 屬性名稱和 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>寫入 UTF-8 屬性名稱和 UTF-8 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="utf8Value">要以 JSON 字串寫入作為名稱/值組一部分的 UTF-8 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary>寫入 UTF-8 屬性名稱和 UTF-16 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary>寫入 UTF-8 屬性名稱和字串文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary>寫入 UTF-8 屬性名稱和預先編碼的值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 JSON 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary>寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>寫入 UTF-16 屬性名稱和 UTF-8 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="utf8Value">要以 JSON 字串寫入作為名稱/值組一部分的 UTF-8 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>寫入 UTF-16 屬性名稱和 UTF-16 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary>寫入 UTF-16 屬性名稱和字串文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary>寫入屬性名稱和預先編碼的值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 JSON 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary>寫入屬性名稱 (指定為字串) 和 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary>寫入屬性名稱 (指定為字串) 和 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary>寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>寫入屬性名稱 (指定為字串) 和 UTF-8 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="utf8Value">要以 JSON 字串寫入作為名稱/值組一部分的 UTF-8 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary>寫入屬性名稱 (指定為字串) 和 UTF-16 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary>寫入屬性名稱 (指定為字串) 和字串文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary>寫入屬性名稱和預先編碼的值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 JSON 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary>寫入預先編碼的屬性名稱和 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary>寫入預先編碼的屬性名稱和 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary>寫入預先編碼的屬性名稱和 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>寫入預先編碼的屬性名稱和 UTF-8 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="utf8Value">要以 JSON 字串寫入作為名稱/值組一部分的 UTF-8 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary>寫入預先編碼的屬性名稱和文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary>寫入預先編碼的屬性名稱和字串文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary>寫入預先編碼的屬性名稱和預先編碼的值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 JSON 編碼值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary>寫入 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以 JSON 字串寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary>寫入 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以 JSON 字串寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary>寫入 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以 JSON 字串寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary>寫入 UTF-8 文字值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="utf8Value">要以 JSON 字串寫入作為 JSON 陣列元素的 UTF-8 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary>寫入 UTF-16 文字值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以UTF-8 轉碼 JSON 字串寫入作為 JSON 陣列元素的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary>寫入字串文字值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="value">要以UTF-8 轉碼 JSON 字串寫入作為 JSON 陣列元素的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary>寫入預先編碼的文字值 (以 JSON 字串)，作為 JSON 陣列的元素。</summary>
      <param name="value">要以 UTF-8 轉碼 JSON 字串寫入作為 JSON 陣列元素的 JSON 編碼值。</param>
      <exception cref="T:System.InvalidOperationException">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary>取得目前執行個體到目前為止認可至輸出的位元組總數。</summary>
      <returns>到目前為止為止認可至輸出的位元組總數 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary>取得 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 到目前為止所寫入但尚未排清到輸出並認可的位元組數目。</summary>
      <returns>目前為止所寫入的位元組數目，尚未排清 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 到輸出和認可的位元組數目。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary>取得目前權杖的深度。</summary>
      <returns>目前 token 的深度。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary>取得使用此執行個體寫入 JSON 時的自訂行為，指出是否要在寫入時將輸出格式化、是否要略過結構化 JSON 驗證，以及要逸出哪些字元。</summary>
      <returns>這個寫入器實例的自訂行為，用於格式化、驗證和轉義。</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.IThreadPoolWorkItem">
      <summary>表示可由 <see cref="T:System.Threading.ThreadPool" /> 執行的工作項目。</summary>
    </member>
    <member name="M:System.Threading.IThreadPoolWorkItem.Execute">
      <summary>在執行緒集區執行工作項目。</summary>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>代表呼叫 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 時已經登錄的控制代碼。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>將 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 方法所發出之已登錄等候作業取消。</summary>
      <param name="waitObject">要通知的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <returns>如果函式成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>提供執行緒的集區，可用來執行工作、張貼工作項目、處理非同步 I/O、代表其他執行緒等候，以及處理計時器。</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary>可將作業系統的控制代碼繫結至 <see cref="T:System.Threading.ThreadPool" />。</summary>
      <param name="osHandle">持有控制代碼的 <see cref="T:System.IntPtr" />。 控制代碼必須已經對 Unmanaged 側的重疊 I/O 開啟。</param>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>如果控制代碼已繫結，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary>可將作業系統的控制代碼繫結至 <see cref="T:System.Threading.ThreadPool" />。</summary>
      <param name="osHandle">
        <see cref="T:System.Runtime.InteropServices.SafeHandle" />，包含作業系統控制代碼。 控制代碼必須已經對 Unmanaged 側的重疊 I/O 開啟。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="osHandle" /> 為 <see langword="null" />。</exception>
      <returns>如果控制代碼已繫結，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary>擷取 <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> 方法所傳回之執行緒集區的執行緒最大數目，與目前作用中數目之間的差異。</summary>
      <param name="workerThreads">可用背景工作執行緒的數目。</param>
      <param name="completionPortThreads">可用非同步 I/O 執行緒的數目。</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>擷取可並行使用之執行緒集區的要求數目。 超過該數目的所有要求會繼續佇列，直到可以使用執行緒集區執行緒為止。</summary>
      <param name="workerThreads">執行緒集區中的背景工作執行緒最大數目。</param>
      <param name="completionPortThreads">執行緒集區中的非同步 I/O 執行緒最大數目。</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary>在切換至管理執行緒建立和解構的演算法之前，擷取執行緒集區隨著提出新要求，視需要建立的執行緒最小數目。</summary>
      <param name="workerThreads">當這個方法傳回時，會包含執行緒集區視需要建立的背景工作執行緒最小數目。</param>
      <param name="completionPortThreads">當這個方法傳回時，會包含執行緒集區視需要建立的非同步 I/O 執行緒最小數目。</param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>將方法排入佇列，以等候執行。 可以使用執行緒集區執行緒時，即可執行這個方法。</summary>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" />，代表要執行的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">Common Language Runtime (CLR) 已裝載，而且主機不支援這個動作。</exception>
      <returns>如果方法成功佇列則為 <see langword="true" />；如果工作項目無法佇列則會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>將方法排入佇列，以等候執行，並指定包含這個方法所要使用之資料的物件。 可以使用執行緒集區執行緒時，即可執行這個方法。</summary>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" />，代表要執行的方法。</param>
      <param name="state">物件，包含這個方法所要使用的資料。</param>
      <exception cref="T:System.NotSupportedException">Common Language Runtime (CLR) 已裝載，而且主機不支援這個動作。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> 為 <see langword="null" />。</exception>
      <returns>如果方法成功佇列則為 <see langword="true" />；如果工作項目無法佇列則會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>將 <see cref="T:System.Action`1" /> 委派指定的方法排入佇列以便執行，並提供將由方法使用的資料。 可以使用執行緒集區執行緒時，即可執行這個方法。</summary>
      <param name="callBack">
        <see cref="T:System.Action`1" />，代表要執行的方法。</param>
      <param name="state">物件，包含這個方法所要使用的資料。</param>
      <param name="preferLocal">
        <see langword="true" /> 以偏好將佇列中工作項目排入接近目前執行緒的佇列；<see langword="false" /> 以偏好將工作項目排入執行緒集區的共用佇列。</param>
      <typeparam name="TState">
        <paramref name="state" /> 項目的類型。</typeparam>
      <returns>如果方法成功佇列則為 <see langword="true" />；如果工作項目無法佇列則會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>指定 32 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</summary>
      <param name="waitObject">要註冊的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 參數時要呼叫的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委派。</param>
      <param name="state">傳遞至委派的物件。</param>
      <param name="millisecondsTimeOutInterval">逾時以毫秒為單位。 如果 <paramref name="millisecondsTimeOutInterval" /> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。 如果 <paramref name="millisecondsTimeOutInterval" /> 為 -1，則絕對不會耗用函式的逾時間隔。</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</exception>
      <returns>封裝原生控制代碼的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>指定 64 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</summary>
      <param name="waitObject">要註冊的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 參數時要呼叫的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委派。</param>
      <param name="state">傳送至委派的物件。</param>
      <param name="millisecondsTimeOutInterval">逾時以毫秒為單位。 如果 <paramref name="millisecondsTimeOutInterval" /> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。 如果 <paramref name="millisecondsTimeOutInterval" /> 為 -1，則絕對不會耗用函式的逾時間隔。</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</exception>
      <returns>封裝原生控制代碼的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>指定 <see cref="T:System.Threading.WaitHandle" /> 值表示逾時值，藉此註冊要等候 <see cref="T:System.TimeSpan" /> 的委派。</summary>
      <param name="waitObject">要註冊的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 參數時要呼叫的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委派。</param>
      <param name="state">傳送至委派的物件。</param>
      <param name="timeout">以 <see cref="T:System.TimeSpan" /> 表示的逾時值。 如果 <paramref name="timeout" /> 為 0 (零)，則函式會測試物件的狀態並立即傳回。 如果 <paramref name="timeout" /> 為 -1，則絕對不會耗用函式的逾時間隔。</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 參數小於 -1。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="timeout" /> 參數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <returns>封裝原生控制代碼的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>指定 32 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</summary>
      <param name="waitObject">要註冊的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 參數時要呼叫的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委派。</param>
      <param name="state">傳送至委派的物件。</param>
      <param name="millisecondsTimeOutInterval">逾時以毫秒為單位。 如果 <paramref name="millisecondsTimeOutInterval" /> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。 如果 <paramref name="millisecondsTimeOutInterval" /> 為 -1，則絕對不會耗用函式的逾時間隔。</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</exception>
      <returns>可用來取消已註冊之等候作業的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary>設定可並行使用之執行緒集區的要求數目。 超過該數目的所有要求會繼續佇列，直到可以使用執行緒集區執行緒為止。</summary>
      <param name="workerThreads">執行緒集區中的背景工作執行緒最大數目。</param>
      <param name="completionPortThreads">執行緒集區中的非同步 I/O 執行緒最大數目。</param>
      <returns>如果變更成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary>在切換至管理執行緒建立和解構的演算法之前，設定執行緒集區隨著提出新要求，視需要建立的執行緒最小數目。</summary>
      <param name="workerThreads">執行緒集區視需要建立的背景工作執行緒最小數目。</param>
      <param name="completionPortThreads">執行緒集區視需要建立的非同步 I/O 執行緒最小數目。</param>
      <returns>如果變更成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary>將重疊的 I/O 作業排入佇列，以等候執行。</summary>
      <param name="overlapped">要排入佇列的 <see cref="T:System.Threading.NativeOverlapped" /> 結構。</param>
      <returns>如果這項作業已成功排入 I/O 完成連接埠的佇列，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)">
      <summary>將指定的工作項目物件排入執行緒集區。</summary>
      <param name="callBack">當執行緒集區中執行緒取用工作項目時，要叫用的工作項目。</param>
      <param name="preferLocal">
        <see langword="true" /> 以偏好將佇列中工作項目排入接近目前執行緒的佇列；<see langword="false" /> 以偏好將工作項目排入執行緒集區的共用佇列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">工作項目是 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.OutOfMemoryException">無法將此工作項目排入佇列中。</exception>
      <returns>如果方法成功，則為 <see langword="true" />；如果無法將工作項目排入佇列，則會擲回 <see cref="T:System.OutOfMemoryException" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>將指定的委派排入執行緒集區的佇列，但不會將呼叫堆疊傳播至背景工作執行緒。</summary>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" />，代表當執行緒集區中的執行緒選取工作項目時，要叫用的委派。</param>
      <param name="state">接受執行緒集區的服務時，傳遞給委派的物件。</param>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.ApplicationException">發生了記憶體不足的狀況。</exception>
      <exception cref="T:System.OutOfMemoryException">無法將此工作項目排入佇列中。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> 為 <see langword="null" />。</exception>
      <returns>如果方法成功，則為 <see langword="true" />；如果無法將工作項目排入佇列，則會擲回 <see cref="T:System.OutOfMemoryException" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>將 <see cref="T:System.Action`1" /> 指定的方法排入佇列以便執行，並指定包含這個方法所要使用之資料的物件。 可以使用執行緒集區執行緒時，即可執行這個方法。</summary>
      <param name="callBack">代表要執行之方法的委派。</param>
      <param name="state">物件，包含這個方法所要使用的資料。</param>
      <param name="preferLocal">
        <see langword="true" /> 以偏好將佇列中工作項目排入接近目前執行緒的佇列；<see langword="false" /> 以偏好將工作項目排入執行緒集區的共用佇列。</param>
      <typeparam name="TState">
        <paramref name="state" /> 項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法將此工作項目排入佇列中。</exception>
      <returns>如果方法成功佇列則為 <see langword="true" />；如果工作項目無法佇列則會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>使用 32 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。 這個方法不會將呼叫堆疊傳播至背景工作執行緒。</summary>
      <param name="waitObject">要註冊的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 參數時要呼叫的委派。</param>
      <param name="state">傳遞至委派的物件。</param>
      <param name="millisecondsTimeOutInterval">逾時以毫秒為單位。 如果 <paramref name="millisecondsTimeOutInterval" /> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。 如果 <paramref name="millisecondsTimeOutInterval" /> 為 -1，則絕對不會耗用函式的逾時間隔。</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>可用來取消已註冊之等候作業的 <see cref="T:System.Threading.RegisteredWaitHandle" /> 物件。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>指定 64 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。 這個方法不會將呼叫堆疊傳播至背景工作執行緒。</summary>
      <param name="waitObject">要註冊的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 參數時要呼叫的委派。</param>
      <param name="state">傳遞至委派的物件。</param>
      <param name="millisecondsTimeOutInterval">逾時以毫秒為單位。 如果 <paramref name="millisecondsTimeOutInterval" /> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。 如果 <paramref name="millisecondsTimeOutInterval" /> 為 -1，則絕對不會耗用函式的逾時間隔。</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>可用來取消已註冊之等候作業的 <see cref="T:System.Threading.RegisteredWaitHandle" /> 物件。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>指定 <see cref="T:System.Threading.WaitHandle" /> 值表示逾時值，藉此註冊要等候 <see cref="T:System.TimeSpan" /> 的委派。這個方法不會將呼叫堆疊傳播至背景工作執行緒。</summary>
      <param name="waitObject">要註冊的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 參數時要呼叫的委派。</param>
      <param name="state">傳遞至委派的物件。</param>
      <param name="timeout">以 <see cref="T:System.TimeSpan" /> 表示的逾時值。 如果 <paramref name="timeout" /> 為 0 (零)，則函式會測試物件的狀態並立即傳回。 如果 <paramref name="timeout" /> 為 -1，則絕對不會耗用函式的逾時間隔。</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 參數小於 -1。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="timeout" /> 參數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>可用來取消已註冊之等候作業的 <see cref="T:System.Threading.RegisteredWaitHandle" /> 物件。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>指定 32 位元帶正負號的整數表示逾時值 (以毫秒為單位)，藉此註冊要等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。 這個方法不會將呼叫堆疊傳播至背景工作執行緒。</summary>
      <param name="waitObject">要註冊的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" />，而不要使用 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 參數時要呼叫的委派。</param>
      <param name="state">傳遞至委派的物件。</param>
      <param name="millisecondsTimeOutInterval">逾時以毫秒為單位。 如果 <paramref name="millisecondsTimeOutInterval" /> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。 如果 <paramref name="millisecondsTimeOutInterval" /> 為 -1，則絕對不會耗用函式的逾時間隔。</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數；<see langword="false" /> 表示每當等候作業完成即重設計時器，直到移除註冊等候作業為止。</param>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>可用來取消已註冊之等候作業的 <see cref="T:System.Threading.RegisteredWaitHandle" /> 物件。</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.CompletedWorkItemCount">
      <summary>取得目前已經處理完成的工作項目數。</summary>
      <returns>到目前為止已處理的工作專案數。</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.PendingWorkItemCount">
      <summary>取得目前已排入佇列，等待處理的工作項目數。</summary>
      <returns>目前已排入佇列要處理的工作專案數。</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.ThreadCount">
      <summary>取得目前存在的執行緒集區執行緒數。</summary>
      <returns>目前存在的執行緒集區執行緒數目。</returns>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>表示執行緒集區執行緒執行的回呼方法。</summary>
      <param name="state">物件，它包含回呼方法所使用的資訊。</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>表示 <see cref="T:System.Threading.WaitHandle" /> 收到信號或逾時時呼叫的方法。</summary>
      <param name="state">物件，它包含回呼方法所使用的資訊。</param>
      <param name="timedOut">
        <see langword="true" />，表示 <see cref="T:System.Threading.WaitHandle" /> 逾時；<see langword="false" />，表示收到信號。</param>
    </member>
  </members>
</doc>
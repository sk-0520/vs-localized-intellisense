<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualBasic.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualBasic.AppWinStyle">
      <summary>
        <see langword="Shell" /> 関数の呼び出し時に起動されるプログラムに使用するウィンドウ スタイルを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.Hide">
      <summary>ウィンドウは非表示になり、フォーカスは非表示ウィンドウに渡されます。 このメンバーは、Visual Basic 定数の <see langword="vbHide" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MaximizedFocus">
      <summary>ウィンドウはフォーカスを持った状態で最大化されます。 このメンバーは、Visual Basic 定数の <see langword="vbMaximizedFocus" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MinimizedFocus">
      <summary>ウィンドウはフォーカスを持った状態でアイコンとして表示されます。 このメンバーは、Visual Basic 定数の <see langword="vbMinimizedFocus" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MinimizedNoFocus">
      <summary>ウィンドウはアイコンとして表示されます。 現在アクティブなウィンドウはアクティブなままです。 このメンバーは、Visual Basic 定数の <see langword="vbMinimizedNoFocus" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.NormalFocus">
      <summary>ウィンドウはフォーカスを保持し、元のサイズと位置に戻されます。 このメンバーは、Visual Basic 定数の <see langword="vbNormalFocus" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.NormalNoFocus">
      <summary>ウィンドウは最後に表示されたときのサイズと位置に戻されます。 現在アクティブなウィンドウはアクティブなままです。 このメンバーは、Visual Basic 定数の <see langword="vbNormalNoFocus" />に相当します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CallType">
      <summary>
        <see langword="CallByName" /> 関数を呼び出すときに呼び出されるプロシージャの種類を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Get">
      <summary>プロパティ値を取得します。  このメンバーは、Visual Basic 定数の <see langword="vbGet" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Let">
      <summary>オブジェクトのプロパティ値を設定します。 このメンバーは、Visual Basic 定数の <see langword="vbLet" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Method">
      <summary>メソッドを起動します。  このメンバーは、Visual Basic 定数の <see langword="vbMethod" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Set">
      <summary>プロパティ値を設定します。  このメンバーは、Visual Basic 定数の <see langword="vbSet" />に相当します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Collection">
      <summary>Visual Basic の <see langword="Collection" /> は、単位として参照できる項目の順序付けされたセットです。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.#ctor">
      <summary>Visual Basic の新しい <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトを作成して返します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
      <summary>要素を <see langword="Collection" /> オブジェクトに追加します。</summary>
      <param name="Item">必須です。 コレクションに追加する要素を示す任意の型のオブジェクトです。</param>
      <param name="Key">省略可能。 コレクション内の新しい要素にアクセスするときに位置インデックスの代わりに使用できるキー文字列を指定する、一意の <see langword="String" /> 型の式。</param>
      <param name="Before">省略可能。 コレクション内の位置を相対的に示す式。 追加される要素は、コレクション内で <paramref name="Before" /> 引数によって識別された要素の前に配置されます。 <paramref name="Before" /> が数式である場合、値の範囲は 1 以上でコレクションの <see cref="P:Microsoft.VisualBasic.Collection.Count" /> プロパティ値以下である必要があります。 <paramref name="Before" /> が <see langword="String" /> 型の式である場合は、参照される要素がコレクションに追加されたときに指定されたキー文字列に対応する必要があります。 <paramref name="Before" /> と <paramref name="After" /> の両方を指定することはできません。</param>
      <param name="After">省略可能。 コレクション内の位置を相対的に示す式。 追加される要素は、コレクション内で <paramref name="After" /> 引数によって識別された要素の後に配置されます。 <paramref name="After" /> が数式である場合、値の範囲は 1 以上でコレクションの <see langword="Count" /> プロパティ値以下である必要があります。 <paramref name="After" /> が <see langword="String" /> 型の式である場合は、参照される要素がコレクションに追加されたときに指定されたキー文字列に対応する必要があります。 <paramref name="Before" /> と <paramref name="After" /> の両方を指定することはできません。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Clear">
      <summary>Visual Basic の <see langword="Collection" /> オブジェクトの要素をすべて削除します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
      <summary>Visual Basic の <see langword="Collection" /> オブジェクトに特定のキーを持つ要素が含まれているかどうかを示す値を返します。</summary>
      <param name="Key">必須です。 コレクションの要素を検索するキーを指定する <see langword="String" /> 型の式。</param>
      <returns>Visual Basic の <see langword="Collection" /> オブジェクトに特定のキーを持つ要素が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
      <summary>
        <see langword="Collection" /> オブジェクトから要素を削除します。</summary>
      <param name="Index">コレクションの要素の位置を指定する数式。 <paramref name="Index" /> は 1 からコレクションの <see cref="P:Microsoft.VisualBasic.Collection.Count" /> プロパティの値までの数字であることが必要です。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
      <summary>
        <see langword="Collection" /> オブジェクトから要素を削除します。</summary>
      <param name="Key">コレクションの要素にアクセスするときに位置インデックスの代わりに使用できるキー文字列を指定する、一意の <see langword="String" /> 型の式。 <paramref name="Key" /> は、要素がコレクションに追加されたときに指定された <paramref name="Key" /> 引数に対応します。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Count">
      <summary>コレクション内の要素の数を取得します。</summary>
      <returns>コレクション内の要素の数。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
      <summary>
        <see langword="Collection" /> オブジェクトの特定の要素を、位置またはキーに基づいて取得します。</summary>
      <param name="Index">コレクションの要素の位置を指定する数式。 <paramref name="Index" /> は 1 からコレクションの <see cref="P:Microsoft.VisualBasic.Collection.Count" /> プロパティの値までの数字であることが必要です。 または、(B) コレクションの要素の位置またはキー文字列を指定する <see langword="Object" /> 型の式。</param>
      <returns>
        <see langword="Collection" />位置またはキーによってオブジェクトの特定の要素。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
      <summary>
        <see langword="Collection" /> オブジェクトの特定の要素を、位置またはキーに基づいて取得します。</summary>
      <param name="Index">コレクションの要素の位置を指定する数式。 <paramref name="Index" /> は 1 からコレクションの <see cref="P:Microsoft.VisualBasic.Collection.Count" /> プロパティの値までの数字であることが必要です。 または、(B) コレクションの要素の位置またはキー文字列を指定する <see langword="Object" /> 型の式。</param>
      <returns>
        <see langword="Collection" />位置またはキーによってオブジェクトの特定の要素。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.String)">
      <summary>
        <see langword="Collection" /> オブジェクトの特定の要素を、位置またはキーに基づいて取得します。</summary>
      <param name="Key">コレクションの要素にアクセスするときに位置インデックスの代わりに使用できるキー文字列を指定する、一意の <see langword="String" /> 型の式。 <paramref name="Key" /> は、要素がコレクションに追加されたときに指定された <paramref name="Key" /> 引数に対応します。</param>
      <returns>
        <see langword="Collection" />位置またはキーによってオブジェクトの特定の要素。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.ComClassAttribute">
      <summary>
        <see langword="ComClassAttribute" /> 属性は、クラスを COM オブジェクトとして公開できるようにするメタデータの追加をコンパイラに指示します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor">
      <summary>
        <see langword="ComClassAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String)">
      <summary>
        <see langword="ComClassAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="_ClassID">クラスを一意に識別するために使用する <see langword="ClassID" /> プロパティの値を初期化します。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String,System.String)">
      <summary>
        <see langword="ComClassAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="_ClassID">クラスを一意に識別するために使用する <see langword="ClassID" /> プロパティの値を初期化します。</param>
      <param name="_InterfaceID">インターフェイスを一意に識別するために使用する <see langword="InterfaceID" /> プロパティの値を初期化します。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
        <see langword="ComClassAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="_ClassID">クラスを一意に識別するために使用する <see langword="ClassID" /> プロパティの値を初期化します。</param>
      <param name="_InterfaceID">インターフェイスを一意に識別するために使用する <see langword="InterfaceID" /> プロパティの値を初期化します。</param>
      <param name="_EventId">イベントを一意に識別するために使用する <see langword="EventID" /> プロパティの値を初期化します。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.ClassID">
      <summary>クラスを一意に識別するために使用するクラス ID を取得します。</summary>
      <returns>読み取り専用です。 COM オブジェクトが作成されるときに、クラスを一意に識別するためにコンパイラによって使用される文字列。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.EventID">
      <summary>イベントを一意に識別するときに使用するイベント ID を取得します。</summary>
      <returns>読み取り専用。 COM オブジェクトが作成されるときに、クラスのイベントを一意に識別するためにコンパイラによって使用される文字列。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.InterfaceID">
      <summary>インターフェイスを一意に識別するときに使用するインターフェイス ID を取得します。</summary>
      <returns>読み取り専用です。 COM オブジェクトが作成されるときに、クラスのインターフェイスを一意に識別するためにコンパイラによって使用される文字列。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.InterfaceShadows">
      <summary>COM インターフェイス名がクラスまたは基本クラスの別のメンバーをシャドウすることを示します。</summary>
      <returns>COM インターフェイス名がクラスまたは基本クラスの別のメンバーをシャドウすることを示す <see langword="Boolean" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompareMethod">
      <summary>比較関数を呼び出すときの文字列の比較方法を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Binary">
      <summary>バイナリ比較を実行します。 このメンバーは、Visual Basic 定数の <see langword="vbBinaryCompare" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Text">
      <summary>テキスト比較を実行します。 このメンバーは、Visual Basic 定数の <see langword="vbTextCompare" />に相当します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.BooleanType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.BooleanType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see langword="Boolean" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Boolean" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Boolean" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.BooleanType.FromString(System.String)">
      <summary>指定した文字列に対応する <see langword="Boolean" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Boolean" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Boolean" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ByteType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ByteType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see langword="Byte" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Byte" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Byte" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ByteType.FromString(System.String)">
      <summary>指定した文字列に対応する <see langword="Byte" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Byte" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Byte" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.CharArrayType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharArrayType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see langword="CharArray" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="CharArray" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="CharArray" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharArrayType.FromString(System.String)">
      <summary>指定した文字列に対応する <see langword="CharArray" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="CharArray" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="CharArray" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.CharType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see langword="Char" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Char" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Char" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharType.FromString(System.String)">
      <summary>指定した文字列に対応する <see langword="Char" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Char" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Char" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Conversions">
      <summary>さまざまな型変換を実行するメソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ChangeType(System.Object,System.Type)">
      <summary>オブジェクトを指定された型に変換します。</summary>
      <param name="Expression">変換対象のオブジェクト。</param>
      <param name="TargetType">変換後のオブジェクトの型。</param>
      <returns>指定した型のオブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FallbackUserDefinedConversion(System.Object,System.Type)">
      <summary>オブジェクトを指定された型に変換します。</summary>
      <param name="Expression">変換対象のオブジェクト。</param>
      <param name="TargetType">変換後のオブジェクトの型。</param>
      <returns>指定した型のオブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharAndCount(System.Char,System.Int32)">
      <summary>指定されたバイト数の <see cref="T:System.Char" /> 値を文字列に変換します。</summary>
      <param name="Value">変換する <see langword="Char" /> 値。</param>
      <param name="Count">
        <see langword="Char" /> 値のバイト数。</param>
      <returns>指定した値の文字列形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArray(System.Char[])">
      <summary>
        <see cref="T:System.Char" /> 配列を文字列に変換します。</summary>
      <param name="Value">変換対象の <see langword="Char" /> 配列。</param>
      <returns>指定した配列の文字列形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArraySubset(System.Char[],System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Char" /> 配列のサブセットを文字列に変換します。</summary>
      <param name="Value">変換対象の <see langword="Char" /> 配列。</param>
      <param name="StartIndex">0 から始まるインデックスでの開始位置。</param>
      <param name="Length">サブセットのバイト単位の長さ。</param>
      <returns>指定した配列の、開始位置から指定した長さまでの文字列形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.Object)">
      <summary>オブジェクトを <see cref="T:System.Boolean" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>
        <see langword="Boolean" /> 値。 オブジェクトが null の場合は <see langword="False" /> を返し、それ以外の場合は <see langword="True" /> を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.String)">
      <summary>文字列を <see cref="T:System.Boolean" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>
        <see langword="Boolean" /> 値。 文字列が null の場合は <see langword="False" /> を返し、それ以外の場合は <see langword="True" /> を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.Object)">
      <summary>オブジェクトを <see cref="T:System.Byte" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="Byte" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.String)">
      <summary>文字列を <see cref="T:System.Byte" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see langword="Byte" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.Object)">
      <summary>オブジェクトを <see cref="T:System.Char" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="Char" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.String)">
      <summary>文字列を <see cref="T:System.Char" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see langword="Char" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.Object)">
      <summary>オブジェクトを 1 次元の <see cref="T:System.Char" /> 配列に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>1 次元の <see langword="Char" /> 配列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.String)">
      <summary>文字列を 1 次元の <see cref="T:System.Char" /> 配列に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>1 次元の <see langword="Char" /> 配列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.Object)">
      <summary>オブジェクトを <see cref="T:System.DateTime" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="DateTime" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.String)">
      <summary>文字列を <see cref="T:System.DateTime" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see langword="DateTime" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Boolean)">
      <summary>
        <see cref="T:System.Boolean" /> 値を <see cref="T:System.Decimal" /> 値に変換します。</summary>
      <param name="Value">変換するブール値。</param>
      <returns>ブール値の <see langword="Decimal" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Object)">
      <summary>オブジェクトを <see cref="T:System.Decimal" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="Decimal" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.String)">
      <summary>文字列を <see cref="T:System.Decimal" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see langword="Decimal" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.Object)">
      <summary>オブジェクトを <see cref="T:System.Double" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see cref="T:System.Double" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.String)">
      <summary>文字列を <see cref="T:System.Double" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see cref="T:System.Double" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToGenericParameter``1(System.Object)">
      <summary>オブジェクトをジェネリック型 <paramref name="T" /> に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <typeparam name="T">変換後の <paramref name="Value" /> の型。</typeparam>
      <returns>ジェネリック型 <paramref name="T" /> の構造体またはオブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.Object)">
      <summary>オブジェクトを整数値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="int" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.String)">
      <summary>文字列を整数値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see langword="int" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.Object)">
      <summary>オブジェクトを <see langword="Long" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="Long" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.String)">
      <summary>文字列を <see langword="Long" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see langword="Long" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.Object)">
      <summary>オブジェクトを <see cref="T:System.SByte" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="SByte" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.String)">
      <summary>文字列を <see cref="T:System.SByte" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see langword="SByte" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.Object)">
      <summary>オブジェクトを <see langword="Short" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="Short" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.String)">
      <summary>文字列を <see langword="Short" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see langword="Short" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.Object)">
      <summary>オブジェクトを <see cref="T:System.Single" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see cref="T:System.Single" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.String)">
      <summary>
        <see cref="T:System.String" /> を <see cref="T:System.Single" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see cref="T:System.Single" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Boolean)">
      <summary>
        <see cref="T:System.Boolean" /> 値を <see cref="T:System.String" /> に変換します。</summary>
      <param name="Value">変換する <see langword="Boolean" /> 値。</param>
      <returns>
        <see langword="String" /> 値の <see langword="Boolean" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Byte)">
      <summary>
        <see cref="T:System.Byte" /> 値を <see cref="T:System.String" /> に変換します。</summary>
      <param name="Value">変換する <see langword="Byte" /> 値。</param>
      <returns>
        <see langword="String" /> 値の <see langword="Byte" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Char)">
      <summary>
        <see cref="T:System.Char" /> 値を <see cref="T:System.String" /> に変換します。</summary>
      <param name="Value">変換する <see langword="Char" /> 値。</param>
      <returns>
        <see langword="String" /> 値の <see langword="Char" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 値を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see langword="DateTime" /> 値。</param>
      <returns>
        <see langword="String" /> 値の <see langword="DateTime" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 値を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see langword="Decimal" /> 値。</param>
      <returns>
        <see langword="String" /> 値の <see langword="Decimal" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal,System.Globalization.NumberFormatInfo)">
      <summary>指定された数値書式を使用して、<see cref="T:System.Decimal" /> 値を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see langword="decimal" /> 値。</param>
      <param name="NumberFormat">
        <see cref="T:System.Globalization.NumberFormatInfo" /> に従って使用する数値書式。</param>
      <returns>
        <see langword="String" /> 値の <see langword="Decimal" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double)">
      <summary>
        <see cref="T:System.Double" /> 値を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see cref="T:System.Double" /> 値。</param>
      <returns>
        <see cref="T:System.Double" /> 値の文字列表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double,System.Globalization.NumberFormatInfo)">
      <summary>指定された数値書式を使用して、<see cref="T:System.Double" /> 値を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see cref="T:System.Double" /> 値。</param>
      <param name="NumberFormat">
        <see cref="T:System.Globalization.NumberFormatInfo" /> に従って使用する数値書式。</param>
      <returns>
        <see cref="T:System.Double" /> 値の文字列表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int16)">
      <summary>
        <see langword="Short" /> 値を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see langword="Short" /> 値。</param>
      <returns>
        <see langword="String" /> 値の <see langword="Short" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int32)">
      <summary>整数値を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see langword="int" /> 値。</param>
      <returns>
        <see langword="String" /> 値の <see langword="int" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int64)">
      <summary>
        <see langword="Long" /> 値を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see langword="Long" /> 値。</param>
      <returns>
        <see langword="String" /> 値の <see langword="Long" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Object)">
      <summary>オブジェクトを <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="String" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single)">
      <summary>
        <see cref="T:System.Single" /> 値 (単精度浮動小数点数) を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see cref="T:System.Single" /> 値。</param>
      <returns>
        <see cref="T:System.Single" /> 値の文字列表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single,System.Globalization.NumberFormatInfo)">
      <summary>指定された数値書式を使用して、<see cref="T:System.Single" /> 値を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see cref="T:System.Single" /> 値。</param>
      <param name="NumberFormat">
        <see cref="T:System.Globalization.NumberFormatInfo" /> に従って使用する数値書式。</param>
      <returns>
        <see cref="T:System.Single" /> 値の文字列表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt32)">
      <summary>
        <see langword="uint" /> 値を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see langword="Uint" /> 値。</param>
      <returns>
        <see langword="String" /> 値の <see langword="Uint" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt64)">
      <summary>
        <see langword="Ulong" /> 値を <see cref="T:System.String" /> 値に変換します。</summary>
      <param name="Value">変換する <see langword="Ulong" /> 値。</param>
      <returns>
        <see langword="String" /> 値の <see langword="Ulong" /> 表現。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.Object)">
      <summary>オブジェクトを <see langword="Uint" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="Uint" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.String)">
      <summary>文字列を <see langword="Uint" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see langword="Uint" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.Object)">
      <summary>オブジェクトを <see langword="Ulong" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="Ulong" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.String)">
      <summary>文字列を <see langword="Ulong" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see langword="Ulong" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.Object)">
      <summary>オブジェクトを <see langword="Ushort" /> 値に変換します。</summary>
      <param name="Value">変換対象のオブジェクト。</param>
      <returns>オブジェクトの <see langword="Ushort" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.String)">
      <summary>文字列を <see langword="Ushort" /> 値に変換します。</summary>
      <param name="Value">変換する文字列。</param>
      <returns>文字列の <see langword="Ushort" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DateType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see langword="Date" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Date" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Date" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromString(System.String)">
      <summary>指定した文字列に対応する <see langword="Date" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Date" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Date" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromString(System.String,System.Globalization.CultureInfo)">
      <summary>指定した文字列とカルチャ情報に対応する <see langword="Date" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Date" /> 値に変換する文字列。</param>
      <param name="culture">必須です。 カルチャに応じて日付の値を書式設定および表示する方法を定義する <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Date" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DecimalType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromBoolean(System.Boolean)">
      <summary>指定した <see langword="Decimal" /> 値に対応する <see langword="Boolean" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Boolean" /> に変換する <see langword="Decimal" /> 値。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Decimal" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see langword="Decimal" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Decimal" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Decimal" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>指定したオブジェクトと数値書式情報に対応する <see langword="Decimal" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Decimal" /> 値に変換するオブジェクト。</param>
      <param name="NumberFormat">カルチャに応じて数値を形式指定および表示する方法を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Decimal" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromString(System.String)">
      <summary>指定した文字列に対応する <see langword="Decimal" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Decimal" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Decimal" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>指定した文字列と数値書式情報に対応する <see langword="Decimal" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Decimal" /> 値に変換する文字列。</param>
      <param name="NumberFormat">カルチャに応じて数値を形式指定および表示する方法を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Decimal" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.Parse(System.String,System.Globalization.NumberFormatInfo)">
      <summary>指定した文字列と数値書式情報に対応する <see langword="Decimal" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Decimal" /> 値に変換する文字列。</param>
      <param name="NumberFormat">カルチャに応じて数値を形式指定および表示する方法を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Decimal" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute">
      <summary>クラスに適用される場合、コンパイラは、既定の代理コンストラクターからコンポーネント初期化メソッドを暗黙のうちに呼び出します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute" /> 属性の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DoubleType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see cref="T:System.Double" /> 値を返します。</summary>
      <param name="Value">必須です。 <see cref="T:System.Double" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see cref="T:System.Double" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>指定したオブジェクトに対応する <see cref="T:System.Double" /> 値を返します。</summary>
      <param name="Value">必須です。 <see cref="T:System.Double" /> 値に変換するオブジェクト。</param>
      <param name="NumberFormat">カルチャに応じて数値を形式指定および表示する方法を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see cref="T:System.Double" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromString(System.String)">
      <summary>指定した文字列に対応する <see cref="T:System.Double" /> 値を返します。</summary>
      <param name="Value">必須です。 <see cref="T:System.Double" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see cref="T:System.Double" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>指定した文字列と数値書式情報に対応する <see cref="T:System.Double" /> 値を返します。</summary>
      <param name="Value">必須です。 <see cref="T:System.Double" /> 値に変換する文字列。</param>
      <param name="NumberFormat">カルチャに応じて数値を形式指定および表示する方法を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see cref="T:System.Double" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.Parse(System.String)">
      <summary>指定した文字列に対応する <see cref="T:System.Double" /> 値を返します。</summary>
      <param name="Value">必須です。 <see cref="T:System.Double" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see cref="T:System.Double" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.Parse(System.String,System.Globalization.NumberFormatInfo)">
      <summary>指定した文字列と数値書式情報に対応する <see cref="T:System.Double" /> 値を返します。</summary>
      <param name="Value">必須です。 <see cref="T:System.Double" /> 値に変換する文字列。</param>
      <param name="NumberFormat">カルチャに応じて数値を形式指定および表示する方法を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see cref="T:System.Double" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization">
      <summary>Visual Basic コンパイラは、静的なローカルを初期化しているときにこのクラスを使用します。これは、コードから直接呼び出すためのものではありません。 静的ローカル変数が初期化に失敗した場合、この型の例外がスローされます。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.IntegerType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IntegerType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see langword="Integer" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Integer" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Integer" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IntegerType.FromString(System.String)">
      <summary>指定した文字列に対応する <see langword="Integer" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Integer" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Integer" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LateBinding">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateCall(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean[])">
      <summary>オブジェクトのメソッドの遅延バインディングによる呼び出しを実行します。</summary>
      <param name="o">メソッドを呼び出すオブジェクト。</param>
      <param name="objType">オブジェクトの型。</param>
      <param name="name">呼び出す <paramref name="o" /> のメソッド名。</param>
      <param name="args">メソッドに渡すパラメーター値の配列。</param>
      <param name="paramnames">
        <paramref name="args" /> 配列内の値を渡すパラメーターの名前を格納した配列。</param>
      <param name="CopyBack">
        <see langword="Boolean" /> 値の配列。<see langword="True" /> は、対応するパラメーターが <see langword="ByRef" /> で渡されることを示します。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateGet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean[])">
      <summary>オブジェクトからの遅延バインディング値を返します。</summary>
      <param name="o">値を返すオブジェクト。</param>
      <param name="objType">オブジェクトの型。</param>
      <param name="name">値を取得する <paramref name="o" /> のメンバー名。</param>
      <param name="args">
        <paramref name="o" /> が 1 次元配列または多次元配列の場合は、<paramref name="o" /> 内での位置を指定する 1 つ以上のインデックス値の配列。または、オブジェクト <paramref name="o" /> に渡す引数値。</param>
      <param name="paramnames">
        <paramref name="args" /> 配列内の値を渡すパラメーターの名前を格納した配列。</param>
      <param name="CopyBack">
        <see langword="Boolean" /> 値の配列。<see langword="True" /> は、対応するパラメーターが <see langword="ByRef" /> で渡されることを示します。</param>
      <returns>
        <paramref name="o" /> が配列の場合は、<paramref name="o" /> で指定した位置の <paramref name="args" /> の値。 <paramref name="o" /> がオブジェクトの場合は、<paramref name="o" /> の名前付きパラメーターとそれに関連する <paramref name="paramnames" /> の値を使用して呼び出された <paramref name="args" /> の戻り値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexGet(System.Object,System.Object[],System.String[])">
      <summary>指定されたインデックスまたはパラメーターを使用して、オブジェクトから遅延バインディング値を返します。</summary>
      <param name="o">値を返すオブジェクト。</param>
      <param name="args">
        <paramref name="o" /> が 1 次元配列または多次元配列の場合は、<paramref name="o" /> 内での位置を指定する 1 つ以上のインデックス値の配列。または、オブジェクト <paramref name="o" /> に渡す引数値。</param>
      <param name="paramnames">
        <paramref name="args" /> 配列内の値を渡すパラメーターの名前を格納した配列。</param>
      <returns>
        <paramref name="o" /> が配列の場合は、<paramref name="o" /> で指定した位置の <paramref name="args" /> の値。 <paramref name="o" /> がオブジェクトの場合は、<paramref name="o" /> の名前付きパラメーターとそれに関連する <paramref name="paramnames" /> の値を使用して呼び出された <paramref name="args" /> の戻り値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexSet(System.Object,System.Object[],System.String[])">
      <summary>指定されたパラメーターを使用して、オブジェクトの遅延バインディング値を設定します。</summary>
      <param name="o">値を設定するオブジェクト。</param>
      <param name="args">
        <paramref name="o" /> が 1 次元配列または多次元配列の場合は、<paramref name="o" /> 内での位置を指定する 1 つ以上のインデックス値の配列。または、オブジェクト <paramref name="o" /> に渡す引数値。</param>
      <param name="paramnames">
        <paramref name="args" /> 配列内の値を渡すパラメーターの名前を格納した配列。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>指定されたパラメーターを使用して、オブジェクトの遅延バインディング値を設定します。</summary>
      <param name="o">値を設定するオブジェクト。</param>
      <param name="args">オブジェクト <paramref name="o" /> に渡す 1 つ以上のパラメーター値の配列。</param>
      <param name="paramnames">
        <paramref name="args" /> 配列内の値を渡すパラメーターの名前を格納した配列。</param>
      <param name="OptimisticSet">設定するメンバーが見つからないときにスローされる例外を抑制する場合は <see langword="True" />。</param>
      <param name="RValueBase">
        <paramref name="o" /> を遅延バインディング式の結果として指定する場合は <see langword="True" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[])">
      <summary>指定されたパラメーターを使用して、オブジェクトのメンバーの遅延バインディング値を設定します。</summary>
      <param name="o">メンバーの値を設定するオブジェクト。</param>
      <param name="objType">オブジェクトの型。</param>
      <param name="name">設定するメンバーの名前。</param>
      <param name="args">
        <paramref name="o" /> のメンバーに渡す 1 つ以上のパラメーター値の配列。</param>
      <param name="paramnames">
        <paramref name="args" /> 配列内の値を渡すパラメーターの名前を格納した配列。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateSetComplex(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>指定されたパラメーターを使用して、オブジェクトのメンバーの遅延バインディング値を設定します。</summary>
      <param name="o">メンバーの値を設定するオブジェクト。</param>
      <param name="objType">オブジェクトの型。</param>
      <param name="name">設定するメンバーの名前。</param>
      <param name="args">
        <paramref name="o" /> のメンバーに渡す 1 つ以上のパラメーター値の配列。</param>
      <param name="paramnames">
        <paramref name="args" /> 配列内の値を渡すパラメーターの名前を格納した配列。</param>
      <param name="OptimisticSet">設定するメンバーが見つからないときにスローされる例外を抑制する場合は <see langword="True" />。</param>
      <param name="RValueBase">
        <paramref name="o" /> を遅延バインディング式の結果として指定する場合は <see langword="True" />。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LikeOperator">
      <summary>このクラスには、Visual Basic コンパイラが使用して、Like Operator に対する操作を実行するヘルパーが用意されています。 これは、コードから直接呼び出すためのものではありません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeObject(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)">
      <summary>指定された 2 つのオブジェクトに対してバイナリ文字列比較またはテキスト文字列比較を実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Source">比較対象の文字列。</param>
      <param name="Pattern">
        <paramref name="Source" /> と比較する文字列。</param>
      <param name="CompareOption">テキスト比較を使用するかどうかを指定する <see cref="T:Microsoft.VisualBasic.CompareMethod" /> 列挙体。 <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" /> の場合、このメソッドはテキスト比較を使用します。<see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" /> の場合、このメソッドはバイナリ比較を使用します。</param>
      <returns>文字列が一致する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>指定された 2 つの文字列に対してバイナリ文字列比較またはテキスト文字列比較を実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Source">比較対象の文字列。</param>
      <param name="Pattern">
        <paramref name="Source" /> と比較する文字列。</param>
      <param name="CompareOption">テキスト比較を使用するかどうかを指定する <see cref="T:Microsoft.VisualBasic.CompareMethod" /> 列挙体。 <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" /> の場合、このメソッドはテキスト比較を使用します。<see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" /> の場合、このメソッドはバイナリ比較を使用します。</param>
      <returns>文字列が一致する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LongType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LongType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see langword="Long" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Long" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Long" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LongType.FromString(System.String)">
      <summary>指定した文字列に対応する <see langword="Long" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Long" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Long" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.NewLateBinding">
      <summary>このクラスには、Visual Basic コンパイラが遅延バインディング呼び出しに使用するヘルパーが用意されています。これは、コードから直接呼び出すためのものではありません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackCall(System.Object,System.String,System.Object[],System.String[],System.Boolean)">
      <summary>遅延バインディング メソッドまたは関数呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="MemberName">通知オブジェクトのプロパティまたはメソッドの名前。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="IgnoreReturn">戻り値を無視できるかどうかを示す <see langword="Boolean" /> 値。</param>
      <returns>通知オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackGet(System.Object,System.String,System.Object[],System.String[])">
      <summary>遅延バインディング プロパティの取得またはフィールド アクセスの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="MemberName">通知オブジェクトのプロパティまたはメソッドの名前。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <returns>通知オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackIndexSet(System.Object,System.Object[],System.String[])">
      <summary>遅延バインディング プロパティの設定またはフィールド書き込みの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>遅延バインディング プロパティの設定またはフィールド書き込みの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="OptimisticSet">設定操作を有効にするかどうかを決定するために使用する <see langword="Boolean" /> 値。 プロパティまたはフィールドに中間の値が設定されている場合は <see langword="True" /> を設定します。それ以外の場合は <see langword="False" /> を設定します。</param>
      <param name="RValueBase">遅延参照の基本参照を <see langword="Boolean" /> にするかどうかを指定する <see langword="RValue" /> 値。 遅延参照の基本参照を <see langword="True" /> にする場合は <see langword="RValue" /> に設定します。これにより、値型の <see langword="RValues" /> のフィールドに対して遅延割り当てを実行すると、実行時例外を生成できます。 それ以外の場合は <see langword="False" /> に設定します。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackInvokeDefault1(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>遅延バインディングされた既定のプロパティ/フィールドの取得、または遅延バインディングされた既定のメソッド/関数の呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。 <paramref name="Instance" /> の型が <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> の場合、動的言語ランタイムを使用してバインドします。それ以外の場合は、標準の遅延バインディングを実行します。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="ReportErrors">エラーが発生した場合に例外をスローするかどうかを指定するのに使用される <see langword="Boolean" /> 値。 例外をスローするには <see langword="True" /> に設定します。 エラーが発生した場合に <see langword="False" /> を返すには、<see langword="Nothing" /> に設定します。</param>
      <returns>通知オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackInvokeDefault2(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>遅延バインディングされた既定のプロパティ/フィールドの取得、または遅延バインディングされた既定のメソッド/関数の呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="ReportErrors">エラーが発生した場合に例外をスローするかどうかを指定するのに使用される <see langword="Boolean" /> 値。 例外をスローするには <see langword="True" /> に設定します。 エラーが発生した場合に <see langword="False" /> を返すには、<see langword="Nothing" /> に設定します。</param>
      <returns>通知オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackSet(System.Object,System.String,System.Object[])">
      <summary>遅延バインディング プロパティの設定またはフィールド書き込みの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="MemberName">通知オブジェクトのプロパティまたはメソッドの名前。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackSetComplex(System.Object,System.String,System.Object[],System.Boolean,System.Boolean)">
      <summary>遅延バインディング プロパティの設定またはフィールド書き込みの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="MemberName">通知オブジェクトのプロパティまたはメソッドの名前。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="OptimisticSet">設定操作を有効にするかどうかを決定するために使用する <see langword="Boolean" /> 値。 プロパティまたはフィールドに中間の値が設定されている場合は <see langword="True" /> を設定します。それ以外の場合は <see langword="False" /> を設定します。</param>
      <param name="RValueBase">遅延参照の基本参照を <see langword="Boolean" /> にするかどうかを指定する <see langword="RValue" /> 値。 遅延参照の基本参照を <see langword="True" /> にする場合は <see langword="RValue" /> に設定します。これにより、値型の <see langword="RValues" /> のフィールドに対して遅延割り当てを実行すると、実行時例外を生成できます。 それ以外の場合は <see langword="False" /> に設定します。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCall(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[],System.Boolean)">
      <summary>遅延バインディング メソッドまたは関数呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Type">通知オブジェクトの型。</param>
      <param name="MemberName">通知オブジェクトのプロパティまたはメソッドの名前。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="TypeArguments">引数型の配列。引数型を渡す汎用呼び出しにのみ使用します。</param>
      <param name="CopyBack">引数が <see langword="Boolean" /> パラメーターと一致する呼び出しサイトと通信するために遅延バインダーが使用する、<see langword="ByRef" /> 値の配列。 それぞれの <see langword="True" /> 値は、引数が一致したため <see langword="LateCall" /> に対する呼び出しが完了した後でそれをコピーする必要があることを示します。</param>
      <param name="IgnoreReturn">戻り値を無視できるかどうかを示す <see langword="Boolean" /> 値。</param>
      <returns>通知オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCallInvokeDefault(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>既定のメソッドまたは関数の、遅延バインディングによる呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="ReportErrors">エラーが発生した場合に例外をスローするかどうかを指定するのに使用される <see langword="Boolean" /> 値。 例外をスローするには <see langword="True" /> に設定します。 エラーが発生した場合に <see langword="False" /> を返すには、<see langword="Nothing" /> に設定します。</param>
      <returns>通知オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[])">
      <summary>遅延バインディング プロパティの取得またはフィールド アクセスの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Type">通知オブジェクトの型。</param>
      <param name="MemberName">通知オブジェクトのプロパティまたはメソッドの名前。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="TypeArguments">引数型の配列。引数型を渡す汎用呼び出しにのみ使用します。</param>
      <param name="CopyBack">引数が <see langword="Boolean" /> パラメーターと一致する呼び出しサイトと通信するために遅延バインダーが使用する、<see langword="ByRef" /> 値の配列。 それぞれの <see langword="True" /> 値は、引数が一致したため <see langword="LateCall" /> に対する呼び出しが完了した後でそれをコピーする必要があることを示します。</param>
      <returns>通知オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGetInvokeDefault(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>既定のプロパティまたはフィールドの、遅延バインディングによる取得を実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="ReportErrors">エラーが発生した場合に例外をスローするかどうかを指定するのに使用される <see langword="Boolean" /> 値。 例外をスローするには <see langword="True" /> に設定します。 エラーが発生した場合に <see langword="False" /> を返すには、<see langword="Nothing" /> に設定します。</param>
      <returns>通知オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexGet(System.Object,System.Object[],System.String[])">
      <summary>遅延バインディング プロパティの取得またはフィールド アクセスの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <returns>通知オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSet(System.Object,System.Object[],System.String[])">
      <summary>遅延バインディング プロパティの設定またはフィールド書き込みの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>遅延バインディング プロパティの設定またはフィールド書き込みの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="OptimisticSet">設定操作を有効にするかどうかを決定するために使用する <see langword="Boolean" /> 値。 プロパティまたはフィールドに中間の値が設定されている場合は <see langword="True" /> を設定します。それ以外の場合は <see langword="False" /> を設定します。</param>
      <param name="RValueBase">遅延参照の基本参照を <see langword="Boolean" /> にするかどうかを指定する <see langword="RValue" /> 値。 遅延参照の基本参照を <see langword="True" /> にする場合は <see langword="RValue" /> に設定します。これにより、値型の <see langword="RValues" /> のフィールドに対して遅延割り当てを実行すると、実行時例外を生成できます。 それ以外の場合は <see langword="False" /> に設定します。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[])">
      <summary>遅延バインディング プロパティの設定またはフィールド書き込みの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Type">通知オブジェクトの型。</param>
      <param name="MemberName">通知オブジェクトのプロパティまたはメソッドの名前。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="TypeArguments">引数型の配列。引数型を渡す汎用呼び出しにのみ使用します。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean,Microsoft.VisualBasic.CallType)">
      <summary>遅延バインディング プロパティの設定またはフィールド書き込みの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Type">通知オブジェクトの型。</param>
      <param name="MemberName">通知オブジェクトのプロパティまたはメソッドの名前。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="TypeArguments">引数型の配列。引数型を渡す汎用呼び出しにのみ使用します。</param>
      <param name="OptimisticSet">設定操作を有効にするかどうかを決定するために使用する <see langword="Boolean" /> 値。 プロパティまたはフィールドに中間の値が設定されている場合は <see langword="True" /> を設定します。それ以外の場合は <see langword="False" /> を設定します。</param>
      <param name="RValueBase">遅延参照の基本参照を <see langword="Boolean" /> にするかどうかを指定する <see langword="RValue" /> 値。 遅延参照の基本参照を <see langword="True" /> にする場合は <see langword="RValue" /> に設定します。これにより、値型の <see langword="RValues" /> のフィールドに対して遅延割り当てを実行すると、実行時例外を生成できます。 それ以外の場合は <see langword="False" /> に設定します。</param>
      <param name="CallType">呼び出されるプロシージャの型を表す、<see cref="T:Microsoft.VisualBasic.CallType" /> 型の列挙体のメンバーです。 CallType の値は、<see langword="Method" />、<see langword="Get" />、<see langword="Set" /> のいずれかになります。 <see langword="Set" /> のみ使用します。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSetComplex(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean)">
      <summary>遅延バインディング プロパティの設定またはフィールド書き込みの呼び出しを実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="Instance">プロパティまたはメソッドを公開する通知オブジェクトのインスタンス。</param>
      <param name="Type">通知オブジェクトの型。</param>
      <param name="MemberName">通知オブジェクトのプロパティまたはメソッドの名前。</param>
      <param name="Arguments">呼び出されるプロパティまたはメソッドに渡す引数を格納する配列。</param>
      <param name="ArgumentNames">引数名の配列。</param>
      <param name="TypeArguments">引数型の配列。引数型を渡す汎用呼び出しにのみ使用します。</param>
      <param name="OptimisticSet">設定操作を有効にするかどうかを決定するために使用する <see langword="Boolean" /> 値。 プロパティまたはフィールドに中間の値が設定されている場合は <see langword="True" /> を設定します。それ以外の場合は <see langword="False" /> を設定します。</param>
      <param name="RValueBase">遅延参照の基本参照を <see langword="Boolean" /> にするかどうかを指定する <see langword="RValue" /> 値。 遅延参照の基本参照を <see langword="True" /> にする場合は <see langword="RValue" /> に設定します。これにより、値型の <see langword="RValues" /> のフィールドに対して遅延割り当てを実行すると、実行時例外を生成できます。 それ以外の場合は <see langword="False" /> に設定します。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl">
      <summary>Visual Basic コンパイラは、オブジェクトのフロー制御にこのクラスを使用します。これは、コードから直接呼び出すためのものではありません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.CheckForSyncLockOnValueType(System.Object)">
      <summary>指定された型の同期ロックをチェックします。</summary>
      <param name="Expression">同期ロックのチェック対象のデータ型。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl">
      <summary>
        <see langword="For...Next" /> ループをコンパイルするためのサービスを、Visual Basic コンパイラに提供します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)">
      <summary>
        <see langword="For...Next" /> ループを初期化します。</summary>
      <param name="Counter">ループ カウンター変数。</param>
      <param name="Start">ループ カウンターの初期値。</param>
      <param name="Limit">
        <see langword="To" /> オプションの値。</param>
      <param name="StepValue">
        <see langword="Step" /> オプションの値。</param>
      <param name="LoopForResult">ループ値の検証済みの値が格納されているオブジェクト。</param>
      <param name="CounterResult">次のループ反復のカウンター値。</param>
      <returns>ループが終了している場合は <see langword="False" />。それ以外の場合は <see langword="True" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)">
      <summary>ループ カウンター、<see langword="Step" /> 値、および <see langword="To" /> 値が有効な値かどうかをチェックします。</summary>
      <param name="count">必須です。 ループ カウンター変数に渡された初期値を表す <see langword="Decimal" /> 値。</param>
      <param name="limit">必須です。 <see langword="Decimal" /> キーワードを使用して渡された値を表す <see langword="To" /> 値。</param>
      <param name="StepValue">必須です。 <see langword="Decimal" /> キーワードを使用して渡された値を表す <see langword="Step" /> 値。</param>
      <returns>
        <paramref name="StepValue" /> が 0 より大で <paramref name="count" /> が <paramref name="limit" /> 以下の場合、または <paramref name="StepValue" /> が 0 以下で <paramref name="count" /> が <paramref name="limit" /> 以上の場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)">
      <summary>
        <see langword="For...Next" /> ループをインクリメントします。</summary>
      <param name="Counter">ループ カウンター変数。</param>
      <param name="LoopObj">ループ値の検証済みの値が格納されているオブジェクト。</param>
      <param name="CounterResult">次のループ反復のカウンター値。</param>
      <returns>ループが終了している場合は <see langword="False" />。それ以外の場合は <see langword="True" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)">
      <summary>ループ カウンター、<see langword="Step" /> 値、および <see langword="To" /> 値が有効な値かどうかをチェックします。</summary>
      <param name="count">必須です。 ループ カウンター変数に渡された初期値を表す <see cref="T:System.Single" /> 値。</param>
      <param name="limit">必須です。 <see cref="T:System.Single" /> キーワードを使用して渡された値を表す <see langword="To" /> 値。</param>
      <param name="StepValue">必須です。 <see cref="T:System.Single" /> キーワードを使用して渡された値を表す <see langword="Step" /> 値。</param>
      <returns>
        <paramref name="StepValue" /> が 0 より大で <paramref name="count" /> が <paramref name="limit" /> 以下の場合、または <paramref name="StepValue" /> が 0 以下で <paramref name="count" /> が <paramref name="limit" /> 以上の場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)">
      <summary>ループ カウンター、<see langword="Step" /> 値、および <see langword="To" /> 値が有効な値かどうかをチェックします。</summary>
      <param name="count">必須です。 ループ カウンター変数に渡された初期値を表す <see cref="T:System.Double" /> 値。</param>
      <param name="limit">必須です。 <see cref="T:System.Double" /> キーワードを使用して渡された値を表す <see langword="To" /> 値。</param>
      <param name="StepValue">必須です。 <see cref="T:System.Double" /> キーワードを使用して渡された値を表す <see langword="Step" /> 値。</param>
      <returns>
        <paramref name="StepValue" /> が 0 より大で <paramref name="count" /> が <paramref name="limit" /> 以下の場合、または <paramref name="StepValue" /> が 0 以下で <paramref name="count" /> が <paramref name="limit" /> 以上の場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.CompilerServices.ObjectType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj(System.Object,System.Object)">
      <summary>加算 (+) 演算を実行します。</summary>
      <param name="o1">必須です。 任意の数式。</param>
      <param name="o2">必須です。 任意の数式。</param>
      <returns>
        <paramref name="o1" /> と <paramref name="o2" /> の合計。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj(System.Object,System.Object)">
      <summary>ビットごとの <see langword="And" /> 演算を実行します。</summary>
      <param name="obj1">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <param name="obj2">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <returns>
        <paramref name="obj1" /> と <paramref name="obj2" /> が両方とも 1 と評価される場合は 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj(System.Object,System.Object)">
      <summary>ビットごとの <see langword="Or" /> 演算を実行します。</summary>
      <param name="obj1">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <param name="obj2">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <returns>
        <paramref name="obj1" /> と <paramref name="obj2" /> が両方とも 0 と評価される場合は 0。それ以外の場合は 1。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj(System.Object,System.Object)">
      <summary>
        <see langword="Xor" /> 演算を実行します。</summary>
      <param name="obj1">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <param name="obj2">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <returns>2 つの数値ビット パターンのビットごとの排他的論理和を表す数値。 詳細については、「Xor 演算子」を参照してください。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj(System.Object,System.Object)">
      <summary>除算 (/) 演算を実行します。</summary>
      <param name="o1">必須です。 任意の数式。</param>
      <param name="o2">必須です。 任意の数式。</param>
      <returns>
        <paramref name="o1" /> を <paramref name="o2" /> で割った、剰余を含む完全な商。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive(System.Object)">
      <summary>ボックス化されたプリミティブ値を返します。 このメソッドは、構造体を何回もコピーするのを避けるために使用します。</summary>
      <param name="o">必須です。 任意の式。</param>
      <returns>オブジェクトとして型指定された <paramref name="o" /> のプリミティブ値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj(System.Object,System.Object)">
      <summary>整数除算 (\) 演算を実行します。</summary>
      <param name="o1">必須です。 任意の数式。</param>
      <param name="o2">必須です。 任意の数式。</param>
      <returns>
        <paramref name="o1" /> を <paramref name="o2" /> で割った整数の商。余りはすべて破棄され、整数部分だけが保持されます。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)">
      <summary>
        <see langword="Like" /> 比較を実行します。</summary>
      <param name="vLeft">必須です。 任意の式。</param>
      <param name="vRight">必須です。 「Like 演算子」で説明されているパターン一致規則に準拠した任意の文字列式。</param>
      <param name="CompareOption">必須です。 演算でテキスト比較とバイナリ比較のどちらを使用するかを指定する <see cref="T:Microsoft.VisualBasic.CompareMethod" /> 値。</param>
      <returns>
        <paramref name="vLeft" /> の値の文字列表現が <paramref name="vRight" /> で指定されているパターンを満たす場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 <paramref name="vLeft" /> と <paramref name="vRight" /> が両方とも <see langword="True" /> の場合は <see langword="Nothing" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj(System.Object,System.Object)">
      <summary>剰余 (<see langword="Mod" />) 演算を実行します。</summary>
      <param name="o1">必須です。 任意の数式。</param>
      <param name="o2">必須です。 任意の数式。</param>
      <returns>
        <paramref name="o1" /> を <paramref name="o2" /> で除算した後の剰余。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj(System.Object,System.Object)">
      <summary>乗算 (*) 演算を実行します。</summary>
      <param name="o1">必須です。 任意の数式。</param>
      <param name="o2">必須です。 任意の数式。</param>
      <returns>
        <paramref name="o1" /> と <paramref name="o2" /> の積。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj(System.Object)">
      <summary>単項マイナス (-) 演算を実行します。</summary>
      <param name="obj">必須です。 任意の数式。</param>
      <returns>
        <paramref name="obj" /> の負の値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj(System.Object)">
      <summary>
        <see langword="Not" /> 演算を実行します。</summary>
      <param name="obj">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <returns>
        <see langword="Boolean" /> 演算では、<paramref name="obj" /> が <see langword="False" /> の場合は <see langword="True" />。それ以外の場合は <see langword="True" />。 ビットごとの演算では、<paramref name="obj" /> が 0 の場合は 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst(System.Object,System.Object,System.Boolean)">
      <summary>指定された 2 つのオブジェクトに対して、バイナリ文字列比較またはテキスト文字列比較を実行します。</summary>
      <param name="o1">必須です。 任意の式。</param>
      <param name="o2">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>
        <list type="table">
          <listheader>
            <term> [値]</term>
            <description> 条件</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="o1" /> は <paramref name="o2" /> より小さい値です。</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="o1" /> と <paramref name="o2" /> が等価です。</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="o1" /> が <paramref name="o2" /> より大きくなっています。</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj(System.Object)">
      <summary>単項プラス (+) 演算を実行します。</summary>
      <param name="obj">必須です。 任意の数式。</param>
      <returns>
        <paramref name="obj" /> の値。 (<paramref name="obj" /> の符号は変更されません)。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj(System.Object,System.Object)">
      <summary>指数 (^) 演算を実行します。</summary>
      <param name="obj1">必須です。 任意の数式。</param>
      <param name="obj2">必須です。 任意の数式。</param>
      <returns>
        <paramref name="obj1" /> を <paramref name="obj2" /> で累乗した結果。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj(System.Object,System.Int32)">
      <summary>算術左シフト (&lt;&lt;) 演算を実行します。</summary>
      <param name="o1">必須です。 整数数値式。 シフトするビット パターン。 データ型は、整数型 (<see langword="SByte" />、<see langword="Byte" />、<see langword="Short" />、<see langword="UShort" />、<see langword="Integer" />、<see langword="UInteger" />、<see langword="Long" />、または <see langword="ULong" />) である必要があります。</param>
      <param name="amount">必須です。 数値式。 ビット パターンをシフトするビット数。 データ型は <see langword="Integer" /> であるか、<see langword="Integer" /> に拡大変換する必要があります。</param>
      <returns>整数値。 ビット パターンをシフトした結果。 データ型は <paramref name="o1" /> のデータ型と同じです。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj(System.Object,System.Int32)">
      <summary>算術右シフト (&gt;&gt;) 演算を実行します。</summary>
      <param name="o1">必須です。 整数数値式。 シフトするビット パターン。 データ型は、整数型 (<see langword="SByte" />、<see langword="Byte" />、<see langword="Short" />、<see langword="UShort" />、<see langword="Integer" />、<see langword="UInteger" />、<see langword="Long" />、または <see langword="ULong" />) である必要があります。</param>
      <param name="amount">必須です。 数値式。 ビット パターンをシフトするビット数。 データ型は <see langword="Integer" /> であるか、<see langword="Integer" /> に拡大変換する必要があります。</param>
      <returns>整数値。 ビット パターンをシフトした結果。 データ型は <paramref name="o1" /> のデータ型と同じです。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj(System.Object,System.Object)">
      <summary>文字列の連結 (&amp;) 演算を実行します。</summary>
      <param name="vLeft">必須です。 任意の式。</param>
      <param name="vRight">必須です。 任意の式。</param>
      <returns>
        <paramref name="vLeft" /> と <paramref name="vRight" /> の連結を表す文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj(System.Object,System.Object)">
      <summary>減算 (-) 演算を実行します。</summary>
      <param name="o1">必須です。 任意の数式。</param>
      <param name="o2">必須です。 任意の数式。</param>
      <returns>
        <paramref name="o1" /> と <paramref name="o2" /> の差。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj(System.Object,System.Object)">
      <summary>
        <see langword="Xor" /> 比較を実行します。</summary>
      <param name="obj1">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <param name="obj2">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <returns>
        <see langword="Boolean" /> 値または数値。 <see langword="Boolean" /> 式の比較の場合、戻り値は 2 つの <see langword="Boolean" /> 値の排他的論理和です。 ビットごとの (数値) 演算の場合、戻り値は 2 つの数値ビット パターンのビットごとの排他的論理和を表す数値です。 詳細については、「Xor 演算子」を参照してください。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Operators">
      <summary>Visual Basic コンパイラが内部的に使用する、<see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)" /> や <see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)" /> などの遅延バインディング数値演算子を提供します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)">
      <summary>Visual Basic の加算 (+) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の数式。</param>
      <param name="Right">必須です。 任意の数式。</param>
      <returns>
        <paramref name="Left" /> と <paramref name="Right" /> の合計。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)">
      <summary>Visual Basic の <see langword="And" /> 演算子を表します。</summary>
      <param name="Left">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <param name="Right">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <returns>
        <see langword="Boolean" /> 演算では、<paramref name="Left" /> と <paramref name="Right" /> が両方とも <see langword="True" /> と評価される場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 ビットごとの演算では、<paramref name="Left" /> と <paramref name="Right" /> が両方とも 1 と評価される場合は 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic の等値 (=) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>
        <paramref name="Left" /> と <paramref name="Right" /> が等しい場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic のより大きい (&gt;) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>
        <paramref name="Left" /> が <paramref name="Right" /> より大きい場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic のより大か等しい (&gt;=) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>
        <paramref name="Left" /> が <paramref name="Right" /> 以上の場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic のより小さい (&lt;) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>
        <paramref name="Left" /> が <paramref name="Right" /> より小さい場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic のより小さいか等しい (&lt;) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>
        <paramref name="Left" /> が <paramref name="Right" /> 以下の場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic の不等号 (&lt;&gt;) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>
        <see langword="True" /> が <paramref name="Left" /> と等しくない場合は <paramref name="Right" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)">
      <summary>指定された 2 つの文字列に対して、バイナリ文字列比較またはテキスト文字列比較を実行します。</summary>
      <param name="Left">必須です。 任意のブール型 ( <see langword="String" /> ) の式を指定します。</param>
      <param name="Right">必須です。 任意のブール型 ( <see langword="String" /> ) の式を指定します。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>
        <list type="table">
          <listheader>
            <term> [値]</term>
            <description> 条件</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="Left" /> は <paramref name="Right" /> より小さい値です。</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="Left" /> と <paramref name="Right" /> が等価です。</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="Left" /> が <paramref name="Right" /> より大きくなっています。</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)">
      <summary>Visual Basic の連結 (&amp;) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <returns>
        <paramref name="Left" /> と <paramref name="Right" /> の連結を表す文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic のオーバーロードされた等値 (=) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>オーバーロードされた等値演算子の結果。 演算子のオーバーロードがサポートされていない場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic のオーバーロードされたより大きい (&gt;) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>オーバーロードされた大なり演算子の結果。 演算子のオーバーロードがサポートされていない場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic のオーバーロードされたより大か等しい (&gt;=) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>オーバーロードされた以上演算子の結果。 演算子のオーバーロードがサポートされていない場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic のオーバーロードされたより小さい (&lt;) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>オーバーロードされた小なり演算子の結果。 演算子のオーバーロードがサポートされていない場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic のオーバーロードされたより小さいか等しい (&lt;=) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>オーバーロードされた以下演算子の結果。 演算子のオーバーロードがサポートされていない場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>Visual Basic のオーバーロードされた不等号 (&lt;&gt;) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の式。</param>
      <param name="Right">必須です。 任意の式。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに文字列を比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>オーバーロードされた不等演算子の結果。 演算子のオーバーロードがサポートされていない場合は <see langword="False" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)">
      <summary>Visual Basic の除算 (/) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の数式。</param>
      <param name="Right">必須です。 任意の数式。</param>
      <returns>
        <paramref name="Left" /> を <paramref name="Right" /> で割った、剰余を含む完全な商。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)">
      <summary>Visual Basic の指数 (^) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の数式。</param>
      <param name="Right">必須です。 任意の数式。</param>
      <returns>
        <paramref name="Left" /> を <paramref name="Right" /> で累乗した結果。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.FallbackInvokeUserDefinedOperator(System.Object,System.Object[])">
      <summary>ユーザー定義の演算子の遅延バインディング評価を実行します。 このヘルパー メソッドは、コードから直接呼び出すためのものではありません。</summary>
      <param name="vbOp">ユーザー定義の演算子。</param>
      <param name="arguments" />
      <returns>ユーザー定義の演算子から返される結果。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)">
      <summary>Visual Basic の整数除算 (\) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の数式。</param>
      <param name="Right">必須です。 任意の数式。</param>
      <returns>
        <paramref name="Left" /> を <paramref name="Right" /> で割った整数の商。余りはすべて破棄され、整数部分だけが保持されます。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)">
      <summary>Visual Basic の算術左シフト (&lt;&lt;) 演算子を表します。</summary>
      <param name="Operand">必須です。 整数数値式。 シフトするビット パターン。 データ型は、整数型 (<see langword="SByte" />、<see langword="Byte" />、<see langword="Short" />、<see langword="UShort" />、<see langword="Integer" />、<see langword="UInteger" />、<see langword="Long" />、または <see langword="ULong" />) である必要があります。</param>
      <param name="Amount">必須です。 数値式。 ビット パターンをシフトするビット数。 データ型は <see langword="Integer" /> であるか、<see langword="Integer" /> に拡大変換する必要があります。</param>
      <returns>整数値。 ビット パターンをシフトした結果。 データ型は <paramref name="Operand" /> のデータ型と同じです。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)">
      <summary>Visual Basic の <see langword="Mod" /> 演算子を表します。</summary>
      <param name="Left">必須です。 任意の数式。</param>
      <param name="Right">必須です。 任意の数式。</param>
      <returns>
        <paramref name="Left" /> を <paramref name="Right" /> で除算した後の剰余。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)">
      <summary>Visual Basic の乗算 (*) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の数式。</param>
      <param name="Right">必須です。 任意の数式。</param>
      <returns>
        <paramref name="Left" /> と <paramref name="Right" /> の積。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)">
      <summary>Visual Basic の単項マイナス (-) 演算子を表します。</summary>
      <param name="Operand">必須です。 任意の数式。</param>
      <returns>
        <paramref name="Operand" /> の負の値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)">
      <summary>Visual Basic の <see langword="Not" /> 演算子を表します。</summary>
      <param name="Operand">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <returns>
        <see langword="Boolean" /> 演算では、<paramref name="Operand" /> が <see langword="False" /> の場合は <see langword="True" />。それ以外の場合は <see langword="True" />。 ビットごとの演算では、<paramref name="Operand" /> が 0 の場合は 1。それ以外の場合は 0。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)">
      <summary>Visual Basic の <see langword="Or" /> 演算子を表します。</summary>
      <param name="Left">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <param name="Right">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <returns>
        <see langword="Boolean" /> 演算では、<paramref name="Left" /> と <paramref name="Right" /> が両方とも <see langword="False" /> と評価される場合は <see langword="False" />。それ以外の場合は <see langword="True" />。 ビットごとの演算では、<paramref name="Left" /> と <paramref name="Right" /> が両方とも 0 と評価される場合は 0。それ以外の場合は 1。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)">
      <summary>Visual Basic の単項プラス (+) 演算子を表します。</summary>
      <param name="Operand">必須です。 任意の数式。</param>
      <returns>
        <paramref name="Operand" /> の値。 (<paramref name="Operand" /> の符号は変更されません)。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)">
      <summary>Visual Basic の算術右シフト (&gt;&gt;) 演算子を表します。</summary>
      <param name="Operand">必須です。 整数数値式。 シフトするビット パターン。 データ型は、整数型 (<see langword="SByte" />、<see langword="Byte" />、<see langword="Short" />、<see langword="UShort" />、<see langword="Integer" />、<see langword="UInteger" />、<see langword="Long" />、または <see langword="ULong" />) である必要があります。</param>
      <param name="Amount">必須です。 数値式。 ビット パターンをシフトするビット数。 データ型は <see langword="Integer" /> であるか、<see langword="Integer" /> に拡大変換する必要があります。</param>
      <returns>整数値。 ビット パターンをシフトした結果。 データ型は <paramref name="Operand" /> のデータ型と同じです。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)">
      <summary>Visual Basic の減算 (-) 演算子を表します。</summary>
      <param name="Left">必須です。 任意の数式。</param>
      <param name="Right">必須です。 任意の数式。</param>
      <returns>
        <paramref name="Left" /> と <paramref name="Right" /> の差。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)">
      <summary>Visual Basic の <see langword="Xor" /> 演算子を表します。</summary>
      <param name="Left">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <param name="Right">必須です。 任意の <see langword="Boolean" /> または数値式。</param>
      <returns>
        <see langword="Boolean" /> 値または数値。 <see langword="Boolean" /> 式の比較の場合、戻り値は 2 つの <see langword="Boolean" /> 値の排他的論理和です。 ビットごとの (数値) 演算の場合、戻り値は 2 つの数値ビット パターンのビットごとの排他的論理和を表す数値です。 詳細については、「Xor 演算子」を参照してください。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute">
      <summary>現在の <see langword="Option Compare" /> 設定を引数の既定値として渡す必要があることを指定します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute">
      <summary>Visual Basic コンパイラはこのヘルパー クラスを出力して、バイナリとテキストのどちらの比較方法を使用するかを Visual Basic デバッグに示します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute" /> クラスの新しいインスタンスを初期化します。 これはヘルパー メソッドです。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ProjectData">
      <summary>Visual Basic <see langword="Err" /> オブジェクト用のヘルパーを提供します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.ClearProjectError">
      <summary>
        <see langword="Clear" /> オブジェクトの <see langword="Err" /> メソッドに対する処理を実行します。 ヘルパー メソッドです。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.CreateProjectError(System.Int32)">
      <summary>
        <see langword="Raise" /> オブジェクトの <see langword="Err" /> メソッドに対する処理を実行します。 ヘルパー メソッドです。</summary>
      <param name="hr">エラーの性質を識別する整数値。 Visual Basic エラーの番号は 0 から 65535 の範囲です。0 から 512 はシステム エラー用に予約されています。513 から 65535 はユーザー定義エラーに使用できます。</param>
      <returns>
        <see cref="T:System.Exception" /> オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.EndApp">
      <summary>呼び出し元のアセンブリが使用するすべてのファイルを閉じて、プロセスを停止します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception)">
      <summary>Visual Basic コンパイラは、このヘルパー メソッドを使用して <see langword="Err" /> オブジェクトの例外をキャプチャします。</summary>
      <param name="ex">キャッチする <see cref="T:System.Exception" /> オブジェクト。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception,System.Int32)">
      <summary>Visual Basic コンパイラは、このヘルパー メソッドを使用して <see langword="Err" /> オブジェクトの例外をキャプチャします。</summary>
      <param name="ex">キャッチする <see cref="T:System.Exception" /> オブジェクト。</param>
      <param name="lErl">例外の行番号。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ShortType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ShortType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see langword="Short" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Short" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Short" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ShortType.FromString(System.String)">
      <summary>指定した文字列に対応する <see langword="Short" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Short" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="Short" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.SingleType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see cref="T:System.Single" /> 値を返します。</summary>
      <param name="Value">必須です。 <see cref="T:System.Single" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see cref="T:System.Single" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>指定したオブジェクトに対応する <see cref="T:System.Single" /> 値を返します。</summary>
      <param name="Value">必須です。 <see cref="T:System.Single" /> 値に変換するオブジェクト。</param>
      <param name="NumberFormat">カルチャに応じて数値を形式指定および表示する方法を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see cref="T:System.Single" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromString(System.String)">
      <summary>指定した文字列に対応する <see cref="T:System.Single" /> 値を返します。</summary>
      <param name="Value">必須です。 <see cref="T:System.Single" /> 値に変換する文字列。</param>
      <returns>
        <paramref name="Value" /> に対応する <see cref="T:System.Single" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>指定した文字列と数値書式情報に対応する <see cref="T:System.Single" /> 値を返します。</summary>
      <param name="Value">必須です。 <see cref="T:System.Single" /> 値に変換する文字列。</param>
      <param name="NumberFormat">カルチャに応じて数値を形式指定および表示する方法を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see cref="T:System.Single" /> 値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute">
      <summary>このクラスには、中間言語 (IL) に出力するときに、標準モジュールの構成要素に適用する引数が用意されています。 コードから直接呼び出すことを意図したものではありません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag">
      <summary>Visual Basic コンパイラは、静的なローカル メンバーを初期化するときにこのクラスを内部的に使用します。これは、コードから直接呼び出すためのものではありません。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.State">
      <summary>静的なローカル メンバーの初期化フラグの状態 (初期化済みかどうか) を返します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StringType">
      <summary>このクラスの使用は、Visual Basic 2005 以降推奨されていません。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromBoolean(System.Boolean)">
      <summary>指定した <see langword="String" /> に対応する <see langword="Boolean" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Boolean" /> 値に変換する <see langword="String" />。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="String" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromByte(System.Byte)">
      <summary>指定した <see langword="String" /> に対応する <see langword="Byte" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Byte" /> 値に変換する <see langword="String" />。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="String" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromChar(System.Char)">
      <summary>指定した <see langword="String" /> に対応する <see langword="Char" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Char" /> 値に変換する <see langword="String" />。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="String" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDate(System.DateTime)">
      <summary>指定した日付に対応する <see langword="String" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="String" /> 値に変換する日付。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="String" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDecimal(System.Decimal)">
      <summary>指定した <see langword="String" /> に対応する <see langword="Decimal" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Decimal" /> 値に変換する <see langword="String" />。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="String" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDecimal(System.Decimal,System.Globalization.NumberFormatInfo)">
      <summary>指定した <see langword="String" /> と数値書式情報に対応する <see langword="Decimal" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Decimal" /> 値に変換する <see langword="String" />。</param>
      <param name="NumberFormat">カルチャに応じて数値を形式指定および表示する方法を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="String" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDouble(System.Double)">
      <summary>指定したに対応する文字列値を返し <see cref="T:System.Double" /> ます。</summary>
      <param name="Value">必須です。 <see cref="T:System.Double" /> 値に変換する <see cref="T:System.String" />。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="String" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDouble(System.Double,System.Globalization.NumberFormatInfo)">
      <summary>指定されたおよび数値書式情報に対応する文字列を返し <see cref="T:System.Double" /> ます。</summary>
      <param name="Value">必須です。 <see cref="T:System.Double" /> 値に変換する <see cref="T:System.String" />。</param>
      <param name="NumberFormat">カルチャに応じて数値を形式指定および表示する方法を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</param>
      <returns>
        <paramref name="Value" /> の文字列形式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromInteger(System.Int32)">
      <summary>指定した <see langword="String" /> に対応する <see langword="Integer" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Integer" /> 値に変換する <see langword="String" />。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="String" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromLong(System.Int64)">
      <summary>指定した <see langword="String" /> (64 ビット整数) に対応する <see cref="T:System.Int64" /> 値を返します。</summary>
      <param name="Value">必須です。 <see cref="T:System.Int64" /> 値に変換する <see langword="String" />。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="String" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromObject(System.Object)">
      <summary>指定したオブジェクトに対応する <see langword="String" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="String" /> 値に変換するオブジェクト。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="String" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromShort(System.Int16)">
      <summary>指定した <see langword="String" /> (16 ビット整数) に対応する <see cref="T:System.Int16" /> 値を返します。</summary>
      <param name="Value">必須です。 <see langword="Int616" /> 値に変換する <see langword="String" />。</param>
      <returns>
        <paramref name="Value" /> に対応する <see langword="String" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromSingle(System.Single)">
      <summary>指定したに対応する文字列値を返し <see cref="T:System.Single" /> ます。</summary>
      <param name="Value">必須です。 <see cref="T:System.Single" /> 値に変換する <see langword="String" />。</param>
      <returns>に対応する文字列値 <paramref name="Value" /> 。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromSingle(System.Single,System.Globalization.NumberFormatInfo)">
      <summary>指定されたおよび数値書式情報に対応する文字列値を返し <see cref="T:System.Single" /> ます。</summary>
      <param name="Value">必須です。 <see cref="T:System.Single" /> 値に変換する <see langword="String" />。</param>
      <param name="NumberFormat">カルチャに応じて数値を形式指定および表示する方法を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</param>
      <returns>に対応する文字列値 <paramref name="Value" /> 。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.MidStmtStr(System.String@,System.Int32,System.Int32,System.String)">
      <summary>
        <paramref name="sDest" /> パラメーターの内容で <paramref name="sInsert" /> パラメーターを上書きします。</summary>
      <param name="sDest">必須です。 変更する文字列変数。</param>
      <param name="StartPosition">必須です。 上書きを開始する <paramref name="sDest" /> パラメーター内の位置。 インデックスは 1 から始まっています。</param>
      <param name="MaxInsertLength">必須です。 使用する <paramref name="sInsert" /> パラメーターの最大文字数。1 文字目から開始します。</param>
      <param name="sInsert">必須です。 <paramref name="sDest" /> パラメーターを上書きする文字列値。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrCmp(System.String,System.String,System.Boolean)">
      <summary>2 つの文字列を比較します。</summary>
      <param name="sLeft">必須です。 <paramref name="sRight" /> と比較する文字列。</param>
      <param name="sRight">必須です。 <paramref name="sLeft" /> と比較する文字列。</param>
      <param name="TextCompare">必須です。 大文字と小文字を区別せずに比較する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</param>
      <returns>
        <list type="table">
          <listheader>
            <term> [値]</term>
            <description> 条件</description>
          </listheader>
          <item>
            <term> ゼロ</term>
            <description> 2 つの文字列は等価。</description>
          </item>
          <item>
            <term> 0 より小さい値</term>
            <description>
              <paramref name="sLeft" /> は <paramref name="sRight" /> より小さい値です。</description>
          </item>
          <item>
            <term> 0 より大きい値</term>
            <description>
              <paramref name="sLeft" /> が <paramref name="sRight" /> より大きくなっています。</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLike(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>
        <paramref name="Source" /> パラメーターと <paramref name="Pattern" /> パラメーターを比較し、<see langword="Like" /> 演算子と同じ結果を返します。</summary>
      <param name="Source">必須です。 任意のブール型 ( <see langword="String" /> ) の式を指定します。</param>
      <param name="Pattern">パターン一致規則に適合させる任意の文字列 (<see langword="String" />) 式を指定します。規則については「Like 演算子」で説明します。</param>
      <param name="CompareOption">
        <see cref="T:Microsoft.VisualBasic.CompareMethod" /> に従って、文字列をパターンと比較する方法を指定します。 バイナリを比較する場合は <see langword="vbBinaryCompare" /> を指定します。システムの <see langword="vbTextCompare" /> 値によって決まる大文字と小文字が区別されたテキストの並べ替え順序に基づいて比較する場合は、<see langword="LocaleID" /> を指定します。</param>
      <returns>文字列がパターンを満たすかどうかを示す <see langword="Boolean" /> 値。 文字列内の値がパターンに格納されているパターンを満たす場合、結果は <see langword="True" /> になります。 文字列がパターンを満たさない場合、結果は <see langword="False" /> になります。 文字列とパターンの両方が空の文字列の場合、結果は <see langword="True" /> になります。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeBinary(System.String,System.String)">
      <summary>バイナリ比較を使用して <paramref name="Source" /> パラメーターと <paramref name="Pattern" /> パラメーターを比較し、<see langword="Like" /> 演算子と同じ結果を返します。</summary>
      <param name="Source">必須です。 任意のブール型 ( <see langword="String" /> ) の式を指定します。</param>
      <param name="Pattern">必須です。 パターン一致規則に適合させる任意の文字列 (<see langword="String" />) 式を指定します。規則については「Like 演算子」で説明します。</param>
      <returns>文字列がパターンを満たすかどうかを示す <see langword="Boolean" /> 値。 文字列内の値がパターンに格納されているパターンを満たす場合、結果は <see langword="True" /> になります。 文字列がパターンを満たさない場合、結果は <see langword="False" /> になります。 文字列とパターンの両方が空の文字列の場合、結果は <see langword="True" /> になります。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeText(System.String,System.String)">
      <summary>テキスト比較を使用して <paramref name="Source" /> パラメーターと <paramref name="Pattern" /> パラメーターを比較し、<see langword="Like" /> 演算子と同じ結果を返します。</summary>
      <param name="Source">必須です。 任意のブール型 ( <see langword="String" /> ) の式を指定します。</param>
      <param name="Pattern">必須です。 パターン一致規則に適合させる任意の文字列 (<see langword="String" />) 式を指定します。規則については「Like 演算子」で説明します。</param>
      <returns>文字列がパターンを満たすかどうかを示す <see langword="Boolean" /> 値。 文字列内の値がパターンに格納されているパターンを満たす場合、結果は <see langword="True" /> になります。 文字列がパターンを満たさない場合、結果は <see langword="False" /> になります。 文字列とパターンの両方が空の文字列の場合、結果は <see langword="True" /> になります。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Utils">
      <summary>Visual Basic コンパイラで使用されるユーティリティが含まれます。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.CopyArray(System.Array,System.Array)">
      <summary>Visual Basic コンパイラが <see langword="Redim" /> のヘルパーとして使用します。</summary>
      <param name="arySrc">コピーする配列。</param>
      <param name="aryDest">コピー先の配列。</param>
      <returns>コピーされた配列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.GetResourceString(System.String,System.String[])">
      <summary>ローカライズされたリソース文字列またはエラー メッセージを取得して書式設定します。</summary>
      <param name="ResourceKey">取得する文字列またはエラー メッセージの識別子。</param>
      <param name="Args">文字列またはエラー メッセージ内のプレースホルダーを置き換えるパラメーターの配列。</param>
      <returns>書式が設定されたリソース文字列またはエラー メッセージ。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Versioned">
      <summary>
        <see cref="T:Microsoft.VisualBasic.CompilerServices.Versioned" /> モジュールに含まれるプロシージャを使って、オブジェクト、アプリケーション、システムと対話します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
      <summary>オブジェクトに対してメソッドを実行するか、オブジェクトのプロパティを設定または取得します。</summary>
      <param name="Instance">必須です。 <see langword="Object" />. プロパティまたはメソッドを公開しているオブジェクトへのポインターです。</param>
      <param name="MethodName">必須です。 <see langword="String" />. オブジェクトのプロパティまたはメソッドの名前を含む文字列式です。</param>
      <param name="UseCallType">必須です。 呼び出されるプロシージャの型を表す、<see cref="T:Microsoft.VisualBasic.CallType" /> 型の列挙体のメンバーです。 <see langword="CallType" /> の値は、<see langword="Method" />、<see langword="Get" />、<see langword="Set" /> のいずれかになります。</param>
      <param name="Arguments">省略可能。 <see langword="ParamArray" />. 呼び出されるプロパティまたはメソッドに渡される引数を格納するパラメーター配列です。</param>
      <returns>オブジェクトに対してメソッドを実行するか、オブジェクトのプロパティを設定または取得します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.IsNumeric(System.Object)">
      <summary>式が数値として評価できるかどうかを示すブール値を返します。</summary>
      <param name="Expression">必須です。 <see langword="Object" /> 式。</param>
      <returns>式が数値として評価できるかどうかを示すブール値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.SystemTypeName(System.String)">
      <summary>変数のシステム データ型名を含む文字列値を返します。</summary>
      <param name="VbName">必須です。 Visual Basic の型名を含む文字列変数です。</param>
      <returns>変数のシステム データ型名を含む文字列値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.TypeName(System.Object)">
      <summary>変数に関するデータ型情報を含む文字列値を返します。</summary>
      <param name="Expression">必須です。 <see langword="Object" /> 変数。 <see langword="Option Strict" /> が <see langword="Off" /> の場合、構造体以外の任意のデータ型の変数を渡すことができます。</param>
      <returns>変数に関するデータ型情報を含む文字列値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.VbTypeName(System.String)">
      <summary>変数の Visual Basic データ型名を含む文字列値を返します。</summary>
      <param name="SystemName">必須です。 共通言語ランタイムにより使用される型名を含む文字列変数です。</param>
      <returns>変数の Visual Basic データ型名を含む文字列値を返します。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Constants">
      <summary>
        <see langword="Constants" /> モジュールには、さまざまな定数が含まれています。 これらの定数は、コード内の任意の場所で使用できます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbAbort">
      <summary>メッセージ ボックスで [<see langword="Abort" />] ボタンがクリックされたことを示します。 <see langword="MsgBox" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbAbortRetryIgnore">
      <summary>
        <see langword="Abort" /> 関数を呼び出すときに、[<see langword="Retry" />]、[<see langword="Ignore" />]、および [<see langword="MsgBox" />] の各ボタンが表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbApplicationModal">
      <summary>
        <see langword="MsgBox" /> 関数を呼び出すときに、メッセージ ボックスがモーダル ダイアログ ボックスとして表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbArchive">
      <summary>ファイル アクセス関数において、ファイルが前回のバックアップ操作以降に変更されていることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbArray">
      <summary>バリアント オブジェクトの型が配列であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBack">
      <summary>印刷機能および表示機能のためのバックスペース文字を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBinaryCompare">
      <summary>比較関数を呼び出すときに、バイナリ比較を実行するように指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBoolean">
      <summary>バリアント オブジェクトの型が <see langword="Boolean" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbByte">
      <summary>バリアント オブジェクトの型が <see langword="Byte" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCancel">
      <summary>メッセージ ボックスで [<see langword="Cancel" />] ボタンがクリックされたことを示します。 <see langword="MsgBox" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCr">
      <summary>印刷機能および表示機能のための復帰文字を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCritical">
      <summary>
        <see langword="MsgBox" /> 関数を呼び出すときに、警告メッセージ アイコンが表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCrLf">
      <summary>印刷機能および表示機能のためのライン フィード文字と組み合わされた復帰文字を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCurrency">
      <summary>バリアント オブジェクトの型が <see langword="Currency" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDate">
      <summary>バリアント オブジェクトの型が <see langword="Date" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDecimal">
      <summary>バリアント オブジェクトの型が <see langword="Decimal" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton1">
      <summary>メッセージ ボックスが表示されるときに、左端のボタンが既定のボタンとして選択されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton2">
      <summary>メッセージ ボックスが表示されるときに、左から 2 番目のボタンが既定のボタンとして選択されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton3">
      <summary>メッセージ ボックスが表示されるときに、左から 3 番目のボタンが既定のボタンとして選択されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDirectory">
      <summary>ファイル アクセス関数において、ファイルがディレクトリまたはフォルダーであることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDouble">
      <summary>バリアント オブジェクトの型が <see langword="Double" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbEmpty">
      <summary>バリアント オブジェクトの型が <see langword="Empty" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbExclamation">
      <summary>
        <see langword="MsgBox" /> 関数を呼び出すときに、感嘆符アイコンが表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFalse">
      <summary>数値書式指定関数を呼び出すときに <see langword="Boolean" /> 値 <see langword="False" /> が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFourDays">
      <summary>日付関連の関数を呼び出すときに、年の最初の週として、少なくとも 4 日の日数を含む週が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFullWeek">
      <summary>日付関連の関数を呼び出すときに、年の最初の週として、1 週間全体を含む週が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstJan1">
      <summary>日付関連の関数を呼び出すときに、年の最初の週として、1 月 1 日を含む週が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFormFeed">
      <summary>印刷機能のためのフォーム フィード文字を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFriday">
      <summary>日付関連の関数を呼び出すときに、金曜日を週の最初の曜日として使用するように指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGeneralDate">
      <summary>
        <see langword="FormatDateTime" /> 関数を呼び出すときに、現在のカルチャの標準の日付形式が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGet">
      <summary>
        <see langword="CallByName" /> 関数を呼び出すときに、プロパティ値を取得するように指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHidden">
      <summary>ファイル アクセス関数において、ファイルが隠しファイルであることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHide">
      <summary>
        <see langword="Shell" /> 関数を呼び出すときに、起動されるプログラムのウィンドウ スタイルが非表示に設定されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHiragana">
      <summary>
        <see langword="StrConv" /> 関数を呼び出すときに、ひらがながカタカナに変換されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbIgnore">
      <summary>メッセージ ボックスで [<see langword="Ignore" />] ボタンがクリックされたことを示します。 <see langword="MsgBox" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbInformation">
      <summary>
        <see langword="MsgBox" /> 関数を呼び出すときに、情報アイコンが表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbInteger">
      <summary>バリアント オブジェクトの型が <see langword="Integer" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbKatakana">
      <summary>
        <see langword="StrConv" /> 関数を呼び出すときに、カタカナがひらがなに変換されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLet">
      <summary>
        <see langword="CallByName" /> 関数を呼び出すときに、オブジェクト インスタンスにプロパティ値が設定されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLf">
      <summary>印刷機能および表示機能のためのライン フィード文字を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLinguisticCasing">
      <summary>
        <see langword="StrConv" /> 関数を呼び出すときに、ファイル システムの大文字/小文字の区別規則ではなく、言語学的な大文字/小文字の区別規則を使用して文字が変換されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLong">
      <summary>バリアント オブジェクトの型が <see langword="Long" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongDate">
      <summary>
        <see langword="FormatDateTime" /> 関数を呼び出すときに、現在のカルチャの長い日付形式が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongTime">
      <summary>
        <see langword="FormatDateTime" /> 関数を呼び出すときに、現在のカルチャの長い時刻形式が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLowerCase">
      <summary>
        <see langword="StrConv" /> 関数を呼び出すときに、文字が小文字に変換されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMaximizedFocus">
      <summary>
        <see langword="Shell" /> 関数を呼び出すときに、起動されるプログラムのウィンドウ スタイルが最大化に設定され、フォーカスが与えられることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMethod">
      <summary>
        <see langword="CallByName" /> 関数を呼び出すときに、メソッドを呼び出すように指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMinimizedFocus">
      <summary>
        <see langword="Shell" /> 関数を呼び出すときに、起動されるプログラムのウィンドウ スタイルが最小化に設定され、フォーカスが与えられることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMinimizedNoFocus">
      <summary>
        <see langword="Shell" /> 関数を呼び出すときに、起動されるプログラムのウィンドウ スタイルが最小化に設定され、フォーカスは与えられないことを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMonday">
      <summary>日付関連の関数を呼び出すときに、月曜日を週の最初の曜日として使用するように指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxHelp">
      <summary>
        <see langword="Help" /> 関数を呼び出すときに、[<see langword="MsgBox" />] ボタンが表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxRight">
      <summary>
        <see langword="MsgBox" /> 関数を呼び出すときに、テキストが右揃えで表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxRtlReading">
      <summary>
        <see langword="MsgBox" /> 関数を呼び出すときに、右から左に読むテキスト (ヘブライ語およびアラビア語のシステム) が表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxSetForeground">
      <summary>
        <see langword="MsgBox" /> 関数を呼び出すときに、メッセージ ボックスが前面に表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNarrow">
      <summary>
        <see langword="StrConv" /> 関数を呼び出すときに、全角 (2 バイト) 文字が半角 (1 バイト) 文字に変換されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNewLine">
      <summary>印刷機能および表示機能のための改行文字を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNo">
      <summary>メッセージ ボックスで [<see langword="No" />] ボタンがクリックされたことを示します。 <see langword="MsgBox" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormal">
      <summary>ファイル アクセス関数において、ファイルが通常のファイルであることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormalFocus">
      <summary>
        <see langword="Shell" /> 関数を呼び出すときに、起動されるプログラムのウィンドウ スタイルが通常のスタイルに設定され、フォーカスが与えられることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormalNoFocus">
      <summary>
        <see langword="Shell" /> 関数を呼び出すときに、起動されるプログラムのウィンドウ スタイルが通常のスタイルに設定され、フォーカスは与えられないことを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNull">
      <summary>バリアント オブジェクトの型が <see langword="Nothing" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullChar">
      <summary>印刷機能および表示機能のための null 文字を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullString">
      <summary>印刷機能、表示機能、および外部プロシージャ呼び出しのための長さ 0 の文字列を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObject">
      <summary>バリアント オブジェクトの型が <see langword="Object" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObjectError">
      <summary>オブジェクトのエラー番号を表します。 ユーザー定義のエラー番号は、この値より大きい必要があります。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOK">
      <summary>メッセージ ボックスで [<see langword="OK" />] ボタンがクリックされたことを示します。 <see langword="MsgBox" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOKCancel">
      <summary>
        <see langword="OK" /> 関数を呼び出すときに、[<see langword="Cancel" />] ボタンと [<see langword="MsgBox" />] ボタンが表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOKOnly">
      <summary>
        <see langword="OK" /> 関数を呼び出すときに、[<see langword="MsgBox" />] ボタンだけが表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbProperCase">
      <summary>
        <see langword="StrConv" /> 関数を呼び出すときに、文字列中のすべての単語の最初の文字が大文字に変換され、残りの文字が小文字に変換されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbQuestion">
      <summary>
        <see langword="MsgBox" /> 関数を呼び出すときに、疑問符アイコンが表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbReadOnly">
      <summary>ファイル アクセス関数において、ファイルが読み取り専用のファイルであることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbRetry">
      <summary>メッセージ ボックスで [<see langword="Retry" />] ボタンがクリックされたことを示します。 <see langword="MsgBox" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbRetryCancel">
      <summary>
        <see langword="Retry" /> 関数を呼び出すときに、[<see langword="Cancel" />] ボタンと [<see langword="MsgBox" />] ボタンが表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSaturday">
      <summary>日付関連の関数を呼び出すときに、土曜日を週の最初の曜日として使用するように指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSet">
      <summary>
        <see langword="CallByName" /> 関数を呼び出すときに、プロパティ値が設定されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortDate">
      <summary>
        <see langword="FormatDateTime" /> 関数を呼び出すときに、現在のカルチャの短い日付形式が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortTime">
      <summary>
        <see langword="FormatDateTime" /> 関数を呼び出すときに、現在のカルチャの短い時刻形式が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSimplifiedChinese">
      <summary>
        <see langword="StrConv" /> 関数を呼び出すときに、文字が簡体中国語に変換されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSingle">
      <summary>バリアント オブジェクトの型が <see cref="T:System.Single" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbString">
      <summary>バリアント オブジェクトの型が <see langword="String" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSunday">
      <summary>日付関連の関数を呼び出すときに、日曜日を週の最初の曜日として使用するように指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSystem">
      <summary>ファイル アクセス関数において、ファイルがシステム ファイルであることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSystemModal">
      <summary>
        <see langword="MsgBox" /> 関数を呼び出すときに、メッセージ ボックスがモーダル ダイアログ ボックスとして表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTab">
      <summary>印刷機能および表示機能のためのタブ文字を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTextCompare">
      <summary>比較関数を呼び出すときに、テキスト比較が実行されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbThursday">
      <summary>日付関連の関数を呼び出すときに、木曜日を週の最初の曜日として使用するように指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTraditionalChinese">
      <summary>
        <see langword="StrConv" /> 関数を呼び出すときに、文字が繁体字中国語に変換されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTrue">
      <summary>数値書式指定関数を呼び出すときに <see langword="Boolean" /> 値 <see langword="True" /> が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTuesday">
      <summary>日付関連の関数を呼び出すときに、火曜日を週の最初の曜日として使用するように指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUpperCase">
      <summary>
        <see langword="StrConv" /> 関数を呼び出すときに、文字が大文字に変換されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseDefault">
      <summary>数値書式指定関数を呼び出すときに、既定の <see langword="Boolean" /> 値が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUserDefinedType">
      <summary>バリアント オブジェクトの型がユーザー定義型であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystem">
      <summary>日付関連の関数を呼び出すときに、年の最初の週として、システムで指定されている週が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystemDayOfWeek">
      <summary>日付関連の関数を呼び出すときに、週の最初の曜日として、システムで指定されている曜日が使用されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVariant">
      <summary>バリアント オブジェクトの型が <see langword="Variant" /> であることを示します。 <see langword="VarType" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVerticalTab">
      <summary>印刷機能のための復帰文字を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVolume">
      <summary>ファイル アクセス関数において、ボリューム ラベルのファイル属性を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbWednesday">
      <summary>日付関連の関数を呼び出すときに、水曜日を週の最初の曜日として使用するように指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbWide">
      <summary>
        <see langword="StrConv" /> 関数を呼び出すときに、半角 (1 バイト) 文字が全角 (2 バイト) 文字に変換されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYes">
      <summary>メッセージ ボックスで [<see langword="Yes" />] ボタンがクリックされたことを示します。 <see langword="MsgBox" /> 関数によって返されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYesNo">
      <summary>
        <see langword="Yes" /> 関数を呼び出すときに、[<see langword="No" />] ボタンと [<see langword="MsgBox" />] ボタンが表示されることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYesNoCancel">
      <summary>
        <see langword="Yes" /> 関数を呼び出すときに、[<see langword="No" />]、[<see langword="Cancel" />]、および [<see langword="MsgBox" />] の各ボタンが表示されることを示します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ControlChars">
      <summary>
        <see langword="ControlChars" /> モジュールには、制御文字として使用される定数が含まれています。 これらの定数は、コード内の任意の場所で使用できます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Back">
      <summary>バックスペース文字 (<see langword="vbBack" />) を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Cr">
      <summary>復帰文字 (<see langword="vbCr" />) を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.CrLf">
      <summary>復帰文字とライン フィード文字の組み合わせ (<see langword="vbCrLf" />) を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.FormFeed">
      <summary>印刷機能のためのフォーム フィード文字 (<see langword="vbFormFeed" />) を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Lf">
      <summary>ライン フィード文字 (<see langword="vbLf" />) を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NewLine">
      <summary>改行文字 (<see langword="vbNewLine" />) を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NullChar">
      <summary>null 文字 (<see langword="vbNullChar" />) を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Quote">
      <summary>二重引用符文字を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Tab">
      <summary>タブ文字 (<see langword="vbTab" />) を表します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.VerticalTab">
      <summary>垂直タブ文字 (<see langword="vbVerticalTab" />) を表します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ControlChars.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.ControlChars" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Conversion">
      <summary>
        <see langword="Conversion" /> モジュールに含まれるプロシージャを使って、さまざまな変換演算を実行します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
      <summary>オブジェクトを指定された型に変換します。</summary>
      <param name="Expression">変換対象のオブジェクト。</param>
      <param name="TargetType">変換後のオブジェクトの型。</param>
      <returns>実行時の種類が要求されたターゲットの種類であるオブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
      <summary>指定したジェネリック型にオブジェクトを変換します。</summary>
      <param name="Expression">変換対象のオブジェクト。</param>
      <typeparam name="TargetType">変換後のオブジェクトの型。</typeparam>
      <returns>要求されたジェネリック型として静的に型指定されたオブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString">
      <summary>特定のエラー番号に対応するエラー メッセージを返します。</summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="ErrorNumber" /> が範囲外です。</exception>
      <returns>直前の実行時エラーに対応するエラー メッセージ。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
      <summary>特定のエラー番号に対応するエラー メッセージを返します。</summary>
      <param name="ErrorNumber">省略可能。 有効なエラー番号。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ErrorNumber" /> が範囲外です。</exception>
      <returns>特定のエラー番号に対応するエラー メッセージ。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see langword="Decimal" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see cref="T:System.Double" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see langword="Short" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see langword="Integer" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see langword="Long" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see langword="Object" /> 型の数字または任意の有効な数式。 <paramref name="Number" /> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see cref="T:System.Single" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
      <summary>数値の 16 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 16 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
      <summary>数値の 16 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 16 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
      <summary>数値の 16 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 16 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
      <summary>数値の 16 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 16 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
      <summary>数値の 16 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 16 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
      <summary>数値の 16 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 16 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
      <summary>数値の 16 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 16 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
      <summary>数値の 16 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 16 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
      <summary>数値の 16 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 16 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see langword="Decimal" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see cref="T:System.Double" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see langword="Short" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see langword="Integer" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see langword="Long" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see langword="Object" /> 型の数字または任意の有効な数式。 <paramref name="Number" /> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
      <summary>数値の整数部分を返します。</summary>
      <param name="Number">必須です。 <see cref="T:System.Single" /> 型の数字または任意の有効な数式。</param>
      <exception cref="T:System.ArgumentNullException">Number が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">Number が数値型ではありません。</exception>
      <returns>数値の整数部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
      <summary>数値の 8 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 8 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
      <summary>数値の 8 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 8 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
      <summary>数値の 8 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 8 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
      <summary>数値の 8 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 8 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
      <summary>数値の 8 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 8 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
      <summary>数値の 8 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 8 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
      <summary>数値の 8 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 8 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
      <summary>数値の 8 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 8 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
      <summary>数値の 8 進値を表す文字列を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式または <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の 8 進値を表す文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
      <summary>数値を表す <see langword="String" /> 型の値を返します。</summary>
      <param name="Number">必須です。 任意の有効な数式を含む <see langword="Object" /> 型の値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> が指定されていません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Number" /> が数値型ではありません。</exception>
      <returns>数値の <see langword="String" /> 表現です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
      <summary>適切な型の数値として文字列に含まれる数を返します。</summary>
      <param name="Expression">必須です。 任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。 <paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> が大きすぎます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</exception>
      <returns>適切な型で表された、文字列に含まれる数値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
      <summary>適切な型の数値として文字列に含まれる数を返します。</summary>
      <param name="Expression">必須です。 任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。 <paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> が大きすぎます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</exception>
      <returns>適切な型で表された、文字列に含まれる数値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
      <summary>適切な型の数値として文字列に含まれる数を返します。</summary>
      <param name="InputStr">必須です。 任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。 <paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> が大きすぎます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</exception>
      <returns>適切な型で表された、文字列に含まれる数値。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.DateAndTime">
      <summary>
        <see langword="DateAndTime" /> モジュールには、日付と時刻の操作に使用されるプロシージャとプロパティが含まれています。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)">
      <summary>指定された時間間隔を加算した日付と時刻を含む値を返します。</summary>
      <param name="Interval">必須です。 加算する時間間隔を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
      <param name="Number">必須です。 加算する時間間隔を表す浮動小数点式。 これは、正の値 (未来の日付/時刻の値を取得する場合) または負の値 (過去の日付/時刻の値を取得する場合) とすることができます。 <paramref name="Interval" /> で時、分、または秒を指定する場合、小数部を含めることができます。 その他の値を <paramref name="Interval" /> で指定する場合、<paramref name="Number" /> の小数部は無視されます。</param>
      <param name="DateValue">必須です。 時間間隔を加算する日時を表す式。 <paramref name="DateValue" /> 自体は、呼び出し元のプログラムでは変更されません。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> を日付型 (<see langword="Date" />) に強制変換できません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> が無効です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">計算された日付が西暦 1 年 1 月 1 日 00:00:00 より前であるか、西暦 9999 年 12 月 31 日 23:59:59 より後です。</exception>
      <returns>指定された時間間隔を加算した日付と時刻を含む値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)">
      <summary>指定された時間間隔を加算した日付と時刻を含む値を返します。</summary>
      <param name="Interval">必須です。 加算する時間間隔を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
      <param name="Number">必須です。 加算する時間間隔を表す浮動小数点式。 <paramref name="Number" /> には正の値 (未来の日付/時刻の値を取得する場合) または負の値 (過去の日付/時刻の値を取得する場合) を指定できます。 <paramref name="Interval" /> で時、分、または秒を指定する場合、小数部を含めることができます。 その他の値を <paramref name="Interval" /> で指定する場合、<paramref name="Number" /> の小数部は無視されます。</param>
      <param name="DateValue">必須です。 時間間隔を加算する日時を表す式。 <paramref name="DateValue" /> 自体は、呼び出し元のプログラムでは変更されません。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> を日付型 (<see langword="Date" />) に強制変換できません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> が無効です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">計算された日付が西暦 1 年 1 月 1 日 00:00:00 より前であるか、西暦 9999 年 12 月 31 日 23:59:59 より後です。</exception>
      <returns>指定された時間間隔を加算した日付と時刻を含む値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>2 つの <see langword="Date" /> 値の間に含まれる時間間隔の数を指定する long 型の値を返します。</summary>
      <param name="Interval">必須です。 <paramref name="Date1" /> と <paramref name="Date2" /> の差分の単位として使用する時間間隔を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
      <param name="Date1">必須です。 計算で使用する 1 番目の日付/時刻の値。</param>
      <param name="Date2">必須です。 計算で使用する 2 番目の日付/時刻の値。</param>
      <param name="DayOfWeek">省略可能。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> が使用されます。</param>
      <param name="WeekOfYear">省略可能。 年の最初の週を指定する <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> が使用されます。</param>
      <exception cref="T:System.ArgumentException">該当する <paramref name="Date1" />、<paramref name="Date2" />、<paramref name="DayofWeek" /> がありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Date1" /> または <paramref name="Date2" /> が無効な型です。</exception>
      <returns>2 つの <see langword="Date" /> 値の間に含まれる時間間隔の数を指定する long 型の値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>2 つの <see langword="Date" /> 値の間に含まれる時間間隔の数を指定する long 型の値を返します。</summary>
      <param name="Interval">必須です。 <paramref name="Date1" /> と <paramref name="Date2" /> の差分の単位として使用する時間間隔を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
      <param name="Date1">必須です。 計算で使用する 1 番目の日付/時刻の値。</param>
      <param name="Date2">必須です。 計算で使用する 2 番目の日付/時刻の値。</param>
      <param name="DayOfWeek">省略可能。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> が使用されます。</param>
      <param name="WeekOfYear">省略可能。 年の最初の週を指定する <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> が使用されます。</param>
      <exception cref="T:System.ArgumentException">該当する <paramref name="Date1" />、<paramref name="Date2" />、<paramref name="DayofWeek" /> がありません。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Date1" /> または <paramref name="Date2" /> が無効な型です。</exception>
      <returns>2 つの <see langword="Date" /> 値の間に含まれる時間間隔の数を指定する long 型の値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>特定の <see langword="Date" /> 型値の中の指定されたコンポーネントを含む整数値を返します。</summary>
      <param name="Interval">必須です。 返される日付/時刻値の一部を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
      <param name="DateValue">必須です。 評価する <see langword="Date" /> 値。</param>
      <param name="FirstDayOfWeekValue">省略可能。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> が使用されます。</param>
      <param name="FirstWeekOfYearValue">省略可能。 年の最初の週を指定する <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> が使用されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> が無効です。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> を日付型 (<see langword="Date" />) に強制変換できません。</exception>
      <returns>特定の <see langword="Date" /> 型値の中の指定されたコンポーネントを含む整数値の値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>特定の <see langword="Date" /> 型値の中の指定された要素を含む値を返します。</summary>
      <param name="Interval">必須です。 返される日付/時刻値の一部を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
      <param name="DateValue">必須です。 評価する <see langword="Date" /> 値。</param>
      <param name="DayOfWeek">省略可能。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> が使用されます。</param>
      <param name="WeekOfYear">省略可能。 年の最初の週を指定する <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> が使用されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> が無効です。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> を日付型 (<see langword="Date" />) に強制変換できません。</exception>
      <returns>特定の <see langword="Date" /> 型値の中の指定されたコンポーネントを含む整数値の値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)">
      <summary>指定された年、月、日を表す <see langword="Date" /> 値を返します。時刻情報は午前 0 時 (00:00:00) に設定されます。</summary>
      <param name="Year">必須です。 1 から 9999 の整数式。 ただし、この範囲より小さい値も受け入れられます。 <paramref name="Year" /> が 0 ～ 99 の場合、下の「解説」で説明しているように、1930 ～ 2029 年として解釈されます。 <paramref name="Year" /> が 1 未満の場合、現在の年からその値が減算されます。</param>
      <param name="Month">必須です。 1 から 12 の整数式。 ただし、この範囲外の値も受け入れられます。 <paramref name="Month" /> の値は 1 だけオフセットされた後、計算対象の年の 1 月に加算されます。 つまり、(<paramref name="Month" /> - 1) が 1 月に加算されます。 年は必要に応じて再計算されます。 この処理による結果の例を次に示します。 
<paramref name="Month" /> が 1 の場合、結果は計算対象の年の 1 月になります。  
  
<paramref name="Month" /> が 0 の場合、結果は前年の 12 月になります。  
  
If <paramref name="Month" /> が -1 の場合、結果は前年の 11 月になります。  
  
<paramref name="Month" /> が 13 の場合、結果は翌年の 1 月になります。</param>
      <param name="Day">必須です。 1 から 31 の整数式。 ただし、この範囲外の値も受け入れられます。 <paramref name="Day" /> の値は 1 だけオフセットされた後、計算対象の月の最初の日に加算されます。 つまり、(<paramref name="Day" /> - 1) がその月の最初の日に加算されます。 必要に応じて月と年が再計算されます。 この処理による結果の例を次に示します。 
<paramref name="Day" /> が 1 の場合、結果は計算対象の月の最初の日になります。  
  
<paramref name="Day" /> が 0 の場合、結果は前月の末日になります。  
  
<paramref name="Day" /> が -1 の場合、結果は前月の末日の前日になります。  
  
<paramref name="Day" /> が現在の月の末日を過ぎている場合、結果は翌月の適切な日になります。 たとえば、<paramref name="Month" /> が 4 で <paramref name="Day" /> が 31 の場合、結果は 5 月 1 日になります。</param>
      <returns>指定された年、月、日を表す <see langword="Date" /> 値であり、時刻情報は午前 0 時 (00:00:00) に設定されます。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)">
      <summary>文字列で表した日付情報を含む <see langword="Date" /> 値を返します。時刻情報は午前 0 時 (00:00:00) に設定されます。</summary>
      <param name="StringDate">必須です。 1 年 1 月 1 日の 00:00:00 から、9999 年 12 月 31 日の 23:59:59 までの日付/時刻値を表す文字列式。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="StringDate" /> に無効な時刻情報が含まれています。</exception>
      <returns>文字列で表した日付情報を含む <see langword="Date" /> 値であり、時刻情報は午前 0 時 (00:00:00) に設定されます。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)">
      <summary>日付を表す 1 から 31 の整数値を返します。</summary>
      <param name="DateValue">必須です。 日を抽出する <see langword="Date" /> 値。</param>
      <returns>日付を表す 1 から 31 の整数値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)">
      <summary>時刻を表す 0 から 23 の整数値を返します。</summary>
      <param name="TimeValue">必須です。 時を抽出する <see langword="Date" /> 値。</param>
      <returns>時刻を表す 0 から 23 の整数値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)">
      <summary>分を表す 0 から 59 の整数値を返します。</summary>
      <param name="TimeValue">必須です。 分を抽出する <see langword="Date" /> 値。</param>
      <returns>分を表す 0 から 59 の整数値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)">
      <summary>月を表す 1 から 12 の整数値を返します。</summary>
      <param name="DateValue">必須です。 月を抽出する <see langword="Date" /> 値。</param>
      <returns>月を表す 1 から 12 の整数値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)">
      <summary>指定された月の名前を含む文字列値を返します。</summary>
      <param name="Month">必須です。 数値 (1 ～ 13) による月の指定です。1 は 1 月を示し、12 は 12 月を示します。 13 か月カレンダーでは値 13 を使用できます。 システムで 12 か月カレンダーを使用しているとき、<paramref name="Month" /> に 13 を指定すると、<c>MonthName</c> からは空の文字列が返されます。</param>
      <param name="Abbreviate">省略可能。 月の名前を省略する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は、<see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Month" /> が 1 より小さいか、または 13 を超えています。</exception>
      <returns>指定された月の名前を含む文字列値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)">
      <summary>秒を表す 0 から 59 の整数値を返します。</summary>
      <param name="TimeValue">必須です。 秒を抽出する <see langword="Date" /> 値。</param>
      <returns>秒を表す 0 から 59 の整数値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)">
      <summary>1 年 1 月 1 日を基準に設定された日付情報を使用して、指定された時、分、秒を表す <see langword="Date" /> 値を返します。</summary>
      <param name="Hour">必須です。 0 から 23 の整数式。 ただし、この範囲外の値も受け入れられます。</param>
      <param name="Minute">必須です。 0 から 59 の整数式。 ただし、この範囲外の値も受け入れられます。 計算される時には <paramref name="Minute" />  の値が加算されるため、負の値を指定するとその時からさかのぼる分数が指定されます。</param>
      <param name="Second">必須です。 0 から 59 の整数式。 ただし、この範囲外の値も受け入れられます。 算出される分には <paramref name="Second" />  の値が加算されるため、負の値を指定するとその分からさかのぼる秒数が指定されます。</param>
      <exception cref="T:System.ArgumentException">引数が -2,147,483,648 ～ 2,147,483,647 の範囲外です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">計算された時刻が負の 24 時間より小さくなっています。</exception>
      <returns>1 年 1 月 1 日を基準に設定された日付情報を使用して、指定された時、分、秒を表す <see langword="Date" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)">
      <summary>文字列で表した時刻情報を含む <see langword="Date" /> 値を返します。日付情報は 1 年 1 月 1 日に設定されます。</summary>
      <param name="StringTime">必須です。 1 年 1 月 1 日の 00:00:00 から、9999 年 12 月 31 日の 23:59:59 までの日付/時刻値を表す文字列式。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="StringTime" /> に無効な日付情報が含まれています。</exception>
      <returns>文字列で表した時刻情報を含む <see langword="Date" /> 値であり、日付情報は 1 年 1 月 1 日に設定されます。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>曜日を表す数値を含む整数値を返します。</summary>
      <param name="DateValue">必須です。 曜日を調べる <see langword="Date" /> 値。</param>
      <param name="DayOfWeek">省略可能。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> が使用されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="DayOfWeek" /> が 0 より小さいか、または 7 を超えています。</exception>
      <returns>曜日を表す数値を含む整数値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>指定された曜日の名前を含んでいる文字列値を返します。</summary>
      <param name="Weekday">必須です。 整数。 曜日を指定する 1 ～ 7 の数値。1 は週の最初の曜日を表し、7 は週の最後の曜日を表します。 最初と最後の曜日は、<paramref name="FirstDayOfWeekValue" /> の設定により決まります。</param>
      <param name="Abbreviate">省略可能。 曜日の名前を省略するかどうかを示す <see langword="Boolean" /> 値。 省略した場合、既定値の <see langword="False" /> が使用され、曜日の名前は省略されません。</param>
      <param name="FirstDayOfWeekValue">省略可能。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see langword="FirstDayOfWeek.System" /> が使用されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Weekday" /> が 1 より小さいか 7 を超えています。または <paramref name="FirstDayOfWeekValue" /> が 0 より小さいか 7 を超えています。</exception>
      <returns>指定された曜日の名前を含んでいる文字列値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)">
      <summary>年を表す 1 から 9999 の整数値を返します。</summary>
      <param name="DateValue">必須です。 年を抽出する <see langword="Date" /> 値。</param>
      <returns>年を表す 1 から 9999 の整数値。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.DateString">
      <summary>システムの現在の日付を表す文字列値を返すか設定します。</summary>
      <exception cref="T:System.InvalidCastException">
        <see cref="P:Microsoft.VisualBasic.DateAndTime.DateString" /> の値を設定するのに使用する無効な形式。</exception>
      <returns>システムの現在の日付を表す文字列値を返すか設定します。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Now">
      <summary>ご利用のシステムに従った現在の日付と時刻を含む日付型の値を返します。</summary>
      <returns>システムに従った現在の日付と時刻。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay">
      <summary>システムの現在の時刻を含む <see langword="Date" /> 値を取得または設定します。</summary>
      <returns>システムの現在の時刻を含む <see langword="Date" /> 値を取得または設定します。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Timer">
      <summary>深夜からの経過秒数を表す <see cref="T:System.Double" /> 値を返します。</summary>
      <returns>午前0時から経過した秒数を表す値。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeString">
      <summary>システムの現在の時刻を表す文字列値を返すか設定します。</summary>
      <exception cref="T:System.InvalidCastException">
        <see langword="TimeString" /> の値を設定するのに使用する無効な形式。</exception>
      <returns>システムの現在の時刻を表す文字列値を返すか設定します。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Today">
      <summary>システムの現在の日付を含む <see langword="Date" /> 値を取得または設定します。</summary>
      <returns>システムの現在の日付を含む <see langword="Date" /> 値を取得または設定します。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.DateFormat">
      <summary>
        <see langword="FormatDateTime" /> 関数を呼び出すときの日付の表示方法を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.GeneralDate">
      <summary>実数の場合は、日付と時刻を表示します。 数値に小数部分がない場合は、日付のみを表示します。 数値に整数部分がない場合は、時刻のみを表示します。 日付と時刻の表示は、コンピューターの地域の設定によって決定されます。 このメンバーは、Visual Basic 定数の <see langword="vbGeneralDate" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongDate">
      <summary>コンピューターの地域の設定に指定されている長い日付形式を使用して日付を表示します。 このメンバーは、Visual Basic 定数の <see langword="vbLongDate" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongTime">
      <summary>コンピューターの地域の設定に指定されている長い時刻形式を使用して時刻を表示します。 このメンバーは、Visual Basic 定数の <see langword="vbLongTime" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortDate">
      <summary>コンピューターの地域の設定に指定されている短い日付形式を使用して日付を表示します。 このメンバーは、Visual Basic 定数の <see langword="vbShortDate" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortTime">
      <summary>コンピューターの地域の設定に指定されている短い時刻形式を使用して時刻を表示します。 このメンバーは、Visual Basic 定数の <see langword="vbShortTime" />に相当します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.DateInterval">
      <summary>日付関連の関数を呼び出すときに使用する、日付の間隔の決定方法と形式の設定方法を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Day">
      <summary>日 (1 ～ 31)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.DayOfYear">
      <summary>年間通算日 (1 ～ 366)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Hour">
      <summary>時 (0 ～ 23)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Minute">
      <summary>分 (0 ～ 59)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Month">
      <summary>月 (1 ～ 12)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Quarter">
      <summary>四半期 (1 ～ 4)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Second">
      <summary>秒 (0 ～ 59)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Weekday">
      <summary>曜日 (1 ～ 7)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.WeekOfYear">
      <summary>週 (1 ～ 53)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Year">
      <summary>Year</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.DueDate">
      <summary>財務メソッドを呼び出すときの支払期日を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DueDate.BegOfPeriod">
      <summary>日付の間隔の最初の日が期日になります。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DueDate.EndOfPeriod">
      <summary>日付の間隔の最後の日が期日になります。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ErrObject">
      <summary>
        <see langword="ErrObject" /> モジュールに含まれているプロパティおよびプロシージャを使用して、<see langword="Err" /> オブジェクトによる実行時エラーの識別と処理を実行します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Clear">
      <summary>
        <see langword="Err" /> オブジェクトのプロパティ設定をすべてクリアします。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.GetException">
      <summary>発生したエラーを表す例外を返します。</summary>
      <returns>発生したエラーを表す例外。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)">
      <summary>実行時エラーを生成します。<see langword="Error" /> ステートメントの代わりに使用できます。</summary>
      <param name="Number">必須です。 エラーの性質を識別する <see langword="Long" /> 型の整数。 Visual Basic エラーの番号は 0 から 65535 の範囲です。0 から 512 はシステム エラー用に予約されています。513 から 65535 はユーザー定義エラーに使用できます。 クラス モジュールの <see langword="Number" /> プロパティに固有のエラー コードを設定する場合は、エラー コード番号を <see langword="vbObjectError" /> 定数に追加する必要があります。 たとえば、エラー番号 513 を生成するには、<c>vbObjectError + 513</c> を <see langword="Number" /> プロパティに割り当てます。</param>
      <param name="Source">省略可能。 エラーが生成されたオブジェクトまたはアプリケーションを指定する <see langword="String" /> 型の式。 オブジェクトに対してこのプロパティを設定する場合は、<c>project</c>.<c>class</c> の形式を使用します。 <paramref name="Source" /> が指定されていない場合は、現在の Visual Basic プロジェクトのプロセス ID が使用されます。</param>
      <param name="Description">省略可能。 エラーを説明する <see langword="String" /> 型の式。 省略した場合、<see langword="Number" /> プロパティの値が調べられます。 Visual Basic 実行時エラー コードに対応する可能性がある場合、<see langword="Error" /> 関数によって返される文字列は <see langword="Description" /> プロパティとして使用されます。 <see langword="Number" /> プロパティに対応する Visual Basic エラーがなかった場合は、"アプリケーション定義エラーまたはオブジェクト定義エラー" メッセージが使用されます。</param>
      <param name="HelpFile">省略可能。 このエラーのヘルプが含まれているヘルプ ファイルへの絶対パス。 省略した場合、Visual Basic は Visual Basic ヘルプ ファイルの完全修飾されたドライブ、パス、およびファイル名を使用します。</param>
      <param name="HelpContext">省略可能。 エラーのヘルプを提供する <paramref name="HelpFile" /> 内のトピックを識別するコンテキスト ID。 省略した場合、<see langword="Number" /> プロパティに対応するエラーの Visual Basic ヘルプ ファイルのコンテキスト ID が使用されます (存在する場合)。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Description">
      <summary>エラーに関連する説明文字列を含む <see langword="String" /> 型の式を返すか、または設定します。 読み取りと書き込みが可能です。</summary>
      <returns>エラーに関連する説明文字列を含む <see langword="String" /> 型の式を返すか、または設定します。 読み取りと書き込みが可能です。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Erl">
      <summary>最後に実行されたステートメントの行番号を示す整数を取得します。</summary>
      <returns>最後に実行されたステートメントの行番号。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.HelpContext">
      <summary>ヘルプ ファイルのトピックのコンテキスト ID を含む <see langword="Integer" /> を返すか、または設定します。 読み取りと書き込みが可能です。</summary>
      <returns>ヘルプ ファイルのトピックのコンテキスト ID を含む <see langword="Integer" /> を返すか、または設定します。 読み取りと書き込みが可能です。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.HelpFile">
      <summary>ヘルプ ファイルへの絶対パスを含む <see langword="String" /> 型の式を返すか、または設定します。 読み取りと書き込みが可能です。</summary>
      <returns>ヘルプ ファイルへの絶対パスを含む <see langword="String" /> 型の式を返すか、または設定します。 読み取りと書き込みが可能です。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.LastDllError">
      <summary>ダイナミック リンク ライブラリ (DLL) の呼び出しによって生成されたシステム エラー コードを取得します。</summary>
      <returns>ダイナミックリンクライブラリ (DLL) への呼び出しによって生成されたシステムエラーコード。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Number">
      <summary>エラーを示す数値を返すか、または設定します。 読み取りと書き込みが可能です。</summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が 65535 より大きい値です。</exception>
      <returns>エラーを示す数値を返すか、または設定します。 読み取りと書き込みが可能です。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Source">
      <summary>最初にエラーを生成したオブジェクトまたはアプリケーションの名前を示す <see langword="String" /> 型の式を返すか、または設定します。 読み取りと書き込みが可能です。</summary>
      <returns>最初にエラーを生成したオブジェクトまたはアプリケーションの名前を示す <see langword="String" /> 型の式を返すか、または設定します。 読み取りと書き込みが可能です。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileAttribute">
      <summary>ファイル アクセス関数を呼び出すときに使用するファイル属性を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Archive">
      <summary>ファイルは前回のバックアップ以降に変更されています。 このメンバーは、Visual Basic 定数の <see langword="vbArchive" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Directory">
      <summary>ディレクトリまたはフォルダー。 このメンバーは、Visual Basic 定数の <see langword="vbDirectory" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Hidden">
      <summary>非表示。 このメンバーは、Visual Basic 定数の <see langword="vbHidden" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Normal">
      <summary>通常 (<see langword="Dir" /> および <see langword="SetAttr" /> の既定)。 このファイルには特殊文字は適用されません。 このメンバーは、Visual Basic 定数の <see langword="vbNormal" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.ReadOnly">
      <summary>読み取り専用。 このメンバーは、Visual Basic 定数の <see langword="vbReadOnly" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.System">
      <summary>システム ファイル。 このメンバーは、Visual Basic 定数の <see langword="vbSystem" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Volume">
      <summary>ボリューム ラベル。 この属性は、<see langword="SetAttr" /> では使用できません。 このメンバーは、Visual Basic 定数の <see langword="vbVolume" />に相当します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption">
      <summary>削除するディレクトリにファイルまたはディレクトリが含まれている場合に実行する操作を指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption.DeleteAllContents">
      <summary>ディレクトリとそのディレクトリの内容を削除します。 既定モード。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption.ThrowIfDirectoryNonEmpty">
      <summary>ディレクトリが空でない場合、<see cref="T:System.IO.IOException" /> がスローされます。 この例外の <see langword="Data" /> プロパティには、削除できなかったファイルの一覧が格納されます。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.FieldType">
      <summary>テキスト フィールドが区切り形式か固定幅形式かを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.FieldType.Delimited">
      <summary>フィールドが区切り形式であることを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.FieldType.FixedWidth">
      <summary>フィールドが固定幅形式であることを示します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.FileSystem">
      <summary>ドライブ、ファイル、ディレクトリを操作するためのプロパティとメソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(System.String,System.String)">
      <summary>2 つのパスを結合し、適切な形式のパスを返します。</summary>
      <param name="baseDirectory">
        <see langword="String" />. 結合する 1 つ目のパス。</param>
      <param name="relativePath">
        <see langword="String" />. 結合する 2 つ目のパス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseDirectory" /> または <paramref name="relativePath" /> のパスの形式が正しくありません。</exception>
      <returns>指定されたパスの組み合わせ。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String)">
      <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
      <param name="sourceDirectoryName">コピーするディレクトリ。</param>
      <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
      <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
      <param name="sourceDirectoryName">コピーするディレクトリ。</param>
      <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
      <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="ShowUI" /> が <see langword="UIOption.AllDialogs" /> に設定されている場合にユーザーが操作を取り消したか、ディレクトリ内の 1 つ以上のファイルをコピーできません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
      <param name="sourceDirectoryName">コピーするディレクトリ。</param>
      <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <param name="onUserCancel">操作中にユーザーが **[キャンセル]** をクリックした場合の処理を指定します。 既定値は <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
      <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="ShowUI" /> が <see langword="UIOption.AllDialogs" /> に設定されている場合にユーザーが操作を取り消したか、ディレクトリ内の 1 つ以上のファイルをコピーできません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)">
      <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
      <param name="sourceDirectoryName">コピーするディレクトリ。</param>
      <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
      <param name="overwrite">既存のファイルを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
      <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)">
      <summary>ファイルを新しい場所にコピーします。</summary>
      <param name="sourceFileName">コピーするファイル。</param>
      <param name="destinationFileName">ファイルのコピー先となる場所。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
      <exception cref="T:System.IO.IOException">コピー先のディレクトリにある同じ名前のファイルが使用中です。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>ファイルを新しい場所にコピーします。</summary>
      <param name="sourceFileName">コピーするファイル。</param>
      <param name="destinationFileName">ファイルのコピー先となる場所。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
      <exception cref="T:System.IO.IOException">移動先にファイルが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>ファイルを新しい場所にコピーします。</summary>
      <param name="sourceFileName">コピーするファイル。</param>
      <param name="destinationFileName">ファイルのコピー先となる場所。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <param name="onUserCancel">操作中にユーザーが **[キャンセル]** をクリックした場合の処理を指定します。 既定値は <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
      <exception cref="T:System.IO.IOException">移動先にファイルが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="UICancelOption" /> が <see langword="ThrowException" /> に設定されている場合にユーザーが操作を取り消したか、不特定の I/O エラーが発生しました。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,System.Boolean)">
      <summary>ファイルを新しい場所にコピーします。</summary>
      <param name="sourceFileName">コピーするファイル。</param>
      <param name="destinationFileName">ファイルのコピー先となる場所。</param>
      <param name="overwrite">既存のファイルを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
      <exception cref="T:System.IO.IOException">移動先にファイルが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)">
      <summary>ディレクトリを作成します。</summary>
      <param name="directory">ディレクトリの名前および場所。</param>
      <exception cref="T:System.ArgumentException">ディレクトリ名が不正な場合。 たとえば、無効な文字が含まれているか、空白のみであることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.PathTooLongException">ディレクトリ名が長すぎます。</exception>
      <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (":") だけが指定されている場合</exception>
      <exception cref="T:System.IO.IOException">作成するディレクトリの親ディレクトリが読み取り専用です。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーがディレクトリを作成するためのアクセス許可を保持していません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)">
      <summary>ディレクトリを削除します。</summary>
      <param name="directory">削除するディレクトリ。</param>
      <param name="onDirectoryNotEmpty">削除するディレクトリにファイルまたはディレクトリが含まれている場合に実行する操作を指定します。 既定値は <see langword="DeleteDirectoryOption.DeleteAllContents" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが長さ 0 の文字列であるか、形式に誤りがあるか、空白だけが含まれているか、または無効な文字 (ワイルドカード文字を含む) が含まれています。 パスがデバイス パスです (\\.\ で始まる)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルが指定されています。</exception>
      <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用中です。</exception>
      <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (:) が含まれています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消したか、ディレクトリを削除できませんでした。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)">
      <summary>ディレクトリを削除します。</summary>
      <param name="directory">削除するディレクトリ。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうかを指定します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが長さ 0 の文字列であるか、形式に誤りがあるか、空白だけが含まれているか、または無効な文字 (ワイルドカード文字を含む) が含まれています。 パスがデバイス パスです (\\.\ で始まる)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルが指定されています。</exception>
      <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用中です。</exception>
      <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (:) が含まれています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消したか、ディレクトリを削除できませんでした。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>ディレクトリを削除します。</summary>
      <param name="directory">削除するディレクトリ。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうかを指定します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
      <param name="onUserCancel">ユーザーが **[キャンセル]** をクリックした場合に例外をスローするかどうかを指定します。</param>
      <exception cref="T:System.ArgumentException">パスが長さ 0 の文字列であるか、形式に誤りがあるか、空白だけが含まれているか、または無効な文字 (ワイルドカード文字を含む) が含まれています。 パスがデバイス パスです (\\.\ で始まる)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルが指定されています。</exception>
      <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用中です。</exception>
      <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (:) が含まれています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消したか、ディレクトリを削除できませんでした。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String)">
      <summary>ファイルを削除します。</summary>
      <param name="file">削除対象のファイルの名前とパス。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さ 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、ファイルを指定する必要がある場所の末尾にスラッシュが付いているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.IO.IOException">ファイルが使用中です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーがファイルの削除に必要なアクセス許可を保持していないか、ファイルが読み取り専用です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)">
      <summary>ファイルを削除します。</summary>
      <param name="file">削除対象のファイルの名前とパス。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうかを指定します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さ 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、ファイルを指定する必要がある場所の末尾にスラッシュが付いているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.IO.IOException">ファイルが使用中です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーがファイルの削除に必要なアクセス許可を保持していないか、ファイルが読み取り専用です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>ファイルを削除します。</summary>
      <param name="file">削除対象のファイルの名前とパス。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうかを指定します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
      <param name="onUserCancel">ユーザーによって操作が取り消された場合に、例外をスローするかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さ 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、ファイルを指定する必要がある場所の末尾にスラッシュが付いているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.IO.IOException">ファイルが使用中です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーがファイルの削除に必要なアクセス許可を保持していないか、ファイルが読み取り専用です。</exception>
      <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消し、かつ <paramref name="onUserCancel" /> が <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> に設定されています。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(System.String)">
      <summary>指定されたディレクトリが存在する場合、<see langword="True" /> を返します。</summary>
      <param name="directory">ディレクトリのパス。</param>
      <returns>ディレクトリが存在する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 パラメーターがディレクトリではなく名前とファイルのパスを表していた場合は、このメソッドも <see langword="False" /> を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FileExists(System.String)">
      <summary>指定されたファイルが存在する場合、<see langword="True" /> を返します。</summary>
      <param name="file">ファイルの名前とパス。</param>
      <exception cref="T:System.ArgumentException">ファイル名がバックスラッシュ (\) で終わっています。</exception>
      <returns>ファイルが存在する場合は <see langword="True" /> を返します。それ以外の場合は <see langword="False" /> を返します。 パラメーターがファイルではなくディレクトリのパスを表していた場合は、このメソッドも <see langword="False" /> を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)">
      <summary>指定されたテキストが格納されたファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
      <param name="directory">検索するディレクトリ。</param>
      <param name="containsText">検索文字列。</param>
      <param name="ignoreCase">検索時に大文字と小文字を区別する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="True" /> です。</param>
      <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
      <exception cref="T:System.ArgumentException">次のいずれかの理由でパスが無効です: 長さが0の文字列です。これには、空白のみが含まれます。無効な文字が含まれています。またはデバイスパス ( <c> \\ . \</c>で始まる) です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">指定されたディレクトリ パスにコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
      <returns>指定されたテキストを含んでいるファイルの名前の読み取り専用コレクション。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>指定されたテキストが格納されたファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
      <param name="directory">検索するディレクトリ。</param>
      <param name="containsText">検索文字列。</param>
      <param name="ignoreCase">検索時に大文字と小文字を区別する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="True" /> です。</param>
      <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
      <param name="fileWildcards">検索に使用するパターン。</param>
      <exception cref="T:System.ArgumentException">次のいずれかの理由でパスが無効です: 長さが0の文字列です。これには、空白のみが含まれます。無効な文字が含まれています。またはデバイスパス ( <c> \\ . \</c>で始まる) です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">指定されたディレクトリ パスにコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
      <returns>指定されたテキストを含んでいるファイルの名前の読み取り専用コレクション。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String)">
      <summary>ディレクトリに含まれるサブディレクトリのパス名を表す文字列のコレクションを返します。</summary>
      <param name="directory">ディレクトリの名前とパス。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
      <returns>指定されたディレクトリに存在するサブディレクトリのパス名の読み取り専用コレクション。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>ディレクトリに含まれるサブディレクトリのパス名を表す文字列のコレクションを返します。</summary>
      <param name="directory">ディレクトリの名前とパス。</param>
      <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
      <param name="wildcards">名前の検索に使用するパターン。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">指定したワイルドカード文字の中に、<see langword="Nothing" />、空の文字列、または空白のみが含まれています。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
      <returns>指定されたディレクトリに存在するサブディレクトリのパス名の読み取り専用コレクション。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)">
      <summary>指定したパスの <see cref="T:System.IO.DirectoryInfo" /> オブジェクトを返します。</summary>
      <param name="directory">
        <see langword="String" />. ディレクトリのパス。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">ディレクトリ パスにコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <returns>指定されたパスの <see cref="T:System.IO.DirectoryInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(System.String)">
      <summary>指定したドライブの <see cref="T:System.IO.DriveInfo" /> オブジェクトを返します。</summary>
      <param name="drive">確認するドライブ。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="drive" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <returns>指定されたドライブの <see cref="T:System.IO.DriveInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)">
      <summary>指定したファイルの <see cref="T:System.IO.FileInfo" /> オブジェクトを返します。</summary>
      <param name="file">ファイルの名前とパス。</param>
      <exception cref="T:System.ArgumentException">パス名が不適切である場合。 たとえば、無効な文字が含まれている場合や、空白のみの場合などがあります。 ファイル名の末尾にスラッシュ記号が付いています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.NotSupportedException">パス文字列の途中にコロンが含まれています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスが長すぎます。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">当該ファイルに対して、ユーザーがアクセス制御リスト (ACL: access control list) のアクセス許可を保持していません。</exception>
      <returns>指定されたファイルの <see cref="T:System.IO.FileInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String)">
      <summary>ディレクトリ内のファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
      <param name="directory">検索するディレクトリ。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">検索対象のディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="directory" /> が既存のファイルを指しています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
      <returns>指定されたディレクトリから取得されたファイル名の読み取り専用コレクション。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>ディレクトリ内のファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
      <param name="directory">検索するディレクトリ。</param>
      <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
      <param name="wildcards">検索に使用するパターン。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">検索対象のディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="directory" /> が既存のファイルを指しています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
      <returns>指定されたディレクトリから取得されたファイル名の読み取り専用コレクション。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetName(System.String)">
      <summary>指定されたパスからファイル名を解析し、取り出します。</summary>
      <param name="path">必須です。 解析対象のパス。 <see langword="String" />.</param>
      <returns>指定されたパスのファイル名部分。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)">
      <summary>指定されたパスの親パスを返します。</summary>
      <param name="path">確認するパス。</param>
      <exception cref="T:System.ArgumentException">パスがルート パスであるため、親パスが存在しません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <returns>指定されたパスの親パス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName">
      <summary>一意な名前を持つ 0 バイトの一時ファイルをディスク上に作成し、そのファイルへの完全パスを返します。</summary>
      <returns>一時ファイルの完全パスを保持する <see langword="String" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String)">
      <summary>ディレクトリの場所を移動します。</summary>
      <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
      <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">移動先がルート ディレクトリであるか、移動元と移動先のパスが同じです。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>ディレクトリの場所を移動します。</summary>
      <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
      <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">ターゲット ディレクトリが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>ディレクトリの場所を移動します。</summary>
      <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
      <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <param name="onUserCancel">ユーザーによって操作が取り消された場合に、例外をスローするかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="onUserCancel" /> が <see langword="ThrowException" /> に設定されており、ファイルのサブディレクトリをコピーできません。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="onUserCancel" /> が <see langword="ThrowException" /> に設定されている場合にユーザーが操作を取り消したか、操作を完了できませんでした。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,System.Boolean)">
      <summary>ディレクトリの場所を移動します。</summary>
      <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
      <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
      <param name="overwrite">既存のディレクトリを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\.\ で始まっている) ことが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">ターゲット ディレクトリが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String)">
      <summary>ファイルを新しい場所に移動します。</summary>
      <param name="sourceFileName">移動するファイルのパス。</param>
      <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>ファイルを新しい場所に移動します。</summary>
      <param name="sourceFileName">移動するファイルのパス。</param>
      <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>ファイルを新しい場所に移動します。</summary>
      <param name="sourceFileName">移動するファイルのパス。</param>
      <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
      <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
      <param name="onUserCancel">ユーザーによって操作が取り消された場合に、例外をスローするかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="onUserCancel" /> が <see langword="ThrowException" /> に設定されている場合に、ユーザーが操作を取り消したか、不特定の I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,System.Boolean)">
      <summary>ファイルを新しい場所に移動します。</summary>
      <param name="sourceFileName">移動するファイルのパス。</param>
      <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
      <param name="overwrite">既存のファイルを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)">
      <summary>
        <see langword="OpenTextFieldParser" /> メソッドを使用すると、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを作成できます。このオブジェクトは、ログなどの構造化されたテキスト ファイルを容易かつ効率的に解析できるようにします。 <see langword="TextFieldParser" /> オブジェクトは、区切り形式および固定幅の、どちらのファイルの読み込みにも使用できます。</summary>
      <param name="file">
        <see langword="TextFieldParser" /> で開くファイル。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定の書式を使用して行を解析できません。 例外の原因となった行が例外メッセージで報告され、その行に含まれているテキストには <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティが代入されます。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <returns>指定されたファイルを読み取るための <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.Int32[])">
      <summary>
        <see langword="OpenTextFieldParser" /> メソッドを使用すると、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを作成できます。このオブジェクトは、ログなどの構造化されたテキスト ファイルを容易かつ効率的に解析できるようにします。 <see langword="TextFieldParser" /> オブジェクトは、区切り形式および固定幅の、どちらのファイルの読み込みにも使用できます。</summary>
      <param name="file">
        <see langword="TextFieldParser" /> で開くファイル。</param>
      <param name="fieldWidths">フィールドの幅。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定の書式を使用して行を解析できません。 例外の原因となった行が例外メッセージで報告され、その行に含まれているテキストには <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティが代入されます。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <returns>指定されたファイルを読み取るための <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.String[])">
      <summary>
        <see langword="OpenTextFieldParser" /> メソッドを使用すると、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを作成できます。このオブジェクトは、ログなどの構造化されたテキスト ファイルを容易かつ効率的に解析できるようにします。 <see langword="TextFieldParser" /> オブジェクトは、区切り形式および固定幅の、どちらのファイルの読み込みにも使用できます。</summary>
      <param name="file">
        <see langword="TextFieldParser" /> で開くファイル。</param>
      <param name="delimiters">フィールドの区切り記号。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定の書式を使用して行を解析できません。 例外の原因となった行が例外メッセージで報告され、その行に含まれているテキストには <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティが代入されます。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <returns>指定されたファイルを読み取るための <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String)">
      <summary>
        <see cref="T:System.IO.StreamReader" /> オブジェクトを開いてファイルから読み取ります。</summary>
      <param name="file">読み取るファイル。</param>
      <exception cref="T:System.ArgumentException">ファイル名がバックスラッシュ (\) で終わっています。</exception>
      <exception cref="T:System.IO.FileNotFoundException">指定されたファイルが見つかりません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがファイルの読み取りに必要なアクセス許可を保持していません。</exception>
      <returns>ファイルから読み取る <see cref="T:System.IO.StreamReader" /> オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String,System.Text.Encoding)">
      <summary>
        <see cref="T:System.IO.StreamReader" /> オブジェクトを開いてファイルから読み取ります。</summary>
      <param name="file">読み取るファイル。</param>
      <param name="encoding">ファイルの内容に使用されるエンコーディング。 既定値は ASCII です。</param>
      <exception cref="T:System.ArgumentException">ファイル名がバックスラッシュ (\) で終わっています。</exception>
      <exception cref="T:System.IO.FileNotFoundException">指定されたファイルが見つかりません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがファイルの読み取りに必要なアクセス許可を保持していません。</exception>
      <returns>ファイルから読み取る <see cref="T:System.IO.StreamReader" /> オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.IO.StreamWriter" /> オブジェクトを開いて指定されたファイルに書き込みます。</summary>
      <param name="file">書き込み先のファイル。</param>
      <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.ArgumentException">ファイル名の末尾にスラッシュが付いています。</exception>
      <returns>指定したファイルに書き込む <see cref="T:System.IO.StreamWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)">
      <summary>
        <see cref="T:System.IO.StreamWriter" /> を開いて指定されたファイルに書き込みます。</summary>
      <param name="file">書き込み先のファイル。</param>
      <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
      <param name="encoding">ファイルへの書き込み時に使用するエンコーディング。 既定値は ASCII です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.ArgumentException">ファイル名の末尾にスラッシュが付いています。</exception>
      <returns>指定したファイルに書き込む <see cref="T:System.IO.StreamWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(System.String)">
      <summary>テキスト ファイルの内容をバイト配列として返します。</summary>
      <param name="file">読み取るファイル。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <returns>ファイルの内容を保持する <see langword="Byte" /> 配列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String)">
      <summary>テキスト ファイルの内容を <see langword="String" /> として返します。</summary>
      <param name="file">読み取るファイルの名前とパス。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <returns>ファイルの内容を保持する <see langword="String" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String,System.Text.Encoding)">
      <summary>テキスト ファイルの内容を <see langword="String" /> として返します。</summary>
      <param name="file">読み取るファイルの名前とパス。</param>
      <param name="encoding">ファイルの読み取り時に使用する文字エンコーディング。 既定値は UTF-8 です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <returns>ファイルの内容を保持する <see langword="String" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(System.String,System.String)">
      <summary>ディレクトリ名を変更します。</summary>
      <param name="directory">名前を変更するディレクトリのパスおよび名前。</param>
      <param name="newName">ディレクトリの新しい名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newName" /> にパス情報が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> が <see langword="Nothing" />です。  
  
- または - 
 <paramref name="newName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="newName" /> で指定したのと同じ名前のファイルまたはディレクトリが既に存在します。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(System.String,System.String)">
      <summary>ファイル名を変更します。</summary>
      <param name="file">名前を変更するファイル。</param>
      <param name="newName">新しいファイル名。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newName" /> にパス情報が含まれているか、末尾にバックスラッシュ (\) が付いています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" />です。  
  
- または - 
 <paramref name="newName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ディレクトリが存在しません。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="newName" /> で指定したのと同じ名前のファイルまたはディレクトリが既に存在します。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(System.String,System.Byte[],System.Boolean)">
      <summary>バイナリ ファイルにデータを書き込みます。</summary>
      <param name="file">書き込み先のファイルのパスと名前。</param>
      <param name="data">ファイルに書き込むデータ。</param>
      <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean)">
      <summary>ファイルにテキストを書き込みます。</summary>
      <param name="file">書き込み先のファイル。</param>
      <param name="text">ファイルに書き込まれるテキスト。</param>
      <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)">
      <summary>ファイルにテキストを書き込みます。</summary>
      <param name="file">書き込み先のファイル。</param>
      <param name="text">ファイルに書き込まれるテキスト。</param>
      <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。</param>
      <param name="encoding">ファイルへの書き込み時に使用するエンコーディングを指定します。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\.\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
      <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
      <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory">
      <summary>現在のディレクトリを取得または設定します。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">パスが無効です。</exception>
      <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
      <returns>ファイル I/O 操作の現在のディレクトリ。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.FileSystem.Drives">
      <summary>利用可能なすべてのドライブ名の読み取り専用コレクションを返します。</summary>
      <returns>
        <see cref="T:System.IO.DriveInfo" /> オブジェクトとして使用できるすべてのドライブの読み取り専用コレクション。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.MalformedLineException">
      <summary>
        <see cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" /> メソッドが、指定された形式で行を解析できなかった場合にスローされる例外です。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">転送元または転送先に関する文脈情報を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> 構造体。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーについて説明するメッセージ。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明する <see cref="T:System.String" />。</param>
      <param name="innerException">現在の例外の原因である <see cref="T:System.Exception" /> オブジェクト。 <see cref="P:System.Exception.InnerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Int64)">
      <summary>指定したエラー メッセージと、行番号を使用して、<see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外のメッセージ。</param>
      <param name="lineNumber">形式に誤りのある行の行番号。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Int64,System.Exception)">
      <summary>エラー メッセージ、行番号、およびこの例外の原因である内部例外への参照を指定して、<see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外のメッセージ。</param>
      <param name="lineNumber">形式に誤りのある行の行番号。</param>
      <param name="innerException">現在の例外の原因である <see cref="T:System.Exception" />。 <see cref="P:System.Exception.InnerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>例外に関する情報を使用して、<see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトを設定します。</summary>
      <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">転送元または転送先に関する文脈情報を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> 構造体。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.ToString">
      <summary>現在の例外の文字列形式を作成して返します。</summary>
      <returns>現在の例外の文字列形式。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.MalformedLineException.LineNumber">
      <summary>形式に誤りのある行の行番号を取得します。</summary>
      <returns>形式に誤りのある行の行番号。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.RecycleOption">
      <summary>ファイルを完全に削除するか、ごみ箱に移動するかを指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.RecycleOption.DeletePermanently">
      <summary>ファイルまたはディレクトリを完全に削除します。 既定モード。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.RecycleOption.SendToRecycleBin">
      <summary>ファイルまたはディレクトリをごみ箱に送ります。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.SearchOption">
      <summary>すべてのディレクトリを検索するか最上位ディレクトリのみを検索するかを指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.SearchOption.SearchAllSubDirectories">
      <summary>指定されたディレクトリと、そこに含まれるすべてのサブディレクトリを検索します。 既定モード。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.SearchOption.SearchTopLevelOnly">
      <summary>指定されたディレクトリだけを検索し、サブディレクトリを検索から除外します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.SpecialDirectories">
      <summary>一般的に参照されるディレクトリにアクセスするためのプロパティを提供します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.SpecialDirectories.#ctor">
      <summary>
        <see cref="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" /> クラスの新しいインスタンスを返します。</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.AllUsersApplicationData">
      <summary>すべてのユーザー用の Application Data ディレクトリへのパス名を取得します。</summary>
      <exception cref="T:System.Security.Permissions.EnvironmentPermission">システム環境変数、およびユーザー環境変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">パスが空です。通常は、オペレーティング システムでディレクトリがサポートされていないことが原因です。</exception>
      <returns>すべてのユーザー用の Application Data ディレクトリへのパス。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.CurrentUserApplicationData">
      <summary>現在のユーザー用の Application Data ディレクトリへのパス名を取得します。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">パスが空です。通常は、オペレーティング システムでディレクトリがサポートされていないことが原因です。</exception>
      <returns>現在のユーザー用の Application Data ディレクトリへのパス。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Desktop">
      <summary>デスクトップ ディレクトリへのパス名を取得します。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">パスが空です。通常は、オペレーティング システムでディレクトリがサポートされていないことが原因です。</exception>
      <returns>デスクトップ ディレクトリへのパス。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyDocuments">
      <summary>マイ ドキュメント ディレクトリを指すパス名を取得します。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">パスが空です。通常は、オペレーティング システムでディレクトリがサポートされていないことが原因です。</exception>
      <returns>マイ ドキュメント ディレクトリへのパス。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyMusic">
      <summary>My Music ディレクトリへのパス名を取得します。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">パスが空です。通常は、オペレーティング システムでディレクトリがサポートされていないことが原因です。</exception>
      <returns>マイ ミュージック ディレクトリへのパス。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyPictures">
      <summary>My Pictures ディレクトリへのパス名を取得します。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">パスが空です。通常は、オペレーティング システムでディレクトリがサポートされていないことが原因です。</exception>
      <returns>マイ ピクチャ ディレクトリへのパス。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.ProgramFiles">
      <summary>Program Files ディレクトリへのパスを取得します。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">パスが空です。通常は、オペレーティング システムでディレクトリがサポートされていないことが原因です。</exception>
      <returns>Program Filesディレクトリへのパス。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Programs">
      <summary>Programs ディレクトリへのパス名を取得します。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">パスが空です。通常は、オペレーティング システムでディレクトリがサポートされていないことが原因です。</exception>
      <returns>Programs ディレクトリへのパス。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Temp">
      <summary>Temp ディレクトリへのパス名を取得します。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">パスが空です。通常は、オペレーティング システムでディレクトリがサポートされていないことが原因です。</exception>
      <returns>Temp ディレクトリへのパス。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
      <summary>構造化テキスト ファイルの解析に使用するメソッドとプロパティを提供します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)">
      <summary>
        <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. 解析するストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> から読み取ることができません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
        <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. 解析するストリーム。</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。 既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> から読み取ることができません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>
        <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. 解析するストリーム。</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。 既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。 既定値は <see langword="True" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> から読み取ることができません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
      <summary>
        <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. 解析するストリーム。</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。 既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。 既定値は <see langword="True" /> です。</param>
      <param name="leaveOpen">
        <see langword="Boolean" />. <see langword="TextFieldParser" /> オブジェクトを閉じるときに、<paramref name="stream" /> を開いたままにするかどうかを指定します。 既定値は <see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> から読み取ることができません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)">
      <summary>
        <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" />. 解析する <see cref="T:System.IO.TextReader" /> ストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> が <see langword="Nothing" />です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)">
      <summary>
        <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="path">
        <see langword="String" />. 解析するファイルの絶対パス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が空の文字列です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
      <summary>
        <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="path">
        <see langword="String" />. 解析するファイルの絶対パス。</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。 既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が空の文字列であるか、<paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>
        <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="path">
        <see langword="String" />. 解析するファイルの絶対パス。</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。 既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。 既定値は <see langword="True" /> です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が空の文字列であるか、<paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close">
      <summary>現在の <see langword="TextFieldParser" /> オブジェクトを閉じます。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)">
      <summary>
        <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトによって使用されているリソースを解放します。</summary>
      <param name="disposing">Boolean です。 マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="True" />。アンマネージド リソースだけを解放する場合は <see langword="False" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize">
      <summary>
        <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトがガベージ コレクションにより収集される前にリソースを解放し、その他のクリーンアップ操作を実行できるようにします。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
      <summary>カーソルを進めずに、指定された文字数を読み込みます。</summary>
      <param name="numberOfChars">読み取る文字の数。 必須です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfChars" /> が 0 未満です。</exception>
      <returns>指定数の読み取られた文字を格納する文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
      <summary>現在行のすべてのフィールドを読み込んで文字列の配列として返し、次のデータが格納されている行にカーソルを進めます。</summary>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定された形式を使ってフィールドを解析できません。</exception>
      <returns>現在の行のフィールド値を格納する文字列の配列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine">
      <summary>現在の行を文字列として返し、カーソルを次の行に進めます。</summary>
      <returns>ファイルまたはストリームの現在の行。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd">
      <summary>テキスト ファイルの残りの部分を読み込み、文字列として返します。</summary>
      <returns>ファイルまたはストリームの残りのテキスト。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
      <summary>リーダーの区切り記号を指定された値に設定し、フィールドの種類を <see langword="Delimited" /> に設定します。</summary>
      <param name="delimiters">
        <see langword="String" /> 型の配列。</param>
      <exception cref="T:System.ArgumentException">区切り記号の長さが 0 です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
      <summary>リーダーの区切り記号を指定の値に設定します。</summary>
      <param name="fieldWidths">
        <see langword="Integer" /> の配列。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.System#IDisposable#Dispose">
      <summary>
        <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトによって使用されているリソースを解放します。</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens">
      <summary>コメント トークンを定義します。 コメント トークンとは、コメント行であることを示すために、行頭に配置される文字列です。コメント トークンの配置された行は、パーサーによって無視されます。</summary>
      <exception cref="T:System.ArgumentException">コメント トークンに空白が含まれています。</exception>
      <returns>
        <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトのすべてのコメント トークンを格納する文字列配列。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
      <summary>テキスト ファイルの区切り記号を定義します。</summary>
      <exception cref="T:System.ArgumentException">区切り記号の値は、改行文字、空の文字列、または <see langword="Nothing" /> に設定されています。</exception>
      <returns>
        <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトのすべてのフィールド区切り記号を格納する文字列配列。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
      <summary>現在のカーソル位置とファイルの終端との間に、空行またはコメント行以外のデータが存在しない場合、<see langword="True" /> を返します。</summary>
      <returns>読み取るデータが他にない場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
      <summary>直前に発生した <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外の原因となった行を返します。</summary>
      <returns>直前に発生した <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外の原因となった行。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
      <summary>直前の <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外が発生した行の番号を返します。</summary>
      <returns>直前の <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外が発生した行の番号。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
      <summary>解析するテキスト ファイルの各列の幅を表します。</summary>
      <exception cref="T:System.ArgumentException">配列の最後のエントリ以外の場所で、幅の値がゼロ以下です。</exception>
      <returns>解析するテキスト ファイルの各列の幅を格納する整数配列。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes">
      <summary>区切り記号入りファイルを解析する場合に、フィールドが引用符で囲まれているかどうかを示します。</summary>
      <returns>フィールドが引用符で囲まれている場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber">
      <summary>現在の行番号を返します。ストリームから取り出す文字がなくなった場合は -1 を返します。</summary>
      <returns>現在の行番号。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
      <summary>解析対象のファイルが区切り形式か固定幅形式かを示します。</summary>
      <returns>解析対象のファイルが区切り形式か固定幅形式かを示す <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> 値。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace">
      <summary>フィールド値から前後の空白をトリムするかどうかを示します。</summary>
      <returns>フィールド値から前後の空白をトリムする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.UICancelOption">
      <summary>ユーザーが操作の途中で **[キャンセル]** をクリックした場合に、例外をスローするかどうかを指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UICancelOption.DoNothing">
      <summary>ユーザーによって **[キャンセル]** がクリックされても何もしません。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException">
      <summary>ユーザーによって **[キャンセル]** がクリックされた場合に、例外をスローします。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.UIOption">
      <summary>ファイルまたはディレクトリをコピー、削除、または移動する際、ダイアログ ボックスを表示するかどうかを指定します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UIOption.AllDialogs">
      <summary>プログレス ダイアログ ボックスおよびすべてのエラー ダイアログ ボックスを表示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UIOption.OnlyErrorDialogs">
      <summary>エラー ダイアログ ボックスだけを表示し、プログレス ダイアログ ボックスは非表示にします。 既定モード。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileSystem">
      <summary>
        <see langword="FileSystem" /> モジュールに含まれるプロシージャを使って、ファイル、ディレクトリ、またはフォルダー、およびシステムの操作を実行します。 <see langword="My" /> 機能を使用すると、<see langword="FileSystem" /> モジュールを使用した場合よりファイル I/O 操作の生産性およびパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)">
      <summary>現在のディレクトリまたはフォルダーを変更します。 <see langword="My" /> 機能を使用すると、<see langword="ChDir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</summary>
      <param name="Path">必須です。 新しい既定ディレクトリまたはフォルダーになるディレクトリまたはフォルダーを識別する文字列式です。 <paramref name="Path" /> にはドライブを含めることができます。 ドライブを指定しない場合、<see langword="ChDir" /> は現在のドライブの既定ディレクトリまたは既定フォルダーを変更します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> が空です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">指定されたドライブが無効です。または利用できません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)">
      <summary>現在のドライブを変更します。</summary>
      <param name="Drive">必須です。 既存のドライブを指定する文字列式。 長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。 <paramref name="Drive" /> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</param>
      <exception cref="T:System.IO.IOException">指定されたドライブが無効です。または利用できません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)">
      <summary>現在のドライブを変更します。</summary>
      <param name="Drive">必須です。 既存のドライブを指定する文字列式。 長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。 <paramref name="Drive" /> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</param>
      <exception cref="T:System.IO.IOException">指定されたドライブが無効です。または利用できません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.CurDir">
      <summary>現在のパスを表す文字列を返します。 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</summary>
      <returns>現在のパスを表す文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)">
      <summary>現在のパスを表す文字列を返します。 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</summary>
      <param name="Drive">任意。 既存のドライブを指定する <see langword="Char" /> 式です。 ドライブが指定されていない場合、または <paramref name="Drive" /> が長さ 0 の文字列 ("") である場合は、<see langword="CurDir" /> により現在のドライブのパスが返されます。</param>
      <returns>現在のパスを表す文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Dir">
      <summary>指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。 詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</summary>
      <returns>指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)">
      <summary>指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。 詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</summary>
      <param name="PathName">任意。 ファイル名、ディレクトリまたはフォルダー名、あるいはドライブ ボリューム ラベルを指定する文字列式です。 <paramref name="PathName" /> が見つからない場合は、長さ 0 の文字列 (<see langword="&quot;&quot;" />) が返されます。</param>
      <param name="Attributes">任意。 値がファイル属性を指定する列挙式または数式。 省略した場合、<see langword="Dir" /> は、<paramref name="Pathname" /> に一致する、属性のないファイルを返します。</param>
      <returns>指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)">
      <summary>
        <see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> を返します。</summary>
      <param name="FileNumber">必須です。 有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
      <returns>
        <see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)">
      <summary>
        <see langword="FileOpen" /> 関数を使用して開いたファイルのファイル モードを表す列挙体を返します。 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileAttr" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。 詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 <see langword="Integer" />。 任意の有効なファイル数。</param>
      <returns>次のいずれかの値です。 
 <list type="table"><listheader><term>[値]</term><description>ファイル アクセス モード</description></listheader><item><term>1</term><description><see langword="OpenMode.Input" /></description></item><item><term>2</term><description><see langword="OpenMode.Output" /></description></item><item><term>4</term><description><see langword="OpenMode.Random" /></description></item><item><term>8</term><description><see langword="OpenMode.Append" /></description></item><item><term>32</term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])">
      <summary>
        <see langword="FileOpen" /> 関数で開いたファイルへの入出力を終了して、ファイルを閉じます。 <see langword="My" /> を使用すると、ファイル I/O 操作の生産性およびパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumbers">任意。 閉じる対象となる、0 以上のチャネルで構成されるパラメーター配列。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> は存在しません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)">
      <summary>ファイルをコピーします。 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileCopy" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。 詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />」を参照してください。</summary>
      <param name="Source">必須です。 コピーするファイルの名前を指定する文字列式です。 <paramref name="Source" /> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</param>
      <param name="Destination">必須です。 コピー先のファイルの名前を指定する文字列式です。 <paramref name="Destination" /> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> または <paramref name="Destination" /> が無効であるか、指定されていません。</exception>
      <exception cref="T:System.IO.IOException">ファイルは既に開いています。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)">
      <summary>ファイルへの書き込み日時を示す <see langword="Date" /> 値を返します。 <see langword="My" /> 機能を使用すると、<see langword="FileDateTime" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</summary>
      <param name="PathName">必須です。 ファイル名を指定する文字列式です。 <paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="PathName" /> が無効です。またはワイルドカードを含んでいます。</exception>
      <exception cref="T:System.IO.FileNotFoundException">対象のファイルが存在しません。</exception>
      <returns>ファイルの作成日時または最終変更日時を示す <see langword="Date" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <param name="ArrayIsDynamic">任意。 文字列を書き込む場合のみ適用します。 配列を動的として扱うかどうか、およびサイズと境界を表す配列記述子が必要かどうかを指定します。</param>
      <param name="StringIsFixedLength">任意。 文字列を書き込む場合のみ適用します。 長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。 既定値は、<see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <param name="StringIsFixedLength">任意。 文字列を書き込む場合のみ適用します。 長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。 既定値は、<see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。 <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)">
      <summary>開いたディスク ファイルからデータを読み込んで変数に格納します。  <see langword="My" /> 機能を使用すると、<see langword="FileGetObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 データの読み込み先となる有効な変数名。</param>
      <param name="RecordNumber">任意。 読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)">
      <summary>ファイルの長さをバイト数で指定する値を返します。 <see langword="My" /> 機能を使用すると、<see langword="FileLen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</summary>
      <param name="PathName">必須です。 ファイルを指定する文字列式です。 <paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</param>
      <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
      <returns>バイト単位のファイルの長さです。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)">
      <summary>ファイルを開いて入出力を行います。 <see langword="My" /> 機能を使用すると、<see langword="FileOpen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。 <see langword="FreeFile" /> 関数を使用して、次に使用できるファイル番号を取得します。</param>
      <param name="FileName">必須です。 ファイル名を指定する文字列式。ディレクトリまたはフォルダー、およびドライブを含めることができます。</param>
      <param name="Mode">必須です。 ファイル モード (<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" />、または <see langword="Random" />) を指定する列挙体。 詳細については、「<see cref="T:Microsoft.VisualBasic.OpenMode" />」を参照してください。</param>
      <param name="Access">任意。 開いているファイルで許可されている操作 (<see langword="Read" />、<see langword="Write" />、または <see langword="ReadWrite" />) を示す列挙体。 既定値は <see langword="ReadWrite" /> です。 詳細については、「<see cref="T:Microsoft.VisualBasic.OpenAccess" />」を参照してください。</param>
      <param name="Share">任意。 他のプロセスによって開かれたファイルで許可されていない操作 (<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" />、および <see langword="Lock Read Write" />) を指定する列挙体。 既定値は <see langword="Lock Read Write" /> です。 詳細については、「<see cref="T:Microsoft.VisualBasic.OpenShare" />」を参照してください。</param>
      <param name="RecordLength">任意。 32,767 以下の値 (バイト単位)。 ランダム アクセス ファイルの場合は、レコード長を表します。 シーケンシャル ファイルの場合は、バッファー内の文字数を表します。</param>
      <exception cref="T:System.ArgumentException">レコード長が、-1 ではない負の値です。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileName" /> が既に開かれています。または <paramref name="FileName" /> が無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <param name="ArrayIsDynamic">任意。 文字列を書き込む場合のみ適用します。 配列を動的として扱うかどうか、および長さを表す文字列の配列記述子を書き込むかどうかを指定します。</param>
      <param name="StringIsFixedLength">任意。 文字列を書き込む場合のみ適用します。 長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。 既定値は、<see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <param name="StringIsFixedLength">任意。 文字列を書き込む場合のみ適用します。 長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。 既定値は、<see langword="False" /> です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)">
      <summary>変数の内容をディスク上のファイルに書き込みます。 <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</exception>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)">
      <summary>変数の内容をディスク上のファイルに書き込みます。  <see langword="My" /> 機能を使用すると、<see langword="FilePutObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ディスクに書き込まれるデータを保持する有効な変数の名前。</param>
      <param name="RecordNumber">任意。 書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)">
      <summary>
        <see langword="FileOpen" /> 関数を使用して開いたファイルに出力行の桁数を割り当てます。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="RecordWidth">必須です。 改行される前に 1 行に表示できる文字数を表す 0 から 255 の範囲の数式。 <paramref name="RecordWidth" /> が 0 の場合は、行の長さに制限がないことを示します。 <paramref name="RecordWidth" /> の既定値は 0 です。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FreeFile">
      <summary>
        <see langword="Integer" /> 関数で使用できる次のファイル番号を表す <see langword="FileOpen" /> 値を返します。</summary>
      <exception cref="T:System.IO.IOException">使用中のファイルが 255 個を超えています。</exception>
      <returns>
        <see langword="FileOpen" /> 関数で使用できる次のファイル番号を表す整数値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)">
      <summary>ファイル、ディレクトリ、またはフォルダーの属性を表す <see langword="FileAttribute" /> 型の値を返します。 <see langword="My" /> 機能を使用すると、<see langword="FileAttribute" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="PathName">必須です。 ファイル、ディレクトリ、またはフォルダーの名前を指定する文字列式です。 <paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="Pathname" /> が無効です。またはワイルドカードを含んでいます。</exception>
      <exception cref="T:System.IO.FileNotFoundException">対象のファイルが存在しません。</exception>
      <returns>列挙値のビットごとの組み合わせ。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)">
      <summary>開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Value">必須です。 ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)">
      <summary>
        <see langword="String" /> モードまたは <see langword="Input" /> モードで開いたファイルから読み取る文字を表す文字列型 (<see langword="Binary" />) の値を返します。 <see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="CharCount">必須です。 読み込む文字数を指定する有効な任意の数式。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> は存在しません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="CharCount" /> は &lt; 0 または &gt; 214 です。</exception>
      <returns>
        <see langword="Input" /> モードまたは <see langword="Binary" /> モードで開いたファイルからの文字が格納された文字列です。 <see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)">
      <summary>ファイルをディスクから削除します。 <see langword="My" /> 機能を使用すると、<see langword="Kill" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="PathName">必須です。 削除する 1 つ以上のファイル名を指定する文字列式です。 <paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</param>
      <exception cref="T:System.IO.IOException">対象のファイルが開かれています。</exception>
      <exception cref="T:System.IO.FileNotFoundException">対象のファイルが見つかりません。</exception>
      <exception cref="T:System.Security.SecurityException">アクセス許可は拒否されました。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)">
      <summary>開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <exception cref="T:System.IO.EndOfStreamException">ファイルの終端に達しました。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> は存在しません。</exception>
      <returns>開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)">
      <summary>開かれたファイル内の現在の読み込みと書き込みの位置を指定する値を返します。</summary>
      <param name="FileNumber">必須です。 有効な任意の <see langword="Integer" /> 型のファイル番号。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
      <returns>開かれたファイル内の現在の読み取り/書き込み位置です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)">
      <summary>
        <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。 <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)">
      <summary>
        <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。 <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Record">任意。 ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)">
      <summary>
        <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。 <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="FromRecord">任意。 ロックまたはアンロックされる最初のレコードまたはバイトの番号。</param>
      <param name="ToRecord">任意。 ロックまたはアンロックされる最後のレコードまたはバイトの番号。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)">
      <summary>
        <see langword="FileOpen" /> 関数を使用して開かれたファイルのサイズをバイト単位で返します。 <see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 有効なファイル番号が格納された整数です。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
      <returns>
        <see langword="FileOpen" /> 関数を使用して開かれたファイルのサイズ (バイト単位)。 <see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)">
      <summary>新しいディレクトリを作成します。 <see langword="My" /> 機能を使用すると、<see langword="MkDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />」を参照してください。</summary>
      <param name="Path">必須です。 作成されるディレクトリを識別する文字列式です。 <paramref name="Path" /> にはドライブを含めることができます。 ドライブを指定しない場合、<see langword="MkDir" /> は現在のドライブに新しいディレクトリを作成します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> が指定されていません。または空です。</exception>
      <exception cref="T:System.Security.SecurityException">アクセス許可は拒否されました。</exception>
      <exception cref="T:System.IO.IOException">ディレクトリが既に存在しています。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])">
      <summary>表示形式データをシーケンシャル ファイルに書き込みます。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Output">任意。 ファイルへ書き込む 0 個以上のコンマで区切られた式。  
  
<paramref name="Output" /> 引数の設定は以下の通りです。 
 <see langword="T:System.IO.IOException" />: ファイル モードが有効ではありません。  
  
 <see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> が存在しません。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])">
      <summary>表示形式データをシーケンシャル ファイルに書き込みます。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Output">任意。 ファイルへ書き込む 0 個以上のコンマで区切られた式。  
  
<paramref name="Output" /> 引数の設定は以下の通りです。 
 <see langword="T:System.IO.IOException" />: ファイル モードが有効ではありません。  
  
 <see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> が存在しません。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)">
      <summary>ディスク ファイルまたはディレクトリの名前を変更します。 <see langword="My" /> 機能を使用すると、<see langword="Rename" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="OldPath">必須です。 既存のファイルの名前と場所を指定する文字列式です。 <paramref name="OldPath" /> には、ファイルのディレクトリおよびドライブを含めることができます。</param>
      <param name="NewPath">必須です。 新しいファイルの名前と場所を指定する文字列式です。 <paramref name="NewPath" /> には、出力先のディレクトリおよびドライブを含めることができます。 <paramref name="NewPath" /> には、既に存在しているファイル名は指定できません。</param>
      <exception cref="T:System.ArgumentException">パスが無効です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="OldPath" /> ファイルが存在しません。</exception>
      <exception cref="T:System.IO.IOException">異なるデバイスには名前を変更できません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Reset">
      <summary>
        <see langword="FileOpen" /> 関数を使用して開いたすべてのディスク ファイルを閉じます。 <see langword="My" /> 機能を使用すると、<see langword="Reset" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)">
      <summary>既存のディレクトリを削除します。 <see langword="My" /> 機能を使用すると、<see langword="RmDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />」を参照してください。</summary>
      <param name="Path">必須です。 削除するディレクトリまたはフォルダーを識別する文字列式です。 <paramref name="Path" /> にはドライブを含めることができます。 ドライブを指定しない場合、<see langword="RmDir" /> は現在のドライブのディレクトリを削除します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> が指定されていません。または空です。</exception>
      <exception cref="T:System.IO.IOException">対象のディレクトリにファイルが存在しています。</exception>
      <exception cref="T:System.IO.FileNotFoundException">ディレクトリが存在していません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)">
      <summary>
        <see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。 <see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
      <returns>
        <see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" />。または、<see langword="FileOpen" /> 関数を使用して開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)">
      <summary>
        <see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。 <see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</param>
      <param name="Position">必須です。 次の読み書き操作が発生する場所を示す 1 から 2,147,483,647 の範囲の数値。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)">
      <summary>ファイルの属性情報を設定します。 <see langword="My" /> 機能を使用すると、<see langword="SetAttr" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="PathName">必須です。 ファイル名を指定する文字列式です。 <paramref name="PathName" /> にはディレクトリまたはフォルダー、およびドライブを含めることができます。</param>
      <param name="Attributes">必須です。 定数式または数式の合計がファイル属性を指定する場合の定数式または数式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Attribute" /> の型が無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)">
      <summary>
        <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</summary>
      <param name="Count">必須です。 リストの次の式を表示または出力する前に挿入する空白の数。</param>
      <returns>
        <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.TAB">
      <summary>
        <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</summary>
      <returns>
        <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)">
      <summary>
        <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</summary>
      <param name="Column">任意。 リスト内の次の式を表示または出力する前に移動する先の列番号。 省略した場合、<see langword="TAB" /> は挿入位置を次の印字領域の最初に移動します。</param>
      <returns>
        <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)">
      <summary>
        <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。 <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)">
      <summary>
        <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。 <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="Record">任意。 ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)">
      <summary>
        <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。 <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。 詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数。</param>
      <param name="FromRecord">任意。 ロックまたはアンロックされる最初のレコードまたはバイトの番号。</param>
      <param name="ToRecord">任意。 ロックまたはアンロックされる最後のレコードまたはバイトの番号。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])">
      <summary>シーケンシャル ファイルにデータを書き込みます。 <see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数を含む <see langword="Integer" /> 式。</param>
      <param name="Output">任意。 ファイルへ書き込む 1 個以上のコンマで区切られた式。</param>
      <exception cref="T:System.IO.IOException">ファイル モードが無効です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])">
      <summary>シーケンシャル ファイルにデータを書き込みます。 <see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</summary>
      <param name="FileNumber">必須です。 任意の有効なファイル数を含む <see langword="Integer" /> 式。</param>
      <param name="Output">任意。 ファイルへ書き込む 1 個以上のコンマで区切られた式。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Financial">
      <summary>
        <see langword="Financial" /> モジュールに含まれるプロシージャを使って、財務関連の操作を実行します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>倍率逓減法などの指定した方法を使用して算出された、特定の期における資産の減価償却費を示す値を返します。</summary>
      <param name="Cost">必須です。 資産を購入した時点での価格です。</param>
      <param name="Salvage">必須です。 耐用年数が終了した時点での資産の価値です。</param>
      <param name="Life">必須です。 資産の耐用年数です。</param>
      <param name="Period">必須です。 減価償却費を計算する期です。</param>
      <param name="Factor">省略可能。 減価償却率です。 省略した場合は、2 (倍率逓減法) を指定したものと見なされます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Factor" />&lt;= 0、 <paramref name="Salvage" /> &lt;0、 <paramref name="Period" /> &lt; = 0、または <paramref name="Period" /> &gt; <paramref name="Life" /> 。</exception>
      <returns>倍率逓減法などの指定した方法を使用して算出された、特定の期における資産の減価償却費です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>定期的な定額の支払いおよび一定した利率に基づいて、投資の将来価値を指定する値を返します。</summary>
      <param name="Rate">必須です。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
      <param name="NPer">必須です。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
      <param name="Pmt">必須です。 毎回の支払い額です。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
      <param name="PV">省略可能。 現在の投資額、つまり将来行われる一連の支払いを現時点で一括支払いした場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。 省略した場合は、0 と見なされます。</param>
      <param name="Due">省略可能。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 各期の期末に支払う場合は <see langword="DueDate.EndOfPeriod" /> を、各期の期首に支払う場合は <see langword="DueDate.BegOfPeriod" /> をそれぞれ引数に指定します。 省略した場合は、<see langword="DueDate.EndOfPeriod" /> と想定されます。</param>
      <returns>定期的な定額の支払いおよび一定した利率に基づいた投資の将来価値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>定期的な定額の支払いおよび一定した利率に基づいて、特定の期に支払う金利を指定する値を返します。</summary>
      <param name="Rate">必須です。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
      <param name="Per">必須です。 金利支払い額を求める期を示す、1 から <paramref name="NPer" /> の範囲です。</param>
      <param name="NPer">必須です。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
      <param name="PV">必須です。 現在の投資額、つまり将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
      <param name="FV">省略可能。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
      <param name="Due">省略可能。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Per" />&lt;= 0 または <paramref name="Per" /> &gt;<paramref name="NPer" /></exception>
      <returns>定期的な定額の支払いおよび一定した利率に基づいて、特定の期に支払う金利です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)">
      <summary>一連の定期的なキャッシュ フロー (支払いと受け取り) の内部利益率を指定する値を返します。</summary>
      <param name="ValueArray">必須です。 キャッシュ フローの値を示す <see cref="T:System.Double" /> 型の配列。 配列には、負の値 (支払い額) と正の値 (受け取り額) が少なくとも 1 つずつ含まれている必要があります。</param>
      <param name="Guess">省略可能。 <see langword="IRR" /> 関数によって返される推定値を示すオブジェクト。 省略した場合、<paramref name="Guess" /> に 0.1 (10%) を指定したものと見なされます。</param>
      <exception cref="T:System.ArgumentException">配列引数の値が無効であるか、または <paramref name="Guess" /> &lt; =-1 です。</exception>
      <returns>一連の定期的なキャッシュ フロー (支払いと受け取り) の内部利益率です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)">
      <summary>一連の定期的なキャッシュ フロー (支払いと受け取り) の修正内部利益率を指定する値を返します。</summary>
      <param name="ValueArray">必須です。 キャッシュ フローの値を示す <see cref="T:System.Double" /> 型の配列。 配列には、負の値 (支払い額) と正の値 (受け取り額) が少なくとも 1 つずつ含まれている必要があります。</param>
      <param name="FinanceRate">必須です。 支払い額に対する利率です。</param>
      <param name="ReinvestRate">必須です。 現金の再投資に対する受け取り利率です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ValueArray" /> のランクが 1 ではない、<paramref name="FinanceRate" /> = -1、または <paramref name="ReinvestRate" /> = -1。</exception>
      <exception cref="T:System.DivideByZeroException">0 による除算が行われました。</exception>
      <returns>一連の定期的なキャッシュ フロー (支払いと受け取り) の修正内部利益率です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>定期的な定額の支払いおよび一定した利率に基づいて、投資に必要な期間を指定する値を返します。</summary>
      <param name="Rate">必須です。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
      <param name="Pmt">必須です。 毎回の支払い額です。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
      <param name="PV">必須です。 現在の投資額、つまり将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
      <param name="FV">省略可能。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
      <param name="Due">省略可能。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Rate" /> = 0 かつ <paramref name="Pmt" /> = 0 です。</exception>
      <returns>定期的な定額の支払いおよび一定した利率に基づいた、投資に必要な期間です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)">
      <summary>一連の定期的なキャッシュ フロー (支払いと受け取り) および公定歩合に基づいて、出資の正味現在価値を指定する値を返します。</summary>
      <param name="Rate">必須です。 投資期間を通じて一定である公定歩合であり、小数点を使用して示されます。</param>
      <param name="ValueArray">必須です。 キャッシュ フローの値を示す <see cref="T:System.Double" /> 型の配列。 配列には、負の値 (支払い額) と正の値 (受け取り額) が少なくとも 1 つずつ含まれている必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ValueArray" />is <see langword="Nothing" /> 、rank <paramref name="ValueArray" /> &lt; &gt; 1、または <paramref name="Rate" /> =-1</exception>
      <returns>一連の定期的なキャッシュ フロー (支払いと受け取り) および公定歩合に基づいて、出資の正味現在価値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>定期的な定額の支払いおよび一定した利率に基づいて、投資に必要な定期支払い額を指定する値を返します。</summary>
      <param name="Rate">必須です。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
      <param name="NPer">必須です。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
      <param name="PV">必須です。 現在の投資額、つまり将来行われる一連の支払いを現時点で一括支払いした場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
      <param name="FV">省略可能。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
      <param name="Due">省略可能。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="NPer" /> = 0 です。</exception>
      <returns>定期的な定額の支払いおよび一定した利率に基づく、投資に必要な定期支払い額です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>定期的な定額の支払いおよび一定した利率に基づいて、指定された期間の元金の支払いを示す値を返します。</summary>
      <param name="Rate">必須です。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
      <param name="Per">必須です。 金利支払い額を求める期を示す、1 から <paramref name="NPer" /> の範囲です。</param>
      <param name="NPer">必須です。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
      <param name="PV">必須です。 将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
      <param name="FV">省略可能。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
      <param name="Due">省略可能。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Per" />&lt;= 0 または <paramref name="Per" /> &gt;<paramref name="NPer" />.</exception>
      <returns>定期的な定額の支払いおよび一定した利率に基づいた、指定された期間の元金の支払いです。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>将来の定期的な定額の支払いおよび一定した利率に基づいて、投資の現在価値を指定する値を返します。</summary>
      <param name="Rate">必須です。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
      <param name="NPer">必須です。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、4 × 12 (= 48) の返済期間があることになります。</param>
      <param name="Pmt">必須です。 毎回の支払い額です。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
      <param name="FV">省略可能。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
      <param name="Due">省略可能。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
      <returns>将来の定期的な定額の支払いおよび一定した利率に基づいた、投資の現在価値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)">
      <summary>投資期間を通じての利率を指定する値を返します。</summary>
      <param name="NPer">必須です。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
      <param name="Pmt">必須です。 毎回の支払い額です。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
      <param name="PV">必須です。 現在の投資額、つまり将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
      <param name="FV">省略可能。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
      <param name="Due">省略可能。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
      <param name="Guess">省略可能。 <see langword="Rate" /> によって返される推定値です。 省略した場合、<paramref name="Guess" /> に 0.1 (10%) を指定したものと見なされます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="NPer" />&lt;= 0。</exception>
      <returns>投資期間を通じての利率です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)">
      <summary>定額法を用いて資産の 1 期あたりの減価償却費を示す値を返します。</summary>
      <param name="Cost">必須です。 資産を購入した時点での価格です。</param>
      <param name="Salvage">必須です。 耐用年数が終了した時点での資産の価値です。</param>
      <param name="Life">必須です。 資産の耐用年数です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Life" /> = 0 です。</exception>
      <returns>定額法を用いて算出される、資産の 1 期あたりの減価償却費です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)">
      <summary>定額逓減法を使用して、指定した期の減価償却費を示す値を返します。</summary>
      <param name="Cost">必須です。 資産を購入した時点での価格です。</param>
      <param name="Salvage">必須です。 耐用年数が終了した時点での資産の価値です。</param>
      <param name="Life">必須です。 資産の耐用年数です。</param>
      <param name="Period">必須です。 減価償却費を計算する期です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Salvage" />&lt;0、 <paramref name="Period" /> &gt;<paramref name="Life" />、、または <paramref name="Period" /> &lt;=.</exception>
      <returns>定額逓減法を使用した、指定した期の減価償却費です。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstDayOfWeek">
      <summary>日付関連の関数を呼び出すときに使用する週の最初の曜日を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Friday">
      <summary>金曜日。このメンバーは、Visual Basic の定数 <see langword="vbFriday" /> と等価です。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Monday">
      <summary>月曜日。このメンバーは、Visual Basic の定数 <see langword="vbMonday" /> と等価です。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Saturday">
      <summary>土曜日。このメンバーは、Visual Basic の定数 <see langword="vbSaturday" /> と等価です。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday">
      <summary>日曜日 (既定)。このメンバーは、Visual Basic の定数 <see langword="vbSunday" /> と等価です。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.System">
      <summary>システム設定で指定された週の最初の曜日。このメンバーは、Visual Basic の定数 <see langword="vbUseSystemDayOfWeek" /> と等価です。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Thursday">
      <summary>木曜日。このメンバーは、Visual Basic の定数 <see langword="vbThursday" /> と等価です。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Tuesday">
      <summary>火曜日。このメンバーは、Visual Basic の定数 <see langword="vbTuesday" /> と等価です。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Wednesday">
      <summary>水曜日。このメンバーは、Visual Basic の定数 <see langword="vbWednesday" /> と等価です。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstWeekOfYear">
      <summary>日付関連の関数を呼び出すときに使用する年の最初の週を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFourDays">
      <summary>7 日のうち少なくとも 4 日が新年度に含まれる週。 このメンバーは、Visual Basic 定数の <see langword="vbFirstFourDays" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFullWeek">
      <summary>1 週間全体が新年度に含まれる最初の週。 このメンバーは、Visual Basic 定数の <see langword="vbFirstFullWeek" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1">
      <summary>1 月 1 日を含む週 (既定値)。 このメンバーは、Visual Basic 定数の <see langword="vbFirstJan1" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.System">
      <summary>年の最初の週としてシステムで指定された週。 このメンバーは、Visual Basic 定数の <see langword="vbUseSystem" />に相当します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.HideModuleNameAttribute">
      <summary>
        <see langword="HideModuleNameAttribute" /> 属性がモジュールに適用された場合は、モジュールに必要な修飾だけを使用してモジュール メンバーにアクセスできます。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.HideModuleNameAttribute.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.HideModuleNameAttribute" /> 属性の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Information">
      <summary>
        <see langword="Information" /> モジュールに含まれるプロシージャを使って、情報の取得、テスト、検証を行います。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.Erl">
      <summary>最後に実行されたステートメントの行番号を示す整数値を返します。 読み取り専用です。</summary>
      <returns>最後に実行されたステートメントの行番号を示す整数値を返します。 読み取り専用です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.Err">
      <summary>ランタイム エラーに関する情報を格納します。</summary>
      <returns>ランタイム エラーに関する情報を格納します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
      <summary>変数が配列を参照しているかどうかを示す <see langword="Boolean" /> 値を返します。</summary>
      <param name="VarName">必須です。 <see langword="Object" /> 変数。</param>
      <returns>変数が配列を参照しているかどうかを示す <see langword="Boolean" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
      <summary>式が有効な <see langword="Boolean" /> 値を表しているかどうかを示す <see langword="Date" /> 値を返します。</summary>
      <param name="Expression">必須です。 <see langword="Object" /> 式。</param>
      <returns>式が有効な <see langword="Boolean" /> 値を表しているかどうかを示す <see langword="Date" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
      <summary>式が <see cref="T:System.DBNull" /> クラスに評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</summary>
      <param name="Expression">必須です。 <see langword="Object" /> 式。</param>
      <returns>式が <see cref="T:System.DBNull" /> クラスに評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
      <summary>式が例外の種類かどうかを示す <see langword="Boolean" /> 値を返します。</summary>
      <param name="Expression">必須です。 <see langword="Object" /> 式。</param>
      <returns>式が例外の種類かどうかを示す <see langword="Boolean" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
      <summary>式にオブジェクトが割り当てられていないかどうかを示す <see langword="Boolean" /> 値を返します。</summary>
      <param name="Expression">必須です。 <see langword="Object" /> 式。</param>
      <returns>式にオブジェクトが割り当てられていないかどうかを示す <see langword="Boolean" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
      <summary>式が数値として評価できるかどうかを示す <see langword="Boolean" /> 値を返します。</summary>
      <param name="Expression">必須です。 <see langword="Object" /> 式。</param>
      <returns>式が数値として評価できるかどうかを示す <see langword="Boolean" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
      <summary>式が参照型に評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</summary>
      <param name="Expression">必須です。 <see langword="Object" /> 式。</param>
      <returns>式が参照型に評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
      <summary>配列内の指定された次元における最も小さいインデックスを返します。</summary>
      <param name="Array">必須です。 任意のデータ型の配列です。 ある次元で最も小さいインデックスを探す対象となる配列です。</param>
      <param name="Rank">省略可能。 <see langword="Integer" />. 最も小さいインデックスが返される次元です。 1 番目の次元の場合は 1、2 番目の次元の場合は 2 という形で指定します。 <paramref name="Rank" /> を省略した場合、1 が使用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Array" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.RankException">
        <paramref name="Rank" /> が 1 未満か、<paramref name="Rank" /> が <paramref name="Array" /> のランクを超えています。</exception>
      <returns>
        <see langword="Integer" />. 指定した次元に設定できるインデックスの最小値です。 <paramref name="Array" /> が初期化されていれば、たとえばそれが長さ 0 の文字列のときなど要素を含んでいない場合でも、<see langword="LBound" /> は常に 0 を返します。 <paramref name="Array" /> が <see langword="Nothing" /> の場合、<see langword="LBound" /> は <see cref="T:System.ArgumentNullException" /> をスローします。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
      <summary>指定したカラー番号に対応する RGB カラー コードを表す <see langword="Integer" /> 値を返します。</summary>
      <param name="Color">必須です。 0 から 15 の範囲の整数値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Color" /> が 0 ～ 15 (両端を含む) の範囲内の値ではありません。</exception>
      <returns>指定したカラー番号に対応する RGB カラー コードを表す <see langword="Integer" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
      <summary>赤、緑、青の色要素のセットを受け取り、RGB カラー値を表す <see langword="Integer" /> 値を返します。</summary>
      <param name="Red">必須です。 赤の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</param>
      <param name="Green">必須です。 緑の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</param>
      <param name="Blue">必須です。 青の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Green" />、<paramref name="Blue" /> または <paramref name="Red" /> が 0 ～ 255 (両端を含む) の範囲内の値ではありません。</exception>
      <returns>赤、緑、青の色要素のセットを受け取り、RGB カラー値を表す <see langword="Integer" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
      <summary>変数のシステム データ型名を含む <see langword="String" /> 値を返します。</summary>
      <param name="VbName">必須です。 Visual Basic の型名を含む <see langword="String" /> 変数です。</param>
      <returns>変数のシステム データ型名を含む <see langword="String" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
      <summary>変数に関するデータ型情報を含む <see langword="String" /> 値を返します。</summary>
      <param name="VarName">必須です。 <see langword="Object" /> 変数。 <see langword="Option Strict" /> が <see langword="Off" /> の場合、構造体以外の任意のデータ型の変数を渡すことができます。</param>
      <returns>変数に関するデータ型情報を含む <see langword="String" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
      <summary>配列内の指定された次元における最も大きいインデックスを返します。</summary>
      <param name="Array">必須です。 任意のデータ型の配列です。 ある次元で最も大きいインデックスを探す対象となる配列です。</param>
      <param name="Rank">省略可能。 <see langword="Integer" />. 最も大きいインデックスが返される次元です。 1 番目の次元の場合は 1、2 番目の次元の場合は 2 という形で指定します。 <paramref name="Rank" /> を省略した場合、1 が使用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Array" /> が <see langword="Nothing" />です。</exception>
      <exception cref="T:System.RankException">
        <paramref name="Rank" /> が 1 未満か、<paramref name="Rank" /> が <paramref name="Array" /> のランクを超えています。</exception>
      <returns>
        <see langword="Integer" />. 指定した次元に設定できるインデックスの最大値です。 <paramref name="Array" /> に要素が 1 つしかない場合、<see langword="UBound" /> は 0 を返します。 <paramref name="Array" /> に要素が存在しない場合 (長さ 0 の文字列の場合など)、<see langword="UBound" /> は -1 を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
      <summary>変数のデータ型の分類を含む <see langword="Integer" /> 値を返します。</summary>
      <param name="VarName">必須です。 <see langword="Object" /> 変数。 <see langword="Option Strict" /> が <see langword="Off" /> の場合、構造体以外の任意のデータ型の変数を渡すことができます。</param>
      <returns>変数のデータ型の分類を含む <see langword="Integer" /> 値を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
      <summary>変数の Visual Basic データ型名を含む <see langword="String" /> 値を返します。</summary>
      <param name="UrtName">必須です。 共通言語ランタイムにより使用される型名を含む <see langword="String" /> 変数。</param>
      <returns>変数の Visual Basic データ型名を含む <see langword="String" /> 値を返します。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Interaction">
      <summary>
        <see langword="Interaction" /> モジュールに含まれるプロシージャを使って、オブジェクト、アプリケーション、システムと対話します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)">
      <summary>既に実行中のアプリケーションをアクティブにします。</summary>
      <param name="ProcessId">このプロセスに割り当てられた Win32 プロセス ID 番号を指定する <see langword="Integer" />。 <see cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" /> によって返される ID がゼロでなければ、その ID を使用できます。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.AppActivate(System.String)">
      <summary>既に実行中のアプリケーションをアクティブにします。</summary>
      <param name="Title">アクティブにするアプリケーションのタイトル バーに表示されているタイトルを指定する <see langword="String" /> 式。 起動時にアプリケーションに割り当てられたタイトルを使用できます。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Beep">
      <summary>コンピューターのスピーカーを鳴らします。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
      <summary>オブジェクトに対してメソッドを実行するか、オブジェクトのプロパティを設定または取得します。</summary>
      <param name="ObjectRef">必須です。 <see langword="Object" />。 プロパティまたはメソッドを公開しているオブジェクトへのポインターです。</param>
      <param name="ProcName">必須です。 <see langword="String" />。 オブジェクトのプロパティまたはメソッドの名前を含む文字列式です。</param>
      <param name="UseCallType">必須です。 呼び出されるプロシージャの型を表す、<see cref="T:Microsoft.VisualBasic.CallType" /> 型の列挙体のメンバーです。 <see langword="CallType" /> の値は、<see langword="Method" />、<see langword="Get" />、<see langword="Set" /> のいずれかになります。</param>
      <param name="Args">任意。 <see langword="ParamArray" />。 呼び出されるプロパティまたはメソッドに渡される引数を格納するパラメーター配列です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="UseCallType" /> の値が無効です。<see langword="Method" />、<see langword="Get" />、または <see langword="Set" /> のいずれかを指定してください。</exception>
      <returns>オブジェクトに対してメソッドを実行するか、オブジェクトのプロパティを設定または取得します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])">
      <summary>引数のリストから値を選択し、返します。</summary>
      <param name="Index">必須です。 <see cref="T:System.Double" />。 1 から <paramref name="Choice" /> 引数で渡された要素の数までの範囲の値を返す数式です。</param>
      <param name="Choice">必須です。 <see langword="Object" /> パラメーター配列。 <see langword="Object" /> データ型、<see langword="Object" /> 変数または式のコンマ区切りの一覧、あるいは <see langword="Object" /> 要素の 1 次元配列として評価される、単一の変数または式を指定できます。</param>
      <returns>引数のリストから値を選択し、返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Command">
      <summary>Visual Basic を起動するために使用されるコマンド ライン、または Visual Basic を使って開発した実行可能プログラムの引数の部分を返します。 <see langword="My" /> 機能は、<see langword="Command" /> 関数よりも高い生産性とパフォーマンスを実現します。 詳細については、「<see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />」を参照してください。</summary>
      <returns>Visual Basic を起動するために使用されるコマンド ライン、または Visual Basic を使って開発した実行可能プログラムの引数の部分。  
  
<see langword="My" /> 機能は、<see langword="Command" /> 関数よりも高い生産性とパフォーマンスを実現します。 詳細については、「<see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />」を参照してください。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)">
      <summary>COM オブジェクトへの参照を作成して返します。 Visual Basic では、クラスが COM コンポーネントとして明示的に公開されない限り、<see langword="CreateObject" /> を使用してそのクラスのインスタンスを作成することはできません。</summary>
      <param name="ProgId">必須です。 <see langword="String" />。 作成するオブジェクトのプログラム ID。</param>
      <param name="ServerName">任意。 <see langword="String" />。 オブジェクトが作成されるネットワーク サーバーの名前。 <paramref name="ServerName" /> が空の文字列 ("") の場合、ローカル コンピューターが使用されます。</param>
      <exception cref="T:System.Exception">サーバーを利用できません。</exception>
      <exception cref="T:System.IO.FileNotFoundException">指定された型のオブジェクトが存在していません。</exception>
      <returns>COM オブジェクトへの参照を作成して返します。 Visual Basic では、クラスが COM コンポーネントとして明示的に公開されない限り、<see langword="CreateObject" /> を使用してそのクラスのインスタンスを作成することはできません。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)">
      <summary>Windows レジストリのアプリケーションのエントリから、セクションやキーの設定を削除します。 <see langword="My" /> 機能を使用すると、<see langword="DeleteSetting" /> 関数を使用した場合よりも生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
      <param name="AppName">必須です。 セクションまたはキーの設定を適用するアプリケーションまたはプロジェクトの名前が含まれている <see langword="String" /> 型の式。</param>
      <param name="Section">必須です。 キーの設定を削除するセクションの名前を含む <see langword="String" /> 型の式。 <paramref name="AppName" /> と <paramref name="Section" /> のみを指定した場合、指定したセクションとそれに関連するキー設定がすべて削除されます。</param>
      <param name="Key">任意。 削除するキー設定の名前を含む <see langword="String" /> 型の式。</param>
      <exception cref="T:System.ArgumentException">ユーザーがログインしていません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Environ(System.Int32)">
      <summary>オペレーティング システム環境変数に関連付けられた文字列を返します。</summary>
      <param name="Expression">必須です。 環境変数の名前を含む文字列、または環境文字列テーブルにおける環境文字列の番号に対応する整数値を評価する式です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> が指定されていません。</exception>
      <returns>オペレーティング システム環境変数に関連付けられた文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Environ(System.String)">
      <summary>オペレーティング システム環境変数に関連付けられた文字列を返します。</summary>
      <param name="Expression">必須です。 環境変数の名前を含む文字列、または環境文字列テーブルにおける環境文字列の番号に対応する整数値を評価する式です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> が指定されていません。</exception>
      <returns>オペレーティング システム環境変数に関連付けられた文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)">
      <summary>Windows レジストリのアプリケーションのエントリから、キー設定のリストと各キー設定の値 (以前に <see langword="SaveSetting" /> を使用して作成されたもの) を返します。 <see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
      <param name="AppName">必須です。 キー設定が必要となるアプリケーションまたはプロジェクトの名前を含む <see langword="String" /> 型の式。</param>
      <param name="Section">必須です。 キー設定が必要となるセクションの名前を含む <see langword="String" /> 型の式。 <see langword="GetAllSettings" /> は、文字列の 2 次元配列を含むオブジェクトを返します。 文字列には、指定されたセクションにあるすべてのキー設定に加え、その設定に対応する値も含まれます。</param>
      <exception cref="T:System.ArgumentException">ユーザーがログインしていません。</exception>
      <returns>Windows レジストリのアプリケーションのエントリからの、キー設定のリストと各キー設定の値 (以前に <see langword="SaveSetting" /> を使用して作成されたもの)。  
  
<see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)">
      <summary>COM コンポーネントにより得られたオブジェクトへの参照を返します。</summary>
      <param name="PathName">任意。 <see langword="String" />。 取得するオブジェクトが含まれているファイルの完全パスと名前です。 <paramref name="PathName" /> を省略した場合、<paramref name="Class" /> が必須になります。</param>
      <param name="Class">
        <paramref name="PathName" /> が指定されていない場合は必須。 <see langword="String" />。 オブジェクトのクラスを表す文字列です。 <paramref name="Class" /> 引数の構文と指定項目を次に示します。 
 <c>appname</c><c>.</c><c>objecttype</c>  
  
[1|1] パラメーター 
[1|2] 説明 
[2|1] <c>appname</c>  
  
[2|2] 必須。 <see langword="String" />。 オブジェクトを提供するアプリケーションの名前です。  
  
[3|1] <c>objecttype</c>  
  
[3|2] 必須。 <see langword="String" />。 作成するオブジェクトの型またはクラスです。</param>
      <exception cref="T:System.Exception">指定されたクラス型のオブジェクトが存在しません。</exception>
      <exception cref="T:System.IO.FileNotFoundException">指定されたパスおよびファイル名を持つオブジェクトが存在しません。</exception>
      <returns>COM コンポーネントにより得られたオブジェクトへの参照。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)">
      <summary>Windows レジストリのアプリケーションのエントリから、キーの設定値を返します。 <see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
      <param name="AppName">必須です。 キー設定が必要となるアプリケーションまたはプロジェクトの名前を含む <see langword="String" /> 型の式。</param>
      <param name="Section">必須です。 キーの設定が存在しているセクションの名前を含む <see langword="String" /> 型の式。</param>
      <param name="Key">必須です。 返されるキー設定の名前を含む <see langword="String" /> 型の式。</param>
      <param name="Default">任意。 <paramref name="Key" /> 設定に値が設定されていない場合に返される値を含む式です。 省略した場合、<paramref name="Default" /> は長さ 0 の文字列 ("") と想定されます。</param>
      <exception cref="T:System.ArgumentException">文字列型 (<see langword="String" />) の式でない引数が含まれるか、ユーザーがログインしていません。</exception>
      <returns>Windows レジストリのアプリケーションのエントリからの、キーの設定値。  
  
<see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)">
      <summary>式の評価に応じて、2 つのオブジェクトのうち 1 つを返します。</summary>
      <param name="Expression">必須です。 <see langword="Boolean" />。 評価する式。</param>
      <param name="TruePart">必須です。 <see langword="Object" />。 <paramref name="Expression" /> が <see langword="True" /> に評価された場合に返されます。</param>
      <param name="FalsePart">必須です。 <see langword="Object" />。 <paramref name="Expression" /> が <see langword="False" /> に評価された場合に返されます。</param>
      <returns>式の評価に応じて、2 つのオブジェクトのうち 1 つを返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)">
      <summary>ダイアログ ボックスにプロンプトを表示して、ユーザーがテキストを入力するか、ボタンをクリックするのを待った後、テキスト ボックスの内容を含む文字列を返します。</summary>
      <param name="Prompt">必須。ダイアログ ボックスにメッセージとして表示する <see langword="String" /> 式です。 <paramref name="Prompt" /> の最大長は、約 1024 文字です。使用される文字の幅によって変わります。 <paramref name="Prompt" /> が複数の行で構成される場合、復帰文字 (<see langword="Chr(" />13<see langword=")" />)、ライン フィード文字 (<see langword="Chr(" />10<see langword=")" />)、または復帰文字とライン フィード文字の組み合わせ (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) を各行の間で使用して、行を分割できます。</param>
      <param name="Title">任意。 ダイアログ ボックスのタイトル バーに表示される <see langword="String" /> 型の式。 <paramref name="Title" /> を省略した場合、タイトル バーにはアプリケーションの名前が表示されます。</param>
      <param name="DefaultResponse">任意。 他に入力がない場合に、テキスト ボックスに既定値として表示される <see langword="String" /> 型の式。 <paramref name="DefaultResponse" /> を省略すると、表示されるテキスト ボックスは空になります。</param>
      <param name="XPos">任意。 ダイアログ ボックスの左端から画面の左端までの距離を twip 単位で指定する数式です。 <paramref name="XPos" /> を省略すると、ダイアログ ボックスの水平位置が中央になります。</param>
      <param name="YPos">任意。 ダイアログ ボックスの上端から画面の上端までの距離を twip 単位で指定する数式です。 <paramref name="YPos" /> を省略すると、ダイアログ ボックスは垂直方向に対して画面の上端から約 1/3 の位置に配置されます。</param>
      <returns>ダイアログ ボックスにプロンプトを表示して、ユーザーがテキストを入力するか、ボタンをクリックするのを待った後、テキスト ボックスの内容を含む文字列を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)">
      <summary>ダイアログ ボックスにメッセージを表示し、ユーザーがボタンをクリックするのを待った後、ユーザーのクリックしたボタンを示す整数値を返します。</summary>
      <param name="Prompt">必須です。 ダイアログ ボックスにメッセージとして表示される <see langword="String" /> 型の式。 <paramref name="Prompt" /> の最大長は、約 1024 文字です。使用される文字の幅によって変わります。 <paramref name="Prompt" /> が複数の行で構成される場合、復帰文字 (<see langword="Chr(" />13<see langword=")" />)、ライン フィード文字 (<see langword="Chr(" />10<see langword=")" />)、または復帰文字とライン フィード文字の組み合わせ (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) を各行の間で使用して、行を分割できます。</param>
      <param name="Buttons">任意。 表示するボタンの種類と数、使用するアイコンのスタイル、既定のボタンの ID、メッセージ ボックスのモーダル性を指定する値の総計を表す数式です。 <paramref name="Buttons" /> を省略した場合、既定値は 0 になります。</param>
      <param name="Title">任意。 ダイアログ ボックスのタイトル バーに表示される <see langword="String" /> 型の式。 <paramref name="Title" /> を省略した場合、タイトル バーにはアプリケーションの名前が表示されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Prompt" /> が文字列型 (<see langword="String" />) の式でないか、<paramref name="Title" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">プロセスがユーザー対話モードで動作していません。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see langword="MsgBoxResult" /> 列挙型または <see langword="MsgBoxStyle" /> 列挙型のメンバーでないパラメーターが含まれています。</exception>
      <returns>次のいずれかの値です。 <list type="table"><listheader><term>定数</term><description>[値]</description></listheader><item><term><see langword="OK" /></term><description>1</description></item><item><term><see langword="Cancel" /></term><description>2</description></item><item><term><see langword="Abort" /></term><description>3</description></item><item><term><see langword="Retry" /></term><description>4</description></item><item><term><see langword="Ignore" /></term><description>5</description></item><item><term><see langword="Yes" /></term><description>6</description></item><item><term><see langword="No" /></term><description>7</description></item></list></returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)">
      <summary>ある数値が含まれる計算済み範囲を表す文字列を返します。</summary>
      <param name="Number">必須です。 <see langword="Long" />。 計算済み範囲のいずれかに存在する整数値です。</param>
      <param name="Start">必須です。 <see langword="Long" />。 計算済み範囲のセットの最小値を示す整数です。 <paramref name="Start" /> を 0 未満に設定することはできません。</param>
      <param name="Stop">必須です。 <see langword="Long" />。 計算済み範囲のセットの最大値を示す整数です。 <paramref name="Stop" /> には <paramref name="Start" /> 以下の値を指定できません。</param>
      <param name="Interval">必須です。 <see langword="Long" />。 <paramref name="Start" /> と <paramref name="Stop" /> の間で計算される、各範囲のサイズを示す整数値です。 <paramref name="Interval" /> を 1 未満に設定することはできません。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt; 0、<paramref name="Stop" /> &lt;= <paramref name="Start" />、または <paramref name="Interval" /> &lt; 1。</exception>
      <returns>ある数値が含まれる計算済み範囲を表す文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)">
      <summary>Windows レジストリにアプリケーションのエントリを保存または作成します。 <see langword="My" /> 機能を使用すると、<see langword="SaveSetting" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
      <param name="AppName">必須です。 設定を適用するアプリケーションまたはプロジェクトの名前が含まれている <see langword="String" /> 型の式。</param>
      <param name="Section">必須です。 キーの設定を保存するセクションの名前を含む <see langword="String" /> 型の式。</param>
      <param name="Key">必須です。 保存するキー設定の名前を含む <see langword="String" /> 型の式。</param>
      <param name="Setting">必須です。 <paramref name="Key" /> に設定する値を含む式です。</param>
      <exception cref="T:System.ArgumentException">キーのレジストリを作成できませんでした。または、ユーザーがログインしていません。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)">
      <summary>実行可能プログラムを実行します。プログラムがまだ実行中の場合には、プログラムのプロセス ID を含む整数値を返します。</summary>
      <param name="PathName">必須です。 <see langword="String" />。 実行するプログラムの名前に、必要な引数とコマンド ライン スイッチを加えたものです。 <paramref name="PathName" /> には、ドライブ名とディレクトリ パスまたはフォルダー名も指定できます。  
 プログラムのパスがわからない場合には、<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />を使用するとパスを調べることができます。 たとえば <c>My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")</c> を呼び出すと、ドライブ C:\\ 内で名前が <c>testFile.txt</c> であるすべてのファイルの完全パスが返されます。</param>
      <param name="Style">任意。 <see langword="AppWinStyle" />。 プログラムが実行されるウィンドウのスタイルを指定する、<see cref="T:Microsoft.VisualBasic.AppWinStyle" /> から選択した値です。 <paramref name="Style" /> を省略すると、<see langword="Shell" /> では <see langword="AppWinStyle.MinimizedFocus" /> が使用されます。この場合、プログラムは最小化し、フォーカスのある状態で起動します。</param>
      <param name="Wait">任意。 <see langword="Boolean" />。 <see langword="Shell" /> 関数で、プログラムが完了するまで待つかどうかを示す値です。 <paramref name="Wait" /> を省略した場合、<see langword="Shell" /> では <see langword="False" /> が使用されます。</param>
      <param name="Timeout">任意。 <see langword="Integer" />。 <paramref name="Wait" /> が <see langword="True" /> の場合に、プログラムの完了を待つ時間をミリ秒単位で指定する数値です。 <paramref name="Timeout" /> を省略すると、<see langword="Shell" /> では -1 が使用されます。この場合、タイムアウトは発生せず、<see langword="Shell" /> はプログラムが終了するまで値を返しません。 したがって、<paramref name="Timeout" /> を省略するか -1 に設定した場合、<see langword="Shell" /> からプログラムに制御が返されなくなる可能性があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Style" /> が 0 ～ 9 (両端を含む) の範囲内の値ではありません。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <see langword="Shell" /> が <paramref name="PathName" /> ファイルを見つけられません。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="PathName" /> が <see langword="Nothing" />です。</exception>
      <returns>プログラムがまだ実行中の場合には、プログラムのプロセス ID を含む整数値を返します。 プログラムが既に実行を完了している場合は 0。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])">
      <summary>式のリストを評価し、リスト内で最初に <see langword="Object" /> に評価された式に対応する <see langword="True" /> 値を返します。</summary>
      <param name="VarExpr">必須です。 <see langword="Object" /> パラメーター配列。 偶数個の要素が含まれている必要があります。 <see langword="Object" /> の変数または式をコンマで区切ったリストか、<see langword="Object" /> 要素の 1 次元配列を指定します。</param>
      <exception cref="T:System.ArgumentException">引数の数は奇数です。</exception>
      <returns>式のリストを評価し、リスト内で最初に <see langword="Object" /> に評価された式に対応する <see langword="True" /> 値を返します。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.MsgBoxResult">
      <summary>
        <see langword="MsgBox" /> 関数によって返され、メッセージ ボックスのどのボタンが押されたかを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Abort">
      <summary>**[中止]** ボタンが押されました。 このメンバーは、Visual Basic 定数の <see langword="vbAbort" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Cancel">
      <summary>**[キャンセル]** ボタンが押されました。 このメンバーは、Visual Basic 定数の <see langword="vbCancel" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Ignore">
      <summary>**[無視]** ボタンが押されました。 このメンバーは、Visual Basic 定数の <see langword="vbIgnore" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.No">
      <summary>**[いいえ]** ボタンが押されました。 このメンバーは、Visual Basic 定数の <see langword="vbNo" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Ok">
      <summary>**[OK]** ボタンが押されました。 このメンバーは、Visual Basic 定数の <see langword="vbOK" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Retry">
      <summary>**[再試行]** ボタンが押されました。 このメンバーは、Visual Basic 定数の <see langword="vbRetry" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Yes">
      <summary>**[はい]** ボタンが押されました。 このメンバーは、Visual Basic 定数の <see langword="vbYes" />に相当します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.MsgBoxStyle">
      <summary>
        <see langword="MsgBox" /> 関数を呼び出すときに表示するボタンを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.AbortRetryIgnore">
      <summary>**[中止]**、**[再試行]**、および **[無視]** ボタン。 このメンバーは、Visual Basic 定数の <see langword="vbAbortRetryIgnore" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal">
      <summary>アプリケーション モーダルのメッセージ ボックス。 このメンバーは、Visual Basic 定数の <see langword="vbApplicationModal" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Critical">
      <summary>重要メッセージ。 このメンバーは、Visual Basic 定数の <see langword="vbCritical" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton1">
      <summary>最初のボタンは既定値です。 このメンバーは、Visual Basic 定数の <see langword="vbDefaultButton1" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton2">
      <summary>2 番目のボタンは既定値です。 このメンバーは、Visual Basic 定数の <see langword="vbDefaultButton2" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton3">
      <summary>3 番目のボタンは既定値です。 このメンバーは、Visual Basic 定数の <see langword="vbDefaultButton3" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Exclamation">
      <summary>警告メッセージ。 このメンバーは、Visual Basic 定数の <see langword="vbExclamation" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Information">
      <summary>情報メッセージ。 このメンバーは、Visual Basic 定数の <see langword="vbInformation" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxHelp">
      <summary>ヘルプ テキスト。 このメンバーは、Visual Basic 定数の <see langword="vbMsgBoxHelp" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxRight">
      <summary>右端揃えのテキスト。 このメンバーは、Visual Basic 定数の <see langword="vbMsgBoxRight" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxRtlReading">
      <summary>右から左に読むテキスト (ヘブライ語やアラビア語のシステム)。 このメンバーは、Visual Basic 定数の <see langword="vbMsgBoxRtlReading" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxSetForeground">
      <summary>前景のメッセージ ボックス ウィンドウ。 このメンバーは、Visual Basic 定数の <see langword="vbMsgBoxSetForeground" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.OkCancel">
      <summary>**[OK] と [キャンセル]** ボタン。 このメンバーは、Visual Basic 定数の <see langword="vbOKCancel" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.OkOnly">
      <summary>**[OK]** ボタンのみ (既定値)。 このメンバーは、Visual Basic 定数の <see langword="vbOKOnly" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Question">
      <summary>警告クエリ。 このメンバーは、Visual Basic 定数の <see langword="vbQuestion" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.RetryCancel">
      <summary>**[再試行] と [キャンセル]** ボタン。 このメンバーは、Visual Basic 定数の <see langword="vbRetryCancel" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.SystemModal">
      <summary>システム モーダルのメッセージ ボックス。 このメンバーは、Visual Basic 定数の <see langword="vbSystemModal" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.YesNo">
      <summary>**[はい] と [いいえ]** ボタン。 このメンバーは、Visual Basic 定数の <see langword="vbYesNo" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.YesNoCancel">
      <summary>**[はい]**、**[いいえ]**、および **[キャンセル]** ボタン。 このメンバーは、Visual Basic 定数の <see langword="vbYesNoCancel" />に相当します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.MyGroupCollectionAttribute">
      <summary>この属性は、Visual Basic の <see langword="My.Forms" /> と <see langword="My.WebServices" /> をサポートします。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.MyGroupCollectionAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>この属性は、Visual Basic の <see langword="My.Forms" /> と <see langword="My.WebServices" /> をサポートします。</summary>
      <param name="typeToCollect">
        <see langword="String" />. <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName" /> プロパティを初期化します。 コンパイラは、この型から派生するクラスのアクセサー プロパティを生成します。</param>
      <param name="createInstanceMethodName">
        <see langword="String" />. <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod" /> プロパティを初期化します。 型のインスタンスを作成するクラスのメソッドを指定します。</param>
      <param name="disposeInstanceMethodName">
        <see langword="String" />. <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod" /> プロパティを初期化します。 型のインスタンスを破棄するクラスのメソッドを指定します。</param>
      <param name="defaultInstanceAlias">
        <see langword="String" />. <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias" /> プロパティを初期化します。 クラスの既定のインスタンスを返すプロパティの名前を指定します。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod">
      <summary>このプロパティは、Visual Basic の <see langword="My" /> をサポートします。</summary>
      <returns>型のインスタンスを作成するクラスのメソッドを指定します。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias">
      <summary>このプロパティは、Visual Basic の <see langword="My" /> をサポートします。</summary>
      <returns>クラスの既定のインスタンスを返すプロパティの名前を指定します。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod">
      <summary>このプロパティは、Visual Basic の <see langword="My" /> をサポートします。</summary>
      <returns>型のインスタンスを破棄するクラスのメソッドを指定します。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName">
      <summary>このプロパティは、Visual Basic の <see langword="My" /> をサポートします。</summary>
      <returns>コンパイラがアクセサー プロパティを生成する型の名前を指定します。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenAccess">
      <summary>ファイル アクセス関数を呼び出すときにファイルを開く方法を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Default">
      <summary>読み取りアクセスおよび書き込みアクセスが許可されます。 これは既定値です。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Read">
      <summary>読み取りアクセスが許可されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.ReadWrite">
      <summary>読み取りアクセスおよび書き込みアクセスが許可されます。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Write">
      <summary>書き込みアクセスが許可されます。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenMode">
      <summary>ファイル アクセス関数を呼び出すときにファイルを開く方法を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Append">
      <summary>ファイルは追加のために開かれました。 既定モード。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Binary">
      <summary>ファイルはバイナリ アクセスのために開かれました。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Input">
      <summary>ファイルは読み取りアクセスのために開かれました。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Output">
      <summary>ファイルは書き込みアクセスのために開かれました。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Random">
      <summary>ファイルはランダム アクセスのために開かれました。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenShare">
      <summary>ファイル アクセス関数を呼び出すときにファイルを開く方法を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.Default">
      <summary>
        <see langword="LockReadWrite" />。 これは既定値です。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockRead">
      <summary>他のプロセスはファイルを読み取ることはできません。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockReadWrite">
      <summary>他のプロセスはファイルの読み取りや書き込みを行うことはできません。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockWrite">
      <summary>他のプロセスはファイルに書き込むことはできません。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.Shared">
      <summary>任意のプロセスがファイルの読み取りや書き込みを行うことができます。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.SpcInfo">
      <summary>このクラスは、Visual Basic の <see langword="Print" /> 関数および <see langword="PrintLine" /> 関数をサポートします。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.SpcInfo.Count">
      <summary>このフィールドは、Visual Basic の <see langword="Print" /> 関数および <see langword="PrintLine" /> 関数をサポートします。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Strings">
      <summary>
        <see langword="Strings" /> モジュールに含まれるプロシージャを使って、文字列操作を実行します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
      <summary>文字に対応する文字コードを表す整数値を返します。</summary>
      <param name="String">必須です。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
      <returns>文字に対応する文字コードです。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
      <summary>文字に対応する文字コードを表す整数値を返します。</summary>
      <param name="String">必須です。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
      <returns>文字に対応する文字コードです。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
      <summary>文字に対応する文字コードを表す整数値を返します。</summary>
      <param name="String">必須です。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
      <returns>文字に対応する文字コードです。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
      <summary>文字に対応する文字コードを表す整数値を返します。</summary>
      <param name="String">必須です。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
      <returns>文字に対応する文字コードです。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
      <summary>指定された文字コードに対応する文字を返します。</summary>
      <param name="CharCode">必須です。 文字の <c>code point</c> (文字コード) を表す <see langword="Integer" /> 型の式。</param>
      <exception cref="T:System.ArgumentException">
        <see langword="Chr" /> の <paramref name="CharCode" /> は、&lt; 0 または &gt; 255。</exception>
      <returns>指定された文字コードに対応する文字です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
      <summary>指定された文字コードに対応する文字を返します。</summary>
      <param name="CharCode">必須です。 文字の <c>code point</c> (文字コード) を表す <see langword="Integer" /> 型の式。</param>
      <exception cref="T:System.ArgumentException">
        <see langword="ChrW" /> の <paramref name="CharCode" /> は、&lt; -32768 または &gt; 65535。</exception>
      <returns>指定された文字コードに対応する文字です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</summary>
      <param name="Source">必須です。 検索対象の文字列の 1 次元配列。</param>
      <param name="Match">必須です。 検索する文字列。</param>
      <param name="Include">任意。 戻り値の部分文字列に <paramref name="Match" /> を含むか含まないかを指定する <see langword="Boolean" /> 値。 <paramref name="Include" /> が <see langword="True" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含む配列のサブセットを返します。 <paramref name="Include" /> が <see langword="False" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含まない配列のサブセットを返します。</param>
      <param name="Compare">任意。 使用する文字列比較の種類を示す数値。 値については、「設定」を参照してください。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> が <see langword="Nothing" /> であるか、1 次元の配列ではありません。</exception>
      <returns>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</summary>
      <param name="Source">必須です。 検索対象の文字列の 1 次元配列。</param>
      <param name="Match">必須です。 検索する文字列。</param>
      <param name="Include">任意。 戻り値の部分文字列に <paramref name="Match" /> を含むか含まないかを指定する <see langword="Boolean" /> 値。 <paramref name="Include" /> が <see langword="True" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含む配列のサブセットを返します。 <paramref name="Include" /> が <see langword="False" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含まない配列のサブセットを返します。</param>
      <param name="Compare">任意。 使用する文字列比較の種類を示す数値。 値については、「設定」を参照してください。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> が <see langword="Nothing" /> であるか、1 次元の配列ではありません。</exception>
      <returns>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
      <summary>書式指定文字列 (<see langword="String" />) 式に含まれる指示に従って書式設定された文字列を返します。</summary>
      <param name="Expression">必須です。 任意の有効な式。</param>
      <param name="Style">任意。 有効な名前の付いた、またはユーザー定義による <see langword="String" /> 型の書式指定式</param>
      <returns>書式指定文字列 (<see langword="String" />) 式に含まれる指示に従って書式設定された文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>システムの [コントロール パネル] で定義されている通貨記号を使って通貨形式の文字列に書式設定して返す文字列処理関数です。</summary>
      <param name="Expression">必須です。 書式指定される式。</param>
      <param name="NumDigitsAfterDecimal">任意。 表示される小数点以下の桁数を示す数値。 既定値は -1 です。これは、コンピューターの地域設定が使用されることを示しています。</param>
      <param name="IncludeLeadingDigit">任意。 小数値の先頭の 0 を表示するかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。 値については、「解説」を参照してください。</param>
      <param name="UseParensForNegativeNumbers">任意。 負の値をかっこで囲むかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。 値については、「解説」を参照してください。</param>
      <param name="GroupDigits">任意。 コンピューターの地域設定で指定されている桁区切り記号を使用して数値を区切るかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。 値については、「解説」を参照してください。</param>
      <exception cref="T:System.ArgumentException">小数点以下の桁数が 99 を超えています。</exception>
      <exception cref="T:System.InvalidCastException">型が数字ではありません。</exception>
      <returns>システムのコントロール パネルで定義された通貨記号を使用して、通貨の値に形式が変換された式です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
      <summary>日時の値を表す文字列式を返します。</summary>
      <param name="Expression">必須です。 書式設定する <see langword="Date" /> 型の式。</param>
      <param name="NamedFormat">任意。 使用する日付/時刻形式を示す数値。 省略した場合は、<see langword="DateFormat.GeneralDate" /> が使用されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="NamedFormat" /> の設定が有効ではありません。</exception>
      <returns>日時の値を表す文字列式です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>数値形式の文字列に書式設定して返す文字列処理関数です。</summary>
      <param name="Expression">必須です。 書式指定される式。</param>
      <param name="NumDigitsAfterDecimal">任意。 表示される小数点以下の桁数を示す数値。 既定値は -1 です。これは、コンピューターの地域設定が使用されることを示しています。</param>
      <param name="IncludeLeadingDigit">任意。 小数値の先頭の 0 を表示するかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数。 値については、「設定」を参照してください。</param>
      <param name="UseParensForNegativeNumbers">任意。 負の値をかっこで囲むかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数。 値については、「設定」を参照してください。</param>
      <param name="GroupDigits">任意。 ロケール設定で指定されている桁区切り記号を使用して、数値を区切るかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
      <exception cref="T:System.InvalidCastException">型が数字ではありません。</exception>
      <returns>数値に形式が変換された式です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>パーセント記号 (%) が付加されたパーセント形式 (100 で乗算した) の文字列に書式設定して返す文字列処理関数です。</summary>
      <param name="Expression">必須です。 書式指定される式。</param>
      <param name="NumDigitsAfterDecimal">任意。 小数点以下に表示する桁数を表す数値を指定します。 既定値は -1 であり、ロケール設定が使用されることを示しています。</param>
      <param name="IncludeLeadingDigit">任意。 小数点の左側のゼロを表示するかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
      <param name="UseParensForNegativeNumbers">任意。 負の値をかっこで囲むかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
      <param name="GroupDigits">任意。 ロケール設定で指定されている桁区切り記号を使用して、数値を区切るかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
      <exception cref="T:System.InvalidCastException">型が数字ではありません。</exception>
      <returns>末尾に % 文字を付けた割合の値 (100 を乗算) に形式が変換された式です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
      <summary>指定された文字列の指定されたインデックス位置にある文字を表す <see langword="Char" /> 値を返します。</summary>
      <param name="str">必須です。 任意の有効な <see langword="String" /> 式。</param>
      <param name="Index">必須です。 <see langword="Integer" /> 式。 <paramref name="str" /> から取り出す部分の文字を指定する (1 から始まる) インデックス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> が <see langword="Nothing" />、<paramref name="Index" /> &lt; 1、または <paramref name="Index" /> が <paramref name="str" /> の最後の文字のインデックスよりも大きいです。</exception>
      <returns>指定された文字列の指定されたインデックス位置にある文字を表す <see langword="Char" /> 値。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。</summary>
      <param name="StartPos" />
      <param name="String1">必須です。 検索対象の <see langword="String" /> 型の式。</param>
      <param name="String2">必須です。 検索対象の <see langword="String" /> 型の式。</param>
      <param name="Compare">任意。 文字列比較の種類を指定します。 <paramref name="Compare" /> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt; 1.</exception>
      <returns>
        <list type="table">
          <listheader>
            <term>If</term>
            <description>InStr の戻り値</description>
          </listheader>
          <item>
            <term>
              <paramref name="String1" /> の長さが 0、または <see langword="Nothing" /></term>
            <description>0</description>
          </item>
          <item>
            <term>
              <paramref name="String2" /> の長さが 0、または <see langword="Nothing" /></term>
            <description>
              <paramref name="start" />
            </description>
          </item>
          <item>
            <term>
              <paramref name="String2" /> が見つかりません。</term>
            <description>0</description>
          </item>
          <item>
            <term>
              <paramref name="String2" /> が内部にある <paramref name="String1" /></term>
            <description> 一致する文字列の開始位置</description>
          </item>
          <item>
            <term>
              <paramref name="Start" /> &gt; <paramref name="String1" /> の長さ</term>
            <description>0</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。</summary>
      <param name="String1">必須です。 検索対象の <see langword="String" /> 型の式。</param>
      <param name="String2">必須です。 検索対象の <see langword="String" /> 型の式。</param>
      <param name="Compare">任意。 文字列比較の種類を指定します。 <paramref name="Compare" /> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</param>
      <returns>
        <list type="table">
          <listheader>
            <term>If</term>
            <description>InStr の戻り値</description>
          </listheader>
          <item>
            <term>
              <paramref name="String1" /> の長さが 0、または <see langword="Nothing" /></term>
            <description>0</description>
          </item>
          <item>
            <term>
              <paramref name="String2" /> の長さが 0、または <see langword="Nothing" /></term>
            <description>既定では最初の文字の位置となる、検索の開始位置です。</description>
          </item>
          <item>
            <term>
              <paramref name="String2" /> が見つかりません。</term>
            <description>0</description>
          </item>
          <item>
            <term>
              <paramref name="String2" /> が内部にある <paramref name="String1" /></term>
            <description>一致する文字列の開始位置。</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>ある文字列の中から指定された文字列を最後の文字位置から検索を開始し、最初に見つかった文字位置 (先頭からその位置までの文字数) を返します。</summary>
      <param name="StringCheck">必須です。 検索対象の文字列式。</param>
      <param name="StringMatch">必須です。 検索対象の文字列式。</param>
      <param name="Start">任意。 文字列の左側から開始して、各検索に対して 1 から始まる開始位置を設定する数式。 <paramref name="Start" /> を省略した場合は -1 が使用されます。この値は、検索が最後の文字位置から開始されることを示しています。 検索は右から左へと行われます。</param>
      <param name="Compare">任意。 部分文字列を評価する場合に使用する比較の種類を示す数値。 省略した場合、バイナリ比較が実行されます。 値については、「設定」を参照してください。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> = 0 または <paramref name="Start" /> &lt; -1。</exception>
      <returns>
        <list type="table">
          <listheader>
            <term>If</term>
            <description>InStrRev の戻り値</description>
          </listheader>
          <item>
            <term>
              <paramref name="StringCheck" /> が長さ 0 の文字列 ("") のとき</term>
            <description>0</description>
          </item>
          <item>
            <term>
              <paramref name="StringMatch" /> が長さ 0 の文字列 ("") のとき</term>
            <description>
              <paramref name="Start" />
            </description>
          </item>
          <item>
            <term>
              <paramref name="StringMatch" /> が見つかりません。</term>
            <description>0</description>
          </item>
          <item>
            <term>
              <paramref name="StringMatch" /> が内部にある <paramref name="StringCheck" /></term>
            <description>文字列の先頭から検索して最初に文字列が見つかった位置</description>
          </item>
          <item>
            <term>
              <paramref name="Start" /> が <paramref name="StringMatch" /> の長さよりも大きいとき</term>
            <description>0</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
      <summary>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</summary>
      <param name="SourceArray">必須です。 結合する部分文字列を含む 1 次元配列。</param>
      <param name="Delimiter">任意。 返された文字列内の部分文字列を区切るために使用される任意の文字列。 省略した場合は、空白文字 (" ") が使用されます。 <paramref name="Delimiter" /> が長さ 0 の文字列 ("") または <see langword="Nothing" /> の場合、リスト内のすべてのアイテムが区切り文字なしで連結されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="SourceArray" /> が 1 次元ではありません。</exception>
      <returns>配列に含まれる多数の部分文字列を結合して作成される文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
      <summary>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</summary>
      <param name="SourceArray">必須です。 結合する部分文字列を含む 1 次元配列。</param>
      <param name="Delimiter">任意。 返された文字列内の部分文字列を区切るために使用される任意の文字列。 省略した場合は、空白文字 (" ") が使用されます。 <paramref name="Delimiter" /> が長さ 0 の文字列 ("") または <see langword="Nothing" /> の場合、リスト内のすべてのアイテムが区切り文字なしで連結されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="SourceArray" /> が 1 次元ではありません。</exception>
      <returns>配列に含まれる多数の部分文字列を結合して作成される文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
      <summary>小文字に変換した文字列または文字を返します。</summary>
      <param name="Value">必須です。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
      <returns>小文字に変換した文字列または文字を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
      <summary>小文字に変換した文字列または文字を返します。</summary>
      <param name="Value">必須です。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
      <returns>小文字に変換した文字列または文字を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
      <summary>指定された文字数を含む文字列を返します。</summary>
      <param name="str">必須です。 左端の文字が返される <see langword="String" /> 型の式。</param>
      <param name="Length">必須です。 <see langword="Integer" /> 式。 返す文字の数を示す数式。 0 を指定すると、長さ 0 の文字列 ("") が返されます。 <paramref name="str" /> 内の文字数以上を指定すると、文字列全体が返されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Length" /> &lt; 0.</exception>
      <returns>文字列の左側から数えて、指定された文字数を含んでいる文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.String)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
      <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
      <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
      <summary>指定の文字列が含まれている文字列を左寄せで指定の長さに調整して返します。</summary>
      <param name="Source">必須です。 <see langword="String" /> 式。 変数の名前を指定します。</param>
      <param name="Length">必須です。 <see langword="Integer" /> 式。 返される文字列の長さを指定します。</param>
      <returns>指定の長さに調整された指定の文字列が含まれている左寄せの文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
      <summary>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</summary>
      <param name="str">必須です。 任意の有効な <see langword="String" /> 型の式。</param>
      <returns>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
      <summary>文字列の指定の位置から始まるすべての文字を含む文字列を返します。</summary>
      <param name="str">必須です。 文字が返される <see langword="String" /> 型の式。</param>
      <param name="Start">必須です。 <see langword="Integer" /> 式。 返す文字の開始位置。 <paramref name="Start" /> の値が <paramref name="str" /> 内の文字数よりも大きい場合、<see langword="Mid" /> 関数は長さ 0 の文字列 ("") を返します。 <paramref name="Start" /> は 1 から始まります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt;= 0 または <paramref name="Length" /> &lt; 0。</exception>
      <returns>文字列の指定の位置から始まるすべての文字を含む文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
      <summary>文字列の指定の位置から始まる指定の数の文字を含む文字列を返します。</summary>
      <param name="str">必須です。 文字が返される <see langword="String" /> 型の式。</param>
      <param name="Start">必須です。 <see langword="Integer" /> 式。 返す文字の開始位置。 <paramref name="Start" /> の値が <paramref name="str" /> 内の文字数よりも大きい場合、<see langword="Mid" /> 関数は長さ 0 の文字列 ("") を返します。 <paramref name="Start" /> は 1 から始まります。</param>
      <param name="Length">任意。 <see langword="Integer" /> 式。 返される文字数。 省略した場合、またはテキスト内の <paramref name="Length" /> の文字数 (位置 <paramref name="Start" /> の文字を含む) よりも少なかった場合は、開始位置から文字列の末尾までのすべての文字が返されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt;= 0 または <paramref name="Length" /> &lt; 0。</exception>
      <returns>文字列の指定の位置から始まる指定の数の文字を含む文字列。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>指定された文字列の一部を指定された回数分別の部分文字列で置換した文字列を返します。</summary>
      <param name="Expression">必須です。 置換する部分文字列を含む文字列式。</param>
      <param name="Find">必須です。 検索する部分文字列。</param>
      <param name="Replacement">必須です。 置換する部分文字列。</param>
      <param name="Start">任意。 置換に使用される部分文字列を開始する、<paramref name="Expression" /> 内の位置。 <see langword="Replace" /> の戻り値は、<paramref name="Start" /> で始まる、適切な置換を行った文字列です。 省略した場合、1 が使用されます。</param>
      <param name="Count">任意。 置換する部分文字列の数。 省略した場合、既定値は -1 となります。この値は、すべての候補が置換されることを示しています。</param>
      <param name="Compare">任意。 部分文字列を評価する場合に使用する比較の種類を示す数値。 値については、「設定」を参照してください。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" /> &lt; -1 または <paramref name="Start" /> &lt;= 0。</exception>
      <returns>次のいずれかの値です。
          <list type="table"><listheader><term>If</term><description>Replace の戻り値</description></listheader><item><term><paramref name="Find" /> の長さが 0、または <see langword="Nothing" /></term><description><paramref name="Expression" /> のコピー</description></item><item><term><paramref name="Replace" /> が長さ 0 の文字列 ("") のとき</term><description><paramref name="Expression" /> の出現しない <paramref name="Find" /> のコピー</description></item><item><term><paramref name="Expression" /> の長さが 0 か <see langword="Nothing" />、または <paramref name="Start" /> の値が <paramref name="Expression" /> の長さよりも大きいとき</term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> が 0 のとき</term><description><paramref name="Expression" /> のコピー</description></item></list></returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
      <summary>文字列の右端から指定された文字数分の文字列を返します。</summary>
      <param name="str">必須です。 右端の文字が返される <see langword="String" /> 型の式。</param>
      <param name="Length">必須です。 <see langword="Integer" /> 返す文字の数を示す数式。 0 を指定すると、長さ 0 の文字列 ("") が返されます。 <paramref name="str" /> 内の文字数以上を指定すると、文字列全体が返されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Length" /> &lt; 0.</exception>
      <returns>文字列の右端から指定された文字数分の文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
      <summary>文字列と長さが指定され、その長さに調整された文字列右揃えにして文字列を返します。</summary>
      <param name="Source">必須です。 <see langword="String" /> 式。 変数の名前を指定します。</param>
      <param name="Length">必須です。 <see langword="Integer" /> 式。 返される文字列の長さを指定します。</param>
      <returns>指定の長さに調整された指定の文字列が含まれている右寄せの文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
      <summary>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</summary>
      <param name="str">必須です。 任意の有効な <see langword="String" /> 型の式。</param>
      <returns>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
      <summary>指定された数のスペースから成る文字列を返します。</summary>
      <param name="Number">必須です。 <see langword="Integer" /> 式。 文字列に必要な空白の数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> &lt; 0.</exception>
      <returns>指定された数のスペースから成る文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>部分文字列ごとに区切られた文字列からゼロ ベースの 1 次元配列を作成し、返します。</summary>
      <param name="Expression">必須です。 部分文字列および区切り記号を含む <see langword="String" /> 型の式。</param>
      <param name="Delimiter">任意。 文字列の区切りを識別するために使用する任意の 1 文字。 <paramref name="Delimiter" /> が省略された場合、空白文字 (" ") が区切り記号として使用されます。</param>
      <param name="Limit">任意。 入力文字列を分割する場合の部分文字列の最大数。 既定値の -1 は、<paramref name="Delimiter" /> 文字列が出現するたびに入力文字列が分割されることを示しています。</param>
      <param name="Compare">任意。 部分文字列を評価する場合に使用する比較を示す数値。 値については、「設定」を参照してください。</param>
      <returns>
        <see langword="String" /> 配列 <paramref name="Expression" /> が長さ 0 の文字列 ("") の場合、<see langword="Split" /> は、長さ 0 の文字列を含む単一要素の配列を返します。 <paramref name="Delimiter" /> が長さ 0 の文字列である場合、または <paramref name="Expression" /> に Delimiter がない場合に、<see langword="Split" /> は <paramref name="Expression" /> 型の文字列を含む単一要素の配列を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>文字列比較の結果により、-1、0、または 1 のいずれかを返します。</summary>
      <param name="String1">必須です。 任意の有効な <see langword="String" /> 式。</param>
      <param name="String2">必須です。 任意の有効な <see langword="String" /> 式。</param>
      <param name="Compare">任意。 文字列比較の種類を指定します。 <paramref name="Compare" /> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Compare" /> の値が無効です。</exception>
      <returns>次のいずれかの値です。 <list type="table"><listheader><term>If</term><description>StrComp の戻り値</description></listheader><item><term><paramref name="String1" /> が <paramref name="String2" /> よりも先に来る</term><description>-1</description></item><item><term><paramref name="String1" /> と <paramref name="String2" /> は等価です。</term><description>0</description></item><item><term><paramref name="String1" /> が <paramref name="String2" /> の後に来る</term><description>1</description></item></list></returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
      <summary>指定に従って変換された文字列型の値を返します。</summary>
      <param name="str">必須です。 変換する <see langword="String" /> 型の式。</param>
      <param name="Conversion">必須です。 <see cref="T:Microsoft.VisualBasic.VbStrConv" /> のメンバー。 実行する比較の種類を指定する列挙値。</param>
      <param name="LocaleID">任意。 システム <see langword="LocaleID" /> 値と異なる場合の <see langword="LocaleID" /> 値。 既定値は、システムの <see langword="LocaleID" /> です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="LocaleID" /> の値がサポートされていない、<paramref name="Conversion" /> が &lt; 0 または &gt; 2048、あるいは変換の方法が指定されたロケールでサポートされていない。</exception>
      <returns>指定どおりに変換された文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
      <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
      <param name="Number">必須です。 <see langword="Integer" /> 式。 取得する文字列の長さ。</param>
      <param name="Character">必須です。 有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。 式の最初の文字だけが使用されます。 文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> が <see langword="Nothing" />です。</exception>
      <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
      <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
      <param name="Number">必須です。 <see langword="Integer" /> 式。 取得する文字列の長さ。</param>
      <param name="Character">必須です。 有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。 式の最初の文字だけが使用されます。 文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> が <see langword="Nothing" />です。</exception>
      <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
      <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
      <param name="Number">必須です。 <see langword="Integer" /> 式。 取得する文字列の長さ。</param>
      <param name="Character">必須です。 有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。 式の最初の文字だけが使用されます。 文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> が <see langword="Nothing" />です。</exception>
      <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
      <summary>指定された文字列の文字の並び順を逆にした文字列を返します。</summary>
      <param name="Expression">必須です。 文字の順序を逆にする文字列式。 <paramref name="Expression" /> が長さ 0 の文字列 ("") である場合、長さ 0 の文字列が返されます。</param>
      <returns>指定された文字列の文字の並び順を逆にした文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
      <summary>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</summary>
      <param name="str">必須です。 任意の有効な <see langword="String" /> 型の式。</param>
      <returns>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
      <summary>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</summary>
      <param name="Value">必須です。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
      <returns>指定された文字列が大文字に変換されている文字列型または char 型の値です。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
      <summary>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</summary>
      <param name="Value">必須です。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
      <returns>指定された文字列が大文字に変換されている文字列型または char 型の値です。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.TabInfo">
      <summary>このクラスは、Visual Basic の <see langword="Print" /> 関数および <see langword="PrintLine" /> 関数をサポートします。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TabInfo.Column">
      <summary>このフィールドは、Visual Basic の <see langword="Print" /> 関数および <see langword="PrintLine" /> 関数をサポートします。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.TriState">
      <summary>数値書式指定関数を呼び出すときに、ブール値を示すか、または既定の値を使用する必要があるかどうかを示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.False">
      <summary>False。 このメンバーの数値は 0 です。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.True">
      <summary>True。 このメンバーの数値は -1 です。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.UseDefault">
      <summary>既定の設定。 このメンバーの数値は -2 です。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VariantType">
      <summary>
        <see langword="VarType" /> 関数によって返されるバリアント オブジェクトの型を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Array">
      <summary>Array 型。 このメンバーは、Visual Basic 定数の <see langword="vbArray" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Boolean">
      <summary>
        <see langword="Boolean" />。 (<see langword="True" /> または <see langword="False" />。) このメンバーは、Visual Basic 定数の <see langword="vbBoolean" /> に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Byte">
      <summary>
        <see langword="Byte" />。 (0 から 255。) このメンバーは、Visual Basic 定数の <see langword="vbByte" /> に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Char">
      <summary>
        <see langword="Char" />。 (0 から 65535。) このメンバーは Visual Basic 定数の <see langword="vbChar" /> に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Currency">
      <summary>Currency 型。 このメンバーは、Visual Basic 定数の <see langword="vbCurrency" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.DataObject">
      <summary>DataObject 型。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Date">
      <summary>
        <see langword="Date" />。 (0001 年 1 月 1 日の 0:00:00 から 9999 年 12 月 31 日の 23:59:59。) このメンバーは、Visual Basic 定数の <see langword="vbDate" /> に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Decimal">
      <summary>
        <see langword="Decimal" />。 (小数部分を持たない数値の場合は 0 から +/-79,228,162,514,264,337,593,543,950,335、小数点以下 28 桁の数値の場合は 0 から +/-7.9228162514264337593543950335。絶対値の最小値は、0 を除いた場合、+/-0.0000000000000000000000000001。) このメンバーは、Visual Basic 定数の <see langword="vbDecimal" /> に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Double">
      <summary>
        <see langword="Double" />。 (負の値の場合は -1.79769313486231E+308 から -4.94065645841247E-324。正の値の場合は 4.94065645841247E-324 から 1.79769313486231E+308。) このメンバーは、Visual Basic 定数の <see langword="vbDouble" /> に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Empty">
      <summary>NULL 参照。 このメンバーは、Visual Basic 定数の <see langword="vbEmpty" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Error">
      <summary>
        <see cref="T:System.Exception" />
      </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Integer">
      <summary>
        <see langword="Integer" />。 (-2,147,483,648 から 2,147,483,647。) このメンバーは、Visual Basic 定数の <see langword="vbInteger" /> に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Long">
      <summary>
        <see langword="Long" />。 (-9,223,372,036,854,775,808 から 9,223,372,036,854,775,807。) このメンバーは、Visual Basic 定数の <see langword="vbLong" /> に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Null">
      <summary>NULL オブジェクト。 このメンバーは、Visual Basic 定数の <see langword="vbNull" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Object">
      <summary>
        <see langword="Object" /> 型の変数には任意の値を格納できます。 このメンバーは、Visual Basic 定数の <see langword="vbObject" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Short">
      <summary>
        <see langword="Short" />。 (–32,768 ～ 32,767)。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Single">
      <summary>
        <see langword="Single" />。 (負の値の場合は、-3.402823E+38 から -1.401298E-45。正の値の場合は、1.401298E-45 から 3.402823E+38。) このメンバーは、Visual Basic 定数の <see langword="vbSingle" /> に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.String">
      <summary>
        <see langword="String" />。 (0 から約 20 億の Unicode 文字。) このメンバーは、Visual Basic 定数の <see langword="vbString" /> に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.UserDefinedType">
      <summary>ユーザー定義型。 構造体の各メンバーの範囲はデータ型によって決まり、他のメンバーの範囲とは関係しません。 このメンバーは、Visual Basic 定数の <see langword="vbUserDefinedType" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Variant">
      <summary>
        <see langword="Variant" />。 このメンバーは、Visual Basic 定数の <see langword="vbVariant" />に相当します。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VBFixedArrayAttribute">
      <summary>構造体または非ローカル変数の配列を固定長配列として扱うことを示します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedArrayAttribute.#ctor(System.Int32)">
      <summary>
        <see langword="Bounds" /> プロパティの値を初期化します。</summary>
      <param name="UpperBound1">配列の最初の次元のサイズを表す上限フィールドの値を初期化します。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedArrayAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
        <see langword="Bounds" /> プロパティの値を初期化します。</summary>
      <param name="UpperBound1">配列の最初の次元のサイズを表す上限フィールドの値を初期化します。</param>
      <param name="UpperBound2">配列の 2 番目の次元のサイズを表す上限フィールドの値を初期化します。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedArrayAttribute.Bounds">
      <summary>配列の範囲を返します。</summary>
      <returns>配列の範囲を表す整数配列を含みます。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedArrayAttribute.Length">
      <summary>配列のサイズを返します。</summary>
      <returns>配列内の要素の数を表す整数を含みます。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBFixedStringAttribute">
      <summary>文字列を固定長であるかのように処理することを示します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedStringAttribute.#ctor(System.Int32)">
      <summary>
        <see langword="SizeConst" /> フィールドの値を初期化します。</summary>
      <param name="Length">固定長文字列の長さ。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedStringAttribute.Length">
      <summary>文字列の長さを取得します。</summary>
      <returns>文字列の長さ。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBMath">
      <summary>
        <see langword="VbMath" /> モジュールに含まれるプロシージャを使って、数値演算を実行します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize">
      <summary>乱数ジェネレーターを初期化します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)">
      <summary>乱数ジェネレーターを初期化します。</summary>
      <param name="Number">省略可能。 <see langword="Object" /> または任意の有効な数式。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd">
      <summary>型 <see cref="T:System.Single" /> の乱数を返します。</summary>
      <returns>乱数系列の次の乱数を返します。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)">
      <summary>型 <see cref="T:System.Single" /> の乱数を返します。</summary>
      <param name="Number">省略可能。 <see cref="T:System.Single" /> 値または任意の有効な <see cref="T:System.Single" /> 型の式。</param>
      <returns>数値が 0 未満の場合、Rnd は <paramref name="Number" /> をシードとして使用して、毎回同じ数値を生成します。 数値が 0 よりも大きい場合、Rnd はシーケンスの次の乱数を生成します。 数値が 0 の場合、Rnd は最後に生成された数値を生成します。 数値が指定されていない場合、Rnd はシーケンスの次の乱数を生成します。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VbStrConv">
      <summary>
        <see langword="StrConv" /> 関数の呼び出しで実行する変換の種類を示します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Hiragana">
      <summary>文字列内のカタカナ文字をひらがな文字に変換します。 日本語ロケールのみに適用されます。 このメンバーは、Visual Basic 定数の <see langword="vbHiragana" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Katakana">
      <summary>文字列内のひらがな文字をカタカナ文字に変換します。 日本語ロケールのみに適用されます。 このメンバーは、Visual Basic 定数の <see langword="vbKatakana" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.LinguisticCasing">
      <summary>大文字/小文字についてファイル システム規則に従った文字列を、言語規則に従った文字列に変換します。 このメンバーは、Visual Basic 定数の <see langword="vbLinguisticCasing" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Lowercase">
      <summary>文字列を小文字に変換します。 このメンバーは、Visual Basic 定数の <see langword="vbLowerCase" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Narrow">
      <summary>文字列内の横幅の広い (全角) 文字を、横幅の狭い (半角) 文字に変換します。 アジアのロケールに適用されます。 このメンバーは、Visual Basic 定数の <see langword="vbNarrow" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.None">
      <summary>変換は行われません。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.ProperCase">
      <summary>文字列内の各単語の最初の文字を大文字に変換します。 このメンバーは、Visual Basic 定数の <see langword="vbProperCase" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.SimplifiedChinese">
      <summary>文字列を簡体中国語に変換します。 このメンバーは、Visual Basic 定数の <see langword="vbSimplifiedChinese" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.TraditionalChinese">
      <summary>文字列を繁体字中国語に変換します。 このメンバーは、Visual Basic 定数の <see langword="vbTraditionalChinese" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Uppercase">
      <summary>文字列を大文字に変換します。 このメンバーは、Visual Basic 定数の <see langword="vbUpperCase" />に相当します。</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Wide">
      <summary>文字列内の横幅の狭い (半角) 文字を、横幅の広い (全角) 文字に変換します。 アジアのロケールに適用されます。 このメンバーは、Visual Basic 定数の <see langword="vbWide" />に相当します。 変換では、入力文字が既に全角であっても、正規形 C が使われる場合があります。 たとえば、文字列 "は゛" (既に全角です) は "ば" に正規化されます。 Unicode の正規形をご覧ください。</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks.Dataflow</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
      <summary>Stellt einen Datenflussblock bereit, der einen bereitgestellten <see cref="T:System.Action`1" />-Delegaten für jede empfangene Datenelement aufruft.</summary>
      <typeparam name="TInput">Der Datentyp, auf dem dieser <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> betrieben wird.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />-Klasse mit der angegebenen Aktion.</summary>
      <param name="action">Die Aktion, die für jedes empfangene Datenelement aufzurufen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />-Klasse mit der angegebenen Aktion und den Konfigurationsoptionen.</summary>
      <param name="action">Die Aktion, die für jedes empfangene Datenelement aufzurufen.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieser <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />-Klasse mit der angegebenen Aktion.</summary>
      <param name="action">Die Aktion, die für jedes empfangene Datenelement aufzurufen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />-Klasse mit der angegebenen Aktion und den Konfigurationsoptionen.</summary>
      <param name="action">Die Aktion, die für jedes empfangene Datenelement aufzurufen.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieser <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete">
      <summary>Signalisiert dem Datenflussblock, dass er keine weiteren Nachrichten mehr akzeptieren oder erstellen und keine weiteren hinausgeschobenen Nachrichten mehr verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
      <summary>Stellt ein Element in den Zieldatenflussblock.</summary>
      <param name="item">Das Element, das dem Ziel bereitgestellt wird.</param>
      <returns>
        <see langword="true" />, wenn das Element dem Datenflussblock bereitgestellt wird; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Veranlasst den Datenflussblock, in einem fehlgeschlagenen Zustand abzuschließen.</summary>
      <param name="exception">Die Ausnahme, die den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Gibt dem Datenflussblock eine Meldung und gibt ihm die Möglichkeit, die Meldung zu verarbeiten oder hinauszuschieben.</summary>
      <param name="messageHeader">Der Header der Nachricht, die bereitgestellt wird.</param>
      <param name="messageValue">Der Wert der Nachricht, die bereitgestellt wird.</param>
      <param name="source">Der Datenflussblock, der die Meldung angezeigt. Dieser Wert kann <see langword="null" /> sein.</param>
      <param name="consumeToAccept">
        <see langword="true" />, um das Ziel anzuweisen, <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> während des Aufrufs von <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> vor der Rückgabe von <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> zur Verarbeitung der Meldung synchron aufzurufen; andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> ist nicht gültig.  
  
oder <paramref name="consumeToAccept" /> kann nur <see langword="true" /> sein, wenn eine <paramref name="source" /> bereitgestellt wird, die nicht NULL ist.</exception>
      <returns>Der Status der angebotenen Meldung.  Wenn die Meldung vom Ziel akzeptiert wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> zurückgegeben, und die Quelle sollte die angebotene Meldung nicht mehr verwenden, da sie jetzt dem Ziel gehört. Wenn die Nachricht vom Ziel zurückgestellt wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> als Benachrichtigung zurückgegeben, dass das Ziel später möglicherweise versucht, die Nachricht zu verarbeiten oder zu reservieren. Zwischenzeitlich besitzt die Quelle die Nachricht weiterhin und bietet sie möglicherweise anderen Blöcke an.  
  
Wenn das Ziel andernfalls die Meldung zurückgestellt hätte, aber die Quelle <see langword="null" /> war, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben.  
  
Wenn das Ziel versucht hat, die Nachricht zu akzeptieren, diese aber verpasst hat, weil die Quelle die die Meldung an ein anderes Ziel übermittelt oder einfach verworfen hat, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> zurückgegeben.  
  
Wenn das Ziel beschlossen hat, die Nachricht nicht zu akzeptieren, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben. Wenn das Ziel beschlossen hat, die Meldung nicht zu akzeptieren und niemals eine weitere Meldung von dieser Quelle akzeptieren wird, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> zurückgegeben.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</summary>
      <returns>Eine Zeichenfolge, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" />-Objekt ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die abgeschlossene Aufgabe.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
      <summary>Ruft die Anzahl der Eingabeelemente ab, die darauf warten, von diesem Block verarbeitet zu werden.</summary>
      <returns>Die Anzahl der Eingabeelemente, die darauf warten, von diesem Block verarbeitet zu werden.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
      <summary>Stellt einen Datenflussblock bereit, der Eingaben in Arrays stapelt.</summary>
      <typeparam name="T">Gibt den Typ der Daten an, die in Batches abgelegt werden.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> mit der angegebenen Batchgröße.</summary>
      <param name="batchSize">Die Anzahl der in einen Batch zu gruppierenden Elemente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="batchSize" /> muss positiv sein.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initialisiert einen neuen <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> mit der angegebenen Batchgröße, der degressiven Option und den Blockoptionen.</summary>
      <param name="batchSize">Die Anzahl der in einen Batch zu gruppierenden Elemente.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieser <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="batchSize" /> muss positiv sein.  
  
- oder - 
Der Wert <paramref name="batchSize" /> muss kleiner sein als der Wert der <see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity" />-Option, wenn kein Standardwert festgelegt wurde.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete">
      <summary>Signalisiert <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />, dass es keine Nachrichten mehr akzeptieren und keine produzieren und keine weiteren zurückgestellten Nachrichten verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Verbindet <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</summary>
      <param name="target">Das <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt, das mit dieser Quelle verbunden werden soll.</param>
      <param name="linkOptions">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />-Instanz, die den Link konfiguriert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist NULL (Nothing in Visual Basic), oder <paramref name="linkOptions" /> ist NULL (Nothing in Visual Basic).</exception>
      <returns>Ein IDisposable, der nach dem Aufrufen von Dispose, die Quelle vom Ziel trennt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Hat zur Folge, dass <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> im Status <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> abgeschlossen wird.</summary>
      <param name="exception">Die <see cref="T:System.Exception" />, die den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Boolean@)">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt aufgerufen, um ein <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Objekt zu akzeptieren und zu verarbeiten, das zuvor durch dieses <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> angeboten wurde.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die verarbeitet wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die die Nachricht verwendet.</param>
      <param name="messageConsumed">
        <see langword="true" />, wenn die Nachricht erfolgreich verarbeitet wurde, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>Der Wert der verarbeiteten Meldung. Dies entspricht möglicherweise einer anderen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz als die zuvor reservierte und die als <paramref name="messageHeader" /> an <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> übergebene. Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> muss den zurückgegebenen Wert benutzen und nicht den Wert, der als messageValue von <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> übergeben wird.  
  
Wenn die Meldung, die angefordert wird, nicht verfügbar ist, ist der Rückgabewert <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />, der von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zuvor reserviert wurde, freizugeben.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der reservierten Meldung, die freigegeben wird.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, der die Nachricht freigibt, die er vorher reserviert hat.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Das <paramref name="target" /> hatte die Meldung nicht reserviert.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />, der von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zuvor angeboten wurde, zu reservieren.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die reserviert wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> der Meldung empfängt.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>
        <see langword="true" />, wenn die Nachricht erfolgreich reserviert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Bietet eine Meldung für <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> an und gibt dem Ziel die Möglichkeit, die Nachricht zu verarbeiten oder zurückzustellen.</summary>
      <param name="messageHeader">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz, die die Header der Nachricht darstellt, die bereitgestellt wird.</param>
      <param name="messageValue">Der Wert der Nachricht, die bereitgestellt wird.</param>
      <param name="source">Die <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, die die Nachricht anbietet. Dies kann NULL sein.</param>
      <param name="consumeToAccept">Auf <see langword="true" /> festlegen, um das Ziel anzuweisen, <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> während des Aufrufs von <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /><see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> synchron aufzurufen, um die Meldung zu verarbeiten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> ist ungültig.  
  
oder <paramref name="consumeToAccept" /> kann nur TRUE sein, wenn eine <paramref name="source" /> bereitgestellt wird, die nicht NULL ist.</exception>
      <returns>Der Status der angebotenen Meldung. Wenn die Meldung vom Ziel akzeptiert wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> zurückgegeben, und die Quelle sollte die angebotene Meldung nicht mehr verwenden, da sie jetzt dem Ziel gehört. Wenn die Nachricht vom Ziel zurückgestellt wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> als Benachrichtigung zurückgegeben, dass das Ziel später möglicherweise versucht, die Nachricht zu verarbeiten oder zu reservieren. Zwischenzeitlich besitzt die Quelle die Nachricht weiterhin und bietet sie möglicherweise anderen Blöcke an.  
  
Wenn das Ziel andernfalls die Meldung zurückgestellt hätte, aber <paramref name="source" /> gleich <see langword="null" /> war, wird stattdessen <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben.  
  
Wenn das Ziel versucht hat, die Nachricht zu akzeptieren, diese aber verpasst hat, weil die Quelle die die Meldung an ein anderes Ziel übermittelt oder einfach verworfen hat, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> zurückgegeben.  
  
Wenn das Ziel beschlossen hat, die Nachricht nicht zu akzeptieren, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben. Wenn das Ziel beschlossen hat, die Meldung nicht zu akzeptieren und niemals eine weitere Meldung von dieser Quelle akzeptieren wird, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> zurückgegeben.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</summary>
      <returns>Eine Zeichenfolge, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch">
      <summary>Startet <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />, um einen Batchvorgang zu initiieren, auch wenn die Anzahl der Elemente, die sich momentan in der Warteschlange befinden oder zurückgestellt wurden, kleiner ist als <see cref="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
      <summary>Versucht, ein verfügbares Output-Element von<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="filter">Das Prädikat, das ein Wert erfolgreich übergeben muss, damit es empfangen wird.  <paramref name="filter" /> ist möglicherweise <see langword="null" />, in diesem Fall werden alle Elemente übergeben.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
      <summary>Versucht, alle verfügbaren Elemente aus <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="items">Die von der Quelle empfangenen Elemente.</param>
      <returns>
        <see langword="true" />, wenn ein oder mehrere Elemente empfangen werden konnten; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
      <summary>Ruft die Größe der Batches ab, die von diesem <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> generiert werden.</summary>
      <returns>Die Batchgröße</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" /> ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die Aufgabe.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
      <summary>Ruft die Anzahl der Ausgabe-Elementen ab, die von diesem Block empfangen werden können.</summary>
      <returns>Die Anzahl von Ausgabe-Elementen in.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
      <summary>Stellt einen Datenflussblock bereit, der stapelweise eine festgelegte Anzahl von Eingaben aus möglicherweise anderen Typen verarbeitet, die einem oder mehreren seiner Ziele bereitgestellt werden.</summary>
      <typeparam name="T1">Gibt den Typ der Daten an, die vom ersten Ziel des Blocks akzeptiert werden.</typeparam>
      <typeparam name="T2">Gibt den Typ der Daten an, die vom zweiten Ziel des Blocks akzeptiert werden.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> mit der angegebenen Konfiguration.</summary>
      <param name="batchSize">Die Anzahl der in einen Batch zu gruppierenden Elemente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="batchSize" /> muss positiv sein.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> mit der angegebenen Konfiguration.</summary>
      <param name="batchSize">Die Anzahl der in einen Batch zu gruppierenden Elemente.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieser <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> ist kleiner als 1.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete">
      <summary>Signalisiert <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />, dass es keine Nachrichten mehr akzeptieren und keine produzieren und keine weiteren zurückgestellten Nachrichten verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Verbindet <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</summary>
      <param name="target">Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, der mit dieser Quelle verbunden werden soll.</param>
      <param name="linkOptions">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />-Instanz, die den Link konfiguriert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" /> (Nichts in Visual Basic); oder <paramref name="linkOptions" /> ist <see langword="null" /> (Nichts in Visual Basic)</exception>
      <returns>Ein IDisposable, der nach dem Aufrufen von Dispose, die Quelle vom Ziel trennt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Hat zur Folge, dass <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> im Status <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> abgeschlossen wird.</summary>
      <param name="exception">Die <see cref="T:System.Exception" />, die den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Boolean@)">
      <summary>Übergibt den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />-Instanz an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle</summary>
      <param name="messageHeader">Die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur der Nachricht, die verarbeitet werden soll</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Struktur, für die die Nachricht verarbeitet werden soll</param>
      <param name="messageConsumed">
        <see langword="true" />, wenn die Nachricht erfolgreich verarbeitet wurde. Andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="target" />-Parameter ist <see langword="null" /> (Nichts in Visual Basic).</exception>
      <returns>Der Wert der verarbeiteten Meldung. Dies kann einer anderen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz entsprechen, als zuvor reserviert und als <paramref name="messageHeader" /> an diese Methode übergeben wurde. Der nutzende <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> muss den zurückgegebenen Wert anstelle des als <paramref name="messageValue" /> an <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> übergebenen Werts verwenden. Wenn die angeforderte Meldung nicht verfügbar ist, ist der Rückgabewert <see langword="null" /> (in Visual Basic <see langword="Nothing" />).</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <summary>Übergibt das Recht, den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle zu übergeben</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der reservierten Meldung</param>
      <param name="target">Die Schnittstelle <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die aktuell die Reservierung enthält</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="target" />-Parameter ist <see langword="null" /> (Nichts in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Das <paramref name="target" /> hatte die Meldung nicht reserviert.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <summary>Behält sich das Recht vor, den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle zu übergeben</summary>
      <param name="messageHeader">Die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur der Nachricht, die reserviert werden soll</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Struktur, für die die Nachricht reserviert werden soll</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</exception>
      <returns>
        <see langword="true" />, wenn die Nachricht erfolgreich reserviert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</summary>
      <returns>Eine Zeichenfolge, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
      <summary>Versucht, ein verfügbares Output-Element von<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="filter">Das Prädikat, das ein Wert erfolgreich übergeben muss, damit es empfangen wird.  <paramref name="filter" /> ist möglicherweise <see langword="null" />, in diesem Fall werden alle Elemente übergeben.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
      <summary>Versucht, alle verfügbaren Elemente aus <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="items">Die von der Quelle empfangenen Elemente.</param>
      <returns>
        <see langword="true" />, wenn ein oder mehrere Elemente empfangen werden konnten; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
      <summary>Ruft die Größe der Batches ab, die von diesem <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> generiert werden.</summary>
      <returns>Die Batchgröße</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" /> ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die Aufgabe.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
      <summary>Ruft die Anzahl der Ausgabe-Elementen ab, die von diesem Block empfangen werden können.</summary>
      <returns>Die Anzahl von Ausgabe-Elementen in.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
      <summary>Ruft ein Ziel ab, das verwendet werden kann, um Meldungen des ersten Typs anzubieten.</summary>
      <returns>Das Ziel.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
      <summary>Ruft ein Ziel ab, das verwendet werden kann, um Meldungen des zweiten Typs anzubieten.</summary>
      <returns>Das Ziel.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
      <summary>Stellt einen Datenflussblock bereit, der stapelweise eine festgelegte Anzahl von Eingaben aus möglicherweise anderen Typen verarbeitet, die einem oder mehreren seiner Ziele bereitgestellt werden.</summary>
      <typeparam name="T1">Gibt den Typ der Daten an, die vom ersten Ziel des Blocks akzeptiert werden.</typeparam>
      <typeparam name="T2">Gibt den Typ der Daten an, die vom zweiten Ziel des Blocks akzeptiert werden.</typeparam>
      <typeparam name="T3">Gibt den Typ der Daten an, die vom dritten Ziel des Blocks akzeptiert werden.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> mit der angegebenen Konfiguration.</summary>
      <param name="batchSize">Die Anzahl der in einen Batch zu gruppierenden Elemente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="batchSize" /> muss positiv sein.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> mit der angegebenen Konfiguration.</summary>
      <param name="batchSize">Die Anzahl der in einen Batch zu gruppierenden Elemente.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieses <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />-Objekt zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="batchSize" /> muss positiv sein.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete">
      <summary>Signalisiert <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />, dass es keine Nachrichten mehr akzeptieren und keine produzieren und keine weiteren zurückgestellten Nachrichten verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Verbindet <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</summary>
      <param name="target">Das <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt, das mit dieser Quelle verbunden werden soll.</param>
      <param name="linkOptions">
        <see langword="true" />, wenn die Verknüpfung der Quelle mit dem Ziel aufgehoben werden soll, nachdem erfolgreich eine einzelne Nachricht weitergegeben wurde. <see langword="false" />, wenn sie verbunden bleiben sollen, auch nachdem eine einzelne Nachricht weitergegeben wurde.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" /> (Nichts in Visual Basic); oder <paramref name="linkOptions" /> ist <see langword="null" /> (Nichts in Visual Basic)</exception>
      <returns>Ein IDisposable, der nach dem Aufrufen von Dispose, die Quelle vom Ziel trennt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Hat zur Folge, dass <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> im Status <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> abgeschlossen wird.</summary>
      <param name="exception">Die <see cref="T:System.Exception" />, die den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Boolean@)">
      <summary>Übergibt den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />-Instanz an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle</summary>
      <param name="messageHeader">Die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur der Nachricht, die verarbeitet werden soll</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Struktur, für die die Nachricht verarbeitet werden soll</param>
      <param name="messageConsumed">
        <see langword="true" />, wenn die Nachricht erfolgreich verarbeitet wurde. Andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="target" />-Parameter ist <see langword="null" /> (Nichts in Visual Basic).</exception>
      <returns>Der Wert der verarbeiteten Meldung. Dies kann einer anderen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz entsprechen, die zuvor reserviert war und als <paramref name="messageHeader" /> an diese Methode übergeben wurde. Der nutzende <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> muss den zurückgegebenen Wert anstelle des als <paramref name="messageValue" /> an <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> übergebenen Werts verwenden. Wenn die angeforderte Nachricht nicht verfügbar ist, ist der Rückgabewert <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <summary>Übergibt das Recht, den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle zu übergeben</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der reservierten Meldung</param>
      <param name="target">Die Schnittstelle <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die aktuell die Reservierung enthält</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="target" />-Parameter ist <see langword="null" /> (Nichts in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Das <paramref name="target" /> hatte die Meldung nicht reserviert.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <summary>Behält sich das Recht vor, den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle zu übergeben</summary>
      <param name="messageHeader">Die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur der Nachricht, die reserviert werden soll</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Struktur, für die die Nachricht reserviert werden soll</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</exception>
      <returns>
        <see langword="true" />, wenn die Nachricht erfolgreich reserviert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</summary>
      <returns>Eine Zeichenfolge, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
      <summary>Versucht, ein verfügbares Output-Element von<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="filter">Das Prädikat, das ein Wert erfolgreich übergeben muss, damit es empfangen wird.  <paramref name="filter" /> ist möglicherweise <see langword="null" />, in diesem Fall werden alle Elemente übergeben.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
      <summary>Versucht, alle verfügbaren Elemente aus <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="items">Die von der Quelle empfangenen Elemente.</param>
      <returns>
        <see langword="true" />, wenn ein oder mehrere Elemente empfangen werden konnten; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
      <summary>Ruft die Größe der Batches ab, die von diesem <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> generiert werden.</summary>
      <returns>Die Batchgröße</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" /> ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die Aufgabe.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
      <summary>Ruft die Anzahl der Ausgabe-Elementen ab, die von diesem Block empfangen werden können.</summary>
      <returns>Die Anzahl von Ausgabe-Elementen in.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
      <summary>Ruft ein Ziel ab, das verwendet werden kann, um Meldungen des ersten Typs anzubieten.</summary>
      <returns>Das Ziel.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
      <summary>Ruft ein Ziel ab, das verwendet werden kann, um Meldungen des zweiten Typs anzubieten.</summary>
      <returns>Das Ziel.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
      <summary>Ruft ein Ziel ab, das verwendet werden kann, um Meldungen des dritten Typs anzubieten.</summary>
      <returns>Das Ziel.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
      <summary>Stellt einen Puffer für das Speichern von höchstens einem Element gleichzeitig bereit und überschreibt jede Meldung mit dem Text, während sie eingeht.</summary>
      <typeparam name="T">Gibt den Typ der Daten, die von diesen Datenflussblock gepuffert werden.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
      <summary>Initialisiert das <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> mit der angegebenen Klonfunktion.</summary>
      <param name="cloningFunction">Die zu verwendende Funktion, um die Daten zu klonen, wenn sie für andere Blöcke bereitgestellt werden.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Initialisiert <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> mit der angegebenen Klonfunktion und <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
      <param name="cloningFunction">Die zu verwendende Funktion, um die Daten zu klonen, wenn sie für andere Blöcke bereitgestellt werden.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieses <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />-Objekt zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
      <summary>Signalisiert <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />, dass es keine Nachrichten mehr akzeptieren und keine produzieren und keine weiteren zurückgestellten Nachrichten verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Verknüpft das <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />-Objekt mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</summary>
      <param name="target">Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, der mit dieser Quelle verbunden werden soll.</param>
      <param name="linkOptions">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />-Instanz, die den Link konfiguriert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist NULL (Nothing in Visual Basic), oder <paramref name="linkOptions" /> ist NULL (Nothing in Visual Basic).</exception>
      <returns>Ein IDisposable, der nach dem Aufrufen von Dispose, die Quelle vom Ziel trennt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Bewirkt, <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> in einem <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> Zustand auszuführen.</summary>
      <param name="exception">Das <see cref="T:System.Exception" />-Objekt, das den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Versucht, alle verfügbaren Elemente aus <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="items">Die von der Quelle empfangenen Elemente.</param>
      <returns>
        <see langword="true" />, wenn ein oder mehrere Elemente empfangen werden konnten; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Wird von verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> aufgerufen, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> zu akzeptieren und verarbeiten, die zuvor durch dieses <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> angeboten werden.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die verarbeitet wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die die Nachricht verwendet.</param>
      <param name="messageConsumed">
        <see langword="true" />, wenn die Nachricht erfolgreich verarbeitet wurde, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>Der Wert der verarbeiteten Meldung. Dies entspricht möglicherweise einer anderen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz als die zuvor reservierte und die als <paramref name="messageHeader" /> an <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> übergebene. Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> muss den zurückgegebenen Wert benutzen und nicht den Wert, der als <paramref name="messageValue" /> von <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> übergeben wird.  
  
Wenn die Meldung, die angefordert wird, nicht verfügbar ist, ist der Rückgabewert <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />, der von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zuvor reserviert wurde, freizugeben.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der reservierten Meldung, die freigegeben wird.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, der die Nachricht freigibt, die er vorher reserviert hat.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Das <paramref name="target" /> hatte die Meldung nicht reserviert.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />, der von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zuvor angeboten wurde, zu reservieren.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die reserviert wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> der Meldung empfängt.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>
        <see langword="true" />, wenn die Nachricht erfolgreich reserviert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Bietet eine Meldung für <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> an und gibt dem Ziel die Möglichkeit, die Nachricht zu verarbeiten oder zurückzustellen.</summary>
      <param name="messageHeader">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz, die die Header der Nachricht darstellt, die bereitgestellt wird.</param>
      <param name="messageValue">Der Wert der Nachricht, die bereitgestellt wird.</param>
      <param name="source">Die <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, die die Nachricht anbietet. Dies kann NULL sein.</param>
      <param name="consumeToAccept">Auf <see langword="true" /> festlegen, um das Ziel anzuweisen, <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> während des Aufrufs von <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /><see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> synchron aufzurufen, um die Meldung zu verarbeiten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> ist ungültig.  
  
oder <paramref name="consumeToAccept" /> kann nur TRUE sein, wenn eine <paramref name="source" /> bereitgestellt wird, die nicht NULL ist.</exception>
      <returns>Der Status der angebotenen Meldung. Wenn die Meldung vom Ziel akzeptiert wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> zurückgegeben, und die Quelle sollte die angebotene Meldung nicht mehr verwenden, da sie jetzt dem Ziel gehört. Wenn die Nachricht vom Ziel zurückgestellt wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> als Benachrichtigung zurückgegeben, dass das Ziel später möglicherweise versucht, die Nachricht zu verarbeiten oder zu reservieren. Zwischenzeitlich besitzt die Quelle die Nachricht weiterhin und bietet sie möglicherweise anderen Blöcke an.  
  
Wenn das Ziel andernfalls die Meldung zurückgestellt hätte, aber <paramref name="source" /> gleich <see langword="null" /> war, wird stattdessen <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben.  
  
Wenn das Ziel versucht hat, die Nachricht zu akzeptieren, diese aber verpasst hat, weil die Quelle die die Meldung an ein anderes Ziel übermittelt oder einfach verworfen hat, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> zurückgegeben.  
  
Wenn das Ziel beschlossen hat, die Nachricht nicht zu akzeptieren, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben. Wenn das Ziel beschlossen hat, die Meldung nicht zu akzeptieren und niemals eine weitere Meldung von dieser Quelle akzeptieren wird, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> zurückgegeben.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</summary>
      <returns>Eine Zeichenfolge, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Versucht, ein verfügbares Output-Element von<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="filter">Das Prädikat, das ein Wert erfolgreich übergeben muss, damit es empfangen wird.  <paramref name="filter" /> ist möglicherweise <see langword="null" />, in diesem Fall werden alle Elemente übergeben.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" /> ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die Aufgabe.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
      <summary>Stellt einen Puffer zum Speichern von Daten für einen Dataflow bereit.</summary>
      <typeparam name="T">Gibt den Typ der Daten, die von diesen Datenflussblock gepuffert werden.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
      <summary>Initialisiert eine neue <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Initialisiert ein neues <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />-Objekt mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieses <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />-Objekt zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete">
      <summary>Signalisiert <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />, dass es keine Nachrichten mehr akzeptieren und keine produzieren und keine weiteren zurückgestellten Nachrichten verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Verknüpft das <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />-Objekt mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</summary>
      <param name="target">Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, der mit dieser Quelle verbunden werden soll.</param>
      <param name="linkOptions">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />-Instanz, die den Link konfiguriert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist NULL (Nothing in Visual Basic), oder <paramref name="linkOptions" /> ist NULL (Nothing in Visual Basic).</exception>
      <returns>Ein IDisposable, der nach dem Aufrufen von Dispose, die Quelle vom Ziel trennt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Hat zur Folge, dass <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> im Status <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> abgeschlossen wird.</summary>
      <param name="exception">Das <see cref="T:System.Exception" />-Objekt, das den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Wird von verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> aufgerufen, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> zu akzeptieren und verarbeiten, die zuvor durch dieses <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> angeboten werden.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die verarbeitet wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die die Nachricht verwendet.</param>
      <param name="messageConsumed">
        <see langword="true" />, wenn die Nachricht erfolgreich verarbeitet wurde, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>Der Wert der verarbeiteten Meldung. Dies entspricht möglicherweise einer anderen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz als die zuvor reservierte und die als <paramref name="messageHeader" /> an <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> übergebene. Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> muss den zurückgegebenen Wert benutzen und nicht den Wert, der als <paramref name="messageValue" /> von <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> übergeben wird.  
  
Wenn die Meldung, die angefordert wird, nicht verfügbar ist, ist der Rückgabewert <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />, der von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zuvor reserviert wurde, freizugeben.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der reservierten Meldung, die freigegeben wird.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, der die Nachricht freigibt, die er vorher reserviert hat.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Das <paramref name="target" /> hatte die Meldung nicht reserviert.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />, der von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zuvor angeboten wurde, zu reservieren.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die reserviert wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> der Meldung empfängt.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>
        <see langword="true" />, wenn die Nachricht erfolgreich reserviert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Bietet eine Meldung für <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> an und gibt dem Ziel die Möglichkeit, die Nachricht zu verarbeiten oder zurückzustellen.</summary>
      <param name="messageHeader">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz, die die Header der Nachricht darstellt, die bereitgestellt wird.</param>
      <param name="messageValue">Der Wert der Nachricht, die bereitgestellt wird.</param>
      <param name="source">Die <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, die die Nachricht anbietet. Dieser Wert kann <see langword="null" /> sein.</param>
      <param name="consumeToAccept">Legen Sie dies auf TRUE fest, um das Ziel anzuweisen, <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> während des Aufrufs von <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> vor der Rückgabe von <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> synchron aufzurufen, um die Meldung zu verarbeiten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> ist ungültig.  
  
oder <paramref name="consumeToAccept" /> kann nur TRUE sein, wenn eine <paramref name="source" /> bereitgestellt wird, die nicht NULL ist.</exception>
      <returns>Der Status der angebotenen Meldung. Wenn die Meldung vom Ziel akzeptiert wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> zurückgegeben, und die Quelle sollte die angebotene Meldung nicht mehr verwenden, da sie jetzt dem Ziel gehört. Wenn die Nachricht vom Ziel zurückgestellt wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> als Benachrichtigung zurückgegeben, dass das Ziel später möglicherweise versucht, die Nachricht zu verarbeiten oder zu reservieren. Zwischenzeitlich besitzt die Quelle die Nachricht weiterhin und bietet sie möglicherweise anderen Blöcke an.  
  
Wenn das Ziel andernfalls die Meldung zurückgestellt hätte, aber <paramref name="source" /> gleich <see langword="null" /> war, wird stattdessen <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben.  
  
Wenn das Ziel versucht hat, die Nachricht zu akzeptieren, diese aber verpasst hat, weil die Quelle die die Meldung an ein anderes Ziel übermittelt oder einfach verworfen hat, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> zurückgegeben.  
  
Wenn das Ziel beschlossen hat, die Nachricht nicht zu akzeptieren, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben. Wenn das Ziel beschlossen hat, die Meldung nicht zu akzeptieren und niemals eine weitere Meldung von dieser Quelle akzeptieren wird, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> zurückgegeben.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</summary>
      <returns>Eine Zeichenfolge, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Versucht, ein verfügbares Output-Element von<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="filter">Der Prädikatswert muss erfolgreich übergeben werden, damit er empfangen wird. <paramref name="filter" /> ist möglicherweise <see langword="null" />, in diesem Fall werden alle Elemente übergeben.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Versucht, alle verfügbaren Elemente aus <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="items">Die von der Quelle empfangenen Elemente.</param>
      <returns>
        <see langword="true" />, wenn ein oder mehrere Elemente empfangen werden konnten; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" /> ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die Aufgabe.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
      <summary>Ruft die aktuelle Anzahl der Elemente ab, die momentan im Puffer gespeichert sind.</summary>
      <returns>Eine -Anzahl von Elementen.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlock">
      <summary>Stellt einen Satz mit statischen Methoden (Shared in Visual Basic) für die Arbeit mit bestimmten Datenflussblöcken bereit.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Erstellt eine neue <see cref="T:System.IObservable`1" /> Abstraktion über <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="source">Die Quelle, die umschlossen werden soll.</param>
      <typeparam name="TOutput">Gibt den Datentyp an, der in der Quelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <returns>Ein <see cref="T:System.IObservable`1" />, das Beobachtern erlaubt, die Quelle zu abonnieren.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>Erstellt eine neue <see cref="T:System.IObserver`1" />-Abstraktion über <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="target">Das zu umschließende Ziel</param>
      <typeparam name="TInput">Gibt den Typ der Eingabe an, die vom Zielblock akzeptiert wird.</typeparam>
      <returns>Ein Beobachter, der den Zielblock umschließt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})">
      <summary>Überwacht zwei Datenflussquellen, wobei der angegebene Handler für eine beliebige Quelle aufgerufen wird, die Daten zuerst verfügbar macht.</summary>
      <param name="source1">Die erste Quelle.</param>
      <param name="action1">Der Handler zu Ausführen von Daten aus der ersten Quelle.</param>
      <param name="source2">Die zweite Quelle.</param>
      <param name="action2">Der Handler zu Ausführen von Daten aus der zweiten Quelle.</param>
      <typeparam name="T1">Gibt den Typ der Daten an, die in der ersten Quelle enthalten sind.</typeparam>
      <typeparam name="T2">Gibt den Typ der Daten an, die in der zweiten Quelle enthalten sind.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="action1" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="source2" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="action2" /> ist <see langword="null" />.</exception>
      <returns>Eine <see cref="T:System.Threading.Tasks.Task`1" />, die die asynchrone Auswahl darstellt. Wenn beide Quellen vor dem Abschluss der Auswahl beendet werden, wird die resultierende Aufgabe abgebrochen. Wenn eine der Datenquellen verfügbare Daten hat und erfolgreich an die Auswahl weitergibt, wird die resultierende Aufgabe abgeschlossen, wenn der Handler abgeschlossen wird. Wenn der Handler eine Ausnahme auslöst, endet die Aufgabe im Zustand <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> und enthält den Ausnahmefehler. Andernfalls wird die Aufgabe mit dem <see cref="P:System.Threading.Tasks.Task`1.Result" /> beendet, das entweder auf 0 oder 1 festgelegt ist, um jeweils die erste oder zweite Quelle darzustellen.  
  
Diese Methode verwendet nur ein Element aus einer der beiden Datenquellen, nie beide.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Überwacht zwei Datenflussquellen, wobei der angegebene Handler für eine beliebige Quelle aufgerufen wird, die Daten zuerst verfügbar macht.</summary>
      <param name="source1">Die erste Quelle.</param>
      <param name="action1">Der Handler zu Ausführen von Daten aus der ersten Quelle.</param>
      <param name="source2">Die zweite Quelle.</param>
      <param name="action2">Der Handler zu Ausführen von Daten aus der zweiten Quelle.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen diese Wahl zu konfigurieren ist.</param>
      <typeparam name="T1">Gibt den Typ der Daten an, die in der ersten Quelle enthalten sind.</typeparam>
      <typeparam name="T2">Gibt den Typ der Daten an, die in der zweiten Quelle enthalten sind.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="action1" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="source2" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="action2" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
      <returns>Eine <see cref="T:System.Threading.Tasks.Task`1" />, die die asynchrone Auswahl darstellt. Wenn alle Quellen vor dem Abschließen der Auswahl abgeschlossen werden oder wenn <see cref="T:System.Threading.CancellationToken" />, das als Teil von <paramref name="dataflowBlockOptions" /> bereitgestellt wird, vor dem Abschließen der Auswahl abgebrochen wird, wird die resultierende Aufgabe abgebrochen. Wenn eine der Datenquellen verfügbare Daten hat und erfolgreich an die Auswahl weitergibt, wird die resultierende Aufgabe abgeschlossen, wenn der Handler abgeschlossen wird. Wenn der Handler eine Ausnahme auslöst, endet die Aufgabe im Zustand <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> und enthält den Ausnahmefehler. Andernfalls wird die Aufgabe mit dem <see cref="P:System.Threading.Tasks.Task`1.Result" /> beendet, das entweder auf 0 oder 1 festgelegt ist, um jeweils die erste oder zweite Quelle darzustellen.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})">
      <summary>Überwacht drei Datenflussquellen, wobei der angegebene Handler für eine beliebige Quelle aufgerufen wird, die Daten zuerst verfügbar macht.</summary>
      <param name="source1">Die erste Quelle.</param>
      <param name="action1">Der Handler zu Ausführen von Daten aus der ersten Quelle.</param>
      <param name="source2">Die zweite Quelle.</param>
      <param name="action2">Der Handler zu Ausführen von Daten aus der zweiten Quelle.</param>
      <param name="source3">Die dritte Quelle.</param>
      <param name="action3">Die Handler zu Ausführen von Daten aus der dritten Quelle.</param>
      <typeparam name="T1">Gibt den Typ der Daten an, die in der ersten Quelle enthalten sind.</typeparam>
      <typeparam name="T2">Gibt den Typ der Daten an, die in der zweiten Quelle enthalten sind.</typeparam>
      <typeparam name="T3">Gibt den Datentyp an, der in der dritten Quelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="action1" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="source2" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="action2" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="source3" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="action3" /> ist <see langword="null" />.</exception>
      <returns>Eine <see cref="T:System.Threading.Tasks.Task`1" />, die die asynchrone Auswahl darstellt. Wenn alle Quellen vor dem Abschluss der Auswahl beendet werden, wird die resultierende Aufgabe abgebrochen. Wenn eine der Datenquellen verfügbare Daten hat und erfolgreich an die Auswahl weitergibt, wird die resultierende Aufgabe abgeschlossen, wenn der Handler abgeschlossen wird. Wenn der Handler eine Ausnahme auslöst, endet die Aufgabe im Zustand <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> und enthält den Ausnahmefehler. Andernfalls wird die Aufgabe mit dem <see cref="P:System.Threading.Tasks.Task`1.Result" /> beendet, das auf den 0-basierten Index der Quelle festgelegt ist.  
  
Diese Methode verwendet nur ein Element aus einer der Datenquellen, nie mehr als eine.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Überwacht drei Datenflussquellen, wobei der angegebene Handler für eine beliebige Quelle aufgerufen wird, die Daten zuerst verfügbar macht.</summary>
      <param name="source1">Die erste Quelle.</param>
      <param name="action1">Der Handler zu Ausführen von Daten aus der ersten Quelle.</param>
      <param name="source2">Die zweite Quelle.</param>
      <param name="action2">Der Handler zu Ausführen von Daten aus der zweiten Quelle.</param>
      <param name="source3">Die dritte Quelle.</param>
      <param name="action3">Die Handler zu Ausführen von Daten aus der dritten Quelle.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen diese Wahl zu konfigurieren ist.</param>
      <typeparam name="T1">Gibt den Typ der Daten an, die in der ersten Quelle enthalten sind.</typeparam>
      <typeparam name="T2">Gibt den Typ der Daten an, die in der zweiten Quelle enthalten sind.</typeparam>
      <typeparam name="T3">Gibt den Datentyp an, der in der dritten Quelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="action1" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="source2" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="action2" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="source3" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="action3" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
      <returns>Eine <see cref="T:System.Threading.Tasks.Task`1" />, die die asynchrone Auswahl darstellt. Wenn alle Quellen vor dem Abschließen der Auswahl abgeschlossen werden oder wenn <see cref="T:System.Threading.CancellationToken" />, das als Teil von <paramref name="dataflowBlockOptions" /> bereitgestellt wird, vor dem Abschließen der AUswahl abgebrochen wird, wird die resultierende Aufgabe abgebrochen. Wenn eine der Datenquellen verfügbare Daten hat und erfolgreich an die Auswahl weitergibt, wird die resultierende Aufgabe abgeschlossen, wenn der Handler abgeschlossen wird. Wenn der Handler eine Ausnahme auslöst, endet die Aufgabe im Zustand <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> und enthält den Ausnahmefehler. Andernfalls wird die Aufgabe mit dem <see cref="P:System.Threading.Tasks.Task`1.Result" /> beendet, das auf den 0-basierten Index der Quelle festgelegt ist.  
  
Diese Methode verwendet nur ein Element aus einer der Datenquellen, nie mehr als eine. Wenn der Abbruch angefordert wird, nachdem ein Element empfangen wurde, wird die Abbruchanforderung ignoriert, und der entsprechende Handler ist zulässig.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
      <summary>Kapselt ein Ziel und eine Quelle in eine einzelne Propagierung.</summary>
      <param name="target">Das zu kapselnde Ziel</param>
      <param name="source">Die zu kapselnde Quelle.</param>
      <typeparam name="TInput">Gibt den Typ der Eingabe an, die vom Ziel erwartet wird.</typeparam>
      <typeparam name="TOutput">Gibt den Typ der Ausgabe an, die von der Quelle erzeugt wurde.</typeparam>
      <returns>Die gekapselte Quelle und Ziel.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>Verbindet <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</summary>
      <param name="source">Die zu verknüpfende Quelle.</param>
      <param name="target">Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, an den die Quelle verbunden werden soll.</param>
      <typeparam name="TOutput">Gibt den Datentyp an, der in der Quelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>Ein <see cref="T:System.IDisposable" />, der nach dem Aufrufen von <see langword="Dispose" />, die Quelle vom Ziel löst.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
      <summary>Verknüpft <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit der angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt mithilfe des angegebenen Filters.</summary>
      <param name="source">Die zu verknüpfende Quelle.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, an den die Quelle gebunden werden soll.</param>
      <param name="predicate">Der Filter, den eine Meldung übergeben muss, damit er von der Quelle an das Ziel weitergegeben wird.</param>
      <typeparam name="TOutput">Gibt den Datentyp an, der in der Quelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="target" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="predicate" /> ist <see langword="null" />.</exception>
      <returns>Ein <see cref="T:System.IDisposable" />, der nach dem Aufrufen von <see langword="Dispose" />, die Quelle vom Ziel löst.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})">
      <summary>Verknüpft <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit der angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt mithilfe des angegebenen Filters.</summary>
      <param name="source">Die zu verknüpfende Quelle.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, an den die Quelle gebunden werden soll.</param>
      <param name="linkOptions">Einer der Enumerationswerte, der angibt, wie ein Link zwischen Datenflussblöcken konfiguriert werden kann.</param>
      <param name="predicate">Der Filter, den eine Meldung übergeben muss, damit er von der Quelle an das Ziel weitergegeben wird.</param>
      <typeparam name="TOutput">Gibt den Datentyp an, der in der Quelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null (Nothing in Visual Basic).  
  
- oder - 
<paramref name="target" /> ist null (Nothing in Visual Basic).  
  
- oder - 
<paramref name="linkOptions" /> ist null (Nothing in Visual Basic).  
  
- oder - 
<paramref name="predicate" /> ist null (Nothing in Visual Basic).</exception>
      <returns>Ein <see cref="T:System.IDisposable" />, der nach dem Aufrufen von <see langword="Dispose" />, die Quelle vom Ziel löst.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1">
      <summary>Ruft ab einen Zielblock ab, der alle Meldungen synchron akzeptiert, die für ihn bereitgestellt werden, und diese dann ablegt.</summary>
      <typeparam name="TInput">Der Typ der Nachrichten, die dieser Block annehmen kann.</typeparam>
      <returns>Ein <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die alle angebotenen Nachrichten akzeptiert und anschließend ablegt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Stellt eine <see cref="T:System.Threading.Tasks.Task`1" /> bereit, die asynchron die Quelle für verfügbare Ausgabe überwacht.</summary>
      <param name="source">Die zu überwachende Quelle.</param>
      <typeparam name="TOutput">Gibt den Datentyp an, der in der Quelle enthalten ist.</typeparam>
      <returns>Ein <see cref="T:System.Threading.Tasks.Task`1" />, das darüber informiert, ob und wann mehr Ausgaben zur Verfügung steht. Wenn bei Beenden der Aufgabe <see cref="P:System.Threading.Tasks.Task`1.Result" /> gleich <see langword="true" /> ist, sind in der Quelle mehr Ausgabedaten verfügbar (obwohl ein anderer Consumer der Quelle möglicherweise die Daten abruft).  
  
Wenn sie <see langword="false" /> zurückgibt, ist und wird wird niemals mehr Output verfügbar sein, da die Quelle vor der Ausgabe abgeschlossen wird, bevor der Output verfügbar ist.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Stellt ein <see cref="T:System.Threading.Tasks.Task`1" />-Objekt bereit, das asynchron die Quelle für eine verfügbare Ausgabe überwacht.</summary>
      <param name="source">Die zu überwachende Quelle.</param>
      <param name="cancellationToken">Das Abbruchtoken, um den asynchronen Vorgang abzubrechen.</param>
      <typeparam name="TOutput">Gibt den Datentyp an, der in der Quelle enthalten ist.</typeparam>
      <returns>Ein <see cref="T:System.Threading.Tasks.Task`1" />, das darüber informiert, ob und wann mehr Ausgaben zur Verfügung steht. Wenn bei Beenden der Aufgabe <see cref="P:System.Threading.Tasks.Task`1.Result" /> gleich <see langword="true" /> ist, sind in der Quelle mehr Ausgabedaten verfügbar (obwohl ein anderer Consumer der Quelle möglicherweise die Daten abruft). Wenn sie <see langword="false" /> zurückgibt, ist und wird wird niemals mehr Output verfügbar sein, da die Quelle vor der Ausgabe abgeschlossen wird, bevor der Output verfügbar ist.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>Fügt dem <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ein Element hinzu.</summary>
      <param name="target">Zielblock</param>
      <param name="item">Das Element, das dem Ziel bereitgestellt wird.</param>
      <typeparam name="TInput">Gibt den Typ der Daten an, die vom Zielblock akzeptiert werden.</typeparam>
      <returns>
        <see langword="true" />, wenn das Element vom Zielblock angenommen wurde; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Empfängt synchron einen Wert aus der angegebenen Quelle.</summary>
      <param name="source">Die Quelle, aus der der Wert empfangen werden soll.</param>
      <typeparam name="TOutput">Der Datentyp, der in der Datenquelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element konnte von der Quelle empfangen werden.</exception>
      <returns>Der empfangene Wert.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Erhält synchron einen Wert aus einer angegebenen Quelle und stellt ein Token bereit, um die Operation abzubrechen.</summary>
      <param name="source">Die Quelle, aus der der Wert empfangen werden soll.</param>
      <param name="cancellationToken">Das Token, das verwendet wird, um den Empfangsvorgang abzubrechen.</param>
      <typeparam name="TOutput">Der Datentyp, der in der Datenquelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element konnte von der Quelle empfangen werden.</exception>
      <exception cref="T:System.OperationCanceledException">Der Vorgang wurde abgebrochen, bevor ein Element aus der Quelle empfangen wurde.</exception>
      <returns>Der empfangene Wert.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>Empfängt synchron einen Wert aus einer angegebenen Quelle und beachtet ein optionales Timeout.</summary>
      <param name="source">Die Quelle, aus der der Wert empfangen werden soll.</param>
      <param name="timeout">Das maximale Zeitintervall, in Millisekunden, der gewartet werden muss, bis der synchrone Vorgang abgeschlossen wurde, oder auf ein Intervall, der -1 Millisekunden darstellt, um unbegrenzt zu warten.</param>
      <typeparam name="TOutput">Der Datentyp, der in der Datenquelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> ist eine negative Zahl, aber nicht -1 Millisekunde. Ein Wert von -1 Millisekunde gibt eine Endlostimeoutperiode an.  
  
- oder - 
 <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element konnte von der Quelle empfangen werden.</exception>
      <exception cref="T:System.TimeoutException">Das angegebene Timeout ist abgelaufen, bevor ein Element von der Quelle empfangen wurde.</exception>
      <returns>Der empfangene Wert.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Empfängt synchron einen Wert aus einer angegebenen Quelle, stellt ein Token bereit, um den Vorgang abzubrechen und beachtet ein optionales Timeoutintervall.</summary>
      <param name="source">Die Quelle, aus der der Wert empfangen werden soll.</param>
      <param name="timeout">Das maximale Zeitintervall, in Millisekunden, der gewartet werden muss, bis der synchrone Vorgang abgeschlossen wurde, oder auf ein Intervall, der -1 Millisekunden darstellt, um unbegrenzt zu warten.</param>
      <param name="cancellationToken">Das Token, das verwendet wird, um den Empfangsvorgang abzubrechen.</param>
      <typeparam name="TOutput">Der Datentyp, der in der Datenquelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> ist eine negative Zahl, aber nicht -1 Millisekunde. Ein Wert von -1 Millisekunde gibt eine Endlostimeoutperiode an.  
  
- oder - 
 <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element konnte von der Quelle empfangen werden.</exception>
      <exception cref="T:System.TimeoutException">Das angegebene Timeout ist abgelaufen, bevor ein Element von der Quelle empfangen wurde.</exception>
      <exception cref="T:System.OperationCanceledException">Der Vorgang wurde abgebrochen, bevor ein Element aus der Quelle empfangen wurde.</exception>
      <returns>Der empfangene Wert.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Empfängt asynchron einen Wert aus der angegebenen Quelle.</summary>
      <param name="source">Die Quelle, aus der der Wert empfangen werden soll.</param>
      <typeparam name="TOutput">Der Datentyp, der in der Datenquelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <returns>Eine Aufgabe, die den asynchronen Empfangsvorgang darstellt. Wenn ein Elementwert erfolgreich aus der Quelle empfangen wird, wird die zurückgegebene Aufgabe abgeschlossen, und ihr <see cref="P:System.Threading.Tasks.Task`1.Result" /> gibt den empfangene Elementwert zurück. Wenn ein Elementwert nicht abgerufen werden kann, weil die Quelle leer ist und abgeschlossen wurde, wird eine <see cref="T:System.InvalidOperationException" />-Ausnahme in der zurückgegebenen Aufgabe ausgelöst.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Erhält asynchron einen Wert aus einer angegebenen Quelle und stellt ein Token bereit, um die Operation abzubrechen.</summary>
      <param name="source">Die Quelle, aus der der Wert empfangen werden soll.</param>
      <param name="cancellationToken">Das Token, das verwendet wird, um den Empfangsvorgang abzubrechen.</param>
      <typeparam name="TOutput">Gibt den Datentyp an, der in der Quelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <returns>Eine Aufgabe, die den asynchronen Empfangsvorgang darstellt. Wenn ein Wert erfolgreich aus der Quelle empfangen wird, wird die zurückgegebene Aufgabe fertig gestellt und ihr <see cref="P:System.Threading.Tasks.Task`1.Result" /> gibt den Wert zurück. Wenn ein Wert nicht abgerufen werden kann, da ein Abbruch angefordert wurde, wird die zurückgegebene Aufgabe abgebrochen. Wenn der Wert nicht abgerufen werden kann, weil die Quelle leer ist und abgeschlossen wurde, wird eine <see cref="T:System.InvalidOperationException" />-Ausnahme in der zurückgegebene Aufgabe ausgelöst.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>Empfängt asynchron einen Wert aus einer angegebenen Quelle und beachtet ein optionales Timeout.</summary>
      <param name="source">Die Quelle, aus der der Wert empfangen werden soll.</param>
      <param name="timeout">Das maximale Zeitintervall, in Millisekunden, der gewartet werden muss, bis der synchrone Vorgang abgeschlossen wurde, oder auf ein Intervall, der -1 Millisekunden darstellt, um unbegrenzt zu warten.</param>
      <typeparam name="TOutput">Der Datentyp, der in der Datenquelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> ist eine negative Zahl, aber nicht -1 Millisekunde. Ein Wert von -1 Millisekunde gibt eine Endlostimeoutperiode an.  
  
- oder - 
 <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>Eine Aufgabe, die den asynchronen Empfangsvorgang darstellt. Wenn ein Wert erfolgreich aus der Quelle empfangen wird, wird die zurückgegebene Aufgabe fertig gestellt und ihr <see cref="P:System.Threading.Tasks.Task`1.Result" /> gibt den Wert zurück. Wenn ein Wert nicht abgerufen werden kann, da das Timeout abgelaufen ist, wird die zurückgegebene Aufgabe abgebrochen. Wenn der Wert nicht abgerufen werden kann, weil die Quelle leer ist und abgeschlossen wurde, wird eine <see cref="T:System.InvalidOperationException" />-Ausnahme in der zurückgegebene Aufgabe ausgelöst.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Empfängt asynchron einen Wert aus einer angegebenen Quelle, stellt ein Token bereit, um den Vorgang abzubrechen und beachtet ein optionales Timeoutintervall.</summary>
      <param name="source">Die Quelle, aus der der Wert empfangen werden soll.</param>
      <param name="timeout">Das maximale Zeitintervall, in Millisekunden, der gewartet werden muss, bis der synchrone Vorgang abgeschlossen wurde, oder auf ein Intervall, der -1 Millisekunden darstellt, um unbegrenzt zu warten.</param>
      <param name="cancellationToken">Das Token, das verwendet wird, um den Empfangsvorgang abzubrechen.</param>
      <typeparam name="TOutput">Der Datentyp, der in der Datenquelle enthalten ist.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> ist eine negative Zahl, aber nicht -1 Millisekunde. Ein Wert von -1 Millisekunde gibt eine Endlostimeoutperiode an.  
  
- oder - 
 <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>Eine Aufgabe, die den asynchronen Empfangsvorgang darstellt. Wenn ein Wert erfolgreich aus der Quelle empfangen wird, wird die zurückgegebene Aufgabe fertig gestellt und ihr <see cref="P:System.Threading.Tasks.Task`1.Result" /> gibt den Wert zurück. Wenn ein Wert nicht abgerufen werden kann, da das Timeout abgelaufen ist oder der Abbruch angefordert wurden, wird die zurückgegebene Aufgabe abgebrochen. Wenn der Wert nicht abgerufen werden kann, weil die Quelle leer und abgeschlossen wurde, wird eine <see cref="T:System.InvalidOperationException" /> Ausnahme in der zurückgegebene Aufgabe ausgelöst.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>Gewährt dem Zielmeldungsblock asynchron eine Meldung an und ermöglicht einen Aufschub.</summary>
      <param name="target">Das Ziel, an das die Daten übermittelt werden sollen.</param>
      <param name="item">Das Element, das dem Ziel bereitgestellt wird.</param>
      <typeparam name="TInput">Gibt den Typ der Daten an, die an das Ziel gesendet werden sollen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>Ein <see cref="T:System.Threading.Tasks.Task`1" />-Element, das den asynchronen Sendevorgangs darstellt. Wenn das Ziel das angebotene Element während des Aufrufs von <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" /> akzeptiert und nutzt, wird bei Rückgabe aus dem Aufruf das resultierende <see cref="T:System.Threading.Tasks.Task`1" /> abgeschlossen, und die <see cref="P:System.Threading.Tasks.Task`1.Result" />-Eigenschaft gibt <see langword="true" /> zurück. Wenn das Ziel das angebotene Element während des Aufrufs ablehnt, wird bei Rückgabe aus dem Aufruf das resultierende <see cref="T:System.Threading.Tasks.Task`1" /> abgeschlossen, und die <see cref="P:System.Threading.Tasks.Task`1.Result" />-Eigenschaft gibt <see langword="false" /> zurück. Wenn das Ziel das angebotene Element aufschiebt, wird das Element im Puffer gespeichert, bis es vom Ziel verwendet oder freigegeben wird. Zu diesem Punkt wird die Aufgabe ausgeführt, wobei <see cref="P:System.Threading.Tasks.Task`1.Result" /> angibt, ob die Meldung verarbeitet wurde. Wenn das Ziel nie versucht, die Nachricht zu verarbeiten oder herauszugeben, wird die zurückgegebene Aufgabe nie abgeschlossen.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)">
      <summary>Gewährt dem Zielmeldungsblock asynchron eine Meldung an und ermöglicht einen Aufschub.</summary>
      <param name="target">Das Ziel, an das die Daten übermittelt werden sollen.</param>
      <param name="item">Das Element, das dem Ziel bereitgestellt wird.</param>
      <param name="cancellationToken">Das Abbruchtoken, um den Abbruch des Sendevorgangs anzufordern.</param>
      <typeparam name="TInput">Gibt den Typ der Daten an, die an das Ziel gesendet werden sollen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist null (Nothing in Visual Basic).</exception>
      <returns>Ein <see cref="T:System.Threading.Tasks.Task`1" />-Element, das den asynchronen Sendevorgangs darstellt.  Wenn das Ziel das angebotene Element während des Aufrufs von SendAsync akzeptiert und verarbeitet, wird bei Rückgabe aus dem Aufruf das resultierende <see cref="T:System.Threading.Tasks.Task`1" /> abgeschlossen, und die <c>Result</c>-Eigenschaft gibt TRUE zurück.  Wenn das Ziel das angebotene Element während des Aufrufs ablehnt, wird bei Rückgabe aus dem Aufruf das resultierende <see cref="T:System.Threading.Tasks.Task`1" /> abgeschlossen, und die <c>Result</c>-Eigenschaft gibt FALSE zurück. Wenn das Ziel das angebotene Element aufschiebt, wird das Element im Puffer gespeichert, bis es vom Ziel verwendet oder freigegeben wird. Dann wird die Aufgabe ausgeführt, wobei <c>Result</c> angibt, ob die Meldung verarbeitet wurde. Wenn das Ziel nie versucht, die Nachricht zu verarbeiten oder herauszugeben, wird die zurückgegebene Aufgabe nie abgeschlossen.  
  
Wenn der Abbruch angefordert wird, bevor das Ziel erfolgreich die gesendeten Daten verarbeitet hat, wird die zurückgegebene Aufgabe im abgebrochenen Zustand abgeschlossen, und die Daten sind nicht mehr für das Ziel verfügbar.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)">
      <summary>Versucht, ein Element von <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="source">Die Quelle, aus der empfangen werden soll.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <typeparam name="TOutput">Gibt den Datentyp an, der in der Quelle enthalten ist.</typeparam>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
      <summary>Stellt Optionen bereit, mit denen die Verarbeitung konfiguriert wird, die von Datenflussblöcken ausgeführt wird.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Unbounded">
      <summary>Eine Konstante, mit der eine unbegrenzte Menge für <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />-Member angegeben wird, die eine Obergrenze bereitstellen. Dieses Feld ist konstant.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
      <summary>Initialisiert eine neue <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity">
      <summary>Ruft die maximale Anzahl von Nachrichten ab, die vom Block gepuffert werden können, bzw. legt sie fest.</summary>
      <returns>Die maximale Anzahl Nachrichten. Der Standardwert ist -1, was eine unendliche Anzahl von Nachrichten angibt.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
      <summary>Ruft das <see cref="T:System.Threading.CancellationToken" /> zum Überwachen von Abbruchanforderungen ab, oder legt es fest.</summary>
      <returns>Das Token.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.EnsureOrdered">
      <summary>Ruft einen Wert ab, der angibt, ob die geordnete Verarbeitung auf die Nachrichtenverarbeitung eines Blocks erzwungen werden soll, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" /> , wenn die geordnete Verarbeitung erzwungen werden soll. andernfalls <see langword="false" /> . Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
      <summary>Ruft die maximale Anzahl an Nachrichten ab, die pro Aufgabe verarbeitet werden können, oder legt diese fest.</summary>
      <returns>Die maximale Anzahl Nachrichten. Der Standardwert ist -1, was eine unendliche Anzahl von Nachrichten angibt.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat">
      <summary>Ruft die Formatzeichenfolge ab, die verwendet wird, wenn der Name eines Blocks abgefragt wird, oder legt diese fest.</summary>
      <returns>Die Formatzeichenfolge, wenn ein Block nach seinem Namen abgefragt wird.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
      <summary>Übernimmt oder bestimmt <see cref="T:System.Threading.Tasks.TaskScheduler" />, der für geplante Tasks verwendet wird.</summary>
      <returns>Taskplaner</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions">
      <summary>Stellt die Optionen bereit, die verwendet werden, um einen Link zwischen Datenflussblöcken zu konfigurieren.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor">
      <summary>Initialisiert das <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.Append">
      <summary>Ruft ab oder legt fest, ob der Link der Linkliste der Quelle angefügt oder ob er vorangestellt werden soll.</summary>
      <returns>Gibt <see cref="T:System.Boolean" /> zurück.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages">
      <summary>Ruft die maximale Anzahl an Nachrichten ab, die über den Link verbraucht werden können, oder legt diese fest.</summary>
      <returns>Gibt <see cref="T:System.Int32" /> zurück.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion">
      <summary>Ruft ab oder legt fest, ob an das verknüpfte Ziel automatisch eine Abschluss- oder Fehlerbenachrichtigung weitergegeben wird.</summary>
      <returns>Gibt <see cref="T:System.Boolean" /> zurück.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader">
      <summary>Stellt einen Container mit Datenattributen für die Übergabe zwischen Datenflussblöcken bereit.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> mit dem angegebenen Attribut.</summary>
      <param name="id">Die ID der Nachricht. Muss innerhalb des Ursprungsquellblocks eindeutig sein. Sie muss nicht global eindeutig sein.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)">
      <summary>Überprüft geschachtelte <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanzen auf Gleichheit über die ID.</summary>
      <param name="obj">Eine geschachtelte <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz.</param>
      <returns>
        <see langword="true" />, wenn die Instanzen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Überprüft zwei <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanzen ohne Boxing auf Gleichheit anhand der ID.</summary>
      <param name="other">Eine andere <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz.</param>
      <returns>
        <see langword="true" />, wenn die Instanzen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode">
      <summary>Generiert einen Hashcode für die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz.</summary>
      <returns>Der Hashcode.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Überprüft zwei <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanzen auf Gleichheit anhand der ID.</summary>
      <param name="left">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz.</param>
      <param name="right">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz.</param>
      <returns>
        <see langword="true" />, wenn die Instanzen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Überprüft zwei <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanzen auf Ungleichheit anhand der ID.</summary>
      <param name="left">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz.</param>
      <param name="right">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz.</param>
      <returns>
        <see langword="true" />, wenn die Instanzen ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Id">
      <summary>Ruft die ID der Meldung in der Quelle ab.</summary>
      <returns>Die in der-Instanz enthaltene ID  <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> .</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.IsValid">
      <summary>Ruft die Gültigkeit der Meldung ab.</summary>
      <returns>
        <see langword="true" />, wenn die ID der Nachricht von 0 abweicht. <see langword="false" />, wenn die ID der Nachricht 0 (null) ist.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
      <summary>Stellt den Status von einem <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> bei der Übergabe zwischen Datenflussblöcken dar.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
      <summary>Gibt an, dass <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> die Meldung akzeptiert hat. Sobald ein Ziel eine Nachricht akzeptiert hat, gehört diese vollständig zum Ziel.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
      <summary>Gibt an, dass <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> die Meldung abgelehnt hat. Der <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> besitzt die Nachricht weiterhin.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
      <summary>Gibt an, dass <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> die Meldung abgelehnt hat. Der <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> besitzt die Nachricht weiterhin.  
  
Darüber hinaus lehnt <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> alle zukünftigen Nachrichten ab, die von der Quelle gesendet werden.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
      <summary>Gibt an, dass <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> versucht hat, die Nachricht aus <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zu akzeptieren, allerdings war die Nachricht nicht mehr verfügbar.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
      <summary>Gibt an, dass <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> die Meldung zur möglichen Nutzung auf einen späteren Zeitpunkt verschoben hat.  
  
Der <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> besitzt die Nachricht weiterhin.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions">
      <summary>Stellt Optionen bereit, die verwendet werden, um die Verarbeitung zu konfigurieren, die von Datenflussblöcken ausgeführt wird, die jede Meldung durch den Aufruf eines vom Benutzer bereitgestellten Delegaten verarbeiten. Dies sind Datenflussblöcke wie <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> und <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor">
      <summary>Initialisiert eine neue <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism">
      <summary>Ruft die maximale Anzahl von Meldungen ab, die vom Block gleichzeitig verarbeitet werden können.</summary>
      <returns>Die maximale Anzahl Nachrichten.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.SingleProducerConstrained">
      <summary>Ruft ab, ob der Code, der Datenfluss in einen Producerblock benutzt, jeweils auf einen Producer beschränkt ist.</summary>
      <returns>Gibt <see cref="T:System.Boolean" /> zurück.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions">
      <summary>Stellt Optionen bereit, die verwendet werden, um die Verarbeitung zu konfigurieren, die von Datenflussblöcken ausgeführt wird, die mehrere Nachrichten gruppieren. Dies sind Datenflussblöcke wie <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> und <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor">
      <summary>Initialisiert eine neue <see cref="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy">
      <summary>Ruft den booleschen Wert ab, der bestimmt, ob angebotene Nachrichten weitreichend konsumiert werden, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, um die angebotenen Meldungen weitreichend zu nutzen; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.MaxNumberOfGroups">
      <summary>Ruft die maximale Anzahl von Gruppen ab, die vom Block generiert werden sollte, oder legt diese fest.</summary>
      <returns>Die maximale Anzahl von Gruppen.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
      <summary>Stellt einen Datenflussblock dar.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete">
      <summary>Signalisiert <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />, dass es keine Nachrichten mehr akzeptieren und keine produzieren und keine weiteren zurückgestellten Nachrichten verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)">
      <summary>Hat zur Folge, dass <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> im Status <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> abgeschlossen wird.</summary>
      <param name="exception">Das <see cref="T:System.Exception" />-Objekt, das den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" /> ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die Aufgabe.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
      <summary>Stellt einen Datenflussblock dar, der ein Ziel für Daten und eine Quelle von Daten ist.</summary>
      <typeparam name="TInput">Gibt den Typ der Daten an, die von akzeptiert werden  <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" /> .</typeparam>
      <typeparam name="TOutput">Gibt den Typ der Daten an, die von bereitgestellt werden  <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" /> .</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1">
      <summary>Stellt einen Datenflussblock dar, der das Empfangen von Meldungen unterstützt, ohne zu verknüpfen.</summary>
      <typeparam name="TOutput">Gibt den Typ der Daten an, die vom <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> bereitgestellt werden.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Versucht, ein verfügbares Output-Element von<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="filter">Der Prädikatswert muss erfolgreich übergeben werden, damit er empfangen wird.  <paramref name="filter" /> ist möglicherweise <see langword="null" />, in diesem Fall werden alle Elemente übergeben.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Versucht, alle verfügbaren Elemente aus <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="items">Die von der Quelle empfangenen Elemente.</param>
      <returns>
        <see langword="true" />, wenn ein oder mehrere Elemente empfangen werden konnten; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
      <summary>Stellt einen Datenflussblock dar, der eine Datenquelle darstellt.</summary>
      <typeparam name="TOutput">Gibt den Typ der Daten an, die von bereitgestellt werden  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> .</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Wird von verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> aufgerufen, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> zu akzeptieren und verarbeiten, die zuvor durch dieses <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> angeboten werden.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die verarbeitet wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die die Nachricht verwendet.</param>
      <param name="messageConsumed">
        <see langword="true" />, wenn die Nachricht erfolgreich verarbeitet wurde, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Der messageHeader ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">Das Ziel ist <see langword="null" />.</exception>
      <returns>Der Wert der verarbeiteten Meldung. Dies entspricht möglicherweise einer anderen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz als die zuvor reservierte und die als <paramref name="messageHeader" /> an <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> übergebene. Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> muss den zurückgegebenen Wert benutzen und nicht den Wert, der als <paramref name="messageValue" /> von <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> übergeben wird.  
  
Wenn die Meldung, die angefordert wird, nicht verfügbar ist, ist der Rückgabewert NULL.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Verknüpft das <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />-Objekt mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</summary>
      <param name="target">Das <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt, das mit dieser Quelle verbunden werden soll.</param>
      <param name="linkOptions">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />-Instanz, die den Link konfiguriert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist NULL (Nothing in Visual Basic), oder <paramref name="linkOptions" /> ist NULL (Nothing in Visual Basic).</exception>
      <returns>Ein IDisposable, der nach dem Aufrufen von Dispose, die Quelle vom Ziel trennt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />, der von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zuvor reserviert wurde, freizugeben.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der reservierten Meldung, die freigegeben wird.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, der die Nachricht freigibt, die er vorher reserviert hat.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Das <paramref name="target" /> hatte die Meldung nicht reserviert.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />, der von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zuvor angeboten wurde, zu reservieren.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die reserviert wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> der Meldung empfängt.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>
        <see langword="true" />, wenn die Nachricht erfolgreich reserviert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
      <summary>Stellt einen Datenflussblock dar, der ein Ziel für Daten ist.</summary>
      <typeparam name="TInput">Gibt den Typ der Daten an, die vom <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> akzeptiert werden.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Bietet eine Meldung für <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> an und gibt dem Ziel die Möglichkeit, die Nachricht zu verarbeiten oder zurückzustellen.</summary>
      <param name="messageHeader">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz, die die Header der Nachricht darstellt, die bereitgestellt wird.</param>
      <param name="messageValue">Der Wert der Nachricht, die bereitgestellt wird.</param>
      <param name="source">Die <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, die die Nachricht anbietet. Dies kann NULL sein.</param>
      <param name="consumeToAccept">Auf <see langword="true" /> festlegen, um das Ziel anzuweisen, <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> während des Aufrufs von <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /><see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> synchron aufzurufen, um die Meldung zu verarbeiten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> ist ungültig.  
  
oder <paramref name="consumeToAccept" /> kann nur TRUE sein, wenn eine <paramref name="source" /> bereitgestellt wird, die nicht NULL ist.</exception>
      <returns>Der Status der angebotenen Meldung. Wenn die Meldung vom Ziel akzeptiert wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> zurückgegeben, und die Quelle sollte die angebotene Meldung nicht mehr verwenden, da sie jetzt dem Ziel gehört. Wenn die Nachricht vom Ziel zurückgestellt wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> als Benachrichtigung zurückgegeben, dass das Ziel später möglicherweise versucht, die Nachricht zu verarbeiten oder zu reservieren. Zwischenzeitlich besitzt die Quelle die Nachricht weiterhin und bietet sie möglicherweise anderen Blöcke an.  
  
Wenn das Ziel allerdings die Meldung zurückstellt, aber die Quelle <see langword="null" /> war, wird stattdessen <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben.  
  
Wenn das Ziel versucht hat, die Nachricht zu akzeptieren, diese aber verpasst hat, weil die Quelle die die Meldung an ein anderes Ziel übermittelt oder einfach verworfen hat, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> zurückgegeben.  
  
Wenn das Ziel beschlossen hat, die Nachricht nicht zu akzeptieren, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben. Wenn das Ziel beschlossen hat, die Meldung nicht zu akzeptieren und niemals eine weitere Meldung von dieser Quelle akzeptieren wird, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> zurückgegeben.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
      <summary>Stellt einen Datenflussblock bereit, der sich über mehrere Datenflussquellen verbindet, nicht unbedingt desselben Typs, und wartet auf ein ankommendes Element für jeden Typ, bevor sie alle zusammen als Tupel freigegeben werden, das aus einem Element pro Typ besteht.</summary>
      <typeparam name="T1">Gibt den Typ der Daten an, die vom ersten Ziel des Blocks akzeptiert werden.</typeparam>
      <typeparam name="T2">Gibt den Typ der Daten an, die vom zweiten Ziel des Blocks akzeptiert werden.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
      <summary>Initialisiert eine neue <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initialisiert eine neue <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieser <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete">
      <summary>Signalisiert <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />, dass es keine Nachrichten mehr akzeptieren und keine produzieren und keine weiteren zurückgestellten Nachrichten verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Verbindet <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</summary>
      <param name="target">Verbindet <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</param>
      <param name="linkOptions">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />-Instanz, die den Link konfiguriert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" /> (Nichts in Visual Basic); oder <paramref name="linkOptions" /> ist <see langword="null" /> (Nichts in Visual Basic)</exception>
      <returns>Ein IDisposable, der nach dem Aufrufen von Dispose, die Quelle vom Ziel trennt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Bewirkt, <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> in einem <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> Zustand auszuführen.</summary>
      <param name="exception">Das <see cref="T:System.Exception" />-Objekt, das den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean@)">
      <summary>Übergibt den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />-Instanz an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle</summary>
      <param name="messageHeader">Die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur der Nachricht, die verarbeitet werden soll</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Struktur, für die die Nachricht verarbeitet werden soll</param>
      <param name="messageConsumed">
        <see langword="true" />, wenn die Nachricht erfolgreich verarbeitet wurde. Andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="target" />-Parameter ist <see langword="null" /> (Nichts in Visual Basic).</exception>
      <returns>Der Wert der verarbeiteten Meldung. Dies kann einer anderen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz entsprechen, als zuvor reserviert und als <paramref name="messageHeader" /> an diese Methode übergeben wurde. Der nutzende <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> muss den zurückgegebenen Wert anstelle des als <paramref name="messageValue" /> an <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> übergebenen Werts verwenden. Wenn die angeforderte Meldung nicht verfügbar ist, ist der Rückgabewert <see langword="null" /> (in Visual Basic <see langword="Nothing" />).</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <summary>Übergibt das Recht, den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle zu übergeben</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der reservierten Meldung</param>
      <param name="target">Die Schnittstelle <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die aktuell die Reservierung enthält</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="target" />-Parameter ist <see langword="null" /> (Nichts in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Das <paramref name="target" /> hatte die Meldung nicht reserviert.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <summary>Behält sich das Recht vor, den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle zu übergeben</summary>
      <param name="messageHeader">Die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur der Nachricht, die reserviert werden soll</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Struktur, für die die Nachricht reserviert werden soll</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="target" />-Parameter ist <see langword="null" /> (Nichts in Visual Basic).</exception>
      <returns>
        <see langword="true" />, wenn die Nachricht erfolgreich reserviert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</summary>
      <returns>Eine Zeichenfolge, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
      <summary>Versucht, ein verfügbares Output-Element von<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="filter">Der Prädikatswert muss erfolgreich übergeben werden, damit er empfangen wird.  <paramref name="filter" /> ist möglicherweise <see langword="null" />, in diesem Fall werden alle Elemente übergeben.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
      <summary>Versucht, alle verfügbaren Elemente aus <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="items">Die von der Quelle empfangenen Elemente.</param>
      <returns>
        <see langword="true" />, wenn ein oder mehrere Elemente empfangen werden konnten; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" /> ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die Aufgabe.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
      <summary>Ruft die Anzahl der Ausgabe-Elementen ab, die von diesem Block empfangen werden können.</summary>
      <returns>Die Anzahl von Ausgabe-Elementen in.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
      <summary>Ruft ein Ziel ab, das verwendet werden kann, um Meldungen des ersten Typs anzubieten.</summary>
      <returns>Das Ziel.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
      <summary>Ruft ein Ziel ab, das verwendet werden kann, um Meldungen des zweiten Typs anzubieten.</summary>
      <returns>Das Ziel.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
      <summary>Stellt einen Datenflussblock bereit, der sich über mehrere Datenflussquellen erstreckt, die nicht unbedingt desselben Typs sind. Der Datenflussblock wartet auf ein ankommendes Element für jeden Typ, bevor sie alle zusammen als Tupel freigegeben werden, das ein Element pro Typ enthält.</summary>
      <typeparam name="T1">Gibt den Typ der Daten an, die vom ersten Ziel des Blocks akzeptiert werden.</typeparam>
      <typeparam name="T2">Gibt den Typ der Daten an, die vom zweiten Ziel des Blocks akzeptiert werden.</typeparam>
      <typeparam name="T3">Gibt den Typ der Daten an, die vom dritten Ziel des Blocks akzeptiert werden.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
      <summary>Initialisiert eine neue <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initialisiert eine neue <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieser <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete">
      <summary>Signalisiert <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />, dass es keine Nachrichten mehr akzeptieren und keine produzieren und keine weiteren zurückgestellten Nachrichten verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Verknüpft den Quellblock mit dem angegebenen Zielblock.</summary>
      <param name="target">Der Zielblock, mit dem die Quelle verbunden werden soll.</param>
      <param name="linkOptions">Ein Objekt, das den Link konfiguriert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="linkOptions" /> ist <see langword="null" />.</exception>
      <returns>Ein verwerfbares Objekt, dass die Verknüpfung der Quelle mit dem Ziel auflöst, wenn die <see cref="M:System.IDisposable.Dispose" />-Methode aufgerufen wird.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Hat zur Folge, dass <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> im Status <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> abgeschlossen wird.</summary>
      <param name="exception">Das <see cref="T:System.Exception" />-Objekt, das den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Boolean@)">
      <summary>Übergibt den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />-Instanz an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle</summary>
      <param name="messageHeader">Die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur der Nachricht, die verarbeitet werden soll</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Struktur, für die die Nachricht verarbeitet werden soll</param>
      <param name="messageConsumed">
        <see langword="true" />, wenn die Nachricht erfolgreich verarbeitet wurde. Andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="target" />-Parameter ist <see langword="null" /> (Nichts in Visual Basic).</exception>
      <returns>Der Wert der verarbeiteten Meldung. Dies kann einer anderen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz entsprechen, die zuvor reserviert war und als <paramref name="messageHeader" /> an diese Methode übergeben wurde. Der nutzende <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> muss den zurückgegebenen Wert anstelle des als <paramref name="messageValue" /> an <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> übergebenen Werts verwenden. Wenn die angeforderte Nachricht nicht verfügbar ist, ist der Rückgabewert <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <summary>Übergibt das Recht, den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle zu übergeben</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der reservierten Meldung</param>
      <param name="target">Die Schnittstelle <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die aktuell die Reservierung enthält</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="target" />-Parameter ist <see langword="null" /> (Nichts in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Das <paramref name="target" /> hatte die Meldung nicht reserviert.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <summary>Behält sich das Recht vor, den Besitz der durch die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur identifizierten Nachricht von dieser <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> an die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Schnittstelle zu übergeben</summary>
      <param name="messageHeader">Die <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Struktur der Nachricht, die reserviert werden soll</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Struktur, für die die Nachricht reserviert werden soll</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="target" />-Parameter ist <see langword="null" /> (Nichts in Visual Basic).</exception>
      <returns>
        <see langword="true" />, wenn die Nachricht erfolgreich reserviert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</summary>
      <returns>Eine Zeichenfolge, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
      <summary>Versucht, ein verfügbares Output-Element von<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="filter">Der Prädikatswert muss erfolgreich übergeben werden, damit er empfangen wird.  <paramref name="filter" /> ist möglicherweise <see langword="null" />, in diesem Fall werden alle Elemente übergeben.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
      <summary>Versucht, alle verfügbaren Elemente aus <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="items">Die von der Quelle empfangenen Elemente.</param>
      <returns>
        <see langword="true" />, wenn ein oder mehrere Elemente empfangen werden konnten; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" /> ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die Aufgabe.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
      <summary>Ruft die Anzahl der Ausgabe-Elementen ab, die von diesem Block empfangen werden können.</summary>
      <returns>Die Anzahl von Ausgabe-Elementen in.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
      <summary>Ruft ein Ziel ab, das verwendet werden kann, um Meldungen des ersten Typs anzubieten.</summary>
      <returns>Das Ziel.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
      <summary>Ruft ein Ziel ab, das verwendet werden kann, um Meldungen des zweiten Typs anzubieten.</summary>
      <returns>Das Ziel.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
      <summary>Ruft ein Ziel ab, das verwendet werden kann, um Meldungen des dritten Typs anzubieten.</summary>
      <returns>Das Ziel.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
      <summary>Stellt einen Datenflussblock bereit, der einen bereitgestellten <see cref="T:System.Func`2" />-Delegaten für jede empfangene Datenelement aufruft.</summary>
      <typeparam name="TInput">Gibt den Datentyp an, der durch dieses <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> empfangen und bearbeitet wird.</typeparam>
      <typeparam name="TOutput">Gibt den Typ der Daten an, die von diesem ausgegeben werden  <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> .</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
      <summary>Initialisiert ein neues <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />-Objekt mit dem angegebenen <see cref="T:System.Func`2" />.</summary>
      <param name="transform">Die Funktion, die für jedes empfangene Datenelement aufzurufen ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialisiert ein neues <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />-Objekt mit den angegebenen <see cref="T:System.Func`2" /> und <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
      <param name="transform">Die Funktion, die für jedes empfangene Datenelement aufzurufen ist.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieses <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />-Objekt zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <summary>Initialisiert eine neue <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> mit dem angegebenen <see cref="T:System.Func`2" />.</summary>
      <param name="transform">Die Funktion, die für jedes empfangene Datenelement aufzurufen ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialisiert ein neues <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />-Objekt mit den angegebenen <see cref="T:System.Func`2" /> und <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
      <param name="transform">Die Funktion, die für jedes empfangene Datenelement aufzurufen ist.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieses <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />-Objekt zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete">
      <summary>Signalisiert <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />, dass es keine Nachrichten mehr akzeptieren und keine produzieren und keine weiteren zurückgestellten Nachrichten verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Verbindet <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</summary>
      <param name="target">Das <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt, das mit dieser Quelle verbunden werden soll.</param>
      <param name="linkOptions">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />-Instanz, die den Link konfiguriert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist NULL (Nothing in Visual Basic), oder <paramref name="linkOptions" /> ist NULL (Nothing in Visual Basic).</exception>
      <returns>Ein IDisposable, der nach dem Aufrufen von Dispose, die Quelle vom Ziel trennt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Hat zur Folge, dass <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> im Status <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> abgeschlossen wird.</summary>
      <param name="exception">Die <see cref="T:System.Exception" />, die den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>Wird von verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> aufgerufen, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> zu akzeptieren und verarbeiten, die zuvor durch dieses <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> angeboten werden.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die verarbeitet wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die die Nachricht verwendet.</param>
      <param name="messageConsumed">
        <see langword="true" />, wenn die Nachricht erfolgreich verarbeitet wurde, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>Der Wert der verarbeiteten Meldung. Dies entspricht möglicherweise einer anderen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz als die zuvor reservierte und die als <paramref name="messageHeader" /> an <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> übergebene. Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> muss den zurückgegebenen Wert benutzen und nicht den Wert, der als <paramref name="messageValue" /> von <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> übergeben wird.  
  
Wenn die Meldung, die angefordert wird, nicht verfügbar ist, ist der Rückgabewert <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> aufgerufen, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> freizugeben, der zuvor von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> reserviert wurde.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der reservierten Meldung, die freigegeben wird.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, der die Nachricht freigibt, die er vorher reserviert hat.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Das <paramref name="target" /> hatte die Meldung nicht reserviert.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> aufgerufen, um ein <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Objekt, das von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />-Objekt zuvor angeboten wurde, zu reservieren.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die reserviert wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> der Meldung empfängt.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>
        <see langword="true" />, wenn die Nachricht erfolgreich reserviert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Bietet eine Meldung für <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> an und gibt dem Ziel die Möglichkeit, die Nachricht zu verarbeiten oder zurückzustellen.</summary>
      <param name="messageHeader">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz, die die Header der Nachricht darstellt, die bereitgestellt wird.</param>
      <param name="messageValue">Der Wert der Nachricht, die bereitgestellt wird.</param>
      <param name="source">Die <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, die die Nachricht anbietet. Dieser Wert kann <see langword="null" /> sein.</param>
      <param name="consumeToAccept">
        <see langword="true" />, wenn das Ziel während des Aufrufs von <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> und vor dem Zurückgeben von <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /><see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> synchron aufrufen muss, um die Meldung zu verarbeiten.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.  
  
oder <paramref name="consumeToAccept" /> kann nur TRUE sein, wenn eine <paramref name="source" /> bereitgestellt wird, die nicht NULL ist.</exception>
      <returns>Der Status der angebotenen Meldung. Wenn die Meldung vom Ziel akzeptiert wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> zurückgegeben, und die Quelle sollte die angebotene Meldung nicht mehr verwenden, da sie jetzt dem Ziel gehört. Wenn die Nachricht vom Ziel zurückgestellt wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> als Benachrichtigung zurückgegeben, dass das Ziel später möglicherweise versucht, die Nachricht zu verarbeiten oder zu reservieren. Zwischenzeitlich besitzt die Quelle die Nachricht weiterhin und bietet sie möglicherweise anderen Blöcke an.  
  
Wenn das Ziel andernfalls eine Aufschiebung veranlasst hätte, die Quelle jedoch <see langword="null" /> war, wird stattdessen <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben.  
  
Wenn das Ziel versucht hat, die Nachricht zu akzeptieren, diese aber verpasst hat, weil die Quelle die die Meldung an ein anderes Ziel übermittelt oder einfach verworfen hat, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> zurückgegeben.  
  
Wenn das Ziel beschlossen hat, die Nachricht nicht zu akzeptieren, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben. Wenn das Ziel beschlossen hat, die Meldung nicht zu akzeptieren und niemals eine weitere Meldung von dieser Quelle akzeptieren wird, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> zurückgegeben.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</summary>
      <returns>Eine Zeichenfolge, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>Versucht, ein verfügbares Output-Element von<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="filter">Der Prädikatswert muss erfolgreich übergeben werden, damit er empfangen wird.  <paramref name="filter" /> ist möglicherweise <see langword="null" />, in diesem Fall werden alle Elemente übergeben.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>Versucht, alle verfügbaren Elemente aus <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="items">Die von der Quelle empfangenen Elemente.</param>
      <returns>
        <see langword="true" />, wenn ein oder mehrere Elemente empfangen werden konnten; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" /> ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die Aufgabe.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
      <summary>Ruft die Anzahl der Eingabeelemente ab, die darauf warten, von diesem Block verarbeitet zu werden.</summary>
      <returns>Die Anzahl von Eingabe-Elementen in.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
      <summary>Ruft die Anzahl der Ausgabe-Elementen ab, die von diesem Block empfangen werden können.</summary>
      <returns>Die Anzahl von Ausgabe-Elementen in.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
      <summary>Stellt einen Datenflussblock bereit, der einen bereitgestellten <see cref="T:System.Func`2" />-Delegaten für jede empfangene Datenelement aufruft.</summary>
      <typeparam name="TInput">Gibt den Datentyp an, der durch dieses <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> empfangen und bearbeitet wird.</typeparam>
      <typeparam name="TOutput">Gibt den Datentyp an, der von dieser <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> ausgegeben wird.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
      <summary>Initialisiert einen neuen <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> mit der angegebenen Funktion.</summary>
      <param name="transform">Die Funktion, die für jedes empfangene Datenelement aufzurufen ist. Alle Daten von dem zurückgegebenen <see cref="T:System.Collections.Generic.IEnumerable`1" /> werden als Ausgabe dieses <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> zur Verfügung gestellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialisiert ein neues <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> mit der angegebenen Funktion und <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
      <param name="transform">Die Funktion, die für jedes empfangene Datenelement aufzurufen ist. Alle Daten von dem zurückgegebenen <see cref="T:System.Collections.Generic.IEnumerable`1" />-Objekt werden als Ausgabe dieses <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />-Objekts zur Verfügung gestellt.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieser <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
      <summary>Initialisiert einen neuen <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> mit der angegebenen Funktion.</summary>
      <param name="transform">Die Funktion, die für jedes empfangene Datenelement aufzurufen ist. Alle Daten, die asynchron in <see cref="T:System.Collections.Generic.IEnumerable`1" /> zurückgegeben werden, werden als Ausgabe aus diesem <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />-Objekt zur Verfügung gestellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialisiert ein neues <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> mit der angegebenen Funktion und <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
      <param name="transform">Die Funktion, die für jedes empfangene Datenelement aufzurufen ist. Alle Daten, die asynchron in <see cref="T:System.Collections.Generic.IEnumerable`1" /> zurückgegeben werden, werden als Ausgabe aus diesem <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />-Objekt zur Verfügung gestellt.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieser <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> ist <see langword="null" />.  
  
- oder - 
<paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete">
      <summary>Signalisiert <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />, dass es keine Nachrichten mehr akzeptieren und keine produzieren und keine weiteren zurückgestellten Nachrichten verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Verbindet <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</summary>
      <param name="target">Das <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt, das mit dieser Quelle verbunden werden soll.</param>
      <param name="linkOptions">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />-Instanz, die den Link konfiguriert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist NULL (Nothing in Visual Basic), oder <paramref name="linkOptions" /> ist NULL (Nothing in Visual Basic).</exception>
      <returns>Ein IDisposable, der nach dem Aufrufen von Dispose, die Quelle vom Ziel trennt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Hat zur Folge, dass <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> im Status <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> abgeschlossen wird.</summary>
      <param name="exception">Die <see cref="T:System.Exception" />, die den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>Wird von verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> aufgerufen, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> zu akzeptieren und verarbeiten, die zuvor durch dieses <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> angeboten werden.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die verarbeitet wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die die Nachricht verwendet.</param>
      <param name="messageConsumed">
        <see langword="true" />, wenn die Nachricht erfolgreich verarbeitet wurde, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>Der Wert der verarbeiteten Meldung. Dies entspricht möglicherweise einer anderen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz als die zuvor reservierte und die als <paramref name="messageHeader" /> an <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> übergebene. Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> muss den zurückgegebenen Wert benutzen und nicht den Wert, der als <paramref name="messageValue" /> von OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> übergeben wird.  
  
Wenn die Meldung, die angefordert wird, nicht verfügbar ist, ist der Rückgabewert <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />, der von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zuvor reserviert wurde, freizugeben.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der reservierten Meldung, die freigegeben wird.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, der die Nachricht freigibt, die er vorher reserviert hat.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Das <paramref name="target" /> hatte die Meldung nicht reserviert.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> aufgerufen, um ein <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Objekt, das von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />-Objekt zuvor angeboten wurde, zu reservieren.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die reserviert wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> der Meldung empfängt.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>
        <see langword="true" />, wenn die Nachricht erfolgreich reserviert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Bietet eine Meldung für <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> an und gibt dem Ziel die Möglichkeit, die Nachricht zu verarbeiten oder zurückzustellen.</summary>
      <param name="messageHeader">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz, die die Header der Nachricht darstellt, die bereitgestellt wird.</param>
      <param name="messageValue">Der Wert der Nachricht, die bereitgestellt wird.</param>
      <param name="source">Die <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, die die Nachricht anbietet. Dieser Wert kann <see langword="null" /> sein.</param>
      <param name="consumeToAccept">
        <see langword="true" />, wenn das Ziel während des Aufrufs von <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> und vor dem Zurückgeben von <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /><see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> synchron aufrufen muss, um die Meldung zu verarbeiten.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.  
  
- oder - 
 <paramref name="consumeToAccept" /> kann nur true sein, wenn eine <paramref name="source" /> bereitgestellt wird, die nicht NULL ist.</exception>
      <returns>Der Status der angebotenen Meldung. Wenn die Meldung vom Ziel akzeptiert wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> zurückgegeben, und die Quelle sollte die angebotene Meldung nicht mehr verwenden, da sie jetzt dem Ziel gehört. Wenn die Nachricht vom Ziel zurückgestellt wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> als Benachrichtigung zurückgegeben, dass das Ziel später möglicherweise versucht, die Nachricht zu verarbeiten oder zu reservieren. Zwischenzeitlich besitzt die Quelle die Nachricht weiterhin und bietet sie möglicherweise anderen Blöcke an.  
  
Wenn das Ziel andernfalls eine Aufschiebung veranlasst hätte, die Quelle jedoch <see langword="null" /> war, wird stattdessen <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben.  
  
Wenn das Ziel versucht hat, die Nachricht zu akzeptieren, diese aber verpasst hat, weil die Quelle die die Meldung an ein anderes Ziel übermittelt oder einfach verworfen hat, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> zurückgegeben.  
  
Wenn das Ziel beschlossen hat, die Nachricht nicht zu akzeptieren, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben. Wenn das Ziel beschlossen hat, die Meldung nicht zu akzeptieren und niemals eine weitere Meldung von dieser Quelle akzeptieren wird, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> zurückgegeben.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</summary>
      <returns>Eine Zeichenfolge, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>Versucht, ein verfügbares Output-Element von<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="filter">Der Prädikatswert muss erfolgreich übergeben werden, damit er empfangen wird.  <paramref name="filter" /> ist möglicherweise <see langword="null" />, in diesem Fall werden alle Elemente übergeben.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>Versucht, alle verfügbaren Elemente aus <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="items">Die von der Quelle empfangenen Elemente.</param>
      <returns>
        <see langword="true" />, wenn ein oder mehrere Elemente empfangen werden konnten; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" /> ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die Aufgabe.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
      <summary>Ruft die Anzahl der Eingabeelemente ab, die darauf warten, von diesem Block verarbeitet zu werden.</summary>
      <returns>Die Anzahl von Eingabe-Elementen in.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
      <summary>Ruft die Anzahl der Ausgabe-Elementen ab, die von diesem Block empfangen werden können.</summary>
      <returns>Die Anzahl von Ausgabe-Elementen in.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
      <summary>Stellt einen Puffer für das Empfangen und Speichern von höchstens einem Element in einem Netzwerk von Datenflussblöcken bereit.</summary>
      <typeparam name="T">Gibt den Typ der Daten, die von diesen Datenflussblock gepuffert werden.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
      <summary>Initialisiert eine neue <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />.</summary>
      <param name="cloningFunction">Die zu verwendende Funktion, um die Daten zu klonen, wenn sie für andere Blöcke bereitgestellt werden.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Initialisiert ein neues <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />-Objekt mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
      <param name="cloningFunction">Die zu verwendende Funktion, um die Daten zu klonen, wenn sie für andere Blöcke bereitgestellt werden.</param>
      <param name="dataflowBlockOptions">Die Optionen, mit denen dieser <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> zu konfigurieren ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete">
      <summary>Signalisiert <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />, dass es keine Nachrichten mehr akzeptieren und keine produzieren und keine weiteren zurückgestellten Nachrichten verarbeiten soll.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Verbindet <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> mit dem angegebenen <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt.</summary>
      <param name="target">Das <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />-Objekt, das mit dieser Quelle verbunden werden soll.</param>
      <param name="linkOptions">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />-Instanz, die den Link konfiguriert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist NULL (Nothing in Visual Basic), oder <paramref name="linkOptions" /> ist NULL (Nothing in Visual Basic).</exception>
      <returns>Ein IDisposable, der nach dem Aufrufen von Dispose, die Quelle vom Ziel trennt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Bewirkt, <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> in einem <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> Zustand auszuführen.</summary>
      <param name="exception">Das <see cref="T:System.Exception" />-Objekt, das den Fehler verursacht hat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Versucht, alle verfügbaren Elemente aus <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="items">Die von der Quelle empfangenen Elemente.</param>
      <returns>
        <see langword="true" />, wenn ein oder mehrere Elemente empfangen werden konnten; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Wird von verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> aufgerufen, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> zu akzeptieren und verarbeiten, die zuvor durch dieses <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> angeboten werden.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die verarbeitet wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, die die Nachricht verwendet.</param>
      <param name="messageConsumed">
        <see langword="true" />, wenn die Nachricht erfolgreich verarbeitet wurde, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>Der Wert der verarbeiteten Meldung. Dies entspricht möglicherweise einer anderen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz als die zuvor reservierte und die als <paramref name="messageHeader" /> an <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> übergebene. Der <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> muss den zurückgegebenen Wert benutzen und nicht den Wert, der als <paramref name="messageValue" /> von <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> übergeben wird.  
  
Wenn die Meldung, die angefordert wird, nicht verfügbar ist, ist der Rückgabewert <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />, der von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zuvor reserviert wurde, freizugeben.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der reservierten Meldung, die freigegeben wird.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, der die Nachricht freigibt, die er vorher reserviert hat.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Das <paramref name="target" /> hatte die Meldung nicht reserviert.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Wird von einem verknüpften <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, um einen <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />, der von diesem <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> zuvor angeboten wurde, zu reservieren.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> der Meldung, die reserviert wird.</param>
      <param name="target">Die <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> der Meldung empfängt.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="messageHeader" /> ist ungültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> ist <see langword="null" />.</exception>
      <returns>
        <see langword="true" />, wenn die Nachricht erfolgreich reserviert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Bietet eine Meldung für <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> an und gibt dem Ziel die Möglichkeit, die Nachricht zu verarbeiten oder zurückzustellen.</summary>
      <param name="messageHeader">Eine <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />-Instanz, die die Header der Nachricht darstellt, die bereitgestellt wird.</param>
      <param name="messageValue">Der Wert der Nachricht, die bereitgestellt wird.</param>
      <param name="source">Die <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, die die Nachricht anbietet. Dieser Wert kann <see langword="null" /> sein.</param>
      <param name="consumeToAccept">Auf <see langword="true" /> festlegen, um das Ziel anzuweisen, <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> während des Aufrufs von <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /><see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> synchron aufzurufen, um die Meldung zu verarbeiten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> ist ungültig.  
  
oder <paramref name="consumeToAccept" /> kann nur TRUE sein, wenn eine <paramref name="source" /> bereitgestellt wird, die nicht NULL ist.</exception>
      <returns>Der Status der angebotenen Meldung. Wenn die Meldung vom Ziel akzeptiert wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> zurückgegeben, und die Quelle sollte die angebotene Meldung nicht mehr verwenden, da sie jetzt dem Ziel gehört. Wenn die Nachricht vom Ziel zurückgestellt wurde, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> als Benachrichtigung zurückgegeben, dass das Ziel später möglicherweise versucht, die Nachricht zu verarbeiten oder zu reservieren. Zwischenzeitlich besitzt die Quelle die Nachricht weiterhin und bietet sie möglicherweise anderen Blöcke an.  
  
Wenn das Ziel andernfalls die Meldung zurückgestellt hätte, aber <paramref name="source" /> gleich <see langword="null" /> war, wird stattdessen <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben.  
  
Wenn das Ziel versucht hat, die Nachricht zu akzeptieren, diese aber verpasst hat, weil die Quelle die die Meldung an ein anderes Ziel übermittelt oder einfach verworfen hat, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> zurückgegeben.  
  
Wenn das Ziel beschlossen hat, die Nachricht nicht zu akzeptieren, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> zurückgegeben. Wenn das Ziel beschlossen hat, die Meldung nicht zu akzeptieren und niemals eine weitere Meldung von dieser Quelle akzeptieren wird, wird <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> zurückgegeben.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</summary>
      <returns>Eine Zeichenfolge, die den formatierten Namen dieser <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />-Instanz darstellt.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Versucht, ein verfügbares Output-Element von<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> synchron zu empfangen.</summary>
      <param name="filter">Der Prädikatswert muss erfolgreich übergeben werden, damit er empfangen wird.  <paramref name="filter" /> ist möglicherweise <see langword="null" />, in diesem Fall werden alle Elemente übergeben.</param>
      <param name="item">Das von der Quelle empfangene Element.</param>
      <returns>
        <see langword="true" />, wenn ein Element empfangen werden konnte; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion">
      <summary>Ruft ein <see cref="T:System.Threading.Tasks.Task" /> ab, das den asynchronen Vorgang und die Beendigung des Datenflussblocks darstellt.</summary>
      <returns>Die Aufgabe.</returns>
    </member>
  </members>
</doc>
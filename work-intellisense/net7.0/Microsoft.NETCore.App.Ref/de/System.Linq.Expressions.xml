<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Expressions</name>
  </assembly>
  <members>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>Stellt den dynamischen Binärvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.BinaryOperationBinder" />-Klasse.</summary>
      <param name="operation">Die Art des binären Vorgangs.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen binären Vorgangs aus.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des binären dynamischen Vorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen binären Vorgangs.</param>
      <param name="arg">Der rechte Operand des dynamischen binären Vorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des binären dynamischen Vorgangs aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen binären Vorgangs.</param>
      <param name="arg">Der rechte Operand des dynamischen binären Vorgangs.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das Ergebnis der Bindung, andernfalls NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>Die Art des binären Vorgangs.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.ExpressionType" />-Objekt, das die Art des binären Vorgangs darstellt.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Der Ergebnistyp des Vorgangs.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>Stellt einen Satz von Bindungseinschränkungen für das <see cref="T:System.Dynamic.DynamicMetaObject" /> dar, gemäß denen die dynamische Bindung gültig ist.</summary>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>Stellt einen leeren Satz von Bindungseinschränkungen dar. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>Kombiniert Bindungseinschränkungen aus der Liste von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen in einem Einschränkungssatz.</summary>
      <param name="contributingObjects">Die Liste der <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen, aus der Einschränkungen kombiniert werden sollen.</param>
      <returns>Der neue Satz von Bindungseinschränkungen.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>Erstellt die Bindungseinschränkung, die den Ausdruck auf beliebige unveränderliche Eigenschaften überprüft.</summary>
      <param name="expression">Der Ausdruck, der die Einschränkungen darstellt.</param>
      <returns>Die neuen Bindungseinschränkungen.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>Erstellt die Bindungseinschränkung, die den Ausdruck auf Objektinstanzidentität überprüft.</summary>
      <param name="expression">Der zu testende Ausdruck.</param>
      <param name="instance">Die genaue zu testende Objektinstanz.</param>
      <returns>Die neuen Bindungseinschränkungen.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt die Bindungseinschränkung, die den Ausdruck auf Laufzeittypidentität überprüft.</summary>
      <param name="expression">Der zu testende Ausdruck.</param>
      <param name="type">Der genaue zu testende Typ.</param>
      <returns>Die neuen Bindungseinschränkungen.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>Führt den Satz von Bindungseinschränkungen mit den aktuellen Bindungseinschränkungen zusammen.</summary>
      <param name="restrictions">Der Satz von Bindungseinschränkungen, der mit den aktuellen Bindungseinschränkungen zusammengeführt werden soll.</param>
      <returns>Der neue Satz von Bindungseinschränkungen.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>Erstellt die <see cref="T:System.Linq.Expressions.Expression" />, die die Bindungseinschränkungen darstellt.</summary>
      <returns>Die Ausdrucksbaumstruktur, die die Einschränkungen darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>Beschreibt die Argumente des dynamischen Bindungsvorgangs.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Erstellt eine neue CallInfo, die Argumente im dynamischen Bindungsprozess darstellt.</summary>
      <param name="argCount">Die Anzahl der Argumente.</param>
      <param name="argNames">Die Argumentnamen.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>Erstellt ein neues <c>PositionalArgumentInfo</c>-Objekt.</summary>
      <param name="argCount">Die Anzahl der Argumente.</param>
      <param name="argNames">Die Argumentnamen.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>Bestimmt, ob die angegebene CallInfo-Instanz als gleich zur aktuellen Instanz betrachtet wird.</summary>
      <param name="obj">Die Instanz von <see cref="T:System.Dynamic.CallInfo" />, die mit der aktuellen Instanz verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Instanz gleich der aktuellen Instanz ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>Fungiert als Hashfunktion für die aktuelle <see cref="T:System.Dynamic.CallInfo" />.</summary>
      <returns>Ein Hashcode für die aktuelle <see cref="T:System.Dynamic.CallInfo" />.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>Die Anzahl der Argumente.</summary>
      <returns>Die Anzahl der Argumente.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>Die Argumentnamen.</summary>
      <returns>Die schreibgeschützte Auflistung der Argumentnamen.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>Stellt den dynamischen Konvertierungsvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>Initialisiert eine neue Instanz des <see cref="T:System.Dynamic.ConvertBinder" />.</summary>
      <param name="type">Der Typ, in den konvertiert werden soll.</param>
      <param name="explicit">Ist true, wenn bei der Konvertierung explizite Konvertierungen berücksichtigt werden sollen, andernfalls false.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Konvertierungsvorgangs aus.</summary>
      <param name="target">Das Ziel des dynamischen Konvertierungsvorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Konvertierungsvorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Konvertierungsvorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen Konvertierungsvorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Konvertierungsvorgangs aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen Konvertierungsvorgangs.</param>
      <param name="errorSuggestion">Das zu verwendende Bindungsergebnis, wenn die Bindung misslingt, oder NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>Ruft den Wert ab, der angibt, ob bei der Konvertierung explizite Konvertierungen berücksichtigt werden sollen.</summary>
      <returns>
        <see langword="true" /> , wenn eine explizite Konvertierung vorliegt. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>Der Typ, in den konvertiert werden soll.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Typ darstellt, in den die Konvertierung erfolgen soll.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>Stellt den dynamischen Erstellungsvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz des <see cref="T:System.Dynamic.CreateInstanceBinder" />.</summary>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Erstellungsvorgangs aus.</summary>
      <param name="target">Das Ziel des dynamischen Erstellungsvorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Erstellungsvorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Erstellungsvorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen Erstellungsvorgangs.</param>
      <param name="args">Die Argumente des dynamischen Erstellungsvorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Erstellungsvorgangs aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen Erstellungsvorgangs.</param>
      <param name="args">Die Argumente des dynamischen Erstellungsvorgangs.</param>
      <param name="errorSuggestion">Das zu verwendende Bindungsergebnis, wenn die Bindung misslingt, oder NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>Stellt den dynamischen Indexlöschvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz des <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen des Index aus.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Indizes.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Löschen von Indizes.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen von Indizes aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Löschen von Indizes.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Löschen des Index aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Löschen von Indizes.</param>
      <param name="errorSuggestion">Das zu verwendende Bindungsergebnis, wenn die Bindung misslingt, oder NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>Stellt den dynamischen Memberlöschvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initialisiert eine neue Instanz des <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="name">Der Name des zu löschenden Members.</param>
      <param name="ignoreCase">Ist true, wenn der Vergleich des Namens ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen des Members aus.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Membern.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Löschen von Membern.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen von Membern aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Membern.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Löschen des Members aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Membern.</param>
      <param name="errorSuggestion">Das zu verwendende Bindungsergebnis, wenn die Bindung misslingt, oder NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>Ruft den Wert ab, der angibt, ob die Groß-/Kleinschreibung des Membernamens beim Zeichenfolgenvergleich ignoriert werden soll.</summary>
      <returns>
        <see langword="true" /> , wenn beim Zeichen folgen Vergleich Case ignoriert werden soll. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>Ruft den Namen des zu löschenden Members ab.</summary>
      <returns>Der Name des zu löschenden Members.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>Stellt die dynamische Bindung und eine Bindungslogik eines an der dynamischen Bindung beteiligten Objekts dar.</summary>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>Stellt ein leeres Array vom <see cref="T:System.Dynamic.DynamicMetaObject" />-Typ dar. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.DynamicMetaObject" />-Klasse.</summary>
      <param name="expression">Der Ausdruck, der dieses <see cref="T:System.Dynamic.DynamicMetaObject" /> während des dynamischen Bindungsvorgangs darstellt.</param>
      <param name="restrictions">Die Bindungseinschränkungen, entsprechend denen die Bindung gültig ist.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.DynamicMetaObject" />-Klasse.</summary>
      <param name="expression">Der Ausdruck, der dieses <see cref="T:System.Dynamic.DynamicMetaObject" /> während des dynamischen Bindungsvorgangs darstellt.</param>
      <param name="restrictions">Die Bindungseinschränkungen, entsprechend denen die Bindung gültig ist.</param>
      <param name="value">Der vom <see cref="T:System.Dynamic.DynamicMetaObject" /> dargestellte Laufzeitwert.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen binären Vorgangs aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.BinaryOperationBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="arg">Eine Instanz des <see cref="T:System.Dynamic.DynamicMetaObject" />, die die rechte Seite des binären Vorgangs darstellt.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>Führt die Bindung des dynamischen Konvertierungsvorgangs aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.ConvertBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Erstellen einer Instanz aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.CreateInstanceBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="args">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen - Argumente zum Vorgang zum Erstellen von Instanzen.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen des Index aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.DeleteIndexBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="indexes">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen - Indizes für den Vorgang zum Löschen von Indizes.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen des Members aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.DeleteMemberBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen des Index aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.GetIndexBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="indexes">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen - Indizes für den Vorgang zum Abrufen von Indizes.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen des Members aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.GetMemberBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Aufrufvorgangs aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.InvokeBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="args">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen - Argumente für den Aufrufvorgang.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Aufrufen des Members aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.InvokeMemberBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="args">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen, die Argumente für den Aufrufmembervorgang darstellen.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen des Index aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.SetIndexBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="indexes">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen - Indizes für den Vorgang zum Festlegen von Indizes.</param>
      <param name="value">Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das den Wert für den Vorgang zum Festlegen des Index darstellt.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen des Members aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.SetMemberBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="value">Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das den Wert für den Vorgang zum Festlegen des Members darstellt.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>Führt die Bindung des dynamischen unären Vorgangs aus.</summary>
      <param name="binder">Eine Instanz des <see cref="T:System.Dynamic.UnaryOperationBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein Metaobjekt für das angegebene Objekt.</summary>
      <param name="value">Das Objekt, für das ein Metaobjekt abgerufen werden soll.</param>
      <param name="expression">Der Ausdruck, der dieses <see cref="T:System.Dynamic.DynamicMetaObject" /> während des dynamischen Bindungsvorgangs darstellt.</param>
      <returns>Wenn das angegebene Objekt <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> implementiert und kein Remoteobjekt außerhalb der aktuellen AppDomain ist, wird das von <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> zurückgegebene spezifische Metaobjekt des Objekts zurückgegeben. Andernfalls wird ein einfaches neues Metaobjekt ohne Einschränkungen erstellt und zurückgegeben.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>Gibt die Enumeration aller dynamischen Membernamen zurück.</summary>
      <returns>Die Liste der dynamischen Membernamen.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>Der Ausdruck, der das <see cref="T:System.Dynamic.DynamicMetaObject" /> während des dynamischen Bindungsvorgangs darstellt.</summary>
      <returns>Der Ausdruck, der das <see cref="T:System.Dynamic.DynamicMetaObject" /> während des dynamischen Bindungsvorgangs darstellt.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Dynamic.DynamicMetaObject" /> den Laufzeitwert aufweist.</summary>
      <returns>
        <see langword="true" /> , wenn die <see cref="T:System.Dynamic.DynamicMetaObject" /> den Lauf Zeitwert aufweist, andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>Ruft den Limittyp des <see cref="T:System.Dynamic.DynamicMetaObject" /> ab.</summary>
      <returns>
        <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />, wenn der Laufzeitwert verfügbar ist, andernfalls ein Typ der <see cref="P:System.Dynamic.DynamicMetaObject.Expression" />.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>Die Bindungseinschränkungen, entsprechend denen die Bindung gültig ist.</summary>
      <returns>Der Satz von Bindungseinschränkungen.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>Ruft den <see cref="T:System.Type" /> des Laufzeitwerts ab oder NULL, wenn dem <see cref="T:System.Dynamic.DynamicMetaObject" /> kein Wert zugeordnet ist.</summary>
      <returns>Der <see cref="T:System.Type" /> des Laufzeitwerts oder NULL.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>Der von diesem <see cref="T:System.Dynamic.DynamicMetaObject" /> dargestellte Laufzeitwert.</summary>
      <returns>Der von diesem <see cref="T:System.Dynamic.DynamicMetaObject" /> dargestellte Laufzeitwert.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>Der dynamische Aufrufsitebinder, der am <see cref="T:System.Dynamic.DynamicMetaObject" />-Bindungsprotokoll beteiligt ist.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.DynamicMetaObjectBinder" />-Klasse.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs aus.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Führt die Laufzeitbindung des dynamischen Vorgangs für einen Satz von Argumenten aus.</summary>
      <param name="args">Ein Array von Argumenten für den dynamischen Vorgang.</param>
      <param name="parameters">Das Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Instanzen, die die Parameter der Aufrufsite im Bindungsprozess darstellen.</param>
      <param name="returnLabel">Ein LabelTarget, mit dem das Ergebnis der dynamischen Bindung zurückgegeben wird.</param>
      <returns>Ein Ausdruck, der Tests für die Argumente des dynamischen Vorgangs ausführt und den dynamischen Vorgang ausführt, wenn die Testergebnisse gültig sind. Wenn die Tests bei nachfolgenden Instanzen des dynamischen Vorgangs fehlschlagen, wird erneut Bind aufgerufen, um eine neue <see cref="T:System.Linq.Expressions.Expression" /> für die neuen Argumenttypen zu erstellen.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Verzögert die Bindung des Vorgangs bis zu einem späteren Zeitpunkt, wenn die Laufzeitwerte aller Argumente des dynamischen Vorgangs berechnet wurden.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>Verzögert die Bindung des Vorgangs bis zu einem späteren Zeitpunkt, wenn die Laufzeitwerte aller Argumente des dynamischen Vorgangs berechnet wurden.</summary>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>Ruft einen Ausdruck ab, der dazu führt, dass die Bindung aktualisiert wird. Dieser gibt an, dass die Bindung des Ausdrucks nicht mehr gültig ist. Dies wird in der Regel verwendet, wenn die „Version“ eines dynamischen Objekts geändert wurde.</summary>
      <param name="type">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft des resultierenden Ausdrucks; es sind alle Typen zulässig.</param>
      <returns>Der Aktualisierungsausdruck.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>Stellt eine Basisklasse zum Angeben von dynamischem Verhalten zur Laufzeit bereit. Diese Klasse muss vererbt werden und kann nicht direkt instanziiert werden.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>Ermöglicht es abgeleiteten Typen, eine neue Instanz des <see cref="T:System.Dynamic.DynamicObject" />-Typs zu initialisieren.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>Gibt die Enumeration aller dynamischen Membernamen zurück.</summary>
      <returns>Eine Sequenz, die dynamische Membernamen enthält.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Stellt ein <see cref="T:System.Dynamic.DynamicMetaObject" /> bereit, das an die dynamischen virtuellen Methoden sendet. Das Objekt kann in einem anderen <see cref="T:System.Dynamic.DynamicMetaObject" /> gekapselt werden, um benutzerdefiniertes Verhalten für einzelne Aktionen bereitzustellen. Diese Methode unterstützt die Dynamic Language Runtime-Infrastruktur für Sprachimplementierungen und ist nicht für die direkte Verwendung im Code vorgesehen.</summary>
      <param name="parameter">Der Ausdruck, der das an die dynamischen virtuellen Methoden zu sendende <see cref="T:System.Dynamic.DynamicMetaObject" /> darstellt.</param>
      <returns>Ein Objekt des <see cref="T:System.Dynamic.DynamicMetaObject" />-Typs.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>Stellt die Implementierung für binäre Operationen bereit. Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Operationen wie Addition oder Multiplikation anzugeben.</summary>
      <param name="binder">Stellt Informationen zur binären Operation bereit. Die <c>binder.Operation</c>-Eigenschaft gibt ein <see cref="T:System.Linq.Expressions.ExpressionType" />-Objekt zurück. Für die Anweisung <c>sum = first + second</c>, bei der <c>first</c> und <c>second</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurden, gibt <c>binder.Operation</c> beispielsweise <c>ExpressionType.Add</c> zurück.</param>
      <param name="arg">Der rechte Operand für die binäre Operation. Für die Anweisung <c>sum = first + second</c>, bei der <c>first</c> und <c>second</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurden, ist <paramref name="arg" /> beispielsweise gleich <c>second</c>.</param>
      <param name="result">Das Ergebnis der binären Operation.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>Stellt die Implementierung für Typkonvertierungsvorgänge bereit. Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Operationen anzugeben, die ein Objekt von einem Typ in einen anderen konvertieren.</summary>
      <param name="binder">Stellt Informationen zur Konvertierungsoperation bereit. Die <c>binder.Type</c>-Eigenschaft stellt den Typ bereit, in den das Objekt konvertiert werden muss. Für die Anweisung <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Type</c> beispielsweise den <see cref="T:System.String" />-Typ zurück. Die <c>binder.Explicit</c>-Eigenschaft stellt Informationen zur Art der ausgeführten Konvertierung bereit. Für die explizite Konvertierung wird <see langword="true" /> und für die implizite Konvertierung wird <see langword="false" /> zurückgegeben.</param>
      <param name="result">Das Ergebnis des Typkonvertierungsvorgangs.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die eine neue Instanz eines dynamischen Objekts initialisieren. Diese Methode ist nicht zur Verwendung in C# oder Visual Basic vorgesehen.</summary>
      <param name="binder">Stellt Informationen zum Initialisierungsvorgang bereit.</param>
      <param name="args">Die Argumente, die während der Initialisierung an das Objekt übergeben werden. Für den Vorgang <c>new SampleType(100)</c>, bei dem <c>SampleType</c> der Typ ist, der von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>args[0]</c> beispielsweise gleich 100.</param>
      <param name="result">Das Ergebnis der Initialisierung.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>Stellt die Implementierung für Vorgänge bereit, die ein Objekt nach Index löschen. Diese Methode ist nicht zur Verwendung in C# oder Visual Basic vorgesehen.</summary>
      <param name="binder">Stellt Informationen zum Löschen bereit.</param>
      <param name="indexes">Die zu löschenden Indizes.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die einen Objektmember löschen. Diese Methode ist nicht zur Verwendung in C# oder Visual Basic vorgesehen.</summary>
      <param name="binder">Stellt Informationen zum Löschen bereit.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die einen Wert nach Index abrufen. Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Indexvorgänge anzugeben.</summary>
      <param name="binder">Stellt Informationen zum Vorgang bereit.</param>
      <param name="indexes">Die Indizes, die bei dem Vorgang verwendet werden. Für den Vorgang <c>sampleObject[3]</c> in C# (<c>sampleObject(3)</c> in Visual Basic), bei dem <c>sampleObject</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurde, ist <c>indexes[0]</c> beispielsweise gleich 3.</param>
      <param name="result">Das Ergebnis des Indexvorgangs.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die Memberwerte abrufen. Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Abrufen eines Werts für eine Eigenschaft anzugeben.</summary>
      <param name="binder">Stellt Informationen zum Objekt bereit, das den dynamischen Vorgang aufgerufen hat. Die <c>binder.Name</c>-Eigenschaft gibt den Namen des Members an, für den der dynamische Vorgang ausgeführt wird. Für die Anweisung <c>Console.WriteLine(sampleObject.SampleProperty)</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Name</c> beispielsweise „SampleProperty“ zurück. Die <c>binder.IgnoreCase</c>-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</param>
      <param name="result">Das Ergebnis des get-Vorgangs. Wenn die Methode z. B. für eine Eigenschaft aufgerufen wird, können Sie <paramref name="result" /> den Eigenschaftswert zuweisen.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die ein Objekt aufrufen. Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Aufrufen eines Objekts oder Delegaten anzugeben.</summary>
      <param name="binder">Stellt Informationen zum Aufrufvorgang bereit.</param>
      <param name="args">Die Argumente, die während des Aufrufvorgangs an das Objekt übergeben werden. Für den Vorgang <c>sampleObject(100)</c>, bei dem <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>args[0]</c> beispielsweise gleich 100.</param>
      <param name="result">Das Ergebnis des Objektaufrufs.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die einen Member aufrufen. Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Aufrufen einer Methode anzugeben.</summary>
      <param name="binder">Stellt Informationen zum dynamischen Vorgang bereit. Die <c>binder.Name</c>-Eigenschaft gibt den Namen des Members an, für den der dynamische Vorgang ausgeführt wird. Für die Anweisung <c>sampleObject.SampleMethod(100)</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Name</c> beispielsweise „SampleMethod“ zurück. Die <c>binder.IgnoreCase</c>-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</param>
      <param name="args">Die Argumente, die während des Aufrufvorgangs an den Objektmember übergeben werden. Für die Anweisung <c>sampleObject.SampleMethod(100)</c>, bei der <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>args[0]</c> beispielsweise gleich 100.</param>
      <param name="result">Das Ergebnis des Memberaufrufs.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die einen Wert nach Index festlegen. Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge anzugeben, die auf Objekte mit einem angegebenen Index zugreifen.</summary>
      <param name="binder">Stellt Informationen zum Vorgang bereit.</param>
      <param name="indexes">Die Indizes, die bei dem Vorgang verwendet werden. Für den Vorgang <c>sampleObject[3] = 10</c> in C# (<c>sampleObject(3) = 10</c> in Visual Basic), bei dem <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <c>indexes[0]</c> beispielsweise gleich 3.</param>
      <param name="value">Der Wert, der auf das Objekt mit dem angegebenen Index festgelegt werden soll. Für den Vorgang <c>sampleObject[3] = 10</c> in C# (<c>sampleObject(3) = 10</c> in Visual Basic), bei dem <c>sampleObject</c> von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <paramref name="value" /> beispielsweise gleich 10.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die Memberwerte festlegen. Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Festlegen eines Werts für eine Eigenschaft anzugeben.</summary>
      <param name="binder">Stellt Informationen zum Objekt bereit, das den dynamischen Vorgang aufgerufen hat. Die <c>binder.Name</c>-Eigenschaft gibt den Namen des Members an, dem der Wert zugewiesen wird. Für die Anweisung <c>sampleObject.SampleProperty = "Test"</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Name</c> beispielsweise „SampleProperty“ zurück. Die <c>binder.IgnoreCase</c>-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</param>
      <param name="value">Der Wert, der auf den Member festgelegt werden soll. Für die Anweisung <c>sampleObject.SampleProperty = "Test"</c>, bei der <c>sampleObject</c> eine Instanz der Klasse ist, die von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wurde, ist <paramref name="value" />beispielsweise „Test“.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>Stellt die Implementierung für unäre Operationen bereit. Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie Negation, Inkrement oder Dekrement anzugeben.</summary>
      <param name="binder">Stellt Informationen zur unären Operation bereit. Die <c>binder.Operation</c>-Eigenschaft gibt ein <see cref="T:System.Linq.Expressions.ExpressionType" />-Objekt zurück. Für die Anweisung <c>negativeNumber = -number</c>, bei der <c>number</c> von der <see langword="DynamicObject" />-Klasse abgeleitet wurde, gibt <c>binder.Operation</c> „Negate“ zurück.</param>
      <param name="result">Das Ergebnis der unären Operation.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />. Wenn die Methode <see langword="false" /> zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt. (In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>Stellt ein Objekt dar, dessen Member dynamisch zur Laufzeit hinzugefügt und entfernt werden können.</summary>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Tritt ein, wenn sich ein Eigenschaftswert ändert.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>Initialisiert ein neues <see langword="ExpandoObject" /> ohne Member.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Das bereitgestellte MetaObject wird an die dynamischen virtuellen Methoden verteilt. Das Objekt kann in einem anderen MetaObject gekapselt werden, um benutzerdefiniertes Verhalten für einzelne Aktionen bereitzustellen.</summary>
      <param name="parameter">Der Ausdruck, der das an die dynamischen virtuellen Methoden zu verteilende MetaObject darstellt.</param>
      <returns>Das Objekt des <see cref="T:System.Dynamic.DynamicMetaObject" />-Typs.</returns>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>Stellt den dynamischen Indexabrufvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz des <see cref="T:System.Dynamic.GetIndexBinder" />.</summary>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen des Index aus.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Indizes.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Abrufen des Index.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen von Indizes aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Abrufen von Indizes.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Abrufen des Index aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Abrufen von Indizes.</param>
      <param name="errorSuggestion">Das zu verwendende Bindungsergebnis, wenn die Bindung misslingt, oder NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>Stellt den dynamischen Memberabrufvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initialisiert eine neue Instanz des <see cref="T:System.Dynamic.GetMemberBinder" />.</summary>
      <param name="name">Der Name des abzurufenden Members.</param>
      <param name="ignoreCase">Ist true, wenn der Vergleich des Namens ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen des Members aus.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Membern.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Abrufen des Members.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen von Membern aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Membern.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Abrufen des Members aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Membern.</param>
      <param name="errorSuggestion">Das zu verwendende Bindungsergebnis, wenn die Bindung misslingt, oder NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>Ruft den Wert ab, der angibt, ob die Groß-/Kleinschreibung des Membernamens beim Zeichenfolgenvergleich ignoriert werden soll.</summary>
      <returns>
        <see langword="true" /> , wenn der Fall ignoriert wird. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>Ruft den Namen des abzurufenden Members ab.</summary>
      <returns>Der Name des abzurufenden Members.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>Stellt ein dynamisches Objekt dar, dessen Vorgänge zur Laufzeit gebunden werden können.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Gibt das <see cref="T:System.Dynamic.DynamicMetaObject" /> zurück, das für Bindungsvorgänge bei diesem Objekt zuständig ist.</summary>
      <param name="parameter">Die Ausdrucksbaumstrukturdarstellung des Laufzeitwerts.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" /> zum Binden dieses Objekts.</returns>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>Stellt Informationen zu einem dynamischen Vorgang zum Abrufen von Membern bereit, die angeben, ob get member Eigenschaften aufrufen soll, wenn der GET-Vorgang ausgeführt wird.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>Ruft den Wert ab, der angibt, ober dieser Vorgang zum Abrufen von Membern Eigenschaften aufrufen soll, wenn der GET-Vorgang ausgeführt wird. Wenn diese Schnittstelle nicht vorhanden ist, lautet der Standardwert true.</summary>
      <returns>
        <see langword="true" /> , wenn dieser Vorgang zum Abrufen von Membern Eigenschaften aufrufen soll, wenn der Get-Vorgang durchgeführt wird. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>Stellt den dynamischen Aufrufvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz des <see cref="T:System.Dynamic.InvokeBinder" />.</summary>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Aufrufvorgangs aus.</summary>
      <param name="target">Das Ziel des dynamischen Aufrufvorgangs.</param>
      <param name="args">Ein Array mit den Argumenten des dynamischen Aufrufvorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Aufrufvorgangs aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen Aufrufvorgangs.</param>
      <param name="args">Die Argumente des dynamischen Aufrufvorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Aufrufvorgangs aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen Aufrufvorgangs.</param>
      <param name="args">Die Argumente des dynamischen Aufrufvorgangs.</param>
      <param name="errorSuggestion">Das zu verwendende Bindungsergebnis, wenn die Bindung misslingt, oder NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>Stellt den dynamischen Memberaufrufvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz des <see cref="T:System.Dynamic.InvokeMemberBinder" />.</summary>
      <param name="name">Der Name des aufzurufenden Members.</param>
      <param name="ignoreCase">True, wenn der Vergleich des Namens ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Aufrufen des Members aus.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Aufrufen von Membern.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Aufrufen von Membern.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Aufrufvorgangs aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen Aufrufvorgangs.</param>
      <param name="args">Die Argumente des dynamischen Aufrufvorgangs.</param>
      <param name="errorSuggestion">Das zu verwendende Bindungsergebnis, wenn die Bindung misslingt, oder NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Aufrufen von Membern aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Aufrufen von Membern.</param>
      <param name="args">Die Argumente des dynamischen Vorgangs zum Aufrufen von Membern.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Aufrufen des Members aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Aufrufen von Membern.</param>
      <param name="args">Die Argumente des dynamischen Vorgangs zum Aufrufen von Membern.</param>
      <param name="errorSuggestion">Das zu verwendende Bindungsergebnis, wenn die Bindung misslingt, oder NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>Ruft den Wert ab, der angibt, ob die Groß-/Kleinschreibung des Membernamens beim Zeichenfolgenvergleich ignoriert werden soll.</summary>
      <returns>
        <see langword="true" /> , wenn der Fall ignoriert wird. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>Ruft den Namen des aufzurufenden Members ab.</summary>
      <returns>Der Name des aufzurufenden Members.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>Stellt den dynamischen Indexfestlegungsvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz des <see cref="T:System.Dynamic.SetIndexBinder" />.</summary>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen des Index aus.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Indizes.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Festlegen des Index.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen von Indizes aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Festlegen von Indizes.</param>
      <param name="value">Der Wert, der auf die Auflistung festgelegt werden soll.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Festlegen des Index aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Festlegen von Indizes.</param>
      <param name="value">Der Wert, der auf die Auflistung festgelegt werden soll.</param>
      <param name="errorSuggestion">Das zu verwendende Bindungsergebnis, wenn die Bindung misslingt, oder NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>Stellt den dynamischen Memberfestlegungsvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initialisiert eine neue Instanz des <see cref="T:System.Dynamic.SetMemberBinder" />.</summary>
      <param name="name">Der Name des abzurufenden Members.</param>
      <param name="ignoreCase">Ist true, wenn der Vergleich des Namens ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen des Members aus.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Membern.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Festlegen des Members.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen von Membern aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Membern.</param>
      <param name="value">Der Wert, der auf den Member festgelegt werden soll.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen von Membern aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Membern.</param>
      <param name="value">Der Wert, der auf den Member festgelegt werden soll.</param>
      <param name="errorSuggestion">Das zu verwendende Bindungsergebnis, wenn die Bindung misslingt, oder NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>Ruft den Wert ab, der angibt, ob die Groß-/Kleinschreibung des Membernamens beim Zeichenfolgenvergleich ignoriert werden soll.</summary>
      <returns>
        <see langword="true" /> , wenn der Fall ignoriert wird. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>Ruft den Namen des abzurufenden Members ab.</summary>
      <returns>Der Name des abzurufenden Members.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>Stellt den dynamischen Unärvorgang an der Aufrufsite dar und gibt die Bindungssemantik und die Vorgangsdetails an.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.BinaryOperationBinder" />-Klasse.</summary>
      <param name="operation">Die Art des unären Vorgangs.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen unären Vorgangs aus.</summary>
      <param name="target">Das Ziel des dynamischen Vorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des unären dynamischen Vorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen unären Vorgangs.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des unären dynamischen Vorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <param name="target">Das Ziel des dynamischen unären Vorgangs.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das Ergebnis der Bindung, andernfalls NULL.</param>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das dem Ergebnis der Bindung entspricht.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>Die Art des unären Vorgangs.</summary>
      <returns>Das Objekt des <see cref="T:System.Linq.Expressions.ExpressionType" />, das die Art des unären Vorgangs darstellt.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>Stellt einen Ausdruck mit einem binären Operator dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>Reduziert auf den binären Ausdrucksknoten auf einen einfacheren Ausdruck.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="left">Die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft des Ergebnisses.</param>
      <param name="conversion">Die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft des Ergebnisses.</param>
      <param name="right">Die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>Ruft einen Wert ab, der angibt, ob der Knoten der Ausdrucksbaumstruktur reduziert werden kann.</summary>
      <returns>
        <see langword="true" /> , wenn der Knoten der Ausdrucks Baumstruktur reduziert werden kann. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>Ruft die Typkonvertierungsfunktion ab, die von einer zusammenfügenden oder zusammengesetzten Zuweisungsoperation verwendet wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, die eine Typkonvertierungsfunktion darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>Ruft einen Wert ab, der angibt, ob der Ausdrucksstrukturknoten einen transformierten lifted-Aufruf eines Operators darstellt.</summary>
      <returns>
        <see langword="true" />, wenn der Knoten einen transformierten Aufruf darstellt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>Ruft einen Wert ab, der angibt, ob der Ausdrucksstrukturknoten einen transformierten lifted-Aufruf eines Operators darstellt, dessen Rückgabetyp zu einem Typ transformiert wird, der NULL-Werte zulässt.</summary>
      <returns>
        <see langword="true" />, wenn der Rückgabetyp des Operators zu einem Typ, der NULL-Werte zulässt, transformiert wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>Ruft den linken Operanden der binären Operation ab.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression" />, die den linken Operanden der binären Operation darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>Ruft die implementierende Methode für die binäre Operation ab.</summary>
      <returns>Die <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>Ruft den rechten Operanden der binären Operation ab.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression" />, die den rechten Operanden der binären Operation darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>Stellt einen Block mit einer Sequenz von Ausdrücken dar, für die Variablen definiert werden können.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="variables">Die <see cref="P:System.Linq.Expressions.BlockExpression.Variables" />-Eigenschaft des Ergebnisses.</param>
      <param name="expressions">Die <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>Ruft die Ausdrücke in diesem Block ab.</summary>
      <returns>Die schreibgeschützte Auflistung, die alle Ausdrücke in diesem Block enthält.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück. Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> beim Überschreiben dieser Methode zurückgeben.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>Ruft den letzten Ausdruck in diesem Block ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den letzten Ausdruck in diesem Block darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.BlockExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>Ruft die in diesem Block definierten Variablen ab.</summary>
      <returns>Die schreibgeschützte Auflistung, die alle in diesem Block definierten Variablen enthält.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>Stellt eine catch-Anweisung in einem try-Block dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>Gibt einen <see cref="T:System.String" /> zurück, der das aktuelle <see cref="T:System.Object" />-Objekt darstellt.</summary>
      <returns>Ein <see cref="T:System.String" />, der den aktuellen <see cref="T:System.Object" /> darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="variable">Die <see cref="P:System.Linq.Expressions.CatchBlock.Variable" />-Eigenschaft des Ergebnisses.</param>
      <param name="filter">Die <see cref="P:System.Linq.Expressions.CatchBlock.Filter" />-Eigenschaft des Ergebnisses.</param>
      <param name="body">Die <see cref="P:System.Linq.Expressions.CatchBlock.Body" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>Ruft den Text des catch-Blocks ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den Text des catch-Blocks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>Ruft den Text des <see cref="T:System.Linq.Expressions.CatchBlock" />-Filters ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den Text des <see cref="T:System.Linq.Expressions.CatchBlock" />-Filters darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>Ruft den Typ der <see cref="T:System.Exception" /> ab, die von diesem Handler abgefangen wird.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Typ der <see cref="T:System.Exception" /> darstellt, die von diesem Handler abgefangen wird.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>Ruft einen Verweis auf das von diesem Handler abgefangene <see cref="T:System.Exception" />-Objekt ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekt, das einen Verweis auf das von diesem Handler abgefangene <see cref="T:System.Exception" />-Objekt darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>Stellt einen Ausdruck mit einem bedingten Operator dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="test">Die <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />-Eigenschaft des Ergebnisses.</param>
      <param name="ifTrue">Die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />-Eigenschaft des Ergebnisses.</param>
      <param name="ifFalse">Die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>Ruft den Ausdruck ab, der ausgeführt werden soll, wenn der Test <see langword="false" /> ergibt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression" />, die den Ausdruck darstellt, der ausgeführt werden soll, wenn der Test <see langword="false" /> ergibt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>Ruft den Ausdruck ab, der ausgeführt werden soll, wenn der Test <see langword="true" /> ergibt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression" />, die den Ausdruck darstellt, der ausgeführt werden soll, wenn der Test <see langword="true" /> ergibt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück. Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> beim Überschreiben dieser Methode zurückgeben.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>Ruft den Test der bedingten Operation ab.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression" />, die den Text der bedingten Operation darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>Stellt einen Ausdruck mit einem konstanten Wert dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück. Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> beim Überschreiben dieser Methode zurückgeben.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>Ruft den Wert des konstanten Ausdrucks ab.</summary>
      <returns>Ein <see cref="T:System.Object" /> gleich dem Wert des dargestellten Ausdrucks.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>Dient zum Ausgeben oder Löschen eines Sequenzpunkts für Debuginformationen. Dadurch kann der Debugger beim Debuggen den korrekten Quellcode hervorheben.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>Ruft die <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> ab, die die Quelldatei darstellt.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, die die Quelldatei darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>Ruft die Endspalte dieses <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> ab.</summary>
      <returns>Die Nummer der Endspalte des Codes, mit dem der umschlossene Ausdruck generiert wurde.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>Ruft die Endzeile dieses <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> ab.</summary>
      <returns>Die Nummer der Endzeile des Codes, mit dem der umschlossene Ausdruck generiert wurde.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>Ruft den Wert ab, mit dem angegeben wird, ob <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> zum Löschen eines Sequenzpunkts verwendet wird.</summary>
      <returns>
        <see langword="true" /> , wenn der <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> einen Sequenz Punkt löschen soll, andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>Ruft die Startspalte dieses <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> ab.</summary>
      <returns>Die Nummer der Anfangsspalte des Codes, mit dem der umschlossene Ausdruck generiert wurde.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>Ruft die Startzeile dieses <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> ab.</summary>
      <returns>Die Nummer der Anfangszeile des Codes, mit dem der umschlossene Ausdruck generiert wurde.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>Stellt den Standardwert eines Typs oder eines leeren Ausdrucks dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück. Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> beim Überschreiben dieser Methode zurückgeben.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>Stellt einen dynamischen Vorgang dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
      <param name="arg3">Das vierte Argument des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und ein Argument darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das Argument des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und zwei Argumente darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und drei Argumente darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und vier Argumente darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
      <param name="arg3">Das vierte Argument des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Gibt das Argument bei Index zurück, das ausgelöst wird, wenn der Index außerhalb des gültigen Bereichs liegt. Sie sollten diesen Member nicht verwenden. Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <param name="index">Der Index des Arguments.</param>
      <returns>Gibt <see cref="T:System.Linq.Expressions.Expression" />zurück.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary>Erstellt optional die Aufrufsite (CallSite) und gibt die Aufrufsite für den polymorphen Inlinecache des dynamischen Ausdrucks (DynamicExpression) zurück. Sie sollten diesen Member nicht verwenden. Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <returns>Gibt <see cref="T:System.Object" />zurück.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary>Schreibt diesen Knoten um, wobei die Argumente des dynamischen Ausdrucks durch die bereitgestellten Werte ersetzt werden. Die Anzahl von <paramref name="args" /> muss mit der Anzahl des aktuellen Ausdrucks übereinstimmen. Sie sollten diesen Typ nicht verwenden. Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet. Diese Hilfsmethode ermöglicht das Umschreiben von Knoten, sodass diese von der jeweiligen Implementierungsklasse unabhängig sind, die von dem an der Aufrufseite verwendeten dynamischen Ausdruck (DynamicExpression) abgeleitet wird.</summary>
      <param name="args">Die Argumente.</param>
      <returns>Gibt <see cref="T:System.Linq.Expressions.Expression" /> zurück, den umgeschriebenen Ausdruck.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Vergleicht den an den Parameter <paramref name="arguments" /> gesendeten Wert mit der <see langword="Arguments" />-Eigenschaft der aktuellen Instanz von <see langword="DynamicExpression" />. Wenn die Werte des Parameters und der Eigenschaft gleich sind, wird die aktuelle Instanz zurückgegeben. Wenn sie nicht gleich sind, wird eine neue <see langword="DynamicExpression" />-Instanz zurückgegeben, die mit der aktuellen Instanz identisch ist, außer dass die <see langword="Arguments" />-Eigenschaft auf den Wert des Parameters <paramref name="arguments" /> festgelegt ist.</summary>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>Ruft die Argumente des dynamischen Vorgangs ab.</summary>
      <returns>Die schreibgeschützten Auflistungen, die die Argumente für den dynamischen Vorgang enthalten.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>Ruft den <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> ab, der das Laufzeitverhalten der dynamischen Site bestimmt.</summary>
      <returns>Der <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, der das Laufzeitverhalten der dynamischen Site bestimmt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>Ruft den Typ des von <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten ab.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Typ des von <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück. Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> beim Überschreiben dieser Methode zurückgeben.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Gibt die Anzahl der Argumente für den Ausdrucksstrukturknoten zurück. Sie sollten diesen Member nicht verwenden. Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <returns>Gibt <see cref="T:System.Int32" />zurück.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>Stellt einen Besucher oder Bearbeiter für dynamische Ausdrucksbaumstrukturen dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Gibt <see cref="T:System.Linq.Expressions.Expression" /> den geänderte Ausdruck zurück, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>Stellt einen Initialisierer für ein einzelnes Element einer <see cref="T:System.Collections.IEnumerable" />-Auflistung dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Gibt das Argument bei Index zurück, das ausgelöst wird, wenn der Index außerhalb des gültigen Bereichs liegt.  Sie sollten diesen Member nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <param name="index">Der Index des Arguments.</param>
      <returns>Gibt <see cref="T:System.Linq.Expressions.Expression" />zurück.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>Gibt eine Textdarstellung eines <see cref="T:System.Linq.Expressions.ElementInit" />-Objekts zurück.</summary>
      <returns>Eine Textdarstellung des <see cref="T:System.Linq.Expressions.ElementInit" />-Objekts.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>Ruft die Instanzmethode ab, mit der ein Element zu einer <see cref="T:System.Collections.IEnumerable" />-Auflistung hinzugefügt wird.</summary>
      <returns>Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Instanzmethode darstellt, mit der ein Element zu einer Auflistung hinzufügt wird.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>Ruft die Auflistung von Argumenten ab, die an eine Methode übergeben werden, die einer <see cref="T:System.Collections.IEnumerable" />-Auflistung ein Element hinzufügt.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Argumente für eine Methode darstellen, die einer Auflistung ein Element hinzufügt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Gibt die Anzahl der Argumente für den Ausdrucksstrukturknoten zurück.  Sie sollten diesen Member nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <returns>Gibt <see cref="T:System.Int32" />zurück.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>Stellt die Basisklasse bereit, aus der die Klassen abgeleitet werden, die die Knoten in der Ausdrucksbaumstruktur darstellen. Sie enthält auch <see langword="static" />-Factorymethoden (<see langword="Shared" /> in Visual Basic), um die verschiedenen Knotentypen zu erstellen. Dies ist eine <see langword="abstract" />-Klasse.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>Erstellt eine neue Instanz von <see cref="T:System.Linq.Expressions.Expression" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Linq.Expressions.Expression" />-Klasse.</summary>
      <param name="nodeType">Der als Knotentyp festzulegende <see cref="T:System.Linq.Expressions.ExpressionType" />.</param>
      <param name="type">Die <see cref="P:System.Linq.Expressions.Expression.Type" /> dieses <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Addition ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Additionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Addition ohne Überlaufprüfung darstellt. Die implementierende Methode kann angegeben werden.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Additionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Addition mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Additionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Addition mit Überlaufprüfung darstellt. Die implementierende Methode kann angegeben werden.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Additionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen bitweisen <see langword="AND" />-Vorgang darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der bitweise <see langword="AND" />-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.And" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen bitweisen <see langword="AND" />-Vorgang darstellt. Die implementierende Methode kann angegeben werden.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der bitweise <see langword="AND" />-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.And" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen bedingten <see langword="AND" />-Vorgang darstellt, bei dem der zweite Operand nur ausgewertet wird, wenn der erste Operand als <see langword="true" /> ausgewertet wird.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der bitweise <see langword="AND" />-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.  
  
- oder - 
 <paramref name="left" />.Type und <paramref name="right" />.Type weisen nicht denselben booleschen Typ auf.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bedingte <see langword="AND" />-Operation darstellt, bei der der zweite Operand nur ausgewertet wird, wenn der erste Operand zu TRUE aufgelöst wird. Die implementierende Methode kann angegeben werden.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der bitweise <see langword="AND" />-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.  
  
- oder - 
 <paramref name="method" /> ist <see langword="null" />, und <paramref name="left" />.Type sowie <paramref name="right" />.Type weisen nicht denselben booleschen Typ auf.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise AND-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise AND-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise AND-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, um auf ein mehrdimensionales Array zuzugreifen.</summary>
      <param name="array">Ein Ausdruck, der das mehrdimensionale Array darstellt.</param>
      <param name="indexes">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit Ausdrücken, die zum Indizieren des Arrays verwendet werden.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, um auf ein Array zuzugreifen.</summary>
      <param name="array">Ein Ausdruck, der das zu indizierende Array darstellt.</param>
      <param name="indexes">Ein Array mit Ausdrücken, die zum Indizieren des Arrays verwendet werden.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die das Anwenden eines Arrayindexoperators auf ein Array mit einem Rang größer als eins darstellt.</summary>
      <param name="array">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft festgelegt werden soll.</param>
      <param name="indexes">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.Expression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> oder <paramref name="indexes" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type stellt keinen Arraytyp dar.  
  
- oder - 
Der Rang von <paramref name="array" />.Type entspricht nicht der Anzahl der Elemente in <paramref name="indexes" />.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines oder mehrerer Elemente von <paramref name="indexes" /> stellt nicht den <see cref="T:System.Int32" />-Typ dar.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Anwenden eines Arrayindexoperators auf ein Array mit Rang eins darstellt.</summary>
      <param name="array">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="index">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> oder <paramref name="index" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type stellt keinen Arraytyp dar.  
  
- oder - 
 <paramref name="array" />.Type stellt einen Arraytyp dar, dessen Rang nicht 1 ist.  
  
- oder - 
 <paramref name="index" />.Type stellt nicht den <see cref="T:System.Int32" />.Type dar.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die das Anwenden eines Arrayindexoperators auf ein mehrdimensionales Array darstellt.</summary>
      <param name="array">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Instanzen - Indizes für den Arrayindizierungsvorgang.</param>
      <param name="indexes">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> oder <paramref name="indexes" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type stellt keinen Arraytyp dar.  
  
- oder - 
Der Rang von <paramref name="array" />.Type entspricht nicht der Anzahl der Elemente in <paramref name="indexes" />.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines oder mehrerer Elemente von <paramref name="indexes" /> stellt nicht den <see cref="T:System.Int32" />-Typ dar.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die einen Ausdruck zum Abrufen der Länge eines eindimensionalen Arrays darstellt.</summary>
      <param name="array">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type stellt keinen Arraytyp dar.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft gleich <paramref name="array" /> ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberAssignment" />, das die Initialisierung eines Felds oder einer Eigenschaft darstellt.</summary>
      <param name="member">Ein <see cref="T:System.Reflection.MemberInfo" />, auf das die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft festgelegt werden soll.</param>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> oder <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.  
  
- oder - 
Die durch <paramref name="member" /> dargestellte Eigenschaft verfügt über keinen <see langword="set" />-Accessor.  
  
- oder - 
 <paramref name="expression" />.Type kann dem Typ des Felds oder der Eigenschaft, die <paramref name="member" /> darstellt, nicht zugewiesen werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberAssignment" />, bei dem <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> gleich <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> ist und die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberAssignment" />, das die Initialisierung eines Members durch Verwendung einer Eigenschaftenaccessormethode darstellt.</summary>
      <param name="propertyAccessor">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenaccessormethode darstellt.</param>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> oder <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> stellt keine Eigenschaftenzugriffsmethode dar.  
  
- oder - 
Die-Eigenschaft, auf die <paramref name="propertyAccessor" /> zugreift, verfügt nicht über einen <see langword="set" />-Accessor.  
  
- oder - 
 <paramref name="expression" />.Type kann dem Typ des Felds oder der Eigenschaft, die <paramref name="member" /> darstellt, nicht zugewiesen werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberAssignment" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> ist, die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird, und die <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />-Eigenschaft auf <paramref name="expression" /> festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die die angegebenen Ausdrücke und keine Variablen enthält.</summary>
      <param name="expressions">Die Ausdrücke im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BlockExpression" />, das die angegebenen Variablen und Ausdrücke enthält.</summary>
      <param name="variables">Die Variablen im Block.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BlockExpression" />, das die angegebenen Variablen und Ausdrücke enthält.</summary>
      <param name="variables">Die Variablen im Block.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die zwei Ausdrücke und keine Variablen enthält.</summary>
      <param name="arg0">Der erste Ausdruck im Block.</param>
      <param name="arg1">Der zweite Ausdruck im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BlockExpression" />, das drei Ausdrücke und keine Variablen enthält.</summary>
      <param name="arg0">Der erste Ausdruck im Block.</param>
      <param name="arg1">Der zweite Ausdruck im Block.</param>
      <param name="arg2">Der dritte Ausdruck im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BlockExpression" />, das vier Ausdrücke und keine Variablen enthält.</summary>
      <param name="arg0">Der erste Ausdruck im Block.</param>
      <param name="arg1">Der zweite Ausdruck im Block.</param>
      <param name="arg2">Der dritte Ausdruck im Block.</param>
      <param name="arg3">Der vierte Ausdruck im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BlockExpression" />, das fünf Ausdrücke und keine Variablen enthält.</summary>
      <param name="arg0">Der erste Ausdruck im Block.</param>
      <param name="arg1">Der zweite Ausdruck im Block.</param>
      <param name="arg2">Der dritte Ausdruck im Block.</param>
      <param name="arg3">Der vierte Ausdruck im Block.</param>
      <param name="arg4">Der fünfte Ausdruck im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die die angegebenen Ausdrücke und keine Variablen enthält.</summary>
      <param name="expressions">Die Ausdrücke im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BlockExpression" />, das die angegebenen Ausdrücke enthält, nicht über Variablen verfügt und von einem bestimmten Ergebnistyp ist.</summary>
      <param name="type">Der Ergebnistyp des Blocks.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BlockExpression" />, das die angegebenen Variablen und Ausdrücke enthält.</summary>
      <param name="type">Der Ergebnistyp des Blocks.</param>
      <param name="variables">Die Variablen im Block.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BlockExpression" />, das die angegebenen Variablen und Ausdrücke enthält.</summary>
      <param name="type">Der Ergebnistyp des Blocks.</param>
      <param name="variables">Die Variablen im Block.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BlockExpression" />, das die angegebenen Ausdrücke enthält, nicht über Variablen verfügt und von einem bestimmten Ergebnistyp ist.</summary>
      <param name="type">Der Ergebnistyp des Blocks.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Break-Anweisung darstellt.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Break", die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und ein NULL-Wert beim Springen an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Break-Anweisung darstellt. Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.GotoExpression" />, bei dem <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Break" ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.GotoExpression" />, das eine Break-Anweisung mit dem angegebenen Typ darstellt. Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf den die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.GotoExpression" />, bei dem <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Break" ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.GotoExpression" />, das eine Break-Anweisung mit dem angegebenen Typ darstellt.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf den die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.GotoExpression" />, bei dem <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Break" ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer Methode darstellt, die keine Argumente akzeptiert.</summary>
      <param name="instance">Ein <see cref="T:System.Linq.Expressions.Expression" />, das die Instanz für einen Instanzmethodenaufruf angibt (übergeben Sie <see langword="null" /> für eine <see langword="static" />-Methode bzw. in Visual Basic eine <see langword="Shared" />-Methode).</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="instance" /> ist <see langword="null" />, und <paramref name="method" /> stellt eine Instanzmethode dar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type kann dem deklarierenden Typ der durch <paramref name="method" /> dargestellten Methode nicht zugewiesen werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer Methode darstellt, die Argumente akzeptiert.</summary>
      <param name="instance">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft festgelegt werden soll. Übergeben Sie <see langword="null" /> für eine <see langword="static" />-Methode (<see langword="Shared" /> in Visual Basic).</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.Expression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="instance" /> ist <see langword="null" />, und <paramref name="method" /> stellt eine Instanzmethode dar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type kann dem deklarierenden Typ der durch <paramref name="method" /> dargestellten Methode nicht zugewiesen werden.  
  
- oder - 
Die Anzahl der Elemente in <paramref name="arguments" /> stimmt nicht mit der Anzahl der Parameter für die durch <paramref name="method" /> dargestellte Methode dar.  
  
- oder - 
Mindestens ein Element von <paramref name="arguments" /> kann nicht dem entsprechenden Parameter für die durch <paramref name="method" /> dargestellte Methode zugewiesen werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer Methode darstellt, die zwei Argumente akzeptiert.</summary>
      <param name="instance">Ein <see cref="T:System.Linq.Expressions.Expression" />, das die Instanz für einen Instanzaufruf angibt. (Übergeben Sie NULL für eine statische Methode bzw. eine Shared-Methode in Visual Basic.)</param>
      <param name="method">Das <see cref="T:System.Reflection.MethodInfo" />, das die Zielmethode darstellt.</param>
      <param name="arg0">Das <see cref="T:System.Linq.Expressions.Expression" />, das das erste Argument darstellt.</param>
      <param name="arg1">Das <see cref="T:System.Linq.Expressions.Expression" />, das das zweite Argument darstellt.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer Methode darstellt, die drei Argumente akzeptiert.</summary>
      <param name="instance">Ein <see cref="T:System.Linq.Expressions.Expression" />, das die Instanz für einen Instanzaufruf angibt. (Übergeben Sie NULL für eine statische Methode bzw. eine Shared-Methode in Visual Basic.)</param>
      <param name="method">Das <see cref="T:System.Reflection.MethodInfo" />, das die Zielmethode darstellt.</param>
      <param name="arg0">Das <see cref="T:System.Linq.Expressions.Expression" />, das das erste Argument darstellt.</param>
      <param name="arg1">Das <see cref="T:System.Linq.Expressions.Expression" />, das das zweite Argument darstellt.</param>
      <param name="arg2">Das <see cref="T:System.Linq.Expressions.Expression" />, das das dritte Argument darstellt.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer Methode darstellt, die Argumente akzeptiert.</summary>
      <param name="instance">Ein <see cref="T:System.Linq.Expressions.Expression" />, das die Instanz für einen Instanzmethodenaufruf angibt (übergeben Sie <see langword="null" /> für eine <see langword="static" />-Methode bzw. in Visual Basic eine <see langword="Shared" />-Methode).</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="instance" /> ist <see langword="null" />, und <paramref name="method" /> stellt eine Instanzmethode dar.  
  
- oder - 
 <paramref name="arguments" /> ist nicht <see langword="null" />, und mindestens ein Element davon ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type kann dem deklarierenden Typ der durch <paramref name="method" /> dargestellten Methode nicht zugewiesen werden.  
  
- oder - 
Die Anzahl der Elemente in <paramref name="arguments" /> stimmt nicht mit der Anzahl der Parameter für die durch <paramref name="method" /> dargestellte Methode dar.  
  
- oder - 
Mindestens ein Element von <paramref name="arguments" /> kann nicht dem entsprechenden Parameter für die durch <paramref name="method" /> dargestellte Methode zugewiesen werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer Methode durch das Aufrufen der entsprechenden Factorymethode darstellt.</summary>
      <param name="instance">Eine <see cref="T:System.Linq.Expressions.Expression" />, deren <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaftswert nach einer bestimmten Methode durchsucht wird.</param>
      <param name="methodName">Der Name der Methode.</param>
      <param name="typeArguments">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typparameter der generischen Methode angeben. Dieses Argument muss NULL sein, wenn durch methodName eine nicht generische Methode angegeben wird.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, das die Argumente der Methode darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> oder <paramref name="methodName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Es wurde keine Methode, deren Namen gleich <paramref name="methodName" /> ist, deren Typparameter <paramref name="typeArguments" /> entsprechen und deren Parametertypen <paramref name="arguments" /> entsprechen, in <paramref name="instance" />.Type oder ihrer Basistypen gefunden.  
  
- oder - 
Es wurde mehr als eine Methode, deren Namen gleich <paramref name="methodName" /> ist, deren Typparameter <paramref name="typeArguments" /> entsprechen und deren Parametertypen <paramref name="arguments" /> entsprechen, in <paramref name="instance" />.Type oder ihrer Basistypen gefunden.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist, die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft gleich <paramref name="instance" /> ist, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> auf die <see cref="T:System.Reflection.MethodInfo" /> festgelegt ist, die die angegebene Instanzmethode darstellt, und <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> auf die angegebenen Argumente festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode (Shared in Visual Basic) darstellt.</summary>
      <param name="method">Das <see cref="T:System.Reflection.MethodInfo" />, das die Zielmethode darstellt.</param>
      <param name="arguments">Ein Auflistung von <see cref="T:System.Linq.Expressions.Expression" />, die die Aufrufargumente darstellt.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer <see langword="static" />-Methode (<see langword="Shared" /> in Visual Basic) mit einem Argument darstellt.</summary>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arg0">Das <see cref="T:System.Linq.Expressions.Expression" />, das das erste Argument darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode darstellt, die zwei Argumente akzeptiert.</summary>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arg0">Das <see cref="T:System.Linq.Expressions.Expression" />, das das erste Argument darstellt.</param>
      <param name="arg1">Das <see cref="T:System.Linq.Expressions.Expression" />, das das zweite Argument darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode darstellt, die drei Argumente akzeptiert.</summary>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arg0">Das <see cref="T:System.Linq.Expressions.Expression" />, das das erste Argument darstellt.</param>
      <param name="arg1">Das <see cref="T:System.Linq.Expressions.Expression" />, das das zweite Argument darstellt.</param>
      <param name="arg2">Das <see cref="T:System.Linq.Expressions.Expression" />, das das dritte Argument darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode darstellt, die vier Argumente akzeptiert.</summary>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arg0">Das <see cref="T:System.Linq.Expressions.Expression" />, das das erste Argument darstellt.</param>
      <param name="arg1">Das <see cref="T:System.Linq.Expressions.Expression" />, das das zweite Argument darstellt.</param>
      <param name="arg2">Das <see cref="T:System.Linq.Expressions.Expression" />, das das dritte Argument darstellt.</param>
      <param name="arg3">Das <see cref="T:System.Linq.Expressions.Expression" />, das das vierte Argument darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode darstellt, die fünf Argumente akzeptiert.</summary>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arg0">Das <see cref="T:System.Linq.Expressions.Expression" />, das das erste Argument darstellt.</param>
      <param name="arg1">Das <see cref="T:System.Linq.Expressions.Expression" />, das das zweite Argument darstellt.</param>
      <param name="arg2">Das <see cref="T:System.Linq.Expressions.Expression" />, das das dritte Argument darstellt.</param>
      <param name="arg3">Das <see cref="T:System.Linq.Expressions.Expression" />, das das vierte Argument darstellt.</param>
      <param name="arg4">Das <see cref="T:System.Linq.Expressions.Expression" />, das das fünfte Argument darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer <see langword="static" />-Methode (<see langword="Shared" /> in Visual Basic) mit Argumenten darstellt.</summary>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine <see langword="static" />-Methode (<see langword="Shared" /> in Visual Basic) darstellt, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl der Elemente in <paramref name="arguments" /> stimmt nicht mit der Anzahl der Parameter für die durch <paramref name="method" /> dargestellte Methode dar.  
  
- oder - 
Mindestens ein Element von <paramref name="arguments" /> kann nicht dem entsprechenden Parameter für die durch <paramref name="method" /> dargestellte Methode zugewiesen werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer <see langword="static" />-Methode (<see langword="Shared" /> in Visual Basic) durch das Aufrufen der entsprechenden Factorymethode darstellt.</summary>
      <param name="type">Der Typ, der die angegebene <see langword="static" /> -Methode (<see langword="Shared" /> in Visual Basic) enthält.</param>
      <param name="methodName">Der Name der Methode.</param>
      <param name="typeArguments">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typparameter der generischen Methode angeben. Dieses Argument muss NULL sein, wenn durch methodName eine nicht generische Methode angegeben wird.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, das die Argumente der Methode darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> oder <paramref name="methodName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Es wurde keine Methode, deren Namen gleich <paramref name="methodName" /> ist, deren Typparameter <paramref name="typeArguments" /> entsprechen und deren Parametertypen <paramref name="arguments" /> entsprechen, in <paramref name="type" /> oder seinen Basistypen gefunden.  
  
- oder - 
Es wurde mehr als eine Methode, deren Namen gleich <paramref name="methodName" /> ist, deren Typparameter <paramref name="typeArguments" /> entsprechen und deren Parametertypen <paramref name="arguments" /> entsprechen, in <paramref name="type" /> oder seinen Basistypen gefunden.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist, die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft auf die <see cref="T:System.Reflection.MethodInfo" /> festgelegt ist, die die angegebene <see langword="static" />-Methode (<see langword="Shared" /> in Visual Basic) darstellt, und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Eigenschaft auf die angegebenen Argumente festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.CatchBlock" />, der eine Catch-Anweisung mit einem Verweis auf das aufgefangene <see cref="T:System.Exception" />-Objekt zur Verwendung im Handlertext darstellt.</summary>
      <param name="variable">Eine <see cref="T:System.Linq.Expressions.ParameterExpression" />, die einen Verweis auf das von diesem Handler aufgefangene <see cref="T:System.Exception" />-Objekt darstellt.</param>
      <param name="body">Der Text der Catch-Anweisung.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.CatchBlock" />, der eine Catch-Anweisung mit einem <see cref="T:System.Exception" />-Filter und einem Verweis auf das aufgefangene <see cref="T:System.Exception" />-Objekt darstellt.</summary>
      <param name="variable">Eine <see cref="T:System.Linq.Expressions.ParameterExpression" />, die einen Verweis auf das von diesem Handler aufgefangene <see cref="T:System.Exception" />-Objekt darstellt.</param>
      <param name="body">Der Text der Catch-Anweisung.</param>
      <param name="filter">Der Text des <see cref="T:System.Exception" />-Filters.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.CatchBlock" />, der eine Catch-Anweisung darstellt.</summary>
      <param name="type">Der <see cref="P:System.Linq.Expressions.Expression.Type" /> von <see cref="T:System.Exception" />, der von diesem <see cref="T:System.Linq.Expressions.CatchBlock" /> behandelt wird.</param>
      <param name="body">Der Text der Catch-Anweisung.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.CatchBlock" />, der eine Catch-Anweisung mit einem <see cref="T:System.Exception" />-Filter, aber keinem Verweis auf das aufgefangene <see cref="T:System.Exception" />-Objekt darstellt.</summary>
      <param name="type">Der <see cref="P:System.Linq.Expressions.Expression.Type" /> von <see cref="T:System.Exception" />, der von diesem <see cref="T:System.Linq.Expressions.CatchBlock" /> behandelt wird.</param>
      <param name="body">Der Text der Catch-Anweisung.</param>
      <param name="filter">Der Text des <see cref="T:System.Exception" />-Filters.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> zum Löschen eines Sequenzpunkts.</summary>
      <param name="document">Die <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, die die Quelldatei darstellt.</param>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> zum Löschen eines Sequenzpunkts.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine zusammenfügende Operation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft von <paramref name="left" /> stellt keinen Referenztyp und keinen Typ dar, der NULL-Werte zulässt.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type und <paramref name="right" />.Type können nicht ineinander konvertiert werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die bei einer gegebenen Konvertierungsfunktion eine zusammenfügende Operation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type und <paramref name="right" />.Type können nicht ineinander konvertiert werden.  
  
- oder - 
 <paramref name="conversion" /> ist nicht <see langword="null" />, und <paramref name="conversion" />.Type ist ein Delegattyp, der nicht genau ein Argument akzeptiert.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft von <paramref name="left" /> stellt keinen Referenztyp und keinen Typ dar, der NULL-Werte zulässt.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft von <paramref name="left" /> stellt einen Typ dar, der nicht dem Parametertyp des Delegatentyps <paramref name="conversion" />.Type zugeordnet werden kann.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft von <paramref name="right" /> ist nicht gleich dem Rückgabetyp des Delegattyps <paramref name="conversion" />.Type.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die eine bedingte Anweisung darstellt.</summary>
      <param name="test">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifTrue">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifFalse">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> oder <paramref name="ifTrue" /> oder <paramref name="ifFalse" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type ist nicht <see cref="T:System.Boolean" />.  
  
- oder - 
 <paramref name="ifTrue" />.Type ist ungleich <paramref name="ifFalse" />.Type.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.ConditionalExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> und <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die eine bedingte Anweisung darstellt.</summary>
      <param name="test">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifTrue">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifFalse">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Ein <see cref="P:System.Linq.Expressions.Expression.Type" />, auf das die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.ConditionalExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> und <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConstantExpression" />, bei der die <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</summary>
      <param name="value">Ein <see cref="T:System.Object" />, auf den die <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.ConstantExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> und die <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConstantExpression" />, bei der die <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />-Eigenschaft und die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</summary>
      <param name="value">Ein <see cref="T:System.Object" />, auf den die <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf das die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> ist <see langword="null" />, und <paramref name="type" /> kann nicht auf der Basis des dynamischen Typs von <paramref name="value" /> zugeordnet werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.ConstantExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> ist und die <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Continue-Anweisung darstellt.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Continue", die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und beim Springen ein NULL-Wert an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Continue-Anweisung mit dem angegebenen Typ darstellt.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf den die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.GotoExpression" />, bei dem <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Continue" ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen ein NULL-Wert an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, das einen Typkonvertierungsvorgang darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf das die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Zwischen <paramref name="expression" />.Type und <paramref name="type" /> ist kein Konvertierungsoperator definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine Konvertierungsoperation darstellt, für die die implementierende Methode angegeben ist.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf das die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dadurch dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">Zwischen <paramref name="expression" />.Type und <paramref name="type" /> ist kein Konvertierungsoperator definiert.  
  
- oder - 
 <paramref name="expression" />.Type kann dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode nicht zugeordnet werden.  
  
- oder - 
Der Rückgabetyp der Methode, die durch <paramref name="method" /> dargestellt wird, kann <paramref name="type" /> nicht zugeordnet werden.  
  
- oder - 
 <paramref name="expression" />.Type oder <paramref name="type" /> ist ein Werttyp, der NULL-Werte zulässt, und der entsprechende Werttyp, der keine NULL-Werte zulässt, entspricht nicht dem Argumenttyp bzw. dem Rückgabetyp der durch <paramref name="method" /> dargestellten Methode.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">Es wurde mehr als eine Methode gefunden, die mit der <paramref name="method" />-Beschreibung übereinstimmt.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> und <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine Konvertierungsoperation darstellt, die eine Ausnahme auslöst, wenn ein Überlauf im Zieltyp auftritt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf das die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Zwischen <paramref name="expression" />.Type und <paramref name="type" /> ist kein Konvertierungsoperator definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine Konvertierungsoperation darstellt, für die die implementierende Methode angegeben ist und die eine Ausnahme auslöst, wenn ein Überlauf im Zieltyp auftritt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf das die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dadurch dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">Zwischen <paramref name="expression" />.Type und <paramref name="type" /> ist kein Konvertierungsoperator definiert.  
  
- oder - 
 <paramref name="expression" />.Type kann dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode nicht zugeordnet werden.  
  
- oder - 
Der Rückgabetyp der Methode, die durch <paramref name="method" /> dargestellt wird, kann <paramref name="type" /> nicht zugeordnet werden.  
  
- oder - 
 <paramref name="expression" />.Type oder <paramref name="type" /> ist ein Werttyp, der NULL-Werte zulässt, und der entsprechende Werttyp, der keine NULL-Werte zulässt, entspricht nicht dem Argumenttyp bzw. dem Rückgabetyp der durch <paramref name="method" /> dargestellten Methode.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">Es wurde mehr als eine Methode gefunden, die mit der <paramref name="method" />-Beschreibung übereinstimmt.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> und <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> mit der angegebenen Spanne.</summary>
      <param name="document">Die <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, die die Quelldatei darstellt.</param>
      <param name="startLine">Die Startzeile dieser <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Muss größer als 0 sein.</param>
      <param name="startColumn">Die Startspalte dieser <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Muss größer als 0 sein.</param>
      <param name="endLine">Die Endzeile dieser <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Muss größer oder gleich der Startzeile sein.</param>
      <param name="endColumn">Die Endspalte dieser <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Wenn die Endzeile und die Startzeile identisch sind, muss die Endzeile größer oder gleich der Startspalte sein. Muss in jedem Fall größer als 0 sein.</param>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das Verringern des Ausdruckswerts um 1 darstellt.</summary>
      <param name="expression">Ein zu verringerndes <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den verringerten Ausdruckswert darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das Verringern des Ausdruckswerts um 1 darstellt.</summary>
      <param name="expression">Ein zu verringerndes <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, das die implementierende Methode darstellt.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den verringerten Ausdruckswert darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DefaultExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf den angegebenen Typ festgelegt ist.</summary>
      <param name="type">Ein <see cref="T:System.Type" />, auf das die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DefaultExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> und die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf den angegebenen Typ festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Division darstellt.</summary>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Divisionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Division darstellt. Die implementierende Methode kann angegeben werden.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Divisionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Divisionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Divisionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Divisionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
      <param name="arg3">Das vierte Argument des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei dem <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.ElementInit" />, dessen zweites Argument ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> ist.</summary>
      <param name="addMethod">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, auf das die <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> oder <paramref name="arguments" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die Methode, die durch <paramref name="addMethod" /> dargestellt wird, heißt nicht „Add“ (Groß-/Kleinschreibung wird nicht unterschieden).  
  
- oder - 
Die Methode, die durch <paramref name="addMethod" /> dargestellt wird, ist keine Instanzmethode.  
  
- oder - 
 Die Anzahl der Elemente in <paramref name="arguments" /> stimmt nicht mit der Anzahl der Parameter für die Methode überein, die durch <paramref name="addMethod" /> dargestellt wird.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft von mindestens einem Element von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters der Methode zugewiesen werden, die durch <paramref name="addMethod" /> dargestellt wird.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.ElementInit" />, bei dem die <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />-Eigenschaft und die <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.ElementInit" />, dessen zweites Argument ein Wertearray ist.</summary>
      <param name="addMethod">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, auf das die <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> oder <paramref name="arguments" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die durch addMethod dargestellte Methode weist nicht den Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) auf.  
  
- oder - 
Die durch addMethod dargestellte Methode ist keine Instanzmethode.  
  
- oder - 
arguments enthält nicht dieselbe Anzahl von Elementen wie die Anzahl der Parameter für die durch addMethod dargestellte Methode.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft von mindestens einem Element von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters der Methode zugewiesen werden, die durch <paramref name="addMethod" /> dargestellt wird.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.ElementInit" />, bei dem die <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />-Eigenschaft und die <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>Erstellt einen leeren Ausdruck vom Typ <see cref="T:System.Void" />.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DefaultExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> und die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <see cref="T:System.Void" /> festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Gleichheitsvergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Gleichheitsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Gleichheitsvergleich darstellt. Die implementierende Methode kann angegeben werden.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">
        <see langword="true" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="true" /> festzulegen, und <see langword="false" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="false" /> festzulegen.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Gleichheitsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />-Klasse, die eine bitweise <see langword="XOR" />-Operation mit <c>op_ExclusiveOr</c> für benutzerdefinierte Typen darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der <see langword="XOR" />-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />-Klasse, die eine bitweise <see langword="XOR" />-Operation mit <c>op_ExclusiveOr</c> für benutzerdefinierte Typen darstellt. Die implementierende Methode kann angegeben werden.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der <see langword="XOR" />-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />-Klasse, die eine bitweise XOR-Zuweisungsoperation mit <c>op_ExclusiveOr</c> für benutzerdefinierte Typen darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />-Klasse, die eine bitweise XOR-Zuweisungsoperation mit <c>op_ExclusiveOr</c> für benutzerdefinierte Typen darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />-Klasse, die eine bitweise XOR-Zuweisungsoperation mit <c>op_ExclusiveOr</c> für benutzerdefinierte Typen darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf ein Feld darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft festgelegt werden soll. Für <see langword="static" /> (<see langword="Shared" /> in Visual Basic) muss <paramref name="expression" /> gleich <see langword="null" /> sein.</param>
      <param name="field">Die <see cref="T:System.Reflection.FieldInfo" />, auf das die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> ist <see langword="null" />.  
  
- oder - 
Das durch <paramref name="field" /> dargestellte Feld ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic), und <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type kann dem deklarierenden Typ des durch <paramref name="field" /> dargestellten Felds nicht zugeordnet werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist und die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die bei einem gegebenen Feldnamen den Zugriff auf ein Feld darstellt.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, deren <see cref="P:System.Linq.Expressions.Expression.Type" /> ein Feld namens <paramref name="fieldName" /> enthält. Dies kann für statische Felder NULL sein.</param>
      <param name="fieldName">Der Name des Felds, auf das zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="fieldName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">In <paramref name="fieldName" />.Type oder den entsprechenden Basistypen ist kein Feld mit dem Namen <paramref name="expression" /> definiert.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist, die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft auf <paramref name="expression" /> festgelegt ist und die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.FieldInfo" /> festgelegt ist, die das durch <paramref name="fieldName" /> angegebene Feld darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf ein Feld darstellt.</summary>
      <param name="expression">Das enthaltende Objekt des Felds. Dies kann für statische Felder NULL sein.</param>
      <param name="type">Der <see cref="P:System.Linq.Expressions.Expression.Type" />, der das Feld enthält.</param>
      <param name="fieldName">Das Feld, auf das zugegriffen werden soll.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>Erstellt ein- <see cref="T:System.Type" /> Objekt, das einen generischen <c>System. Action</c> -Delegattyp mit bestimmten Typargumenten darstellt.</summary>
      <param name="typeArgs">Ein Array mit maximal 16 <see cref="T:System.Type" />-Objekten, die die Typargumente für den <see langword="System.Action" />-Delegattyp angeben.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> enthält mehr als sechzehn Elemente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> ist <see langword="null" />.</exception>
      <returns>Der Typ eines <c>System.Action</c>-Delegaten, der die angegebenen Typargumente aufweist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>Ruft ein <see cref="P:System.Linq.Expressions.Expression.Type" />-Objekt ab, das einen generischen <c>System.Func</c>- oder <c>System.Action</c>-Delegattyp mit bestimmten Typargumenten darstellt.</summary>
      <param name="typeArgs">Die Typargumente des Delegaten.</param>
      <returns>Der Delegattyp.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>Erstellt ein <see cref="P:System.Linq.Expressions.Expression.Type" />-Objekt, das einen generischen <c>System.Func</c>-Delegattyp mit bestimmten Typargumenten darstellt. Das letzte Typargument gibt den Rückgabetyp des erstellten Delegaten an.</summary>
      <param name="typeArgs">Ein Array mit einem bis 17 <see cref="T:System.Type" />-Objekten, die die Typargumente für den <see langword="System.Func" />-Delegattyp angeben.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> enthält weniger als ein oder mehr als siebzehn Elemente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> ist <see langword="null" />.</exception>
      <returns>Der Typ eines <c>System.Func</c>-Delegaten, der die angegebenen Typargumente aufweist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine "Go to"-Anweisung darstellt.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Goto" ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf den angegebenen Wert festgelegt ist und beim Springen ein NULL-Wert an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine "Go to"-Anweisung darstellt. Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.GotoExpression" />, bei dem <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Goto" ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.GotoExpression" />, das eine "Go to"-Anweisung mit dem angegebenen Typ darstellt. Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf den die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Goto" ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.GotoExpression" />, das eine "Go to"-Anweisung mit dem angegebenen Typ darstellt.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf den die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Goto" ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf den angegebenen Wert festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen ein NULL-Wert an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Größer als"-Vergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der "Größer als"-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Größer als"-Vergleich darstellt. Die implementierende Methode kann angegeben werden.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">
        <see langword="true" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="true" /> festzulegen, und <see langword="false" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="false" /> festzulegen.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der "Größer als"-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Größer oder gleich"-Vergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der "Größer oder gleich"-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Größer oder gleich"-Vergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">
        <see langword="true" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="true" /> festzulegen, und <see langword="false" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="false" /> festzulegen.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der „größer oder gleich“-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die einen bedingten Block mit einer <see langword="if" />-Anweisung darstellt.</summary>
      <param name="test">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifTrue">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> ist und die <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />-Eigenschaft auf die angegebenen Werte festgelegt sind. Die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />-Eigenschaft ist auf den Standardausdruck festgelegt, und der Typ der resultierenden <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die von dieser Methode zurückgegeben wird, ist <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die einen bedingten Block mit <see langword="if" />- und <see langword="else" />-Anweisungen darstellt.</summary>
      <param name="test">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifTrue">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifFalse">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.ConditionalExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> und <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> auf die angegebenen Werte festgelegt sind. Der Typ der resultierenden <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die von dieser Methode zurückgegeben wird, ist <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das Erhöhen des Ausdruckswerts um 1 darstellt.</summary>
      <param name="expression">Ein zu erhöhendes <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den erhöhten Ausdruckswert darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das Erhöhen des Ausdrucks um 1 darstellt.</summary>
      <param name="expression">Ein zu erhöhendes <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, das die implementierende Methode darstellt.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den erhöhten Ausdruckswert darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.InvocationExpression" />, das einen Delegaten oder einen Lambdaausdruck auf eine Liste von Argumentausdrücken anwendet.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, das den anzuwendenden Delegaten oder Lambdaausdruck darstellt.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit den <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Argumente darstellen, auf die der Delegat oder Lambdaausdruck angewendet wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type stellt keinen Delegattyp und keine <see cref="T:System.Linq.Expressions.Expression`1" /> dar.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des durch <paramref name="expression" /> dargestellten Delegaten zugeordnet werden.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> enthält nicht dieselbe Anzahl an Elementen wie die Liste der Parameter für den durch <paramref name="expression" /> dargestellten Delegaten.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.InvocationExpression" />, das den angegebenen Delegaten oder Lambdaausdruck auf die bereitgestellten Argumente anwendet.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.InvocationExpression" />, das einen Delegaten oder einen Lambdaausdruck auf eine Liste von Argumentausdrücken anwendet.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, das den anzuwendenden Delegaten oder Lambda-Ausdruck darstellt.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Argumente darstellen, auf die der Delegat oder der Lambdaausdruck angewendet wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type stellt keinen Delegattyp und keine <see cref="T:System.Linq.Expressions.Expression`1" /> dar.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des durch <paramref name="expression" /> dargestellten Delegaten zugeordnet werden.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> enthält nicht dieselbe Anzahl an Elementen wie die Liste der Parameter für den durch <paramref name="expression" /> dargestellten Delegaten.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.InvocationExpression" />, das den angegebenen Delegaten oder Lambdaausdruck auf die bereitgestellten Argumente anwendet.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>Gibt einen Wert zurück, der angibt, ob der Ausdruck False ergibt.</summary>
      <param name="expression">Eine auszuwertende <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Gibt einen Wert zurück, der angibt, ob der Ausdruck False ergibt.</summary>
      <param name="expression">Eine auszuwertende <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, das die implementierende Methode darstellt.</param>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>Gibt einen Wert zurück, der angibt, ob der Ausdruck True ergibt.</summary>
      <param name="expression">Eine auszuwertende <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Gibt einen Wert zurück, der angibt, ob der Ausdruck True ergibt.</summary>
      <param name="expression">Eine auszuwertende <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, das die implementierende Methode darstellt.</param>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit Void-Typ und ohne Namen darstellt.</summary>
      <returns>Die neue <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LabelExpression" />, die eine Bezeichnung ohne Standardwert darstellt.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, dem diese <see cref="T:System.Linq.Expressions.LabelExpression" /> zugeordnet wird.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.LabelExpression" /> ohne Standardwert.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LabelExpression" />, die eine Bezeichnung mit dem angegebenen Standardwert darstellt.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, dem diese <see cref="T:System.Linq.Expressions.LabelExpression" /> zugeordnet wird.</param>
      <param name="defaultValue">Der Wert dieses <see cref="T:System.Linq.Expressions.LabelExpression" />, wenn die Bezeichnung über die normale Ablaufsteuerung erreicht wird.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.LabelExpression" /> mit dem angegebenen Standardwert.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit Void-Typ und dem angegebenen Namen darstellt.</summary>
      <param name="name">Der Name der Sprungmarke.</param>
      <returns>Die neue <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit dem angegebenen Typ darstellt.</summary>
      <param name="type">Der Werttyp, der beim Springen zur Bezeichnung übergeben wird.</param>
      <returns>Die neue <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit dem angegebenen Typ und Namen darstellt.</summary>
      <param name="type">Der Werttyp, der beim Springen zur Bezeichnung übergeben wird.</param>
      <param name="name">Der Name der Sprungmarke.</param>
      <returns>Die neue <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, indem zuerst aus dem Ausdruckskörper ein Delegattyp erstellt wird, einen Parameter, der angibt, ob die Endrekursionsoptimierung angewendet wird und eine aufzählbare Sammlung an Parameterausdrücken. Kann verwendet werden, wenn der Delegattyp zur Kompilierzeit nicht bekannt ist.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, das angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei dem die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich "Lambda" ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, indem zuerst aus dem Ausdruckskörper ein Delegattyp erstellt wird, einen Parameter, der angibt, ob Endrekursionsoptimierung angewendet wird und ein Array an Parameterausdrücken. Kann verwendet werden, wenn der Delegattyp zur Kompilierzeit nicht bekannt ist.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, das angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein Array, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, die zum Auffüllen der <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung verwendet werden.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei dem die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich "Lambda" ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, indem zuerst ein Delegattyp aus dem Ausdruckskörper erstellt und eine aufzählbare Sammlung an Parameterausdrücken erstellt wird. Kann verwendet werden, wenn der Delegattyp zur Kompilierzeit nicht bekannt ist.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei dem die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich "Lambda" ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, indem zuerst ein Delegattyp aus dem Ausdruckskörper erstellt und ein Array an Parameterausdrücken erstellt wird. Kann verwendet werden, wenn der Delegattyp zur Kompilierzeit nicht bekannt ist.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein Element von <paramref name="parameters" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> enthält mehr als sechzehn Elemente.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, indem zuerst aus dem Ausdruckskörper ein Delegattyp erstellt wird, den Lambdanamen, einen Parameter, der angibt, ob Endrekursionsoptimierung angewendet wird, und eine aufzählbare Sammlung an Parameterausdrücken. Kann verwendet werden, wenn der Delegattyp zur Kompilierzeit nicht bekannt ist.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="name">Der Name für den Lambdaausdruck. Wird zum Ausgeben von Debuginformationen verwendet.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, das angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei dem die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich "Lambda" ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, indem zuerst ein Delegattyp aus dem Ausdruckskörper erstellt wird, den Lambdanamen und eine aufzählbare Sammlung an Parameterausdrücken. Kann verwendet werden, wenn der Delegattyp zur Kompilierzeit nicht bekannt ist.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="name">Der Name für den Lambdaausdruck. Wird zum Ausgeben von Debuginformationen verwendet.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei dem die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich "Lambda" ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einem Parameter, der angibt, ob Endrekursionsoptimierung angewendet wird, und eine aufzählbare Sammlung von Parameterausdrücken.</summary>
      <param name="delegateType">Ein <see cref="P:System.Linq.Expressions.Expression.Type" />, die die Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, das angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei dem die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich "Lambda" ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einem Parameter, der angibt, ob Endrekursionsoptimierung angewendet wird, und ein Array von Parameterausdrücken.</summary>
      <param name="delegateType">Ein <see cref="P:System.Linq.Expressions.Expression.Type" />, die die Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, das angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein Array, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, die zum Auffüllen der <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung verwendet werden.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei dem die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich "Lambda" ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einer aufzählbaren Sammlung an Parameterausdrücken.</summary>
      <param name="delegateType">Ein <see cref="T:System.Type" />, das eine Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> oder <paramref name="body" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein <paramref name="parameters" />-Element ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> stellt keinen Delegattyp dar.  
  
- oder - 
 <paramref name="body" />.Type stellt einen Typ dar, der nicht dem Rückgabetyp des durch <paramref name="delegateType" /> dargestellten Delegatentyps zugeordnet werden kann.  
  
- oder - 
 <paramref name="parameters" /> enthält nicht dieselbe Anzahl an Elementen wie die Liste der Parameter für den durch <paramref name="delegateType" /> dargestellten Delegattyp.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="parameters" /> kann nicht dem Typ des entsprechenden Parametertyps des durch <paramref name="delegateType" /> dargestellten Delegattyps zugeordnet werden.</exception>
      <returns>Ein Objekt, das einen Lambdaausdruck darstellt, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einem Array von Parameterausdrücken.</summary>
      <param name="delegateType">Ein <see cref="T:System.Type" />, das eine Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> oder <paramref name="body" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein <paramref name="parameters" />-Element ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> stellt keinen Delegattyp dar.  
  
- oder - 
 <paramref name="body" />.Type stellt einen Typ dar, der nicht dem Rückgabetyp des durch <paramref name="delegateType" /> dargestellten Delegatentyps zugeordnet werden kann.  
  
- oder - 
 <paramref name="parameters" /> enthält nicht dieselbe Anzahl an Elementen wie die Liste der Parameter für den durch <paramref name="delegateType" /> dargestellten Delegattyp.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="parameters" /> kann nicht dem Typ des entsprechenden Parametertyps des durch <paramref name="delegateType" /> dargestellten Delegattyps zugeordnet werden.</exception>
      <returns>Ein Objekt, das einen Lambdaausdruck darstellt, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einem Lambdanamen, einem Parameter, der angibt, ob Endrekursionsoptimierung angewendet wird, und eine aufzählbare Sammlung von Parameterausdrücken.</summary>
      <param name="delegateType">Ein <see cref="P:System.Linq.Expressions.Expression.Type" />, die die Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="name">Der Name für den Lambdaausdruck. Wird zum Ausgeben von Debuginformationen verwendet.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, das angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei dem die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich "Lambda" ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einem Lambdanamen und einer aufzählbaren Sammlung an Parameterausdrücken.</summary>
      <param name="delegateType">Ein <see cref="P:System.Linq.Expressions.Expression.Type" />, die die Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="name">Der Name für den Lambdaausdruck. Wird zum Ausgeben von Debuginformationen verwendet.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei dem die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich "Lambda" ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einem Parameter, der angibt, ob Endrekursionsoptimierung angewendet wird, und eine aufzählbare Sammlung von Parameterausdrücken.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, das angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <typeparam name="TDelegate">Der Delegattyp.</typeparam>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einem Parameter, der angibt, ob Endrekursionsoptimierung angewendet wird, und ein Array von Parameterausdrücken.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, das angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein Array, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, die zum Auffüllen der <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung verwendet werden.</param>
      <typeparam name="TDelegate">Der Delegattyp.</typeparam>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einer aufzählbaren Sammlung an Parameterausdrücken.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <typeparam name="TDelegate">Ein Delegattyp.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein <paramref name="parameters" />-Element ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> ist kein Delegattyp.  
  
- oder - 
 <paramref name="body" />.Type stellt einen Typ dar, der nicht dem Rückgabetyp von <paramref name="TDelegate" /> zugeordnet werden kann.  
  
- oder - 
 <paramref name="parameters" /> enthält nicht die gleiche Anzahl an Elementen wie die Liste der Parameter für <paramref name="TDelegate" />.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="parameters" /> kann nicht dem Typ des entsprechenden Parametertyps von <paramref name="TDelegate" /> zugeordnet werden.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einem Array von Parameterausdrücken.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
      <typeparam name="TDelegate">Ein Delegattyp.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein <paramref name="parameters" />-Element ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> ist kein Delegattyp.  
  
- oder - 
 <paramref name="body" />.Type stellt einen Typ dar, der nicht dem Rückgabetyp von <paramref name="TDelegate" /> zugeordnet werden kann.  
  
- oder - 
 <paramref name="parameters" /> enthält nicht die gleiche Anzahl an Elementen wie die Liste der Parameter für <paramref name="TDelegate" />.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="parameters" /> kann nicht dem Typ des entsprechenden Parametertyps von <paramref name="TDelegate" /> zugeordnet werden.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einem Lambdanamen, einem Parameter, der angibt, ob Endrekursionsoptimierung angewendet wird, und eine aufzählbare Sammlung von Parameterausdrücken.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="name">Der Name des Lambdaausdrucks. Wird zum Generieren von Debuginformationen verwendet.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, das angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <typeparam name="TDelegate">Der Delegattyp.</typeparam>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />-Klasse, in der der Delegattyp zur Kompilierzeit bekannt ist, mit einem Lambdanamen und einer aufzählbaren Sammlung an Parameterausdrücken.</summary>
      <param name="body">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="name">Der Name des Lambdaausdrucks. Wird zum Generieren von Debuginformationen verwendet.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt werden soll.</param>
      <typeparam name="TDelegate">Der Delegattyp.</typeparam>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Linksschiebeoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Linksschiebeoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Linksschiebeoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Linksschiebeoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Linksschiebe-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Linksschiebe-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Linksschiebe-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Kleiner als"-Vergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der "Kleiner als"-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Kleiner als"-Vergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">
        <see langword="true" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="true" /> festzulegen, und <see langword="false" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="false" /> festzulegen.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der „Kleiner als“-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Kleiner oder gleich"-Vergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der "Kleiner oder gleich"-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Kleiner oder gleich"-Vergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">
        <see langword="true" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="true" /> festzulegen, und <see langword="false" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="false" /> festzulegen.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der "Kleiner oder gleich"-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei dem der Member ein Feld oder eine Eigenschaft ist.</summary>
      <param name="member">Eine <see cref="T:System.Reflection.MemberInfo" />, die ein Feld oder eine Eigenschaft darstellt, auf die die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ElementInit" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.  
  
- oder - 
Der <see cref="P:System.Reflection.FieldInfo.FieldType" /> oder der <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> des Felds oder der Eigenschaft, das bzw. die <paramref name="member" /> darstellt, implementiert <see cref="T:System.Collections.IEnumerable" /> nicht.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> ist und die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei dem der Member ein Feld oder eine Eigenschaft ist.</summary>
      <param name="member">Eine <see cref="T:System.Reflection.MemberInfo" />, die ein Feld oder eine Eigenschaft darstellt, auf die die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.  
  
- oder - 
Der <see cref="P:System.Reflection.FieldInfo.FieldType" /> oder der <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> des Felds oder der Eigenschaft, das bzw. die <paramref name="member" /> darstellt, implementiert <see cref="T:System.Collections.IEnumerable" /> nicht.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> ist und die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Erstellt auf der Grundlage einer angegebenen Eigenschaftenzugriffsmethode ein <see cref="T:System.Linq.Expressions.MemberListBinding" />-Objekt.</summary>
      <param name="propertyAccessor">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenaccessormethode darstellt.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ElementInit" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> stellt keine Eigenschaftenzugriffsmethode dar.  
  
- oder - 
Der <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> der Eigenschaft, auf die die durch <paramref name="propertyAccessor" />-dargestellte Methode zugreift, implementiert <see cref="T:System.Collections.IEnumerable" /> nicht.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> ist, die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.MemberInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird, und <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> mit den Elementen von <paramref name="initializers" /> aufgefüllt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Erstellt auf der Grundlage einer angegebenen Eigenschaftenaccessormethode ein <see cref="T:System.Linq.Expressions.MemberListBinding" />-Objekt.</summary>
      <param name="propertyAccessor">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenaccessormethode darstellt.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> stellt keine Eigenschaftenzugriffsmethode dar.  
  
- oder - 
Der <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> der Eigenschaft, auf die die durch <paramref name="propertyAccessor" />-dargestellte Methode zugreift, implementiert <see cref="T:System.Collections.IEnumerable" /> nicht.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> ist, die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.MemberInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird, und <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> mit den Elementen von <paramref name="initializers" /> aufgefüllt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die die angegebenen <see cref="T:System.Linq.Expressions.ElementInit" />-Objekte verwendet, um eine Auflistung zu initialisieren.</summary>
      <param name="newExpression">Ein <see cref="T:System.Linq.Expressions.NewExpression" />, auf das die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.ElementInit" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> ist und die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die eine Methode mit dem Namen "Add" verwendet, um einer Auflistung Elemente hinzuzufügen.</summary>
      <param name="newExpression">Ein <see cref="T:System.Linq.Expressions.NewExpression" />, auf das die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.Expression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">Es ist keine Instanzmethode namens „Add“ (ohne Beachtung der Groß-/Kleinschreibung) in <paramref name="newExpression" />.Type oder dessen Basistyp deklariert.  
  
- oder - 
Die Add-Methode in <paramref name="newExpression" />.Type oder dessen Basistyp nimmt nicht genau ein Argument entgegen.  
  
- oder - 
Der durch die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft dargestellte Typ des ersten Elements von <paramref name="initializers" /> lässt sich nicht dem Argumenttyp der Add-Methode in <paramref name="newExpression" />.Type oder dessen Basistyp zuweisen.  
  
- oder - 
Mehrere argumentkompatible Methoden namens „Add“ (ohne Beachtung der Groß-/Kleinschreibung) sind in <paramref name="newExpression" />.Type und/oder dessen Basistyp vorhanden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> und die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die die angegebenen <see cref="T:System.Linq.Expressions.ElementInit" />-Objekte verwendet, um eine Auflistung zu initialisieren.</summary>
      <param name="newExpression">Ein <see cref="T:System.Linq.Expressions.NewExpression" />, auf das die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> ist und die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die eine Methode mit dem Namen "Add" verwendet, um einer Auflistung Elemente hinzuzufügen.</summary>
      <param name="newExpression">Ein <see cref="T:System.Linq.Expressions.NewExpression" />, auf das die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">Es ist keine Instanzmethode namens „Add“ (ohne Beachtung der Groß-/Kleinschreibung) in <paramref name="newExpression" />.Type oder dessen Basistyp deklariert.  
  
- oder - 
Die Add-Methode in <paramref name="newExpression" />.Type oder dessen Basistyp nimmt nicht genau ein Argument entgegen.  
  
- oder - 
Der durch die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft dargestellte Typ des ersten Elements von <paramref name="initializers" /> lässt sich nicht dem Argumenttyp der Add-Methode in <paramref name="newExpression" />.Type oder dessen Basistyp zuweisen.  
  
- oder - 
Mehrere argumentkompatible Methoden namens „Add“ (ohne Beachtung der Groß-/Kleinschreibung) sind in <paramref name="newExpression" />.Type und/oder dessen Basistyp vorhanden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> und die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die eine angegebene Methode verwendet, um einer Auflistung Elemente hinzuzufügen.</summary>
      <param name="newExpression">Ein <see cref="T:System.Linq.Expressions.NewExpression" />, auf das die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="addMethod">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Instanzmethode namens "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) darstellt, die einer Auflistung ein Element hinzufügt.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.Expression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.  
  
- oder - 
 <paramref name="addMethod" /> ist nicht <see langword="null" /> und stellt keine Instanzmethode mit dem Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) dar, die genau ein Argument akzeptiert.  
  
- oder - 
 <paramref name="addMethod" /> ist nicht <see langword="null" />, und der durch die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft dargestellte Typ einer oder mehrerer Elemente von <paramref name="initializers" /> kann nicht dem Argumenttyp der durch <paramref name="addMethod" /> dargestellten Methode zugeordnet werden.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> ist <see langword="null" />, und in <paramref name="newExpression" />.Type oder seinem Basistyp ist keine Instanzmethode mit dem Namen "Add" vorhanden, die genau ein typkompatibles Argument akzeptiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> und die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die eine angegebene Methode verwendet, um einer Auflistung Elemente hinzuzufügen.</summary>
      <param name="newExpression">Ein <see cref="T:System.Linq.Expressions.NewExpression" />, auf das die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="addMethod">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Instanzmethode darstellt, die ein Argument akzeptiert und einer Auflistung ein Element hinzufügt.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist <see langword="null" />.  
  
- oder - 
Mindestens ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.  
  
- oder - 
 <paramref name="addMethod" /> ist nicht <see langword="null" /> und stellt keine Instanzmethode mit dem Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) dar, die genau ein Argument akzeptiert.  
  
- oder - 
 <paramref name="addMethod" /> ist nicht <see langword="null" />, und der durch die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft dargestellte Typ einer oder mehrerer Elemente von <paramref name="initializers" /> kann nicht dem Argumenttyp der durch <paramref name="addMethod" /> dargestellten Methode zugeordnet werden.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> ist <see langword="null" />, und in <paramref name="newExpression" />.Type oder seinem Basistyp ist keine Instanzmethode mit dem Namen "Add" vorhanden, die genau ein typkompatibles Argument akzeptiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> und die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LoopExpression" /> mit dem angegebenen Text.</summary>
      <param name="body">Der Text der Schleife.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LoopExpression" /> mit dem angegebenen Text und Break-Ziel.</summary>
      <param name="body">Der Text der Schleife.</param>
      <param name="break">Das vom Schleifentext verwendete Break-Ziel.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LoopExpression" /> mit dem angegebenen Text.</summary>
      <param name="body">Der Text der Schleife.</param>
      <param name="break">Das vom Schleifentext verwendete Break-Ziel.</param>
      <param name="continue">Das vom Schleifentext verwendete Continue-Ziel.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt bei gegebenem linken und rechten Operanden durch Aufrufen einer geeigneten Factorymethode eine <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <param name="binaryType">Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der den Typ der binären Operation angibt.</param>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den linken Operanden darstellt.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den rechten Operanden darstellt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> entspricht keinem Knoten mit einem binären Ausdruck.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <returns>Der <see cref="T:System.Linq.Expressions.BinaryExpression" />, der aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt bei gegebenem linken und rechten Operanden sowie gegebener implementierender Methode eine <see cref="T:System.Linq.Expressions.BinaryExpression" /> durch Aufrufen der geeigneten Factorymethode.</summary>
      <param name="binaryType">Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der den Typ der binären Operation angibt.</param>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den linken Operanden darstellt.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den rechten Operanden darstellt.</param>
      <param name="liftToNull">
        <see langword="true" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="true" /> festzulegen, und <see langword="false" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="false" /> festzulegen.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode angibt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> entspricht keinem Knoten mit einem binären Ausdruck.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <returns>Der <see cref="T:System.Linq.Expressions.BinaryExpression" />, der aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt bei gegebenem linken und rechten Operanden sowie gegebener implementierender Methode und Typkonvertierungsfunktion eine <see cref="T:System.Linq.Expressions.BinaryExpression" /> durch Aufrufen der geeigneten Factorymethode.</summary>
      <param name="binaryType">Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der den Typ der binären Operation angibt.</param>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den linken Operanden darstellt.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den rechten Operanden darstellt.</param>
      <param name="liftToNull">
        <see langword="true" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="true" /> festzulegen, und <see langword="false" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="false" /> festzulegen.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode angibt.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, die eine Typkonvertierungsfunktion darstellt. Dieser Parameter wird nur verwendet, wenn <paramref name="binaryType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> oder eine zusammengesetzte Zuweisung ist.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> entspricht keinem Knoten mit einem binären Ausdruck.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <returns>Der <see cref="T:System.Linq.Expressions.BinaryExpression" />, der aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.CatchBlock" />, der eine Catch-Anweisung mit den angegebenen Elementen darstellt.</summary>
      <param name="type">Der <see cref="P:System.Linq.Expressions.Expression.Type" /> von <see cref="T:System.Exception" />, der von diesem <see cref="T:System.Linq.Expressions.CatchBlock" /> behandelt wird.</param>
      <param name="variable">Eine <see cref="T:System.Linq.Expressions.ParameterExpression" />, die einen Verweis auf das von diesem Handler aufgefangene <see cref="T:System.Exception" />-Objekt darstellt.</param>
      <param name="body">Der Text der Catch-Anweisung.</param>
      <param name="filter">Der Text des <see cref="T:System.Exception" />-Filters.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und ein Argument darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das Argument des dynamischen Vorgangs.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und zwei Argumente darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und drei Argumente darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und vier Argumente darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
      <param name="arg3">Das vierte Argument des dynamischen Vorgangs.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <param name="delegateType">Der Typ des vom <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Der Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.Expression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die einen Sprung der angegebenen <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> darstellt. Der beim Springen an die Bezeichnung übergebene Wert kann ebenfalls angegeben werden.</summary>
      <param name="kind">Das <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> des <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf den die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich <paramref name="kind" /> ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, die den Zugriff auf eine indizierte Eigenschaft in einem Objekt darstellt.</summary>
      <param name="instance">Das Objekt, zu dem die Eigenschaft gehört. Sollte NULL sein, wenn die Eigenschaft <see langword="static" /> (<see langword="shared" /> in Visual Basic) ist.</param>
      <param name="indexer">Eine <see cref="T:System.Linq.Expressions.Expression" />, die die zu indizierende Eigenschaft darstellt.</param>
      <param name="arguments">Eine <c>IEnumerable&lt;Expression&gt;</c>-Schnittstelle (<c>IEnumerable (Of Expression)</c> in Visual Basic), die die Argumente enthält, mit denen die Eigenschaft indiziert wird.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf ein Feld oder eine Eigenschaft darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das das Objekt darstellt, dem der Member angehört. Kann für statische Member NULL sein.</param>
      <param name="member">Die <see cref="T:System.Reflection.MemberInfo" />, die das Feld oder die Eigenschaft beschreibt, auf das bzw. die ein Zugriff erfolgen soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.</exception>
      <returns>Der <see cref="T:System.Linq.Expressions.MemberExpression" />, der aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TryExpression" />, die einen Try-Block mit den angegebenen Elementen darstellt.</summary>
      <param name="type">Der Ergebnistyp des Try-Ausdrucks. Bei NULL müssen Text und alle Handler vom selben Typ sein.</param>
      <param name="body">Der Text des Try-Blocks.</param>
      <param name="finally">Der Text des Finally-Blocks. Übergeben Sie NULL, wenn dem Try-Block kein Finally-Block zugeordnet ist.</param>
      <param name="fault">Der Text des Fault-Blocks. Übergeben Sie NULL, wenn dem Try-Block kein Fault-Block zugeordnet ist.</param>
      <param name="handlers">Eine Auflistung von <see cref="T:System.Linq.Expressions.CatchBlock" />s, die die dem Try-Block zugeordneten Catch-Anweisungen darstellen.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt bei gegebenem Operanden eine <see cref="T:System.Linq.Expressions.UnaryExpression" /> durch Aufrufen der entsprechenden Factorymethode.</summary>
      <param name="unaryType">Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der den Typ der unären Operation angibt.</param>
      <param name="operand">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den Operanden darstellt.</param>
      <param name="type">Der <see cref="T:System.Type" />, der den zu konvertierenden Typ angibt (übergeben Sie <see langword="null" />, wenn dies nicht benötigt wird).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> entspricht keinem Knoten mit einem unären Ausdruck.</exception>
      <returns>Der <see cref="T:System.Linq.Expressions.UnaryExpression" />, der aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Erstellt bei gegebenem Operanden und gegebener implementierenden Methode eine <see cref="T:System.Linq.Expressions.UnaryExpression" /> durch Aufrufen der entsprechenden Factorymethode.</summary>
      <param name="unaryType">Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der den Typ der unären Operation angibt.</param>
      <param name="operand">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den Operanden darstellt.</param>
      <param name="type">Der <see cref="T:System.Type" />, der den zu konvertierenden Typ angibt (übergeben Sie <see langword="null" />, wenn dies nicht benötigt wird).</param>
      <param name="method">Die <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> entspricht keinem Knoten mit einem unären Ausdruck.</exception>
      <returns>Der <see cref="T:System.Linq.Expressions.UnaryExpression" />, der aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, das die rekursive Initialisierung der Member eines Felds oder einer Eigenschaft darstellt.</summary>
      <param name="member">Die <see cref="T:System.Reflection.MemberInfo" />, auf das die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft festgelegt werden soll.</param>
      <param name="bindings">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> oder <paramref name="bindings" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den Typ des durch <paramref name="member" /> dargestellten Felds bzw. der Eigenschaft aufweist.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> ist und die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, das die rekursive Initialisierung der Member eines Felds oder einer Eigenschaft darstellt.</summary>
      <param name="member">Die <see cref="T:System.Reflection.MemberInfo" />, auf das die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft festgelegt werden soll.</param>
      <param name="bindings">Ein Array von <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> oder <paramref name="bindings" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den Typ des durch <paramref name="member" /> dargestellten Felds bzw. der Eigenschaft aufweist.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> ist und die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, das die rekursive Initialisierung der Member eines Members darstellt, auf den durch eine Eigenschaftenzugriffsmethode zugegriffen wird.</summary>
      <param name="propertyAccessor">Die <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenzugriffsmethode darstellt.</param>
      <param name="bindings">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> oder <paramref name="bindings" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> stellt keine Eigenschaftenzugriffsmethode dar.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den Typ der Eigenschaft aufweist, auf die in der durch <paramref name="propertyAccessor" /> dargestellten Methode zugegriffen wird.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> ist, die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird, und die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Eigenschaften auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, das die rekursive Initialisierung der Member eines Members darstellt, auf den durch eine Eigenschaftenzugriffsmethode zugegriffen wird.</summary>
      <param name="propertyAccessor">Die <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenzugriffsmethode darstellt.</param>
      <param name="bindings">Ein Array von <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> oder <paramref name="bindings" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> stellt keine Eigenschaftenzugriffsmethode dar.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den Typ der Eigenschaft aufweist, auf die in der durch <paramref name="propertyAccessor" /> dargestellten Methode zugegriffen wird.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> ist, die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird, und die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Eigenschaften auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Stellt einen Ausdruck dar, der ein neues Objekt erstellt und eine Eigenschaft des Objekts initialisiert.</summary>
      <param name="newExpression">Ein <see cref="T:System.Linq.Expressions.NewExpression" />, auf das die <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="bindings">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="bindings" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den durch <paramref name="newExpression" />.Type dargestellten Typ aufweist.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberInitExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> ist und die <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <param name="newExpression">Ein <see cref="T:System.Linq.Expressions.NewExpression" />, auf das die <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="bindings">Ein Array von <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="bindings" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den durch <paramref name="newExpression" />.Type dargestellten Typ aufweist.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberInitExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> ist und die <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Restoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Modulo-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Restoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Modulusoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, das eine Restzuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, das eine Restzuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, das eine Restzuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Multiplikation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Multiplikationsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Multiplikation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Multiplikationsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Multiplikation mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Multiplikationsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Multiplikation mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Multiplikationsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die einen arithmetischen Negationsvorgang darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der unäre Minusoperator ist für <paramref name="expression" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die einen arithmetischen Negationsvorgang darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dadurch dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der unäre Minusoperator ist für <paramref name="expression" />.Type nicht definiert.  
  
- oder - 
 <paramref name="expression" />.Type (oder, sofern der Typ NULL-Werte zulässt, der entsprechende Typ, der keine NULL-Werte zulässt) kann nicht dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode zugeordnet werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine arithmetische Negationsoperation mit Überlaufprüfung darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der unäre Minusoperator ist für <paramref name="expression" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine arithmetische Negationsoperation mit Überlaufprüfung darstellt. Die implementierende Methode kann angegeben werden.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dadurch dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der unäre Minusoperator ist für <paramref name="expression" />.Type nicht definiert.  
  
- oder - 
 <paramref name="expression" />.Type (oder, sofern der Typ NULL-Werte zulässt, der entsprechende Typ, der keine NULL-Werte zulässt) kann nicht dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode zugeordnet werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des angegebenen Konstruktors darstellt, der keine Argumente akzeptiert.</summary>
      <param name="constructor">Die <see cref="T:System.Reflection.ConstructorInfo" />, auf das die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Der durch <paramref name="constructor" /> darstellte Konstruktor verfügt über mindestens einen Parameter.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.NewExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> und die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des angegebenen Konstruktors mit den angegebenen Argumenten darstellt.</summary>
      <param name="constructor">Die <see cref="T:System.Reflection.ConstructorInfo" />, auf das die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.Expression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="arguments" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Der <paramref name="arguments" />-Parameter enthält nicht dieselbe Anzahl an Elementen wie die Anzahl der Parameter für den durch <paramref name="constructor" /> dargestellten Konstruktor.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des Konstruktors zugewiesen werden, der durch <paramref name="constructor" /> dargestellt wird.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.NewExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> ist und die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des angegebenen Konstruktors mit den angegebenen Argumenten darstellt. Es werden die Member angegeben, die auf die durch den Konstruktor initialisierten Felder zugreifen.</summary>
      <param name="constructor">Die <see cref="T:System.Reflection.ConstructorInfo" />, auf das die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.Expression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Auflistung aufgefüllt werden soll.</param>
      <param name="members">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Reflection.MemberInfo" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Members" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="arguments" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="members" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Der <paramref name="arguments" />-Parameter enthält nicht dieselbe Anzahl an Elementen wie die Anzahl der Parameter für den durch <paramref name="constructor" /> dargestellten Konstruktor.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des Konstruktors zugewiesen werden, der durch <paramref name="constructor" /> dargestellt wird.  
  
- oder - 
Der <paramref name="members" />-Parameter weist nicht die gleiche Anzahl an Elementen auf wie <paramref name="arguments" />.  
  
- oder - 
Ein Element von <paramref name="arguments" /> weist eine <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf, die einen Typ darstellt, der nicht dem Typ des Members zugeordnet werden kann, der durch das entsprechende Element von <paramref name="members" /> dargestellt wird.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.NewExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> und <see cref="P:System.Linq.Expressions.NewExpression.Members" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des angegebenen Konstruktors mit den angegebenen Argumenten darstellt. Es werden die Member als Array angegeben, die auf die durch den Konstruktor initialisierten Felder zugreifen.</summary>
      <param name="constructor">Die <see cref="T:System.Reflection.ConstructorInfo" />, auf das die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.Expression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Auflistung aufgefüllt werden soll.</param>
      <param name="members">Ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Members" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="arguments" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="members" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Der <paramref name="arguments" />-Parameter enthält nicht dieselbe Anzahl an Elementen wie die Anzahl der Parameter für den durch <paramref name="constructor" /> dargestellten Konstruktor.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des Konstruktors zugewiesen werden, der durch <paramref name="constructor" /> dargestellt wird.  
  
- oder - 
Der <paramref name="members" />-Parameter weist nicht die gleiche Anzahl an Elementen auf wie <paramref name="arguments" />.  
  
- oder - 
Ein Element von <paramref name="arguments" /> weist eine <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf, die einen Typ darstellt, der nicht dem Typ des Members zugeordnet werden kann, der durch das entsprechende Element von <paramref name="members" /> dargestellt wird.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.NewExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> und <see cref="P:System.Linq.Expressions.NewExpression.Members" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des angegebenen Konstruktors mit den angegebenen Argumenten darstellt.</summary>
      <param name="constructor">Die <see cref="T:System.Reflection.ConstructorInfo" />, auf das die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="arguments" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die Länge von <paramref name="arguments" /> entspricht der Anzahl von Parametern für den Konstruktor, der durch <paramref name="constructor" /> dargestellt wird.  
  
- oder - 
Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des Konstruktors zugewiesen werden, der durch <paramref name="constructor" /> dargestellt wird.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.NewExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> ist und die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des Konstruktors vom angegebenen Typ ohne Parameter darstellt.</summary>
      <param name="type">Ein <see cref="T:System.Type" /> mit einem Konstruktor, der keine Argumente akzeptiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Der durch <paramref name="type" /> darstellte Typ weist keinen Konstruktor ohne Parameter auf.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.NewExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> ist und die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft auf die <see cref="T:System.Reflection.ConstructorInfo" /> festgelegt ist, die den Konstruktor ohne Parameter für den angegebenen Typ darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, die das Erstellen eines Arrays mit dem angegebenen Rang darstellt.</summary>
      <param name="type">Ein <see cref="T:System.Type" />, der den Elementtyp des Arrays darstellt.</param>
      <param name="bounds">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.Expression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> oder <paramref name="bounds" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="bounds" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="bounds" /> stellt keinen ganzzahligen Typ dar.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.NewArrayExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> und die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, die das Erstellen eines Arrays mit dem angegebenen Rang darstellt.</summary>
      <param name="type">Ein <see cref="T:System.Type" />, der den Elementtyp des Arrays darstellt.</param>
      <param name="bounds">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> oder <paramref name="bounds" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="bounds" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="bounds" /> stellt keinen ganzzahligen Typ dar.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.NewArrayExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> und die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, die das Erstellen eines eindimensionalen Arrays und Initialisieren dieses Arrays aus einer Liste von Elementen darstellt.</summary>
      <param name="type">Ein <see cref="T:System.Type" />, der den Elementtyp des Arrays darstellt.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <see cref="T:System.Linq.Expressions.Expression" />-Objekte enthält, mit denen die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Auflistung aufgefüllt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> oder <paramref name="initializers" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="initializers" /> stellt einen Typ dar, der nicht dem durch <paramref name="type" /> dargestellten Typ zugeordnet werden kann.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.NewArrayExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> und die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, die das Erstellen eines eindimensionalen Arrays und Initialisieren dieses Arrays aus einer Liste von Elementen darstellt.</summary>
      <param name="type">Ein <see cref="T:System.Type" />, der den Elementtyp des Arrays darstellt.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> oder <paramref name="initializers" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="initializers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="initializers" /> stellt einen Typ dar, der nicht dem <paramref name="type" />-Typ zugeordnet werden kann.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.NewArrayExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> und die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine bitweise Komplementoperation darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der unäre Not-Operator ist für <paramref name="expression" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine bitweise Komplementoperation darstellt. Die implementierende Methode kann angegeben werden.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dadurch dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der unäre Not-Operator ist für <paramref name="expression" />.Type nicht definiert.  
  
- oder - 
 <paramref name="expression" />.Type (oder, sofern der Typ NULL-Werte zulässt, der entsprechende Typ, der keine NULL-Werte zulässt) kann nicht dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode zugeordnet werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Ungleichheitsvergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Ungleichheitsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Ungleichheitsvergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">
        <see langword="true" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="true" /> festzulegen, und <see langword="false" />, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf <see langword="false" /> festzulegen.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Ungleichheitsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>Gibt den Ausdruck zurück, der das Ones-Komplement darstellt.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Gibt den Ausdruck zurück, der das Ones-Komplement darstellt.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, das die implementierende Methode darstellt.</param>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen bitweisen <see langword="OR" />-Vorgang darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der bitweise <see langword="OR" />-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen bitweisen <see langword="OR" />-Vorgang darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der bitweise <see langword="OR" />-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise OR-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise OR-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise OR-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen bedingten <see langword="OR" />-Vorgang darstellt, bei dem der zweite Operand nur ausgewertet wird, wenn der erste Operand als <see langword="false" /> ausgewertet wird.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der bitweise <see langword="OR" />-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.  
  
- oder - 
 <paramref name="left" />.Type und <paramref name="right" />.Type weisen nicht denselben booleschen Typ auf.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen bedingten <see langword="OR" />-Vorgang darstellt, bei dem der zweite Operand nur ausgewertet wird, wenn der erste Operand als <see langword="false" /> ausgewertet wird.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der bitweise <see langword="OR" />-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.  
  
- oder - 
 <paramref name="method" /> ist <see langword="null" />, und <paramref name="left" />.Type sowie <paramref name="right" />.Type weisen nicht denselben booleschen Typ auf.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten, der verwendet werden kann, um einen Parameter oder eine Variable in einer Ausdrucksbaumstruktur zu identifizieren.</summary>
      <param name="type">Der Typ des Parameters oder der Variable.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten mit dem angegebenen Namen und Typ.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten, der verwendet werden kann, um einen Parameter oder eine Variable in einer Ausdrucksbaumstruktur zu identifizieren.</summary>
      <param name="type">Der Typ des Parameters oder der Variable.</param>
      <param name="name">Der Name des Parameters oder der Variable (wird nur zum Debuggen oder Drucken verwendet).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> ist <see langword="null" />.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.ParameterExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> ist und die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die die Zuweisung des Ausdrucks mit einer nachfolgenden Verringerung des ursprünglichen Ausdruckswerts um 1 darstellt.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die die Zuweisung des Ausdrucks mit einer nachfolgenden Verringerung des ursprünglichen Ausdruckswerts um 1 darstellt.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, das die implementierende Methode darstellt.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die die Zuweisung des Ausdrucks mit einer nachfolgenden Erhöhung des ursprünglichen Ausdruckswerts um 1 darstellt.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die die Zuweisung des Ausdrucks mit einer nachfolgenden Erhöhung des ursprünglichen Ausdruckswerts um 1 darstellt.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, das die implementierende Methode darstellt.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Potenzieren einer Zahl darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Potenzierungsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.  
  
- oder - 
 <paramref name="left" />.Type und/oder <paramref name="right" />.Type sind nicht <see cref="T:System.Double" />festzulegen.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Potenzieren einer Zahl darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Exponentialoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.  
  
- oder - 
 <paramref name="method" /> ist <see langword="null" />, und <paramref name="left" />.Type und/oder <paramref name="right" />.Type sind nicht <see cref="T:System.Double" />.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Potenzieren eines Ausdrucks und erneute Zuordnen des Ergebnisses zum Ausdruck darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Potenzieren eines Ausdrucks und erneute Zuordnen des Ergebnisses zum Ausdruck darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Potenzieren eines Ausdrucks und erneute Zuordnen des Ergebnisses zum Ausdruck darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den Ausdruckswert um 1 verringert und das Ergebnis wieder dem Ausdruck zuordnet.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den Ausdruckswert um 1 verringert und das Ergebnis wieder dem Ausdruck zuordnet.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, das die implementierende Methode darstellt.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den Ausdruckswert um 1 erhöht und das Ergebnis wieder dem Ausdruck zuordnet.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den Ausdruckswert um 1 erhöht und das Ergebnis wieder dem Ausdruck zuordnet.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, das die implementierende Methode darstellt.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf eine Eigenschaft durch das Verwenden einer Eigenschaftenzugriffsmethode darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft festgelegt werden soll. Dies kann für statische Eigenschaften NULL sein.</param>
      <param name="propertyAccessor">Die <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenzugriffsmethode darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> ist <see langword="null" />.  
  
- oder - 
Die durch <paramref name="propertyAccessor" /> dargestellte Methode ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic), und <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type kann dem deklarierenden Typ der durch <paramref name="propertyAccessor" /> dargestellten Methode nicht zugewiesen werden.  
  
- oder - 
Die durch <paramref name="propertyAccessor" /> dargestellte Methode ist keine Eigenschaftenaccessormethode.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist, die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft auf <paramref name="expression" /> festgelegt ist und die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf eine Eigenschaft darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft festgelegt werden soll. Dies kann für statische Eigenschaften NULL sein.</param>
      <param name="property">Die <see cref="T:System.Reflection.PropertyInfo" />, auf das die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> ist <see langword="null" />.  
  
- oder - 
Die durch <paramref name="property" /> dargestellte Eigenschaft ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic), und <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type kann nicht dem deklarierenden Typ des Felds zugeordnet werden, das durch <paramref name="property" /> dargestellt wird.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist und die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, die den Zugriff auf eine indizierte Eigenschaft darstellt.</summary>
      <param name="instance">Das Objekt, zu dem die Eigenschaft gehört. Wenn die Eigenschaft statisch/freigegeben ist, muss sie NULL sein.</param>
      <param name="indexer">Das <see cref="T:System.Reflection.PropertyInfo" />, das die zu indizierende Eigenschaft darstellt.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die zum Indizieren der Eigenschaft verwendet werden.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, die den Zugriff auf eine indizierte Eigenschaft darstellt.</summary>
      <param name="instance">Das Objekt, zu dem die Eigenschaft gehört. Wenn die Eigenschaft statisch/freigegeben ist, muss sie NULL sein.</param>
      <param name="indexer">Das <see cref="T:System.Reflection.PropertyInfo" />, das die zu indizierende Eigenschaft darstellt.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die zum Indizieren der Eigenschaft verwendet werden.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf eine Eigenschaft darstellt.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, deren <see cref="P:System.Linq.Expressions.Expression.Type" /> eine Eigenschaft namens <paramref name="propertyName" /> enthält. Dies kann für statische Eigenschaften <see langword="null" /> sein.</param>
      <param name="propertyName">Der Name der Eigenschaft, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="propertyName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">In <paramref name="propertyName" />.Type oder den entsprechenden Basistypen ist keine Eigenschaft mit dem Namen <paramref name="expression" /> definiert.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist, die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft auf <paramref name="expression" /> festgelegt ist und die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> festgelegt ist, die die durch <paramref name="propertyName" /> angegebene Eigenschaft darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, die den Zugriff auf eine indizierte Eigenschaft darstellt.</summary>
      <param name="instance">Das Objekt, zu dem die Eigenschaft gehört. Wenn die Eigenschaft statisch/freigegeben ist, muss sie NULL sein.</param>
      <param name="propertyName">Der Name des Indexers.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die zum Indizieren der Eigenschaft verwendet werden.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die auf eine Eigenschaft zugreift.</summary>
      <param name="expression">Das enthaltende Objekt der Eigenschaft. Dies kann für statische Eigenschaften NULL sein.</param>
      <param name="type">Der <see cref="P:System.Linq.Expressions.Expression.Type" />, der die Eigenschaft enthält.</param>
      <param name="propertyName">Die Eigenschaft, auf die zugegriffen werden soll.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf eine Eigenschaft oder ein Feld darstellt.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, deren <see cref="P:System.Linq.Expressions.Expression.Type" /> eine Eigenschaft oder ein Feld namens <paramref name="propertyOrFieldName" /> enthält. Kann für statische Member NULL sein.</param>
      <param name="propertyOrFieldName">Der Name einer Eigenschaft oder eines Felds, auf die bzw. das zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="propertyOrFieldName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">In <paramref name="propertyOrFieldName" />.Type oder seinen Basistypen ist keine Eigenschaft bzw. kein Feld mit dem Namen <paramref name="expression" /> definiert.</exception>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist, die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft auf <paramref name="expression" /> festgelegt ist und die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> oder <see cref="T:System.Reflection.FieldInfo" /> festgelegt ist, die die durch <paramref name="propertyOrFieldName" /> angegebene Eigenschaft bzw. das Feld darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die einen Ausdruck mit einem konstanten Wert vom Typ <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist <see langword="null" />.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>Reduziert diesen Knoten zu einem einfacheren Ausdruck. Wenn CanReduce true zurückgibt, sollte ein gültiger Ausdruck zurückgegeben werden. Diese Methode kann einen anderen Knoten zurückgeben, der selbst reduziert werden muss.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>Reduziert diesen Knoten zu einem einfacheren Ausdruck. Wenn CanReduce true zurückgibt, sollte ein gültiger Ausdruck zurückgegeben werden. Diese Methode kann einen anderen Knoten zurückgeben, der selbst reduziert werden muss.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>Reduziert den Ausdruck zu einem bekannten Knotentyp (kein Erweiterungsknoten) oder gibt nur den Ausdruck zurück, wenn es sich um einen bereits bekannten Typ handelt.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Verweisgleichheitsvergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Verweisungleichheitsvergleich darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das erneute Auslösen einer Ausnahme darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das erneute Auslösen einer Ausnahme darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das erneute Auslösen einer Ausnahme eines angegebenen Typs darstellt.</summary>
      <param name="type">Der neue <see cref="T:System.Type" /> des Ausdrucks.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das erneute Auslösen einer Ausnahme darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Return-Anweisung darstellt.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Return", die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und beim Springen ein NULL-Wert an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Return-Anweisung darstellt. Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Continue" ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Return-Anweisung mit dem angegebenen Typ darstellt. Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf den die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Continue" ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Return-Anweisung mit dem angegebenen Typ darstellt.</summary>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf den die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich "Return" ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen ein NULL-Wert an die Zielbezeichnung übergeben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Rechtsschiebeoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Rechtsschiebeoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Rechtsschiebeoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Rechtsschiebeoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Rechtsschiebe-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Rechtsschiebe-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Rechtsschiebe-Zuweisungsoperation darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <param name="variables">Eine Auflistung von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />-Auflistung aufgefüllt wird.</param>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> ist und die <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <param name="variables">Ein Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />-Auflistung aufgefüllt wird.</param>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> ist und die <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Subtraktion ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Subtraktionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Subtraktion ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Subtraktionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Ein <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Subtraktion mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Subtraktionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> ist und die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Subtraktion mit Überlaufprüfung darstellt.</summary>
      <param name="left">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der Subtraktionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine <see langword="switch" />-Anweisung mit einem Standardfall darstellt.</summary>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="defaultBody">Das Ergebnis des Schalters, wenn <paramref name="switchValue" /> mit keinem der Fälle übereinstimmt.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine <see langword="switch" />-Anweisung mit einem Standardfall darstellt.</summary>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="defaultBody">Das Ergebnis des Schalters, wenn <paramref name="switchValue" /> mit keinem der Fälle übereinstimmt.</param>
      <param name="comparison">Die zu verwendende Methode für den Gleichheitsvergleich.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine <see langword="switch" />-Anweisung mit einem Standardfall darstellt.</summary>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="defaultBody">Das Ergebnis des Schalters, wenn <paramref name="switchValue" /> mit keinem der Fälle übereinstimmt.</param>
      <param name="comparison">Die zu verwendende Methode für den Gleichheitsvergleich.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine <see langword="switch" />-Anweisung ohne Standardfall darstellt.</summary>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine <see langword="switch" />-Anweisung mit einem Standardfall darstellt.</summary>
      <param name="type">Der Ergebnistyp des Schalters.</param>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="defaultBody">Das Ergebnis des Schalters, wenn <paramref name="switchValue" /> mit keinem der Fälle übereinstimmt.</param>
      <param name="comparison">Die zu verwendende Methode für den Gleichheitsvergleich.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine <see langword="switch" />-Anweisung mit einem Standardfall darstellt.</summary>
      <param name="type">Der Ergebnistyp des Schalters.</param>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="defaultBody">Das Ergebnis des Schalters, wenn <paramref name="switchValue" /> mit keinem der Fälle übereinstimmt.</param>
      <param name="comparison">Die zu verwendende Methode für den Gleichheitsvergleich.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.SwitchCase" />-Objekt, das in einem <see cref="T:System.Linq.Expressions.SwitchExpression" />-Objekt verwendet werden soll.</summary>
      <param name="body">Der Text des Falls.</param>
      <param name="testValues">Die Testwerte des Falls.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.SwitchCase" /> zur Verwendung in einem <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <param name="body">Der Text des Falls.</param>
      <param name="testValues">Die Testwerte des Falls.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">Ein <see cref="T:System.String" />, auf den <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, bei der die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">Ein <see cref="T:System.String" />, auf den <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> festgelegt werden soll.</param>
      <param name="language">Ein <see cref="T:System.Guid" />, auf den <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, bei der die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />-Eigenschaft und die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">Ein <see cref="T:System.String" />, auf den <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> festgelegt werden soll.</param>
      <param name="language">Ein <see cref="T:System.Guid" />, auf den <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> festgelegt werden soll.</param>
      <param name="languageVendor">Ein <see cref="T:System.Guid" />, auf den <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, bei der die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />-Eigenschaft, die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />-Eigenschaft und die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">Ein <see cref="T:System.String" />, auf den <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> festgelegt werden soll.</param>
      <param name="language">Ein <see cref="T:System.Guid" />, auf den <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> festgelegt werden soll.</param>
      <param name="languageVendor">Ein <see cref="T:System.Guid" />, auf den <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> festgelegt werden soll.</param>
      <param name="documentType">Ein <see cref="T:System.Guid" />, auf den <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> festgelegt werden soll.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, bei der die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />-Eigenschaft, die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />-Eigenschaft, die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />-Eigenschaft und die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das Auslösen einer Ausnahme darstellt.</summary>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die die Ausnahme darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das Auslösen einer Ausnahme eines angegebenen Typs darstellt.</summary>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">Der neue <see cref="T:System.Type" /> des Ausdrucks.</param>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die die Ausnahme darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>Gibt eine Textdarstellung des <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Eine Textdarstellung der <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TryExpression" />, die einen Try-Block mit einer beliebigen Anzahl von Catch-Anweisungen ohne Fault- und Finally-Block darstellt.</summary>
      <param name="body">Der Text des Try-Blocks.</param>
      <param name="handlers">Das Array von 0 oder mehr <see cref="T:System.Linq.Expressions.CatchBlock" />-Ausdrücken, die die dem Try-Block zuzuordnenden Catch-Anweisungen darstellen.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TryExpression" />, die einen Try-Block mit einer beliebigen Anzahl von Catch-Anweisungen und einem Finally-Block darstellt.</summary>
      <param name="body">Der Text des Try-Blocks.</param>
      <param name="finally">Der Text des Finally-Blocks.</param>
      <param name="handlers">Das Array von 0 oder mehr <see cref="T:System.Linq.Expressions.CatchBlock" />-Ausdrücken, die die dem Try-Block zuzuordnenden Catch-Anweisungen darstellen.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TryExpression" />, die einen Try-Block mit einem Fault-Block ohne Catch-Anweisungen darstellt.</summary>
      <param name="body">Der Text des Try-Blocks.</param>
      <param name="fault">Der Text des Fault-Blocks.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TryExpression" />, die einen Try-Block mit einem Finally-Block ohne Catch-Anweisungen darstellt.</summary>
      <param name="body">Der Text des Try-Blocks.</param>
      <param name="finally">Der Text des Finally-Blocks.</param>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>Erstellt ein <see cref="P:System.Linq.Expressions.Expression.Type" />-Objekt, das einen generischen System.Action-Delegattyp mit bestimmten Typargumenten darstellt.</summary>
      <param name="typeArgs">Ein Array von Type-Objekten, die die Typargumente für den System.Action-Delegattyp angeben.</param>
      <param name="actionType">Enthält nach dem Beenden dieser Methode den generischen System.Action-Delegattyp mit bestimmten Typargumenten. Enthält NULL, wenn kein generischer System. Action-Delegat vorhanden ist, der mit übereinstimmt <paramref name="typeArgs" /> . Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns>
        <see langword="true" />, wenn ein generischer System.Action-Delegattyp für bestimmte <paramref name="typeArgs" /> erstellt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>Erstellt ein <see cref="P:System.Linq.Expressions.Expression.Type" />-Objekt, das einen generischen System.Func-Delegattyp mit bestimmten Typargumenten darstellt. Das letzte Typargument gibt den Rückgabetyp des erstellten Delegaten an.</summary>
      <param name="typeArgs">Ein Array von Type-Objekten, die die Typargumente für den System.Func-Delegattyp angeben.</param>
      <param name="funcType">Enthält nach dem Beenden dieser Methode den generischen System.Func-Delegattyp mit bestimmten Typargumenten. Enthält NULL, wenn kein generischer System. Func-Delegat vorhanden ist, der mit übereinstimmt <paramref name="typeArgs" /> . Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns>
        <see langword="true" />, wenn ein generischer System.Func-Delegattyp für bestimmte <paramref name="typeArgs" /> erstellt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine explizite Verweis- oder Boxingkonvertierung darstellt, bei der <see langword="null" /> zurückgegeben wird, wenn bei der Konvertierung ein Fehler auftritt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Ein <see cref="T:System.Type" />, auf das die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist <see langword="null" />.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, die die Laufzeittypidentität vergleicht.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="T:System.Linq.Expressions.Expression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Ein <see cref="P:System.Linq.Expressions.Expression.Type" />, auf das die <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />-Eigenschaft festgelegt werden soll.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> ist und die <see cref="T:System.Linq.Expressions.Expression" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Ein <see cref="P:System.Linq.Expressions.Expression.Type" />, auf das die <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist <see langword="null" />.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> ist und die <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine unäre Plusoperation darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der unäre Plus-Operator ist für <paramref name="expression" />.Type nicht definiert.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine unäre Plusoperation darstellt.</summary>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Ein <see cref="T:System.Reflection.MethodInfo" />, auf das die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht <see langword="null" />, und die dadurch dargestellte Methode gibt <see langword="void" /> zurück, ist nicht <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist <see langword="null" />, und der unäre Plus-Operator ist für <paramref name="expression" />.Type nicht definiert.  
  
- oder - 
 <paramref name="expression" />.Type (oder, sofern der Typ NULL-Werte zulässt, der entsprechende Typ, der keine NULL-Werte zulässt) kann nicht dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode zugeordnet werden.</exception>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die ein explizites Unboxing darstellt.</summary>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die Unboxing angewendet werden soll.</param>
      <param name="type">Der neue <see cref="T:System.Type" /> des Ausdrucks.</param>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten, der verwendet werden kann, um einen Parameter oder eine Variable in einer Ausdrucksbaumstruktur zu identifizieren.</summary>
      <param name="type">Der Typ des Parameters oder der Variable.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten mit dem angegebenen Namen und Typ.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten, der verwendet werden kann, um einen Parameter oder eine Variable in einer Ausdrucksbaumstruktur zu identifizieren.</summary>
      <param name="type">Der Typ des Parameters oder der Variable.</param>
      <param name="name">Der Name des Parameters oder der Variable. Dieser Name wird nur zum Debugging oder Drucken verwendet.</param>
      <returns>Ein <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten mit dem angegebenen Namen und Typ.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Reduziert den Knoten und ruft dann den Visitor-Delegaten für den reduzierten Ausdruck auf. Die Methode löst eine Ausnahme aus, wenn der Knoten nicht reduziert werden kann.</summary>
      <param name="visitor">Eine Instanz von <see cref="T:System.Func`2" />.</param>
      <returns>Der besuchte Ausdruck oder ein Ausdruck, durch den der Ausdruck in der Struktur ersetzt werden soll.</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>Gibt an, dass der Knoten zu einem einfacheren Knoten reduziert werden kann. Wenn true zurückgegeben wird, kann Reduce() aufgerufen werden, um das reduzierte Formular zu erzeugen.</summary>
      <returns>
        <see langword="true" /> , wenn der Knoten reduziert werden kann. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>Ruft den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> ab.</summary>
      <returns>Einer der <see cref="T:System.Linq.Expressions.ExpressionType" />-Werte.</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="T:System.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>Stellt einen stark typisierten lambda-Ausdruck als Datenstruktur in Form einer Ausdrucksbaumstruktur dar. Diese Klasse kann nicht vererbt werden.</summary>
      <typeparam name="TDelegate">Der Typ des Delegaten, der die <see cref="T:System.Linq.Expressions.Expression`1" /> darstellt.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>Kompiliert den von der Ausdrucksbaumstruktur beschriebenen Lambda-Ausdruck in ausführbaren Code und erzeugt einen Delegaten, der den Lambda-Ausdruck darstellt.</summary>
      <returns>Ein Delegat vom Typ <paramref name="TDelegate" />, der den vom <see cref="T:System.Linq.Expressions.Expression`1" /> beschriebenen kompilierten Lambda-Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <summary>Kompiliert die Lambdaausdrücke, die von der Ausdrucksbaumstruktur als interpretierter oder kompilierter Code beschrieben werden, und erzeugt einen Delegaten, der den Lambdaausdruck darstellt.</summary>
      <param name="preferInterpretation">
        <see langword="true" />, um anzugeben, dass der Ausdruck in ein interpretiertes Format kompiliert werden muss, sofern verfügbar; andernfalls <see langword="false" />.</param>
      <returns>Ein Delegat, der den kompilierten Lambdaausdruck darstellt, der durch das <see cref="T:System.Linq.Expressions.Expression`1" />-Objekt beschrieben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Erzeugt einen Delegaten, der den Lambdaausdruck darstellt.</summary>
      <param name="debugInfoGenerator">Generator für Debuginformationen, mit dem der Compiler Sequenzpunkte markiert und lokale Variablen mit Anmerkungen versieht.</param>
      <returns>Ein Delegat, der die kompilierte Version des Lambdaausdrucks enthält.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="body">Die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft des Ergebnisses.</param>
      <param name="parameters">Die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>Beschreibt die Knotentypen für die Knoten einer Ausdrucksbaumstruktur.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>Ein Additionsvorgang wie <c>a + b</c> ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>Eine Additionsverbundzuweisung wie <c>(a += b)</c> ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>Eine Additionsverbundzuweisung wie <c>(a += b)</c> ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>Ein Additionsvorgang wie <c>(a += b)</c> mit Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>Ein bitweiser oder logischer <see langword="AND" />-Vorgang wie <c>(a &amp; b)</c> in C# und <c>(a And b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>Eine bedingte <see langword="AND" />-Operation, bei der der zweite Operand nur ausgewertet wird, wenn der erste Operand zu <see langword="true" /> ausgewertet wird. Entspricht <c>(a &amp;&amp; b)</c> in C# und <c>(a AndAlso b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>Ein zusammengesetzter bitweiser oder logischer <see langword="AND" />-Zuweisungsvorgang wie <c>(a &amp;= b)</c> in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>Ein Indizierungsvorgang in einem eindimensionalen Array wie <c>array[index]</c> in C# oder <c>array(index)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>Ein Vorgang, bei dem die Länge eines eindimensionalen Arrays wie <c>array.Length</c> abgerufen wird.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>Ein Zuweisungsvorgang wie <c>(a = b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>Ein Block von Ausdrücken.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>Ein Methodenaufruf wie im <c>obj.sampleMethod()</c>-Ausdruck.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>Ein Knoten, der einen NULL-Zusammenführungsvorgang wie <c>(a ?? b)</c> in C# oder <c>If(a, b)</c> in Visual Basic darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>Ein bedingter Vorgang wie <c>a &gt; b ? a : b</c> in C# oder <c>If(a &gt; b, a, b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>Ein Konstantenwert.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>Ein Umwandlungs- oder Konvertierungsvorgang wie <c>(SampleType)obj</c> in C# oder <c>CType(obj, SampleType)</c> in Visual Basic. Wenn der konvertierte Wert zu groß für den Zieltyp ist, wird bei einer numerischen Konvertierung keine Ausnahme ausgelöst.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>Ein Umwandlungs- oder Konvertierungsvorgang wie <c>(SampleType)obj</c> in C# oder <c>CType(obj, SampleType)</c> in Visual Basic. Wenn der konvertierte Wert nicht zum Zieltyp passt, wird bei einer numerischen Konvertierung eine Ausnahme ausgelöst.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>Debuginformationen.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>Ein unärer Dekrementvorgang wie <c>(a – 1)</c> in C# und Visual Basic. Das Objekt <c>a</c> sollte nicht direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>Ein Standardwert.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>Ein Divisionsvorgang wie <c>(a / b)</c> für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>Ein Divisionsverbundzuweisungsvorgang, wie <c>(a /= b)</c> für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>Ein dynamischer Vorgang.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>Ein Knoten, der einen Gleichheitsvergleich wie <c>(a == b)</c> in C# oder <c>(a = b)</c> in Visual Basic darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>Ein bitweiser oder logischer <see langword="XOR" />-Vorgang wie <c>(a ^ b)</c> in C# und <c>(a Xor b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>Eine <see langword="XOR" /> bitweise oder logische Verbund Zuweisung, z. b. <c>(a ^ = b)</c> in c#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>Ein Erweiterungsausdruck.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>Ein „Gehe zu“-Ausdruck wie <c>goto Label</c> in C# oder <c>GoTo Label</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>Ein „größer als“-Vergleich wie <c>(a &gt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>Ein „größer oder gleich“-Vergleich wie <c>(a &gt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>Ein unärer Inkrementvorgang wie <c>(a + 1)</c> in C# und Visual Basic. Das Objekt <c>a</c> sollte nicht direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>Eine Indexoperation oder eine Operation, die auf eine Eigenschaft zugreift, die Argumente akzeptiert.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>Ein Vorgang, der einen Delegaten oder einen Lambda-Ausdruck aufruft wie <c>sampleDelegate.Invoke()</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>Ein <see langword="false" />-Bedingungswert.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>Ein <see langword="true" />-Bedingungswert.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>Eine Bezeichnung.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>Ein Lambda-Ausdruck wie <c>a =&gt; a + a</c> in C# oder <c>Function(a) a + a</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>Ein bitweiser Linksschiebevorgang wie <c>(a &lt;&lt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>Eine bitweise zusammengesetzte Linksschiebezuweisung wie <c>(a &lt;&lt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>Ein „kleiner als“-Vergleich wie <c>(a &lt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>Ein „kleiner oder gleich“-Vergleich wie <c>(a &lt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>Ein Vorgang, bei dem ein neues <see cref="T:System.Collections.IEnumerable" />-Objekt erstellt und aus einer Liste von Elementen initialisiert wird, wie <c>new List&lt;SampleType&gt;(){ a, b, c }</c> in C# oder <c>Dim sampleList = { a, b, c }</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>Eine Schleife wie <c>for</c> oder <c>while</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>Ein Vorgang, bei dem aus einem Feld oder einer Eigenschaft wie <c>obj.SampleProperty</c> gelesen wird.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>Ein Vorgang, der ein neues Objekt erstellt und einen oder mehrere Members initialisiert, wie <c>new Point { X = 1, Y = 2 }</c> in C# oder <c>New Point With {.X = 1, .Y = 2}</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>Ein arithmetischer Restvorgang wie <c>(a % b)</c> in C# oder <c>(a Mod b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>Ein arithmetisch zusammengesetzter Restzuweisungsvorgang wie <c>(a %= b)</c> in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>Ein Multiplikationsvorgang wie <c>(a * b)</c> ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>Eine Multiplikationsverbundzuweisung wie <c>(a *= b)</c> ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>Eine Multiplikationsverbundzuweisung wie <c>(a *= b)</c> mit Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>Ein Multiplikationsvorgang wie <c>(a * b)</c> mit Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>Ein arithmetischer Negationsvorgang wie <c>(–a)</c>. Das Objekt <c>a</c> sollte nicht direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>Ein arithmetischer Negationsvorgang wie <c>(–a)</c> mit Überlaufüberprüfung. Das Objekt <c>a</c> sollte nicht direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>Ein Vorgang, bei dem ein Konstruktor aufgerufen wird, um ein neues Objekt wie <c>new SampleType()</c> zu erstellen.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>Ein Vorgang, bei dem ein neues Array erstellt wird, in dem die Grenzen für jede Dimension definiert sind, wie <c>new SampleType[dim1, dim2]</c> in C# oder <c>New SampleType(dim1, dim2)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>Ein Vorgang, bei dem ein neues eindimensionales Array erstellt und aus einer Liste von Elementen initialisiert wird, wie <c>new SampleType[]{a, b, c}</c> in C# oder <c>New SampleType(){a, b, c}</c> Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>Eine bitweise Komplement- oder logische Negationsoperation. In C# entspricht dies <c>(~a)</c> für ganzzahlige Typen und <c>(!a)</c> für boolesche Werte. Entspricht in Visual Basic <c>(Not a)</c>. Das Objekt <c>a</c> sollte nicht direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>Ein Ungleichheitsvergleich wie <c>(a != b)</c> in C# oder <c>(a &lt;&gt; b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>Ein Einzelkomplementvorgang wie <c>(~a)</c> in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>Ein bitweiser oder logischer <see langword="OR" />-Vorgang wie <c>(a | b)</c> in C# oder <c>(a Or b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>Eine bitweise oder logische zusammengesetzte <see langword="OR" />-Zuweisung wie <c>(a |= b)</c> in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>Ein verkürzender <see langword="OR" />-Bedingungsvorgang wie <c>(a || b)</c> in C# oder <c>(a OrElse b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>Ein Verweis auf einen Parameter oder eine Variable, der bzw. die im Kontext des Ausdrucks definiert ist. Weitere Informationen finden Sie unter <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>Ein unäres Postfixdekrement wie <c>(a––)</c>. Das Objekt <c>a</c> sollte direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>Ein unäres Postfixinkrement wie <c>(a++)</c>. Das Objekt <c>a</c> sollte direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>Ein mathematischer Vorgang, bei dem eine Zahl potenziert wird, wie <c>(a ^ b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>Ein zusammengesetzter Zuweisungsvorgang, bei dem eine Zahl potenziert wird, wie <c>(a ^= b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>Ein unäres Präfixdekrement wie <c>(––a)</c>. Das Objekt <c>a</c> sollte direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>Ein unäres Präfixinkrement wie <c>(++a)</c>. Das Objekt <c>a</c> sollte direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>Ein Ausdruck mit einem Konstantenwert vom Typ <see cref="T:System.Linq.Expressions.Expression" />. Ein <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />-Knoten kann Verweise auf Parameter enthalten, die im Kontext des Ausdrucks definiert sind, den der Knoten darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>Ein bitweiser Rechtsschiebevorgang wie <c>(a &gt;&gt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>Ein bitweise zusammengesetzter Rechtsschiebezuweisungsvorgang wie <c>(a &gt;&gt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>Eine Liste von Laufzeitvariablen. Weitere Informationen finden Sie unter <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>Ein Subtraktionsvorgang wie <c>(a – b)</c> ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>Eine Subtraktionsverbundzuweisung wie <c>(a –= b)</c> ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>Eine Subtraktionsverbundzuweisung wie <c>(a –= b)</c> mit Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>Ein arithmetischer Subtraktionsvorgang wie <c>(a – b)</c> mit Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>Ein Wechselvorgang wie <see langword="switch" /> in C# oder <see langword="Select Case" /> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>Ein Vorgang wie <c>throw new Exception()</c>, der eine Ausnahme auslöst.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>Ein <see langword="try-catch" />-Ausdruck.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>Eine explizite Verweis- oder Boxing-Konvertierung, bei der <see langword="null" /> angegeben wird, wenn die Konvertierung fehlschlägt, wie <c>(obj as SampleType)</c> in C# oder <c>TryCast(obj, SampleType)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>Ein genauer Typtest.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>Ein Typtest wie <c>obj is SampleType</c> in C# oder <c>TypeOf obj is SampleType</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>Ein unärer Additionsvorgang wie <c>(+a)</c>. Das Ergebnis einer unären Plusoperation ist einfach der Wert des Operanden. In benutzerdefinierten Implementierungen können jedoch außergewöhnliche Ergebnisse erzeugt werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>Eine Unboxing-Werttypoperation wie die <see langword="unbox" />-Anweisung und die <see langword="unbox.any" />-Anweisung in MSIL.</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>Stellt einen Besucher oder Bearbeiter für Ausdrucksbaumstrukturen dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>Sendet die Liste der Ausdrücke an eine der spezialisierteren Besuchsmethoden in dieser Klasse.</summary>
      <param name="nodes">Die Ausdrücke, zu denen gewechselt werden soll.</param>
      <returns>Die geänderte Liste der Ausdrücke, wenn eines der Elemente geändert wurde. Andernfalls wird die ursprüngliche Liste der Ausdrücke zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>Sendet den Ausdruck an eine der spezialisierteren Besuchsmethoden in dieser Klasse.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>Wechselt mit einem angegebenen Elementbesucher zu allen Knoten in der Auflistung.</summary>
      <param name="nodes">Die Knoten, zu denen gewechselt werden soll.</param>
      <param name="elementVisitor">Ein Delegat, der ein einzelnes Element besucht und dieses (optional) durch ein neues Element ersetzt.</param>
      <typeparam name="T">Der Typ der Knoten.</typeparam>
      <returns>Die geänderte Knotenliste, wenn eines der Elemente geändert wurde, andernfalls wird die ursprüngliche Knotenliste zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>Wechselt zu einem Ausdruck und wandelt das Ergebnis zurück in den ursprünglichen Ausdruckstyp um.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <param name="callerName">Der Name der aufrufenden Methode. Dieser wird für die Ausgabe einer besseren Fehlermeldung verwendet.</param>
      <typeparam name="T">Der Typ des Ausdrucks.</typeparam>
      <exception cref="T:System.InvalidOperationException">Die Visit-Methode für diesen Knoten hat einen anderen Typ zurückgegeben.</exception>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>Wechselt zu einem Ausdruck in der Auflistung und wandelt das Ergebnis zurück in den ursprünglichen Ausdruckstyp um.</summary>
      <param name="nodes">Die Ausdrücke, zu denen gewechselt werden soll.</param>
      <param name="callerName">Der Name der aufrufenden Methode; wird für die Ausgabe einer besseren Fehlermeldung verwendet.</param>
      <typeparam name="T">Der Typ der Ausdrücke.</typeparam>
      <exception cref="T:System.InvalidOperationException">Die Visit-Methode für einen dieser Ausdrücke hat einen anderen Typ zurückgegeben.</exception>
      <returns>Die geänderte Ausdrucksauflistung, wenn ein Ausdruck geändert wurde; andernfalls wird die ursprüngliche Ausdrucksauflistung zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.BlockExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.ConditionalExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>Wechselt zur <see cref="T:System.Linq.Expressions.ConstantExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>Wechselt zur <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>Wechselt zur <see cref="T:System.Linq.Expressions.DefaultExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>Wechselt zu den untergeordneten Elementen des Erweiterungsausdrucks.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.IndexExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.InvocationExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.LabelExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>Wechselt zur <see cref="T:System.Linq.Expressions.LabelTarget" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.Expression`1" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <typeparam name="T">Der Typ des Delegaten.</typeparam>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.ListInitExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.LoopExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberAssignment" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberListBinding" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.NewExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.NewArrayExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>Wechselt zur <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.TryExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.UnaryExpression" />.</summary>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>Stellt einen bedingungslosen Sprung dar. Hierzu zählen return-Anweisungen, break- und continue-Anweisungen sowie andere Sprünge.</summary>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="target">Die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft des Ergebnisses.</param>
      <param name="value">Die <see cref="P:System.Linq.Expressions.GotoExpression.Value" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>Die Art des "Gehe zu"-Ausdrucks. Dient nur zu Informationszwecken.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.GotoExpressionKind" />-Objekt, das die Art des "Gehe zu"-Ausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>Die Zielmarke, zu der von diesem Knoten gewechselt wird.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.LabelTarget" />-Objekt, das die Zielmarke für diesen Knoten darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.GotoExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>Der an das Ziel übergebene Wert oder NULL, wenn das Ziel vom Typ System.Void ist.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den an das Ziel übergebenen Wert darstellt oder NULL.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>Gibt an, welche Art von Sprung diese <see cref="T:System.Linq.Expressions.GotoExpression" /> darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine break-Anweisung darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine continue-Anweisung darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die einen Sprung zu einer Position darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine return-Anweisung darstellt.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary>Stellt eine interne Schnittstelle für den Zugriff auf die Argumente von mehreren Strukturknoten (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression und IndexExpression) bereit.  Diese API ist ausschließlich für die interne Verwendung vorgesehen.</summary>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary>Gibt das Argument beim <paramref name="index" /> zurück, das ausgelöst wird, wenn der <paramref name="index" /> außerhalb des gültigen Bereichs liegt. Diese API ist ausschließlich für die interne Verwendung vorgesehen.</summary>
      <param name="index">Der Index des Arguments.</param>
      <returns>Das Argument beim Index.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary>Gibt die Anzahl der Argumente für den Ausdrucksstrukturknoten zurück. Diese API ist ausschließlich für die interne Verwendung vorgesehen.</summary>
      <returns>Die Anzahl der Argumente für den Ausdrucksstrukturknoten als <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary>Stellt eine interne Schnittstelle für den Zugriff auf die Argumente von DynamicExpression-Strukturknoten sowie CallSite- und Rewriting-Funktionalität bereit.  Sie sollten diese API nicht verwenden.  Sie ist nur aufgrund von DLL-Refactoring öffentlich und nur für interne Leistungsoptimierungen vorhanden.</summary>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary>Erstellt optional die Aufrufsite (CallSite) und gibt die Aufrufsite für den polymorphen Inlinecache des dynamischen Ausdrucks (DynamicExpression) zurück.  Sie sollten diesen Typ nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <returns>Die CallSite für den polymorphen Inlinecache von DynamicExpression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary>Schreibt diesen Knoten um, wobei die Argumente des dynamischen Ausdrucks durch die bereitgestellten Werte ersetzt werden.  Die Anzahl von <paramref name="args" /> muss mit der Anzahl des aktuellen Ausdrucks übereinstimmen.  Sie sollten diesen Typ nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.  Diese Hilfsmethode ermöglicht das Umschreiben von Knoten, sodass diese von der jeweiligen Implementierungsklasse unabhängig sind, die von dem an der Aufrufseite verwendeten dynamischen Ausdruck (DynamicExpression) abgeleitet wird.</summary>
      <param name="args">Die Argumente, die zum Ersetzen dieses Knotens verwendet werden.</param>
      <returns>Der umgeschriebene Knoten. Wenn jedoch keine Änderungen vorgenommen wurden, wird derselbe Knoten zurückgegeben.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary>Ruft den von CallSite verwendeten Delegattyp ab, der dem Typ der Regeln entspricht, die im polymorphen Inlinecache des dynamischen Ausdrucks verwendet werden.</summary>
      <returns>Der Delegattyp, der von der Aufrufsite verwendet wird.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>Stellt die Indizierung einer Eigenschaft oder eines Arrays dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Gibt das Argument bei Index zurück, das ausgelöst wird, wenn der Index außerhalb des gültigen Bereichs liegt.  Sie sollten diesen Member nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <param name="index">Der Index des Arguments.</param>
      <returns>Gibt <see cref="T:System.Linq.Expressions.Expression" />zurück.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="object">Die <see cref="P:System.Linq.Expressions.IndexExpression.Object" />-Eigenschaft des Ergebnisses.</param>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>Ruft die Argumente ab, die zum Indizieren der Eigenschaft oder des Arrays verwendet werden.</summary>
      <returns>Die schreibgeschützte Auflistung, die die Argumente enthält, die zum Indizieren der Eigenschaft oder des Arrays verwendet werden.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>Ruft die <see cref="T:System.Reflection.PropertyInfo" /> für die Eigenschaft ab, wenn der Ausdruck eine indizierte Eigenschaft darstellt. Gibt andernfalls "null" zurück.</summary>
      <returns>Die <see cref="T:System.Reflection.PropertyInfo" /> für die Eigenschaft, wenn der Ausdruck eine indizierte Eigenschaft darstellt, andernfalls "null".</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>Ein zu indizierendes Objekt.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.Expression" />, der das zu indizierende Objekt darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Gibt die Anzahl der Argumente für den Ausdrucksstrukturknoten zurück.  Sie sollten diesen Member nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <returns>Gibt <see cref="T:System.Int32" />zurück.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.IndexExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>Stellt einen Ausdruck dar, der einen Delegaten oder einen Lambdaausdruck auf eine Liste mit Argumentausdrücken anwendet.</summary>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Gibt das Argument bei Index zurück, das ausgelöst wird, wenn der Index außerhalb des gültigen Bereichs liegt.  Sie sollten diesen Member nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <param name="index">Der Index des Arguments.</param>
      <returns>Das Argument am Index, das ausgelöst wird, wenn der Index als <see cref="T:System.Linq.Expressions.Expression" /> außerhalb des gültigen Bereichs liegt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="expression">Die <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" />-Eigenschaft des Ergebnisses.</param>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>Ruft die Argumente ab, auf die der Delegat oder der Lambda-Ausdruck angewendet wird.</summary>
      <returns>Ein <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Argumente darstellen, auf die der Delegat angewendet wird.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>Ruft den anzuwendenden Delegaten oder Lambdaausdruck ab.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.Expression" />, der den anzuwendenden Delegaten darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück. Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> beim Überschreiben dieser Methode zurückgeben.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Gibt die Anzahl der Argumente für den Ausdrucksstrukturknoten zurück.  Sie sollten diesen Member nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <returns>Die Anzahl der Argumente für den Ausdrucksstrukturknoten als <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>Stellt eine Bezeichnung dar, die in einen beliebigen <see cref="T:System.Linq.Expressions.Expression" />-Kontext platziert werden kann. Bei einem Sprung in die Bezeichnung wird der durch die entsprechende <see cref="T:System.Linq.Expressions.GotoExpression" /> angegebene Wert abgerufen. Andernfalls wird der Wert in <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> empfangen. Wenn der <see cref="T:System.Type" /> gleich System.Void ist, darf kein Wert angegeben werden.</summary>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="target">Die <see cref="P:System.Linq.Expressions.LabelExpression.Target" />-Eigenschaft des Ergebnisses.</param>
      <param name="defaultValue">Die <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>Der Wert der <see cref="T:System.Linq.Expressions.LabelExpression" />, wenn die Bezeichnung durch die reguläre Ablaufsteuerung (und z. B. nicht durch einen Sprung) erreicht wird.</summary>
      <returns>Das Expression-Objekt, das den Wert der <see cref="T:System.Linq.Expressions.LabelExpression" /> darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>Das <see cref="T:System.Linq.Expressions.LabelTarget" />, dem die Bezeichnung zugeordnet ist.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.LabelTarget" />, dem die Bezeichnung zugeordnet ist.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.LabelExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>Stellt das Ziel einer <see cref="T:System.Linq.Expressions.GotoExpression" /> dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>Gibt einen <see cref="T:System.String" /> zurück, der das aktuelle <see cref="T:System.Object" />-Objekt darstellt.</summary>
      <returns>Ein <see cref="T:System.String" />, der den aktuellen <see cref="T:System.Object" /> darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>Ruft den Namen der Bezeichnung ab.</summary>
      <returns>Der Name der Sprungmarke.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>Der Typ des beim Springen zur Bezeichnung übergebenen Werts (oder <see cref="T:System.Void" />, wenn kein Wert übergeben werden soll).</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Typ des beim Springen zur Bezeichnung übergebenen Werts darstellt, oder <see cref="T:System.Void" />, wenn kein Wert übergeben werden soll.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>Beschreibt einen Lambdaausdruck. Dadurch wird ein mit einem .NET-Methodentext vergleichbarer Codeblock erfasst.</summary>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>Erzeugt einen Delegaten, der den Lambdaausdruck darstellt.</summary>
      <returns>Ein <see cref="T:System.Delegate" />, das die kompilierte Version des Lambda-Ausdrucks enthält.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <summary>Erzeugt einen interpretierten oder kompilierten Delegat, der den Lambdaausdruck darstellt.</summary>
      <param name="preferInterpretation">
        <see langword="true" />, um anzugeben, dass der Ausdruck in ein interpretiertes Format kompiliert werden muss, sofern verfügbar; andernfalls <see langword="false" />.</param>
      <returns>Ein Delegat, der den kompilierten Lambdaausdruck darstellt, der durch das <see cref="T:System.Linq.Expressions.LambdaExpression" />-Objekt beschrieben wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Erzeugt einen Delegaten, der den Lambdaausdruck darstellt.</summary>
      <param name="debugInfoGenerator">Generator für Debuginformationen, mit dem der Compiler Sequenzpunkte markiert und lokale Variablen mit Anmerkungen versieht.</param>
      <returns>Ein Delegat, der die kompilierte Version des Lambdaausdrucks enthält.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>Ruft den Text des Lambdaausdrucks ab.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression" />, die den Text des Lambdaausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>Ruft den Namen des Lambdaausdrucks ab.</summary>
      <returns>Der Name des Lambdaausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>Ruft die Parameter des Lambdaausdrucks ab.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, die die Parameter des Lambdaausdrucks darstellen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>Ruft den Rückgabetyp des Lambdaausdrucks ab.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Typ des Lambdaausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>Ruft den Wert ab, der angibt, ob der Lambdaausdruck mit der Endeaufrufoptimierung kompiliert wird.</summary>
      <returns>
        <see langword="true" /> , wenn der Lambda-Ausdruck mit der Optimierung des Endaufrufs kompiliert wird. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>Stellt einen Konstruktoraufruf mit einem Auflistungsinitialisierer dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>Reduziert auf den binären Ausdrucksknoten auf einen einfacheren Ausdruck.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="newExpression">Die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft des Ergebnisses.</param>
      <param name="initializers">Die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>Ruft einen Wert ab, der angibt, ob der Knoten der Ausdrucksbaumstruktur reduziert werden kann.</summary>
      <returns>
        <see langword="true" /> , wenn der Knoten reduziert werden kann. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>Ruft die Elementinitialisierer ab, die zum Initialisieren einer Auflistung verwendet werden.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten, die die Elemente darstellen, die zum Initialisieren der Auflistung verwendet werden.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>Ruft den Ausdruck ab, der einen Aufruf des Konstruktors für einen Auflistungstyp enthält.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des Konstruktors für einen Auflistungstyp darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>Stellt eine Endlosschleife dar. Kann mithilfe von „break“ beendet werden.</summary>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="breakLabel">Die <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" />-Eigenschaft des Ergebnisses.</param>
      <param name="continueLabel">Die <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" />-Eigenschaft des Ergebnisses.</param>
      <param name="body">Die <see cref="P:System.Linq.Expressions.LoopExpression.Body" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>Ruft die <see cref="T:System.Linq.Expressions.Expression" /> ab, die den Text der Schleife darstellt.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.Expression" />, die den Text der Schleife darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>Ruft das <see cref="T:System.Linq.Expressions.LabelTarget" /> ab, das vom Schleifentext als Ziel der break-Anweisung verwendet wird.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.LabelTarget" />, das vom Schleifentext als Ziel der break-Anweisung verwendet wird.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>Ruft das <see cref="T:System.Linq.Expressions.LabelTarget" /> ab, das vom Schleifentext als Ziel der continue-Anweisung verwendet wird.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.LabelTarget" />, das vom Schleifentext als Ziel der continue-Anweisung verwendet wird.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück. Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> beim Überschreiben dieser Methode zurückgeben.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.LoopExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>Stellt den Zuweisungsvorgang für ein Feld oder eine Eigenschaft eines Objekts dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="expression">Die <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>Ruft den Ausdruck ab, der dem Feld oder der Eigenschaft zugewiesen werden soll.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.Expression" />, die den Wert darstellt, der dem Feld oder der Eigenschaft zugewiesen werden soll.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>Stellt die Basisklasse bereit, von der die Klassen abgeleitet werden, die Bindungen darstellen, welche zum Initialisieren von Membern eines neu erstellten Objekts verwendet werden.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Linq.Expressions.MemberBinding" />-Klasse.</summary>
      <param name="type">Der <see cref="T:System.Linq.Expressions.MemberBindingType" />, der den dargestellten Bindungstyp von anderen unterscheidet.</param>
      <param name="member">Die <see cref="T:System.Reflection.MemberInfo" />, die ein zu initialisierendes Feld oder eine zu initialisierende Eigenschaft darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>Gibt eine Textdarstellung des <see cref="T:System.Linq.Expressions.MemberBinding" /> zurück.</summary>
      <returns>Eine Textdarstellung der <see cref="T:System.Linq.Expressions.MemberBinding" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>Ruft den dargestellten Bindungstyp ab.</summary>
      <returns>Einer der <see cref="T:System.Linq.Expressions.MemberBindingType" />-Werte.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>Ruft das zu initialisierende Feld oder die zu initialisierende Eigenschaft ab.</summary>
      <returns>Die <see cref="T:System.Reflection.MemberInfo" />, die das zu initialisierende Feld oder die zu initialisierende Eigenschaft darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>Beschreibt die Bindungstypen, die in <see cref="T:System.Linq.Expressions.MemberInitExpression" />-Objekten verwendet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>Eine Bindung, die das Initialisieren eines Members mit dem Wert eines Ausdrucks darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>Eine Bindung, die das Initialisieren eines Member vom Typ <see cref="T:System.Collections.IList" /> oder <see cref="T:System.Collections.Generic.ICollection`1" /> von einer Liste von Elementen darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>Eine Bindung, die das rekursive Initialisieren von Membern eines Members darstellt.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>Stellt den Zugriff auf ein Feld oder auf eine Eigenschaft dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="expression">Die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>Ruft das enthaltende Objekt des Felds oder der Eigenschaft ab.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression" />, die das enthaltende Objekt des Felds oder der Eigenschaft darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>Ruft das Feld oder die Eigenschaft ab, auf das bzw. die zugegriffen werden soll.</summary>
      <returns>Die <see cref="T:System.Reflection.MemberInfo" />, die das Feld oder die Eigenschaft darstellt, auf das bzw. die zugegriffen werden soll.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>Stellt den Aufruf eines Konstruktors und die Initialisierung mindestens eines Members des neuen Objekts dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>Reduziert <see cref="T:System.Linq.Expressions.MemberInitExpression" /> auf einen einfacheren Ausdruck.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="newExpression">Die <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />-Eigenschaft des Ergebnisses.</param>
      <param name="bindings">Die <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>Ruft die Bindungen ab, die beschreiben, wie die Member des neu erstellten Objekts initialisiert werden.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, die beschreiben, wie die Member initialisiert werden.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>Ruft einen Wert ab, der angibt, ob der Knoten der Ausdrucksbaumstruktur reduziert werden kann.</summary>
      <returns>
        <see langword="true" /> , wenn der Knoten reduziert werden kann. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>Ruft den Ausdruck ab, der den Konstruktoraufruf darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Konstruktoraufruf darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück. Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> beim Überschreiben dieser Methode zurückgeben.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>Stellt die Initialisierung der Elemente eines Auflistungsmembers eines neu erstellten Objekts dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="initializers">Die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>Ruft die Elementinitialisierer zum Initialisieren eines Auflistungsmembers für ein neu erstelltes Objekt ab.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten zum Initialisieren eines Auflistungsmembers.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>Stellt die Initialisierung der Member eines Members eines neu erstellten Objekts dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="bindings">Die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>Ruft die Bindungen ab, die beschreiben, wie die Member eines Members initialisiert werden.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, die beschreiben, wie die Member des Members initialisiert werden.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>Stellt einen Aufruf für eine statische Methode oder für eine Instanzmethode dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Gibt das Argument bei Index zurück, das ausgelöst wird, wenn der Index außerhalb des gültigen Bereichs liegt.  Sie sollten diesen Member nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <param name="index">Der Index des Arguments.</param>
      <returns>Gibt <see cref="T:System.Linq.Expressions.Expression" />zurück.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="object">Die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft des Ergebnisses.</param>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>Ruft eine Auflistung von Ausdrücken ab, die Argumente der aufgerufenen Methode darstellen.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, das die Argumente der aufgerufenen Methode darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>Ruft die <see cref="T:System.Reflection.MethodInfo" /> für die Methode ab, die aufgerufen werden soll.</summary>
      <returns>Die <see cref="T:System.Reflection.MethodInfo" />, die die aufgerufene Methode darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>Ruft den <see cref="T:System.Linq.Expressions.Expression" /> ab, der die Instanz für Instanzmethodenaufrufe darstellt oder NULL für statische Methodenaufrufe ab.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.Expression" />, der das empfangende Objekt der Methode darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Gibt die Anzahl der Argumente für den Ausdrucksstrukturknoten zurück.  Sie sollten diesen Member nicht verwenden.  Es ist nur aufgrund der Assemblyumgestaltung öffentlich und wird intern zur Leistungsoptimierung verwendet.</summary>
      <returns>Die Anzahl der Argumente für den Ausdrucks Baumstruktur Knoten als  <see cref="T:System.Int32" /> .</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>Stellt die Erstellung eines neuen Arrays und ggf. die Initialisierung der Elemente des neuen Arrays dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="expressions">Die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>Ruft die Grenzen des Arrays ab, wenn der Wert der <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> ist, oder die Werte zum Initialisieren der Elemente im neuen Array, wenn der Wert der <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> ist.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Grenzen des Arrays oder aber die Initialisierungswerte darstellen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>Stellt einen Konstruktoraufruf dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Gibt das Argument bei Index zurück, das ausgelöst wird, wenn der Index außerhalb des gültigen Bereichs liegt.</summary>
      <param name="index">Der Index des Arguments.</param>
      <returns>Das Argument für den Index, wird ausgelöst, wenn der Index außerhalb des gültigen Bereichs liegt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>Ruft die an den Konstruktor zu übergebenden Argumente ab.</summary>
      <returns>Eine Auflistung von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Argumente des Konstruktors darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>Ruft den aufgerufenen Konstruktor ab.</summary>
      <returns>Die <see cref="T:System.Reflection.ConstructorInfo" />, die den aufgerufenen Konstruktor darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>Ruft die Member ab, die die Werte der Felder abrufen können, die mit Konstruktorargumenten initialisiert wurden.</summary>
      <returns>Eine Auflistung von <see cref="T:System.Reflection.MemberInfo" />-Objekten, die die Member darstellen, die die Werte der Felder abrufen können, die mit Konstruktorargumenten initialisiert wurden.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Ruft die Anzahl von Argumenten für den Ausdrucksstrukturknoten ab.</summary>
      <returns>Die Anzahl von Argumenten für den Ausdrucksstrukturknoten.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.NewExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>Stellt einen benannten Parameterausdruck dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp. Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die Methode <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>Gibt an, dass <c>ParameterExpression</c> als <see langword="ByRef" />-Parameter behandelt werden soll.</summary>
      <returns>
        <see langword="true" /> , wenn es sich bei diesem Parameter <c>Ausdruck</c> um einen Parameter handelt, <see langword="ByRef" /> andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>Ruft den Namen des Parameters oder der Variable ab.</summary>
      <returns>Ein <see cref="T:System.String" />, der den Namen des Parameters beinhaltet.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>Ein Ausdruck, der die Laufzeitberechtigung für Lese-/Schreibzugriff für Variablen bereitstellt.</summary>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="variables">Die <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück. Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> beim Überschreiben dieser Methode zurückgeben.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>Die Variablen oder Parameter, auf die Laufzeitzugriff ermöglicht werden soll.</summary>
      <returns>Die schreibgeschützte Auflistung, die Parameter enthält, für die der Laufzeitzugriff ermöglicht wird.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>Stellt einen Fall einer <see cref="T:System.Linq.Expressions.SwitchExpression" /> dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>Gibt einen <see cref="T:System.String" /> zurück, der das aktuelle <see cref="T:System.Object" />-Objekt darstellt.</summary>
      <returns>Ein <see cref="T:System.String" />, der den aktuellen <see cref="T:System.Object" /> darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="testValues">Die <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" />-Eigenschaft des Ergebnisses.</param>
      <param name="body">Die <see cref="P:System.Linq.Expressions.SwitchCase.Body" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>Ruft den Text dieses Falls ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den Text des Fallblocks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>Ruft die Werte dieses Falls ab. Dieser Fall wird für die Ausführung ausgewählt, wenn der <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> einem dieser Werte entspricht.</summary>
      <returns>Die schreibgeschützte Auflistung der Werte für diesen Fallblock.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>Stellt einen Steuerausdruck dar, der die Mehrfachauswahl durch das Übergeben der Steuerung an <see cref="T:System.Linq.Expressions.SwitchCase" /> behandelt.</summary>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="switchValue">Die <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" />-Eigenschaft des Ergebnisses.</param>
      <param name="cases">Die <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" />-Eigenschaft des Ergebnisses.</param>
      <param name="defaultBody">Die <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>Ruft die Auflistung der <see cref="T:System.Linq.Expressions.SwitchCase" />-Objekte für die Switch-Anweisung ab.</summary>
      <returns>Die Auflistung von <see cref="T:System.Linq.Expressions.SwitchCase" />-Objekten.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>Ruft die Methode für Vergleichsoperationen auf Gleichheit ab (falls vorhanden).</summary>
      <returns>Das <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Methode für Vergleichsoperationen auf Gleichheit darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>Ruft den Test für den Schalter ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den Test für den Schalter darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück. Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> beim Überschreiben dieser Methode zurückgeben.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>Ruft den Test für den Schalter ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den Test für den Schalter darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>Speichert die Informationen, die für die Ausgabe von Debuggingsymbolinformationen für eine Quelldatei erforderlich sind. Hierzu zählen insbesondere der Dateiname und die eindeutige Sprachen-ID.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>Gibt den eindeutigen Bezeichner des Dokumenttyps zurück (falls vorhanden). Standardmäßig ist dies die GUID für eine Textdatei.</summary>
      <returns>Der eindeutige Bezeichner des Dokumenttyps.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>Der Name der Quelldatei.</summary>
      <returns>Die Zeichenfolge, die den Namen der Quelldatei darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>Gibt den eindeutigen Bezeichner der Sprache zurück (falls vorhanden).</summary>
      <returns>Der eindeutige Bezeichner der Sprache.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>Gibt den eindeutigen Bezeichner des Sprachenanbieters zurück (falls vorhanden).</summary>
      <returns>Der eindeutige Bezeichner des Sprachenanbieters.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>Stellt einen try-/catch-/finally-/fault-Block dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="body">Die <see cref="P:System.Linq.Expressions.TryExpression.Body" />-Eigenschaft des Ergebnisses.</param>
      <param name="handlers">Die <see cref="P:System.Linq.Expressions.TryExpression.Handlers" />-Eigenschaft des Ergebnisses.</param>
      <param name="finally">Die <see cref="P:System.Linq.Expressions.TryExpression.Finally" />-Eigenschaft des Ergebnisses.</param>
      <param name="fault">Die <see cref="P:System.Linq.Expressions.TryExpression.Fault" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>Ruft die <see cref="T:System.Linq.Expressions.Expression" /> ab, die den Text des try-Blocks darstellt.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.Expression" />, die den Text des try-Blocks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>Ruft die <see cref="T:System.Linq.Expressions.Expression" /> ab, die den fault-Block darstellt.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.Expression" />, die den fault-Block darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>Ruft die <see cref="T:System.Linq.Expressions.Expression" /> ab, die den finally-Block darstellt.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.Expression" />, die den finally-Block darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>Ruft die Auflistung der <see cref="T:System.Linq.Expressions.CatchBlock" />-Ausdrücke ab, die dem try-Block zugeordnet sind.</summary>
      <returns>Die Auflistung der <see cref="T:System.Linq.Expressions.CatchBlock" />-Ausdrücke, die dem try-Block zugeordnet sind.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.TryExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>Stellt einen Vorgang zwischen einem Ausdruck und einem Typ dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="expression">Die <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>Ruft den Ausdrucksoperanden einer Typtestoperation ab.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.Expression" />, der den Ausdrucksoperanden einer Typtestoperation darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück. Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> beim Überschreiben dieser Methode zurückgeben.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>Ruft den Typoperanden einer Typtestoperation ab.</summary>
      <returns>Ein <see cref="T:System.Type" />, der den Typoperanden einer Typtestoperation darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>Stellt einen Ausdruck mit einem unären Operator dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>Reduziert auf den Ausdrucksknoten auf einen einfacheren Ausdruck.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck, der diesem ähnelt, verwendet jedoch die angegebenen untergeordneten Elemente. Wenn alle untergeordneten Elemente identisch sind, wird dieser Ausdruck zurückgegeben.</summary>
      <param name="operand">Die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft des Ergebnisses.</param>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>Ruft einen Wert ab, der angibt, ob der Knoten der Ausdrucksbaumstruktur reduziert werden kann.</summary>
      <returns>
        <see langword="true" /> , wenn ein Knoten reduziert werden kann. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>Ruft einen Wert ab, der angibt, ob der Ausdrucksstrukturknoten einen transformierten Aufruf eines Operators darstellt.</summary>
      <returns>
        <see langword="true" />, wenn der Knoten einen transformierten Aufruf darstellt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>Ruft einen Wert ab, der angibt, ob der Ausdrucksstrukturknoten einen transformierten Aufruf eines Operators darstellt, dessen Rückgabetyp zu einem Typ transformiert wird, der NULL-Werte zulässt.</summary>
      <returns>
        <see langword="true" />, wenn der Rückgabetyp des Operators zu einem Typ, der NULL-Werte zulässt, transformiert wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>Ruft die implementierende Methode für die unäre Operation ab.</summary>
      <returns>Die <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, den dieser Ausdruck hat.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>Ruft den Operanden der unären Operation ab.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression" />, die den Operanden der unären Operation darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den dieser <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>Stellt das Ergebnis eines Sortiervorgangs dar.</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>Stellt das Ergebnis eines Sortiervorgangs dar.</summary>
      <typeparam name="T">Der Typ des Inhalts der Datenquelle.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>Stellt Funktionen zur Auswertung von Abfragen für eine bestimmte Datenquelle ohne Angabe des Datentyps bereit.</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>Ruft den Typ der Elemente ab, die zurückgegeben werden, wenn die Ausdrucksbaumstruktur ausgeführt wird, die mit dieser Instanz von <see cref="T:System.Linq.IQueryable" /> verknüpft ist.</summary>
      <returns>Ein <see cref="T:System.Type" />, der den Typ der Elemente darstellt, die zurückgegeben werden, wenn die Ausdrucksbaumstruktur ausgeführt wird, die mit diesem Objekt verknüpft ist.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>Ruft die Ausdrucksbaumstruktur ab, die mit der Instanz von <see cref="T:System.Linq.IQueryable" /> verknüpft ist.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.Expression" />, die mit dieser Instanz von <see cref="T:System.Linq.IQueryable" /> verknüpft ist.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>Ruft den Abfrageanbieter ab, der dieser Datenquelle zugeordnet ist.</summary>
      <returns>Der <see cref="T:System.Linq.IQueryProvider" />, der dieser Datenquelle zugeordnet ist.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>Stellt Funktionen zur Auswertung von Abfragen für eine bestimmte Datenquelle mit bekanntem Datentyp bereit.</summary>
      <typeparam name="T">Der Datentyp in der Datenquelle.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>Definiert Methoden zum Erstellen und Ausführen von Abfragen, die von einem <see cref="T:System.Linq.IQueryable" />-Objekt beschrieben werden.</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Konstruiert ein <see cref="T:System.Linq.IQueryable" />-Objekt, das die Abfrage auswerten kann, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</summary>
      <param name="expression">Eine Ausdrucksbaumstruktur, die eine LINQ-Abfrage darstellt.</param>
      <returns>Ein <see cref="T:System.Linq.IQueryable" />-Objekt, das die Abfrage auswerten kann, die von der angegebenen Ausdrucksbaumstruktur dargestellt wird.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Konstruiert ein <see cref="T:System.Linq.IQueryable`1" />-Objekt, das die Abfrage auswerten kann, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</summary>
      <param name="expression">Eine Ausdrucksbaumstruktur, die eine LINQ-Abfrage darstellt.</param>
      <typeparam name="TElement">Der Typ der Elemente des <see cref="T:System.Linq.IQueryable`1" />-Objekts, das zurückgegeben wird.</typeparam>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />-Objekt, das die Abfrage auswerten kann, die von der angegebenen Ausdrucksbaumstruktur dargestellt wird.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>Führt die Abfrage aus, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</summary>
      <param name="expression">Eine Ausdrucksbaumstruktur, die eine LINQ-Abfrage darstellt.</param>
      <returns>Der Wert, der aus der Ausführung der angegebenen Abfrage resultiert.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>Führt die stark typisierte Abfrage aus, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</summary>
      <param name="expression">Eine Ausdrucksbaumstruktur, die eine LINQ-Abfrage darstellt.</param>
      <typeparam name="TResult">Der Typ des Werts, der aus der Ausführung der Abfrage resultiert.</typeparam>
      <returns>Der Wert, der aus der Ausführung der angegebenen Abfrage resultiert.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>Eine Basisklasse für eine dynamische Aufrufsite. Dieser Typ wird als Parametertyp für die dynamischen Siteziele verwendet.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Erstellt eine Aufrufsite mit dem angegebenen Delegattyp und Binder.</summary>
      <param name="delegateType">Der Delegattyp der Aufrufsite.</param>
      <param name="binder">Der Binder der Aufrufsite.</param>
      <returns>Die neue Aufrufsite.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>Für das Binden von dynamischen Vorgängen auf der dynamischen Site zuständige Klasse.</summary>
      <returns>Das für das Binden von dynamischen Vorgängen zuständige <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />-Objekt.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>Typ der dynamischen Site.</summary>
      <typeparam name="T">Der Delegattyp.</typeparam>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>Der Cache der Ebene 0: Ein auf Grundlage des Siteverlaufs spezialisierter Delegat.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Erstellt eine Instanz der dynamischen Aufrufsite, die mit dem für die Laufzeitbindung zuständigen Binder der dynamischen Vorgänge auf dieser Aufrufsite initialisiert wird.</summary>
      <param name="binder">Der für die Laufzeitbindung von dynamischen Vorgängen auf dieser Aufrufsite zuständige Binder.</param>
      <returns>Die neue Instanz der dynamischen Aufrufsite.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>Der Updatedelegat. Wird aufgerufen, wenn auf der dynamischen Site ein fehlgeschlagener Cachezugriff auftritt.</summary>
      <returns>Der Updatedelegat.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>Die für die Laufzeitbindung von dynamischen Vorgängen auf der dynamischen Aufrufsite zuständige Klasse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />-Klasse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Führt die Laufzeitbindung des dynamischen Vorgangs für einen Satz von Argumenten aus.</summary>
      <param name="args">Ein Array von Argumenten für den dynamischen Vorgang.</param>
      <param name="parameters">Das Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Instanzen, die die Parameter der Aufrufsite im Bindungsprozess darstellen.</param>
      <param name="returnLabel">Ein LabelTarget, mit dem das Ergebnis der dynamischen Bindung zurückgegeben wird.</param>
      <returns>Ein Ausdruck, der Tests für die Argumente des dynamischen Vorgangs ausführt und den dynamischen Vorgang ausführt, wenn die Testergebnisse gültig sind. Wenn die Tests bei nachfolgenden Instanzen des dynamischen Vorgangs fehlschlagen, wird erneut Bind aufgerufen, um eine neue <see cref="T:System.Linq.Expressions.Expression" /> für die neuen Argumenttypen zu erstellen.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Stellt Laufzeitbindungsunterstützung auf niedriger Ebene bereit. Klassen können dies überschreiben und einen direkten Delegaten für die Implementierung der Regel bereitstellen. Hierdurch können Regeln auf dem Datenträger gespeichert, spezialisierte Regeln zur Laufzeit verfügbar gemacht oder unterschiedliche Cachingrichtlinien bereitgestellt werden.</summary>
      <param name="site">Die CallSite, für die die Bindung ausgeführt wird.</param>
      <param name="args">Die Argumente für den Binder.</param>
      <typeparam name="T">Der Zieltyp der CallSite.</typeparam>
      <returns>Ein neuer Delegat, der das CallSite-Ziel ersetzt.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>Fügt dem Cache von bekannten Zielen ein Ziel hinzu. Die zwischengespeicherten Ziele werden vor dem Aufrufen von BindDelegate zum Erstellen der neuen Regel überprüft.</summary>
      <param name="target">Der Zieldelegat, der dem Cache hinzugefügt werden soll.</param>
      <typeparam name="T">Der Typ des Ziels, das hinzugefügt wird.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>Ruft eine Bezeichnung ab, durch die veranlasst werden kann, dass die Bindung aktualisiert wird. Dieser gibt an, dass die Bindung des Ausdrucks nicht mehr gültig ist. Dies wird in der Regel verwendet, wenn die „Version“ eines dynamischen Objekts geändert wurde.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.LabelTarget" />-Objekt, das eine Bezeichnung darstellt, mit der das Bindungsupdate ausgelöst werden kann.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>Klasse, die Hilfsmethoden für DLR-CallSites enthält.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>Überprüft, ob eine <see cref="T:System.Reflection.MethodBase" /> von DLR intern verwendet wird und nicht im Stapel des Sprachcodes angezeigt werden soll.</summary>
      <param name="mb">Die Eingabe-<see cref="T:System.Reflection.MethodBase" />.</param>
      <returns>
        <see langword="true" />, Wenn die Eingabe der <see cref="T:System.Reflection.MethodBase" />-Klasse intern von DLR verwendet wird und nicht im Stapel des Sprachcodes angezeigt werden soll. Andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>Generiert Debuginformationen für Lambdaausdrücke in einer Ausdrucksbaumstruktur.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>Erstellt einen PDB-Symbolgenerator (Programmdatenbank).</summary>
      <returns>Ein PDB-Symbolgenerator.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>Markiert einen Sequenzpunkt im MSIL-Code (Microsoft Intermediate Language).</summary>
      <param name="method">Der Lambdaausdruck, der generiert wird.</param>
      <param name="ilOffset">Der Offset im MSIL-Code, bei dem der Sequenzpunkt markiert wird.</param>
      <param name="sequencePoint">Debuginformationen, die dem Sequenzpunkt entsprechen.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>Gibt an, dass die Verwendung von <see cref="T:System.Object" /> bei einem Member wie ein dynamisch weitergeleiteter Typ behandelt werden soll.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />-Klasse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />-Klasse.</summary>
      <param name="transformFlags">Gibt in einem Präfixdurchlauf der Konstruktion eines Typs an, welche Vorkommen von <see cref="T:System.Object" /> als dynamisch weitergeleiteter Typ behandelt werden sollen.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>Gibt in einem Präfixdurchlauf der Konstruktion eines Typs an, welche Vorkommen von <see cref="T:System.Object" /> als dynamisch weitergeleiteter Typ behandelt werden sollen.</summary>
      <returns>Die Liste der Vorkommen von <see cref="T:System.Object" />, die als dynamisch weitergeleiteter Typ behandelt werden sollen.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>Stellt die Werte von Laufzeitvariablen dar.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>Ruft die Anzahl der Laufzeitvariablen ab.</summary>
      <returns>Die Anzahl der Laufzeitvariablen.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>Ruft den Wert der Laufzeitvariablen am angegebenen Index ab.</summary>
      <param name="index">Der nullbasierte Index der Laufzeitvariablen, deren Wert zurückgegeben werden soll.</param>
      <returns>Der Wert der Laufzeitvariablen.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>Der Generator für schreibgeschützte Auflistungen.</summary>
      <typeparam name="T">Der Typ des Auflistungselements.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>Erstellt ein Objekt vom Typ <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />-Klasse und kopiert den Inhalt der angegebenen Collection.</summary>
      <param name="collection">Die Auflistung, aus der Elemente kopiert werden sollen.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>Erstellt einen <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> mit einer angegebenen Anfangskapazität. Der Inhalt ist leer, der Generator reserviert jedoch Platz für die angegebene Anzahl von Elementen, bevor Neuzuweisungen erforderlich sind.</summary>
      <param name="capacity">Anfangskapazität.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>Fügt der <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> ein Element hinzu.</summary>
      <param name="item">Das Objekt, das <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>Entfernt alle Elemente aus <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>Ermittelt, ob die <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> einen bestimmten Wert enthält.</summary>
      <param name="item">Das in <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> zu suchende Objekt.</param>
      <returns>
        <see langword="true" />, wenn sich das Element in der <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> befindet, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>Kopiert die Elemente aus <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> in ein <see cref="T:System.Array" />, beginnend bei einem bestimmten <see cref="T:System.Array" />-Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> kopierten Elemente ist.</param>
      <param name="arrayIndex">Der nullbasierte Index im Array, ab dem kopiert wird.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerator`1" />-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>Gibt den Index des ersten Vorkommens eines angegebenen Werts im Builder zurück.</summary>
      <param name="item">Ein Element, nach dem gesucht werden soll.</param>
      <returns>Der Index des ersten Vorkommens eines Elements.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>Fügt am angegebenen Index ein Element in die <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das Element eingefügt werden soll.</param>
      <param name="item">Das in die <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> einzufügende Objekt.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>Entfernt das erste Vorkommen eines angegebenen Objekts aus der <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <param name="item">Das aus der <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> zu entfernende Objekt.</param>
      <returns>
        <see langword="true" />, wenn das Element erfolgreich aus dem <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> entfernt wurde, andernfalls FALSE. Diese Methode gibt auch false zurück, wenn das Element nicht im ursprünglichen <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> vorhanden ist.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>Entfernt das <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />-Element am angegebenen Index.</summary>
      <param name="index">Der nullbasierte Index des zu entfernenden Elements.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>Kehrt die Reihenfolge der Elemente in der gesamten <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> um.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>Kehrt die Reihenfolge der Elemente im angegebenen Bereich um.</summary>
      <param name="index">Der nullbasierte Startindex des Bereichs, in dem die Reihenfolge umgekehrt werden soll.</param>
      <param name="count">Die Anzahl der Elemente im Bereich, in dem die Reihenfolge umgekehrt werden soll.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die Elemente der <see cref="T:System.Collections.Generic.ICollection`1" /> in ein Array, wobei am angegebenen Arrayindex begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das das Ziel der aus der <see cref="T:System.Collections.Generic.ICollection`1" /> kopierten Elemente darstellt. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>Fügt der <see cref="T:System.Collections.IList" /> ein Element hinzu.</summary>
      <param name="value">Das <see cref="T:System.Object" />, das in <see cref="T:System.Collections.IList" /> eingefügt werden soll.</param>
      <returns>Die Position, an der das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>Ermittelt, ob die <see cref="T:System.Collections.IList" /> einen bestimmten Wert enthält.</summary>
      <param name="value">Das <see cref="T:System.Object" />, das in der <see cref="T:System.Collections.IList" /> gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das <paramref name="item" /> in der <see cref="T:System.Collections.IList" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Bestimmt den Index eines bestimmten Elements in der <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Das im <see cref="T:System.Collections.IList" /> zu suchende Objekt.</param>
      <returns>Der Index von <paramref name="item" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Fügt am angegebenen Index ein Element in die <see cref="T:System.Collections.IList" /> ein.</summary>
      <param name="index">Der nullbasierte Index, an dem <paramref name="item" /> eingefügt werden soll.</param>
      <param name="value">Das in die <see cref="T:System.Collections.IList" /> einzufügende Objekt.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>Entfernt das erste Vorkommen eines angegebenen Objekts aus der <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Das aus der <see cref="T:System.Collections.IList" /> zu entfernende Objekt.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>Kopiert die Elemente der <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> in ein neues Array.</summary>
      <returns>Ein Array, das Kopien der Elemente aus <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> enthält.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>Erstellt eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> mit allen Elementen des <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />. Dabei werden die Elemente möglichst nicht in das neue Array kopiert. Setzt den <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> zurück, nachdem die <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> erstellt wurde.</summary>
      <returns>Eine neue Instanz von <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>Ruft die Kapazität dieses <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />-Objekts ab oder legt diese fest.</summary>
      <returns>Die Kapazität dieses " <c>reonlycollectionbuilder".</c></returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>Ruft die Anzahl der Elemente im <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> ab.</summary>
      <returns>Die Anzahl der Elemente im <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>Ruft das Element am angegebenen Index ab oder legt dieses fest.</summary>
      <param name="index">Der nullbasierte Index des Elements, das abgerufen oder festgelegt werden soll.</param>
      <returns>Das Element am angegebenen Index.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns>
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IList" /> eine feste Größe aufweist.</summary>
      <returns>Ist <see langword="true" />, wenn die <see cref="T:System.Collections.IList" /> eine feste Größe aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IList" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.IList" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>Ruft das Element am angegebenen Index ab oder legt dieses fest.</summary>
      <param name="index">Der nullbasierte Index des Elements, das abgerufen oder festgelegt werden soll.</param>
      <returns>Das Element am angegebenen Index.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>Stellt einen Cache von Laufzeitbindungsregeln dar.</summary>
      <typeparam name="T">Der Delegattyp.</typeparam>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct handles comments.">Definiert, wie die <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur Kommentare handhabt.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary vsli:raw="Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.">Lässt Kommentare in der JSON-Eingabe zu und behandelt diese als gültige Token. Während des Lesens kann der Aufrufer auf die Kommentarwerte zugreifen.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary vsli:raw="Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; is thrown. This is the default value.">Lässt keine Kommentare in der JSON-Eingabe zu. Wenn Kommentare gefunden werden, werden sie als ungültiges JSON behandelt, und eine <see cref="T:System.Text.Json.JsonException" /> wird ausgelöst. Dies ist der Standardwert.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary vsli:raw="Allows comments within the JSON input and ignores them. The &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; behaves as if no comments are present.">Lässt Kommentare in der JSON-Eingabe zu und ignoriert sie. Der <see cref="T:System.Text.Json.Utf8JsonReader" /> verhält sich, als wären keine Kommentare vorhanden.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary vsli:raw="Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.">Stellt einen Mechanismus zum Untersuchen des strukturellen Inhalts eines JSON-Werts ohne automatisches Instanziieren von Datenwerten bereit.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonDocument&quot;&gt;&lt;/xref&gt; instance.">Gibt die von dieser <see cref="T:System.Text.Json.JsonDocument" />-Instanz verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Analysiert eine Sequenz als UTF-8-codierten Text, der einen einzelnen JSON-Bytewert in einem JsonDocument darstellt.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Eine JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Analysiert einen <see cref="T:System.IO.Stream" /> als UTF-8-codierte Daten, die einen einzelnen JSON-Wert in einem JsonDocument darstellen. Der Stream wird vollständig gelesen.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Die zu analysierenden JSON-Daten.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Eine JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Analysiert Arbeitsspeicher als UTF-8-codierten Text, der einen einzelnen JSON-Bytewert in einem JsonDocument darstellt.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Eine JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON value into a JsonDocument.">Analysiert Text, der einen einzelnen JSON-Zeichenwert in einem JsonDocument darstellt.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Eine JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON string value into a JsonDocument.">Analysiert Text, der einen einzelnen JSON-Zeichenfolgenwert in einem JsonDocument darstellt.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Eine JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Analysiert einen <see cref="T:System.IO.Stream" /> als UTF-8-codierte Daten, die einen einzelnen JSON-Wert in einem JsonDocument darstellen. Der Stream wird vollständig gelesen.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Die zu analysierenden JSON-Daten.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests.">Das Token zum Überwachen von Abbruchanforderungen.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns vsli:raw="A task to produce a JsonDocument representation of the JSON value.">Eine Aufgabe zum Produzieren einer JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary vsli:raw="Parses one JSON value (including objects or arrays) from the provided reader.">Analysiert einen JSON-Wert (einschließlich Objekte oder Arrays) aus dem angegebenen Reader.</summary>
      <param name="reader" vsli:raw="The reader to read.">Der Reader zum Lesen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> enthält nicht unterstützte Optionen.

- oder -

Das aktuelle <paramref name="reader" />-Token startet nicht oder stellt einen Wert dar.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">Es konnte kein Wert aus dem Reader gelesen werden.</exception>
      <returns vsli:raw="A JsonDocument representing the value (and nested values) read from the reader.">Ein JsonDocument, das den Wert (und geschachtelte Werte) darstellt, die aus dem Reader gelesen werden.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary vsli:raw="Attempts to parse one JSON value (including objects or arrays) from the provided reader.">Versucht, einen JSON-Wert (einschließlich Objekte oder Arrays) aus dem angegebenen Reader zu analysieren.</summary>
      <param name="reader" vsli:raw="The reader to read.">Der Reader zum Lesen.</param>
      <param name="document" vsli:raw="When the method returns, contains the parsed document.">Wenn diese Methode zurückgegeben wird, enthält sie das analysierte Dokument.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> enthält nicht unterstützte Optionen.

- oder -

Das aktuelle <paramref name="reader" />-Token startet nicht oder stellt einen Wert dar.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">Es konnte kein Wert aus dem Reader gelesen werden.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a value was read and parsed into a JsonDocument; &lt;see langword=&quot;false&quot; /&gt; if the reader ran out of data while parsing. All other situations result in an exception being thrown.">
        <see langword="true" />, wenn ein Wert gelesen und in ein JsonDocument analysiert wurde; <see langword="false" />, wenn dem Reader beim Analysieren die Daten ausgegangen sind. Alle anderen Fälle führen dazu, dass eine Ausnahme ausgelöst wird.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the document to the provided writer as a JSON value.">Schreibt das Dokument als JSON-Wert in den angegebenen Writer.</summary>
      <param name="writer" vsli:raw="The writer to which to write the document.">Der Writer, in den das Dokument geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="writer" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this &lt;see cref=&quot;P:System.Text.Json.JsonDocument.RootElement&quot; /&gt; would result in invalid JSON.">Die <see cref="P:System.Text.Json.JsonElement.ValueKind" />-Eigenschaft von diesem <see cref="P:System.Text.Json.JsonDocument.RootElement" /> würde zu ungültigem JSON-Code führen.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary vsli:raw="Gets the root element of this JSON document.">Ruft das Stammelement dieses JSON-Dokuments ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the document.">Ein, <see cref="T:System.Text.Json.JsonElement" /> der den Wert des Dokuments darstellt.</returns>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when parsing JSON to create a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Bietet dem Benutzer die Möglichkeit, benutzerdefiniertes Verhalten beim Analysieren von JSON zum Erstellen von <see cref="T:System.Text.Json.JsonDocument" /> zu definieren.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Ruft einen Wert ab, der angibt, ob ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array in der gelesenen JSON-Nutzlast zulässig ist (und ignoriert wird), oder legt diesen Wert fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. Default is &lt;see langword=&quot;false&quot; /&gt;">
        <see langword="true" /> , wenn ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array zulässig ist. andernfalls <see langword="false" /> . Die Standardeinstellung ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; handles comments when reading through the JSON data.">Ruft einen Wert ab, der bestimmt, wie <see cref="T:System.Text.Json.JsonDocument" /> beim Durchlesen der JSON-Daten Kommentare behandelt, oder legt diesen fest.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">Die Enumeration für die Kommentarbehandlung wird auf einen Wert festgelegt, der nicht unterstützt wird (oder nicht innerhalb des <see cref="T:System.Text.Json.JsonCommentHandling" />-Enumeratiosbereichs liegt).</exception>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">Einer der Enumerationswerte, der angibt, wie Kommentare behandelt werden.</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.">Ruft die beim Analysieren von JSON-Daten maximal zulässige Tiefe ab oder legt sie fest, wobei standardmäßig (d.h. 0 ) eine maximale Tiefe von 64 angegeben wird.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">Die maximale Tiefe wird auf einen negativen Wert festgelegt.</exception>
      <returns vsli:raw="The maximum depth allowed when parsing JSON data.">Die maximal zulässige Tiefe beim Auswerten von JSON-Daten.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary vsli:raw="Represents a specific JSON value within a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Stellt einen bestimmten JSON-Wert innerhalb eines <see cref="T:System.Text.Json.JsonDocument" /> dar.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary vsli:raw="Gets a JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Ruft ein JsonElement ab, das nach Ablauf der Lebensdauer des ursprünglichen <see cref="T:System.Text.Json.JsonDocument" /> sicher gespeichert werden kann.</summary>
      <returns vsli:raw="A JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Ein JsonElement, das nach Ablauf der Lebensdauer des ursprünglichen <see cref="T:System.Text.Json.JsonDocument" /> sicher gespeichert werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary vsli:raw="Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.">Ruft einen Enumerator zum Aufzählen der Werte in dem JSON-Array auf, das durch dieses JsonElement dargestellt wird.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="An enumerator to enumerate the values in the JSON array represented by this JsonElement.">Ein Enumerator zum Aufzählen der Werte in dem JSON-Array, das durch dieses JsonElement dargestellt wird.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary vsli:raw="Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Ruft einen Enumerator zum Aufzählen der Eigenschaften in dem JSON-Objekt auf, das durch dieses JsonElement dargestellt wird.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="An enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Ein Enumerator zum Aufzählen der Eigenschaften in dem JSON-Objekt, das durch dieses JsonElement dargestellt wird.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary vsli:raw="Gets the number of values contained within the current array value.">Ruft die Anzahl der in dem aktuellen Arraywert enthaltenen Werte ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The number of values contained within the current array value.">Die Anzahl der in dem aktuellen Arraywert enthaltenen Werte.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Ruft den Wert des Elements als <see cref="T:System.Boolean" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.True&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.False&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist weder <see cref="F:System.Text.Json.JsonValueKind.True" /> noch <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Der Wert des Elements als <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Ruft die aktuelle JSON-Zahl als <see cref="T:System.Byte" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.Byte" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Die aktuelle JSON-Zahl als <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary vsli:raw="Gets the value of the element as a byte array.">Ruft den Wert des Elements als Bytearray ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text and hence cannot be decoded to bytes.">Der Wert ist nicht als Base64-Text codiert und kann daher nicht in Bytes decodiert werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The value decoded as a byte array.">Der Wert, der als Bytearray decodiert wird.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Ruft den Wert des Elements als <see cref="T:System.DateTime" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Der Wert darf nicht als <see cref="T:System.DateTime" /> gelesen werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Der Wert des Elements als <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Ruft den Wert des Elements als <see cref="T:System.DateTimeOffset" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Der Wert darf nicht als <see cref="T:System.DateTimeOffset" /> gelesen werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Der Wert des Elements als <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Ruft die aktuelle JSON-Zahl als <see cref="T:System.Decimal" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.Decimal" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Die aktuelle JSON-Zahl als <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Ruft die aktuelle JSON-Zahl als <see cref="T:System.Double" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.Double" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Die aktuelle JSON-Zahl als <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Ruft den Wert des Elements als <see cref="T:System.Guid" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.Guid" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Der Wert des Elements als <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Ruft die aktuelle JSON-Zahl als <see cref="T:System.Int16" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.Int16" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Die aktuelle JSON-Zahl als <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Ruft die aktuelle JSON-Zahl als <see cref="T:System.Int32" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.Int32" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Die aktuelle JSON-Zahl als <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Ruft die aktuelle JSON-Zahl als <see cref="T:System.Int64" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.Int64" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Die aktuelle JSON-Zahl als <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;utf8PropertyName&quot; /&gt;.">Ruft ein <see cref="T:System.Text.Json.JsonElement" /> ab, das den Wert einer durch <paramref name="utf8PropertyName" /> identifizierten erforderlichen Eigenschaft darstellt.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return.">Die UTF-8-Darstellung (ohne Bytereihenfolge-Marke (Byte-Order-Mark, BOM)) des Namens der zurückzugebenden Eigenschaft.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Es wurde keine Eigenschaft mit dem angeforderten Namen gefunden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Ein <see cref="T:System.Text.Json.JsonElement" />, das den Wert der angeforderten Eigenschaft darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Ruft ein <see cref="T:System.Text.Json.JsonElement" /> ab, das den Wert einer durch <paramref name="propertyName" /> identifizierten erforderlichen Eigenschaft darstellt.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">Der Name der Eigenschaft, deren Wert zurückzugeben ist.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Es wurde keine Eigenschaft mit dem angeforderten Namen gefunden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Ein <see cref="T:System.Text.Json.JsonElement" />, das den Wert der angeforderten Eigenschaft darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Ruft ein <see cref="T:System.Text.Json.JsonElement" /> ab, das den Wert einer durch <paramref name="propertyName" /> identifizierten erforderlichen Eigenschaft darstellt.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">Der Name der Eigenschaft, deren Wert zurückzugeben ist.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Es wurde keine Eigenschaft mit dem angeforderten Namen gefunden.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Ein <see cref="T:System.Text.Json.JsonElement" />, das den Wert der angeforderten Eigenschaft darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary vsli:raw="Gets a string that represents the original input data backing this value.">Ruft eine Zeichenfolge ab, die die ursprünglichen, diesen Wert sichernden Eingabedaten darstellt.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The original input data backing this value.">Die ursprünglichen, diesen Wert sichernden Eingabedaten.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Ruft die aktuelle JSON-Zahl als <see cref="T:System.SByte" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.SByte" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Die aktuelle JSON-Zahl als <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Ruft die aktuelle JSON-Zahl als <see cref="T:System.Single" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.Single" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Die aktuelle JSON-Zahl als <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Ruft den Wert des Elements als <see cref="T:System.String" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist weder <see cref="F:System.Text.Json.JsonValueKind.String" /> noch <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Der Wert des Elements als <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Ruft die aktuelle JSON-Zahl als <see cref="T:System.UInt16" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.UInt16" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Die aktuelle JSON-Zahl als <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Ruft die aktuelle JSON-Zahl als <see cref="T:System.UInt32" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.UInt32" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Die aktuelle JSON-Zahl als <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Ruft die aktuelle JSON-Zahl als <see cref="T:System.UInt64" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Der Wert kann nicht als <see cref="T:System.UInt64" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Die aktuelle JSON-Zahl als <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary vsli:raw="Gets a string representation for the current value appropriate to the value type.">Ruft gemäß dem Werttyp eine Zeichenfolgendarstellung für den aktuellen Wert ab.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="A string representation for the current value appropriate to the value type.">Eine Zeichenfolgendarstellung für den aktuellen Wert gemäß dem Werttyp.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Byte" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Enthält nach dem Beenden der Methode die Byteentsprechung des aktuellen JSON-Zahlentyps, wenn die Konvertierung erfolgreich war.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Byte" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.">Versucht, die aktuelle JSON-Zeichenfolge als Bytearray darzustellen, und legt dazu Base64-Codierung zugrunde.</summary>
      <param name="value" vsli:raw="If the method succeeds, contains the decoded binary representation of the Base64 text.">Enthält die decodierte binäre Darstellung des Base64-Texts, wenn die Methode erfolgreich ist.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte Tokenwert als gültiger Base64-Text codiert ist und erfolgreich in Bytes decodiert werden kann; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zeichenfolge als <see cref="T:System.DateTime" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie Datum und Uhrzeit gemäß der aktuellen JSON-Zeichenfolge.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zeichenfolge als <see cref="T:System.DateTime" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zeichenfolge als <see cref="T:System.DateTimeOffset" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie Datum und Uhrzeit gemäß der aktuellen JSON-Zeichenfolge.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zeichenfolge als <see cref="T:System.DateTimeOffset" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Decimal" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie die dezimale Entsprechung der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Decimal" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Double" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie einen Gleitkommawert mit doppelter Genauigkeit gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Double" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zeichenfolge als <see cref="T:System.Guid" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie die GUID gemäß der aktuellen JSON-Zeichenfolge.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zeichenfolge als <see cref="T:System.Guid" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Int16" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Enthält nach dem Beenden der Methode die 16-Bit-Integerentsprechung des aktuellen JSON-Zahlentyps, wenn die Konvertierung erfolgreich war.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Int16" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Int32" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den 32-Bit-Ganzzahlwert gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Int32" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Int64" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den 64-Bit-Ganzzahlwert gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Int64" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;utf8PropertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Sucht im aktuellen Objekt nach einer Eigenschaft mit dem Namen <paramref name="utf8PropertyName" />, wobei ein Wert zurückgegeben wird, der angibt, ob eine solche Eigenschaft vorhanden ist. Wenn die Eigenschaft vorhanden ist, weist die Methode ihren Wert dem <paramref name="value" />-Argument zu.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.">Die UTF-8-Darstellung (ohne Bytereihenfolge-Marke (Byte-Order-Mark, BOM)) des Namens der zurückzugebenden Eigenschaft.</param>
      <param name="value" vsli:raw="Receives the value of the located property.">Empfängt den Wert der gefundenen Eigenschaft.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft gefunden wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Sucht im aktuellen Objekt nach einer Eigenschaft mit dem Namen <paramref name="propertyName" />, wobei ein Wert zurückgegeben wird, der angibt, ob eine solche Eigenschaft vorhanden ist. Wenn die Eigenschaft vorhanden ist, weist die Methode ihren Wert dem <paramref name="value" />-Argument zu.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">Der Name der zu suchenden Eigenschaft.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Wenn diese Methode zurückgegeben wird, enthält sie den Wert der angegebenen Eigenschaft.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft gefunden wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Sucht im aktuellen Objekt nach einer Eigenschaft mit dem Namen <paramref name="propertyName" />, wobei ein Wert zurückgegeben wird, der angibt, ob eine solche Eigenschaft vorhanden ist. Wenn die Eigenschaft vorhanden ist, wird ihr Wert dem <paramref name="value" />-Argument zugewiesen.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">Der Name der zu suchenden Eigenschaft.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Wenn diese Methode zurückgegeben wird, enthält sie den Wert der angegebenen Eigenschaft.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eigenschaft gefunden wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.SByte" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Enthält nach dem Beenden der Methode die Byteentsprechung mit Vorzeichen des aktuellen JSON-Zahlentyps, wenn die Konvertierung erfolgreich war.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zahl als <see cref="T:System.SByte" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Single" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie einen Gleitkommawert mit einfacher Genauigkeit gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Single" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.UInt16" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Enthält nach dem Beenden der Methode die 16-Bit-Integerentsprechung ohne Vorzeichen des aktuellen JSON-Zahlentyps, wenn die Konvertierung erfolgreich war.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zahl als <see cref="T:System.UInt16" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.UInt32" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den 32-Bit-Ganzzahlwert ohne Vorzeichen gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zahl als <see cref="T:System.UInt32" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.UInt64" /> darzustellen.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den 64-Bit-Ganzzahlwert ohne Vorzeichen gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Zahl als <see cref="T:System.UInt64" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the text represented by a UTF8-encoded byte span to the string value of this element.">Vergleicht den Text, der durch einen UTF8-codierten Bytebereich dargestellt wird, mit dem Zeichenfolgenwert dieses Elements.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Der UTF-8-codierte Text für den Vergleich.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element has the same UTF-8 encoding as&#xA;              &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zeichenfolgenwert dieses Elements dieselbe UTF-8-Codierung wie <paramref name="utf8Text" /> aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares a specified read-only character span to the string value of this element.">Vergleicht einen angegebenen schreibgeschützten Zeichenbereich mit dem Zeichenfolgenwert dieses Elements.</summary>
      <param name="text" vsli:raw="The text to compare against.">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zeichenfolgenwert dieses Elements mit <paramref name="text" /> übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary vsli:raw="Compares a specified string to the string value of this element.">Vergleicht eine angegebene Zeichenfolge mit dem Zeichenfolgenwert dieses Elements.</summary>
      <param name="text" vsli:raw="The text to compare against.">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zeichenfolgenwert dieses Elements mit <paramref name="text" /> übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the element to the specified writer as a JSON value.">Schreibt das Element als JSON-Wert in den angegebenen Writer.</summary>
      <param name="writer" vsli:raw="The writer to which to write the element.">Der Writer, in den das Element geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="writer" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this value is &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Undefined&quot; /&gt;.">Die <see cref="P:System.Text.Json.JsonElement.ValueKind" />-Eigenschaft dieses Werts ist <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary vsli:raw="Gets the value at the specified index if the current value is an &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Ruft den Wert am angegebenen Index ab, wenn der aktuelle Wert ein <see cref="F:System.Text.Json.JsonValueKind.Array" /> ist.</summary>
      <param name="index" vsli:raw="The item index.">Der Elementindex.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not in the range [0, &lt;see cref=&quot;M:System.Text.Json.JsonElement.GetArrayLength&quot; /&gt;()).">
        <paramref name="index" /> befindet sich nicht im Bereich [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The value at the specified index.">Der Wert am angegebenen Index.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary vsli:raw="Gets the type of the current JSON value.">Ruft den Typ des aktuellen JSON-Werts ab.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns vsli:raw="The type of the current JSON value.">Der Typ des aktuellen JSON-Werts.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary vsli:raw="Represents an enumerator for the contents of a JSON array.">Stellt einen Enumerator für die Inhalte eines JSON-Arrays dar.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ArrayEnumerator&quot;&gt;&lt;/xref&gt; instance.">Gibt die von dieser <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" />-Instanz verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Ein Enumerator, mit dem das Array durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Setzt den Enumerator auf das nächste Element der Auflistung.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Auflistung überschritten hat.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element in der Auflistung.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumerator für ein Array mit <see cref="T:System.Text.Json.JsonElement" />-Elementen, das zum Durchlaufen der Sammlung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Ruft das Element in der Auflistung an der aktuellen Position des Enumerators ab.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Das Element in der Auflistung an der aktuellen Position des Enumerators.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Ruft das Element in der Auflistung an der aktuellen Position des Enumerators ab.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Das Element in der Auflistung an der aktuellen Position des Enumerators.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary vsli:raw="Represents an enumerator for the properties of a JSON object.">Stellt einen Enumerator für die Eigenschaften eines JSON-Objekts dar.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ObjectEnumerator&quot;&gt;&lt;/xref&gt; instance.">Gibt die von dieser <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" />-Instanz verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates the properties of an object.">Gibt einen Enumerator zurück, der die Eigenschaften eines Objekts durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the object.">Ein Enumerator, der zum Durchlaufen des Objekts verwendet werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Setzt den Enumerator auf das nächste Element der Auflistung.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Auflistung überschritten hat.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element in der Auflistung.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumerator für <see cref="T:System.Text.Json.JsonProperty" />-Objekte, der zum Durchlaufen der Sammlung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Ruft das Element in der Auflistung an der aktuellen Position des Enumerators ab.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Das Element in der Auflistung an der aktuellen Position des Enumerators.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Ruft das Element in der Auflistung an der aktuellen Position des Enumerators ab.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Das Element in der Auflistung an der aktuellen Position des Enumerators.</returns>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary vsli:raw="Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.">Stellt Methoden zum Transformieren von UTF-8- oder UTF-16-codiertem Text in eine Form bereit, die für JSON geeignet ist.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a UTF-8 text value as a JSON string.">Codiert einen UTF-8-Textwert als JSON-Zeichenfolge</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded text to convert to JSON encoded text.">Der codierte UTF-8-Text, der in codierten JSON-Text konvertiert werden soll</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Der Encoder, der beim Versehen von Zeichenfolgen mit Escapezeichen verwendet wird, oder <see langword="null" />, um den Standardencoder zu verwenden</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;utf8Value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains invalid UTF-8 bytes.">
        <paramref name="utf8Value" /> ist zu groß.

- oder -

<paramref name="utf8Value" /> enthält ungültige UTF-8-Bytes</exception>
      <returns vsli:raw="The encoded JSON text.">Der codierte JSON-Text</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a specified text value as a JSON string.">Codiert den angegebenen Textwert als JSON-Zeichenfolge</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">Der in codierten JSON-Text zu konvertierende Wert</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Der Encoder, der beim Versehen von Zeichenfolgen mit Escapezeichen verwendet wird, oder <see langword="null" />, um den Standardencoder zu verwenden</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> ist zu groß.

- oder -

<paramref name="value" /> enthält ungültige UTF-16-Zeichen</exception>
      <returns vsli:raw="The encoded JSON text.">Der codierte JSON-Text</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes the string text value as a JSON string.">Codiert den Textwert der Zeichenfolge als JSON-Zeichenfolge.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">Der in codierten JSON-Text zu konvertierende Wert</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Der Encoder, der beim Versehen von Zeichenfolgen mit Escapezeichen verwendet wird, oder <see langword="null" />, um den Standardencoder zu verwenden</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> ist zu groß.

- oder -

<paramref name="value" /> enthält ungültige UTF-16-Zeichen</exception>
      <returns vsli:raw="The encoded JSON text.">Der codierte JSON-Text</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance and a specified object, which must also be a &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance, have the same value.">Bestimmt, ob diese Instanz und ein angegebenes Objekt, das ebenfalls eine <see cref="T:System.Text.Json.JsonEncodedText" />-Instanz sein muss, denselben Wert haben.</summary>
      <param name="obj" vsli:raw="The object to compare to this instance.">Das mit dieser Instanz zu vergleichende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance have the same value.">Bestimmt, ob diese Instanz und eine andere angegebene <see cref="T:System.Text.Json.JsonEncodedText" />-Instanz denselben Wert haben.</summary>
      <param name="other" vsli:raw="The object to compare to this instance.">Das mit dieser Instanz zu vergleichende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz und <paramref name="other" /> den gleichen Wert haben, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt;.">Gibt den Hashcode für diesen <see cref="T:System.Text.Json.JsonEncodedText" /> zurück.</summary>
      <returns vsli:raw="The hash code for this instance.">Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary vsli:raw="Converts the value of this instance to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Konvertiert den Wert dieser Instanz in einen <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The underlying UTF-16 encoded string.">Die zugrunde liegende UTF-16-codierte Zeichenfolge.</returns>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary vsli:raw="Gets the UTF-8 encoded representation of the pre-encoded JSON text.">Ruft die UTF-8-codierte Darstellung des vorcodierten JSON-Texts ab.</summary>
      <returns vsli:raw="The UTF-8 encoded representation of the pre-encoded JSON text.">Die UTF-8-codierte Darstellung des vorcodierten JSON-Texts.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary vsli:raw="Defines a custom exception object that is thrown when invalid JSON text is encountered, the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.">Definiert ein benutzerdefiniertes Ausnahmeobjekt, das ausgelöst wird, wenn ungültiger JSON-Text angetroffen wird, wenn die definierte Maximaltiefe überschritten wird oder der JSON-Text nicht mit dem Typ einer Eigenschaft oder eines Objekts kompatibel ist.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.JsonException" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Creates a new exception object with serialized data.">Erstellt ein neues Ausnahmeobjekt mit serialisierten Daten.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Die serialisierten Objektdaten über die ausgelöste Ausnahme.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Ein Objekt, das die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class with a specified error message.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.JsonException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Die kontextspezifische Fehlermeldung.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class, with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.JsonException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Die kontextspezifische Fehlermeldung.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">Die Ausnahme, die die aktuelle Ausnahme verursacht hat.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary vsli:raw="Creates a new exception object to relay error information to the user.">Erstellt ein neues Ausnahmeobjekt, um Fehlerinformationen an den Benutzer weiterzugeben.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Die kontextspezifische Fehlermeldung.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">Der Pfad, unter dem das ungültige JSON gefunden wurde.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">Die Zeilennummer (beginnend mit 0), in der der ungültige JSON-Code beim Deserialisieren gefunden wurde.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count within the current line (starting at 0) where the invalid JSON was encountered.">Die Byteanzahl innerhalb der aktuellen Zeile (beginnend mit 0), bei der der ungültige JSON-Code gefunden wurde.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary vsli:raw="Creates a new exception object to relay error information to the user that includes a specified inner exception.">Erstellt ein neues Ausnahmeobjekt, das eine angegebene innere Ausnahme enthält, um Fehlerinformationen an den Benutzer weiterzugeben.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Die kontextspezifische Fehlermeldung.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">Der Pfad, unter dem das ungültige JSON gefunden wurde.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">Die Zeilennummer (beginnend mit 0), in der der ungültige JSON-Code beim Deserialisieren gefunden wurde.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count (starting at 0) within the current line where the invalid JSON was encountered.">Die Byteanzahl (beginnend mit 0) innerhalb der aktuellen Zeile, bei der der ungültige JSON-Code gefunden wurde.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">Die Ausnahme, die die aktuelle Ausnahme verursacht hat.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">Legt <see cref="T:System.Runtime.Serialization.SerializationInfo" /> mit Informationen zur Ausnahme fest.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Die serialisierten Objektdaten über die ausgelöste Ausnahme.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Ein Objekt, das die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary vsli:raw="Gets the zero-based number of bytes read within the current line before the exception.">Ruft die nullbasierte Anzahl der gelesenen Bytes innerhalb der aktuellen Zeile vor der Ausnahme ab.</summary>
      <returns vsli:raw="The zero-based number of bytes read within the current line before the exception.">Die null basierte Anzahl von Bytes, die in der aktuellen Zeile vor der Ausnahme gelesen werden.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary vsli:raw="Gets the zero-based number of lines read before the exception.">Ruft die nullbasierte Anzahl der gelesenen Zeilen vor der Ausnahme ab.</summary>
      <returns vsli:raw="The zero-based number of lines read before the exception.">Die null basierte Anzahl von Zeilen, die vor der Ausnahme gelesen wurden.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary vsli:raw="Gets a message that describes the current exception.">Ruft eine Meldung ab, mit der die aktuelle Ausnahme beschrieben wird.</summary>
      <returns vsli:raw="The error message that describes the current exception.">Die Fehlermeldung, die die aktuelle Ausnahme beschreibt.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary vsli:raw="Gets The path within the JSON where the exception was encountered.">Ruft den Pfad innerhalb des JSON-Codes ab, unter dem die Ausnahme aufgetreten ist.</summary>
      <returns vsli:raw="The path within the JSON where the exception was encountered.">Der Pfad in dem JSON-Code, in dem die Ausnahme aufgetreten ist.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary vsli:raw="Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.">Bestimmt die Benennungsrichtlinie, die verwendet wird, um einen zeichenfolgenbasierten Namen in ein anderes Format zu konvertieren, z.B. in ein Format, das Camel-Case-Schreibweise verwendet.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary vsli:raw="When overridden in a derived class, converts the specified name according to the policy.">Konvertiert den angegebenen Namen beim Überschreiben in einer abgeleiteten Klasse gemäß der Richtlinie.</summary>
      <param name="name" vsli:raw="The name to convert.">Der zu konvertierende Name.</param>
      <returns vsli:raw="The converted name.">Der konvertierte Name.</returns>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary vsli:raw="Gets the naming policy for camel-casing.">Ruft die Benennungsrichtlinie für die Camel-Case-Schreibweise ab.</summary>
      <returns vsli:raw="The naming policy for camel-casing.">Die Benennungs Richtlinie für die Kamel-Schreibweise.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary vsli:raw="Represents a single property for a JSON object.">Stellt eine einzelne Eigenschaft für ein JSON-Objekt dar.</summary>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the specified UTF-8 encoded text to the name of this property.">Vergleicht den angegebenen UTF-8-codierten Text mit dem Namen dieser Eigenschaft.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Der UTF-8-codierte Text für den Vergleich.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">Der <see cref="T:System.Type" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property has the same UTF-8 encoding as &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Name dieser Eigenschaft dieselbe UTF-8-Codierung wie <paramref name="utf8Text" /> aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the specified text as a character span to the name of this property.">Vergleicht den angegebenen Text als Zeichenbereich mit dem Namen dieser Eigenschaft.</summary>
      <param name="text" vsli:raw="The text to compare against.">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">Der <see cref="T:System.Type" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Name dieser Eigenschaft mit <paramref name="text" /> übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary vsli:raw="Compares the specified string to the name of this property.">Vergleicht die angegebene Zeichenfolge mit dem Namen dieser Eigenschaft.</summary>
      <param name="text" vsli:raw="The text to compare against.">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">Der <see cref="T:System.Type" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Name dieser Eigenschaft mit <paramref name="text" /> übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary vsli:raw="Provides a string representation of the property for debugging purposes.">Stellt eine Zeichenfolgendarstellung der Eigenschaft zum Debuggen bereit.</summary>
      <returns vsli:raw="A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.">Eine Zeichenfolge, die den nicht interpretierten Wert der Eigenschaft enthält, beginnend mit dem Deklarieren von „open-quote“ und endend am letzten Zeichen, das Teil des Werts ist.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the property to the provided writer as a named JSON object property.">Schreibt die Eigenschaft als benannte JSON-Objekteigenschaft in den bereitgestellten Writer.</summary>
      <param name="writer" vsli:raw="The writer to which to write the property.">Der Writer, in den die Eigenschaft geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Text.Json.JsonProperty.Name&quot; /&gt; is too large to be a JSON object property.">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> ist zu groß, um eine JSON-Objekteigenschaft zu sein.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this JSON property's &lt;see cref=&quot;P:System.Text.Json.JsonProperty.Value&quot; /&gt; would result in invalid JSON.">Die <see cref="P:System.Text.Json.JsonElement.ValueKind" />-Eigenschaft für <see cref="P:System.Text.Json.JsonProperty.Value" /> dieser JSON-Eigenschaft würde zu ungültigem JSON-Code führen.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary vsli:raw="Gets the name of this property.">Ruft den Namen dieser Eigenschaft ab.</summary>
      <returns vsli:raw="The name of this property.">Der Name dieser Eigenschaft.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary vsli:raw="Gets the value of this property.">Ruft den Wert dieser Eigenschaft ab.</summary>
      <returns vsli:raw="The value of this property.">Der Wert dieser Eigenschaft.</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when reading JSON.">Bietet dem Benutzer die Möglichkeit, benutzerdefiniertes Verhalten beim Lesen von JSON zu definieren.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Ruft einen Wert ab, der definiert, ob ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array in der gelesenen JSON-Nutzlast zulässig ist (und ignoriert wird), oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> , wenn ein zusätzliches Komma zulässig ist. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; handles comments when reading through the JSON data.">Ruft einen Wert ab, der bestimmt, wie <see cref="T:System.Text.Json.Utf8JsonReader" /> beim Durchlesen der JSON-Daten Kommentare behandelt, oder legt diesen fest.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is being set to a value that is not a member of the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enumeration.">Die Eigenschaft wird auf einen Wert festgelegt, der kein Element der <see cref="T:System.Text.Json.JsonCommentHandling" />-Enumeration ist.</exception>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">Einer der Enumerationswerte, der angibt, wie Kommentare behandelt werden.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.">Ruft die beim Lesen von JSON maximal zulässige Tiefe ab oder legt sie fest, wobei standardmäßig (d.h. 0 (null)) eine maximale Tiefe von 64 angegeben wird.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The maximum depth is being set to a negative value.">Die maximale Tiefe wird auf einen negativen Wert festgelegt.</exception>
      <returns vsli:raw="The maximum depth allowed when reading JSON.">Die maximal zulässige Tiefe beim Lesen von JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary vsli:raw="Defines an opaque type that holds and saves all the relevant state information, which must be provided to the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; to continue reading after processing incomplete data.">Definiert einen nicht transparenten Typ, der alle relevanten Statusinformationen enthält und speichert, die <see cref="T:System.Text.Json.Utf8JsonReader" /> bereitgestellt werden müssen, um den Lesevorgang nach der Verarbeitung unvollständiger Daten fortzusetzen.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonReaderState&quot; /&gt; instance.">Erstellt eine neue <see cref="T:System.Text.Json.JsonReaderState" />-Instanz.</summary>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.">Definiert das benutzerdefinierte Verhalten des <see cref="T:System.Text.Json.Utf8JsonReader" />, das sich vom JSON RFC unterscheidet (z.B. die Handhabung von Kommentaren oder die maximal zulässige Tiefe beim Lesen). In der Standardeinstellung folgt <see cref="T:System.Text.Json.Utf8JsonReader" /> streng dem JSON RFC (Kommentare im JSON-Code sind ungültig) und liest bis zu einer maximalen Tiefe von 64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The maximum depth is set to a non-positive value (&amp;lt; 0).">Die maximale Tiefe wird auf einen nicht positiven Wert (&lt; 0) festgelegt.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary vsli:raw="Gets the custom behavior to use when reading JSON data using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct that may deviate from strict adherence to the JSON specification, which is the default behavior.">Ruft das benutzerdefinierte Verhalten ab, das beim Lesen von JSON-Daten mithilfe der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur verwendet werden soll und möglicherweise von der strengen Einhaltung der JSON-Spezifikation abweicht, die das Standardverhalten darstellt.</summary>
      <returns vsli:raw="The custom behavior to use when reading JSON data.">Das beim Lesen von JSON-Daten zu verwendende benutzerdefinierte Verhalten.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary vsli:raw="Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.">Stellt Funktionen zum Serialisieren von Objekten oder Werttypen in JSON und zum Deserialisieren von JSON in Objekte oder Werttypen bereit.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.">Analysiert den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz eines angegebenen Typs.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Optionen zum Steuern des Verhaltens während der Analyse.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="returnType" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es sind noch Daten im Bereich über einen einzelnen JSON-Wert hinaus vorhanden.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="returnType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of a specified type.">Analysiert den Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz eines angegebenen Typs.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Optionen zum Steuern des Verhaltens während der Analyse.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> oder <paramref name="returnType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">Der JSON-Code ist ungültig.
          
- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es sind noch Daten in der Zeichenfolge über einen einzelnen JSON-Wert hinaus vorhanden.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="returnType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.">Liest einen JSON-Wert (einschließlich Objekten oder Arrays) aus dem bereitgestellten Reader und konvertiert ihn in eine Instanz eines angegebenen Typs.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">Der Reader, aus dem der JSON-Inhalt gelesen werden soll.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
      <param name="options" vsli:raw="Options to control the serializer behavior during reading.">Optionen zum Steuern des Serialisiererverhaltens während des Lesevorgangs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">Der JSON-Code ist ungültig.
          
- oder -

<typeparamref name="returnType" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es konnte kein Wert aus dem Reader gelesen werden.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is using unsupported options.">
        <paramref name="reader" /> verwendet nicht unterstützte Optionen.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="returnType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.">Analysiert den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Optionen zum Steuern des Verhaltens während der Analyse.</param>
      <typeparam name="TValue" vsli:raw="The target type of the UTF-8 encoded text.">Der Zieltyp des UTF-8-codierten Texts.</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es sind noch Daten im Bereich über einen einzelnen JSON-Wert hinaus vorhanden.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.">Analysiert den Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Optionen zum Steuern des Verhaltens während der Analyse.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Der Zieltyp des JSON-Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es sind noch Daten in der Zeichenfolge über einen einzelnen JSON-Wert hinaus vorhanden.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.">Liest einen JSON-Wert (einschließlich Objekten oder Arrays) aus dem bereitgestellten Reader in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">Der Reader, aus dem der JSON-Inhalt gelesen werden soll.</param>
      <param name="options" vsli:raw="Options to control serializer behavior during reading.">Optionen zum Steuern des Serialisiererverhaltens während des Lesevorgangs.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Der Zieltyp des JSON-Werts.</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es konnte kein Wert aus dem Reader gelesen werden.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; uses unsupported options.">
        <paramref name="reader" /> verwendet nicht unterstützte Optionen.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.">Liest den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, asynchron in eine Instanz eines angegebenen Typs. Der Datenstrom wird vollständig gelesen.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Die zu analysierenden JSON-Daten.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Optionen zum Steuern des Verhaltens während des Lesevorgangs.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token that may be used to cancel the read operation.">Ein Abbruchtoken, das verwendet werden kann, um den Lesevorgang abzubrechen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> oder <paramref name="returnType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es verbleiben Daten im Datenstrom.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="returnType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion.">Kiest den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, asynchron in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird. Der Datenstrom wird vollständig gelesen.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Die zu analysierenden JSON-Daten.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Optionen zum Steuern des Verhaltens während des Lesevorgangs.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the read operation.">Ein Token, das verwendet werden kann, um den Lesevorgang abzubrechen.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Der Zieltyp des JSON-Werts.</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es verbleiben Daten im Datenstrom.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt;is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a specified type into a JSON string.">Konvertiert den Wert eines angegebenen Typs in eine JSON-Zeichenfolge.</summary>
      <param name="value" vsli:raw="The value to convert.">Der zu konvertierende Wert.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Optionen zum Steuern des Konvertierungsverhaltens.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="inputType" /> ist nicht mit <paramref name="value" /> kompatibel.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="inputType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="The JSON string representation of the value.">Die JSON-Zeichenfolgendarstellung des Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of the specified type to the provided writer.">Schreibt die JSON-Darstellung des angegebenen Typs in den bereitgestellten Writer.</summary>
      <param name="writer" vsli:raw="The JSON writer to write to.">Der JSON-Writer, in den geschrieben werden soll.</param>
      <param name="value" vsli:raw="The value to convert and write.">Der zu konvertierende und zu schreibende Wert.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Optionen zum Steuern des Serialisierungsverhaltens.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;">
        <paramref name="inputType" /> ist nicht mit <paramref name="value" /> kompatibel.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; or &lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> oder <paramref name="inputType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="inputType" /> oder die serialisierbaren Member vorhanden.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string.">Konvertiert den Wert eines von einem generischen Typparameter angegebenen Typs in eine JSON-Zeichenfolge.</summary>
      <param name="value" vsli:raw="The value to convert.">Der zu konvertierende Wert.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Optionen zum Steuern des Serialisierungsverhaltens.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Der Typ des zu serialisierenden Werts.</typeparam>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A JSON string representation of the value.">Eine JSON-Zeichenfolgendarstellung des Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of a type specified by a generic type parameter to the provided writer.">Schreibt die JSON-Darstellung eines Typs, der von einem generischen Typparameter angegeben wird, in den bereitgestellten Writer.</summary>
      <param name="writer" vsli:raw="A JSON writer to write to.">Ein JSON-Writer, in den geschrieben werden soll.</param>
      <param name="value" vsli:raw="The value to convert and write.">Der zu konvertierende und zu schreibende Wert.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Optionen zum Steuern des Serialisierungsverhaltens.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Der Typ des zu serialisierenden Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.">Konvertiert den Wert eines angegebenen Typs asynchron in UTF-8-codierten JSON-Text und schreibt ihn in den angegebenen Datenstrom.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">Der UTF-8-Datenstrom, in den geschrieben werden soll.</param>
      <param name="value" vsli:raw="The value to convert.">Der zu konvertierende Wert.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Optionen zum Steuern des Serialisierungsverhaltens.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Ein Token, das verwendet werden kann, um den Schreibvorgang abzubrechen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="inputType" /> ist nicht mit <paramref name="value" /> kompatibel.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> oder <paramref name="inputType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="inputType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.">Konvertiert einen Wert eines Typs, der durch einen generischen Typparameter angegeben wird, asynchron in UTF-8-codierten JSON-Text und schreibt ihn in einen Datenstrom.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">Der UTF-8-Datenstrom, in den geschrieben werden soll.</param>
      <param name="value" vsli:raw="The value to convert.">Der zu konvertierende Wert.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Optionen zum Steuern des Serialisierungsverhaltens.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Ein Token, das verwendet werden kann, um den Schreibvorgang abzubrechen.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Der Typ des zu serialisierenden Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.">Konvertiert einen Wert des angegebenen Typs in eine JSON-Zeichenfolge, die als UTF-8-Bytes codiert ist.</summary>
      <param name="value" vsli:raw="The value to convert.">Der zu konvertierende Wert.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Optionen zum Steuern des Konvertierungsverhaltens.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="inputType" /> ist nicht mit <paramref name="value" /> kompatibel.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="inputType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Eine JSON-Zeichenfolgendarstellung des Werts, die als UTF-8-Bytes codiert ist.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.">Konvertiert den Wert eines Typs, der durch einen generischen Typparameter angegeben wird, in eine als UTF-8-Bytes codierte JSON-Zeichenfolge.</summary>
      <param name="value" vsli:raw="The value to convert.">Der zu konvertierende Wert.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Optionen zum Steuern des Konvertierungsverhaltens.</param>
      <typeparam name="TValue" vsli:raw="The type of the value.">Der Typ des Werts.</typeparam>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Eine JSON-Zeichenfolgendarstellung des Werts, die als UTF-8-Bytes codiert ist.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerDefaults">
      <summary vsli:raw="Specifies scenario-based default serialization options that can be used to construct a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance.">Gibt an, welche Standardoptionen von <see cref="T:System.Text.Json.JsonSerializerOptions" /> verwendet werden.</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.General">
      <summary vsli:raw="&lt;para&gt;General-purpose option values. These are the same settings that are applied if a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt; member isn't specified.&lt;/para&gt;&lt;para&gt;For information about the default property values that are applied, see JsonSerializerOptions properties.&lt;/para&gt;">Gibt an, dass allgemeine Werte verwendet werden sollen. Dies sind die gleichen Einstellungen, die angewendet werden, wenn keine <see cref="T:System.Text.Json.JsonSerializerDefaults" /> angegeben sind.</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.Web">
      <summary vsli:raw="&lt;para&gt;Option values appropriate to Web-based scenarios.&lt;/para&gt;&lt;para&gt;This member implies that:&lt;/para&gt;&lt;para&gt;- Property names are treated as case-insensitive.&lt;/para&gt;&lt;para&gt;- &quot;camelCase&quot; name formatting should be employed.&lt;/para&gt;&lt;para&gt;- Quoted numbers (JSON strings for number properties) are allowed.&lt;/para&gt;">Gibt an, dass Werte verwendet werden sollen, die für webbasierte Szenarien besser geeignet sind.</summary>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary vsli:raw="Provides options to be used with &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt;.">Stellt Optionen bereit, die mit der <see cref="T:System.Text.Json.JsonSerializer" />-Klasse verwendet werden sollen</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.JsonSerializerOptions" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance with a predefined set of options determined by the specified &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt;.">Konstruiert eine neue <see cref="T:System.Text.Json.JsonSerializerOptions" />-Instanz mit einer vordefinierten Menge von Optionen, die durch die angegebenen <see cref="T:System.Text.Json.JsonSerializerDefaults" /> bestimmt wird.</summary>
      <param name="defaults" vsli:raw="The &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt; to reason about.">Der zu diskutierende <see cref="T:System.Text.Json.JsonSerializerDefaults" />.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Copies the options from a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance to a new instance.">Kopiert die Optionen aus einer <see cref="T:System.Text.Json.JsonSerializerOptions" />-Instanz in eine neue Instanz.</summary>
      <param name="options" vsli:raw="The options instance to copy options from.">Die Optionsinstanz, aus der Optionen kopiert werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary vsli:raw="Returns the converter for the specified type.">Gibt den Konverter für den angegebenen Typ zurück</summary>
      <param name="typeToConvert" vsli:raw="The type to return a converter for.">Der Typ, für den ein Konverter zurückgegeben wird</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The configured &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;typeToConvert&quot; /&gt; returned an invalid converter.">Der konfigurierte <see cref="System.Text.Json.Serialization.JsonConverter" /> für <paramref name="typeToConvert" /> gab einen ungültigen Konverter zurück.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;typeToConvert&quot; /&gt; or its serializable members.">Es ist kein kompatibler <see cref="System.Text.Json.Serialization.JsonConverter" /> für <paramref name="typeToConvert" /> oder seine serialisierbaren Member vorhanden.</exception>
      <returns vsli:raw="The first converter that supports the given type.">Der erste Konverter, der den angegebenen Typ unterstützt, oder <see langword="null" />, wenn kein Konverter vorhanden ist</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary vsli:raw="Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.">Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array in der deserialisierten JSON-Nutzlast zulässig ist (und ignoriert wird)</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" /> , wenn ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array zulässig ist (und ignoriert wird); <see langword="false" /> andernfalls.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary vsli:raw="Gets the list of user-defined converters that were registered.">Ruft die Liste der registrierten benutzerdefinierten Konverter ab</summary>
      <returns vsli:raw="The list of custom converters.">Die Liste der benutzerdefinierten Konverter.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary vsli:raw="Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.">Ruft die Standardpuffergröße in Byte ab, die beim Erstellen temporärer Puffer verwendet werden soll, oder legt diese fest.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer size is less than 1.">Die Puffergröße ist kleiner als 1.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <returns vsli:raw="The default buffer size in bytes.">Die Standardpuffergröße in Bytes.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition">
      <summary vsli:raw="Gets or sets a value that determines when properties with default values are ignored during serialization or deserialization.&#xA; The default value is &lt;see cref=&quot;F:System.Text.Json.Serialization.JsonIgnoreCondition.Never&quot; /&gt;.">Gibt eine Bedingung an, um festzulegen, wann Eigenschaften mit Standardwerten bei der Serialisierung oder Deserialisierung ignoriert werden.
Der Standardwert ist <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="This property is set to &lt;see cref=&quot;F:System.Text.Json.Serialization.JsonIgnoreCondition.Always&quot; /&gt;.">Die Eigenschaft ist auf <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always" /> festgelegt.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues&quot; /&gt; has been set to &lt;see langword=&quot;true&quot; /&gt;. These properties cannot be used together.">Diese Eigenschaft wird festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.

- oder -

<see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> wurde auf <see langword="true" /> festgelegt. Diese Eigenschaften können nicht gleichzeitig verwendet werden.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary vsli:raw="Gets or sets the policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format, such as camel-casing.">Ruft die Richtlinie ab, die zum Konvertieren des Namens eines <see cref="T:System.Collections.IDictionary" />-Schlüssels in ein anderes Format (z. B. die Camel-Case-Schreibweise) verwendet wird, oder legt sie fest.</summary>
      <returns vsli:raw="The policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format.">Die Richtlinie, die verwendet wird, um einen <see cref="T:System.Collections.IDictionary" /> Schlüsselnamen in ein anderes Format zu konvertieren.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Ruft den Encoder ab oder legt den Encoder fest, der beim Versehen von Zeichenfolgen mit Escapezeichen verwendet wird, oder <see langword="null" />, um den Standardencoder zu verwenden.</summary>
      <returns vsli:raw="The JavaScript character encoding.">Die JavaScript-Zeichencodierung.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary vsli:raw="Gets or sets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; values are ignored during serialization and deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Ruft einen Wert ab, der bestimmt, ob <see langword="null" />-Werte während der Serialisierung und Deserialisierung ignoriert werden, oder legt ihn fest. Der Standardwert ist <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition&quot; /&gt; has been set to a non-default value. These properties cannot be used together.">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.

- oder -

<see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" /> wurde auf nicht auf einen Standardwert festgelegt. Diese Eigenschaften können nicht gleichzeitig verwendet werden.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if null values are ignored during serialization and deserialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> So ignorieren Sie NULL-Werte während der Serialisierung und Deserialisierung andernfalls Siehe langword = "false"/ &gt; .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyFields">
      <summary vsli:raw="Gets or sets a value that indicates whether read-only fields are ignored during serialization. A field is read-only if it is marked with the &lt;see langword=&quot;readonly&quot; /&gt; keyword. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Bestimmt, ob schreibgeschützte Felder während der Serialisierung ignoriert werden. Eine Eigenschaft ist schreibgeschützt, wenn sie nicht mit dem <see langword="readonly" />-Schlüsselwort gekennzeichnet ist. Der Standardwert ist <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">Diese Eigenschaft wird festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only fields are ignored during serialization; &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" /> , wenn schreibgeschützte Felder bei der Serialisierung ignoriert werden sollen. <see langword="false" /> andernfalls.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary vsli:raw="Gets a value that indicates whether read-only properties are ignored during serialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Ruft einen Wert ab, der bestimmt, ob schreibgeschützte Eigenschaften während der Serialisierung ignoriert werden Der Standardwert ist <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only properties are ignored during serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> So ignorieren Sie schreibgeschützte Eigenschaften während der Serialisierung andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IncludeFields">
      <summary vsli:raw="Gets or sets a value that indicates whether fields are handled during serialization and deserialization.&#xA;            The default value is &lt;see langword=&quot;false&quot; /&gt;.">Bestimmt, ob Felder bei Serialisierung und Deserialisierung behandelt werden.
Der Standardwert ist <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">Diese Eigenschaft wird festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.">Ruft die bei der Serialisierung oder Deserialisierung von JSON maximal zulässige Tiefe ab oder legt sie auf den Standardwert 0 (null) fest, wobei eine maximale Tiefe von 64 angegeben wird.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">Die maximale Tiefe wird auf einen negativen Wert festgelegt.</exception>
      <returns vsli:raw="The maximum depth allowed when serializing or deserializing JSON.">Die maximal zulässige Tiefe bei der Serialisierung oder Deserialisierung von JSON.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.NumberHandling">
      <summary vsli:raw="Gets or sets an object that specifies how number types should be handled when serializing or deserializing.">Gibt an, wie Zahlentypen bei der Serialisierung oder Deserialisierung behandelt werden sollen.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">Diese Eigenschaft wird festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary vsli:raw="Gets or sets a value that indicates whether a property's name uses a case-insensitive comparison during deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Ruft einen Wert ab oder legt einen Wert fest, der bestimmt, ob der Name einer Eigenschaft bei der Deserialisierung einen Vergleich ohne Beachtung der Groß-/Kleinschreibung verwendet. Der Standardwert ist <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if property names are compared case-insensitively; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> So vergleichen Sie Eigenschaftsnamen unter Berücksichtigung der Groß-/Kleinschreibung andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary vsli:raw="Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Ruft einen Wert ab oder legt einen Wert fest, der die Richtlinie angibt, mit der der Name einer Eigenschaft in einem Objekt in ein anderes Format konvertiert wird (z. B. Camel-Case), oder <see langword="null" />, um die Eigenschaftsnamen unverändert zu lassen</summary>
      <returns vsli:raw="A property naming policy, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Eine Benennungs Richtlinie für Eigenschaften oder, <see langword="null" /> um Eigenschaftsnamen unverändert zu lassen.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary vsli:raw="Gets or sets a value that defines how comments are handled during deserialization.">Ruft einen Wert ab oder legt einen Wert fest, der definiert, wie Kommentare während der Deserialisierung behandelt werden</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">Die Enumeration für die Kommentarbehandlung wird auf einen Wert festgelegt, der nicht unterstützt wird (oder nicht innerhalb des <see cref="T:System.Text.Json.JsonCommentHandling" />-Enumeratiosbereichs liegt).</exception>
      <returns vsli:raw="A value that indicates whether comments are allowed, disallowed, or skipped.">Ein Wert, der angibt, ob Kommentare zulässig, unzulässig oder übersprungen werden.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler">
      <summary vsli:raw="Gets or sets an object that specifies how object references are handled when reading and writing JSON.">Konfiguriert, wie Objektverweise beim Lesen und Schreiben von JSON behandelt werden sollen.</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary vsli:raw="Gets or sets a value that indicates whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.">Ruft einen Wert ab oder legt einen Wert fest, der definiert, ob JSON eine automatische Strukturierung und Einrückung verwenden soll. Standardmäßig wird JSON ohne zusätzlichen Leerraum serialisiert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if JSON is pretty printed on serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> , wenn JSON bei der Serialisierung Recht gedruckt werden soll. andernfalls <see langword="false" /> . Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary vsli:raw="Defines the various JSON tokens that make up a JSON text.">Definiert die verschiedenen JSON-Token, aus denen ein JSON-Text besteht.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary vsli:raw="The token type is a comment string.">Der Tokentyp ist eine Kommentarzeichenfolge.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary vsli:raw="The token type is the end of a JSON array.">Der Tokentyp stellt das Ende eines JSON-Arrays dar.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary vsli:raw="The token type is the end of a JSON object.">Der Tokentyp stellt das Ende eines JSON-Objekts dar.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary vsli:raw="The token type is the JSON literal false.">Der Tokentyp ist das JSON-Literal false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;). This is the default token type if no data has been read by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Es ist kein Wert vorhanden (im Gegensatz zu <see cref="F:System.Text.Json.JsonTokenType.Null" />).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary vsli:raw="The token type is the JSON literal null.">Der Tokentyp ist das JSON-Literal NULL.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary vsli:raw="The token type is a JSON number.">Der Tokentyp ist eine JSON-Zahl.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary vsli:raw="The token type is a JSON property name.">Der Tokentyp ist ein JSON-Eigenschaftenname.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary vsli:raw="The token type is the start of a JSON array.">Der Tokentyp stellt den Anfang eines JSON-Arrays dar.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary vsli:raw="The token type is the start of a JSON object.">Der Tokentyp stellt den Anfang eines JSON-Objekts dar.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary vsli:raw="The token type is a JSON string.">Der Tokentyp ist eine JSON-Zeichenfolge.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary vsli:raw="The token type is the JSON literal true.">Der Tokentyp ist das JSON-Literal true.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary vsli:raw="Specifies the data type of a JSON value.">Gibt den Datentyp eines JSON-Werts an.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary vsli:raw="A JSON array.">Ein JSON-Array.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary vsli:raw="The JSON value false.">Der JSON-Wert false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary vsli:raw="The JSON value null.">Der JSON-Wert NULL.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary vsli:raw="A JSON number.">Ein JSON-Zahlenwert.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary vsli:raw="A JSON object.">Ein JSON-Objekt.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary vsli:raw="A JSON string.">Eine JSON-Zeichenfolge.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary vsli:raw="The JSON value true.">Der JSON-Wert true.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;).">Es ist kein Wert vorhanden (im Gegensatz zu <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary vsli:raw="Allows the user to define custom behavior when writing JSON using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;.">Ermöglicht dem Benutzer das Definieren von benutzerdefiniertem Verhalten beim Schreiben von JSON mit dem <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Ruft den Encoder ab oder legt den Encoder fest, der beim Versehen von Zeichenfolgen mit Escapezeichen verwendet wird, oder <see langword="null" />, um den Standardencoder zu verwenden.</summary>
      <returns vsli:raw="The JavaScript character encoder used to override the escaping behavior.">Der JavaScript-Zeichen Encoder, mit dem das Escapeverhalten überschrieben wird.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.">Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob der <see cref="T:System.Text.Json.Utf8JsonWriter" /> die JSON-Ausgabe formatieren soll. Dazu gehört das Einrücken geschachtelter JSON-Token, das Hinzufügen neuer Zeilen und das Einfügen von Leerzeichen zwischen Eigenschaftsnamen und -werten.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON output is formatted; &lt;see langword=&quot;false&quot; /&gt; if the JSON is written without any extra white space. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> So formatieren Sie die JSON-Ausgabe <see langword="false" /> , wenn ohne zusätzlichen Leerraum geschrieben werden soll. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should skip structural validation and allow the user to write invalid JSON.">Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob der <see cref="T:System.Text.Json.Utf8JsonWriter" /> die strukturelle Überprüfung überspringen und dem Benutzer das Schreiben von ungültigem JSON ermöglichen soll.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if structural validation is skipped and invalid JSON is allowed; &lt;see langword=&quot;false&quot; /&gt; if an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown on any attempt to write invalid JSON.">
        <see langword="true" /> um die strukturelle Validierung zu überspringen und ungültige JSON zuzulassen. <see langword="false" /> , um <see cref="T:System.InvalidOperationException" /> bei jedem Versuch, einen ungültigen JSON-Code zu schreiben, eine auszulösen</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary vsli:raw="Provides the base class for serialization attributes.">Stellt die Basisklasse für Serialisierungsattribute bereit.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonAttribute&quot; /&gt;.">Erstellt eine neue Instanz der <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConstructorAttribute">
      <summary vsli:raw="When placed on a constructor, indicates that the constructor should be used to create instances of the type on deserialization.">Gibt beim Platzieren in einem Konstruktor an, dass der Konstruktor verwendet werden soll, um bei der Deserialisierung Instanzen des Typs zu erstellen.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConstructorAttribute&quot; /&gt;.">Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary vsli:raw="Converts an object or value to or from JSON.">Konvertiert ein Objekt oder einen Wert in bzw. aus JSON.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary vsli:raw="When overridden in a derived class, determines whether the converter instance can convert the specified object type.">Bestimmt beim Überschreiben in einer abgeleiteten Klasse, ob die Konverterinstanz den angegebenen Objekttyp konvertieren kann</summary>
      <param name="typeToConvert" vsli:raw="The type of the object to check whether it can be converted by this converter instance.">Der Typ des Objekts, um zu überprüfen, ob es von der Konverterinstanz konvertiert werden kann</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance can convert the specified object type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Instanz den angegebenen Objekttyp konvertieren kann; andernfalls <see langword="false" /></returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary vsli:raw="Converts an object or value to or from JSON.">Konvertiert ein Objekt oder einen Wert in bzw. aus JSON.</summary>
      <typeparam name="T" vsli:raw="The type of object or value handled by the converter.">Der Typ des Objekts oder Werts, der vom Konverter behandelt wird.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter`1&quot; /&gt; instance.">Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted.">Bestimmt, ob der angegebene Typ konvertiert werden kann.</summary>
      <param name="typeToConvert" vsli:raw="The type to compare against.">Der Typ, mit dem verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typ konvertiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads and converts the JSON to type &lt;typeparamref name=&quot;T&quot; /&gt;.">Liest und konvertiert den JSON-Code in den Typ <typeparamref name="T" />.</summary>
      <param name="reader" vsli:raw="The reader.">Der Reader.</param>
      <param name="typeToConvert" vsli:raw="The type to convert.">Der zu konvertierende Typ.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Ein Objekt, das die zu verwendenden Serialisierungsoptionen angibt.</param>
      <returns vsli:raw="The converted value.">Der konvertierte Wert.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes a specified value as JSON.">Schreibt einen angegebenen Wert als JSON.</summary>
      <param name="writer" vsli:raw="The writer to write to.">Das Writer-Objekt, in das geschrieben werden soll.</param>
      <param name="value" vsli:raw="The value to convert to JSON.">Der in JSON zu konvertierende Wert.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Ein Objekt, das die zu verwendenden Serialisierungsoptionen angibt.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull">
      <summary vsli:raw="Gets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; should be passed to the converter on serialization, and whether &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt; should be passed on deserialization.">Gibt an, ob <see langword="null" /> bei der Serialisierung an den Konverter übergeben werden soll und ob <see cref="F:System.Text.Json.JsonTokenType.Null" /> bei der Deserialisierung übergeben werden soll.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary vsli:raw="When placed on a property or type, specifies the converter type to use.">Gibt bei Anordnung in einer Eigenschaft oder einem Typ den Konvertertyp an, der verwendet werden soll.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;.">Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt; with the specified converter type.">Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> mit dem angegebenen Konvertertyp.</summary>
      <param name="converterType" vsli:raw="The type of the converter.">Der Typ des Konverters.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary vsli:raw="When overridden in a derived class and &lt;see cref=&quot;P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, allows the derived class to create a &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter&quot; /&gt; in order to pass additional state.">Bei einer Überschreibung in einer abgeleiteten Klasse und Festlegung von <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> auf <see langword="null" /> kann mit der abgeleiteten Klasse ein <see cref="T:System.Text.Json.Serialization.JsonConverter" />-Element erstellt werden, um einen zusätzlichen Status zu übergeben.</summary>
      <param name="typeToConvert" vsli:raw="The type of the converter.">Der Typ des Konverters.</param>
      <returns vsli:raw="The custom converter.">Der benutzerdefinierte Konverter.</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">Ruft den Typ von <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> ab. Es wird <see langword="null" /> zurückgegeben, wenn die Erstellung ohne Typ durchgeführt wurde.</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">Der Typ des <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> oder, <see langword="null" /> Wenn er ohne Typ erstellt wurde.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary vsli:raw="Supports converting several types by using a factory pattern.">Unterstützt das Konvertieren verschiedener Typen mithilfe eines Factorymusters.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary vsli:raw="When overridden in a derived class, initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterFactory&quot; /&gt; class.">Initialisiert beim Überschreiben in einer abgeleiteten Klasse eine neue Instanz der <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for a specified type.">Erstellt einen Konverter für einen angegebenen Typ.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">Der vom Konverter verarbeitete Typ.</param>
      <param name="options" vsli:raw="The serialization options to use.">Die zu verwendenden Serialisierungsoptionen.</param>
      <returns vsli:raw="A converter for which &lt;typeparamref name=&quot;T&quot; /&gt; is compatible with &lt;paramref name=&quot;typeToConvert&quot; /&gt;.">Ein Konverter, für den <typeparamref name="T" /> mit <paramref name="typeToConvert" /> kompatibel ist.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary vsli:raw="When placed on a property of type &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.">Bei der Platzierung in einer Eigenschaft vom Typ <see cref="T:System.Collections.Generic.IDictionary`2" /> werden alle Eigenschaften, die nicht über ein übereinstimmendes Element verfügen, während der Deserialisierung diesem Wörterbuch hinzugefügt und während der Serialisierung geschrieben.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonExtensionDataAttribute&quot; /&gt; class.">Instanziiert eine neue Instanz der <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary vsli:raw="Prevents a property from being serialized or deserialized.">Verhindert, dass eine Eigenschaft serialisiert oder deserialisiert wird.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt;.">Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition">
      <summary vsli:raw="Gets or sets the condition that must be met before a property will be ignored.">Gibt die Bedingung an, die erfüllt sein muss, damit eine Eigenschaft ignoriert wird.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreCondition">
      <summary vsli:raw="Controls how the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt; ignores properties on serialization and deserialization.">Steuert, wie das <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> bei der Serialisierung und Deserialisierung Eigenschaften ignoriert.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always">
      <summary vsli:raw="Property is always ignored.">Die Eigenschaft wird immer ignoriert.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never">
      <summary vsli:raw="Property is always serialized and deserialized, regardless of &lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues&quot; /&gt; configuration.">Die Eigenschaft wird immer serialisiert und deserialisiert, unabhängig von der Konfiguration von <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault">
      <summary vsli:raw="Property is ignored only if it equals the default value for its type.">Die Eigenschaft wird nur ignoriert, wenn sie <see langword="null" /> lautet.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull">
      <summary vsli:raw="Property is ignored if its value is &lt;see langword=&quot;null&quot; /&gt;. This is applied only to reference-type properties and fields.">Wenn der Wert <see langword="null" /> ist, wird die Eigenschaft während der Serialisierung ignoriert. Dies wird nur auf Verweistypeigenschaften und -felder angewendet.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIncludeAttribute">
      <summary vsli:raw="Indicates that the member should be included for serialization and deserialization.">Gibt an, dass der Member in die Serialisierung und Deserialisierung einbezogen werden soll.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The attribute is applied to a non-public property.">Das Attribut wird auf eine nicht öffentliche Eigenschaft angewendet.</exception>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIncludeAttribute&quot; /&gt;.">Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandling">
      <summary vsli:raw="Determines how &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; handles numbers when serializing and deserializing.">Bestimmt, wie <see cref="T:System.Text.Json.JsonSerializer" /> Zahlen bei der Serialisierung und Deserialisierung behandelt.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals">
      <summary vsli:raw="The &quot;NaN&quot;, &quot;Infinity&quot;, and &quot;-Infinity&quot; &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; tokens can be read as floating-point constants, and the &lt;see cref=&quot;T:System.Single&quot; /&gt; and &lt;see cref=&quot;T:System.Double&quot; /&gt; values for these constants will be written as their corresponding JSON string representations.">Die <see cref="F:System.Text.Json.JsonTokenType.String" />-Token „NaN“, „Infinity“ und „-Infinity“ können als Gleitkommakonstanten gelesen werden, und die <see cref="T:System.Single" />- und <see cref="T:System.Double" />-Werte für diese Konstanten werden als ihre entsprechenden JSON-Zeichenfolgendarstellungen geschrieben.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString">
      <summary vsli:raw="Numbers can be read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; tokens. Does not prevent numbers from being read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt; token.">Zahlen können aus <see cref="F:System.Text.Json.JsonTokenType.String" />-Token gelesen werden. Dies verhindert nicht, dass Zahlen aus <see cref="F:System.Text.Json.JsonTokenType.Number" />-Token gelesen werden.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.Strict">
      <summary vsli:raw="Numbers will only be read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt; tokens and will only be written as JSON numbers (without quotes).">Zahlen werden nur aus <see cref="F:System.Text.Json.JsonTokenType.Number" />-Token gelesen und nur als JSON-Zahlen (ohne Anführungszeichen) geschrieben.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString">
      <summary vsli:raw="Numbers will be written as JSON strings (with quotes), not as JSON numbers.">Zahlen werden als JSON-Zeichenfolgen (mit Anführungszeichen) geschrieben, nicht als JSON-Zahlen.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute">
      <summary vsli:raw="When placed on a type, property, or field, indicates what &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonNumberHandling&quot; /&gt; settings should be used when serializing or deserializing numbers.">Gibt bei Platzierung in einem Typ, einer Eigenschaft oder einem Feld an, welche <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" />-Einstellungen beim Serialisieren oder Deserialisieren von Zahlen verwendet werden sollen.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonNumberHandlingAttribute&quot; /&gt;.">Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute" />.</summary>
      <param name="handling" vsli:raw="A bitwise combination of the enumeration values that specify how number types should be handled when serializing or deserializing.">Eine bitweise Kombination der Enumerationswerte, die angeben, wie Zahlentypen bei der Serialisierung oder Deserialisierung behandelt werden sollen.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonNumberHandlingAttribute.Handling">
      <summary vsli:raw="Indicates what settings should be used when serializing or deserializing numbers.">Gibt an, welche Einstellungen beim Serialisieren oder Deserialisieren von Zahlen verwendet werden sollen.</summary>
      <returns vsli:raw="An object that determines the number serialization and deserialization settings.">Ein-Objekt, das die Serialisierungs-und deserialisierungseinstellungen der Zahl bestimmt.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary vsli:raw="Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Gibt den Eigenschaftsnamen an, der beim Serialisieren und Deserialisieren im JSON-Code vorhanden ist. Dadurch wird jede von <see cref="T:System.Text.Json.JsonNamingPolicy" />angegebene Benennungsrichtlinie außer Kraft gesetzt.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonPropertyNameAttribute&quot; /&gt; with the specified property name.">Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> mit dem angegebenen Eigenschaftsnamen.</summary>
      <param name="name" vsli:raw="The name of the property.">Den Namen der Eigenschaft.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the name of the property.">Ruft den Namen der Eigenschaft ab.</summary>
      <returns vsli:raw="The name of the property.">Den Namen der Eigenschaft.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary vsli:raw="Converts enumeration values to and from strings.">Konvertiert Enumerationswerte in und aus Zeichenfolgen.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with the default naming policy that allows integer values.">Initialisiert eine Instanz der <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" />-Klasse mit der Standardbenennungsrichtlinie, die Integerwerte zulässt.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.">Initialisiert eine Instanz der <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" />-Klasse mit einer angegebenen Benennungsrichtlinie und einem Wert, der angibt, ob nicht definierte Enumerationswerte zulässig sind.</summary>
      <param name="namingPolicy" vsli:raw="The optional naming policy for writing enum values.">Die optionale Benennungsrichtlinie zum Schreiben von Enumerationswerten.</param>
      <param name="allowIntegerValues" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow undefined enum values; otherwise, &lt;see langword=&quot;false&quot; /&gt;. When &lt;see langword=&quot;true&quot; /&gt;, if an enum value isn't defined, it will output as a number rather than a string.">
        <see langword="true" />, um nicht definierte Enumerationswerte zuzulassen, andernfalls <see langword="false" />. Wenn <see langword="true" /> und kein Enumerationswert definiert ist, wird eine Zahl anstelle einer Zeichenfolge ausgegeben.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted to an enum.">Bestimmt, ob der angegebene Typ in eine Enumeration konvertiert werden kann.</summary>
      <param name="typeToConvert" vsli:raw="The type to be checked.">Der zu überprüfende Typ.</param>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the type can be converted; otherwise, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt;.">
        <see langword="true" />, wenn der Typ konvertiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for the specified type.">Erstellt einen Konverter für den angegebenen Typ.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">Der vom Konverter verarbeitete Typ.</param>
      <param name="options" vsli:raw="The serialization options to use.">Die zu verwendenden Serialisierungsoptionen.</param>
      <returns vsli:raw="A converter for which &lt;code data-dev-comment-type=&quot;typeparamref&quot;&gt;T&lt;/code&gt; is compatible with &lt;code data-dev-comment-type=&quot;paramref&quot;&gt;typeToConvert&lt;/code&gt;.">Ein Konverter, für den <typeparamref name="T" /> mit <paramref name="typeToConvert" /> kompatibel ist.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.">Diese Klasse definiert, wie der <see cref="T:System.Text.Json.JsonSerializer" /> mit Verweisen auf Serialisierung und Deserialisierung umgeht.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceHandler&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Serialization.ReferenceHandler" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; used for each serialization call.">Gibt den für jeden Serialisierungsaufruf verwendeten <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> zurück.</summary>
      <returns vsli:raw="The resolver to use for serialization and deserialization.">Der Resolver, der für Serialisierung und Deserialisierung verwendet werden soll.</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.ReferenceHandler.Preserve">
      <summary vsli:raw="Gets an object that indicates whether metadata properties are honored when JSON objects and arrays are deserialized into reference types, and written when reference types are serialized. This is necessary to create round-trippable JSON from objects that contain cycles or duplicate references.">Metadateneigenschaften werden bei der Deserialisierung von JSON-Objekten und -Arrays in Verweistypen berücksichtigt und bei der Serialisierung von Verweistypen geschrieben. Dies ist notwendig, um aus Objekten mit Zyklen oder duplizierten Verweisen Roundtrip-fähigen JSON-Code zu erstellen.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler`1">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.">Diese Klasse definiert, wie der <see cref="T:System.Text.Json.JsonSerializer" /> mit Verweisen auf Serialisierung und Deserialisierung umgeht.</summary>
      <typeparam name="T" vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; to create on each serialization or deserialization call.">Der Typ der <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> , die bei jedem Serialisierungs-oder deserialisierungsaufruftyp erstellt werden soll.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceHandler`1&quot; /&gt; generic class that can create a &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; instance of the specified type.">Initialisiert eine neue Instanz der generischen <see cref="T:System.Text.Json.Serialization.ReferenceHandler`1" />-Klasse, mit der eine <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />Instanz des angegebenen <typeparam name="T" />. erstellt werden kann.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; of type &lt;typeparamref name=&quot;T&quot; /&gt; used for each serialization call.">Erstellt einen neuen <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> des Typs <typeparamref name="T" />, der für jeden Serialisierungsaufruf verwendet wird.</summary>
      <returns vsli:raw="The new resolver to use for serialization and deserialization.">Der neue Resolver, der für Serialisierung und Deserialisierung verwendet werden soll.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceResolver">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.&#xA; Defines the core behavior of preserving references on serialization and deserialization.">Diese Klasse definiert, wie der <see cref="T:System.Text.Json.JsonSerializer" /> mit Verweisen auf Serialisierung und Deserialisierung umgeht.
Definiert das Kernverhalten bei Beibehaltung von Verweisen auf Serialisierung und Deserialisierung.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)">
      <summary vsli:raw="Adds an entry to the bag of references using the specified id and value.&#xA; This method gets called when an $id metadata property from a JSON object is read.">Fügt dem Behälter mit Verweisen einen Eintrag mit der angegebenen ID und dem angegebenen Wert hinzu.
Diese Methode wird aufgerufen, wenn eine $id-Metadateneigenschaft aus einem JSON-Objekt gelesen wird.</summary>
      <param name="referenceId" vsli:raw="The identifier of the JSON object or array.">Der Bezeichner des JSON-Objekts oder -Arrays.</param>
      <param name="value" vsli:raw="The value of the CLR reference type object that results from parsing the JSON object.">Der Wert des CLR-Verweistypobjekts, das sich aus dem Analysieren des JSON-Objekts ergibt.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)">
      <summary vsli:raw="Gets the reference identifier of the specified value if exists; otherwise a new id is assigned.&#xA; This method gets called before a CLR object is written so we can decide whether to write $id and enumerate the rest of its properties or $ref and step into the next object.">Ruft den Verweisbezeichner des angegebenen Werts ab, falls vorhanden. Andernfalls wird eine neue ID zugewiesen.
Diese Methode wird aufgerufen, bevor ein CLR-Objekt geschrieben wird, damit wir entscheiden können, ob wir $id schreiben und den Rest seiner Eigenschaften aufzählen oder $ref und zum nächsten Objekt übergehen.</summary>
      <param name="value" vsli:raw="The value of the CLR reference type object to get an id for.">Der Wert des CLR-Verweistypobjekts, für das eine ID abgerufen werden soll.</param>
      <param name="alreadyExists" vsli:raw="When this method returns, &lt;see langword=&quot;true&quot; /&gt; if a reference to value already exists; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Wenn diese Methode zurückgegeben wird, <see langword="true" />, sofern bereits ein Verweis auf einen Wert vorhanden ist. Andernfalls <see langword="false" />.</param>
      <returns vsli:raw="The reference id for the specified object.">Die Verweis-ID für das angegebene Objekt.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)">
      <summary vsli:raw="Returns the CLR reference type object related to the specified reference id.&#xA; This method gets called when $ref metadata property is read.">Gibt das CLR-Verweistypobjekt zurück, das auf die angegebene Verweis-ID verweist. Diese Methode wird aufgerufen, wenn die Metadateneigenschaft $ref gelesen wird.</summary>
      <param name="referenceId" vsli:raw="The reference id related to the returned object.">Die Verweis-ID, die sich auf das zurückgegebene Objekt bezieht.</param>
      <returns vsli:raw="The reference type object related to the specified reference id.">Das Verweistypobjekt, das sich auf die angegebene Verweis-ID bezieht.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary vsli:raw="Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.">Stellt eine leistungsstarke API für schreibgeschützten Zugriff auf UTF-8-codierten JSON-Text in Vorwärtsrichtung bereit.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der eine schreibgeschützte Sequenz mit UTF-8-codiertem Text verarbeitet und angegeben wird, ob die Eingabe den gesamten zu verarbeitenden Text enthält.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Der zu verarbeitende UTF-8 codierte JSON-Text.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" />, um anzugeben, dass die Eingabesequenz die gesamten zu verarbeitenden Daten enthält. <see langword="false" />, um anzugeben, dass der Eingabebereich nur einen Teil der Daten enthält und weitere Daten später folgen.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Ein Objekt, das den Readerzustand enthält. Wenn dies der erste Aufruf an den Konstruktor ist, übergeben Sie den Standardzustand. Andernfalls übergeben Sie den Wert der <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" />-Eigenschaft aus der vorherigen Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text using the specified options.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der eine schreibgeschützte Sequenz mit UTF-8-codiertem Text verarbeitet wird, indem die angegebenen Optionen verwendet werden.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Der zu verarbeitende UTF-8 codierte JSON-Text.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Definiert das benutzerdefinierte Verhalten des <see cref="T:System.Text.Json.Utf8JsonReader" />-Elements, das sich vom JSON RFC unterscheidet (z. B. die Handhabung von Kommentaren oder die maximal zulässige Tiefe beim Lesen). In der Standardeinstellung folgt <see cref="T:System.Text.Json.Utf8JsonReader" /> streng dem JSON RFC. Kommentare im JSON-Code sind ungültig, und die maximale Tiefe beträgt 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der ein schreibgeschützter Bereich mit UTF-8-codiertem Text verarbeitet und angegeben wird, ob die Eingabe den gesamten zu verarbeitenden Text enthält.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Der zu verarbeitende UTF-8 codierte JSON-Text.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" />, um anzugeben, dass die Eingabesequenz die gesamten zu verarbeitenden Daten enthält. <see langword="false" />, um anzugeben, dass der Eingabebereich nur einen Teil der Daten enthält und weitere Daten später folgen.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Ein Objekt, das den Readerzustand enthält. Wenn dies der erste Aufruf an den Konstruktor ist, übergeben Sie den Standardzustand. Andernfalls übergeben Sie den Wert der <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" />-Eigenschaft aus der vorherigen Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text using the specified options.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der ein schreibgeschützter Bereich mit UTF-8-codiertem Text verarbeitet wird, indem die angegebenen Optionen verwendet werden.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Der zu verarbeitende UTF-8 codierte JSON-Text.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Definiert das benutzerdefinierte Verhalten des <see cref="T:System.Text.Json.Utf8JsonReader" />-Elements, das sich vom JSON RFC unterscheidet (z. B. die Handhabung von Kommentaren oder die maximal zulässige Tiefe beim Lesen). In der Standardeinstellung folgt <see cref="T:System.Text.Json.Utf8JsonReader" /> streng dem JSON RFC. Kommentare im JSON-Code sind ungültig, und die maximale Tiefe beträgt 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary vsli:raw="Reads the next JSON token value from the source as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Liest den nächsten JSON-Tokenwert aus der Quelle als einen <see cref="T:System.Boolean" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a Boolean value (that is, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;).">Der Wert des JSON-Tokens ist kein boolescher Wert (d.h. <see cref="F:System.Text.Json.JsonTokenType.True" /> oder <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> den Wert <see cref="F:System.Text.Json.JsonTokenType.True" /> hat. <see langword="false" />, wenn <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> den Wert <see cref="F:System.Text.Json.JsonTokenType.False" /> hat.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Byte" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).
          
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Byte.MinValue" /> oder größer als <see cref="F:System.Byte.MaxValue" /> ist.</exception>
      <returns vsli:raw="The value of the UTF-8 encoded token.">Der Wert des UTF-8-codierten Tokens.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary vsli:raw="Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.">Analysiert den Wert des aktuellen JSON-Tokens aus der Quelle und decodiert die Base64-codierte JSON-Zeichenfolge als Bytearray.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Der Typ des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text, so it can't be decoded to bytes.&#xA;&#xA;-or-&#xA;&#xA;The value contains invalid or more than two padding characters.&#xA;&#xA;-or-&#xA;&#xA;The value is incomplete. That is, the JSON string length is not a multiple of 4.">Der Wert wird nicht als Base64-Text codiert und kann daher nicht in Bytes decodiert werden.

- oder -

Der Wert enthält ungültige oder mehr als zwei Auffüllzeichen.

- oder -

Der Wert ist unvollständig. Das bedeutet, dass die Länge der JSON-Zeichenfolge kein Vielfaches von 4 ist.</exception>
      <returns vsli:raw="The byte array that represents the current JSON token value.">Das Bytearray, das den Wert des aktuellen JSON-Tokens darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary vsli:raw="Parses the current JSON token value from the source as a comment and transcodes it as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Analysiert den Wert des aktuellen JSON-Tokens aus der Quelle als Kommentar, in einen <see cref="T:System.String" /> transcodiert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a comment.">Das JSON-Token ist kein Kommentar.</exception>
      <returns vsli:raw="The comment that represents the current JSON token value.">Der Kommentar, der den Wert des aktuellen JSON-Tokens darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.DateTime" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&#xA;        &#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">Der Wert des JSON-Tokens darf nicht als <see cref="T:System.DateTime" /> gelesen werden.
        
- oder - 
Der gesamte UTF-8-codierte Tokenwert kann nicht in einen <see cref="T:System.DateTime" />-Wert analysiert werden.

- oder -

Der Wert des JSON-Tokens liegt in einem nicht unterstützten Format vor.</exception>
      <returns vsli:raw="The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.">Datum und Uhrzeit, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.DateTimeOffset" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.&#xA;&#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">Der Wert des JSON-Tokens darf nicht als <see cref="T:System.DateTimeOffset" /> gelesen werden.

- oder - 
Der gesamte UTF-8-codierte Tokenwert kann nicht in einen <see cref="T:System.DateTimeOffset" />-Wert analysiert werden.

- oder -

Der Wert des JSON-Tokens liegt in einem nicht unterstützten Format vor.</exception>
      <returns vsli:raw="The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.">Offset von Datum und Uhrzeit, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Decimal" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Decimal.MinValue" /> oder größer als <see cref="F:System.Decimal.MaxValue" /> ist.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Der in einen <see cref="T:System.Decimal" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Double" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Double.MinValue" /> oder größer als <see cref="F:System.Double.MaxValue" /> ist.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Der in einen <see cref="T:System.Double" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Guid" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is in an unsupported format for a Guid.&#xA;        &#xA;-or-&#xA;&#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">Der Wert des JSON-Tokens liegt in einem für eine GUID nicht unterstützten Format vor.
        
- oder -

Der gesamte UTF-8-codierte Tokenwert kann nicht in einen <see cref="T:System.Guid" />-Wert analysiert werden.</exception>
      <returns vsli:raw="The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.">Der GUID-Wert, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int16" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).
          
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Int16.MinValue" /> oder größer als <see cref="F:System.Int16.MaxValue" /> ist.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Der in einen <see cref="T:System.Int16" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Int32" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.
            
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Int32.MinValue" /> oder größer als <see cref="F:System.Int32.MaxValue" /> ist.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Der in einen <see cref="T:System.Int32" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Int64" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.
            
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Int64.MinValue" /> oder größer als <see cref="F:System.Int64.MaxValue" /> ist.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Der in einen <see cref="T:System.Int64" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary vsli:raw="Parses the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.SByte" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).
          
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.SByte.MinValue" /> oder größer als <see cref="F:System.SByte.MaxValue" /> ist.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Der in einen <see cref="T:System.SByte" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Single" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Single.MinValue" /> oder größer als <see cref="F:System.Single.MaxValue" /> ist.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Der in einen <see cref="T:System.Single" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary vsli:raw="Reads the next JSON token value from the source unescaped and transcodes it as a string.">Liest den nächsten JSON-Tokenwert aus der Quelle (ohne Escapezeichen und als Zeichenfolge transcodiert).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a string (that is, not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;, or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.">Der Wert des JSON-Tokens ist keine Zeichenfolge (d. h. keine <see cref="F:System.Text.Json.JsonTokenType.String" />-, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />- oder <see cref="F:System.Text.Json.JsonTokenType.Null" />-Enumeration).

- oder -

Die JSON-Zeichenfolge enthält ungültige UTF-8-Bytes oder ungültige UTF-16-Ersatzzeichen.</exception>
      <returns vsli:raw="The token value parsed to a string, or &lt;see langword=&quot;null&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;.">Der in eine Zeichenfolge analysierte Tokenwert oder <see langword="null" />, wenn <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> auf <see cref="F:System.Text.Json.JsonTokenType.Null" /> festgelegt ist.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt16" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).
          
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.UInt16.MinValue" /> oder größer als <see cref="F:System.UInt16.MaxValue" /> ist.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Der in einen <see cref="T:System.UInt16" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.UInt32" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.

- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.UInt32.MinValue" /> oder größer als <see cref="F:System.UInt32.MaxValue" /> ist.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Der in einen <see cref="T:System.UInt32" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.UInt64" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.
            
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.UInt64.MinValue" /> oder größer als <see cref="F:System.UInt64.MaxValue" /> ist.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Der in einen <see cref="T:System.UInt64" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary vsli:raw="Reads the next JSON token from the input source.">Liest das nächste JSON-Token aus der Eingabequelle.</summary>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token according to the JSON RFC is encountered.&#xA;        &#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Ein gemäß JSON RFC ungültiges JSON-Token wurde festgestellt.
        
- oder -

Die aktuelle Tiefe übersteigt den rekursiven Grenzwert, der durch die maximale Tiefe festgelegt ist.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the token was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="false" />, wenn das Token erfolgreich gelesen wurde, andernfalls <see langword="true" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary vsli:raw="Skips the children of the current JSON token.">Überspringt die untergeordneten Elemente des aktuellen JSON-Tokens.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader was given partial data with more data to follow (that is, &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.IsFinalBlock&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).">Dem Reader wurden Teildaten übergeben, und weitere Daten folgen (d.h., <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> ist <see langword="false" />).</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;&#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Beim Überspringen wurde ein gemäß JSON-RFC ungültiges JSON-Token gefunden.

- oder -

Die aktuelle Tiefe übersteigt den rekursiven Grenzwert, der durch die maximale Tiefe festgelegt ist.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Byte" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Byte" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle zu analysieren. Die Base64-codierte JSON-Zeichenfolge wird als Bytearray decodiert, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decoded binary representation of the Base64 text.">Wenn diese Methode zurückgegeben wird, ist die decodierte binäre Darstellung des Base64-Texts enthalten.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Das JSON-Token ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte Tokenwert als gültiger Base64-Text codiert ist und erfolgreich in Bytes decodiert werden kann; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.DateTime" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.DateTime" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.DateTimeOffset" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.DateTimeOffset" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Decimal" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Decimal" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Double&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Double" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Double" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Guid&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Guid" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Guid" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int16" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Int16" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int32" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Int32" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int64" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Int64" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.SByte" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.SByte" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Single&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Single" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Single&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Single" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt16" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.UInt16" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt32" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.UInt32" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt64" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.UInt64" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary vsli:raw="Tries to skip the children of the current JSON token.">Versucht, die untergeordneten Elemente des aktuellen JSON-Tokens zu überspringen.</summary>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;          &#xA;-or -&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Beim Überspringen wurde ein gemäß JSON-RFC ungültiges JSON-Token gefunden.
          
- oder - 

Die aktuelle Tiefe übersteigt den rekursiven Grenzwert, der durch die maximale Tiefe festgelegt ist.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there was enough data for the children to be skipped successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> wenn genügend Daten vorhanden waren, um die untergeordneten Elemente erfolgreich zu überspringen; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Vergleicht den UTF-8-codierten Text in einem schreibgeschützten Bytebereich mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt einen Wert zurück, der angibt, ob eine Übereinstimmung besteht.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Der UTF-8-codierte Text für den Vergleich.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Das JSON-Token ist keine JSON-Zeichenfolge (also nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der JSON-Tokenwert in der Quelle mit dem UTF-8-codierten Suchtext übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Vergleicht den Text in einem Zeichenbereich mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt einen Wert zurück, der angibt, ob eine Übereinstimmung besteht.</summary>
      <param name="text" vsli:raw="The text to compare against.">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Das JSON-Token ist keine JSON-Zeichenfolge (also nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der JSON-Tokenwert in der Quelle mit dem Suchtext übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary vsli:raw="Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Vergleicht den angegebenen Zeichenfolgentext mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt einen Wert zurück, der angibt, ob eine Übereinstimmung besteht.</summary>
      <param name="text" vsli:raw="The text to compare against.">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Das JSON-Token ist keine JSON-Zeichenfolge (also nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der JSON-Tokenwert in der Quelle mit dem Suchtext übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary vsli:raw="Gets the total number of bytes consumed so far by this instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Ruft die gesamte Anzahl von Bytes ab, die von dieser Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" /> bisher verbraucht wurden.</summary>
      <returns vsli:raw="The total number of bytes consumed so far.">Die bisher verbrauchte Gesamtanzahl von Bytes.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Ruft die Tiefe des aktuellen Tokens ab.</summary>
      <returns vsli:raw="The depth of the current token.">Die Tiefe des aktuellen Tokens.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; state to pass to a &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; constructor with more data.">Ruft den aktuellen <see cref="T:System.Text.Json.Utf8JsonReader" />-Zustand ab, um ihn an einen <see cref="T:System.Text.Json.Utf8JsonReader" />-Konstruktor mit weiteren Daten zu übergeben.</summary>
      <returns vsli:raw="The current reader state.">Der aktuelle Reader-Zustand.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary vsli:raw="Gets a value that indicates which &lt;c&gt;Value&lt;/c&gt; property to use to get the token value.">Ruft einen Wert an, der angibt, welche <c>Value</c>-Eigenschaft zum Abrufen des Tokenwerts zu verwenden ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSequence&quot; /&gt; should be used to get the token value; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSpan&quot; /&gt; should be used instead.">
        <see langword="true" /> , wenn <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> verwendet werden soll, um den Tokenwert zu erhalten;, <see langword="false" /> Wenn <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> stattdessen verwendet werden soll.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary vsli:raw="Gets a value that indicates whether all the JSON data was provided or there is more data to come.">Ruft den Modus dieser Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" /> ab, der angibt, ob die gesamten JSON-Daten übergeben wurden oder weitere folgen.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader was constructed with the input span or sequence containing the entire JSON data to process; &lt;see langword=&quot;false&quot; /&gt; if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.">
        <see langword="true" /> , wenn der Reader mit der Eingabe Spanne oder Sequenz erstellt wurde, die die gesamten JSON-Daten enthält, die verarbeitet werden sollen. <see langword="false" /> , wenn der Reader mit einer Eingabe Spanne oder Sequenz erstellt wurde, die möglicherweise partielle JSON-Daten mit weiteren Daten enthält, die befolgt werden sollen.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">Ruft die aktuelle <see cref="T:System.SequencePosition" /> innerhalb des bereitgestellten UTF-8-codierten ReadOnlySequence&lt;Byte&gt; der Eingabe oder einen <see cref="T:System.SequencePosition" />-Standardwert ab, wenn die <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur mit einem ReadOnlySpan&lt;Byte&gt; erstellt wurde.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">Der aktuelle <see cref="T:System.SequencePosition" /> innerhalb des bereitgestellten UTF-8-codierten Eingabe-sequenzbyte &lt; &gt; oder ein Standardwert, <see cref="T:System.SequencePosition" /> Wenn die <see cref="T:System.Text.Json.Utf8JsonReader" /> Struktur mit einem Read-lyspan-Byte erstellt wurde &lt; &gt; .</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary vsli:raw="Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.">Ruft den Index ab, an dem das zuletzt verarbeitete JSON-Token beginnt (innerhalb des angegebenen UTF-8-codierten Eingabetexts), wobei Leerraum übersprungen wird.</summary>
      <returns vsli:raw="The starting index of the last processed JSON token within the given UTF-8 encoded input text.">Der Start Index des letzten verarbeiteten JSON-Tokens innerhalb des angegebenen UTF-8-codierten Eingabe Texts.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary vsli:raw="Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.">Ruft den Typ des zuletzt verarbeiteten JSON-Tokens im UTF-8-codierten JSON-Text ab.</summary>
      <returns vsli:raw="The type of the last processed JSON token.">Der Typ des zuletzt verarbeiteten JSON-Tokens.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySequence&amp;lt;byte&amp;gt; slice of the input payload, only if the token is contained within multiple segments.">Ruft den Rohwert des zuletzt verarbeiteten Tokens als ReadOnlySequence&lt;byte&gt;-Slice der Eingangsnutzlast nur ab, wenn das Token in mehreren Segmenten enthalten ist.</summary>
      <returns vsli:raw="A byte read-only sequence.">Eine schreibgeschützte Byte-Sequenz.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySpan&amp;lt;byte&amp;gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&amp;lt;byte&amp;gt;.">Ruft den Rohwert des zuletzt verarbeiteten Tokens als ReadOnlySpan&lt;byte&gt;-Slice der Eingangsnutzlast ab, wenn das Token in ein einzelnes Segment passt oder wenn der Leser mit einer JSON-Nutzlast konstruiert wurde, die in einem ReadOnlySpan&lt;byte&gt; enthalten ist.</summary>
      <returns vsli:raw="A read-only span of bytes.">Ein schreibgeschützter Bytes-Span.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary vsli:raw="Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.">Bietet eine leistungsstarke API für das Schreiben von UTF-8-codiertem JSON-Text in Vorwärtsrichtung ohne Zwischenspeicherung.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; to write the output to and customization options.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonWriter" />-Klasse unter Verwendung der angegebenen <see cref="T:System.Buffers.IBufferWriter`1" />, um die Ausgabe zu schreiben, und von Anpassungsoptionen.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">Das Ziel für das Schreiben von JSON-Text.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Definiert das angepasste Verhalten des <see cref="T:System.Text.Json.Utf8JsonWriter" />. Standardmäßig wird minimierter JSON-Text (ohne zusätzliche Leerzeichen) geschrieben und überprüft, ob der geschriebene JSON-Text gemäß JSON RFC strukturell gültig ist.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified stream to write the output to and customization options.">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonWriter" />-Klasse unter Verwendung des angegebenen Datenstroms, um die Ausgabe zu schreiben, und von Anpassungsoptionen.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">Das Ziel für das Schreiben von JSON-Text.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Definiert das angepasste Verhalten des <see cref="T:System.Text.Json.Utf8JsonWriter" />. Standardmäßig wird minimierter JSON-Text (ohne zusätzliche Leerzeichen) geschrieben und überprüft, ob der geschriebene JSON-Text gemäß JSON RFC strukturell gültig ist.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary vsli:raw="Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Committet übrig gebliebenen JSON-Text, der noch nicht geleert wurde, und gibt alle Ressourcen frei, die von der aktuellen Instanz verwendet werden.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary vsli:raw="Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Committet asynchron übrig gebliebenen JSON-Text, der noch nicht geleert wurde, und gibt alle Ressourcen frei, die von der aktuellen Instanz verwendet werden.</summary>
      <returns vsli:raw="A task representing the asynchronous dispose operation.">Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary vsli:raw="Commits the JSON text written so far, which makes it visible to the output destination.">Committet den bisher geschriebenen JSON-Text, sodass er für das Ausgabeziel sichtbar ist.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Die Instanz wurde verworfen.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously commits the JSON text written so far, which makes it visible to the output destination.">Committet asynchron den bisher geschriebenen JSON-Text, sodass er für das Ausgabeziel sichtbar ist.</summary>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests. The default value is &lt;see cref=&quot;P:System.Threading.CancellationToken.None&quot; /&gt;.">Das Token zum Überwachen von Abbruchanforderungen. Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Die Instanz wurde verworfen.</exception>
      <returns vsli:raw="A task representing the asynchronous flush operation.">Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused.">Setzt den internen Zustand dieser Instanz zurück, sodass sie wiederverwendet werden kann.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Die Instanz wurde verworfen.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">Setzt den internen Zustand dieser Instanz zurück, sodass sie mit einer neuen Instanz von <see cref="T:System.Buffers.IBufferWriter`1" /> wiederverwendet werden kann.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">Das Ziel für das Schreiben von JSON-Text.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Die Instanz wurde verworfen.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">Setzt den internen Zustand dieser Instanz zurück, sodass sie mit einer neuen Instanz von <see cref="T:System.IO.Stream" /> wiederverwendet werden kann.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">Das Ziel für das Schreiben von JSON-Text.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Die Instanz wurde verworfen.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Schreibt den Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded name of the property to write.">Der UTF-8-codierte Name der zu schreibenden Eigenschaft.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Schreibt den Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Schreibt den Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON-encoded name of the property to write.">Der JSON-codierte Name der zu schreibenden Eigenschaft.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.">Schreibt den unformatierten Bytewert als Base64-codierte JSON-Zeichenfolge als Element eines JSON-Arrays.</summary>
      <param name="bytes" vsli:raw="The binary data to be written as a Base64 encoded JSON string element of a JSON array.">Die Binärdaten, die als Base64-codiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden sollen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal true oder false) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Der Wert, der als JSON-Literale " true " oder " false " als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal true oder false) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Der Wert, der als JSON-Literale " true " oder " false " als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal true oder false) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Der Wert, der als JSON-Literale " true " oder " false " als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Boolean" />-Wert (als JSON-Literal true oder false) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Der Wert, der als JSON-Literale " true " oder " false " als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as an element of a JSON array.">Schreibt einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal true oder false) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as an element of a JSON array.">Der Wert, der als JSON-Literale " true " oder " false " als Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value as a JSON comment.">Schreibt einen UTF-8-Textwert als JSON-Kommentar.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Der UTF-8-codierte Wert, der als JSON-Kommentar innerhalb von geschrieben werden soll <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">Der angegebene Wert ist zu groß.
        
- oder -

<paramref name="utf8Value" /> enthält ein Kommentar Trennzeichen (d <c>*/</c> . h.).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value as a JSON comment.">Schreibt einen UTF-16-Textwert als JSON-Kommentar.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Der UTF-16-codierte Wert, der als UTF-8-transcodierter JSON-Kommentar innerhalb von geschrieben werden soll <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">Der angegebene Wert ist zu groß.
        
- oder -

<paramref name="value" /> enthält ein Kommentar Trennzeichen (d <c>*/</c> . h.).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary vsli:raw="Writes a string text value as a JSON comment.">Schreibt einen Zeichenfolgentextwert als JSON-Kommentar.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Der UTF-16-codierte Wert, der als UTF-8-transcodierter JSON-Kommentar innerhalb von geschrieben werden soll <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">Der angegebene Wert ist zu groß.
        
- oder -

<paramref name="value" /> enthält ein Kommentar Trennzeichen (d <c>*/</c> . h.).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="value" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary vsli:raw="Writes the end of a JSON array.">Schreibt das Ende eines JSON-Arrays.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary vsli:raw="Writes the end of a JSON object.">Schreibt das Ende eines JSON-Objekts.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und das JSON-Literal NULL als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und das JSON-Literal NULL als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary vsli:raw="Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und das JSON-Literal NULL als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.">Schreibt den Eigenschaftennamen und das JSON-Literal null als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary vsli:raw="Writes the JSON literal null as an element of a JSON array.">Schreibt den JSON-literalen null als Element eines JSON-Arrays.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Schreibt einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Schreibt einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Schreibt einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Schreibt einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Schreibt einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Schreibt einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Schreibt einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Schreibt den UTF-8-Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Schreibt den Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Schreibt den Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary vsli:raw="Writes the beginning of a JSON array.">Schreibt den Anfang eines JSON-Arrays.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and this write operation would produce invalid JSON.">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000.

- oder -

Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.">Schreibt den Anfang eines JSON-Arrays mit einem als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON array to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Arrays.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000.

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.">Schreibt den Anfang eines JSON-Arrays mit einem als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Arrays, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000.

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a string as the key.">Schreibt den Anfang eines JSON-Arrays mit einem als Zeichenfolge angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Arrays, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000.

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON array with a pre-encoded property name as the key.">Schreibt den Anfang eines JSON-Arrays mit einem vorcodierten Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Arrays, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;    &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">Die Tiefe des JSON-Codes hat die maximale Tiefe 1.000 überschritten.
    
- oder -

Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary vsli:raw="Writes the beginning of a JSON object.">Schreibt den Anfang eines JSON-Objekts.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and the operation would result in writing invalid JSON.">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000.

- oder -

Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.">Schreibt den Anfang eines JSON-Objekts mit einem als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000. 

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only character span as the key.">Schreibt den Anfang eines JSON-Objekts mit einem als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000. 

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a string as the key.">Schreibt den Anfang eines JSON-Objekts mit einem als Zeichenfolge angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000. 

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON object with a pre-encoded property name as the key.">Schreibt den Anfang eines JSON-Objekts mit einem vorcodierten Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;          &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">Die Tiefe des JSON-Codes hat die maximale Tiefe 1.000 überschritten.
          
- oder -

Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen UTF-8-Eigenschaftennamen und einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen UTF-8-Eigenschaftennamen und einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen UTF-8-Eigenschaftennamen und einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen UTF-8-Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen UTF-8-Eigenschaftennamen und UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary vsli:raw="Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen UTF-8-Eigenschaftennamen und Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt den UTF-8-Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen UTF-16-Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen UTF-16-Eigenschaftennamen und UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary vsli:raw="Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen UTF-16-Eigenschaftennamen und Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt den Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary vsli:raw="Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt den Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary vsli:raw="Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und Zeichenfolgen-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Schreibt den vorcodierten Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Schreibt einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Schreibt einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Schreibt einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.">Schreibt einen UTF-8-Textwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string element of a JSON array.">Der UTF-8-codierte Wert, der als JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.">Schreibt einen UTF-16-Textwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Der UTF-16-codierte Wert, der als UTF-8-transcodiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary vsli:raw="Writes a string text value (as a JSON string) as an element of a JSON array.">Schreibt einen Zeichenfolgentextwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Der UTF-16-codierte Wert, der als UTF-8-transcodiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.">Schreibt den vorcodierten Textwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Der JSON-codierte Wert, der als UTF-8-transcodiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary vsli:raw="Gets the total number of bytes committed to the output by the current instance so far.">Ruft die Gesamtzahl der Bytes ab, die bisher durch die aktuelle Instanz an die Ausgabe committet wurden.</summary>
      <returns vsli:raw="The total number of bytes committed to the output by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far.">Die Gesamtanzahl der Bytes, die von bis zu an die Ausgabe committet wurden <see cref="T:System.Text.Json.Utf8JsonWriter" /> .</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary vsli:raw="Gets the number of bytes written by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far that have not yet been flushed to the output and committed.">Ruft die Anzahl der bisher vom <see cref="T:System.Text.Json.Utf8JsonWriter" /> geschriebenen Bytes ab, die noch nicht in die Ausgabe geleert und committet wurden.</summary>
      <returns vsli:raw="The number of bytes written so far by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; that have not yet been flushed to the output and committed.">Die Anzahl von Bytes, die bisher von der geschrieben wurden <see cref="T:System.Text.Json.Utf8JsonWriter" /> , die noch nicht in die Ausgabe geleert wurden und für die ein Commit ausgeführt wurde.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Ruft die Tiefe des aktuellen Tokens ab.</summary>
      <returns vsli:raw="The depth of the current token.">Die Tiefe des aktuellen Tokens.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary vsli:raw="Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.">Ruft das benutzerdefinierte Verhalten ab, wenn JSON-Daten mithilfe dieser Instanz geschrieben werden, die angibt, ob die Ausgabe beim Schreiben formatiert, die strukturelle JSON-Überprüfung übersprungen werden soll und welche Zeichen mit Escapezeichen versehen werden sollen.</summary>
      <returns vsli:raw="The custom behavior of this instance of the writer for formatting, validating, and escaping.">Das benutzerdefinierte Verhalten dieser Instanz des Writers zum Formatieren, validieren und Escapezeichen.</returns>
    </member>
  </members>
</doc>
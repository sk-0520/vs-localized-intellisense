<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.CompilerServices.Unsafe</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.Unsafe">
      <summary>Contiene funzionalità generiche di basso livello per la modifica dei puntatori.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)">
      <summary>Aggiunge un offset di elemento al riferimento specificato.</summary>
      <param name="source">Riferimento a cui aggiungere l'offset.</param>
      <param name="elementOffset">Offset da aggiungere.</param>
      <typeparam name="T">Tipo di riferimento.</typeparam>
      <returns>Nuovo riferimento che riflette l'aggiunta dell'offset al puntatore.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)">
      <summary>Aggiunge un offset di elemento al riferimento specificato.</summary>
      <param name="source">Riferimento a cui aggiungere l'offset.</param>
      <param name="elementOffset">Offset da aggiungere.</param>
      <typeparam name="T">Tipo di riferimento.</typeparam>
      <returns>Nuovo riferimento che riflette l'aggiunta dell'offset al puntatore.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)">
      <summary>Aggiunge un offset di elemento al puntatore void specificato.</summary>
      <param name="source">Puntatore void a cui aggiungere l'offset.</param>
      <param name="elementOffset">Offset da aggiungere.</param>
      <typeparam name="T">Tipo di puntatore void.</typeparam>
      <returns>Nuovo puntatore void che riflette l'aggiunta dell'offset al puntatore specificato.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)">
      <summary>Aggiunge un offset di byte al riferimento specificato.</summary>
      <param name="source">Riferimento a cui aggiungere l'offset.</param>
      <param name="byteOffset">Offset da aggiungere.</param>
      <typeparam name="T">Tipo di riferimento.</typeparam>
      <returns>Nuovo riferimento che riflette l'aggiunta dell'offset di byte al puntatore.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)">
      <summary>Determina se i riferimenti specificati puntano alla stessa posizione.</summary>
      <param name="left">Primo riferimento da confrontare.</param>
      <param name="right">Secondo riferimento da confrontare.</param>
      <typeparam name="T">Tipo di riferimento.</typeparam>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> puntano alla stessa posizione; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)">
      <summary>Eseguire il cast dell'oggetto specificato al tipo specificato.</summary>
      <param name="o">Oggetto di cui eseguire il cast.</param>
      <typeparam name="T">Tipo di cui verrà eseguito il cast dell'oggetto.</typeparam>
      <returns>Oggetto originale, di cui viene eseguito il cast al tipo specificato.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)">
      <summary>Reinterpreta il riferimento specificato come riferimento a un valore di tipo <typeparamref name="TTo" />.</summary>
      <param name="source">Riferimento da reinterpretare.</param>
      <typeparam name="TFrom">Tipo di riferimento da reinterpretare.</typeparam>
      <typeparam name="TTo">Tipo desiderato del riferimento.</typeparam>
      <returns>Riferimento a un valore di tipo <typeparamref name="TTo" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)">
      <summary>Restituisce un puntatore al parametro per riferimento specificato.</summary>
      <param name="value">Oggetto di cui viene ottenuto il puntatore.</param>
      <typeparam name="T">Tipo di oggetto.</typeparam>
      <returns>Puntatore al valore specificato.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)">
      <summary>Reinterpreta il riferimento di sola lettura specificato come riferimento.</summary>
      <param name="source">Riferimento di sola lettura da reinterpretare.</param>
      <typeparam name="T">Tipo di riferimento.</typeparam>
      <returns>Riferimento a un valore di tipo <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)">
      <summary>Reinterpreta la posizione specificata come riferimento a un valore di tipo <typeparamref name="T" />.</summary>
      <param name="source">Posizione del valore a cui fare riferimento.</param>
      <typeparam name="T">Tipo della posizione interpretata.</typeparam>
      <returns>Riferimento a un valore di tipo <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)">
      <summary>Determina l'offset di byte dall'origine alla destinazione dai riferimenti specificati.</summary>
      <param name="origin">Riferimento all'origine.</param>
      <param name="target">Riferimento alla destinazione.</param>
      <typeparam name="T">Tipo di riferimento.</typeparam>
      <returns>Offset di byte dall'origine di destinazione, ovvero <paramref name="target" /> - <paramref name="origin" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)">
      <summary>Copia un valore di tipo <typeparamref name="T" /> nella posizione specificata.</summary>
      <param name="destination">Posizione di destinazione della copia.</param>
      <param name="source">Puntatore al valore da copiare.</param>
      <typeparam name="T">Tipo di valore da copiare.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)">
      <summary>Copia un valore di tipo <typeparamref name="T" /> nella posizione specificata.</summary>
      <param name="destination">Posizione di destinazione della copia.</param>
      <param name="source">Riferimento al valore da copiare.</param>
      <typeparam name="T">Tipo di valore da copiare.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Copia i byte dall'indirizzo di origine all'indirizzo di destinazione.</summary>
      <param name="destination">Indirizzo di destinazione in cui eseguire la copia.</param>
      <param name="source">Indirizzo di origine da cui eseguire la copia.</param>
      <param name="byteCount">Il numero di byte da copiare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)">
      <summary>Copia i byte dall'indirizzo di origine all'indirizzo di destinazione.</summary>
      <param name="destination">Indirizzo di destinazione in cui eseguire la copia.</param>
      <param name="source">Indirizzo di origine da cui eseguire la copia.</param>
      <param name="byteCount">Il numero di byte da copiare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Copia i byte dall'indirizzo di origine all'indirizzo di destinazione senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</summary>
      <param name="destination">Indirizzo di destinazione in cui eseguire la copia.</param>
      <param name="source">Indirizzo di origine da cui eseguire la copia.</param>
      <param name="byteCount">Il numero di byte da copiare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)">
      <summary>Copia i byte dall'indirizzo di origine all'indirizzo di destinazione senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</summary>
      <param name="destination">Indirizzo di destinazione in cui eseguire la copia.</param>
      <param name="source">Indirizzo di origine da cui eseguire la copia.</param>
      <param name="byteCount">Il numero di byte da copiare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)">
      <summary>Inizializza un blocco di memoria in corrispondenza della posizione specificata con un valore iniziale specificato.</summary>
      <param name="startAddress">Indirizzo dell'inizio del blocco di memoria da inizializzare.</param>
      <param name="value">Valore di inizializzazione del blocco.</param>
      <param name="byteCount">Numero di byte da inizializzare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)">
      <summary>Inizializza un blocco di memoria in corrispondenza della posizione specificata con un valore iniziale specificato.</summary>
      <param name="startAddress">Indirizzo dell'inizio del blocco di memoria da inizializzare.</param>
      <param name="value">Valore di inizializzazione del blocco.</param>
      <param name="byteCount">Numero di byte da inizializzare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)">
      <summary>Inizializza un blocco di memoria in corrispondenza della posizione specificata con un valore iniziale specificato senza presupporre l'allineamento dipendente dall'architettura dell'indirizzo.</summary>
      <param name="startAddress">Indirizzo dell'inizio del blocco di memoria da inizializzare.</param>
      <param name="value">Valore di inizializzazione del blocco.</param>
      <param name="byteCount">Numero di byte da inizializzare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)">
      <summary>Inizializza un blocco di memoria in corrispondenza della posizione specificata con un valore iniziale specificato senza presupporre l'allineamento dipendente dall'architettura dell'indirizzo.</summary>
      <param name="startAddress">Indirizzo dell'inizio del blocco di memoria da inizializzare.</param>
      <param name="value">Valore di inizializzazione del blocco.</param>
      <param name="byteCount">Numero di byte da inizializzare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)">
      <summary>Restituisce un valore che indica se un riferimento specificato è maggiore di un altro riferimento specificato.</summary>
      <param name="left">Primo valore da confrontare.</param>
      <param name="right">Secondo valore da confrontare.</param>
      <typeparam name="T">Tipo del riferimento.</typeparam>
      <returns>
        <see langword="true" /> se <paramref name="left" /> è maggiore di <paramref name="right" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)">
      <summary>Restituisce un valore che indica se un riferimento specificato è minore di un altro riferimento specificato.</summary>
      <param name="left">Primo valore da confrontare.</param>
      <param name="right">Secondo valore da confrontare.</param>
      <typeparam name="T">Tipo del riferimento.</typeparam>
      <returns>
        <see langword="true" /> se <paramref name="left" /> è minore di <paramref name="right" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsNullRef``1(``0@)">
      <param name="source" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.NullRef``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)">
      <summary>Legge un valore di tipo <typeparamref name="T" /> dalla posizione specificata.</summary>
      <param name="source">Posizione da cui leggere.</param>
      <typeparam name="T">Tipo da leggere.</typeparam>
      <returns>Oggetto di tipo <typeparamref name="T" /> letto dalla posizione specificata.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)">
      <summary>Legge un valore di tipo <typeparamref name="T" /> dalla posizione specificata senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</summary>
      <param name="source">Posizione da cui leggere.</param>
      <typeparam name="T">Tipo da leggere.</typeparam>
      <returns>Oggetto di tipo <typeparamref name="T" /> letto dalla posizione specificata.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)">
      <summary>Legge un valore di tipo <typeparamref name="T" /> dalla posizione specificata senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</summary>
      <param name="source">Posizione da cui leggere.</param>
      <typeparam name="T">Tipo da leggere.</typeparam>
      <returns>Oggetto di tipo <typeparamref name="T" /> letto dalla posizione specificata.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1">
      <summary>Restituisce le dimensioni di un oggetto del parametro di tipo specificato.</summary>
      <typeparam name="T">Tipo di oggetto di cui viene recuperata la dimensione.</typeparam>
      <returns>Dimensioni di un oggetto di tipo <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SkipInit``1(``0@)">
      <summary>Ignora le regole di assegnazione definite per un determinato valore.</summary>
      <param name="value">Oggetto non inizializzato.</param>
      <typeparam name="T">Tipo dell'oggetto non inizializzato.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)">
      <summary>Sottrae un offset di elemento dal riferimento specificato.</summary>
      <param name="source">Riferimento da cui sottrarre l'offset.</param>
      <param name="elementOffset">Offset da sottrarre.</param>
      <typeparam name="T">Tipo di riferimento.</typeparam>
      <returns>Nuovo riferimento che riflette la sottrazione dell'offset dal puntatore.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)">
      <summary>Sottrae un offset di elemento dal riferimento specificato.</summary>
      <param name="source">Riferimento da cui sottrarre l'offset.</param>
      <param name="elementOffset">Offset da sottrarre.</param>
      <typeparam name="T">Tipo di riferimento.</typeparam>
      <returns>Nuovo riferimento che riflette la sottrazione dell'offset dal puntatore.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)">
      <summary>Sottrae un offset di elemento dal puntatore void specificato.</summary>
      <param name="source">Puntatore void da cui sottrarre l'offset.</param>
      <param name="elementOffset">Offset da sottrarre.</param>
      <typeparam name="T">Tipo del puntatore void.</typeparam>
      <returns>Nuovo puntatore void che riflette la sottrazione dell'offset dal puntatore specificato.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)">
      <summary>Sottrae un offset di byte dal riferimento specificato.</summary>
      <param name="source">Riferimento da cui sottrarre l'offset.</param>
      <param name="byteOffset">Offset da sottrarre.</param>
      <typeparam name="T">Tipo di riferimento.</typeparam>
      <returns>Nuovo riferimento che riflette la sottrazione dell'offset di byte dal puntatore.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)">
      <summary>Restituisce un <see langword="mutable ref" /> a un valore boxed.</summary>
      <param name="box">Valore di cui eseguire la conversione unboxing.</param>
      <typeparam name="T">Tipo di cui eseguire l'unboxing.</typeparam>
      <exception cref="T:System.NullReferenceException">
        <paramref name="box" /> è <see langword="null" /> e <typeparamref name="T" /> è un tipo di valore non nullable.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="box" /> non è un tipo valore boxed.
         
-oppure-

<paramref name="box" /> non è un oggettto <typeparamref name="T" /> boxed.</exception>
      <exception cref="T:System.TypeLoadException">Non è possibile trovare l'oggetto <typeparamref name="T" />.</exception>
      <returns>
        <see langword="mutable ref" /> al valore boxed <paramref name="box" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)">
      <summary>Scrive un valore di tipo <typeparamref name="T" /> nella posizione specificata.</summary>
      <param name="destination">Posizione in cui scrivere.</param>
      <param name="value">Valore da scrivere.</param>
      <typeparam name="T">Tipo di valore da scrivere.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)">
      <summary>Scrive un valore di tipo <typeparamref name="T" /> nella posizione specificata senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</summary>
      <param name="destination">Posizione in cui scrivere.</param>
      <param name="value">Valore da scrivere.</param>
      <typeparam name="T">Tipo di valore da scrivere.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)">
      <summary>Scrive un valore di tipo <typeparamref name="T" /> nella posizione specificata senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</summary>
      <param name="destination">Posizione in cui scrivere.</param>
      <param name="value">Valore da scrivere.</param>
      <typeparam name="T">Tipo di valore da scrivere.</typeparam>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Formats.Asn1</name>
  </assembly>
  <members>
    <member name="T:System.Formats.Asn1.Asn1Tag">
      <summary>Questo tipo rappresenta un tag ASN.1, come descritto nella raccomandazione ITU-T X.680.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.Boolean">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore Boolean.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.ConstructedBitString">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore BitString in una codifica costruita.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.ConstructedOctetString">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore OctetString in una codifica costruita.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.Enumerated">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore Enumerated.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.GeneralizedTime">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore GeneralizedTime.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.Integer">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore Integer.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.Null">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore <see langword="null" />.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.ObjectIdentifier">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore OID (Object Identifier).</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.PrimitiveBitString">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore BitString in una codifica primitiva.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.PrimitiveOctetString">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore OctetString in una codifica primitiva.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.Sequence">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore Sequence (sempre una codifica costruita).</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.SetOf">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore SetOf (sempre una codifica costruita).</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.UtcTime">
      <summary>Rappresenta il tag della classe UNIVERSAL per un valore UtcTime.</summary>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.#ctor(System.Formats.Asn1.TagClass,System.Int32,System.Boolean)">
      <summary>Crea un oggetto <see cref="T:System.Formats.Asn1.Asn1Tag" /> per un valore specificato all'interno di una classe del tag specificata.</summary>
      <param name="tagClass">Classe del tag per questo tag.</param>
      <param name="tagValue">Valore numerico per questo tag.</param>
      <param name="isConstructed">
        <see langword="true" /> per un tag costruito, <see langword="false" /> per un tag primitivo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tagClass" /> non è un valore noto.
oppure <paramref name="tagValue" /> è negativo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.#ctor(System.Formats.Asn1.UniversalTagNumber,System.Boolean)">
      <summary>Crea un oggetto <see cref="T:System.Formats.Asn1.Asn1Tag" /> per un tag dalla classe UNIVERSAL.</summary>
      <param name="universalTagNumber">Uno dei valori di enumerazione che specifica il tipo semantico per questo tag.</param>
      <param name="isConstructed">
        <see langword="true" /> per un tag costruito, <see langword="false" /> per un tag primitivo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="universalTagNumber" /> non è un valore noto.</exception>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.AsConstructed">
      <summary>Produce un tag con gli stessi valori di <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> e <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" />, ma il cui valore di <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" /> è <see langword="true" />.</summary>
      <returns>Tag con gli stessi valori di <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> e <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" />, ma il cui valore di <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" /> è <see langword="true" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.AsPrimitive">
      <summary>Produce un tag con gli stessi valori di <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> e <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" />, ma il cui valore di <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" /> è <see langword="false" />.</summary>
      <returns>Tag con gli stessi valori di <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> e <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" />, ma il cui valore di <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" /> è <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.CalculateEncodedSize">
      <summary>Restituisce il numero di byte necessari per la codifica BER di questo tag.</summary>
      <returns>Numero di byte necessari per la codifica BER di questo tag.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.Decode(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Legge un tag con codifica BER che inizia in corrispondenza di <paramref name="source" />.</summary>
      <param name="source">Sequenza di byte di sola lettura il cui inizio è un tag con codifica BER.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero di byte che hanno contribuito al tag codificato. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">I dati specificati non vengono decodificati in un tag.</exception>
      <returns>Tag decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.Encode(System.Span{System.Byte})">
      <summary>Scrive il form con codifica BER di questo tag in <paramref name="destination" />.</summary>
      <param name="destination">Inizio della posizione in cui deve essere scritto il tag codificato.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" />.<see cref="P:System.Span`1.Length" /> &lt; <see cref="M:System.Formats.Asn1.Asn1Tag.CalculateEncodedSize" />.</exception>
      <returns>Numero di byte scritti in <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.Equals(System.Formats.Asn1.Asn1Tag)">
      <summary>Verifica se <paramref name="other" /> ha la stessa codifica di questo tag.</summary>
      <param name="other">Tag su cui eseguire la verifica di uguaglianza.</param>
      <returns>
        <see langword="true" /> se <paramref name="other" /> ha gli stessi valori per <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" />, <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> e <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.Equals(System.Object)">
      <summary>Verifica se <paramref name="obj" /> è un oggetto <see cref="T:System.Formats.Asn1.Asn1Tag" /> con la stessa codifica di questo tag.</summary>
      <param name="obj">Oggetto per cui verificare l'uguaglianza dei valori</param>
      <returns>
        <see langword="false" /> se <paramref name="obj" /> non è un oggetto <see cref="T:System.Formats.Asn1.Asn1Tag" />; in caso contrario, <see cref="M:System.Formats.Asn1.Asn1Tag.Equals(System.Formats.Asn1.Asn1Tag)" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.HasSameClassAndValue(System.Formats.Asn1.Asn1Tag)">
      <summary>Verifica se i valori di <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> e <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> di <paramref name="other" /> sono uguali a questo tag e non esegue il confronto con <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" />.</summary>
      <param name="other">Tag per cui eseguire la verifica dell'uguaglianza del concetto.</param>
      <returns>
        <see langword="true" /> se i valori di <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> e <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> di <paramref name="other" /> sono uguali a quelli di questo tag; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.op_Equality(System.Formats.Asn1.Asn1Tag,System.Formats.Asn1.Asn1Tag)">
      <summary>Verifica se due valori di <see cref="T:System.Formats.Asn1.Asn1Tag" /> hanno la stessa codifica BER.</summary>
      <param name="left">Primo valore da confrontare.</param>
      <param name="right">Secondo valore da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> hanno la stessa codifica BER; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.op_Inequality(System.Formats.Asn1.Asn1Tag,System.Formats.Asn1.Asn1Tag)">
      <summary>Verifica se due valori di <see cref="T:System.Formats.Asn1.Asn1Tag" /> hanno una codifica BER diversa.</summary>
      <param name="left">Primo valore da confrontare.</param>
      <param name="right">Secondo valore da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> hanno una codifica BER diversa; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.ToString">
      <summary>Fornisce una rappresentazione testuale di questo tag adatta per il debug.</summary>
      <returns>Rappresentazione testuale di questo tag adatta per il debug.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.TryDecode(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.Asn1Tag@,System.Int32@)">
      <summary>Prova a leggere un tag con codifica BER che inizia in corrispondenza di <paramref name="source" />.</summary>
      <param name="source">Sequenza di byte di sola lettura il cui inizio è un tag con codifica BER.</param>
      <param name="tag">Tag decodificato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, contiene il numero di byte che hanno contribuito al tag codificato oppure 0 in caso di errore. Questo parametro viene trattato come non inizializzato.</param>
      <returns>
        <see langword="true" /> se un tag è stato decodificato correttamente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.TryEncode(System.Span{System.Byte},System.Int32@)">
      <summary>Prova a scrivere il form con codifica BER di questo tag in <paramref name="destination" />.</summary>
      <param name="destination">Inizio della posizione in cui deve essere scritto il tag codificato.</param>
      <param name="bytesWritten">Riceve il valore da <see cref="M:System.Formats.Asn1.Asn1Tag.CalculateEncodedSize" /> in caso di esito positivo oppure 0 in caso di errore.</param>
      <returns>
        <see langword="false" /> se <paramref name="destination" />.<see cref="P:System.Span`1.Length" /> &lt; <see cref="M:System.Formats.Asn1.Asn1Tag.CalculateEncodedSize" />(); in caso contrario, <see langword="true" />.</returns>
    </member>
    <member name="P:System.Formats.Asn1.Asn1Tag.IsConstructed">
      <summary>Indica se il tag rappresenta una codifica costruita (<see langword="true" />) o una codifica primitiva (<see langword="false" />).</summary>
    </member>
    <member name="P:System.Formats.Asn1.Asn1Tag.TagClass">
      <summary>Classe del tag a cui appartiene questo tag.</summary>
    </member>
    <member name="P:System.Formats.Asn1.Asn1Tag.TagValue">
      <summary>Valore numerico per questo tag.</summary>
    </member>
    <member name="T:System.Formats.Asn1.AsnContentException">
      <summary>Eccezione generata quando un valore ASN.1 codificato non può essere decodificato correttamente.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnContentException.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Formats.Asn1.AsnContentException" /> con il messaggio predefinito.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnContentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Formats.Asn1.AsnContentException" /> con dati serializzati.</summary>
      <param name="info">Oggetto che contiene i dati oggetto serializzati.</param>
      <param name="context">Informazioni contestuali sull'origine o sulla destinazione.</param>
    </member>
    <member name="M:System.Formats.Asn1.AsnContentException.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Formats.Asn1.AsnContentException" /> con il messaggio specificato.</summary>
      <param name="message">Messaggio di errore in cui viene indicato il motivo dell'eccezione.</param>
    </member>
    <member name="M:System.Formats.Asn1.AsnContentException.#ctor(System.String,System.Exception)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Formats.Asn1.AsnContentException" /> con il messaggio specificato e l'eccezione che ha causato l'eccezione corrente.</summary>
      <param name="message">Messaggio di errore in cui viene indicato il motivo dell'eccezione.</param>
      <param name="inner">Eccezione che ha determinato l'eccezione corrente.</param>
    </member>
    <member name="T:System.Formats.Asn1.AsnDecoder">
      <summary>Offre metodi senza stato per la decodifica di dati ASN.1 con codifica BER, CER o DER.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadBitString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore BitString da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, restituendo il contenuto in una nuova matrice.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="unusedBitCount">Se ha esito positivo, riceve il numero di bit nell'ultimo byte che sono stati segnalati come "non utilizzati" dal writer.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 3).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Matrice che contiene il contenuto del valore BitString.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadBoolean(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore Boolean da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 1).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadCharacterString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.UniversalTagNumber,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come stringa di caratteri con il tag e il tipo di codifica specificati, restituendo la stringa decodificata.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="encodingType">Uno dei valori di enumerazione che rappresenta il tipo valore da elaborare.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da verificare prima della lettura o <see langword="null" /> per indicare il tag Universal appropriato per il tipo di codifica richiesto.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.
oppure <paramref name="encodingType" /> non è un tipo stringa di caratteri noto.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure la stringa non è stata decodificata correttamente.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è uguale a <paramref name="encodingType" />.</exception>
      <returns>Valore decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadEncodedValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Individua l'intervallo di contenuto per il valore codificato all'inizio del buffer di <paramref name="source" /> usando le regole di codifica specificate.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="contentOffset">Al termine di questo metodo, l'offset del payload del contenuto rispetto all'inizio di <paramref name="source" />.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="contentLength">Al termine di questo metodo, il numero di byte nel payload del contenuto, che può essere 0.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">
        <paramref name="source" /> non rappresenta un valore codificato in base alle regole di codifica specificate.</exception>
      <returns>Tag che identifica il contenuto.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadEnumeratedBytes(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore Enumerated da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, restituendo il contenuto come sezione del buffer.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 10).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Sezione del buffer contenente i byte del valore Enumerated nel formato big-endian con segno.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadEnumeratedValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Type,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore Enumerated da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, convertendolo nell'enumerazione non di tipo [<see cref="T:System.FlagsAttribute" />] specificata da <paramref name="enumType" />.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="enumType">Oggetto Type che rappresenta il tipo di destinazione.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 10).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure il valore codificato è eccessivo per essere inserito in un valore <paramref name="enumType" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> non è un tipo enumerazione.
oppure <paramref name="enumType" /> è stato dichiarato con <see cref="T:System.FlagsAttribute" />.
oppure <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> è <see langword="null" />.</exception>
      <returns>Valore di Enumerated convertito in un oggetto <paramref name="enumType" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadEnumeratedValue``1(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore Enumerated da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, convertendolo nell'enumerazione non di tipo [<see cref="T:System.FlagsAttribute" />] specificata da <typeparamref name="TEnum" />.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 10).</param>
      <typeparam name="TEnum">Tipo enum di destinazione</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure il valore codificato è eccessivo per essere inserito in un valore <typeparamref name="TEnum" />.</exception>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="TEnum" /> non è un tipo enumerazione.
oppure <typeparamref name="TEnum" /> è stato dichiarato con <see cref="T:System.FlagsAttribute" />.
oppure <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore di Enumerated convertito in un oggetto <typeparamref name="TEnum" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadGeneralizedTime(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore GeneralizedTime da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 24).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadInteger(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore Integer da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore numerico decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadIntegerBytes(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore Integer da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, restituendo il contenuto come sezione del buffer.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Sezione del buffer contenente i byte del valore Integer nel formato big-endian con segno.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadNamedBitList(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore NamedBitList da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 3).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Bit del valore codificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadNamedBitListValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Type,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore NamedBitList da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, convertendolo nell'enumerazione di tipo [<see cref="T:System.FlagsAttribute" />] specificata da <paramref name="flagsEnumType" />.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="flagsEnumType">Oggetto Type che rappresenta il tipo di destinazione.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 3).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure il valore codificato è eccessivo per essere inserito in un valore <paramref name="flagsEnumType" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="flagsEnumType" /> non è un tipo enumerazione.
oppure <paramref name="flagsEnumType" /> non è stato dichiarato con <see cref="T:System.FlagsAttribute" /> oppure <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="flagsEnumType" /> è <see langword="null" /></exception>
      <returns>Valore di NamedBitList convertito in un oggetto <paramref name="flagsEnumType" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadNamedBitListValue``1(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore NamedBitList da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, convertendolo nell'enumerazione di tipo [<see cref="T:System.FlagsAttribute" />] specificata da <typeparamref name="TFlagsEnum" />.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 3).</param>
      <typeparam name="TFlagsEnum">Tipo enum di destinazione</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure il valore codificato è eccessivo per essere inserito in un valore <typeparamref name="TFlagsEnum" />.</exception>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="TFlagsEnum" /> non è un tipo enumerazione.
oppure <typeparamref name="TFlagsEnum" /> non è stato dichiarato con <see cref="T:System.FlagsAttribute" /> oppure <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore di NamedBitList convertito in un oggetto <typeparamref name="TFlagsEnum" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadNull(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore <see langword="null" /> da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 5).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadObjectIdentifier(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore ObjectIdentifier da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 6).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Identificatore di oggetto decodificato nella notazione decimale puntata.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadOctetString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore OctetString da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, restituendo il contenuto in una nuova matrice.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 4).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Matrice che contiene il contenuto del valore OctetString.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadSequence(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore Sequence o Sequence-Of da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="contentOffset">Al termine di questo metodo, l'offset del payload del contenuto rispetto all'inizio di <paramref name="source" />.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="contentLength">Al termine di questo metodo, il numero di byte nel payload del contenuto, che può essere 0.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 16).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadSetOf(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@,System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore Set-Of da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="contentOffset">Al termine di questo metodo, l'offset del payload del contenuto rispetto all'inizio di <paramref name="source" />.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="contentLength">Al termine di questo metodo, il numero di byte nel payload del contenuto, che può essere 0.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="skipSortOrderValidation">
        <see langword="true" /> per accettare sempre i dati nell'ordine in cui vengono presentati, <see langword="false" /> per verificare che i dati siano ordinati correttamente quando nelle regole di codifica è indicato che l'ordinamento è obbligatorio (CER e DER).</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 17).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadUtcTime(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore UtcTime da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="twoDigitYearMax">Valore massimo relativo all'anno da rappresentare con questo valore.
Il valore predefinito 2049 rappresenta l'intervallo 1950-2049 per i certificati X.509.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 24).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.
oppure <paramref name="twoDigitYearMax" /> non è compreso nell'intervallo [99, 9999].</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadBitString(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a copiare un valore BitString da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate in <paramref name="destination" />.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="destination">Buffer in cui scrivere.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="unusedBitCount">Se ha esito positivo, riceve il numero di bit nell'ultimo byte che sono stati segnalati come "non utilizzati" dal writer.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 3).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.
oppure <paramref name="destination" /> si sovrappone a <paramref name="source" />.</exception>
      <returns>
        <see langword="true" /> se le dimensioni di <paramref name="destination" /> sono sufficienti per ricevere il valore di BitString; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadCharacterString(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.UniversalTagNumber,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge un valore di stringa di caratteri da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, copiando la stringa decodificata in un buffer di destinazione fornito.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="destination">Buffer in cui scrivere.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="encodingType">Uno dei valori di enumerazione che rappresenta il tipo valore da elaborare.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="charsWritten">Al termine di questo metodo, il numero di caratteri scritti in <paramref name="destination" />.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da verificare prima della lettura o <see langword="null" /> per indicare il tag Universal appropriato per il tipo di codifica richiesto.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.
oppure <paramref name="encodingType" /> non è un tipo stringa di caratteri noto.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure la stringa non è stata decodificata correttamente.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è uguale a <paramref name="encodingType" />.</exception>
      <returns>
        <see langword="true" /> e fa avanzare il lettore se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore; in caso contrario <see langword="false" /> (il lettore non avanza).</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadCharacterStringBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.Asn1Tag,System.Int32@,System.Int32@)">
      <summary>Prova a leggere un valore di stringa di caratteri da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, copiando i byte non elaborati nel buffer di destinazione fornito.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="destination">Buffer in cui scrivere.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="expectedTag">Tag da verificare prima della lettura.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesWritten">Se ha esito positivo, riceve il numero di byte scritti in <paramref name="destination" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è un tipo di tag stringa di caratteri.
oppure <paramref name="destination" /> si sovrappone a <paramref name="source" />.</exception>
      <returns>
        <see langword="true" /> se le dimensioni di <paramref name="destination" /> sono sufficienti per ricevere il valore della stringa di caratteri non elaborati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadEncodedValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.Asn1Tag@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Prova a individuare l'intervallo di contenuto per il valore codificato all'inizio del buffer di <paramref name="source" /> usando le regole di codifica specificate.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="tag">Al termine di questo metodo, il tag che identifica il contenuto.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="contentOffset">Al termine di questo metodo, l'offset del payload del contenuto rispetto all'inizio di <paramref name="source" />.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="contentLength">Al termine di questo metodo, il numero di byte nel payload del contenuto, che può essere 0.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <returns>
        <see langword="true" /> se <paramref name="source" /> rappresenta una codifica strutturale valida per le regole di codifica specificate; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadInt32(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a leggere un valore Integer da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate come valore a 32 bit con segno.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="value">Se ha esito positivo, riceve il valore numerico interpretato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="true" /> se il valore rappresentato da Integer è compreso tra <see cref="F:System.Int32.MinValue" /> e <see cref="F:System.Int32.MaxValue" /> inclusi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadInt64(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int64@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a leggere un valore Integer da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate come valore a 64 bit con segno.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="value">Se ha esito positivo, riceve il valore numerico interpretato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="true" /> se il valore rappresentato da Integer è compreso tra <see cref="F:System.Int64.MinValue" /> e <see cref="F:System.Int64.MaxValue" /> inclusi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadOctetString(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a ottenere un valore OctetString da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, copiando il valore nel buffer di destinazione fornito.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="destination">Buffer in cui scrivere.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 4).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.
oppure <paramref name="destination" /> si sovrappone a <paramref name="source" />.</exception>
      <returns>
        <see langword="true" /> se le dimensioni di <paramref name="destination" /> sono sufficienti per ricevere il valore di OctetString; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadPrimitiveBitString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.ReadOnlySpan{System.Byte}@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a ottenere un valore BitString da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, se il valore è contenuto in una codifica singola (primitiva).</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="unusedBitCount">Se ha esito positivo, riceve il numero di bit nell'ultimo byte che sono stati segnalati come "non utilizzati" dal writer.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="value">Se ha esito positivo, riceve una sezione del buffer di input che corrisponde al valore di BitString.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 3).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="true" /> se il valore BitString ha una codifica primitiva e tutti i bit segnalati come non usati sono impostati su 0; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadPrimitiveCharacterStringBytes(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte}@,System.Int32@)">
      <summary>Prova a ottenere una stringa di caratteri non elaborati da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, se il valore è contenuto in una codifica singola (primitiva).</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="expectedTag">Tag da verificare prima della lettura.</param>
      <param name="value">Se ha esito positivo, riceve una sezione del buffer di input che corrisponde al valore di BitString.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è un tipo di tag stringa di caratteri.</exception>
      <returns>
        <see langword="true" /> se il valore della stringa di caratteri ha una codifica primitiva; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadPrimitiveOctetString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.ReadOnlySpan{System.Byte}@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a ottenere un valore OctetString da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate, se il valore è contenuto in una codifica singola (primitiva).</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="value">Se ha esito positivo, riceve una sezione del buffer di input che corrisponde al valore di OctetString.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 4).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="true" /> se il valore OctetString ha una codifica primitiva; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadUInt32(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.UInt32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a leggere un valore Integer da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate come valore a 32 bit senza segno.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="value">Se ha esito positivo, riceve il valore numerico interpretato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="true" /> se il valore rappresentato da Integer è compreso tra <see cref="F:System.UInt32.MinValue" /> e <see cref="F:System.UInt32.MaxValue" /> inclusi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadUInt64(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.UInt64@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a leggere un valore Integer da <paramref name="source" /> con un tag specificato in base alle regole di codifica specificate come valore a 64 bit senza segno.</summary>
      <param name="source">Buffer che contiene i dati codificati.</param>
      <param name="ruleSet">Vincoli di codifica da usare per l'interpretazione dei dati.</param>
      <param name="value">Se ha esito positivo, riceve il valore numerico interpretato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="bytesConsumed">Al termine di questo metodo, il numero totale di byte per il valore codificato.
Questo parametro viene trattato come non inizializzato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="true" /> se il valore rappresentato da Integer è compreso tra <see cref="F:System.UInt64.MinValue" /> e <see cref="F:System.UInt64.MaxValue" /> inclusi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Formats.Asn1.AsnEncodingRules">
      <summary>Set di regole di codifica per un oggetto <see cref="T:System.Formats.Asn1.AsnReader" /> o <see cref="T:System.Formats.Asn1.AsnWriter" />.</summary>
    </member>
    <member name="F:System.Formats.Asn1.AsnEncodingRules.BER">
      <summary>BER (Basic Encoding Rules) ITU-T X.690</summary>
    </member>
    <member name="F:System.Formats.Asn1.AsnEncodingRules.CER">
      <summary>CER (Canonical Encoding Rules) ITU-T X.690</summary>
    </member>
    <member name="F:System.Formats.Asn1.AsnEncodingRules.DER">
      <summary>DER (Distinguished Encoding Rules) ITU-T X.690</summary>
    </member>
    <member name="T:System.Formats.Asn1.AsnReader">
      <summary>Un lettore con stato e forward-only per i dati ASN.1 con codifica BER, CER o DER.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.#ctor(System.ReadOnlyMemory{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.AsnReaderOptions)">
      <summary>Costruisce un oggetto <see cref="T:System.Formats.Asn1.AsnReader" /> su <paramref name="data" /> con un set di regole specificato.</summary>
      <param name="data">Dati da leggere.</param>
      <param name="ruleSet">Vincoli di codifica per il lettore.</param>
      <param name="options">Opzioni aggiuntive per il lettore.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.PeekContentBytes">
      <summary>Ottiene una visualizzazione di <see cref="T:System.ReadOnlyMemory`1" /> che include gli ottetti di contenuto (byte) del valore codificato successivo senza far avanzare il lettore.</summary>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Il lettore è posizionato in un punto in cui il tag o la lunghezza non è valida in base alle regole di codifica correnti.</exception>
      <returns>Byte degli ottetti di contenuto del valore codificato successivo.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.PeekEncodedValue">
      <summary>Ottiene una visualizzazione di <see cref="T:System.ReadOnlyMemory`1" /> che include il valore codificato successivo senza far avanzare il lettore. Per le codifiche di lunghezza indefinita, questo include il marcatore di fine contenuto.</summary>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Il lettore è posizionato in un punto in cui il tag o la lunghezza non è valida in base alle regole di codifica correnti.</exception>
      <returns>Byte del valore codificato successivo.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.PeekTag">
      <summary>Legge il tag codificato in corrispondenza della posizione dei dati successiva, senza far avanzare il lettore.</summary>
      <exception cref="T:System.Formats.Asn1.AsnContentException">non è stato possibile decodificare un tag in corrispondenza della posizione corrente del lettore.</exception>
      <returns>Valore del tag decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadBitString(System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come BITSTRING con un tag specificato, restituendo il valore in una matrice di byte.</summary>
      <param name="unusedBitCount">Se ha esito positivo, riceve il numero di bit nell'ultimo byte che sono stati segnalati come "non utilizzati" dal writer.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 1).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Copia del valore in una matrice appena allocata caratterizzata da dimensioni precise.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadBoolean(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come Boolean con un tag specificato.</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 1).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadCharacterString(System.Formats.Asn1.UniversalTagNumber,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come stringa di caratteri con il tag e il tipo di codifica specificati, restituendo il valore decodificato come stringa.</summary>
      <param name="encodingType">Uno dei valori di enumerazione che rappresenta il tipo valore da elaborare.</param>
      <param name="expectedTag">Tag da verificare prima della lettura o <see langword="null" /> per indicare il tag Universal appropriato per il tipo di codifica richiesto.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encodingType" /> non è un tipo stringa di caratteri noto.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure la stringa non è stata decodificata correttamente.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è uguale a <paramref name="encodingType" />.</exception>
      <returns>Valore decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadEncodedValue">
      <summary>Ottiene una visualizzazione di <see cref="T:System.ReadOnlyMemory`1" /> che include il valore codificato successivo e fa avanzare il lettore. Per una codifica di lunghezza indefinita, questo include il marcatore di fine contenuto.</summary>
      <returns>Visualizzazione di <see cref="T:System.ReadOnlyMemory`1" /> che include il valore codificato successivo.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadEnumeratedBytes(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come Enumerated con un tag specificato, restituendo il contenuto come oggetto <see cref="T:System.ReadOnlyMemory`1" /> oltre ai dati originali.</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 10).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Byte del valore Enumerated in formato big-endian con segno.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadEnumeratedValue(System.Type,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come Enumerated con un tag specificato e lo converte nell'enumerazione non di tipo [<see cref="T:System.FlagsAttribute" />] specificata da <paramref name="enumType" />.</summary>
      <param name="enumType">Oggetto Type che rappresenta il tipo di destinazione.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 10).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure il valore codificato è eccessivo per essere inserito in un valore <paramref name="enumType" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> non è un tipo enumerazione.
oppure <paramref name="enumType" /> è stato dichiarato con <see cref="T:System.FlagsAttribute" />.
oppure <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> è <see langword="null" />.</exception>
      <returns>Valore di Enumerated convertito in un oggetto <paramref name="enumType" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadEnumeratedValue``1(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come Enumerated con un tag specificato e lo converte nell'enumerazione non di tipo [<see cref="T:System.FlagsAttribute" />] specificata da <typeparamref name="TEnum" />.</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 10).</param>
      <typeparam name="TEnum">Tipo enum di destinazione</typeparam>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure il valore codificato è eccessivo per essere inserito in un valore <typeparamref name="TEnum" />.</exception>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="TEnum" /> non è un tipo enumerazione.
oppure <typeparamref name="TEnum" /> è stato dichiarato con <see cref="T:System.FlagsAttribute" />.
oppure <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore di Enumerated convertito in un oggetto <typeparamref name="TEnum" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadGeneralizedTime(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come GeneralizedTime con un tag specificato.</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 24).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadInteger(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come Integer con un tag specificato.</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadIntegerBytes(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come Integer con un tag specificato, restituendo il contenuto come oggetto <see cref="T:System.ReadOnlyMemory`1" /> oltre ai dati originali.</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Byte del valore Integer nel formato big-endian con segno.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadNamedBitList(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come NamedBitList con un tag specificato.</summary>
      <param name="expectedTag">Tag da verificare prima della lettura.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Bit del valore codificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadNamedBitListValue(System.Type,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come NamedBitList con un tag specificato e lo converte nell'enumerazione di tipo [<see cref="T:System.FlagsAttribute" />] specificata da <paramref name="flagsEnumType" />.</summary>
      <param name="flagsEnumType">Oggetto Type che rappresenta il tipo di destinazione.</param>
      <param name="expectedTag">Tag da verificare prima della lettura.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure il valore codificato è eccessivo per essere inserito in un valore <paramref name="flagsEnumType" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="flagsEnumType" /> non è un tipo enumerazione.
oppure <paramref name="flagsEnumType" /> non è stato dichiarato con <see cref="T:System.FlagsAttribute" /> oppure <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="flagsEnumType" /> è <see langword="null" /></exception>
      <returns>Valore di NamedBitList convertito in un oggetto <paramref name="flagsEnumType" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadNamedBitListValue``1(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come NamedBitList con un tag specificato e lo converte nell'enumerazione di tipo [<see cref="T:System.FlagsAttribute" />] specificata da <typeparamref name="TFlagsEnum" />.</summary>
      <param name="expectedTag">Tag da verificare prima della lettura.</param>
      <typeparam name="TFlagsEnum">Tipo enum di destinazione</typeparam>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure il valore codificato è eccessivo per essere inserito in un valore <typeparamref name="TFlagsEnum" />.</exception>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="TFlagsEnum" /> non è un tipo enumerazione.
oppure <typeparamref name="TFlagsEnum" /> non è stato dichiarato con <see cref="T:System.FlagsAttribute" /> oppure <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore di NamedBitList convertito in un oggetto <typeparamref name="TFlagsEnum" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadNull(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come NULL con un tag specificato.</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 5).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadObjectIdentifier(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come ObjectIdentifier con un tag specificato, restituendo il valore in una stringa in formato decimale puntato.</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 6).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore dell'identificatore di oggetto in una stringa puntata in formato decimale.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come OCTETSTRING con tag UNIVERSAL 4, restituendo il valore in una matrice di byte.</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 4).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Copia del valore in una matrice appena allocata caratterizzata da dimensioni precise.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come SEQUENCE o SEQUENCE-OF con il tag specificato e restituisce il risultato come nuovo lettore posizionato in corrispondenza del primo valore di Sequence (o con <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 16).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Nuovo lettore posizionato in corrispondenza del primo valore di Sequence (o con <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadSetOf(System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come SET-OF o SEQUENCE-OF con il tag specificato e restituisce il risultato come nuovo lettore posizionato in corrispondenza del primo valore di Set-Of (o con <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</summary>
      <param name="skipSortOrderValidation">
        <see langword="true" /> per accettare sempre i dati nell'ordine in cui vengono presentati, <see langword="false" /> per verificare che i dati siano ordinati correttamente quando nelle regole di codifica è indicato che l'ordinamento è obbligatorio (CER e DER).</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 17).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Nuovo lettore posizionato in corrispondenza del primo valore di Set-Of (o con <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come SET-OF con il tag specificato e restituisce il risultato come nuovo lettore posizionato in corrispondenza del primo valore di Set-Of (o con <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />), usando il valore di <see cref="P:System.Formats.Asn1.AsnReaderOptions.SkipSetSortOrderVerification" /> restituito dal costruttore (impostazione predefinita: <see langword="false" />).</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 17).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Nuovo lettore posizionato in corrispondenza del primo valore di Set-Of (o con <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadUtcTime(System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come UTCTime con un tag specificato.</summary>
      <param name="twoDigitYearMax">Valore massimo relativo all'anno da rappresentare con questo valore.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 23).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadUtcTime(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come UTCTime con un tag specificato usando il valore di <see cref="P:System.Formats.Asn1.AsnReaderOptions.UtcTimeTwoDigitYearMax" /> restituito dalle opzioni passate al costruttore (il cui valore predefinito è 2049).</summary>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 23).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore decodificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ThrowIfNotEmpty">
      <summary>Genere un'eccezione <see cref="T:System.Formats.Asn1.AsnContentException" /> standardizzata se nel lettore sono ancora presenti dati oppure non esegue alcuna funzione se <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> restituisce <see langword="false" />.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadBitString(System.Span{System.Byte},System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come BITSTRING con un tag specificato, copiando il valore in un buffer di destinazione fornito.</summary>
      <param name="destination">Buffer in cui scrivere.</param>
      <param name="unusedBitCount">Se ha esito positivo, riceve il numero di bit nell'ultimo byte che sono stati segnalati come "non utilizzati" dal writer.</param>
      <param name="bytesWritten">Se ha esito positivo, riceve il numero di byte scritti in <paramref name="destination" />.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 1).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="true" /> e fa avanzare il lettore se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore; in caso contrario <see langword="false" /> (il lettore non avanza).</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadCharacterString(System.Span{System.Char},System.Formats.Asn1.UniversalTagNumber,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come stringa di caratteri con il tag e il tipo di codifica specificati, copiando il valore decodificato in un buffer di destinazione fornito.</summary>
      <param name="destination">Buffer in cui scrivere.</param>
      <param name="encodingType">Uno dei valori di enumerazione che rappresenta il tipo valore da elaborare.</param>
      <param name="charsWritten">Se ha esito positivo, riceve il numero di caratteri scritti in <paramref name="destination" />.</param>
      <param name="expectedTag">Tag da verificare prima della lettura o <see langword="null" /> per indicare il tag Universal appropriato per il tipo di codifica richiesto.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encodingType" /> non è un tipo stringa di caratteri noto.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.
oppure la stringa non è stata decodificata correttamente.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è uguale a <paramref name="encodingType" />.</exception>
      <returns>
        <see langword="true" /> e fa avanzare il lettore se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore; in caso contrario <see langword="false" /> (il lettore non avanza).</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadCharacterStringBytes(System.Span{System.Byte},System.Formats.Asn1.Asn1Tag,System.Int32@)">
      <summary>Legge il valore successivo come stringa di caratteri con il tag specificato, copiando i byte non elaborati in un buffer di destinazione specificato.</summary>
      <param name="destination">Buffer in cui scrivere.</param>
      <param name="expectedTag">Tag da verificare prima della lettura.</param>
      <param name="bytesWritten">Se ha esito positivo, riceve il numero di byte scritti in <paramref name="destination" />.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è un tipo di tag stringa di caratteri.</exception>
      <returns>
        <see langword="true" /> e fa avanzare il lettore se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore; in caso contrario <see langword="false" /> (il lettore non avanza).</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadInt32(System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a leggere il valore successivo come Integer con un tag specificato, come valore a 32 bit con segno.</summary>
      <param name="value">Se ha esito positivo, riceve il valore decodificato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="false" /> e non fa avanzare il lettore se il valore non è compreso tra <see cref="F:System.Int32.MinValue" /> e <see cref="F:System.Int32.MaxValue" /> inclusi; in caso contrario, restituisce <see langword="true" /> e fa avanzare il lettore.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadInt64(System.Int64@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a leggere il valore successivo come Integer con un tag specificato, come valore a 64 bit con segno.</summary>
      <param name="value">Se ha esito positivo, riceve il valore decodificato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="false" /> e non fa avanzare il lettore se il valore non è compreso tra <see cref="F:System.Int64.MinValue" /> e <see cref="F:System.Int64.MaxValue" /> inclusi; in caso contrario, restituisce <see langword="true" /> e fa avanzare il lettore.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadOctetString(System.Span{System.Byte},System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come OCTETSTRING con un tag specificato, copiando il valore in un buffer di destinazione fornito.</summary>
      <param name="destination">Buffer in cui scrivere.</param>
      <param name="bytesWritten">Se ha esito positivo, riceve il numero di byte scritti in <paramref name="destination" />.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 4).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="true" /> e fa avanzare il lettore se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore; in caso contrario <see langword="false" /> (il lettore non avanza).</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadPrimitiveBitString(System.Int32@,System.ReadOnlyMemory{System.Byte}@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Legge il valore successivo come BITSTRING con un tag specificato, restituendo il contenuto come oggetto <see cref="T:System.ReadOnlyMemory`1" /> oltre ai dati originali.</summary>
      <param name="unusedBitCount">Se ha esito positivo, riceve il numero di bit nell'ultimo byte che sono stati segnalati come "non utilizzati" dal writer.</param>
      <param name="value">Se ha esito positivo, oltre ai dati originali riceve un oggetto <see cref="T:System.ReadOnlyMemory`1" /> corrispondente al valore di BITSTRING.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 1).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="true" /> e fa avanzare il lettore se il valore BITSTRING contiene una codifica primitiva, <see langword="false" /> e non fa avanzare il lettore se contiene una codifica costruita.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Formats.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)">
      <summary>Legge il valore successivo come carattere con un tag specificato, restituendo il contenuto come oggetto <see cref="T:System.ReadOnlyMemory`1" /> non elaborato oltre ai dati originali.</summary>
      <param name="expectedTag">Tag da verificare prima della lettura.</param>
      <param name="contents">Se ha esito positivo, oltre ai dati originali riceve un oggetto <see cref="T:System.ReadOnlyMemory`1" /> corrispondente al valore della stringa di caratteri.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è un tipo di tag stringa di caratteri.</exception>
      <returns>
        <see langword="true" /> e fa avanzare il lettore se il valore della stringa di caratteri contiene una codifica primitiva, <see langword="false" /> e non fa avanzare il lettore se contiene una codifica costruita.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadPrimitiveOctetString(System.ReadOnlyMemory{System.Byte}@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a leggere il valore successivo come OCTETSTRING con un tag specificato, restituendo il contenuto come oggetto <see cref="T:System.ReadOnlyMemory`1" /> oltre ai dati originali.</summary>
      <param name="contents">Se ha esito positivo, oltre ai dati originali riceve un oggetto <see cref="T:System.ReadOnlyMemory`1" /> corrispondente al valore di OCTETSTRING.</param>
      <param name="expectedTag">Tag da verificare prima della lettura.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="true" /> e fa avanzare il lettore se il valore OCTETSTRING contiene una codifica primitiva, <see langword="false" /> e non fa avanzare il lettore se contiene una codifica costruita.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadUInt32(System.UInt32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a leggere il valore successivo come Integer con un tag specificato, come valore a 32 bit senza segno.</summary>
      <param name="value">Se ha esito positivo, riceve il valore decodificato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="false" /> e non fa avanzare il lettore se il valore non è compreso tra <see cref="F:System.UInt32.MinValue" /> e <see cref="F:System.UInt32.MaxValue" /> inclusi; in caso contrario, restituisce <see langword="true" /> e fa avanzare il lettore.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadUInt64(System.UInt64@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Prova a leggere il valore successivo come Integer con un tag specificato, come valore a 64 bit senza segno.</summary>
      <param name="value">Se ha esito positivo, riceve il valore decodificato.</param>
      <param name="expectedTag">Tag da controllare prima della lettura oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">il tag del valore successivo non è corretto.
oppure la codifica di lunghezza non è valida in base alle regole di codifica correnti.
oppure il contenuto non è valido in base alle regole di codifica correnti.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>
        <see langword="false" /> e non fa avanzare il lettore se il valore non è compreso tra <see cref="F:System.UInt64.MinValue" /> e <see cref="F:System.UInt64.MaxValue" /> inclusi; in caso contrario, restituisce <see langword="true" /> e fa avanzare il lettore.</returns>
    </member>
    <member name="P:System.Formats.Asn1.AsnReader.HasData">
      <summary>Ottiene un'indicazione se nel lettore sono ancora disponibili dati da elaborare.</summary>
      <returns>
        <see langword="true" /> Se sono presenti più dati disponibili per l'elaborazione da parte del lettore; in caso contrario, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Formats.Asn1.AsnReader.RuleSet">
      <summary>Ottiene le regole di codifica usate da questo lettore.</summary>
      <returns>Regole di codifica utilizzate da questo Reader.</returns>
    </member>
    <member name="T:System.Formats.Asn1.AsnReaderOptions">
      <summary>Specifica le opzioni che modificano il comportamento di un oggetto <see cref="T:System.Formats.Asn1.AsnReader" />.</summary>
    </member>
    <member name="P:System.Formats.Asn1.AsnReaderOptions.SkipSetSortOrderVerification">
      <summary>Ottiene o imposta un valore che indica se il lettore deve ignorare l'ordinamento in un valore Set o Set-Of.</summary>
      <returns>
        <see langword="true" /> Se il lettore non deve verificare che un set o un set di valori sia ordinato correttamente per le regole di codifica correnti; in caso contrario <see langword="false" /> ,.
Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="P:System.Formats.Asn1.AsnReaderOptions.UtcTimeTwoDigitYearMax">
      <summary>Ottiene o imposta il valore massimo relativo all'anno da rappresentare con un valore UtcTime.</summary>
      <returns>Anno più grande da rappresentare con un valore UtcTime. Il valore predefinito è 2049.</returns>
    </member>
    <member name="T:System.Formats.Asn1.AsnWriter">
      <summary>Writer per i dati ASN.1 con codifica BER, CER e DER.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.#ctor(System.Formats.Asn1.AsnEncodingRules)">
      <summary>Crea un nuovo oggetto <see cref="T:System.Formats.Asn1.AsnWriter" /> con un set di regole di codifica specificato.</summary>
      <param name="ruleSet">Vincoli di codifica per il writer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> non è definito.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.CopyTo(System.Formats.Asn1.AsnWriter)">
      <summary>Copia il valore di questo writer in un altro writer.</summary>
      <param name="destination">Writer che deve ricevere il valore.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Un metodo <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> non è stato chiuso tramite il metodo <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" />.
oppure questo writer è vuoto.
oppure questo writer rappresenta più di un valore di primo livello.
oppure il valore di questo writer è codificato in modo non compatibile con il set di regole per il writer di destinazione.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.Encode">
      <summary>Restituisce una nuova matrice contenente il valore codificato.</summary>
      <exception cref="T:System.InvalidOperationException">Un metodo <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> non è stato chiuso tramite il metodo <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" />.</exception>
      <returns>Matrice con dimensioni precise contenente il valore codificato.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.Encode(System.Span{System.Byte})">
      <summary>Scrive la rappresentazione codificata dei dati in <paramref name="destination" />.</summary>
      <param name="destination">Buffer in cui scrivere.</param>
      <exception cref="T:System.InvalidOperationException">Un metodo <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> non è stato chiuso tramite il metodo <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" />.</exception>
      <returns>Numero di byte scritti in <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.EncodedValueEquals(System.Formats.Asn1.AsnWriter)">
      <summary>Determina se il metodo <see cref="M:System.Formats.Asn1.AsnWriter.Encode" /> produrrebbe un output identico a <paramref name="other" />.</summary>
      <param name="other">Istanza da confrontare con i valori codificati.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Un metodo <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> non è stato chiuso tramite il metodo <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" />.</exception>
      <returns>
        <see langword="true" /> se i dati codificati in sospeso sono identici a <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.EncodedValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Determina se il metodo <see cref="M:System.Formats.Asn1.AsnWriter.Encode" /> produrrebbe un output identico a <paramref name="other" />.</summary>
      <param name="other">Valore codificato da confrontare.</param>
      <exception cref="T:System.InvalidOperationException">Un metodo <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> non è stato chiuso tramite il metodo <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" />.</exception>
      <returns>
        <see langword="true" /> se i dati codificati in sospeso sono identici a <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.GetEncodedLength">
      <summary>Ottiene il numero di byte che verrebbero scritti da <see cref="M:System.Formats.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" />, <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PushOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> è stato chiamato senza il metodo Pop corrispondente.</exception>
      <returns>Numero di byte che verrebbero scritti da <see cref="M:System.Formats.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PopOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Indica che il valore OctetString aperto con il tag UNIVERSAL 4 è chiuso, restituendo il writer al contesto padre.</summary>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 4).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <exception cref="T:System.InvalidOperationException">il writer non è attualmente posizionato all'interno di un valore OctetString con il tag specificato.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Indica che il valore Sequence aperto con il tag specificato è chiuso, restituendo il writer al contesto padre.</summary>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 16).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <exception cref="T:System.InvalidOperationException">il writer non è attualmente posizionato all'interno di un valore Sequence con il tag specificato.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Indica che il valore Set-Of aperto con il tag specificato è chiuso, restituendo il writer al contesto padre.</summary>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 17).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <exception cref="T:System.InvalidOperationException">il writer non è attualmente posizionato all'interno di un valore Set-Of con il tag specificato.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PushOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Inizia a scrivere un valore OctetString con un tag specificato.</summary>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 4).</param>
      <returns>Valore eliminabile che chiamerà automaticamente <see cref="M:System.Formats.Asn1.AsnWriter.PopOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Inizia a scrivere un valore Sequence con un tag specificato.</summary>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 16).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore eliminabile che chiamerà automaticamente <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Inizia a scrivere un valore Set-Of con un tag specificato.</summary>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 17).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <returns>Valore eliminabile che chiamerà automaticamente <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.Reset">
      <summary>Reimposta il writer in modo che non contenga dati, senza rilasciare le risorse.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)">
      <summary>Prova a scrivere la rappresentazione codificata dei dati in <paramref name="destination" />.</summary>
      <param name="destination">Buffer in cui scrivere.</param>
      <param name="bytesWritten">Se ha esito positivo, riceve il numero di byte scritti in <paramref name="destination" />.</param>
      <exception cref="T:System.InvalidOperationException">Un metodo <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> non è stato chiuso tramite il metodo <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> o <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" />.</exception>
      <returns>
        <see langword="true" /> se la codifica riesce, <see langword="false" /> se le dimensioni di <paramref name="destination" /> sono insufficienti.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteBitString(System.ReadOnlySpan{System.Byte},System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore BitString con un tag specificato.</summary>
      <param name="value">Valore da scrivere.</param>
      <param name="unusedBitCount">Numero di bit finali che non sono semantici.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 3).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.
oppure <paramref name="value" /> ha lunghezza 0 e <paramref name="unusedBitCount" /> non è 0 oppure <paramref name="value" /> non è vuoto e uno qualsiasi dei bit identificati da <paramref name="unusedBitCount" /> è impostato.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="unusedBitCount" /> non è compreso nell'intervallo [0, 7].</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteBoolean(System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore Boolean con un tag specificato.</summary>
      <param name="value">Valore da scrivere.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 1).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteCharacterString(System.Formats.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Char},System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive la stringa fornita usando il tipo di codifica specificato con il tag specificato corrispondente al tipo di codifica.</summary>
      <param name="encodingType">Uno dei valori di enumerazione che rappresenta la codifica da usare.</param>
      <param name="str">Stringa da scrivere.</param>
      <param name="tag">Tag da scrivere o <see langword="null" /> per indicare il tag Universal appropriato per il tipo di codifica richiesto.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encodingType" /> non è un tipo di codifica per stringa di caratteri con restrizioni.
oppure <paramref name="encodingType" /> è un tipo di codifica per stringa di caratteri con restrizioni attualmente non supportato da questo metodo.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteCharacterString(System.Formats.Asn1.UniversalTagNumber,System.String,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive la stringa fornita usando il tipo di codifica specificato con il tag specificato corrispondente al tipo di codifica.</summary>
      <param name="encodingType">Uno dei valori di enumerazione che rappresenta la codifica da usare.</param>
      <param name="value">Stringa da scrivere.</param>
      <param name="tag">Tag da scrivere o <see langword="null" /> per indicare il tag Universal appropriato per il tipo di codifica richiesto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> è <see langword="null" /></exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encodingType" /> non è un tipo di codifica per stringa di caratteri con restrizioni.
oppure <paramref name="encodingType" /> è un tipo di codifica per stringa di caratteri con restrizioni attualmente non supportato da questo metodo.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteEncodedValue(System.ReadOnlySpan{System.Byte})">
      <summary>Scrive un valore singolo che è già stato codificato.</summary>
      <param name="value">Valore da scrivere.</param>
      <exception cref="T:System.ArgumentException">Non è stato possibile leggere <paramref name="value" /> in base alle regole di codifica correnti.
oppure <paramref name="value" /> contiene dati oltre la fine del primo valore.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteEnumeratedValue(System.Enum,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore di enumerazione diverso da [<see cref="T:System.FlagsAttribute" />] come valore Enumerated con tag UNIVERSAL 10.</summary>
      <param name="value">Valore di enumerazione boxed da scrivere.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 10).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.
oppure <paramref name="value" /> non è un valore di enumerazione boxed.
oppure il tipo unboxed di <paramref name="value" /> è dichiarato come [<see cref="T:System.FlagsAttribute" />].</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteEnumeratedValue``1(``0,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore di enumerazione diverso da [<see cref="T:System.FlagsAttribute" />] come valore Enumerated con tag UNIVERSAL 10.</summary>
      <param name="value">Valore di enumerazione boxed da scrivere.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 10).</param>
      <typeparam name="TEnum">
        <see cref="T:System.FlagsAttribute" />Tipo di enumerazione non-[] da scrivere.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.
oppure <typeparamref name="TEnum" /> non è un'enumerazione.
oppure <typeparamref name="TEnum" /> è dichiarato come [<see cref="T:System.FlagsAttribute" />].</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteGeneralizedTime(System.DateTimeOffset,System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive l'oggetto <see cref="T:System.DateTimeOffset" /> fornito come valore GeneralizedTime con un tag UNIVERSAL 24 specificato, escludendo facoltativamente i secondi frazionari.</summary>
      <param name="value">Valore da scrivere.</param>
      <param name="omitFractionalSeconds">
        <see langword="true" /> per considerare i secondi frazionari in <paramref name="value" /> come 0 anche se è presente un valore diverso da zero.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 24).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteInteger(System.Int64,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore Integer con un tag specificato.</summary>
      <param name="value">Valore da scrivere.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteInteger(System.Numerics.BigInteger,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore Integer con un tag specificato.</summary>
      <param name="value">Valore da scrivere.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteInteger(System.ReadOnlySpan{System.Byte},System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore Integer con un tag specificato.</summary>
      <param name="value">Valore Integer da scrivere nell'ordine dei byte big-endian con segno.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <exception cref="T:System.ArgumentException">i 9 bit più significativi sono tutti impostati.
oppure i 9 bit più significativi sono tutti non impostati.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteInteger(System.UInt64,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore Integer con un tag specificato.</summary>
      <param name="value">Valore da scrivere.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteIntegerUnsigned(System.ReadOnlySpan{System.Byte},System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore Integer con un tag specificato.</summary>
      <param name="value">Valore Integer da scrivere nell'ordine dei byte big-endian senza segno.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 2).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <exception cref="T:System.ArgumentException">i 9 bit più significativi sono tutti non impostati.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteNamedBitList(System.Collections.BitArray,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore di matrice di bit come NamedBitList con un tag specificato.</summary>
      <param name="value">Bit da scrivere</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 3).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteNamedBitList(System.Enum,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore di enumerazione [<see cref="T:System.FlagsAttribute" />] come NamedBitList con un tag specificato.</summary>
      <param name="value">Valore di enumerazione boxed da scrivere</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 3).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.
oppure <paramref name="value" /> non è un valore di enumerazione boxed.
oppure il tipo unboxed di <paramref name="value" /> non è dichiarato come [<see cref="T:System.FlagsAttribute" />].</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteNamedBitList``1(``0,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore di enumerazione [<see cref="T:System.FlagsAttribute" />] come NamedBitList con un tag specificato.</summary>
      <param name="value">Valore di enumerazione da scrivere</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 3).</param>
      <typeparam name="TEnum">
        <see cref="T:System.FlagsAttribute" />Tipo di enumerazione [] da scrivere.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.
oppure <typeparamref name="TEnum" /> non è un valore di enumerazione.
oppure <typeparamref name="TEnum" /> non è dichiarato come [<see cref="T:System.FlagsAttribute" />].</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteNull(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive NULL con un tag specificato.</summary>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 5).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteObjectIdentifier(System.ReadOnlySpan{System.Char},System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un identificatore di oggetto con un tag specificato.</summary>
      <param name="oidValue">Identificatore di oggetto da scrivere.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 6).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.
oppure <paramref name="oidValue" /> non è un identificatore di oggetto valido in formato decimale puntato.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteObjectIdentifier(System.String,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un identificatore di oggetto con un tag specificato.</summary>
      <param name="oidValue">Identificatore di oggetto da scrivere.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 6).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.
oppure <paramref name="oidValue" /> non è un identificatore di oggetto valido in formato decimale puntato.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteOctetString(System.ReadOnlySpan{System.Byte},System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive un valore OctetString con un tag specificato.</summary>
      <param name="value">Valore da scrivere.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 4).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset,System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive il valore fornito come UTCTime con un tag specificato, purché l'anno sia compreso nell'intervallo consentito.</summary>
      <param name="value">Valore da scrivere.</param>
      <param name="twoDigitYearMax">Valore massimo valido per l'anno in <paramref name="value" /> dopo la conversione in UTC.
Per l'intervallo Time.utcTime X.509 pari a 1950-2049, passare <c>2049</c>.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 23).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />.<see cref="P:System.DateTimeOffset.Year" /> (dopo la conversione in UTC) non è compreso nell'intervallo (<paramref name="twoDigitYearMax" /> - 100, <paramref name="twoDigitYearMax" />].</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Scrive il valore fornito come UTCTime con un tag specificato, accettando l'anno a due cifre come valido nel contesto.</summary>
      <param name="value">Valore da scrivere.</param>
      <param name="tag">Tag da scrivere oppure <see langword="null" /> per indicare il tag predefinito (Universal 23).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> è <see cref="F:System.Formats.Asn1.TagClass.Universal" />, ma <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> non è corretto per il metodo.</exception>
    </member>
    <member name="P:System.Formats.Asn1.AsnWriter.RuleSet">
      <summary>Ottiene le regole di codifica usate da questo writer.</summary>
      <returns>Regole di codifica utilizzate dal writer.</returns>
    </member>
    <member name="T:System.Formats.Asn1.AsnWriter.Scope">
      <summary>Specifica una destinazione <see cref="T:System.IDisposable" /> per chiudere in modo sicuro un tag aperto usando un ambito lessicale come ambito logico.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.Scope.Dispose">
      <summary>Esegue attività definite dall'applicazione, come rilasciare o reimpostare risorse non gestite.</summary>
    </member>
    <member name="T:System.Formats.Asn1.TagClass">
      <summary>Classe del tag per un tag ASN.1 specifico.</summary>
    </member>
    <member name="F:System.Formats.Asn1.TagClass.Application">
      <summary>Classe del tag Application</summary>
    </member>
    <member name="F:System.Formats.Asn1.TagClass.ContextSpecific">
      <summary>Classe del tag Context-Specific</summary>
    </member>
    <member name="F:System.Formats.Asn1.TagClass.Private">
      <summary>Classe del tag Private</summary>
    </member>
    <member name="F:System.Formats.Asn1.TagClass.Universal">
      <summary>Classe del tag Universal</summary>
    </member>
    <member name="T:System.Formats.Asn1.UniversalTagNumber">
      <summary>Assegnazioni di tag per la classe UNIVERSAL in ITU-T X.680.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.BitString">
      <summary>Valore del tag della classe UNIVERSAL per BitString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.BMPString">
      <summary>Valore del tag della classe UNIVERSAL per BMPString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Boolean">
      <summary>Valore del tag della classe UNIVERSAL per Boolean.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Date">
      <summary>Valore del tag della classe UNIVERSAL per Date.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.DateTime">
      <summary>Valore del tag della classe UNIVERSAL per Date-Time.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Duration">
      <summary>Valore del tag della classe UNIVERSAL per Duration.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Embedded">
      <summary>Valore del tag della classe UNIVERSAL per Embedded-PDV.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.EndOfContents">
      <summary>Identificatore riservato per il marcatore di fine contenuto in una codifica di lunghezza indefinita.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Enumerated">
      <summary>Valore del tag della classe UNIVERSAL per Enumerated.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.External">
      <summary>Valore del tag della classe UNIVERSAL per External.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.GeneralizedTime">
      <summary>Valore del tag della classe UNIVERSAL per GeneralizedTime.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.GeneralString">
      <summary>Valore del tag della classe UNIVERSAL per GeneralString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.GraphicString">
      <summary>Valore del tag della classe UNIVERSAL per GraphicString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.IA5String">
      <summary>Valore del tag della classe UNIVERSAL per IA5String.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.InstanceOf">
      <summary>Valore del tag della classe UNIVERSAL per Instance-Of.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Integer">
      <summary>Valore del tag della classe UNIVERSAL per Integer.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.ISO646String">
      <summary>Valore del tag della classe UNIVERSAL per ISO646String (VisibleString).</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Null">
      <summary>Valore del tag della classe UNIVERSAL per Null.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.NumericString">
      <summary>Valore del tag della classe UNIVERSAL per NumericString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.ObjectDescriptor">
      <summary>Valore del tag della classe UNIVERSAL per ObjectDescriptor.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.ObjectIdentifier">
      <summary>Valore del tag della classe UNIVERSAL per ObjectIdentifier.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.ObjectIdentifierIRI">
      <summary>Valore del tag della classe UNIVERSAL per OID-IRI (Object Identifier Internationalized Resource Identifier).</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.OctetString">
      <summary>Valore del tag della classe UNIVERSAL per OctetString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.PrintableString">
      <summary>Valore del tag della classe UNIVERSAL per PrintableString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Real">
      <summary>Valore del tag della classe UNIVERSAL per Real.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.RelativeObjectIdentifier">
      <summary>Valore del tag della classe UNIVERSAL per RELATIVE-OID (Relative Object Identifier).</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.RelativeObjectIdentifierIRI">
      <summary>Valore del tag della classe UNIVERSAL per RELATIVE-OID-IRI (Relative Object Identifier Internationalized Resource Identifier).</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Sequence">
      <summary>Valore del tag della classe UNIVERSAL per Sequence.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.SequenceOf">
      <summary>Valore del tag della classe UNIVERSAL per Sequence-Of.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Set">
      <summary>Valore del tag della classe UNIVERSAL per Set.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.SetOf">
      <summary>Valore del tag della classe UNIVERSAL per Set-Of.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.T61String">
      <summary>Valore del tag della classe UNIVERSAL per T61String (TeletexString).</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.TeletexString">
      <summary>Valore del tag della classe UNIVERSAL per TeletexString (T61String).</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Time">
      <summary>Valore del tag della classe UNIVERSAL per Time.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.TimeOfDay">
      <summary>Valore del tag della classe UNIVERSAL per Time-Of-Day.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.UniversalString">
      <summary>Valore del tag della classe UNIVERSAL per UniversalString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.UnrestrictedCharacterString">
      <summary>Valore del tag della classe UNIVERSAL per una stringa di caratteri senza restrizioni.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.UtcTime">
      <summary>Valore del tag della classe UNIVERSAL per UTCTime.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.UTF8String">
      <summary>Valore del tag della classe UNIVERSAL per UTF8String.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.VideotexString">
      <summary>Valore del tag della classe UNIVERSAL per VideotexString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.VisibleString">
      <summary>Valore del tag della classe UNIVERSAL per VisibleString (ISO646String).</summary>
    </member>
  </members>
</doc>
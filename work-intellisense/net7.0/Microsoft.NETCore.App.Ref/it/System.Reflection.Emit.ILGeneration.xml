<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.ILGeneration</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary vsli:raw="Helps build custom attributes.">Consente di compilare attributi personalizzati.</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute and the arguments to the constructor.">Inizializza un'istanza della classe <see langword="CustomAttributeBuilder" /> dati il costruttore dell'attributo personalizzato e gli argomenti per il costruttore.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Argomenti per il costruttore dell'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Il parametro <paramref name="con" /> è statico o privato.  
  
-oppure- 
Il numero degli argomenti forniti non corrisponde al numero di parametri del costruttore richiesti dalla convenzione di chiamata del costruttore.  
  
-oppure- 
Il tipo degli argomenti forniti non corrisponde al tipo del parametro dichiarato nel costruttore.  
  
-oppure- 
Un argomento fornito è un tipo di riferimento diverso da <see cref="T:System.String" /> o <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;constructorArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="constructorArgs" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.">Inizializza un'istanza della classe <see langword="CustomAttributeBuilder" />, dati il costruttore dell'attributo personalizzato, gli argomenti al costruttore e un set di coppie campo/valore con nome.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Argomenti per il costruttore dell'attributo personalizzato.</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">Campi denominati dell'attributo personalizzato.</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">Valori per i campi denominati dell'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the named fields.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Le matrici <paramref name="namedFields" /> e di <paramref name="fieldValues" /> hanno lunghezze diverse.  
  
-oppure- 
 Il parametro <paramref name="con" /> è statico o privato.  
  
-oppure- 
Il numero degli argomenti forniti non corrisponde al numero di parametri del costruttore richiesti dalla convenzione di chiamata del costruttore.  
  
-oppure- 
Il tipo degli argomenti forniti non corrisponde al tipo del parametro dichiarato nel costruttore.  
  
-oppure- 
I tipi dei valori dei campi non corrispondono ai tipi dei campi denominati.  
  
-oppure- 
Il campo non appartiene alla stessa classe o classe base del costruttore.  
  
-oppure- 
Un argomento fornito o un campo denominato è un tipo di riferimento diverso da <see cref="T:System.String" /> o <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Uno dei parametri è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.">Inizializza un'istanza della classe <see langword="CustomAttributeBuilder" />, dati il costruttore dell'attributo personalizzato, gli argomenti al costruttore e un set di coppie di proprietà o valori denominati.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Argomenti per il costruttore dell'attributo personalizzato.</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">Proprietà denominate dell'attributo personalizzato.</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">Valori per le proprietà denominate dell'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named property is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Le matrici <paramref name="namedProperties" /> e di <paramref name="propertyValues" /> hanno lunghezze diverse.  
  
-oppure- 
 Il parametro <paramref name="con" /> è statico o privato.  
  
-oppure- 
Il numero degli argomenti forniti non corrisponde al numero di parametri del costruttore richiesti dalla convenzione di chiamata del costruttore.  
  
-oppure- 
Il tipo degli argomenti forniti non corrisponde al tipo del parametro dichiarato nel costruttore.  
  
-oppure- 
I tipi dei valori delle proprietà non corrispondono ai tipi delle proprietà denominate.  
  
-oppure- 
Una proprietà non ha un metodo di impostazione.  
  
-oppure- 
La proprietà non appartiene alla stessa classe o classe base del costruttore.  
  
-oppure- 
Un argomento fornito o una proprietà denominata è un tipo di riferimento diverso da <see cref="T:System.String" /> o <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Uno dei parametri è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.">Inizializza un'istanza della classe <see langword="CustomAttributeBuilder" />, dati il costruttore dell'attributo personalizzato, gli argomenti al costruttore e un set di coppie di proprietà o valori denominati e un set di coppie di campi o valori denominati.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Argomenti per il costruttore dell'attributo personalizzato.</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">Proprietà denominate dell'attributo personalizzato.</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">Valori per le proprietà denominate dell'attributo personalizzato.</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">Campi denominati dell'attributo personalizzato.</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">Valori per i campi denominati dell'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the corresponding field types.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property or field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument, named property, or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Le matrici <paramref name="namedProperties" /> e di <paramref name="propertyValues" /> hanno lunghezze diverse.  
  
-oppure- 
Le matrici <paramref name="namedFields" /> e di <paramref name="fieldValues" /> hanno lunghezze diverse.  
  
-oppure- 
 Il parametro <paramref name="con" /> è statico o privato.  
  
-oppure- 
Il numero degli argomenti forniti non corrisponde al numero di parametri del costruttore richiesti dalla convenzione di chiamata del costruttore.  
  
-oppure- 
Il tipo degli argomenti forniti non corrisponde al tipo del parametro dichiarato nel costruttore.  
  
-oppure- 
I tipi dei valori delle proprietà non corrispondono ai tipi delle proprietà denominate.  
  
-oppure- 
I tipi dei valori dei campi non corrispondono ai tipi dei campi corrispondenti.  
  
-oppure- 
Una proprietà non ha un metodo di impostazione.  
  
-oppure- 
La proprietà o il campo non appartiene alla stessa classe o classe base del costruttore.  
  
-oppure- 
Un argomento fornito o una proprietà denominata o un campo denominato, è un tipo di riferimento diverso da <see cref="T:System.String" /> o <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Uno dei parametri è <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary vsli:raw="Generates Microsoft intermediate language (MSIL) instructions.">Genera istruzioni MSIL (Microsoft Intermediate Language).</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary vsli:raw="Begins a catch block.">Inizia un blocco catch.</summary>
      <param name="exceptionType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the exception.">Oggetto <see cref="T:System.Type" /> che rappresenta l'eccezione.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The catch block is within a filtered exception.">Il blocco catch si trova all'interno di un'eccezione filtrata.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.">
        <paramref name="exceptionType" /> è <see langword="null" /> e il blocco di filtro delle eccezioni non ha restituito un valore indicante che i blocchi devono essere eseguiti fino all'individuazione del blocco catch.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">Il flusso MSIL (Microsoft Intermediate Language) generato non si trova attualmente in un blocco di eccezioni.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary vsli:raw="Begins an exception block for a filtered exception.">Inizia un blocco di eccezioni per un'eccezione filtrata.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Il flusso MSIL (Microsoft Intermediate Language) generato non si trova attualmente in un blocco di eccezioni.  
  
-oppure- 
Questa classe <see cref="T:System.Reflection.Emit.ILGenerator" /> appartiene già a una classe <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary vsli:raw="Begins an exception block for a non-filtered exception.">Inizia un blocco di eccezioni per un'eccezione non filtrata.</summary>
      <returns vsli:raw="The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.">Etichetta per la fine del blocco. Tale etichetta definisce la posizione corretta per l'esecuzione dei blocchi finally o per terminare il blocco try.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary vsli:raw="Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.">Inizia un blocco di errori delle eccezioni nel flusso MSIL (Microsoft Intermediate Language).</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Il linguaggio MSIL generato non si trova attualmente in un blocco di eccezioni.  
  
-oppure- 
Questa classe <see cref="T:System.Reflection.Emit.ILGenerator" /> appartiene già a una classe <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary vsli:raw="Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.">Inizia un blocco finally nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.">Il linguaggio MSIL generato non si trova attualmente in un blocco di eccezioni.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary vsli:raw="Begins a lexical scope.">Inizia un ambito lessicale.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Questa classe <see cref="T:System.Reflection.Emit.ILGenerator" /> appartiene già a una classe <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary vsli:raw="Declares a local variable of the specified type.">Dichiara una variabile locale del tipo specificato.</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo della variabile locale.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Il tipo contenitore è stato creato dal metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
      <returns vsli:raw="The declared local variable.">Variabile locale dichiarata.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary vsli:raw="Declares a local variable of the specified type, optionally pinning the object referred to by the variable.">Dichiara una variabile locale del tipo specificato che facoltativamente può bloccare l'oggetto a cui fa riferimento la variabile.</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo della variabile locale.</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to pin the object in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per bloccare l'oggetto in memoria; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method body of the enclosing method has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)&quot; /&gt; method.">Il tipo contenitore è stato creato dal metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
  
-oppure- 
Il corpo del metodo contenitore è stato creato dal metodo <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The method with which this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; is associated is not represented by a &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">Il metodo a cui l'oggetto <see cref="T:System.Reflection.Emit.ILGenerator" /> è associato non è rappresentato da un oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.LocalBuilder&quot; /&gt; object that represents the local variable.">Oggetto <see cref="T:System.Reflection.Emit.LocalBuilder" /> che rappresenta la variabile locale.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary vsli:raw="Declares a new label.">Dichiara una nuova etichetta.</summary>
      <returns vsli:raw="A new label that can be used as a token for branching.">Nuova etichetta che può essere usata come token per la creazione di rami.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Puts the specified instruction onto the stream of instructions.">Inserisce l'istruzione specificata nel flusso di istruzioni.</summary>
      <param name="opcode" vsli:raw="The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.">Istruzione MSIL (Microsoft Intermediate Language) da inserire nel flusso.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Inserisce l'istruzione e l'argomento del carattere specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Istruzione MSIL da inserire nel flusso.</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">Argomento del carattere inserito nel flusso subito dopo l'istruzione.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Inserisce l'istruzione e l'argomento numerico specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream. Defined in the &lt;see langword=&quot;OpCodes&quot; /&gt; enumeration.">Istruzione MSIL da inserire nel flusso. definita nell'enumerazione <see langword="OpCodes" />.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Argomento numerico inserito nel flusso subito dopo l'istruzione.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Inserisce l'istruzione e l'argomento numerico specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Istruzione MSIL da emettere nel flusso.</param>
      <param name="arg" vsli:raw="The &lt;see langword=&quot;Int&quot; /&gt; argument pushed onto the stream immediately after the instruction.">Argomento <see langword="Int" /> inserito nel flusso subito dopo l'istruzione.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Inserisce l'istruzione e l'argomento numerico specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Istruzione MSIL da inserire nel flusso.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Argomento numerico inserito nel flusso subito dopo l'istruzione.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Inserisce l'istruzione e l'argomento numerico specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Istruzione MSIL da inserire nel flusso.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Argomento numerico inserito nel flusso subito dopo l'istruzione.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.">Inserisce l'istruzione e il token di metadati specificati per il costruttore indicato nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Istruzione MSIL da emettere nel flusso.</param>
      <param name="con" vsli:raw="A &lt;see langword=&quot;ConstructorInfo&quot; /&gt; representing a constructor.">
        <see langword="ConstructorInfo" /> che rappresenta un costruttore.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> è <see langword="null" />. Questa eccezione è nuova nell'oggetto .NET Framework 4.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language) e lascia spazio per includere un'etichetta dopo l'esecuzione delle correzioni.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Istruzione MSIL da emettere nel flusso.</param>
      <param name="label" vsli:raw="The label to which to branch from this location.">Etichetta per la quale creare un ramo dalla posizione in questione.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language) e lascia spazio per includere un'etichetta dopo l'esecuzione delle correzioni.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Istruzione MSIL da emettere nel flusso.</param>
      <param name="labels" vsli:raw="The array of label objects to which to branch from this location. All of the labels will be used.">Matrice di oggetti label per la quale creare un ramo dalla posizione in questione. Verranno utilizzate tutte le etichette.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> è <see langword="null" />. Questa eccezione è nuova nell'oggetto .NET Framework 4.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language), seguita dall'indice della variabile locale indicata.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Istruzione MSIL da emettere nel flusso.</param>
      <param name="local" vsli:raw="A local variable.">Una variabile locale.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parent method of the &lt;paramref name=&quot;local&quot; /&gt; parameter does not match the method associated with this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">Il metodo padre del parametro <paramref name="local" /> non corrisponde al metodo associato a tale <see cref="T:System.Reflection.Emit.ILGenerator" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;local&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="local" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; is a single-byte instruction, and &lt;paramref name=&quot;local&quot; /&gt; represents a local variable with an index greater than &lt;see langword=&quot;Byte.MaxValue&quot; /&gt;.">
        <paramref name="opcode" /> è un'istruzione a byte singolo e <paramref name="local" /> rappresenta una variabile locale con un indice maggiore di <see langword="Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary vsli:raw="Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.">Inserisce l'istruzione specificata e un token di firme nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Istruzione MSIL da emettere nel flusso.</param>
      <param name="signature" vsli:raw="A helper for constructing a signature token.">Supporto per la costruzione di un token di firme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;signature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="signature" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.">Inserisce l'istruzione e il token di metadati specificati per il campo indicato nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Istruzione MSIL da emettere nel flusso.</param>
      <param name="field" vsli:raw="A &lt;see langword=&quot;FieldInfo&quot; /&gt; representing a field.">
        <see langword="FieldInfo" /> che rappresenta un campo.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language), seguita dal token di metadati per il metodo indicato.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Istruzione MSIL da emettere nel flusso.</param>
      <param name="meth" vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; representing a method.">
        <see langword="MethodInfo" /> che rappresenta un metodo.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="meth" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is a generic method for which the &lt;see cref=&quot;P:System.Reflection.MethodBase.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="meth" /> è un metodo generico per il quale la proprietà <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Inserisce l'istruzione e l'argomento del carattere specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Istruzione MSIL da inserire nel flusso.</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">Argomento del carattere inserito nel flusso subito dopo l'istruzione.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Inserisce l'istruzione e l'argomento numerico specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Istruzione MSIL da inserire nel flusso.</param>
      <param name="arg" vsli:raw="The &lt;see cref=&quot;T:System.Single&quot; /&gt; argument pushed onto the stream immediately after the instruction.">Argomento <see cref="T:System.Single" /> inserito nel flusso subito dopo l'istruzione.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language), seguita dal token di metadati per la stringa indicata.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Istruzione MSIL da emettere nel flusso.</param>
      <param name="str" vsli:raw="The &lt;see langword=&quot;String&quot; /&gt; to be emitted.">Oggetto <see langword="String" /> da creare.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language), seguita dal token di metadati per il tipo indicato.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Istruzione MSIL da inserire nel flusso.</param>
      <param name="cls" vsli:raw="A &lt;see langword=&quot;Type&quot; /&gt;.">Oggetto <see langword="Type" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cls&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="cls" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary vsli:raw="Puts a &lt;see langword=&quot;call&quot; /&gt; or &lt;see langword=&quot;callvirt&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream to call a &lt;see langword=&quot;varargs&quot; /&gt; method.">Inserisce un'istruzione <see langword="call" /> o <see langword="callvirt" /> nel flusso MSIL (Microsoft Intermediate Language) per chiamare un metodo <see langword="varargs" />.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt;, &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Callvirt&quot; /&gt;, or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Newobj&quot; /&gt;.">Istruzione MSIL da emettere nel flusso. Deve essere <see cref="F:System.Reflection.Emit.OpCodes.Call" />, <see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /> o <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />.</param>
      <param name="methodInfo" vsli:raw="The &lt;see langword=&quot;varargs&quot; /&gt; method to be called.">Metodo <see langword="varargs" /> da chiamare.</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments if the method is a &lt;see langword=&quot;varargs&quot; /&gt; method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Tipi degli argomenti facoltativi se il metodo è un metodo <see langword="varargs" />; in caso contrario, <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; does not specify a method call.">Il parametro <paramref name="opcode" /> non specifica una chiamata al metodo.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfo&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfo" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The calling convention for the method is not &lt;see langword=&quot;varargs&quot; /&gt;, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.">La convenzione di chiamata per il metodo non è <see langword="varargs" />, ma vengono forniti tipi di parametro facoltativi. Questa eccezione viene generata nelle versioni 1.0 e 1.1 di .NET Framework. Nelle versioni successive non viene generata alcuna eccezione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.">Inserisce un'istruzione <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> nel flusso di istruzioni MSIL (Microsoft Intermediate Language), specificando una convenzione di chiamata gestita per la chiamata indiretta.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">Istruzione MSIL da emettere nel flusso. Deve essere <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</param>
      <param name="callingConvention" vsli:raw="The managed calling convention to be used.">Convenzione di chiamata gestita da utilizzare.</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">Oggetto <see cref="T:System.Type" /> del risultato.</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">Tipi di argomenti necessari per l'istruzione.</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments for &lt;see langword=&quot;varargs&quot; /&gt; calls.">Tipi di argomenti facoltativi per le chiamate a <see langword="varargs" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;optionalParameterTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, but &lt;paramref name=&quot;callingConvention&quot; /&gt; does not include the &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; flag.">
        <paramref name="optionalParameterTypes" /> non è <see langword="null" />, ma <paramref name="callingConvention" /> non include il flag <see cref="F:System.Reflection.CallingConventions.VarArgs" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.">Inserisce un'istruzione <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> nel flusso di istruzioni MSIL (Microsoft Intermediate Language), specificando una convenzione di chiamata non gestita per la chiamata indiretta.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">Istruzione MSIL da emettere nel flusso. Deve essere <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</param>
      <param name="unmanagedCallConv" vsli:raw="The unmanaged calling convention to be used.">Convenzione di chiamata non gestita da utilizzare.</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">Oggetto <see cref="T:System.Type" /> del risultato.</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">Tipi di argomenti necessari per l'istruzione.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given local variable.">Crea il linguaggio MSIL (Microsoft Intermediate Language) necessario per chiamare <see cref="Overload:System.Console.WriteLine" /> con la variabile locale specificata.</summary>
      <param name="localBuilder" vsli:raw="The local variable whose value is to be written to the console.">Variabile locale il cui valore deve essere scritto nella console.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of &lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.  &#xA;  &#xA; -or-  &#xA;  &#xA; There is no overload of &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; that accepts the type of &lt;paramref name=&quot;localBuilder&quot; /&gt;.">Il tipo di <paramref name="localBuilder" /> è <see cref="T:System.Reflection.Emit.TypeBuilder" /> o <see cref="T:System.Reflection.Emit.EnumBuilder" />, che non sono valori supportati.  
  
-oppure- 
Nessun overload di <see cref="Overload:System.Console.WriteLine" /> accetta il tipo di <paramref name="localBuilder" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localBuilder" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given field.">Crea il flusso MSIL (Microsoft Intermediate Language) necessario per chiamare il metodo <see cref="Overload:System.Console.WriteLine" /> con il campo indicato.</summary>
      <param name="fld" vsli:raw="The field whose value is to be written to the console.">Campo il cui valore deve essere scritto nella console.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There is no overload of the &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; method that accepts the type of the specified field.">Non è presente alcun overload del metodo <see cref="Overload:System.Console.WriteLine" /> che accetti il tipo del campo specificato.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fld&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fld" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type of the field is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.">Il tipo del campo è <see cref="T:System.Reflection.Emit.TypeBuilder" /> o <see cref="T:System.Reflection.Emit.EnumBuilder" />, oggetti non supportati.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with a string.">Crea il flusso MSIL (Microsoft Intermediate Language) necessario per chiamare il metodo <see cref="Overload:System.Console.WriteLine" /> con una stringa.</summary>
      <param name="value" vsli:raw="The string to be printed.">Stringa da stampare.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary vsli:raw="Ends an exception block.">Termina un blocco di eccezioni.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The end exception block occurs in an unexpected place in the code stream.">Il blocco di eccezioni finale si trova in una posizione non prevista nel flusso del codice.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">Il flusso MSIL (Microsoft Intermediate Language) generato non si trova attualmente in un blocco di eccezioni.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary vsli:raw="Ends a lexical scope.">Termina un ambito lessicale.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Questa classe <see cref="T:System.Reflection.Emit.ILGenerator" /> appartiene già a una classe <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary vsli:raw="Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.">Contrassegna la posizione corrente del flusso MSIL (Microsoft Intermediate Language) con l'etichetta indicata.</summary>
      <param name="loc" vsli:raw="The label for which to set an index.">Etichetta per la quale impostare un indice.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;loc&quot; /&gt; represents an invalid index into the label array.  &#xA;  &#xA; -or-  &#xA;  &#xA; An index for &lt;paramref name=&quot;loc&quot; /&gt; has already been defined.">
        <paramref name="loc" /> rappresenta un indice non valido nella matrice delle etichette.  
  
-oppure- 
È già stato definito un indice per <paramref name="loc" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary vsli:raw="Emits an instruction to throw an exception.">Crea un'istruzione per generare un'eccezione.</summary>
      <param name="excType" vsli:raw="The class of the type of exception to throw.">Classe del tipo di eccezione da generare.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is not the &lt;see cref=&quot;T:System.Exception&quot; /&gt; class or a derived class of &lt;see cref=&quot;T:System.Exception&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type does not have a parameterless constructor.">
        <paramref name="excType" /> non è la classe <see cref="T:System.Exception" /> né una classe derivata di <see cref="T:System.Exception" />.  
  
-oppure- 
Il tipo non dispone di un costruttore senza parametri.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="excType" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.">Specifica lo spazio dei nomi da utilizzare nella valutazione delle variabili locali e controlla l'ambito lessicale attualmente attivo.</summary>
      <param name="usingNamespace" vsli:raw="The namespace to be used in evaluating locals and watches for the current active lexical scope.">Specifica lo spazio dei nomi da utilizzare nella valutazione delle variabili locali e controlla l'ambito lessicale attualmente attivo.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;usingNamespace&quot; /&gt; is zero.">La lunghezza di <paramref name="usingNamespace" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;usingNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="usingNamespace" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Questa classe <see cref="T:System.Reflection.Emit.ILGenerator" /> appartiene già a una classe <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ILGenerator.ILOffset">
      <summary vsli:raw="Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">Ottiene l'offset corrente, in byte, nel flusso Microsoft Intermediate Language (MSIL) emesso dall'oggetto <see cref="T:System.Reflection.Emit.ILGenerator" />.</summary>
      <returns vsli:raw="The offset in the MSIL stream at which the next instruction will be emitted.">Offset nel flusso MSIL in corrispondenza del quale verrà emessa l'istruzione successiva.</returns>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary vsli:raw="Represents a label in the instruction stream. &lt;see langword=&quot;Label&quot; /&gt; is used in conjunction with the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class.">Rappresenta un'etichetta nel flusso di istruzioni. <see langword="Label" /> viene utilizzato insieme alla classe <see cref="T:System.Reflection.Emit.ILGenerator" />.</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary vsli:raw="Checks if the given object is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this instance.">Verifica se l'oggetto dato è un'istanza di <see langword="Label" /> e se è uguale a tale istanza.</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;Label&quot; /&gt; instance.">Oggetto da confrontare con questa istanza di <see langword="Label" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> è un'istanza di <see langword="Label" /> ed è uguale a questo oggetto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt;.">Indica se l'istanza corrente è uguale all'oggetto <see cref="T:System.Reflection.Emit.Label" /> specificato.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to the current instance.">Oggetto <see cref="T:System.Reflection.Emit.Label" /> da confrontare con l'istanza corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore di <paramref name="obj" /> è uguale al valore dell'istanza corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary vsli:raw="Generates a hash code for this instance.">Genera un codice hash per l'istanza.</summary>
      <returns vsli:raw="A hash code for this instance.">Codice hash per l'istanza.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are equal.">Indica se due strutture <see cref="T:System.Reflection.Emit.Label" /> sono uguali.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">Oggetto <see cref="T:System.Reflection.Emit.Label" /> da confrontare con <paramref name="b" />.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">Oggetto <see cref="T:System.Reflection.Emit.Label" /> da confrontare con <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="a" /> è uguale a <paramref name="b" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are not equal.">Indica se due strutture <see cref="T:System.Reflection.Emit.Label" /> non sono uguali.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">Oggetto <see cref="T:System.Reflection.Emit.Label" /> da confrontare con <paramref name="b" />.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">Oggetto <see cref="T:System.Reflection.Emit.Label" /> da confrontare con <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="a" /> non è uguale a <paramref name="b" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary vsli:raw="Represents a local variable within a method or constructor.">Rappresenta una variabile locale all'interno di un metodo o di un costruttore.</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary vsli:raw="Gets a value indicating whether the object referred to by the local variable is pinned in memory.">Ottiene un valore che indica se l'oggetto a cui fa riferimento la variabile locale è bloccato in memoria.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object referred to by the local variable is pinned in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto a cui fa riferimento la variabile locale è bloccato in memoria. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary vsli:raw="Gets the zero-based index of the local variable within the method body.">Ottiene l'indice in base zero della variabile locale all'interno del corpo del metodo.</summary>
      <returns vsli:raw="An integer value that represents the order of declaration of the local variable within the method body.">Integer che rappresenta l'ordine di dichiarazione della variabile locale all'interno del corpo del metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary vsli:raw="Gets the type of the local variable.">Ottiene il tipo della variabile locale.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the local variable.">Classe <see cref="T:System.Type" /> della variabile locale.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary vsli:raw="Creates or associates parameter information.">Crea o associa informazioni sui parametri.</summary>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of the parameter.">Imposta il valore predefinito del parametro.</summary>
      <param name="defaultValue" vsli:raw="The default value of this parameter.">Valore predefinito del parametro.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the parameter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">Il parametro non è tra i tipi supportati.  
  
-oppure- 
Il tipo di <paramref name="defaultValue" /> non corrisponde al tipo del parametro.  
  
-oppure- 
Il tipo del parametro è <see cref="T:System.Object" /> o un altro tipo di riferimento, <paramref name="defaultValue" /> non è <see langword="null" /> e il valore non può essere assegnato al tipo di riferimento.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Impostare un attributo personalizzato usando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this parameter.">Recupera gli attributi per questo parametro.</summary>
      <returns vsli:raw="Read-only. Retrieves the attributes for this parameter.">Di sola lettura. Recupera gli attributi per questo parametro.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary vsli:raw="Retrieves whether this is an input parameter.">Specifica se si tratta di un parametro di input.</summary>
      <returns vsli:raw="Read-only. Retrieves whether this is an input parameter.">Di sola lettura. Specifica se si tratta di un parametro di input.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary vsli:raw="Retrieves whether this parameter is optional.">Specifica se si tratta di un parametro facoltativo.</summary>
      <returns vsli:raw="Read-only. Specifies whether this parameter is optional.">Di sola lettura. Specifica se si tratta di un parametro facoltativo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary vsli:raw="Retrieves whether this parameter is an output parameter.">Specifica se si tratta di un parametro di output.</summary>
      <returns vsli:raw="Read-only. Retrieves whether this parameter is an output parameter.">Di sola lettura. Specifica se si tratta di un parametro di output.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary vsli:raw="Retrieves the name of this parameter.">Recupera il nome di questo parametro.</summary>
      <returns vsli:raw="Read-only. Retrieves the name of this parameter.">Di sola lettura. Recupera il nome di questo parametro.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary vsli:raw="Retrieves the signature position for this parameter.">Recupera la posizione della firma per questo parametro.</summary>
      <returns vsli:raw="Read-only. Retrieves the signature position for this parameter.">Di sola lettura. Recupera la posizione della firma per questo parametro.</returns>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary vsli:raw="Provides methods for building signatures.">Fornisce i metodi per la compilazione delle firme.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary vsli:raw="Adds an argument to the signature.">Aggiunge un argomento alla firma.</summary>
      <param name="clsArgument" vsli:raw="The type of the argument.">Il tipo di argomento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.">La firma è già stata terminata.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;clsArgument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="clsArgument" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary vsli:raw="Adds an argument of the specified type to the signature, specifying whether the argument is pinned.">Aggiunge un argomento del tipo specificato alla firma, indicando se l'argomento è bloccato.</summary>
      <param name="argument" vsli:raw="The argument type.">Tipo dell'argomento.</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the argument is pinned; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'argomento è bloccato. In caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Adds an argument to the signature, with the specified custom modifiers.">Aggiunge un argomento alla firma con i modificatori personalizzati specificati.</summary>
      <param name="argument" vsli:raw="The argument type.">Tipo dell'argomento.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresentano i modificatori personalizzati obbligatori per l'argomento, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se l'argomento non dispone di modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresentano i modificatori personalizzati facoltativi per l'argomento, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se l'argomento non dispone di modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> è <see langword="null" />.  
  
-oppure- 
Un elemento di <paramref name="requiredCustomModifiers" /> o <paramref name="optionalCustomModifiers" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.">La firma è già stata terminata.  
  
-oppure- 
Uno dei modificatori personalizzati specificati è un tipo di matrice.  
  
-oppure- 
Uno dei modificatori personalizzati specificati è un tipo generico aperto. In altre parole, la proprietà <see cref="P:System.Type.ContainsGenericParameters" /> è <see langword="true" /> per il modificatore personalizzato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a set of arguments to the signature, with the specified custom modifiers.">Aggiunge un gruppo di argomenti alla firma con i modificatori personalizzati specificati.</summary>
      <param name="arguments" vsli:raw="The types of the arguments to be added.">Tipi degli argomenti da aggiungere.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ciascuna matrice di tipi rappresenta i modificatori personalizzati obbligatori per l'argomento corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se un determinato argomento non dispone di modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun argomento dispone di modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ciascuna matrice di tipi rappresenta i modificatori personalizzati facoltativi per l'argomento corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se un determinato argomento non dispone di modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun argomento dispone di modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">Un elemento di <paramref name="arguments" /> è <see langword="null" />.  
  
-oppure- 
Uno dei modificatori personalizzati specificati è <see langword="null" />. <see langword="null" /> può tuttavia essere specificato per la matrice di modificatori personalizzati per qualsiasi argomento.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;arguments&quot; /&gt;.">La firma è già stata terminata.  
  
-oppure- 
Uno dei modificatori personalizzati specificati è un tipo di matrice.  
  
-oppure- 
Uno dei modificatori personalizzati specificati è un tipo generico aperto. In altre parole, la proprietà <see cref="P:System.Type.ContainsGenericParameters" /> è <see langword="true" /> per il modificatore personalizzato.  
  
-oppure- 
La dimensione di <paramref name="requiredCustomModifiers" /> o <paramref name="optionalCustomModifiers" /> non è uguale a quella di <paramref name="arguments" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary vsli:raw="Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.">Contrassegna la fine di una parte fissa di vararg. Viene utilizzato solo se il chiamante crea un sito per la chiamata della firma vararg.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary vsli:raw="Checks if this instance is equal to the given object.">Verifica se questa istanza è uguale all'oggetto specificato.</summary>
      <param name="obj" vsli:raw="The object with which this instance should be compared.">Oggetto da confrontare con l'istanza corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given object is a &lt;see langword=&quot;SignatureHelper&quot; /&gt; and represents the same signature; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto dato è un <see langword="SignatureHelper" /> e rappresenta la stessa firma. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a field.">Restituisce un supporto di firma per un campo.</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the field for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Modulo dinamico che contiene il campo per il quale è richiesto l'oggetto <see langword="SignatureHelper" />.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a field.">Oggetto <see langword="SignatureHelper" /> per un campo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary vsli:raw="Creates and returns a hash code for this instance.">Crea e restituisce un codice hash per questa istanza.</summary>
      <returns vsli:raw="The hash code based on the name.">Codice hash basato sul nome.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary vsli:raw="Returns a signature helper for a local variable.">Restituisce un supporto di firma per una variabile locale.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; for a local variable.">Oggetto <see cref="T:System.Reflection.Emit.SignatureHelper" /> per una variabile locale.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a local variable.">Restituisce un supporto di firma per una variabile locale.</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the local variable for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Modulo dinamico che contiene la variabile locale per la quale è richiesto l'oggetto <see langword="SignatureHelper" />.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a local variable.">Oggetto <see langword="SignatureHelper" /> per una variabile locale.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's calling convention and return type.">Restituisce un supporto di firma per un metodo, una volta specificati la convenzione di chiamata e il tipo restituito del metodo stesso.</summary>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convenzione di chiamata del metodo.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Tipo restituito del metodo oppure <see langword="null" /> per un tipo restituito void (procedura <see langword="Sub" /> in Visual Basic).</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">Oggetto <see langword="SignatureHelper" /> per un metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's module, calling convention, and return type.">Restituisce un helper di firma per un metodo, dati il modulo del metodo, la convenzione di chiamata e il tipo restituito.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> che contiene il metodo per il quale è richiesto <see langword="SignatureHelper" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convenzione di chiamata del metodo.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Tipo restituito del metodo oppure <see langword="null" /> per un tipo restituito void (procedura <see langword="Sub" /> in Visual Basic).</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> non è un oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">Oggetto <see langword="SignatureHelper" /> per un metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.">Restituisce un supporto di firma per un metodo con una convenzione di chiamata standard, una volta specificati il modulo, il tipo restituito e i tipi di argomento del metodo stesso.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> che contiene il metodo per il quale è richiesto <see langword="SignatureHelper" />.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Tipo restituito del metodo oppure <see langword="null" /> per un tipo restituito void (procedura <see langword="Sub" /> in Visual Basic).</param>
      <param name="parameterTypes" vsli:raw="The types of the arguments of the method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no arguments.">Tipi degli argomenti del metodo oppure <see langword="null" /> se il metodo non dispone di argomenti.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> è <see langword="null" />.  
  
-oppure- 
Un elemento di <paramref name="parameterTypes" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> non è un oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">Oggetto <see langword="SignatureHelper" /> per un metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.">Restituisce un supporto di firma per una proprietà, una volta specificato il modulo dinamico che contiene la proprietà, la convenzione di chiamata, il tipo di proprietà, gli argomenti della proprietà e i modificatori personalizzati relativi al tipo restituito e agli argomenti.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">Classe <see cref="T:System.Reflection.Emit.ModuleBuilder" /> che contiene la proprietà per la quale è richiesta la classe <see cref="T:System.Reflection.Emit.SignatureHelper" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">Convenzione di chiamata delle funzioni di accesso della proprietà.</param>
      <param name="returnType" vsli:raw="The property type.">Tipo della proprietà.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresentano i modificatori personalizzati obbligatori per il tipo restituito, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresentano i modificatori personalizzati opzionali per il tipo restituito, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Tipi degli argomenti della proprietà oppure <see langword="null" /> se la proprietà non dispone di argomenti.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ciascuna matrice di tipi rappresenta i modificatori personalizzati obbligatori per l'argomento corrispondente della proprietà. Se un determinato argomento non dispone di modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se la proprietà non dispone di argomenti oppure se nessun argomento dispone di modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ciascuna matrice di tipi rappresenta i modificatori personalizzati facoltativi per l'argomento corrispondente della proprietà. Se un determinato argomento non dispone di modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se la proprietà non dispone di argomenti oppure se nessun argomento dispone di modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> è <see langword="null" />.  
  
-oppure- 
Un elemento di <paramref name="parameterTypes" /> è <see langword="null" />.  
  
-oppure- 
Uno dei modificatori personalizzati specificati è <see langword="null" />. <see langword="null" /> può tuttavia essere specificato per la matrice di modificatori personalizzati per qualsiasi argomento.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">La firma è già stata terminata.  
  
-oppure- 
 <paramref name="mod" /> non è un oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" />.  
  
-oppure- 
Uno dei modificatori personalizzati specificati è un tipo di matrice.  
  
-oppure- 
Uno dei modificatori personalizzati specificati è un tipo generico aperto. In altre parole, la proprietà <see cref="P:System.Type.ContainsGenericParameters" /> è <see langword="true" /> per il modificatore personalizzato.  
  
-oppure- 
La dimensione di <paramref name="requiredParameterTypeCustomModifiers" /> o <paramref name="optionalParameterTypeCustomModifiers" /> non è uguale a quella di <paramref name="parameterTypes" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Oggetto <see cref="T:System.Reflection.Emit.SignatureHelper" /> per una proprietà.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.">Restituisce un supporto di firma per una proprietà, una volta specificato il modulo dinamico che contiene la proprietà, il tipo di proprietà e gli argomenti della proprietà.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">Classe <see cref="T:System.Reflection.Emit.ModuleBuilder" /> che contiene la proprietà per la quale è richiesta la classe <see cref="T:System.Reflection.Emit.SignatureHelper" />.</param>
      <param name="returnType" vsli:raw="The property type.">Tipo della proprietà.</param>
      <param name="parameterTypes" vsli:raw="The argument types, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Tipi degli argomenti oppure <see langword="null" /> se la proprietà non dispone di argomenti.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> è <see langword="null" />.  
  
-oppure- 
Un elemento di <paramref name="parameterTypes" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> non è un oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Oggetto <see cref="T:System.Reflection.Emit.SignatureHelper" /> per una proprietà.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.">Restituisce un supporto di firma per una proprietà, una volta specificato il modulo dinamico che contiene la proprietà, il tipo di proprietà, gli argomenti della proprietà e i modificatori personalizzati relativi al tipo restituito e agli argomenti.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">Classe <see cref="T:System.Reflection.Emit.ModuleBuilder" /> che contiene la proprietà per la quale è richiesta la classe <see cref="T:System.Reflection.Emit.SignatureHelper" />.</param>
      <param name="returnType" vsli:raw="The property type.">Tipo della proprietà.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresentano i modificatori personalizzati obbligatori per il tipo restituito, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresentano i modificatori personalizzati opzionali per il tipo restituito, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Tipi degli argomenti della proprietà oppure <see langword="null" /> se la proprietà non dispone di argomenti.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ciascuna matrice di tipi rappresenta i modificatori personalizzati obbligatori per l'argomento corrispondente della proprietà. Se un determinato argomento non dispone di modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se la proprietà non dispone di argomenti oppure se nessun argomento dispone di modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ciascuna matrice di tipi rappresenta i modificatori personalizzati facoltativi per l'argomento corrispondente della proprietà. Se un determinato argomento non dispone di modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se la proprietà non dispone di argomenti oppure se nessun argomento dispone di modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> è <see langword="null" />.  
  
-oppure- 
Un elemento di <paramref name="parameterTypes" /> è <see langword="null" />.  
  
-oppure- 
Uno dei modificatori personalizzati specificati è <see langword="null" />. <see langword="null" /> può tuttavia essere specificato per la matrice di modificatori personalizzati per qualsiasi argomento.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">La firma è già stata terminata.  
  
-oppure- 
 <paramref name="mod" /> non è un oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" />.  
  
-oppure- 
Uno dei modificatori personalizzati specificati è un tipo di matrice.  
  
-oppure- 
Uno dei modificatori personalizzati specificati è un tipo generico aperto. In altre parole, la proprietà <see cref="P:System.Type.ContainsGenericParameters" /> è <see langword="true" /> per il modificatore personalizzato.  
  
-oppure- 
La dimensione di <paramref name="requiredParameterTypeCustomModifiers" /> o <paramref name="optionalParameterTypeCustomModifiers" /> non è uguale a quella di <paramref name="parameterTypes" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Oggetto <see cref="T:System.Reflection.Emit.SignatureHelper" /> per una proprietà.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary vsli:raw="Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.">Aggiunge il token finale alla firma e contrassegna la firma come completa, in modo che non sia possibile aggiungervi altri token.</summary>
      <returns vsli:raw="A byte array made up of the full signature.">Matrice di byte costituita dalla firma completa.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary vsli:raw="Returns a string representing the signature arguments.">Restituisce una stringa che rappresenta gli argomenti di firma.</summary>
      <returns vsli:raw="A string representing the arguments of this signature.">Stringa che rappresenta gli argomenti di questa firma.</returns>
    </member>
  </members>
</doc>
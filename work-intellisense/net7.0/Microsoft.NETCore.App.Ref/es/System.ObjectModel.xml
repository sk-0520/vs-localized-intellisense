<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ObjectModel</name>
  </assembly>
  <members>
    <member name="T:System.Collections.ObjectModel.KeyedCollection`2">
      <summary vsli:raw="Provides the abstract base class for a collection whose keys are embedded in the values.">Proporciona la clase base abstracta para una colección en la que sus claves están incrustadas en los valores.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the collection.">Tipo de claves de la colección.</typeparam>
      <typeparam name="TItem" vsli:raw="The type of items in the collection.">Tipo de elementos de la colección.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; class that uses the default equality comparer.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> que utiliza el comparador de igualdad predeterminado.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; class that uses the specified equality comparer.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> que utiliza el comparador de igualdad especificado.</summary>
      <param name="comparer" vsli:raw="The implementation of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default equality comparer for the type of the key, obtained from &lt;see cref=&quot;P:System.Collections.Generic.EqualityComparer`1.Default&quot; /&gt;.">Implementación de la interfaz genérica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a usar al comparar claves, o <see langword="null" /> para usar el comparador de igualdad predeterminado para el tipo de clave, que se obtiene de <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> que utiliza el comparador de igualdad especificado y crea un diccionario de búsqueda cuando se supera el umbral especificado.</summary>
      <param name="comparer" vsli:raw="The implementation of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default equality comparer for the type of the key, obtained from &lt;see cref=&quot;P:System.Collections.Generic.EqualityComparer`1.Default&quot; /&gt;.">Implementación de la interfaz genérica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a usar al comparar claves, o <see langword="null" /> para usar el comparador de igualdad predeterminado para el tipo de clave, que se obtiene de <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
      <param name="dictionaryCreationThreshold" vsli:raw="The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or -1 to specify that a lookup dictionary is never created.">Número de elementos que puede contener la colección sin crear un diccionario de búsqueda (0 crea el diccionario de búsqueda al agregar el primer elemento), o -1 para especificar que nunca se crea un diccionario de búsqueda.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;dictionaryCreationThreshold&quot; /&gt; is less than -1.">
        <paramref name="dictionaryCreationThreshold" /> es menor que 1.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
      <summary vsli:raw="Changes the key associated with the specified element in the lookup dictionary.">Cambia la clave asociada al elemento especificado en el diccionario de búsqueda.</summary>
      <param name="item" vsli:raw="The element to change the key of.">Elemento cuya clave se va a cambiar.</param>
      <param name="newKey" vsli:raw="The new key for &lt;paramref name=&quot;item&quot; /&gt;.">Nueva clave para <paramref name="item" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="item" /> es <see langword="null" />.  
  
o bien 
 <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is not found.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;key&quot; /&gt; already exists in the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">No se ha encontrado <paramref name="item" />.  
  
o bien 
 <paramref name="key" /> ya existe en <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">Quita todos los elementos de <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
      <summary vsli:raw="Determines whether the collection contains an element with the specified key.">Determina si la colección contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">Clave que se buscará en <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
      <summary vsli:raw="When implemented in a derived class, extracts the key from the specified element.">Cuando se implementa en una clase derivada, extrae la clave del elemento especificado.</summary>
      <param name="item" vsli:raw="The element from which to extract the key.">Elemento del que se va a extraer la clave.</param>
      <returns vsli:raw="The key for the specified element.">Clave para el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary vsli:raw="Inserts an element into the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; at the specified index.">Inserta un elemento en <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to insert.">Objeto que se va a insertar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">
        <paramref name="index" /> es menor que 0.  
  
o bien 
 <paramref name="index" /> es mayor que <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">Quita el elemento con la clave especificada de <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">Es <see langword="true" /> si el elemento se quita correctamente; en caso contrario, es <see langword="false" />.  Este método también devuelve <see langword="false" /> si no se encuentra <paramref name="key" /> en <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">Quita el elemento situado en el índice especificado de <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Índice del elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Reemplaza el elemento situado en el índice determinado con el elemento especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to be replaced.">Índice de base cero del elemento que se va a reemplazar.</param>
      <param name="item" vsli:raw="The new item.">Nuevo elemento.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Tries to get an item from the collection using the specified key.">Intenta obtener un elemento de la colección mediante la clave especificada.</summary>
      <param name="key" vsli:raw="The key of the item to search in the collection.">Clave del elemento que se va a buscar en la colección.</param>
      <param name="item" vsli:raw="When this method returns &lt;see langword=&quot;true&quot; /&gt;, the item from the collection that matches the provided key; when this method returns &lt;see langword=&quot;false&quot; /&gt;, the &lt;see langword=&quot;default&quot; /&gt; value for the type of the collection.">Cuando este método devuelve <see langword="true" />, corresponde al elemento de la colección que coincide con la clave proporcionada; cuando devuelve <see langword="false" />, es el valor <see langword="default" /> para el tipo de la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item for the specified key was found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se ha encontrado en la colección un elemento con la clave especificada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
      <summary vsli:raw="Gets the generic equality comparer that is used to determine equality of keys in the collection.">Obtiene el comparador de igualdad genérico que se utiliza para determinar la igualdad de claves en la colección.</summary>
      <returns vsli:raw="The implementation of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface that is used to determine equality of keys in the collection.">Implementación de la interfaz genérica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se utiliza para determinar la igualdad de claves en la colección.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
      <summary vsli:raw="Gets the lookup dictionary of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">Obtiene el diccionario de búsqueda de <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <returns vsli:raw="The lookup dictionary of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;, if it exists; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Diccionario de búsqueda de <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, si existe; de lo contrario, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
      <summary vsli:raw="Gets the element with the specified key.">Obtiene el elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key of the element to get.">Clave del elemento que se va a obtener.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="An element with the specified key does not exist in the collection.">En la colección no existe ningún elemento con la clave especificada.</exception>
      <returns vsli:raw="The element with the specified key. If an element with the specified key is not found, an exception is thrown.">El elemento con la clave especificada. Si no se encuentra un elemento con la clave especificada, se produce una excepción.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary vsli:raw="Represents a dynamic data collection that provides notifications when items get added or removed, or when the whole list is refreshed.">Representa una colección de datos dinámicos que proporciona notificaciones cuando se agregan o quitan elementos, o cuando se actualiza la lista completa.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the collection.">Tipo de los elementos de la colección.</typeparam>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary vsli:raw="Occurs when an item is added, removed, or moved, or the entire list is refreshed.">Se produce cuando un elemento se agrega, se elimina, se cambiar o se mueve, o bien se actualiza toda la lista.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">Tiene lugar cuando cambia un valor de propiedad.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">Tiene lugar cuando cambia un valor de propiedad.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; class that contains elements copied from the specified collection.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> que contiene los elementos copiados de la colección especificada.</summary>
      <param name="collection" vsli:raw="The collection from which the elements are copied.">Colección de la que se copian los elementos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="collection" /> no puede ser <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; class that contains elements copied from the specified list.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> que contiene elementos copiados de la lista especificada.</summary>
      <param name="list" vsli:raw="The list from which the elements are copied.">Lista de la que se copian los elementos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;list&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="list" /> no puede ser <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary vsli:raw="Disallows reentrant attempts to change this collection.">No permite intentos reentrantes para cambiar esta colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; object that can be used to dispose of the object.">Objeto <see cref="T:System.IDisposable" /> que se puede usar para desechar el objeto.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary vsli:raw="Checks for reentrant attempts to change this collection.">Comprueba si se producen intentos reentrantes para cambiar esta colección.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If there was a call to &lt;see cref=&quot;M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy&quot; /&gt; of which the &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; return value has not yet been disposed of. Typically, this means when there are additional attempts to change this collection during a &lt;see cref=&quot;E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged&quot; /&gt; event. However, it depends on when derived classes choose to call &lt;see cref=&quot;M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy&quot; /&gt;.">Si se produjo una llamada a <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> cuyo valor devuelto <see cref="T:System.IDisposable" /> aún no se ha eliminado. Normalmente, esto indica cuando se producen intentos adicionales para cambiar esta colección durante un evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. Sin embargo, depende de cuándo las clases derivadas decidan llamar a <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary vsli:raw="Removes all items from the collection.">Quita todos los elementos de la colección.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">Inserta un elemento en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to insert.">Objeto que se va a insertar.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary vsli:raw="Moves the item at the specified index to a new location in the collection.">Mueve el elemento que se encuentra en el índice especificado a otra ubicación de la colección.</summary>
      <param name="oldIndex" vsli:raw="The zero-based index specifying the location of the item to be moved.">Índice de base cero que especifica la ubicación del elemento que se va a mover.</param>
      <param name="newIndex" vsli:raw="The zero-based index specifying the new location of the item.">Índice de base cero que especifica la nueva ubicación del elemento.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary vsli:raw="Moves the item at the specified index to a new location in the collection.">Mueve el elemento que se encuentra en el índice especificado a otra ubicación de la colección.</summary>
      <param name="oldIndex" vsli:raw="The zero-based index specifying the location of the item to be moved.">Índice de base cero que especifica la ubicación del elemento que se va a mover.</param>
      <param name="newIndex" vsli:raw="The zero-based index specifying the new location of the item.">Índice de base cero que especifica la nueva ubicación del elemento.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged&quot; /&gt; event with the provided arguments.">Genera el evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> con los argumentos proporcionados.</summary>
      <param name="e" vsli:raw="Arguments of the event being raised.">Argumentos del evento que se está generando.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged&quot; /&gt; event with the provided arguments.">Genera el evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> con los argumentos proporcionados.</summary>
      <param name="e" vsli:raw="Arguments of the event being raised.">Argumentos del evento que se está generando.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the collection.">Quita el elemento situado en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Índice de base cero del elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the element at the specified index.">Reemplaza el elemento en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to replace.">Índice de base cero del elemento que se va a reemplazar.</param>
      <param name="item" vsli:raw="The new value for the element at the specified index.">El nuevo valor del elemento en el índice especificado.</param>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2">
      <summary>Representa una colección genérica de solo lectura de pares clave-valor.</summary>
      <typeparam name="TKey">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores del diccionario.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> que es un contenedor para el diccionario especificado.</summary>
      <param name="dictionary">Diccionario que se va a ajustar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>Determina si el diccionario contiene un elemento con la clave especificada.</summary>
      <param name="key">Clave que se debe buscar en el diccionario.</param>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento que tiene la clave especificada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <param name="item">Objeto que se agrega al diccionario.</param>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina si el diccionario contiene un valor específico.</summary>
      <param name="item">Objeto que se va a buscar en el diccionario.</param>
      <returns>
        <see langword="true" /> si el objeto <paramref name="item" /> está en el diccionario; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copia los elementos del diccionario en una matriz, comenzando en el índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.
              
o bien 
El número de elementos del diccionario de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de la <paramref name="array" /> de destino.
              
o bien 
El tipo <paramref name="T" /> no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <param name="item">Objeto que se va a quitar del diccionario.</param>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
      <returns>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <param name="key">Objeto que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value">El objeto que se va a usar como valor del elemento que se va a agregar.</param>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
      <returns>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos del diccionario en una matriz, comenzando en el índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.  
  
o bien 
El número de elementos del diccionario de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.  
  
o bien 
El tipo del diccionario de origen no puede convertirse automáticamente en el tipo de destino<paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <param name="key">Clave del elemento que se va a agregar.</param>
      <param name="value">Valor del elemento que se va a agregar.</param>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina si el diccionario contiene un elemento con la clave especificada.</summary>
      <param name="key">Clave que se debe buscar en el diccionario.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento que tiene la clave especificada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Devuelve un enumerador para el diccionario.</summary>
      <returns>Enumerador del diccionario.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>Recupera el valor que está asociado a la clave especificada.</summary>
      <param name="key">Clave cuyo valor se va a recuperar.</param>
      <param name="value">Cuando este método devuelve el resultado, el valor asociado a la clave especificada, si se encuentra la clave; en caso contrario, el valor predeterminado para el tipo del parámetro <paramref name="value" />. Este parámetro se pasa sin inicializar.</param>
      <returns>Es <see langword="true" /> si el objeto que implementa <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> contiene un elemento con la clave especificada; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Count">
      <summary>Obtiene el número de elementos del diccionario.</summary>
      <returns>Número de elementos del diccionario.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Dictionary">
      <summary>Obtiene el diccionario que está encapsulado por este objeto <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <returns>Diccionario que está contenido por este objeto.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)">
      <summary>Obtiene el elemento que tiene la clave especificada.</summary>
      <param name="key">Clave del elemento que se va a obtener.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La propiedad se recupera, pero <paramref name="key" /> no se encuentra.</exception>
      <returns>Elemento que tiene la clave especificada.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys">
      <summary>Obtiene una colección de claves que contiene las claves del diccionario.</summary>
      <returns>Colección de claves que contiene las claves del diccionario.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Obtiene un valor que indica si el diccionario es de solo lectura.</summary>
      <returns>Siempre devuelve <see langword="true" /> para indicar que el diccionario es de solo lectura.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>Obtiene el elemento que tiene la clave especificada.</summary>
      <param name="key">La clave del elemento que se obtiene o establece.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La propiedad se recupera, pero <paramref name="key" /> no se encuentra.</exception>
      <exception cref="T:System.NotSupportedException">La propiedad se establece.</exception>
      <returns>Elemento que tiene la clave especificada.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Obtiene una colección que contiene las claves del diccionario.</summary>
      <returns>Colección que contiene las claves del objeto que implementa la interfaz <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Obtiene una colección que contiene los valores del diccionario.</summary>
      <returns>Colección que contiene los valores del objeto que implementa la interfaz <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>Obtiene una colección enumerable que contiene las claves del diccionario de solo lectura.</summary>
      <returns>Colección enumerable que contiene las claves del diccionario de solo lectura.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>Obtiene una colección enumerable que contiene los valores del diccionario de solo lectura.</summary>
      <returns>Colección enumerable que contiene los valores del diccionario de solo lectura.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso al diccionario está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>
        <see langword="true" /> si el acceso al diccionario está sincronizado (es seguro para la ejecución de subprocesos); en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso al diccionario.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso al diccionario.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtiene un valor que indica si el diccionario tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si el diccionario tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtiene un valor que indica si el diccionario es de solo lectura.</summary>
      <returns>
        <see langword="true" /> en todos los casos.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtiene el elemento que tiene la clave especificada.</summary>
      <param name="key">La clave del elemento que se obtiene o establece.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La propiedad se establece.  
  
o bien 
La propiedad está establecida, <paramref name="key" /> no existe en la colección y el diccionario tiene un tamaño fijo.</exception>
      <returns>Elemento que tiene la clave especificada.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtiene una colección que contiene las claves del diccionario.</summary>
      <returns>Colección que contiene las claves del diccionario.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtiene una colección que contiene los valores del diccionario.</summary>
      <returns>Colección que contiene los valores del diccionario.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Values">
      <summary>Obtiene una colección que contiene los valores del diccionario.</summary>
      <returns>Colección que contiene los valores del objeto que implementa la interfaz <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection">
      <summary>Representa una colección de solo lectura de las claves de un objeto <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copia los elementos de la colección en una matriz, que empieza en un índice de matriz específico.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados de la colección. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.  
  
o bien 
El número de elementos de la colección de origen es mayor que el espacio disponible en <paramref name="arrayIndex" /> hasta el final del objeto <paramref name="array" /> de destino.  
  
o bien 
El tipo <paramref name="T" /> no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <param name="item">El objeto que se va a agregar a la colección.</param>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Determina si la colección contiene un valor concreto.</summary>
      <param name="item">Objeto que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se encuentra en la colección; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <param name="item">Objeto que se quitará de la colección.</param>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
      <returns>Es <see langword="true" /> si <paramref name="item" /> se quitó correctamente de la colección; de lo contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si <paramref name="item" /> no se encuentra en la colección original.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de la colección en una matriz, que empieza en un índice de matriz específico.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados de la colección. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.  
  
o bien 
El número de elementos de la colección de origen es mayor que el espacio disponible en <paramref name="index" /> hasta el final del objeto <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count">
      <summary>Obtiene el número de elementos de la colección.</summary>
      <returns>Número de elementos de la colección.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>Obtiene un valor que indica si el diccionario es de solo lectura.</summary>
      <returns>
        <see langword="true" /> en todos los casos.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>Es <see langword="true" /> si el acceso a la colección está sincronizado (seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede usar para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection">
      <summary>Representa una colección de solo lectura de los valores de un objeto <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copia los elementos de la colección en una matriz, que empieza en un índice de matriz específico.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados de la colección. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.  
  
o bien 
El número de elementos de la colección de origen es mayor que el espacio disponible en <paramref name="arrayIndex" /> hasta el final del objeto <paramref name="array" /> de destino.  
  
o bien 
El tipo <paramref name="T" /> no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <param name="item">El objeto que se va a agregar a la colección.</param>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>Determina si la colección contiene un valor concreto.</summary>
      <param name="item">Objeto que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se encuentra en la colección; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>Se produce una excepción <see cref="T:System.NotSupportedException" /> en todos los casos.</summary>
      <param name="item">Objeto que se quitará de la colección.</param>
      <exception cref="T:System.NotSupportedException">En todos los casos.</exception>
      <returns>Es <see langword="true" /> si <paramref name="item" /> se quitó correctamente de la colección; de lo contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si el elemento no se encuentra en la colección original.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de la colección en una matriz, que empieza en un índice de matriz específico.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados de la colección. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.  
  
o bien 
El número de elementos de la colección de origen es mayor que el espacio disponible en <paramref name="index" /> hasta el final del objeto <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.Count">
      <summary>Obtiene el número de elementos de la colección.</summary>
      <returns>Número de elementos de la colección.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>
        <see langword="true" /> en todos los casos.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>Es <see langword="true" /> si el acceso a la colección está sincronizado (seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede usar para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary vsli:raw="Represents a read-only &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt;.">Representa un objeto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> de solo lectura.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the collection.">Tipo de los elementos de la colección.</typeparam>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary vsli:raw="Occurs when an item is added or removed.">Tiene lugar cuando se agrega o quita un elemento.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">Tiene lugar cuando cambia un valor de propiedad.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary vsli:raw="Occurs when the collection changes.">Aparece cuando cambia la colección.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">Tiene lugar cuando cambia un valor de propiedad.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1&quot; /&gt; class that serves as a wrapper around the specified &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> que sirve de contenedor para la <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> especificada.</summary>
      <param name="list" vsli:raw="The &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; with which to create this instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1&quot; /&gt; class.">
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> con la que se va a crear esta instancia de la clase <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;list&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="list" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged&quot; /&gt; event using the provided arguments.">Genera el evento <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> con los argumentos proporcionados.</summary>
      <param name="args" vsli:raw="Arguments of the event being raised.">Argumentos del evento que se está generando.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged&quot; /&gt; event using the provided arguments.">Genera el evento <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> con los argumentos proporcionados.</summary>
      <param name="args" vsli:raw="Arguments of the event being raised.">Argumentos del evento que se está generando.</param>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary vsli:raw="Notifies listeners of dynamic changes, such as when an item is added and removed or the whole list is cleared.">Notifica a los agentes de escucha los cambios dinámicos, como cuando se agrega o quita un elemento, o se borra toda la lista.</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary vsli:raw="Occurs when the collection changes.">Aparece cuando cambia la colección.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary vsli:raw="Describes the action that caused a &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">Describe la acción que provocó un evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary vsli:raw="An item was added to the collection.">Se agregó un elemento a la colección.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary vsli:raw="An item was moved within the collection.">Se movió un elemento dentro de la colección.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary vsli:raw="An item was removed from the collection.">Se quitó un elemento de la colección.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary vsli:raw="An item was replaced in the collection.">Se reemplazó un elemento de la colección.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary vsli:raw="The contents of the collection changed dramatically.">El contenido de la colección ha cambiado considerablemente.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">Proporciona datos para el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt; change.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</summary>
      <param name="action" vsli:raw="The action that caused the event. This must be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;.">Acción que causó el evento. Debe establecerse en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item change.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio de varios elementos.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">Acción que causó el evento. Se puede establecer en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems" vsli:raw="The items that are affected by the change.">Elementos afectados por el cambio.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de varios elementos.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">Acción que causó el evento. Solo se puede establecer en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems" vsli:raw="The new items that are replacing the original items.">Nuevos elementos que reemplazan a los originales.</param>
      <param name="oldItems" vsli:raw="The original items that are replaced.">Elementos originales reemplazados.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">Si <paramref name="action" /> no es Replace.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="If &lt;paramref name=&quot;oldItems&quot; /&gt; or &lt;paramref name=&quot;newItems&quot; /&gt; is null.">Si <paramref name="oldItems" /> o <paramref name="newItems" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de varios elementos.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">Acción que causó el evento. Solo se puede establecer en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems" vsli:raw="The new items that are replacing the original items.">Nuevos elementos que reemplazan a los originales.</param>
      <param name="oldItems" vsli:raw="The original items that are replaced.">Elementos originales reemplazados.</param>
      <param name="startingIndex" vsli:raw="The index of the first item of the items that are being replaced.">Índice del primer elemento del conjunto de elementos que reemplaza.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">Si <paramref name="action" /> no es Replace.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="If &lt;paramref name=&quot;oldItems&quot; /&gt; or &lt;paramref name=&quot;newItems&quot; /&gt; is null.">Si <paramref name="oldItems" /> o <paramref name="newItems" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item change or a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt; change.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio de varios elementos o un cambio de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">Acción que causó el evento. Se puede establecer en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems" vsli:raw="The items affected by the change.">Elementos afectados por el cambio.</param>
      <param name="startingIndex" vsli:raw="The index where the change occurred.">Índice donde se produjo el cambio.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Reset, Add, or Remove, if &lt;paramref name=&quot;action&quot; /&gt; is Reset and either &lt;paramref name=&quot;changedItems&quot; /&gt; is not null or &lt;paramref name=&quot;startingIndex&quot; /&gt; is not -1, or if action is Add or Remove and &lt;paramref name=&quot;startingIndex&quot; /&gt; is less than -1.">Si <paramref name="action" /> no es Reset, Add o Remove, si <paramref name="action" /> es Reset y cualquier <paramref name="changedItems" /> no es null o <paramref name="startingIndex" /> no es -1, o si la acción es Add o Remove y <paramref name="startingIndex" /> es menor que -1.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is Add or Remove and &lt;paramref name=&quot;changedItems&quot; /&gt; is null.">Si <paramref name="action" /> es Add o Remove y <paramref name="changedItems" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt; change.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> de varios elementos.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;.">Acción que causó el evento. Solo se puede establecer en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItems" vsli:raw="The items affected by the change.">Elementos afectados por el cambio.</param>
      <param name="index" vsli:raw="The new index for the changed items.">Nuevo índice de los elementos modificados.</param>
      <param name="oldIndex" vsli:raw="The old index for the changed items.">Índice antiguo de los elementos modificados.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Move or &lt;paramref name=&quot;index&quot; /&gt; is less than 0.">Si <paramref name="action" /> no es Move o <paramref name="index" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item change.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio de un solo elemento.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">Acción que causó el evento. Se puede establecer en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItem" vsli:raw="The item that is affected by the change.">Elemento que se ve afectado por el cambio.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Reset, Add, or Remove, or if &lt;paramref name=&quot;action&quot; /&gt; is Reset and &lt;paramref name=&quot;changedItem&quot; /&gt; is not null.">Si <paramref name="action" /> no es Reset, Add o Remove, o si <paramref name="action" /> es Reset y <paramref name="changedItem" /> no es null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item change.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio de un solo elemento.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">Acción que causó el evento. Se puede establecer en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItem" vsli:raw="The item that is affected by the change.">Elemento que se ve afectado por el cambio.</param>
      <param name="index" vsli:raw="The index where the change occurred.">Índice donde se produjo el cambio.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Reset, Add, or Remove, or if &lt;paramref name=&quot;action&quot; /&gt; is Reset and either &lt;paramref name=&quot;changedItems&quot; /&gt; is not null or &lt;paramref name=&quot;index&quot; /&gt; is not -1.">Si el valor del parámetro <paramref name="action" /> no es Reset, Add o Remove o si <paramref name="action" /> es Reset y <paramref name="changedItems" /> no es null o <paramref name="index" /> no es -1.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt; change.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> de un elemento.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;.">Acción que causó el evento. Solo se puede establecer en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItem" vsli:raw="The item affected by the change.">Elemento afectado por el cambio.</param>
      <param name="index" vsli:raw="The new index for the changed item.">Nuevo índice del elemento modificado.</param>
      <param name="oldIndex" vsli:raw="The old index for the changed item.">Índice antiguo del elemento modificado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Move or &lt;paramref name=&quot;index&quot; /&gt; is less than 0.">Si <paramref name="action" /> no es Move o <paramref name="index" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de un elemento.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">Acción que causó el evento. Solo se puede establecer en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItem" vsli:raw="The new item that is replacing the original item.">Nuevo elemento que reemplaza al original.</param>
      <param name="oldItem" vsli:raw="The original item that is replaced.">Elemento original que se reemplaza.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">Si <paramref name="action" /> no es Replace.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de un elemento.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">Acción que causó el evento. Se puede establecer en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItem" vsli:raw="The new item that is replacing the original item.">Nuevo elemento que reemplaza al original.</param>
      <param name="oldItem" vsli:raw="The original item that is replaced.">Elemento original que se reemplaza.</param>
      <param name="index" vsli:raw="The index of the item being replaced.">Índice del elemento que se está reemplazando.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">Si <paramref name="action" /> no es Replace.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary vsli:raw="Gets the action that caused the event.">Obtiene la acción que provocó el evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedAction&quot; /&gt; value that describes the action that caused the event.">Valor <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> que describe la acción que provocó el evento.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary vsli:raw="Gets the list of new items involved in the change.">Obtiene la lista de nuevos elementos implicados en el cambio.</summary>
      <returns vsli:raw="The list of new items involved in the change.">Lista de nuevos elementos implicados en el cambio.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary vsli:raw="Gets the index at which the change occurred.">Obtiene el índice donde se produjo el cambio.</summary>
      <returns vsli:raw="The zero-based index at which the change occurred.">Índice de base cero donde se produjo el cambio.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary vsli:raw="Gets the list of items affected by a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;, Remove, or Move action.">Obtiene la lista de elementos a los que les afecta una acción <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />, Remove o Move.</summary>
      <returns vsli:raw="The list of items affected by a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;, Remove, or Move action.">Lista de elementos a los que les afecta una acción <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />, Remove o Move.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary vsli:raw="Gets the index at which a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;, Remove, or Replace action occurred.">Obtiene el índice donde se produjo una acción <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />, Remove o Replace.</summary>
      <returns vsli:raw="The zero-based index at which a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;, Remove, or Replace action occurred.">Índice de base cero donde se produjo una acción <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />, Remove o Replace.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">Representa el método que controla el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
      <param name="sender" vsli:raw="The object that raised the event.">El objeto que ha generado el evento.</param>
      <param name="e" vsli:raw="Information about the event.">Información acerca del evento.</param>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">Proporciona datos para el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataErrorsChangedEventArgs&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property that has an error.  &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the error is object-level.">Nombre de la propiedad que tiene un error.  <see langword="null" /> o <see cref="F:System.String.Empty" /> si el error es de nivel de objeto.</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary vsli:raw="Gets the name of the property that has an error.">Obtiene el nombre de la propiedad que tiene un error.</summary>
      <returns vsli:raw="The name of the property that has an error. &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the error is object-level.">Nombre de la propiedad que tiene un error. <see langword="null" /> o <see cref="F:System.String.Empty" /> si el error es de nivel de objeto.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary vsli:raw="Defines members that data entity classes can implement to provide custom synchronous and asynchronous validation support.">Define los miembros que las clases de entidad de datos pueden implementar para proporcionar compatibilidad de validación personalizada sincrónica y asincrónica.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary vsli:raw="Occurs when the validation errors have changed for a property or for the entire entity.">Se produce cuando los errores de validación han cambiado para una propiedad o para la toda la entidad.</summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary vsli:raw="Gets the validation errors for a specified property or for the entire entity.">Obtiene los errores de validación para una propiedad específica o para toda la entidad.</summary>
      <param name="propertyName" vsli:raw="The name of the property to retrieve validation errors for; or &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;, to retrieve entity-level errors.">Nombre de la propiedad para recuperar errores de validación; o bien, <see langword="null" /> o <see cref="F:System.String.Empty" /> para recuperar errores de nivel de entidad.</param>
      <returns vsli:raw="The validation errors for the property or entity.">Errores de validación para la propiedad o entidad.</returns>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary vsli:raw="Gets a value that indicates whether the entity has validation errors.">Obtiene un valor que indica si la entidad tiene errores de validación.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entity currently has validation errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la entidad tiene errores de validación en estos momentos; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary vsli:raw="Notifies clients that a property value has changed.">Notifica a los clientes que un valor de propiedad ha cambiado.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">Tiene lugar cuando cambia un valor de propiedad.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary vsli:raw="Notifies clients that a property value is changing.">Notifica a los clientes que un valor de propiedad está cambiando.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary vsli:raw="Occurs when a property value is changing.">Se produce cuando un valor de propiedad está cambiando.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">Proporciona datos para el evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyChangedEventArgs&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property that changed.">Nombre de la propiedad modificada.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary vsli:raw="Gets the name of the property that changed.">Obtiene el nombre de la propiedad modificada.</summary>
      <returns vsli:raw="The name of the property that changed.">Nombre de la propiedad modificada.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event raised when a property is changed on a component.">Representa el método que controlará al evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> que se provoque cuando cambie una propiedad en un componente.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origen del evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyChangedEventArgs&quot; /&gt; that contains the event data.">Objeto <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging&quot; /&gt; event.">Proporciona datos para el evento <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyChangingEventArgs&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyChangingEventArgs" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is changing.">Nombre de la propiedad cuyo valor cambia.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary vsli:raw="Gets the name of the property whose value is changing.">Obtiene el nombre de la propiedad cuyo valor cambia.</summary>
      <returns vsli:raw="The name of the property whose value is changing.">Nombre de la propiedad cuyo valor cambia.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging&quot; /&gt; event of an &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanging&quot; /&gt; interface.">Representa el método que controlará el evento <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> de una interfaz <see cref="T:System.ComponentModel.INotifyPropertyChanging" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origen del evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyChangingEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.PropertyChangingEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary vsli:raw="Specifies what type to use as a converter for the object this attribute is bound to.">Especifica el tipo que se debe utilizar como convertidor para el objeto al que está enlazado este atributo.</summary>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary vsli:raw="Specifies the type to use as a converter for the object this attribute is bound to.">Especifica el tipo que se debe utilizar como convertidor para el objeto al que está enlazado este atributo.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt; class with the default type converter, which is an empty string (&quot;&quot;).">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverterAttribute" /> con el convertidor de tipos predeterminado, que es una cadena vacía ("").</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt; class, using the specified type name as the data converter for the object this attribute is bound to.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverterAttribute" /> utilizando el nombre de tipo especificado como convertidor de datos para el objeto al que este atributo está enlazado.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the class to use for data conversion for the object this attribute is bound to.">Nombre completo de la clase que se utiliza para la conversión de datos del objeto al que está enlazado este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt; class, using the specified type as the data converter for the object this attribute is bound to.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverterAttribute" /> utilizando el tipo especificado como convertidor de datos para el objeto al que está enlazado este atributo.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the converter class to use for data conversion for the object this attribute is bound to.">
        <see cref="T:System.Type" /> que representa el tipo de la clase de convertidor que se utiliza para la conversión de datos del objeto al que está enlazado este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt;.">Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.TypeConverterAttribute" /> actual.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Objeto que contiene el valor cuya equivalencia se va a comprobar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el valor del objeto especificado es igual al del objeto <see cref="T:System.ComponentModel.TypeConverterAttribute" /> actual; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Devuelve el código hash de esta instancia.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt;.">Código hash para el objeto <see cref="T:System.ComponentModel.TypeConverterAttribute" /> actual.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as a converter for the object this attribute is bound to.">Obtiene el nombre completo de <see cref="T:System.Type" /> que se utilizará como convertidor del objeto al que está enlazado este atributo.</summary>
      <returns vsli:raw="The fully qualified type name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as a converter for the object this attribute is bound to, or an empty string (&quot;&quot;) if none exists. The default value is an empty string (&quot;&quot;).">Obtiene el nombre completo de <see cref="T:System.Type" /> que se utilizará como convertidor del objeto al que está enlazado este atributo, o una cadena vacía ("") si no existe ninguno. El valor predeterminado es una cadena vacía ("").</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary vsli:raw="Specifies the custom type description provider for a class. This class cannot be inherited.">Especifica el proveedor de descripción de tipo personalizado de una clase. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProviderAttribute&quot; /&gt; class using the specified type name.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> con el nombre de tipo especificado.</summary>
      <param name="typeName" vsli:raw="The qualified name of the type.">Nombre completo del tipo.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProviderAttribute&quot; /&gt; class using the specified type.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> utilizando el tipo especificado.</summary>
      <param name="type" vsli:raw="The type to store in the attribute.">Tipo que se va a almacenar en el atributo.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary vsli:raw="Gets the type name for the type description provider.">Obtiene el nombre de tipo para el proveedor de descripción de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the qualified type name for the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt;.">Objeto <see cref="T:System.String" /> que contiene el nombre de tipo calificado para <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</returns>
    </member>
    <member name="T:System.Reflection.ICustomTypeProvider">
      <summary vsli:raw="Represents an object that provides a custom type.">Representa un objeto que proporciona un tipo personalizado.</summary>
    </member>
    <member name="M:System.Reflection.ICustomTypeProvider.GetCustomType">
      <summary vsli:raw="Gets the custom type provided by this object.">Obtiene el tipo personalizado proporcionado por este objeto.</summary>
      <returns vsli:raw="The custom type.">Tipo personalizado.</returns>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary vsli:raw="Defines a command.">Define un comando.</summary>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary vsli:raw="Occurs when changes occur that affect whether or not the command should execute.">Se produce cuando hay cambios que influyen en si el comando debería ejecutarse o no.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary vsli:raw="Defines the method that determines whether the command can execute in its current state.">Define el método que determina si el comando puede ejecutarse en su estado actual.</summary>
      <param name="parameter" vsli:raw="Data used by the command.  If the command does not require data to be passed, this object can be set to &lt;see langword=&quot;null&quot; /&gt;.">Datos que usa el comando.  Si el comando no exige pasar los datos, se puede establecer este objeto en <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this command can be executed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se puede ejecutar este comando; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary vsli:raw="Defines the method to be called when the command is invoked.">Define el método al que se llamará cuando se invoque el comando.</summary>
      <param name="parameter" vsli:raw="Data used by the command.  If the command does not require data to be passed, this object can be set to &lt;see langword=&quot;null&quot; /&gt;.">Datos que usa el comando.  Si el comando no exige pasar los datos, se puede establecer este objeto en <see langword="null" />.</param>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary vsli:raw="Identifies the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class that a type or property should use when it is serialized.">Identifica la clase <see cref="T:System.Windows.Markup.ValueSerializer" /> que un tipo o una propiedad deben usar cuando se serializa.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializerAttribute&quot; /&gt; class, using an assembly qualified type name string.">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> utilizando la cadena de nombre de tipo cualificado de ensamblado.</summary>
      <param name="valueSerializerTypeName" vsli:raw="The assembly qualified type name string for the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class to use.">Cadena de nombre de tipo cualificado de ensamblado para la clase <see cref="T:System.Windows.Markup.ValueSerializer" /> que se va a usar.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializerAttribute&quot; /&gt; class, using the specified type.">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> usando el tipo especificado.</summary>
      <param name="valueSerializerType" vsli:raw="A type that represents the type of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class.">Tipo que representa el tipo de la clase <see cref="T:System.Windows.Markup.ValueSerializer" />.</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class reported by this attribute.">Obtiene el tipo de la clase <see cref="T:System.Windows.Markup.ValueSerializer" /> indicada por este atributo.</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;.">Tipo de la propiedad <see cref="T:System.Windows.Markup.ValueSerializer" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary vsli:raw="Gets the assembly qualified name of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; type for this type or property.">Obtiene el nombre calificado con el ensamblado del tipo <see cref="T:System.Windows.Markup.ValueSerializer" /> correspondiente a este tipo o esta propiedad.</summary>
      <returns vsli:raw="The assembly qualified name of the type.">Nombre calificado del ensamblado de este tipo.</returns>
    </member>
  </members>
</doc>
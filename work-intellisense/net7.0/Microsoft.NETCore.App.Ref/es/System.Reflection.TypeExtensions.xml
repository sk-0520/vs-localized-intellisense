<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.TypeExtensions</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.AssemblyExtensions" />
    <member name="M:System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)">
      <param name="assembly" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)">
      <param name="assembly" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)">
      <param name="assembly" vsli:raw="" />
    </member>
    <member name="T:System.Reflection.EventInfoExtensions" />
    <member name="M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo)">
      <param name="eventInfo" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo,System.Boolean)">
      <param name="eventInfo" vsli:raw="" />
      <param name="nonPublic" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo)">
      <param name="eventInfo" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo,System.Boolean)">
      <param name="eventInfo" vsli:raw="" />
      <param name="nonPublic" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo)">
      <param name="eventInfo" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo,System.Boolean)">
      <param name="eventInfo" vsli:raw="" />
      <param name="nonPublic" vsli:raw="" />
    </member>
    <member name="T:System.Reflection.MemberInfoExtensions" />
    <member name="M:System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)">
      <summary vsli:raw="Gets a metadata token for the given member, if available.">Obtiene un token de metadatos del miembro determinado, si está disponible.</summary>
      <param name="member" vsli:raw="The member from which to retrieve the token, as reftype.">Miembro del que se va a recuperar el token, como RefType.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There is no metadata token available.">No hay ningún token de metadatos disponible.</exception>
      <returns vsli:raw="An integer representing the metadata token. The returned token is never nil. If unavailable, an exception is thrown.">Entero que representa el token de metadatos. El token devuelto nunca es nulo. Si no está disponible, se produce una excepción.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)">
      <summary vsli:raw="Returns a value that indicates whether a metadata token is available for the specified member.">Devuelve un valor que indica si un token de metadatos está disponible para el miembro especificado.</summary>
      <param name="member" vsli:raw="The member to analyze, as reftype.">Miembro que se va a analizar, como RefType.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a metadata token available for the given member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si hay un token de metadatos disponible para el miembro especificado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.MethodInfoExtensions" />
    <member name="M:System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)">
      <param name="method" vsli:raw="" />
    </member>
    <member name="T:System.Reflection.ModuleExtensions" />
    <member name="M:System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)">
      <param name="module" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)">
      <param name="module" vsli:raw="" />
    </member>
    <member name="T:System.Reflection.PropertyInfoExtensions" />
    <member name="M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)">
      <param name="property" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)">
      <param name="property" vsli:raw="" />
      <param name="nonPublic" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)">
      <param name="property" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)">
      <param name="property" vsli:raw="" />
      <param name="nonPublic" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)">
      <param name="property" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)">
      <param name="property" vsli:raw="" />
      <param name="nonPublic" vsli:raw="" />
    </member>
    <member name="T:System.Reflection.TypeExtensions" />
    <member name="M:System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])">
      <param name="type" vsli:raw="" />
      <param name="types" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetConstructors(System.Type)">
      <param name="type" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)">
      <param name="type" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetEvents(System.Type)">
      <param name="type" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetField(System.Type,System.String)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetFields(System.Type)">
      <param name="type" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetGenericArguments(System.Type)">
      <param name="type" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetInterfaces(System.Type)">
      <param name="type" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMembers(System.Type)">
      <param name="type" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
      <param name="types" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMethods(System.Type)">
      <param name="type" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperties(System.Type)">
      <param name="type" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
      <param name="bindingAttr" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
      <param name="returnType" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])">
      <param name="type" vsli:raw="" />
      <param name="name" vsli:raw="" />
      <param name="returnType" vsli:raw="" />
      <param name="types" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)">
      <param name="type" vsli:raw="" />
      <param name="c" vsli:raw="" />
    </member>
    <member name="M:System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)">
      <param name="type" vsli:raw="" />
      <param name="o" vsli:raw="" />
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections</name>
  </assembly>
  <members>
    <member name="T:System.Collections.BitArray">
      <summary vsli:raw="Manages a compact array of bit values, which are represented as Booleans, where &lt;see langword=&quot;true&quot; /&gt; indicates that the bit is on (1) and &lt;see langword=&quot;false&quot; /&gt; indicates the bit is off (0).">Administra una matriz compacta de valores de bit que se representan como valores booleanos, donde <see langword="true" /> indica que el bit está activado (1) y <see langword="false" /> indica que el bit está desactivado (0).</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of Booleans.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que contiene los valores de bit copiados de la matriz de valores booleanos especificada.</summary>
      <param name="values" vsli:raw="An array of Booleans to copy.">Matriz de valores booleanos que se va a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="values" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of bytes.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que contiene los valores de bit copiados de la matriz de bytes especificada.</summary>
      <param name="bytes" vsli:raw="An array of bytes containing the values to copy, where each byte represents eight consecutive bits.">Matriz de bytes que contiene los valores que se van a copiar, en la que cada byte representa ocho bits consecutivos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bytes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="bytes" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;bytes&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La longitud de <paramref name="bytes" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que contiene los valores de bit copiados de la colección <see cref="T:System.Collections.BitArray" /> especificada.</summary>
      <param name="bits" vsli:raw="The &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to copy.">Colección <see cref="T:System.Collections.BitArray" /> que se va a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bits&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="bits" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that can hold the specified number of bit values, which are initially set to &lt;see langword=&quot;false&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que puede contener el número especificado de valores de bit, establecidos inicialmente en <see langword="false" />.</summary>
      <param name="length" vsli:raw="The number of bit values in the new &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Número de valores de bit de la nueva colección <see cref="T:System.Collections.BitArray" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="length" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that can hold the specified number of bit values, which are initially set to the specified value.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que puede contener el número especificado de valores de bit, establecidos inicialmente en el valor especificado.</summary>
      <param name="length" vsli:raw="The number of bit values in the new &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Número de valores de bit de la nueva colección <see cref="T:System.Collections.BitArray" />.</param>
      <param name="defaultValue" vsli:raw="The Boolean value to assign to each bit.">Valor booleano que se asigna a cada bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="length" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of 32-bit integers.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que contiene los valores de bit copiados de la matriz de enteros de 32 bits especificada.</summary>
      <param name="values" vsli:raw="An array of integers containing the values to copy, where each integer represents 32 consecutive bits.">Matriz de enteros que contiene los valores que se van a copiar, en la que cada entero representa 32 bits consecutivos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="values" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;values&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">La longitud de <paramref name="values" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise AND operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object and the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise AND operation.">Realiza la operación AND bit a bit entre los elementos del objeto <see cref="T:System.Collections.BitArray" /> actual y los elementos correspondientes de la matriz especificada. El objeto <see cref="T:System.Collections.BitArray" /> actual se modificará para almacenar el resultado de la operación AND bit a bit.</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise AND operation.">La matriz con la que se realiza la operación AND bit a bit.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" /> y el <see cref="T:System.Collections.BitArray" /> actual no tienen el mismo número de elementos.</exception>
      <returns vsli:raw="An array containing the result of the bitwise AND operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">Matriz que contiene el resultado de la operación AND bit a bit, que es una referencia al objeto <see cref="T:System.Collections.BitArray" /> actual.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary vsli:raw="Creates a shallow copy of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Crea una copia superficial de la colección <see cref="T:System.Collections.BitArray" />.</summary>
      <returns vsli:raw="A shallow copy of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Copia superficial de la colección <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">Copia la totalidad de <see cref="T:System.Collections.BitArray" /> en una matriz <see cref="T:System.Array" /> unidimensional compatible, comenzando en el índice especificado de la matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.BitArray" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
O bien 
El número de elementos de la <see cref="T:System.Collections.BitArray" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The type of the source &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El tipo de la <see cref="T:System.Collections.BitArray" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary vsli:raw="Gets the value of the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Obtiene el valor del bit en una posición específica de <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the value to get.">Índice de base cero del valor que se va a obtener.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <paramref name="index" /> es menor que cero.  
  
O bien 
 <paramref name="index" /> es igual o mayor que el número de elementos de <see cref="T:System.Collections.BitArray" />.</exception>
      <returns vsli:raw="The value of the bit at position &lt;paramref name=&quot;index&quot; /&gt;.">Valor del bit en la posición <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.BitArray" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the entire &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Interfaz <see cref="T:System.Collections.IEnumerator" /> para toda la colección <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.LeftShift(System.Int32)">
      <summary vsli:raw="Shifts all the bit values of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the left on &lt;paramref name=&quot;count&quot; /&gt; bits.">Desplaza todos los valores de bit del elemento <see cref="T:System.Collections.BitArray" /> actual a la izquierda en <paramref name="count" /> bits.</summary>
      <param name="count" vsli:raw="The number of shifts to make for each bit.">Número de turnos que se van a hacer para cada bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="count" /> es menor que cero.</exception>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Objeto <see cref="T:System.Collections.BitArray" /> actual.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary vsli:raw="Inverts all the bit values in the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;, so that elements set to &lt;see langword=&quot;true&quot; /&gt; are changed to &lt;see langword=&quot;false&quot; /&gt;, and elements set to &lt;see langword=&quot;false&quot; /&gt; are changed to &lt;see langword=&quot;true&quot; /&gt;.">Invierte todos los valores de bit que se encuentran en la colección <see cref="T:System.Collections.BitArray" /> actual, de manera que los elementos establecidos en <see langword="true" /> cambien a <see langword="false" /> y los elementos establecidos en <see langword="false" /> cambien a <see langword="true" />.</summary>
      <returns vsli:raw="The current instance with inverted bit values.">Instancia actual con los valores de bit invertidos.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise OR operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object and the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise OR operation.">Realiza la operación OR bit a bit entre los elementos del objeto <see cref="T:System.Collections.BitArray" /> actual y los elementos correspondientes de la matriz especificada. El objeto <see cref="T:System.Collections.BitArray" /> actual se modificará para almacenar el resultado de la operación OR bit a bit.</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise OR operation.">Matriz con la que se realiza la operación OR bit a bit.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" /> y el <see cref="T:System.Collections.BitArray" /> actual no tienen el mismo número de elementos.</exception>
      <returns vsli:raw="An array containing the result of the bitwise OR operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">Matriz que contiene el resultado de la operación OR bit a bit, que es una referencia al objeto <see cref="T:System.Collections.BitArray" /> actual.</returns>
    </member>
    <member name="M:System.Collections.BitArray.RightShift(System.Int32)">
      <summary vsli:raw="Shifts all the bit values of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the right on &lt;paramref name=&quot;count&quot; /&gt; bits.">Desplaza a la derecha todos los valores de bit del elemento <see cref="T:System.Collections.BitArray" /> actual en <paramref name="count" /> bits.</summary>
      <param name="count" vsli:raw="The number of shifts to make for each bit.">Número de turnos que se van a hacer para cada bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="count" /> es menor que cero.</exception>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Objeto <see cref="T:System.Collections.BitArray" /> actual.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary vsli:raw="Sets the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the specified value.">Establece el bit situado en una posición específica de <see cref="T:System.Collections.BitArray" /> en el valor especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the bit to set.">El índice de base cero del bit que se va a establecer.</param>
      <param name="value" vsli:raw="The Boolean value to assign to the bit.">Valor booleano que se asigna al bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <paramref name="index" /> es menor que cero.  
  
O bien 
 <paramref name="index" /> es igual o mayor que el número de elementos de <see cref="T:System.Collections.BitArray" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary vsli:raw="Sets all bits in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the specified value.">Establece todos los bits de <see cref="T:System.Collections.BitArray" /> en el valor especificado.</summary>
      <param name="value" vsli:raw="The Boolean value to assign to all bits.">Valor booleano que se asigna a todos los bits.</param>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise exclusive OR operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object against the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise exclusive OR operation.">Realiza la operación exclusiva OR bit a bit entre los elementos del objeto <see cref="T:System.Collections.BitArray" /> actual frente a los elementos correspondientes de la matriz especificada. El objeto <see cref="T:System.Collections.BitArray" /> actual se modificará para almacenar el resultado de la operación OR exclusiva bit a bit.</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise exclusive OR operation.">La matriz con la que se realiza la operación exclusiva OR bit a bit.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" /> y el <see cref="T:System.Collections.BitArray" /> actual no tienen el mismo número de elementos.</exception>
      <returns vsli:raw="An array containing the result of the bitwise exclusive OR operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">Matriz que contiene el resultado de la operación OR exclusiva bit a bit, que es una referencia al objeto <see cref="T:System.Collections.BitArray" /> actual.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Obtiene el número de elementos incluidos en <see cref="T:System.Collections.BitArray" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Número de elementos contenidos en <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.BitArray" /> es de solo lectura.</summary>
      <returns vsli:raw="This property is always &lt;see langword=&quot;false&quot; /&gt;.">Esta propiedad es siempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.BitArray" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="This property is always &lt;see langword=&quot;false&quot; /&gt;.">Esta propiedad es siempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value of the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Obtiene o establece el valor del bit que se encuentra en una posición específica de <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the value to get or set.">El índice de base cero del valor que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.BitArray.Count&quot; /&gt;.">
        <paramref name="index" /> es menor que cero.  
  
O bien 
 <paramref name="index" /> es igual o mayor que <see cref="P:System.Collections.BitArray.Count" />.</exception>
      <returns vsli:raw="The value of the bit at position &lt;paramref name=&quot;index&quot; /&gt;.">Valor del bit en la posición <paramref name="index" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary vsli:raw="Gets or sets the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Obtiene o establece el número de elementos de <see cref="T:System.Collections.BitArray" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is set to a value that is less than zero.">La propiedad está establecida en un valor menor que cero.</exception>
      <returns vsli:raw="The number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Número de elementos incluidos en <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.BitArray" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.CollectionExtensions">
      <summary vsli:raw="Provides extension methods for generic collections.">Proporciona métodos de extensión para colecciones genéricas.</summary>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
      <summary vsli:raw="Tries to get the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt; in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Intenta obtener el valor asociado al elemento <paramref name="key" /> especificado en <paramref name="dictionary" />.</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Diccionario con claves de tipo <typeparamref name="TKey" /> y valores de tipo <typeparamref name="TValue" />.</param>
      <param name="key" vsli:raw="The key of the value to get.">Clave del valor que se va a obtener.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; instance. When the method is successful, the returned object is the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;. When the method fails, it returns the &lt;see langword=&quot;default&quot; /&gt; value for &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Instancia de <typeparamref name="TValue" />. Cuando el método se ejecuta correctamente, el objeto devuelto es el valor asociado al elemento <paramref name="key" /> especificado. Cuando se produce un error en el método, devuelve el valor <see langword="default" /> para <typeparamref name="TValue" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Tries to get the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt; in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Intenta obtener el valor asociado a la clave especificada en <paramref name="dictionary" />.</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Diccionario con claves de tipo <typeparamref name="TKey" /> y valores de tipo <typeparamref name="TValue" />.</param>
      <param name="key" vsli:raw="The key of the value to get.">Clave del valor que se va a obtener.</param>
      <param name="defaultValue" vsli:raw="The default value to return when the &lt;paramref name=&quot;dictionary&quot; /&gt; cannot find a value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;.">El valor predeterminado que se va a devolver cuando <paramref name="dictionary" /> no pueda encontrar un valor asociado al elemento <paramref name="key" /> especificado.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; instance. When the method is successful, the returned object is the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;. When the method fails, it returns &lt;paramref name=&quot;defaultValue&quot; /&gt;.">Instancia de <typeparamref name="TValue" />. Cuando el método se ejecuta correctamente, el objeto devuelto es el valor asociado al elemento <paramref name="key" /> especificado. Cuando se produce un error en el método, devuelve <paramref name="defaultValue" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
      <summary vsli:raw="Tries to remove the value with the specified &lt;paramref name=&quot;key&quot; /&gt; from the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Intenta quitar el valor con el elemento <paramref name="key" /> especificado de <paramref name="dictionary" />.</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Diccionario con claves de tipo <typeparamref name="TKey" /> y valores de tipo <typeparamref name="TValue" />.</param>
      <param name="key" vsli:raw="The key of the value to remove.">Clave del valor que se va a quitar.</param>
      <param name="value" vsli:raw="When this method returns &lt;see langword=&quot;true&quot; /&gt;, the removed value; when this method returns &lt;see langword=&quot;false&quot; /&gt;, the &lt;see langword=&quot;default&quot; /&gt; value for &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Cuando este método devuelve <see langword="true" />, corresponde al valor quitado; cuando devuelve <see langword="false" />, es el valor de <see langword="default" /> para <typeparamref name="TValue" />.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Tipo de las claves de <paramref name="dictionary" />.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Tipo de los valores de <paramref name="dictionary" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; when a value is found in the &lt;paramref name=&quot;dictionary&quot; /&gt; with the specified &lt;paramref name=&quot;key&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; when the &lt;paramref name=&quot;dictionary&quot; /&gt; cannot find a value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;.">
        <see langword="true" /> cuando se encuentra un valor en <paramref name="dictionary" /> con el elemento <paramref name="key" /> especificado; <see langword="false" /> cuando <paramref name="dictionary" /> no puede encontrar un valor asociado al elemento <paramref name="key" /> especificado.</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Tries to add the specified &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; to the &lt;paramref name=&quot;dictionary&quot; /&gt;.">Intenta agregar los elementos <paramref name="key" /> y <paramref name="value" /> especificados a <paramref name="dictionary" />.</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">Diccionario con claves de tipo <typeparamref name="TKey" /> y valores de tipo <typeparamref name="TValue" />.</param>
      <param name="key" vsli:raw="The key of the value to add.">Clave del valor que se va a agregar.</param>
      <param name="value" vsli:raw="The value to add.">El valor que se va a agregar.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; when the &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are successfully added to the &lt;paramref name=&quot;dictionary&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; when the &lt;paramref name=&quot;dictionary&quot; /&gt; already contains the specified &lt;paramref name=&quot;key&quot; /&gt;, in which case nothing gets added.">
        <see langword="true" /> cuando <paramref name="key" /> y <paramref name="value" /> se agregan correctamente a <paramref name="dictionary" />; <see langword="false" /> cuando <paramref name="dictionary" /> ya contiene el elemento <paramref name="key" /> especificado, en cuyo caso no se agrega nada.</returns>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary vsli:raw="Provides a base class for implementations of the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; generic interface.">Proporciona una clase base para las implementaciones de la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
      <typeparam name="T" vsli:raw="The type of objects to compare.">Tipo de objetos que se van a comparar.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Comparer`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary vsli:raw="When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.">Cuando se reemplaza en una clase derivada, realiza una comparación de dos objetos del mismo tipo y devuelve un valor que indica si uno es menor, igual o mayor que el otro.</summary>
      <param name="x" vsli:raw="The first object to compare.">Primer objeto que se va a comparar.</param>
      <param name="y" vsli:raw="The second object to compare.">Segundo objeto que se va a comparar.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Type &lt;paramref name=&quot;T&quot; /&gt; does not implement either the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface.">El tipo <paramref name="T" /> no implementa la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" />.</exception>
      <returns vsli:raw="A signed integer that indicates the relative values of &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is less than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; equals &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is greater than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Entero con signo que indica los valores relativos de <paramref name="x" /> y <paramref name="y" />, como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor</term><description> Significado</description></listheader><item><term> Menor que cero</term><description><paramref name="x" /> es menor que <paramref name="y" />.</description></item><item><term> Cero</term><description><paramref name="x" /> es igual que <paramref name="y" />.</description></item><item><term> Mayor que cero</term><description><paramref name="x" /> es mayor que <paramref name="y" />.</description></item></list></returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})">
      <summary vsli:raw="Creates a comparer by using the specified comparison.">Crea un comparador mediante la comparación especificada.</summary>
      <param name="comparison" vsli:raw="The comparison to use.">Comparación que se va a utilizar.</param>
      <returns vsli:raw="The new comparer.">El nuevo comparador.</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary vsli:raw="Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.">Compara dos objetos y devuelve un valor que indica si uno de ellos es menor, igual o mayor que el otro.</summary>
      <param name="x" vsli:raw="The first object to compare.">Primer objeto que se va a comparar.</param>
      <param name="y" vsli:raw="The second object to compare.">Segundo objeto que se va a comparar.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;x&quot; /&gt; or &lt;paramref name=&quot;y&quot; /&gt; is of a type that cannot be cast to type &lt;paramref name=&quot;T&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; do not implement either the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface.">El tipo de <paramref name="x" /> o <paramref name="y" /> no se puede convertir al tipo <paramref name="T" />.  
  
o bien 
 <paramref name="x" /> e <paramref name="y" /> no implementan la interfaz genérica <see cref="T:System.IComparable`1" />, ni la interfaz <see cref="T:System.IComparable" />.</exception>
      <returns vsli:raw="A signed integer that indicates the relative values of &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is less than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; equals &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is greater than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Entero con signo que indica los valores relativos de <paramref name="x" /> y <paramref name="y" />, como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor</term><description> Significado</description></listheader><item><term> Menor que cero</term><description><paramref name="x" /> es menor que <paramref name="y" />.</description></item><item><term> Cero</term><description><paramref name="x" /> es igual que <paramref name="y" />.</description></item><item><term> Mayor que cero</term><description><paramref name="x" /> es mayor que <paramref name="y" />.</description></item></list></returns>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary vsli:raw="Returns a default sort order comparer for the type specified by the generic argument.">Devuelve un comparador de criterios de ordenación predeterminado para el tipo especificado por el argumento genérico.</summary>
      <returns vsli:raw="An object that inherits &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; and serves as a sort order comparer for type &lt;paramref name=&quot;T&quot; /&gt;.">Objeto que hereda <see cref="T:System.Collections.Generic.Comparer`1" /> y sirve como un comparador de criterios de ordenación para el tipo <paramref name="T" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary vsli:raw="Represents a collection of keys and values.">Representa una colección de claves y valores.</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Dictionary`2" /> que está vacía, tiene la capacidad inicial predeterminada y utiliza el comparador de igualdad predeterminado para el tipo de clave.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the default equality comparer for the key type.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene los elementos copiados del <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado y utiliza el comparador de igualdad predeterminado para el tipo de clave.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> cuyos elementos se copian en el nuevo <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="dictionary" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contiene una o varias claves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene los elementos copiados de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> especificada y utiliza la interfaz <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificada.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> cuyos elementos se copian en el nuevo <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">Implementación de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a utilizar para comparar claves o <see langword="null" /> si se va a utilizar el <see cref="T:System.Collections.Generic.EqualityComparer`1" /> predeterminado para el tipo de la clave.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="dictionary" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contiene una o varias claves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene elementos copiados del valor <see cref="T:System.Collections.Generic.IEnumerable`1" /> especificado.</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;  whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se copian en el nuevo elemento <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="collection" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicated keys.">
        <paramref name="collection" /> contiene una o varias claves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene los elementos copiados de la interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> especificada y utiliza la interfaz <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificada.</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se copian en la nueva colección <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">Implementación de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a utilizar para comparar claves o <see langword="null" /> si se va a utilizar el <see cref="T:System.Collections.Generic.EqualityComparer`1" /> predeterminado para el tipo de la clave.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="collection" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicated keys.">
        <paramref name="collection" /> contiene una o varias claves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Dictionary`2" /> que está vacía, tiene la capacidad inicial predeterminada y utiliza la interfaz <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificada.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">Implementación de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a utilizar para comparar claves o <see langword="null" /> si se va a utilizar el <see cref="T:System.Collections.Generic.EqualityComparer`1" /> predeterminado para el tipo de la clave.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Dictionary`2" /> que está vacía, tiene la capacidad inicial especificada y utiliza el comparador de igualdad predeterminado para el tipo de clave.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; can contain.">Número inicial de elementos que puede contener la colección <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Dictionary`2" /> que está vacía, tiene la capacidad inicial especificada y utiliza la interfaz <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificada.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; can contain.">Número inicial de elementos que puede contener la colección <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">Implementación de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a utilizar para comparar claves o <see langword="null" /> si se va a utilizar el <see cref="T:System.Collections.Generic.EqualityComparer`1" /> predeterminado para el tipo de la clave.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class with serialized data.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Dictionary`2" /> con datos serializados.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object containing the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene la información que se requiere para serializar <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure containing the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Estructura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino de la secuencia serializada asociada a <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary.">Agrega la clave y el valor especificados al diccionario.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor del elemento que se va a agregar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Ya existe un elemento con la misma clave en <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary vsli:raw="Removes all keys and values from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Quita todas las claves y valores de <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains the specified key.">Determina si <see cref="T:System.Collections.Generic.Dictionary`2" /> contiene la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Clave que se buscará en <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección <see cref="T:System.Collections.Generic.Dictionary`2" /> contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains a specific value.">Determina si <see cref="T:System.Collections.Generic.Dictionary`2" /> contiene un valor específico.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor que se va a buscar en la colección <see cref="T:System.Collections.Generic.Dictionary`2" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <see cref="T:System.Collections.Generic.Dictionary`2" /> contiene un elemento con el valor especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.EnsureCapacity(System.Int32)">
      <summary vsli:raw="Ensures that the dictionary can hold up to a specified number of entries without any further expansion of its backing storage.">Garantiza que el diccionario puede contener hasta un número especificado de entradas sin más expansión de su almacenamiento de respaldo.</summary>
      <param name="capacity" vsli:raw="The number of entries.">Número de entradas.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> es menor que 0.</exception>
      <returns vsli:raw="The current capacity of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Capacidad actual del <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">Implementa la interfaz de <see cref="T:System.Runtime.Serialization.ISerializable" /> y devuelve los datos necesarios para serializar la instancia de <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene la información requerida para serializar la instancia de <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">Estructura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino de la secuencia serializada asociada a la instancia de <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">Implementa la interfaz <see cref="T:System.Runtime.Serialization.ISerializable" /> y genera el evento de deserialización cuando esta ha finalizado.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Origen del evento de deserialización.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance is invalid.">El objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> asociado a la instancia de <see cref="T:System.Collections.Generic.Dictionary`2" /> actual no es válido.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the value with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Quita el valor con la clave especificada de <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see langword="true" /> si el elemento se encuentra y quita correctamente; en caso contrario, <see langword="false" />.  Este método también devuelve <see langword="false" /> si no se encuentra <paramref name="key" /> en la colección <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)">
      <summary vsli:raw="Removes the value with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, and copies the element to the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Quita el valor con la clave especificada de <see cref="T:System.Collections.Generic.Dictionary`2" /> y copia el elemento en el parámetro <paramref name="value" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <param name="value" vsli:raw="The removed element.">Elemento que se ha quitado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el elemento se encuentra y quita correctamente; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified value to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; with the specified key.">Agrega el valor especificado a la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> con la clave especificada.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure representing the key and value to add to the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que representa la clave y el valor que se van a agregar a la colección <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The key of &lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">La clave de <paramref name="keyValuePair" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Ya existe un elemento con la misma clave en <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific key and value.">Determina si <see cref="T:System.Collections.Generic.ICollection`1" /> contiene una clave y un valor específicos.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que se va a buscar en <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="keyValuePair" /> se encuentra en la matriz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">Copia los elementos de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> en una matriz de tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" />, comenzando en el índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">Matriz unidimensional de tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que constituye el destino de los elementos <see cref="T:System.Collections.Generic.KeyValuePair`2" /> copiados desde la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El número de elementos de la <see cref="T:System.Collections.Generic.ICollection`1" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes a key and value from the dictionary.">Quita una clave y valor del diccionario.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure representing the key and value to remove from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que representa la clave y el valor que se van a quitar de la colección <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key and value represented by &lt;paramref name=&quot;keyValuePair&quot; /&gt; is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> si la clave y el valor que representa <paramref name="keyValuePair" /> se encuentran y quitan correctamente; de lo contrario, <see langword="false" />. Este método también devuelve <see langword="false" /> si no se encuentra <paramref name="keyValuePair" /> en la colección <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array, starting at the specified array index.">Copia los elementos de <see cref="T:System.Collections.Generic.ICollection`1" /> en una matriz, comenzando en el índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.ICollection`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
O bien 
 <paramref name="array" /> no tiene índices de base cero.  
  
O bien 
El número de elementos de la <see cref="T:System.Collections.Generic.ICollection`1" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.  
  
O bien 
El tipo de la <see cref="T:System.Collections.Generic.ICollection`1" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds the specified key and value to the dictionary.">Agrega la clave y el valor especificados al diccionario.</summary>
      <param name="key" vsli:raw="The object to use as the key.">Objeto que se va a utilizar como clave.</param>
      <param name="value" vsli:raw="The object to use as the value.">Objeto que se va a utilizar como valor.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to &lt;paramref name=&quot;TValue&quot; /&gt;, the type of values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <paramref name="key" /> es de un tipo que no se puede asignar al tipo de clave <paramref name="TKey" /> de la colección <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
O bien 
 <paramref name="value" /> es de un tipo que no se puede asignar a <paramref name="TValue" />, que es el tipo de los valores que hay en la colección <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
O bien 
Ya existe un valor con la misma clave en la colección <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">Determina si <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Clave que se buscará en <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Devuelve una interfaz <see cref="T:System.Collections.IDictionaryEnumerator" /> para la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Estructura <see cref="T:System.Collections.IDictionaryEnumerator" /> para la colección <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Quita el elemento con la clave especificada de <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="key" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess">
      <summary vsli:raw="Sets the capacity of this dictionary to what it would be if it had been originally initialized with all its entries.">Establece la capacidad de este diccionario en lo que sería si se hubiera inicializado originalmente con todas sus entradas.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess(System.Int32)">
      <summary vsli:raw="Sets the capacity of this dictionary to hold up a specified number of entries without any further expansion of its backing storage.">Establece la capacidad de este diccionario para contener hasta un número especificado de entradas sin más expansión de su almacenamiento de respaldo.</summary>
      <param name="capacity" vsli:raw="The new capacity.">Nueva capacidad.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than &lt;see cref=&quot;P:System.Collections.Generic.Dictionary`2.Count&quot; /&gt;.">
        <paramref name="capacity" /> es menor que <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)">
      <summary vsli:raw="Attempts to add the specified key and value to the dictionary.">Intenta agregar al diccionario la clave y el valor especificados.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The value of the element to add. It can be &lt;see langword=&quot;null&quot; /&gt;.">Valor del elemento que se va a agregar. Puede ser <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key/value pair was added to the dictionary successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el par clave-valor se ha agregado correctamente al diccionario; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtiene el valor asociado a la clave especificada.</summary>
      <param name="key" vsli:raw="The key of the value to get.">Clave del valor que se va a obtener.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Cuando el método devuelve un valor, contiene el valor asociado a la clave especificada, si se encuentra la clave; en caso contrario, contiene el valor predeterminado para el tipo del parámetro <paramref name="value" />. Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección <see cref="T:System.Collections.Generic.Dictionary`2" /> contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; that is used to determine equality of keys for the dictionary.">Obtiene la interfaz <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se utiliza para determinar la igualdad de claves para el diccionario.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface implementation that is used to determine equality of keys for the current &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; and to provide hash values for the keys.">Implementación de la interfaz genérica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se utiliza con el fin de determinar la igualdad de claves para la colección <see cref="T:System.Collections.Generic.Dictionary`2" /> actual y para proporcionar los valores hash para las claves.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Obtiene el número de pares clave-valor incluidos en <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Número de pares clave-valor incluidos en <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">Obtiene o establece el valor asociado a la clave especificada.</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">Clave del valor que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">La propiedad se recupera y <paramref name="key" /> no existe en la colección.</exception>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt;, and a set operation creates a new element with the specified key.">Valor asociado a la clave especificada. Si no se encuentra la clave especificada, en el caso de una operación Get, se producirá una excepción <see cref="T:System.Collections.Generic.KeyNotFoundException" /> y, en el caso de una operación Set, se creará un nuevo elemento con la clave especificada.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Obtiene una colección que contiene las claves de <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> que contiene las claves de <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the dictionary is read-only.">Obtiene un valor que indica si el diccionario es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />. En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; of type &lt;paramref name=&quot;TKey&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> de tipo <paramref name="TKey" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; of type &lt;paramref name=&quot;TValue&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> de tipo <paramref name="TValue" /> que contiene los valores de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">Obtiene una colección que contiene las claves de <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</summary>
      <returns vsli:raw="A collection containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">Colección que contiene las claves de <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection containing the values of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">Obtiene una colección que contiene los valores de <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</summary>
      <returns vsli:raw="A collection containing the values of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">Colección que contiene los valores de <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.IDictionary" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IDictionary" /> es de solo lectura; de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the value with the specified key.">Obtiene o establece el valor con la clave especificada.</summary>
      <param name="key" vsli:raw="The key of the value to get.">Clave del valor que se va a obtener.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Se está asignando un valor, pero <paramref name="key" /> es de un tipo no asignable al tipo de clave <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
O bien 
Se está asignando un valor, pero <paramref name="value" /> es de un tipo no asignable al tipo de valor <paramref name="TValue" /> de <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
      <returns vsli:raw="The value associated with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Valor asociado a la clave especificada, o <see langword="null" /> si <paramref name="key" /> no está en el diccionario o si <paramref name="key" /> es de un tipo no asignable al tipo de clave <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene las claves de la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> que contiene las claves de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene los valores de la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> que contiene los valores de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Obtiene una colección que contiene los valores de <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Colección <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> que contiene los valores de la colección <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Enumera los elementos de un <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.Enumerator&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Desplaza el enumerador al siguiente elemento de <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; at the current position of the enumerator.">Elemento de <see cref="T:System.Collections.Generic.Dictionary`2" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator, as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt;.">Elemento del diccionario en la posición actual del enumerador, como una estructura <see cref="T:System.Collections.DictionaryEntry" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary vsli:raw="Gets the key of the element at the current position of the enumerator.">Obtiene la clave del elemento situado en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The key of the element in the dictionary at the current position of the enumerator.">Clave del elemento del diccionario situado en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary vsli:raw="Gets the value of the element at the current position of the enumerator.">Obtiene el valor del elemento situado en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The value of the element in the dictionary at the current position of the enumerator.">Valor del elemento del diccionario situado en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator, as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Elemento de la colección situado en la posición actual del enumerador, como un objeto <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary vsli:raw="Represents the collection of keys in a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. This class cannot be inherited.">Representa la colección de claves de <see cref="T:System.Collections.Generic.Dictionary`2" />. Esta clase no puede heredarse.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; class that reflects the keys in the specified &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> que refleja las claves de la colección <see cref="T:System.Collections.Generic.Dictionary`2" /> especificada.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; whose keys are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">Colección <see cref="T:System.Collections.Generic.Dictionary`2" /> cuyas claves se reflejan en la nueva colección <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">Copia los elementos de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> en una <see cref="T:System.Array" /> unidimensional existente, a partir del índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El número de elementos de la <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />. Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Quita todos los elementos de <see cref="T:System.Collections.Generic.ICollection`1" />. Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Determina si <see cref="T:System.Collections.Generic.ICollection`1" /> contiene un valor específico.</summary>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se encuentra en la matriz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />. Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objeto que se va a quitar de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Siempre se produce.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Es <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si no se encontró el elemento en el objeto <see cref="T:System.Collections.Generic.ICollection`1" /> original.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
o bien 
 <paramref name="array" /> no tiene una indización de base cero.  
  
o bien 
El número de elementos de la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.  
  
o bien 
El tipo de la <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.  &#xA;  &#xA; Retrieving the value of this property is an O(1) operation.">Número de elementos contenidos en <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.  
  
La recuperación del valor de esta propiedad es una operación O(1).</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, esta propiedad siempre devuelve <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">Enumera los elementos de un <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">Desplaza el enumerador al siguiente elemento de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; at the current position of the enumerator.">Elemento de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary vsli:raw="Represents the collection of values in a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. This class cannot be inherited.">Representa la colección de claves de una clase <see cref="T:System.Collections.Generic.Dictionary`2" />. Esta clase no puede heredarse.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; class that reflects the values in the specified &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> que refleja los valores de la colección <see cref="T:System.Collections.Generic.Dictionary`2" /> especificada.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; whose values are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Colección <see cref="T:System.Collections.Generic.Dictionary`2" /> cuyos valores se reflejan en la nueva colección <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">Copia los elementos de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> en una <see cref="T:System.Array" /> unidimensional existente, a partir del índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El número de elementos de la <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Quita todos los elementos de <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific value.">Determina si <see cref="T:System.Collections.Generic.ICollection`1" /> contiene un valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se encuentra en la matriz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />. Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objeto que se va a quitar de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Siempre se produce.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Es <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si no se encontró <paramref name="item" /> en el objeto <see cref="T:System.Collections.Generic.ICollection`1" /> original.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
O bien 
 <paramref name="array" /> no tiene una indización de base cero.  
  
O bien 
El número de elementos de la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.  
  
o bien 
El tipo de la <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Número de elementos contenidos en <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, esta propiedad siempre devuelve <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns the current instance.">Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Enumera los elementos de un <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">Desplaza el enumerador al siguiente elemento de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; at the current position of the enumerator.">Elemento de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary vsli:raw="Provides a base class for implementations of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface.">Proporciona una clase base para las implementaciones de la interfaz genérica <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <typeparam name="T" vsli:raw="The type of objects to compare.">Tipo de objetos que se van a comparar.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.EqualityComparer`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary vsli:raw="When overridden in a derived class, determines whether two objects of type &lt;typeparamref name=&quot;T&quot; /&gt; are equal.">Cuando se reemplaza en una clase derivada, determina si dos objetos de tipo <typeparamref name="T" /> son iguales.</summary>
      <param name="x" vsli:raw="The first object to compare.">Primer objeto que se va a comparar.</param>
      <param name="y" vsli:raw="The second object to compare.">Segundo objeto que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si los objetos especificados son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary vsli:raw="When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.">Cuando se reemplaza en una clase derivada sirve como función hash para los objetos especificados para los algoritmos hash y las estructuras de datos, como las tablas hash.</summary>
      <param name="obj" vsli:raw="The object for which to get a hash code.">Objeto para el que se va a obtener un código hash.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The type of &lt;paramref name=&quot;obj&quot; /&gt; is a reference type and &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El tipo de <paramref name="obj" /> es un tipo de referencia y <paramref name="obj" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A hash code for the specified object.">Código hash para el objeto especificado.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary vsli:raw="Determines whether the specified objects are equal.">Determina si los objetos especificados son iguales.</summary>
      <param name="x" vsli:raw="The first object to compare.">Primer objeto que se va a comparar.</param>
      <param name="y" vsli:raw="The second object to compare.">Segundo objeto que se va a comparar.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;x&quot; /&gt; or &lt;paramref name=&quot;y&quot; /&gt; is of a type that cannot be cast to type &lt;typeparamref name=&quot;T&quot; /&gt;.">El tipo de <paramref name="x" /> o <paramref name="y" /> no se puede convertir al tipo <typeparamref name="T" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si los objetos especificados son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary vsli:raw="Returns a hash code for the specified object.">Devuelve un código hash para el objeto especificado.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which a hash code is to be returned.">
        <see cref="T:System.Object" /> para el que se va a devolver un código hash.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The type of &lt;paramref name=&quot;obj&quot; /&gt; is a reference type and &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;obj&quot; /&gt; is of a type that cannot be cast to type &lt;typeparamref name=&quot;T&quot; /&gt;.">El tipo de <paramref name="obj" /> es un tipo de referencia y <paramref name="obj" /> es <see langword="null" />.  
  
o bien 
 El tipo de <paramref name="obj" /> no se puede convertir al tipo <typeparamref name="T" />.</exception>
      <returns vsli:raw="A hash code for the specified object.">Código hash para el objeto especificado.</returns>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary vsli:raw="Returns a default equality comparer for the type specified by the generic argument.">Devuelve un comparador de igualdad predeterminado para el tipo especificado por el argumento genérico.</summary>
      <returns vsli:raw="The default instance of the &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; class for type &lt;typeparamref name=&quot;T&quot; /&gt;.">Instancia predeterminada de la clase <see cref="T:System.Collections.Generic.EqualityComparer`1" /> para el tipo <typeparamref name="T" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary vsli:raw="Represents a set of values.">Representa un conjunto de valores.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">Tipo de los elementos del conjunto hash.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty and uses the default equality comparer for the set type.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.HashSet`1" /> que está vacía y utiliza el comparador de igualdad predeterminado para el tipo de conjunto.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.HashSet`1" /> que utiliza el comparador de igualdad predeterminado para el tipo de conjunto, contiene elementos copiados de la colección especificada y tiene capacidad suficiente para dar cabida al número de elementos copiados.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new set.">Colección cuyos elementos se copian en el nuevo conjunto.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.HashSet`1" /> que utiliza el comparador de igualdad especificado para el tipo de conjunto, contiene elementos copiados de la colección especificada y tiene capacidad suficiente para alojar el número de elementos copiados.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new set.">Colección cuyos elementos se copian en el nuevo conjunto.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; implementation for the set type.">Implementación de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a usar para comparar valores del conjunto o <see langword="null" /> si se va a usar la implementación de <see cref="T:System.Collections.Generic.EqualityComparer`1" /> predeterminada para el tipo de conjunto.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty and uses the specified equality comparer for the set type.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.HashSet`1" /> que está vacía y utiliza el comparador de igualdad especificado para el tipo de conjunto.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; implementation for the set type.">Implementación de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a usar para comparar valores del conjunto o <see langword="null" /> si se va a usar la implementación de <see cref="T:System.Collections.Generic.EqualityComparer`1" /> predeterminada para el tipo de conjunto.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty, but has reserved space for &lt;paramref name=&quot;capacity&quot; /&gt; items and uses the default equality comparer for the set type.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.HashSet`1" /> que está vacía, pero que tiene espacio reservado para los elementos <paramref name="capacity" /> y usa el comparador de igualdad predeterminado para el tipo de conjunto.</summary>
      <param name="capacity" vsli:raw="The initial size of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt;.">Tamaño inicial de <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the specified equality comparer for the set type, and has sufficient capacity to accommodate &lt;paramref name=&quot;capacity&quot; /&gt; elements.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.HashSet`1" /> que usa el comparador de igualdad especificado para el tipo de conjunto y que tiene capacidad suficiente para alojar elementos <paramref name="capacity" />.</summary>
      <param name="capacity" vsli:raw="The initial size of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt;.">Tamaño inicial de <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or null (Nothing in Visual Basic) to use the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation for the set type.">Implementación de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a usar para comparar valores del conjunto, o bien Null (Nothing en Visual Basic) para usar la implementación predeterminada de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para el tipo de conjunto.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class with serialized data.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.HashSet`1" /> con datos serializados.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene información necesaria para serializar el objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Estructura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino del flujo serializado asociado al objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to a set.">Agrega el elemento especificado a un conjunto.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Elemento que se va a agregar al conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object; &lt;see langword=&quot;false&quot; /&gt; if the element is already present.">Es <see langword="true" /> si el elemento se agrega al objeto <see cref="T:System.Collections.Generic.HashSet`1" />; es <see langword="false" /> si el elemento ya está presente.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary vsli:raw="Removes all elements from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Quita todos los elementos de un objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object contains the specified element.">Determina si un objeto <see cref="T:System.Collections.Generic.HashSet`1" /> contiene el elemento especificado.</summary>
      <param name="item" vsli:raw="The element to locate in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Elemento que debe buscarse en el objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object contains the specified element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> contiene el elemento especificado; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array.">Copia los elementos de un objeto <see cref="T:System.Collections.Generic.HashSet`1" /> en una matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde el objeto <see cref="T:System.Collections.Generic.HashSet`1" />. La matriz debe tener una indización de base cero.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array, starting at the specified array index.">Copia los elementos de un objeto <see cref="T:System.Collections.Generic.HashSet`1" /> en una matriz, comenzando en el índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde el objeto <see cref="T:System.Collections.Generic.HashSet`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is greater than the length of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="arrayIndex" /> es mayor que la longitud de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified number of elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array, starting at the specified array index.">Copia el número de elementos especificado de un objeto <see cref="T:System.Collections.Generic.HashSet`1" /> en una matriz, comenzando en el índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde el objeto <see cref="T:System.Collections.Generic.HashSet`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <param name="count" vsli:raw="The number of elements to copy to &lt;paramref name=&quot;array&quot; /&gt;.">Número de elementos que se van a copiar en <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> es menor que 0.  
  
o bien 
 <paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is greater than the length of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is greater than the available space from the &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="arrayIndex" /> es mayor que la longitud de la <paramref name="array" /> de destino.  
  
o bien 
 <paramref name="count" /> es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used for equality testing of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Devuelve un objeto <see cref="T:System.Collections.IEqualityComparer" /> que se puede usar para comprobar la igualdad de un objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used for deep equality testing of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Objeto <see cref="T:System.Collections.IEqualityComparer" /> que puede utilizarse para la comprobación de igualdad en profundidad del objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.EnsureCapacity(System.Int32)">
      <summary vsli:raw="Ensures that this hash set can hold the specified number of elements without growing.">Garantiza que este conjunto hash puede contener el número especificado de elementos sin aumentar.</summary>
      <param name="capacity" vsli:raw="The minimum capacity to ensure.">Capacidad mínima que se va a garantizar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> es menor que cero.</exception>
      <returns vsli:raw="The new capacity of this instance.">Nueva capacidad de esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Quita del objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual todos los elementos de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Colección de elementos que se van a quitar del objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Devuelve un enumerador que recorre en iteración un objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1.Enumerator&quot; /&gt; object for the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Objeto <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> para el objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Implementa la interfaz <see cref="T:System.Runtime.Serialization.ISerializable" /> y devuelve los datos necesarios para serializar un objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene información necesaria para serializar el objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Estructura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino del flujo serializado asociado al objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain only elements that are present in that object and in the specified collection.">Modifica el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual para que solo contenga elementos que están presentes en ese objeto y en la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper subset of the specified collection.">Determina si un objeto <see cref="T:System.Collections.Generic.HashSet`1" /> es un subconjunto apropiado de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> es un subconjunto apropiado de <paramref name="other" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper superset of the specified collection.">Determina si un objeto <see cref="T:System.Collections.Generic.HashSet`1" /> es un supraconjunto apropiado de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> es un supraconjunto apropiado de <paramref name="other" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a subset of the specified collection.">Determina si un objeto <see cref="T:System.Collections.Generic.HashSet`1" /> es un subconjunto de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> es un subconjunto de <paramref name="other" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a superset of the specified collection.">Determina si un objeto <see cref="T:System.Collections.Generic.HashSet`1" /> es un supraconjunto de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> es un supraconjunto de <paramref name="other" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">Implementa la interfaz <see cref="T:System.Runtime.Serialization.ISerializable" /> y genera el evento de deserialización cuando esta ha finalizado.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Origen del evento de deserialización.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is invalid.">El objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> asociado al objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual no es válido.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and a specified collection share common elements.">Determina si el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual y una colección especificada comparten elementos comunes.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> y <paramref name="other" /> comparten al menos un elemento común; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Quita el elemento especificado de un objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <param name="item" vsli:raw="The element to remove.">Elemento que se va a quitar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see langword="true" /> si el elemento se encuentra y quita correctamente; en caso contrario, <see langword="false" />.  Este método devuelve <see langword="false" /> si <paramref name="item" /> no se encuentra en el objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary vsli:raw="Removes all elements that match the conditions defined by the specified predicate from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado de una colección <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to remove.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones de los elementos que se van a quitar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The number of elements that were removed from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">Número de elementos que se quitaron de la colección <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and the specified collection contain the same elements.">Determina si un objeto <see cref="T:System.Collections.Generic.HashSet`1" /> y la colección especificada contienen los mismos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> es igual a <paramref name="other" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain only elements that are present either in that object or in the specified collection, but not both.">Modifica el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual para que contenga únicamente los elementos que están presentes en ese objeto o en la colección especificada, pero no en ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">Agrega un elemento a un objeto <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">Objeto que se va a agregar al objeto <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; object that can be used to iterate through the collection.">Objeto <see cref="T:System.Collections.Generic.IEnumerator`1" /> que puede usarse para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Objeto <see cref="T:System.Collections.IEnumerator" /> que puede usarse para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary vsli:raw="Sets the capacity of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.">Establece la capacidad de un objeto <see cref="T:System.Collections.Generic.HashSet`1" /> en el número real de elementos que contiene, redondeado a un valor próximo específico de la implementación.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Busca en el conjunto un valor determinado y devuelve un valor igual al que encuentra, si encuentra alguno.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Valor que se va a buscar.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the default value of T when the search yielded no match.">Valor del conjunto encontrado por la búsqueda o el valor predeterminado de T si la búsqueda no ha devuelto ninguna coincidencia.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Valor que indica si la búsqueda se ha realizado correctamente.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain all elements that are present in itself, the specified collection, or both.">Modifica el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual para que contenga todos los elementos que están presentes en él y en la colección especificada o en ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.HashSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; object that is used to determine equality for the values in the set.">Obtiene el objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se utiliza para determinar la igualdad de los valores del conjunto.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; object that is used to determine equality for the values in the set.">Objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se utiliza para determinar la igualdad de los valores del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary vsli:raw="Gets the number of elements that are contained in a set.">Obtiene el número de elementos contenidos en un conjunto.</summary>
      <returns vsli:raw="The number of elements that are contained in the set.">Número de elementos contenidos en el conjunto.</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether a collection is read-only.">Obtiene un valor que indica si una colección es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección es de solo lectura; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">Enumera los elementos de un objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1.Enumerator&quot; /&gt; object.">Libera todos los recursos utilizados por un objeto <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">Desplaza el enumerador al siguiente elemento de la colección <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection at the current position of the enumerator.">Elemento de la colección <see cref="T:System.Collections.Generic.HashSet`1" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator, as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Elemento de la colección situado en la posición actual del enumerador, como un objeto <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary vsli:raw="Represents a doubly linked list.">Representa una lista de doble vínculo.</summary>
      <typeparam name="T" vsli:raw="Specifies the element type of the linked list.">Especifica el tipo de elemento de la lista vinculada.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that is empty.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.LinkedList`1" /> que está vacía.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; and has sufficient capacity to accommodate the number of elements copied.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.LinkedList`1" /> que contiene elementos copiados de la interfaz <see cref="T:System.Collections.IEnumerable" /> especificada y tiene una capacidad suficiente para alojar el número de elementos copiados.</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerable" /> cuyos elementos se copian en el nuevo <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that is serializable with the specified &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.LinkedList`1" />, que se puede serializar con los objetos <see cref="T:System.Runtime.Serialization.SerializationInfo" /> y <see cref="T:System.Runtime.Serialization.StreamingContext" /> especificados.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object containing the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene la información que se requiere para serializar <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object containing the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino de la secuencia serializada asociada al <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary vsli:raw="Adds a new node containing the specified value after the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Agrega un nuevo nodo que contiene el valor especificado después del nodo existente que se haya concretado en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; after which to insert a new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">Objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> después del que se va a insertar un nuevo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</param>
      <param name="value" vsli:raw="The value to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valor que se va a agregar a la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> no está en la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> actual.</exception>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node after the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Agrega el nuevo nodo especificado después del nodo existente que se haya concretado en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; after which to insert &lt;paramref name=&quot;newNode&quot; /&gt;.">Objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> después del cual se va a insertar <paramref name="newNode" />.</param>
      <param name="newNode" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que se va a agregar a la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> es <see langword="null" />.  
  
o bien 
 <paramref name="newNode" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> no está en la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> actual.  
  
o bien 
 <paramref name="newNode" /> pertenece a otra colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary vsli:raw="Adds a new node containing the specified value before the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Agrega un nuevo nodo que contiene el valor especificado antes del nodo existente que se haya concretado en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; before which to insert a new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">Objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> antes del que se va a insertar un nuevo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</param>
      <param name="value" vsli:raw="The value to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valor que se va a agregar a la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> no está en la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> actual.</exception>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node before the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Agrega el nuevo nodo especificado antes del nodo existente que se haya concretado en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; before which to insert &lt;paramref name=&quot;newNode&quot; /&gt;.">Objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> antes del cual se va a insertar <paramref name="newNode" />.</param>
      <param name="newNode" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que se va a agregar a la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> es <see langword="null" />.  
  
o bien 
 <paramref name="newNode" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> no está en la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> actual.  
  
o bien 
 <paramref name="newNode" /> pertenece a otra colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary vsli:raw="Adds a new node containing the specified value at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Agrega un nuevo nodo que contiene el valor especificado al principio de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value" vsli:raw="The value to add at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valor que se va a agregar al principio de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Agrega el nuevo nodo especificado al principio de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Nuevo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que se va a agregar al principio de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> pertenece a otra colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary vsli:raw="Adds a new node containing the specified value at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Agrega un nuevo nodo que contiene el valor especificado al final de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value" vsli:raw="The value to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valor que se agrega al final de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Agrega el nuevo nodo especificado al final de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Nuevo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que se va a agregar al final de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> pertenece a otra colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary vsli:raw="Removes all nodes from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Quita todos los nodos de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary vsli:raw="Determines whether a value is in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Determina si un valor se encuentra en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor que se va a buscar en <see cref="T:System.Collections.Generic.LinkedList`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value" /> se encuentra en la matriz <see cref="T:System.Collections.Generic.LinkedList`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">Copia la totalidad de <see cref="T:System.Collections.Generic.LinkedList`1" /> en una matriz <see cref="T:System.Array" /> unidimensional compatible, comenzando en el índice especificado de la matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.LinkedList`1" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El número de elementos de la <see cref="T:System.Collections.Generic.LinkedList`1" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary vsli:raw="Finds the first node that contains the specified value.">Encuentra el primer nodo que contiene el valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valor que se va a buscar en <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; that contains the specified value, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Primer objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene el valor especificado, si se encuentra; de lo contrario, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary vsli:raw="Finds the last node that contains the specified value.">Encuentra el último nodo que contiene el valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valor que se va a buscar en <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns vsli:raw="The last &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; that contains the specified value, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Último objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene el valor especificado, si se encuentra; de lo contrario, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Implementa la interfaz de <see cref="T:System.Runtime.Serialization.ISerializable" /> y devuelve los datos necesarios para serializar la instancia de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene la información requerida para serializar la instancia de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino de la secuencia serializada asociada a la instancia de la <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">Implementa la interfaz <see cref="T:System.Runtime.Serialization.ISerializable" /> y genera el evento de deserialización cuando esta ha finalizado.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Origen del evento de deserialización.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance is invalid.">El objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> asociado a la instancia de <see cref="T:System.Collections.Generic.LinkedList`1" /> actual no es válido.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified value from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Quita la primera aparición del valor especificado de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value" vsli:raw="The value to remove from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Valor que se va a quitar de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element containing &lt;paramref name=&quot;value&quot; /&gt; is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see langword="true" /> si el elemento que contiene <paramref name="value" /> se quita correctamente; en caso contrario, <see langword="false" />.  Este método también devuelve <see langword="false" /> si no se encontró <paramref name="value" /> en el objeto <see cref="T:System.Collections.Generic.LinkedList`1" /> original.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Removes the specified node from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Quita el nodo especificado de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que se va a quitar de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> no está en la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> actual.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary vsli:raw="Removes the node at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Quita el nodo del principio de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is empty.">La colección <see cref="T:System.Collections.Generic.LinkedList`1" /> está vacía.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary vsli:raw="Removes the node at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Quita el nodo del final de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is empty.">La colección <see cref="T:System.Collections.Generic.LinkedList`1" /> está vacía.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item at the end of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Agrega un elemento al final de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="value" vsli:raw="The value to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Valor que se agrega al final de la colección <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
o bien 
 <paramref name="array" /> no tiene una indización de base cero.  
  
o bien 
El número de elementos de la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.  
  
o bien 
El tipo de la <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the linked list as a collection.">Devuelve un enumerador que recorre en iteración la lista vinculada como colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the linked list as a collection.">Interfaz <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer la lista vinculada como colección.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary vsli:raw="Gets the number of nodes actually contained in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Obtiene el número de nodos que ya están incluidos en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="The number of nodes actually contained in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Número de nodos que ya están incluidos en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary vsli:raw="Gets the first node of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Obtiene el primer nodo de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Primer <see cref="T:System.Collections.Generic.LinkedListNode`1" /> de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary vsli:raw="Gets the last node of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Obtiene el último nodo de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="The last &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Último <see cref="T:System.Collections.Generic.LinkedListNode`1" /> de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.LinkedList`1" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.LinkedList`1" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns the current instance.">Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.LinkedList`1" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Enumera los elementos de un <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1.Enumerator&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Desplaza el enumerador al siguiente elemento de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección). Esta clase no puede heredarse.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">Implementa la interfaz <see cref="T:System.Runtime.Serialization.ISerializable" /> y genera el evento de deserialización cuando esta ha finalizado.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Origen del evento de deserialización.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance is invalid.">El objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> asociado a la instancia de <see cref="T:System.Collections.Generic.LinkedList`1" /> actual no es válido.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Implementa la interfaz de <see cref="T:System.Runtime.Serialization.ISerializable" /> y devuelve los datos necesarios para serializar la instancia de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene la información requerida para serializar la instancia de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">Objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino de la secuencia serializada asociada a la instancia de la <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; at the current position of the enumerator.">Elemento de <see cref="T:System.Collections.Generic.LinkedList`1" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary vsli:raw="Represents a node in a &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. This class cannot be inherited.">Representa un nodo en una clase <see cref="T:System.Collections.Generic.LinkedList`1" />. Esta clase no puede heredarse.</summary>
      <typeparam name="T" vsli:raw="Specifies the element type of the linked list.">Especifica el tipo de elemento de la lista vinculada.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; class, containing the specified value.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene el valor especificado.</summary>
      <param name="value" vsli:raw="The value to contain in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt;.">Valor que va a contener el objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; that the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; belongs to.">Obtiene la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> a la que pertenece el objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" />.</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; that the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; belongs to, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; is not linked.">Una referencia a la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> a la que pertenece el objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" />, o <see langword="null" /> si el objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> no está vinculado.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary vsli:raw="Gets the next node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Obtiene el siguiente nodo de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="A reference to the next node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the current node is the last element (&lt;see cref=&quot;P:System.Collections.Generic.LinkedList`1.Last&quot; /&gt;) of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Una referencia al nodo siguiente en <see cref="T:System.Collections.Generic.LinkedList`1" />, o <see langword="null" /> si el nodo actual es el último elemento (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />) de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary vsli:raw="Gets the previous node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Obtiene el anterior nodo de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns vsli:raw="A reference to the previous node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the current node is the first element (&lt;see cref=&quot;P:System.Collections.Generic.LinkedList`1.First&quot; /&gt;) of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">Una referencia al nodo anterior en <see cref="T:System.Collections.Generic.LinkedList`1" />, o <see langword="null" /> si el nodo actual es el primer elemento (<see cref="P:System.Collections.Generic.LinkedList`1.First" />) de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary vsli:raw="Gets the value contained in the node.">Obtiene el valor que contiene el nodo.</summary>
      <returns vsli:raw="The value contained in the node.">Valor que contiene el nodo.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.ValueRef">
      <summary vsli:raw="Gets a reference to the value held by the node.">Obtiene una referencia al valor que contiene el nodo.</summary>
      <returns vsli:raw="A reference to the value held by the node.">Referencia al valor que contiene el nodo.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary vsli:raw="Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.">Representa una lista de objetos fuertemente tipados a la que se puede obtener acceso por índice. Proporciona métodos para buscar, ordenar y manipular listas.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Tipo de elementos de la lista.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that is empty and has the default initial capacity.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.List`1" /> que está vacía y tiene la capacidad inicial predeterminada.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.List`1" /> que contiene elementos copiados de la colección especificada y tiene una capacidad suficiente para aceptar el número de elementos copiados.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new list.">Colección cuyos elementos se copian en la nueva lista.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that is empty and has the specified initial capacity.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.List`1" /> que está vacía y tiene la capacidad inicial especificada.</summary>
      <param name="capacity" vsli:raw="The number of elements that the new list can initially store.">Número de elementos que puede almacenar inicialmente la lista nueva.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary vsli:raw="Adds an object to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Agrega un objeto al final de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item" vsli:raw="The object to be added to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a agregar al final de <see cref="T:System.Collections.Generic.List`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Agrega los elementos de la colección especificada al final de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="collection" vsli:raw="The collection whose elements should be added to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are &lt;see langword=&quot;null&quot; /&gt;, if type &lt;paramref name=&quot;T&quot; /&gt; is a reference type.">Colección cuyos elementos deben agregarse al final de <see cref="T:System.Collections.Generic.List`1" />. La propia colección no puede ser <see langword="null" />, pero puede contener elementos que sean <see langword="null" /> si el tipo <paramref name="T" /> es un tipo de referencia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary vsli:raw="Returns a read-only &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; wrapper for the current collection.">Devuelve un contenedor de <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> de solo lectura para la colección actual.</summary>
      <returns vsli:raw="An object that acts as a read-only wrapper around the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Objeto que actúa como contenedor de solo lectura para la <see cref="T:System.Collections.Generic.List`1" /> actual.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">Busca la <see cref="T:System.Collections.Generic.List`1" /> completa ordenada para un elemento usando el comparador predeterminado y devuelve el índice de base cero del elemento.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">El comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" /> del tipo <paramref name="T" />.</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">Índice de base cero de <paramref name="item" /> en la <see cref="T:System.Collections.Generic.List`1" /> ordenada, si es que se encuentra <paramref name="item" />; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="item" /> o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Busca la <see cref="T:System.Collections.Generic.List`1" /> completa ordenada para un elemento usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a usar al comparar elementos.  
  
o bien 
 <see langword="null" /> para utilizar el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> es <see langword="null" />, y el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" /> del tipo <paramref name="T" />.</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">Índice de base cero de <paramref name="item" /> en la <see cref="T:System.Collections.Generic.List`1" /> ordenada, si es que se encuentra <paramref name="item" />; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="item" /> o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Busca un elemento en un intervalo de elementos del objeto <see cref="T:System.Collections.Generic.List`1" /> ordenado usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Índice inicial de base cero del intervalo que se va a buscar.</param>
      <param name="count" vsli:raw="The length of the range to search.">Longitud del intervalo en el que se va a buscar.</param>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.  
  
o bien 
 <paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> y <paramref name="count" /> no denotan un intervalo válido en <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> es <see langword="null" />, y el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" /> del tipo <paramref name="T" />.</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">Índice de base cero de <paramref name="item" /> en la <see cref="T:System.Collections.Generic.List`1" /> ordenada, si es que se encuentra <paramref name="item" />; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="item" /> o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Quita todos los elementos de <see cref="T:System.Collections.Generic.List`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Determina si un elemento se encuentra en <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.List`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se encuentra en la matriz <see cref="T:System.Collections.Generic.List`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
      <summary vsli:raw="Converts the elements in the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to another type, and returns a list containing the converted elements.">Convierte en otro tipo los elementos incluidos en la <see cref="T:System.Collections.Generic.List`1" /> actual y devuelve una lista que contiene los elementos convertidos.</summary>
      <param name="converter" vsli:raw="A &lt;see cref=&quot;T:System.Converter`2&quot; /&gt; delegate that converts each element from one type to another type.">Delegado <see cref="T:System.Converter`2" /> que convierte cada elemento de un tipo en otro tipo.</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">Tipo de los elementos de la matriz de destino.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;converter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="converter" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> del tipo de destino que contiene los elementos convertidos de la <see cref="T:System.Collections.Generic.List`1" /> actual.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the beginning of the target array.">Copia toda la <see cref="T:System.Collections.Generic.List`1" /> en una matriz unidimensional compatible, empezando en el principio de la matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.List`1" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the number of elements that the destination &lt;paramref name=&quot;array&quot; /&gt; can contain.">El número de elementos del <see cref="T:System.Collections.Generic.List`1" /> de origen es mayor que el número de elementos que puede contener el <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified index of the target array.">Copia la totalidad de <see cref="T:System.Collections.Generic.List`1" /> en una matriz unidimensional compatible, empezando por el índice especificado de la matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.List`1" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El número de elementos de la <see cref="T:System.Collections.Generic.List`1" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified index of the target array.">Copia un intervalo de elementos de <see cref="T:System.Collections.Generic.List`1" /> en una matriz unidimensional compatible, empezando en el índice especificado de la matriz de destino.</summary>
      <param name="index" vsli:raw="The zero-based index in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at which copying begins.">Índice de base cero de la <see cref="T:System.Collections.Generic.List`1" /> de origen donde comienza la copia.</param>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.List`1" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Número de elementos que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.  
  
o bien 
 <paramref name="arrayIndex" /> es menor que 0.  
  
o bien 
 <paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt; of the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements from &lt;paramref name=&quot;index&quot; /&gt; to the end of the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> es igual o mayor que la longitud de <see cref="P:System.Collections.Generic.List`1.Count" /> de <see cref="T:System.Collections.Generic.List`1" /> de origen.  
  
o bien 
El número de elementos desde <paramref name="index" /> hasta el final de <see cref="T:System.Collections.Generic.List`1" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; contains elements that match the conditions defined by the specified predicate.">Determina si <see cref="T:System.Collections.Generic.List`1" /> contiene elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to search for.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones de los elementos que se van a buscar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <see cref="T:System.Collections.Generic.List`1" /> contiene uno o varios elementos que cumplen las condiciones definidas por el predicado especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la primera aparición en toda la matriz <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Primer elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Recupera todos los elementos que coinciden con las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to search for.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones de los elementos que se van a buscar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> que contiene todos los elementos que cumplen las condiciones definidas por el predicado especificado, si se encuentran; en caso contrario, devuelve una <see cref="T:System.Collections.Generic.List`1" /> vacía.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la matriz <see cref="T:System.Collections.Generic.List`1" /> que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Índice inicial de base cero de la búsqueda.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.Generic.List`1" />.  
  
o bien 
 <paramref name="count" /> es menor que 0.  
  
o bien 
 <paramref name="startIndex" /> y <paramref name="count" /> no especifican una sección válida en <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the specified index to the last element.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la matriz <see cref="T:System.Collections.Generic.List`1" /> que va desde el índice especificado hasta el último elemento.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Índice inicial de base cero de la búsqueda.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en toda la matriz <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la última aparición en toda la matriz <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Último elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la matriz <see cref="T:System.Collections.Generic.List`1" /> que contiene el número especificado de elementos y termina en el índice especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.Generic.List`1" />.  
  
o bien 
 <paramref name="count" /> es menor que 0.  
  
o bien 
 <paramref name="startIndex" /> y <paramref name="count" /> no especifican una sección válida en <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to the specified index.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la matriz <see cref="T:System.Collections.Generic.List`1" /> que va desde el primer elemento hasta el índice especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en toda la matriz <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Realiza la acción especificada en cada elemento de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="action" vsli:raw="The &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate to perform on each element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Delegado <see cref="T:System.Action`1" /> para realizar la acción en cada elemento de <see cref="T:System.Collections.Generic.List`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An element in the collection has been modified.">Un elemento de la colección se ha modificado.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.List`1.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Crea una copia superficial de un intervalo de elementos en la <see cref="T:System.Collections.Generic.List`1" /> de origen.</summary>
      <param name="index" vsli:raw="The zero-based &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; index at which the range starts.">Índice de <see cref="T:System.Collections.Generic.List`1" /> de base cero en el que empieza el intervalo.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Número de elementos del intervalo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.  
  
o bien 
 <paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> y <paramref name="count" /> no denotan un intervalo válido de elementos en la <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="A shallow copy of a range of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Copia superficial de un intervalo de elementos en la <see cref="T:System.Collections.Generic.List`1" /> de origen.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición en todo el <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.List`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la primera aparición de <paramref name="item" /> en la totalidad de <see cref="T:System.Collections.Generic.List`1" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the specified index to the last element.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Generic.List`1" /> que abarca desde el índice especificado hasta el último elemento.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.List`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">Índice de base cero de la primera aparición de <paramref name="item" /> dentro del intervalo de elementos de <see cref="T:System.Collections.Generic.List`1" /> que abarca desde <paramref name="index" /> hasta el último elemento, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Generic.List`1" /> que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.List`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.Generic.List`1" />.  
  
o bien 
 <paramref name="count" /> es menor que 0.  
  
o bien 
 <paramref name="index" /> y <paramref name="count" /> no especifican una sección válida en <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">Índice de base cero de la primera aparición de <paramref name="item" /> dentro del intervalo de elementos de <see cref="T:System.Collections.Generic.List`1" /> que comienza en <paramref name="index" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an element into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the specified index.">Inserta un elemento en <see cref="T:System.Collections.Generic.List`1" /> en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to insert. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a insertar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> es menor que 0.  
  
o bien 
 <paramref name="index" /> es mayor que <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the specified index.">Inserta los elementos de una colección en <see cref="T:System.Collections.Generic.List`1" /> en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Índice de base cero donde se deben insertar los nuevos elementos.</param>
      <param name="collection" vsli:raw="The collection whose elements should be inserted into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are &lt;see langword=&quot;null&quot; /&gt;, if type &lt;paramref name=&quot;T&quot; /&gt; is a reference type.">Colección cuyos elementos se deben insertar en <see cref="T:System.Collections.Generic.List`1" />. La propia colección no puede ser <see langword="null" />, pero puede contener elementos que sean <see langword="null" /> si el tipo <paramref name="T" /> es un tipo de referencia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> es menor que 0.  
  
o bien 
 <paramref name="index" /> es mayor que <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición en toda la <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.List`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la última aparición de <paramref name="item" /> en todo el objeto <see cref="T:System.Collections.Generic.List`1" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to the specified index.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Generic.List`1" /> que abarca desde el primer elemento hasta el último índice especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.List`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la última aparición de <paramref name="item" /> dentro del intervalo de elementos de <see cref="T:System.Collections.Generic.List`1" /> que abarca desde el primer elemento hasta <paramref name="index" />, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Generic.List`1" /> que contiene el número de elementos especificado y termina en el índice determinado.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.List`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.Generic.List`1" />.  
  
o bien 
 <paramref name="count" /> es menor que 0.  
  
o bien 
 <paramref name="index" /> y <paramref name="count" /> no especifican una sección válida en <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la última aparición de <paramref name="item" /> dentro del intervalo de elementos de <see cref="T:System.Collections.Generic.List`1" /> que contiene el número de elementos de <paramref name="count" /> y termina en <paramref name="index" />, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a quitar de <see cref="T:System.Collections.Generic.List`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Es <see langword="true" /> si <paramref name="item" /> se quita correctamente; en caso contrario, es <see langword="false" />.  Este método también devuelve <see langword="false" /> si no se encuentra <paramref name="item" /> en <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to remove.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones de los elementos que se van a quitar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The number of elements removed from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Número de elementos que se han quitado de <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Quita el elemento situado en el índice especificado de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> es menor que 0.  
  
o bien 
 <paramref name="index" /> es igual o mayor que <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Quita todos los elementos de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">Índice inicial de base cero del intervalo de elementos que se va a quitar.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Número de elementos que se va a quitar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.  
  
o bien 
 <paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> y <paramref name="count" /> no denotan un intervalo válido de elementos en la <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Invierte el orden de los elementos en la <see cref="T:System.Collections.Generic.List`1" /> completa.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range.">Invierte el orden de los elementos en el intervalo especificado.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Índice inicial de base cero del intervalo que se va a invertir.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Número de elementos del intervalo que se va a invertir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.  
  
o bien 
 <paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> y <paramref name="count" /> no denotan un intervalo válido de elementos en la <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the default comparer.">Ordena los elementos de toda la <see cref="T:System.Collections.Generic.List`1" /> utilizando el comparador predeterminado.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">El comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" /> del tipo <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified comparer.">Ordena los elementos en la <see cref="T:System.Collections.Generic.List`1" /> completa usando el comparador especificado.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> es <see langword="null" />, y el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" /> del tipo <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The implementation of &lt;paramref name=&quot;comparer&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparer&quot; /&gt; might not return 0 when comparing an item with itself.">La implementación de <paramref name="comparer" /> produjo un error durante la ordenación. Por ejemplo, es posible que <paramref name="comparer" /> no devuelva 0 al comparar un elemento consigo mismo.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Ordena los elementos de toda la <see cref="T:System.Collections.Generic.List`1" /> utilizando el <see cref="T:System.Comparison`1" /> especificado.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">
        <see cref="T:System.Comparison`1" /> que se va a utilizar al comparar elementos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The implementation of &lt;paramref name=&quot;comparison&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparison&quot; /&gt; might not return 0 when comparing an item with itself.">La implementación de <paramref name="comparison" /> produjo un error durante la ordenación. Por ejemplo, es posible que <paramref name="comparison" /> no devuelva 0 al comparar un elemento consigo mismo.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified comparer.">Ordena los elementos en un intervalo de elementos de la matriz <see cref="T:System.Collections.Generic.List`1" /> usando el comparador especificado.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Índice inicial de base cero del intervalo que se va a ordenar.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Longitud del intervalo que se va a ordenar.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.  
  
o bien 
 <paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The implementation of &lt;paramref name=&quot;comparer&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparer&quot; /&gt; might not return 0 when comparing an item with itself.">
        <paramref name="index" /> y <paramref name="count" /> no especifican un intervalo válido en <see cref="T:System.Collections.Generic.List`1" />.  
  
o bien 
La implementación de <paramref name="comparer" /> produjo un error durante la ordenación. Por ejemplo, es posible que <paramref name="comparer" /> no devuelva 0 al comparar un elemento consigo mismo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> es <see langword="null" />, y el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" /> del tipo <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
o bien 
 <paramref name="array" /> no tiene una indización de base cero.  
  
o bien 
El número de elementos de la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de la <paramref name="array" /> de destino.  
  
o bien 
El tipo de la <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Agrega un elemento a <see cref="T:System.Collections.IList" />.</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> que se va a agregar a <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> es de un tipo que no se puede asignar a <see cref="T:System.Collections.IList" />.</exception>
      <returns vsli:raw="The position into which the new element was inserted.">Posición en la que se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">Determina si <see cref="T:System.Collections.IList" /> contiene un valor específico.</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se encuentra en la matriz <see cref="T:System.Collections.IList" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Determina el índice de un elemento específico de <see cref="T:System.Collections.IList" />.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Objeto que se va a buscar en <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> es de un tipo que no se puede asignar a <see cref="T:System.Collections.IList" />.</exception>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if found in the list; otherwise, -1.">Devuelve el índice de <paramref name="item" /> si se encuentra en la lista; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified index.">Inserta un elemento en la interfaz <see cref="T:System.Collections.IList" />, en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Objeto que se va a insertar en <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> es de un tipo que no se puede asignar a <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.IList" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Objeto que se va a quitar de <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> es de un tipo que no se puede asignar a <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a new array.">Copia los elementos de <see cref="T:System.Collections.Generic.List`1" /> en una nueva matriz.</summary>
      <returns vsli:raw="An array containing copies of the elements of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Matriz que contiene copias de los elementos de <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if that number is less than a threshold value.">Establece la capacidad en el número real de elementos que hay en <see cref="T:System.Collections.Generic.List`1" />, si dicho número es inferior a un valor umbral.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; matches the conditions defined by the specified predicate.">Determina si cada elemento de <see cref="T:System.Collections.Generic.List`1" /> cumple las condiciones que define el predicado especificado.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions to check against the elements.">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones que los elementos deben cumplir.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">Es <see langword="true" /> si cada elemento de <see cref="T:System.Collections.Generic.List`1" /> cumple las condiciones definidas por el predicado especificado; en caso contrario, es <see langword="false" />. Si la lista no tiene ningún elemento, el valor devuelto es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary vsli:raw="Gets or sets the total number of elements the internal data structure can hold without resizing.">Obtiene o establece el número total de elementos que puede contener la estructura de datos interna sin cambiar el tamaño.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;see cref=&quot;P:System.Collections.Generic.List`1.Capacity&quot; /&gt; is set to a value that is less than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <see cref="P:System.Collections.Generic.List`1.Capacity" /> se establece en un valor que es menor que <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is not enough memory available on the system.">No hay memoria suficiente en el sistema.</exception>
      <returns vsli:raw="The number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; can contain before resizing is required.">Número de elementos que puede contener <see cref="T:System.Collections.Generic.List`1" /> antes de que sea necesario cambiar el tamaño.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Número de elementos contenidos en <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> es menor que 0.  
  
o bien 
 <paramref name="index" /> es igual o mayor que <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
      <returns vsli:raw="The element at the specified index.">Elemento en el índice especificado.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.List`1" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.List`1" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns the current instance.">Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.List`1" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; en caso contrario, <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.List`1" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.IList" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> es de solo lectura; de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.List`1" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The property is set and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">La propiedad ya está establecida y el tipo de <paramref name="value" /> no se puede asignar a la interfaz <see cref="T:System.Collections.IList" />.</exception>
      <returns vsli:raw="The element at the specified index.">Elemento en el índice especificado.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Enumera los elementos de un <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.List`1.Enumerator&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.Collections.Generic.List`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Desplaza el enumerador al siguiente elemento de <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the current position of the enumerator.">Elemento de <see cref="T:System.Collections.Generic.List`1" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the current position of the enumerator.">Elemento de <see cref="T:System.Collections.Generic.List`1" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary vsli:raw="Represents a first-in, first-out collection of objects.">Representa una colección de objetos de tipo primero en entrar, primero en salir.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of elements in the queue.">Especifica el tipo de elementos en la cola.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that is empty and has the default initial capacity.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Queue`1" /> que está vacía y tiene la capacidad inicial predeterminada.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Queue`1" /> que contiene elementos copiados de la colección especificada y tiene una capacidad suficiente para aceptar el número de elementos copiados.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Colección cuyos elementos se copian en el nuevo <see cref="T:System.Collections.Generic.Queue`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that is empty and has the specified initial capacity.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Queue`1" /> que está vacía y tiene la capacidad inicial especificada.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; can contain.">Número inicial de elementos que puede contener la colección <see cref="T:System.Collections.Generic.Queue`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Quita todos los objetos de la colección <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Determina si un elemento se encuentra en <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.Queue`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se encuentra en la matriz <see cref="T:System.Collections.Generic.Queue`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">Copia los elementos de <see cref="T:System.Collections.Generic.Queue`1" /> en una <see cref="T:System.Array" /> unidimensional existente, a partir del índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.Queue`1" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El número de elementos de la <see cref="T:System.Collections.Generic.Queue`1" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary vsli:raw="Removes and returns the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Quita y devuelve el objeto al comienzo de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">La colección <see cref="T:System.Collections.Generic.Queue`1" /> está vacía.</exception>
      <returns vsli:raw="The object that is removed from the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Objeto que se quita del principio de <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an object to the end of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Agrega un objeto al final de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.Queue`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.Queue`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary vsli:raw="Returns the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; without removing it.">Devuelve un objeto al principio de <see cref="T:System.Collections.Generic.Queue`1" /> sin eliminarlo.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">La colección <see cref="T:System.Collections.Generic.Queue`1" /> está vacía.</exception>
      <returns vsli:raw="The object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Objeto situado al principio de <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
o bien 
 <paramref name="array" /> no tiene una indización de base cero.  
  
o bien 
El número de elementos de la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.  
  
o bien 
El tipo de la <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; elements to a new array.">Copia los elementos <see cref="T:System.Collections.Generic.Queue`1" /> en una matriz nueva.</summary>
      <returns vsli:raw="A new array containing elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Nueva matriz que contiene elementos copiados de <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, if that number is less than 90 percent of current capacity.">Establece la capacidad en el número real de elementos en la colección <see cref="T:System.Collections.Generic.Queue`1" />, si este número supone menos del 90 por ciento de la capacidad actual.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)">
      <summary vsli:raw="Removes the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, and copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter.">Quita el objeto situado al principio de la <see cref="T:System.Collections.Generic.Queue`1" /> y lo copia en el <paramref name="result" /> parámetro.</summary>
      <param name="result" vsli:raw="The removed object.">El objeto quitado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is successfully removed; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">
        <see langword="true" /> Si el objeto se quita correctamente; <see langword="false" /> si <see cref="T:System.Collections.Generic.Queue`1" /> está vacío.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryPeek(`0@)">
      <summary vsli:raw="Returns a value that indicates whether there is an object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, and if one is present, copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter. The object is not removed from the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Devuelve un valor que indica si hay un objeto al principio de <see cref="T:System.Collections.Generic.Queue`1" /> , y si uno está presente, lo copia en el <paramref name="result" /> parámetro. El objeto no se quita de <see cref="T:System.Collections.Generic.Queue`1" /> .</summary>
      <param name="result" vsli:raw="If present, the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;.">Si está presente, el objeto situado al principio de <see cref="T:System.Collections.Generic.Queue`1" /> ; de lo contrario, el valor predeterminado de <typeparamref name="T" /> .</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">
        <see langword="true" /> es si hay un objeto al principio de <see cref="T:System.Collections.Generic.Queue`1" /> ; <see langword="false" /><see cref="T:System.Collections.Generic.Queue`1" /> es si está vacío.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Número de elementos contenidos en <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Queue`1" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, this property always returns the current instance.">Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Queue`1" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Enumera los elementos de un <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1.Enumerator&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">Desplaza el enumerador al siguiente elemento de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; at the current position of the enumerator.">Elemento de <see cref="T:System.Collections.Generic.Queue`1" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.Generic.ReferenceEqualityComparer">
      <summary vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; that uses reference equality (&lt;see cref=&quot;M:System.Object.ReferenceEquals(System.Object,System.Object)&quot; /&gt;) instead of value equality (&lt;see cref=&quot;M:System.Object.Equals(System.Object)&quot; /&gt;) when comparing two object instances.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que usa la igualdad de referencia (<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />) en lugar de la igualdad de valores (<see cref="M:System.Object.Equals(System.Object)" />) al comparar dos instancias de objeto.</summary>
    </member>
    <member name="M:System.Collections.Generic.ReferenceEqualityComparer.Equals(System.Object,System.Object)">
      <summary vsli:raw="Determines whether two object references refer to the same object instance.">Determina si dos referencias de objeto hacen referencia a la misma instancia de objeto.</summary>
      <param name="x" vsli:raw="The first object to compare.">Primer objeto que se va a comparar.</param>
      <param name="y" vsli:raw="The second object to compare.">Segundo objeto que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; refer to the same object instance or if both are &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, si tanto <paramref name="x" /> como <paramref name="y" /> hacen referencia a la misma instancia de objeto o si ambos son <see langword="null" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.ReferenceEqualityComparer.GetHashCode(System.Object)">
      <summary vsli:raw="Returns a hash code for the specified object. The returned hash code is based on the object identity, not on the contents of the object.">Devuelve un código hash para el objeto especificado. El código hash devuelto se basa en la identidad del objeto, no en su contenido.</summary>
      <param name="obj" vsli:raw="The object for which to retrieve the hash code.">Objeto para el que se recupera el código hash.</param>
      <returns vsli:raw="A hash code for the identity of &lt;paramref name=&quot;obj&quot; /&gt;.">Código hash para la identidad de <paramref name="obj" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.ReferenceEqualityComparer.Instance">
      <summary vsli:raw="Gets the singleton &lt;see cref=&quot;T:System.Collections.Generic.ReferenceEqualityComparer&quot; /&gt; instance.">Obtiene la instancia de singleton <see cref="T:System.Collections.Generic.ReferenceEqualityComparer" />.</summary>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary vsli:raw="Represents a collection of key/value pairs that are sorted on the key.">Representa una colección de pares de clave y valor que se ordenan por claves.</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo de los valores del diccionario.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that is empty and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation for the key type.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que está vacía y utiliza la implementación predeterminada de <see cref="T:System.Collections.Generic.IComparer`1" /> para el tipo de clave.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that is empty and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to compare keys.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que está vacía y utiliza la implementación especificada de <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar las claves.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a utilizar para comparar claves o <see langword="null" /> si se va a utilizar el <see cref="T:System.Collections.Generic.Comparer`1" /> predeterminado para el tipo de la clave.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation for the key type.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que contiene elementos copiados del <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado y que utiliza la implementación predeterminada de <see cref="T:System.Collections.Generic.IComparer`1" /> para el tipo de clave.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> cuyos elementos se copian en el nuevo <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contiene una o varias claves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to compare keys.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que contiene elementos copiados del <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado y que utiliza la implementación indicada de <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar las claves.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> cuyos elementos se copian en el nuevo <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a utilizar para comparar claves o <see langword="null" /> si se va a utilizar el <see cref="T:System.Collections.Generic.Comparer`1" /> predeterminado para el tipo de la clave.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contiene una o varias claves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value into the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Agrega un elemento con la clave y el valor especificados a <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor del elemento que se va a agregar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Ya existe un elemento con la misma clave en <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Quita todos los elementos de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key.">Determina si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Clave que se buscará en <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified value.">Determina si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiene un elemento con el valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor que se va a buscar en <see cref="T:System.Collections.Generic.SortedDictionary`2" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiene un elemento con el valor especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; to the specified array of &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structures, starting at the specified index.">Copia los elementos de <see cref="T:System.Collections.Generic.SortedDictionary`2" /> a la matriz especificada de estructuras <see cref="T:System.Collections.Generic.KeyValuePair`2" />, empezando en el índice que se haya indicado.</summary>
      <param name="array" vsli:raw="The one-dimensional array of &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structures that is the destination of the elements copied from the current &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; The array must have zero-based indexing.">Matriz unidimensional de estructuras <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que es el destino de los elementos copiados del <see cref="T:System.Collections.Generic.SortedDictionary`2" /> actual. Los índices de la matriz deben ser de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El número de elementos de la <see cref="T:System.Collections.Generic.SortedDictionary`2" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Quita el elemento con la clave especificada de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Es <see langword="true" /> si el elemento se quita correctamente; en caso contrario, es <see langword="false" />.  Este método también devuelve <see langword="false" /> si no se encuentra <paramref name="key" /> en <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyValuePair" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Ya existe un elemento con la misma clave en <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific key and value.">Determina si <see cref="T:System.Collections.Generic.ICollection`1" /> contiene una clave y un valor específicos.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que se va a buscar en <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="keyValuePair" /> se encuentra en la matriz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of the specified element from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Quita la primera aparición del elemento especificado de <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que se quita de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Es <see langword="true" /> si <paramref name="keyValuePair" /> se ha quitado correctamente de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si no se encuentra <paramref name="keyValuePair" /> en <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array, starting at the specified array index.">Copia los elementos de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> en una matriz, comenzando en el índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.ICollection`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
o bien 
 <paramref name="array" /> no tiene una indización de base cero.  
  
o bien 
El número de elementos de la <see cref="T:System.Collections.Generic.ICollection`1" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.  
  
o bien 
El tipo de la <see cref="T:System.Collections.Generic.ICollection`1" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Agrega un elemento con la clave y el valor proporcionados a <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Objeto que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">El objeto que se va a usar como valor del elemento que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <paramref name="key" /> es de un tipo que no se puede asignar al tipo de clave <paramref name="TKey" /> de la colección <see cref="T:System.Collections.IDictionary" />.  
  
o bien 
 <paramref name="value" /> es de un tipo que no se puede asignar al tipo de valor <paramref name="TValue" /> de la interfaz <see cref="T:System.Collections.IDictionary" />.  
  
o bien 
Ya existe un elemento con la misma clave en <see cref="T:System.Collections.IDictionary" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">Determina si <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Clave que se buscará en <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Devuelve una interfaz <see cref="T:System.Collections.IDictionaryEnumerator" /> para la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Estructura <see cref="T:System.Collections.IDictionaryEnumerator" /> para la colección <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Quita el elemento con la clave especificada de <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtiene el valor asociado a la clave especificada.</summary>
      <param name="key" vsli:raw="The key of the value to get.">Clave del valor que se va a obtener.</param>
      <param name="value" vsli:raw="When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Cuando este método devuelve el resultado, el valor asociado a la clave especificada, si se encuentra la clave; en caso contrario, el valor predeterminado para el tipo del parámetro <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; used to order the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtiene el <see cref="T:System.Collections.Generic.IComparer`1" /> utilizado para ordenar los elementos del <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; used to order the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;">Interfaz <see cref="T:System.Collections.Generic.IComparer`1" /> utilizada para ordenar los elementos de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtiene el número de pares clave-valor incluidos en <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Número de pares clave-valor incluidos en <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">Obtiene o establece el valor asociado a la clave especificada.</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">Clave del valor que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">La propiedad se recupera y <paramref name="key" /> no existe en la colección.</exception>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt;, and a set operation creates a new element with the specified key.">Valor asociado a la clave especificada. Si no se encuentra la clave especificada, en el caso de una operación Get, se producirá una excepción <see cref="T:System.Collections.Generic.KeyNotFoundException" /> y, en el caso de una operación Set, se creará un nuevo elemento con la clave especificada.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtiene una colección que contiene las claves de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> que contiene las claves de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />. En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtiene una colección que contiene las claves de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="A collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Colección que contiene las claves de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtiene una colección que contiene los valores de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="A collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Colección que contiene los valores de <see cref="T:System.Collections.Generic.SortedDictionary`2" /> .</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; en caso contrario, <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.IDictionary" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IDictionary" /> es de solo lectura; de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key of the element to get.">Clave del elemento que se va a obtener.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Se está asignando un valor, pero <paramref name="key" /> es de un tipo no asignable al tipo de clave <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.  
  
o bien 
Se está asignando un valor, pero <paramref name="value" /> es de un tipo no asignable al tipo de valor <paramref name="TValue" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
      <returns vsli:raw="The element with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Elemento con la clave especificada, o <see langword="null" /> si <paramref name="key" /> no está en el diccionario o si <paramref name="key" /> es de un tipo no asignable al tipo de clave <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene las claves de la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> que contiene las claves de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene los valores de la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> que contiene los valores de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Obtiene una colección que contiene los valores de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Colección <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> que contiene los valores de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Enumera los elementos de un <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.Enumerator&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Desplaza el enumerador al siguiente elemento de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; at the current position of the enumerator.">Elemento de <see cref="T:System.Collections.Generic.SortedDictionary`2" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary vsli:raw="Gets the element at the current position of the enumerator as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt; structure.">Obtiene el elemento que está en la posición actual del enumerador como una estructura <see cref="T:System.Collections.DictionaryEntry" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the dictionary, as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt; structure.">Elemento de la colección que está en la posición actual del diccionario, como una estructura <see cref="T:System.Collections.DictionaryEntry" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary vsli:raw="Gets the key of the element at the current position of the enumerator.">Obtiene la clave del elemento situado en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The key of the element in the collection at the current position of the enumerator.">Clave del elemento de la colección situado en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary vsli:raw="Gets the value of the element at the current position of the enumerator.">Obtiene el valor del elemento situado en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The value of the element in the collection at the current position of the enumerator.">Valor del elemento de la colección situado en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary vsli:raw="Represents the collection of keys in a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. This class cannot be inherited.">Representa la colección de claves de <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Esta clase no puede heredarse.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; class that reflects the keys in the specified &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> que refleja las claves de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> especificada.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; whose keys are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> cuyas claves se reflejan en la nueva colección <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; elements to an existing one-dimensional array, starting at the specified array index.">Copia los elementos de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> en una matriz unidimensional existente, a partir del índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El número de elementos de la <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Se produce siempre; la colección es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Quita todos los elementos de <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Se produce siempre; la colección es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Determina si <see cref="T:System.Collections.Generic.ICollection`1" /> contiene el valor especificado.</summary>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> si el elemento se encuentra en la colección <see cref="T:System.Collections.Generic.ICollection`1" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objeto que se va a quitar de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Se produce siempre; la colección es de solo lectura.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> si el elemento se ha quitado correctamente de <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, <see langword="false" />. Este método también devuelve <see langword="false" /> si no se encuentra el elemento en <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at a particular array index.">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en una matriz, comenzando en un índice concreto de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.ICollection" />. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
o bien 
 <paramref name="array" /> no tiene una indización de base cero.  
  
o bien 
El número de elementos de la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.  
  
o bien 
El tipo de la <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Número de elementos contenidos en <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Enumera los elementos de un <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">Desplaza el enumerador al siguiente elemento de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; at the current position of the enumerator.">Elemento de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary vsli:raw="Represents the collection of values in a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. This class cannot be inherited.">Representa la colección de claves de una clase <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Esta clase no puede heredarse.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; class that reflects the values in the specified &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> que refleja los valores de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> especificada.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; whose values are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> cuyos valores se reflejan en la nueva colección <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; elements to an existing one-dimensional array, starting at the specified array index.">Copia los elementos de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> en una matriz unidimensional existente, a partir del índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El número de elementos de la <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />. Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Se produce siempre; la colección es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Quita todos los elementos de <see cref="T:System.Collections.Generic.ICollection`1" />. Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Se produce siempre; la colección es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specified value.">Determina si <see cref="T:System.Collections.Generic.ICollection`1" /> contiene un valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se encuentra en la matriz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />. Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objeto que se va a quitar de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">Se produce siempre; la colección es de solo lectura.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Es <see langword="true" /> si <paramref name="item" /> se quita correctamente de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si no se encuentra <paramref name="item" /> en <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at a particular array index.">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en una matriz, comenzando en un índice concreto de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.ICollection" />. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
o bien 
 <paramref name="array" /> no tiene una indización de base cero.  
  
o bien 
El número de elementos de la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.  
  
o bien 
El tipo de la <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Número de elementos contenidos en <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns the current instance.">Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Enumera los elementos de un <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">Desplaza el enumerador al siguiente elemento de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; at the current position of the enumerator.">Elemento de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedList`2">
      <summary vsli:raw="Represents a collection of key/value pairs that are sorted by key based on the associated &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation.">Representa una colección de pares clave-valor que se ordenan por claves según la implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> asociada.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the collection.">Tipo de claves de la colección.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the collection.">Tipo de valores de la colección.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedList`2" /> que está vacía, tiene la capacidad inicial predeterminada y utiliza el <see cref="T:System.Collections.Generic.IComparer`1" /> predeterminado.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedList`2" /> que está vacía, tiene la capacidad inicial predeterminada y utiliza la interfaz <see cref="T:System.Collections.Generic.IComparer`1" /> especificada.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a usar al comparar claves.  
  
o bien 
 <see langword="null" /> para utilizar el objeto <see cref="T:System.Collections.Generic.Comparer`1" /> predeterminado para el tipo de la clave.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, has sufficient capacity to accommodate the number of elements copied, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedList`2" /> que contiene elementos copiados del <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado, tiene una capacidad suficiente para alojar el número de elementos copiados y utiliza el <see cref="T:System.Collections.Generic.IComparer`1" /> predeterminado.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> cuyos elementos se copian en el nuevo <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contiene una o varias claves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, has sufficient capacity to accommodate the number of elements copied, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedList`2" /> que contiene elementos copiados del <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado, tiene una capacidad suficiente para alojar el número de elementos copiados y utiliza el <see cref="T:System.Collections.Generic.IComparer`1" /> especificado.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> cuyos elementos se copian en el nuevo <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a usar al comparar claves.  
  
o bien 
 <see langword="null" /> para utilizar el objeto <see cref="T:System.Collections.Generic.Comparer`1" /> predeterminado para el tipo de la clave.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> contiene una o varias claves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedList`2" /> que está vacía, tiene la capacidad inicial especificada y utiliza el <see cref="T:System.Collections.Generic.IComparer`1" /> predeterminado.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">Número inicial de elementos que puede contener la colección <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedList`2" /> que está vacía, tiene la capacidad inicial especificada y utiliza la interfaz <see cref="T:System.Collections.Generic.IComparer`1" /> especificada.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">Número inicial de elementos que puede contener la colección <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a usar al comparar claves.  
  
o bien 
 <see langword="null" /> para utilizar el objeto <see cref="T:System.Collections.Generic.Comparer`1" /> predeterminado para el tipo de la clave.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value into the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Agrega un elemento con la clave y el valor especificados a <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor del elemento que se va a agregar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Ya existe un elemento con la misma clave en <see cref="T:System.Collections.Generic.SortedList`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Quita todos los elementos de <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains a specific key.">Determina si <see cref="T:System.Collections.Generic.SortedList`2" /> contiene una clave específica.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Clave que se buscará en <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección <see cref="T:System.Collections.Generic.SortedList`2" /> contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains a specific value.">Determina si <see cref="T:System.Collections.Generic.SortedList`2" /> contiene un valor específico.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor que se va a buscar en <see cref="T:System.Collections.Generic.SortedList`2" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <see cref="T:System.Collections.Generic.SortedList`2" /> contiene un elemento con el valor especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> de tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" /> para <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
      <summary vsli:raw="Searches for the specified key and returns the zero-based index within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Busca la clave especificada y devuelve el índice de base cero de la totalidad de <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Clave que se buscará en <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;key&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de <paramref name="key" /> de la totalidad de <see cref="T:System.Collections.Generic.SortedList`2" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
      <summary vsli:raw="Searches for the specified value and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Busca el valor especificado y devuelve el índice de base cero de la primera aparición de la totalidad de <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.  The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valor que se va a buscar en <see cref="T:System.Collections.Generic.SortedList`2" />.  El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if found; otherwise, -1.">Índice de base cero de la primera aparición de <paramref name="value" /> en la totalidad de <see cref="T:System.Collections.Generic.SortedList`2" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Quita el elemento con la clave especificada de <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Es <see langword="true" /> si el elemento se quita correctamente; en caso contrario, es <see langword="false" />.  Este método también devuelve <see langword="false" /> si no se encontró <paramref name="key" /> en el objeto <see cref="T:System.Collections.Generic.SortedList`2" /> original.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Quita el elemento situado en el índice especificado de <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Count&quot; /&gt;.">
        <paramref name="index" /> es menor que cero.  
  
o bien 
 <paramref name="index" /> es igual o mayor que <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Agrega un par clave-valor a <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific element.">Determina si <see cref="T:System.Collections.Generic.ICollection`1" /> contiene un elemento específico.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Objeto <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que se va a buscar en la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="keyValuePair" /> se encuentra en la matriz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia los elementos de <see cref="T:System.Collections.Generic.ICollection`1" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.ICollection`1" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El número de elementos de la <see cref="T:System.Collections.Generic.ICollection`1" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific key/value pair from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Quita la primera aparición de un par clave-valor específico de <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que se va a quitar de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Es <see langword="true" /> si <paramref name="keyValuePair" /> se ha quitado correctamente de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si no se encontró <paramref name="keyValuePair" /> en el objeto <see cref="T:System.Collections.Generic.ICollection`1" /> original.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
o bien 
 <paramref name="array" /> no tiene una indización de base cero.  
  
o bien 
El número de elementos de la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de la <paramref name="array" /> de destino.  
  
o bien 
El tipo de la <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Agrega un elemento con la clave y el valor proporcionados a <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">
        <see cref="T:System.Object" /> que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">
        <see cref="T:System.Object" /> que se va a utilizar como valor del elemento que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <paramref name="key" /> es de un tipo que no se puede asignar al tipo de clave <paramref name="TKey" /> de la colección <see cref="T:System.Collections.IDictionary" />.  
  
o bien 
 <paramref name="value" /> es de un tipo que no se puede asignar al tipo de valor <paramref name="TValue" /> de la interfaz <see cref="T:System.Collections.IDictionary" />.  
  
o bien 
Ya existe un elemento con la misma clave en <see cref="T:System.Collections.IDictionary" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">Determina si <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Clave que se buscará en <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Devuelve una interfaz <see cref="T:System.Collections.IDictionaryEnumerator" /> para la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Estructura <see cref="T:System.Collections.IDictionaryEnumerator" /> para la colección <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Quita el elemento con la clave especificada de <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if that number is less than 90 percent of current capacity.">Establece la capacidad en el número real de elementos en la colección <see cref="T:System.Collections.Generic.SortedList`2" />, si este número supone menos del 90 por ciento de la capacidad actual.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtiene el valor asociado a la clave especificada.</summary>
      <param name="key" vsli:raw="The key whose value to get.">Clave cuyo valor se va a obtener.</param>
      <param name="value" vsli:raw="When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Cuando este método devuelve el resultado, el valor asociado a la clave especificada, si se encuentra la clave; en caso contrario, el valor predeterminado para el tipo del parámetro <paramref name="value" />. Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección <see cref="T:System.Collections.Generic.SortedList`2" /> contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Capacity">
      <summary vsli:raw="Gets or sets the number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">Obtiene o establece el número de elementos que puede contener <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Capacity&quot; /&gt; is set to a value that is less than &lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Count&quot; /&gt;.">
        <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> se establece en un valor que es menor que <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is not enough memory available on the system.">No hay memoria suficiente en el sistema.</exception>
      <returns vsli:raw="The number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">Número de elementos que puede contener <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; for the sorted list.">Obtiene el <see cref="T:System.Collections.Generic.IComparer`1" /> para la lista ordenada.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; for the current &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.IComparable`1" /> de la <see cref="T:System.Collections.Generic.SortedList`2" /> actual.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Obtiene el número de pares clave-valor incluidos en <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Número de pares clave-valor incluidos en <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">Obtiene o establece el valor asociado a la clave especificada.</summary>
      <param name="key" vsli:raw="The key whose value to get or set.">Clave cuyo valor se va a obtener o a establecer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">La propiedad se recupera y <paramref name="key" /> no existe en la colección.</exception>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt; and a set operation creates a new element using the specified key.">Valor asociado a la clave especificada. Si no se encuentra la clave especificada, en el caso de una operación Get se producirá una excepción <see cref="T:System.Collections.Generic.KeyNotFoundException" />. Y en el caso de una operación Set, se creará un nuevo elemento utilizando la clave especificada.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, in sorted order.">Obtiene una colección que contiene las claves de <see cref="T:System.Collections.Generic.SortedList`2" />, de forma ordenada.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IList`1" /> que contiene las claves de <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />. En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedList`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An object containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Objeto que contiene los valores de <see cref="T:System.Collections.Generic.IDictionary`2" /> .</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an enumerable collection that contains the keys in the read-only dictionary.">Obtiene una colección enumerable que contiene las claves del diccionario de solo lectura.</summary>
      <returns vsli:raw="An enumerable collection that contains the keys in the read-only dictionary.">Colección enumerable que contiene las claves del diccionario de solo lectura.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an enumerable collection that contains the values in the read-only dictionary.">Obtiene una colección enumerable que contiene los valores del diccionario de solo lectura.</summary>
      <returns vsli:raw="An enumerable collection that contains the values in the read-only dictionary.">Colección enumerable que contiene los valores del diccionario de solo lectura.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedList`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns the current instance.">Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedList`2" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; en caso contrario, <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedList`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.IDictionary" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IDictionary" /> es de solo lectura; de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedList`2" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">La clave del elemento que se obtiene o establece.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Se está asignando un valor, pero <paramref name="key" /> es de un tipo no asignable al tipo de clave <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedList`2" />.  
  
o bien 
Se está asignando un valor, pero <paramref name="value" /> es de un tipo no asignable al tipo de valor <paramref name="TValue" /> de <see cref="T:System.Collections.Generic.SortedList`2" />.</exception>
      <returns vsli:raw="The element with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Elemento con la clave especificada, o <see langword="null" /> si <paramref name="key" /> no está en el diccionario o si <paramref name="key" /> es de un tipo no asignable al tipo de clave <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene las claves de la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> que contiene las claves de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene los valores de la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> que contiene los valores de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Obtiene una colección que contiene los valores de <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">Colección <see cref="T:System.Collections.Generic.IList`1" /> que contiene los valores de la colección <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary vsli:raw="Represents a collection of objects that is maintained in sorted order.">Representa una colección de objetos que se mantiene en el criterio de ordenación.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">Tipo de elementos del conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that uses a specified comparer.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedSet`1" /> que usa un comparador especificado.</summary>
      <param name="comparer" vsli:raw="The default comparer to use for comparing objects.">Comparador predeterminado que se va a usar para comparar los objetos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains elements copied from a specified enumerable collection.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedSet`1" /> que contiene los elementos copiados de una colección enumerable especificada.</summary>
      <param name="collection" vsli:raw="The enumerable collection to be copied.">Colección enumerable que se va a copiar.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains elements copied from a specified enumerable collection and that uses a specified comparer.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedSet`1" /> que contiene los elementos copiados de una colección enumerable especificada y que usa un comparador especificado.</summary>
      <param name="collection" vsli:raw="The enumerable collection to be copied.">Colección enumerable que se va a copiar.</param>
      <param name="comparer" vsli:raw="The default comparer to use for comparing objects.">Comparador predeterminado que se va a usar para comparar los objetos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains serialized data.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedSet`1" /> que contiene datos serializados.</summary>
      <param name="info" vsli:raw="The object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Objeto que contiene la información necesaria para serializar el objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context" vsli:raw="The structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Estructura que contiene el origen y el destino de la secuencia serializada asociada al objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary vsli:raw="Adds an element to the set and returns a value that indicates if it was successfully added.">Agrega un elemento al conjunto y devuelve un valor que indica si se ha agregado correctamente.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Elemento que se va a agregar al conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is added to the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se agrega al conjunto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the set.">Quita todos los elementos del conjunto.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains a specific element.">Determina si el conjunto contiene un elemento específico.</summary>
      <param name="item" vsli:raw="The element to locate in the set.">Elemento que se debe buscar en el conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains &lt;paramref name=&quot;item&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el conjunto contiene <paramref name="item" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the beginning of the target array.">Copia la totalidad de <see cref="T:System.Collections.Generic.SortedSet`1" /> en una matriz unidimensional compatible, empezando en el principio de la matriz de destino.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; exceeds the number of elements that the destination array can contain.">El número de elementos de la <see cref="T:System.Collections.Generic.SortedSet`1" /> de origen supera el número de elementos que puede contener la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">Copia toda la <see cref="T:System.Collections.Generic.SortedSet`1" /> en una matriz unidimensional compatible, empezando en el índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.SortedSet`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">El número de elementos de la matriz de origen es mayor que el espacio disponible desde el <paramref name="index" /> hasta el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a specified number of elements from &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">Copia un número especificado de elementos de <see cref="T:System.Collections.Generic.SortedSet`1" /> a una matriz unidimensional compatible, empezando en el índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.SortedSet`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Número de elementos que se van a copiar.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">El número de elementos de la matriz de origen es mayor que el espacio disponible desde el <paramref name="index" /> hasta el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.  
  
o bien 
 <paramref name="count" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used to create a collection that contains individual sets.">Devuelve un objeto <see cref="T:System.Collections.IEqualityComparer" /> que se puede usar para crear una colección que contiene conjuntos individuales.</summary>
      <returns vsli:raw="A comparer for creating a collection of sets.">Un comparador para crear una colección de conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object, according to a specified comparer, that can be used to create a collection that contains individual sets.">Devuelve un objeto <see cref="T:System.Collections.IEqualityComparer" />, según un comparador especificado, que se puede usar para crear una colección que contiene los conjuntos individuales.</summary>
      <param name="memberEqualityComparer" vsli:raw="The comparer to use for creating the returned comparer.">Comparador que se va a usar para crear el comparador devuelto.</param>
      <returns vsli:raw="A comparer for creating a collection of sets.">Un comparador para crear una colección de conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements that are in a specified collection from the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Quita del objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual todos los elementos que están en la colección especificada.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Colección de elementos que se van a quitar del objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns vsli:raw="An enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in sorted order.">Enumerador que itera por <see cref="T:System.Collections.Generic.SortedSet`1" /> en orden.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data that you must have to serialize a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Implementa la interfaz <see cref="T:System.Runtime.Serialization.ISerializable" /> y devuelve los datos necesarios para serializar un objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene la información necesaria para serializar el objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Estructura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino del flujo serializado asociado al objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary vsli:raw="Returns a view of a subset in a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Devuelve una vista de un subconjunto en <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="lowerValue" vsli:raw="The lowest desired value in the view.">Valor más bajo deseado en la vista.</param>
      <param name="upperValue" vsli:raw="The highest desired value in the view.">Valor más alto deseado en la vista.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;lowerValue&quot; /&gt; is more than &lt;paramref name=&quot;upperValue&quot; /&gt; according to the comparer.">
        <paramref name="lowerValue" /> es mayor que <paramref name="upperValue" /> según el comparador.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="A tried operation on the view was outside the range specified by &lt;paramref name=&quot;lowerValue&quot; /&gt; and &lt;paramref name=&quot;upperValue&quot; /&gt;.">Una operación probada en la vista estaba fuera del intervalo especificado por <paramref name="lowerValue" /> y <paramref name="upperValue" />.</exception>
      <returns vsli:raw="A subset view that contains only the values in the specified range.">Una vista de subconjunto que contiene solo los valores del intervalo especificado.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains only elements that are also in a specified collection.">Modifica el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper subset of the specified collection.">Determina si un objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un subconjunto apropiado de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un subconjunto apropiado de <paramref name="other" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper superset of the specified collection.">Determina si un objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un supraconjunto apropiado de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un supraconjunto apropiado de <paramref name="other" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a subset of the specified collection.">Determina si un objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un subconjunto de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual es un subconjunto de <paramref name="other" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a superset of the specified collection.">Determina si un objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un supraconjunto de la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un supraconjunto de <paramref name="other" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface, and raises the deserialization event when the deserialization is completed.">Implementa la interfaz <see cref="T:System.Runtime.Serialization.ISerializable" /> y genera el evento de deserialización cuando esta ha finalizado.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Origen del evento de deserialización.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is invalid.">El objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> asociado al objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual no es válido.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and a specified collection share common elements.">Determina si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual y una colección especificada comparten elementos comunes.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> y <paramref name="other" /> comparten al menos un elemento común; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes a specified item from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Quita un elemento especificado de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="item" vsli:raw="The element to remove.">Elemento que se va a quitar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is found and successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el elemento se encuentra y quita correctamente; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary vsli:raw="Removes all elements that match the conditions defined by the specified predicate from a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Quita de <see cref="T:System.Collections.Generic.SortedSet`1" /> todos los elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The number of elements that were removed from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; collection.">Número de elementos que se quitaron de la colección <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in reverse order.">Devuelve un <see cref="T:System.Collections.Generic.IEnumerable`1" /> que itera en orden inverso por <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns vsli:raw="An enumerator that iterates over the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in reverse order.">Un enumerador que itera en orden inverso por <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and the specified collection contain the same elements.">Determina si el objeto<see cref="T:System.Collections.Generic.SortedSet`1" /> actual y la colección especificada contienen los mismos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual es igual a <paramref name="other" />; de lo contrario es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains only elements that are present either in the current object or in the specified collection, but not both.">Modifica el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual para que únicamente contenga elementos que están presentes en el objeto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">Agrega un elemento a un objeto <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">Objeto que se va a agregar al objeto <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">Copia toda la <see cref="T:System.Collections.Generic.SortedSet`1" /> en una matriz unidimensional compatible, empezando en el índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.SortedSet`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">El número de elementos de la matriz de origen es mayor que el espacio disponible desde el <paramref name="index" /> hasta el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.IDeserializationCallback&quot; /&gt; interface, and raises the deserialization event when the deserialization is completed.">Implementa la interfaz <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> y genera el evento de deserialización cuando esta ha finalizado.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Origen del evento de deserialización.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance is invalid.">El objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> asociado a la instancia de <see cref="T:System.Collections.Generic.SortedSet`1" /> actual no es válido.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface, and returns the data that you need to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Implementa la interfaz <see cref="T:System.Runtime.Serialization.ISerializable" /> y devuelve los datos necesarios para serializar la instancia de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene la información necesaria para serializar la instancia de <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Estructura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino de la secuencia serializada asociada a la instancia de <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Busca en el conjunto un valor determinado y devuelve un valor igual al que encuentra, si encuentra alguno.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Valor que se va a buscar.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the default value of T when the search yielded no match.">Valor del conjunto encontrado por la búsqueda o el valor predeterminado de T si la búsqueda no ha devuelto ninguna coincidencia.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Valor que indica si la búsqueda se ha realizado correctamente.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains all elements that are present in either the current object or the specified collection.">Modifica el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual para que contenga todos los elementos que están presentes en el objeto actual o en la colección especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; object that is used to order the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Obtiene el objeto <see cref="T:System.Collections.Generic.IComparer`1" /> que se usa para ordenar los valores de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns vsli:raw="The comparer that is used to order the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Comparador que se usa para ordenar los valores de <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Obtiene el número de elementos de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns vsli:raw="The number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">Número de elementos incluidos en <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;, as defined by the comparer.">Obtiene el valor máximo de <see cref="T:System.Collections.Generic.SortedSet`1" />, tal y como define el comparador.</summary>
      <returns vsli:raw="The maximum value in the set.">Valor máximo del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;, as defined by the comparer.">Obtiene el valor mínimo de <see cref="T:System.Collections.Generic.SortedSet`1" />, tal y como define el comparador.</summary>
      <returns vsli:raw="The minimum value in the set.">Valor mínimo del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether a &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is read-only.">Obtiene un valor que indica si un objeto <see cref="T:System.Collections.ICollection" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección es de solo lectura; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si se sincroniza el acceso a la colección <see cref="T:System.Collections.ICollection" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />. En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">Enumera los elementos de un objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1.Enumerator&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; collection.">Desplaza el enumerador al siguiente elemento de la colección <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">Implementa la interfaz <see cref="T:System.Runtime.Serialization.ISerializable" /> y genera el evento de deserialización cuando esta ha finalizado.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">Origen del evento de deserialización.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance is invalid.">El objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> asociado a la instancia de <see cref="T:System.Collections.Generic.SortedSet`1" /> actual no es válido.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Implementa la interfaz de <see cref="T:System.Runtime.Serialization.ISerializable" /> y devuelve los datos necesarios para serializar la instancia de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene la información requerida para serializar la instancia de <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">Objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino de la secuencia serializada asociada a la instancia de la <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary vsli:raw="Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.">Representa una colección LIFO (el último en entrar es el primero en salir) de tamaño variable de instancias del mismo tipo especificado.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of elements in the stack.">Especifica el tipo de elementos de la pila.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that is empty and has the default initial capacity.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Stack`1" /> que está vacía y tiene la capacidad inicial predeterminada.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Stack`1" /> que contiene elementos copiados de la colección especificada y tiene una capacidad suficiente para aceptar el número de elementos copiados.</summary>
      <param name="collection" vsli:raw="The collection to copy elements from.">Colección de la que se van a copiar los elementos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Stack`1" /> que está vacía y tiene la capacidad inicial especificada o la capacidad inicial predeterminada, la que sea mayor.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; can contain.">Número inicial de elementos que puede contener la colección <see cref="T:System.Collections.Generic.Stack`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Quita todos los objetos de la colección <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Determina si un elemento se encuentra en <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.Stack`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se encuentra en la matriz <see cref="T:System.Collections.Generic.Stack`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">Copia el <see cref="T:System.Collections.Generic.Stack`1" /> a un <see cref="T:System.Array" /> unidimensional existente, empezando por el índice especificado de la matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.Stack`1" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">El número de elementos de la <see cref="T:System.Collections.Generic.Stack`1" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Devuelve un enumerador para la colección <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.Stack`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Estructura <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; without removing it.">Devuelve el objeto situado al principio de <see cref="T:System.Collections.Generic.Stack`1" /> sin eliminarlo.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">La colección <see cref="T:System.Collections.Generic.Stack`1" /> está vacía.</exception>
      <returns vsli:raw="The object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Objeto situado al principio de la colección <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary vsli:raw="Removes and returns the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Quita y devuelve el objeto situado al principio de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">La colección <see cref="T:System.Collections.Generic.Stack`1" /> está vacía.</exception>
      <returns vsli:raw="The object removed from the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Objeto eliminado del principio de la colección <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Inserta un objeto al principio de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <param name="item" vsli:raw="The object to push onto the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objeto que se va a insertar en la colección <see cref="T:System.Collections.Generic.Stack`1" />. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> es multidimensional.  
  
o bien 
 <paramref name="array" /> no tiene una indización de base cero.  
  
o bien 
El número de elementos de la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de la <paramref name="array" /> de destino.  
  
o bien 
El tipo de la <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; to a new array.">Copia <see cref="T:System.Collections.Generic.Stack`1" /> en una nueva matriz.</summary>
      <returns vsli:raw="A new array containing copies of the elements of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Nueva matriz que contiene copias de los elementos de <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, if that number is less than 90 percent of current capacity.">Establece la capacidad en el número real de elementos en la colección <see cref="T:System.Collections.Generic.Stack`1" />, si este número supone menos del 90 por ciento de la capacidad actual.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPeek(`0@)">
      <summary vsli:raw="Returns a value that indicates whether there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, and if one is present, copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter. The object is not removed from the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Devuelve un valor que indica si hay un objeto en la parte superior de <see cref="T:System.Collections.Generic.Stack`1" /> , y si uno está presente, lo copia en el <paramref name="result" /> parámetro. El objeto no se quita de <see cref="T:System.Collections.Generic.Stack`1" /> .</summary>
      <param name="result" vsli:raw="If present, the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;.">Si está presente, el objeto situado en la parte superior de <see cref="T:System.Collections.Generic.Stack`1" /> ; en caso contrario, el valor predeterminado de <typeparamref name="T" /> .</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">
        <see langword="true" /> es si hay un objeto en la parte superior de <see cref="T:System.Collections.Generic.Stack`1" /> ; <see langword="false" /> es si <see cref="T:System.Collections.Generic.Stack`1" /> está vacío.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPop(`0@)">
      <summary vsli:raw="Returns a value that indicates whether there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, and if one is present, copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter, and removes it from the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Devuelve un valor que indica si hay un objeto en la parte superior de la <see cref="T:System.Collections.Generic.Stack`1" /> , y si uno está presente, lo copia en el <paramref name="result" /> parámetro y lo quita de <see cref="T:System.Collections.Generic.Stack`1" /> .</summary>
      <param name="result" vsli:raw="If present, the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;.">Si está presente, el objeto situado en la parte superior de <see cref="T:System.Collections.Generic.Stack`1" /> ; en caso contrario, el valor predeterminado de <typeparamref name="T" /> .</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">
        <see langword="true" /> es si hay un objeto en la parte superior de <see cref="T:System.Collections.Generic.Stack`1" /> ; <see langword="false" /> es si <see cref="T:System.Collections.Generic.Stack`1" /> está vacío.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Número de elementos contenidos en <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Stack`1" />, esta propiedad siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, this property always returns the current instance.">Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Stack`1" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Enumera los elementos de un <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1.Enumerator&quot; /&gt;.">Libera todos los recursos que usa <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">Desplaza el enumerador al siguiente elemento de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.">Establece el enumerador en su posición inicial (antes del primer elemento de la colección). Esta clase no puede heredarse.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">La colección se modificó después de que el enumerador se creara.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; at the current position of the enumerator.">Elemento de <see cref="T:System.Collections.Generic.Stack`1" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtiene el elemento en la posición actual del enumerador.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">El enumerador se coloca delante del primer elemento o detrás del último elemento de la colección.</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.StructuralComparisons">
      <summary vsli:raw="Provides objects for performing a structural comparison of two collection objects.">Proporciona objetos para realizar una comparación estructural de dos objetos de colección.</summary>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralComparer">
      <summary vsli:raw="Gets a predefined object that performs a structural comparison of two objects.">Obtiene un objeto predefinido que realiza una comparación estructural de dos objetos.</summary>
      <returns vsli:raw="A predefined object that is used to perform a structural comparison of two collection objects.">Un objeto predefinido que se usa para realizar una comparación estructural de dos objetos de colección.</returns>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralEqualityComparer">
      <summary vsli:raw="Gets a predefined object that compares two objects for structural equality.">Obtiene un objeto predefinido que compara dos objetos para comprobar su igualdad estructural.</summary>
      <returns vsli:raw="A predefined object that is used to compare two collection objects for structural equality.">Un objeto predefinido que se usa para comparar dos objetos de colección y comprobar su igualdad estructural.</returns>
    </member>
  </members>
</doc>
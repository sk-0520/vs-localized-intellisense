<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">Предоставляет данные для события <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using no parameters.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AddingNewEventArgs" /> без параметров.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using the specified object as the new item.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AddingNewEventArgs" />, используя заданный объект в качестве нового элемента.</summary>
      <param name="newObject" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the new item value.">Объект <see cref="T:System.Object" />, используемый в качестве значения нового элемента.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary vsli:raw="Gets or sets the object to be added to the binding list.">Получает или задает объект, добавляемый в связанный список.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to be added as a new item to the associated collection.">Объект <see cref="T:System.Object" />, добавляемый в качестве нового элемента в связанную коллекцию.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">Представляет метод обработки события <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
      <param name="sender" vsli:raw="The source of the event, typically a data container or data-bound collection.">Источник события, обычно, — контейнер с данными или коллекция, связанная с данными.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.AddingNewEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary vsli:raw="Specifies the value to pass to a property to cause the property to get its value from another source. This is known as ambience. This class cannot be inherited.">Указывает значение, которое нужно передать в свойство, чтобы свойство получило свое значение из другого источника. Это называется окружением. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Boolean value for its value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданное значение типа Boolean.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an 8-bit unsigned integer for its value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданное значение 8-разрядного целого числа без знака.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Unicode character for its value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя значение знака Юникод.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a double-precision floating-point number for its value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя значение с плавающей запятой с двойной точностью.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 16-bit signed integer for its value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданное значение 16-разрядного целого числа со знаком.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 32-bit signed integer for its value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданное значение 32-разрядного целого числа со знаком.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 64-bit signed integer for its value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданное значение 64-разрядного целого числа со знаком.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an object for its value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя в качестве значения заданный объект.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a single-precision floating point number for its value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя значение с плавающей запятой обычной точности.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a string for its value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя строку в качестве значения.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given the value and its type.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AmbientValueAttribute" />, используя заданные значение и тип.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Тип <see cref="T:System.Type" /> параметра <paramref name="value" />.</param>
      <param name="value" vsli:raw="The value for this attribute.">Значение этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Определяет, равен ли указанный объект <see cref="T:System.ComponentModel.AmbientValueAttribute" /> текущему объекту <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.AmbientValueAttribute" />, с которым сравнивается текущий объект <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанный объект <see cref="T:System.ComponentModel.AmbientValueAttribute" /> равен текущему объекту <see cref="T:System.ComponentModel.AmbientValueAttribute" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary vsli:raw="Gets the object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Возвращает объект, который является значением этого атрибута <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</summary>
      <returns vsli:raw="The object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Объект, являющийся значением этого атрибута <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Array&quot; /&gt; objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Array" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ArrayConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ArrayConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Преобразовывает указанное значение объекта в указанный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Язык и региональные параметры, в которые будет выполнено преобразование <paramref name="value" />.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter.">Возвращает коллекцию свойств для типа массива, заданного параметром.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">Объект <see cref="T:System.Object" />, задающий тип массива, для которого нужно получить свойства.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Массив типа <see cref="T:System.Attribute" />, который будет использоваться как фильтр.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for an array, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, предоставляемыми для массива, или <see langword="null" /> в случае отсутствия свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties.">Возвращает значение, показывающее, поддерживает ли свойства этот объект.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, так как для поиска свойств данного объекта следует вызывать метод <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.  Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary vsli:raw="Represents a collection of attributes.">Представляет коллекцию атрибутов.</summary>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.">Определяет пустую коллекцию, которую можно использовать, не прибегая к созданию новой. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection.">Массив элементов типа <see cref="T:System.Attribute" />, предоставляющий атрибуты для этой коллекции.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributes" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary vsli:raw="Determines whether this collection of attributes has the specified attribute.">Определяет, содержит ли коллекция атрибутов указанный атрибут.</summary>
      <param name="attribute" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">Элемент класса <see cref="T:System.Attribute" />, который нужно найти в коллекции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если коллекция содержит атрибут или является атрибутом по умолчанию для этого типа атрибута; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary vsli:raw="Determines whether this attribute collection contains all the specified attributes in the attribute array.">Определяет, содержит ли коллекция атрибутов все указанные атрибуты в массиве атрибутов.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">Массив элементов типа <see cref="T:System.Attribute" />, которые нужно найти в коллекции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains all the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если коллекция содержит все атрибуты; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the collection to an array, starting at the specified index.">Копирует коллекцию в массив, начиная с указанного индекса.</summary>
      <param name="array" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to copy the collection to.">Массив <see cref="T:System.Array" />, в который копируется коллекция.</param>
      <param name="index" vsli:raw="The index to start from.">Начальный индекс.</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from an existing &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">Создает новую коллекцию <see cref="T:System.ComponentModel.AttributeCollection" /> из существующей коллекции <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
      <param name="existing" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from which to create the copy.">Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, используемая для создания копии.</param>
      <param name="newAttributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection. Can be &lt;see langword=&quot;null&quot; /&gt;.">Массив элементов типа <see cref="T:System.Attribute" />, предоставляющий атрибуты для этой коллекции. Может иметь значение <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;existing&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="existing" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that is a copy of &lt;paramref name=&quot;existing&quot; /&gt;.">Новая коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, являющаяся копией коллекции <paramref name="existing" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Возвращает <see cref="T:System.Attribute" /> по умолчанию с заданным типом <see cref="T:System.Type" />.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the attribute to retrieve.">Тип <see cref="T:System.Type" /> извлекаемого атрибута.</param>
      <returns vsli:raw="The default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;paramref name=&quot;attributeType&quot; /&gt;.">
        <see cref="T:System.Attribute" /> по умолчанию с заданным типом <paramref name="attributeType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this collection.">Возвращает перечислитель для этой коллекции.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Перечислитель типа <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary vsli:raw="Determines whether a specified attribute is the same as an attribute in the collection.">Определяет, совпадает ли указанный атрибут с атрибутом в коллекции.</summary>
      <param name="attribute" vsli:raw="An instance of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to compare with the attributes in this collection.">Экземпляр атрибута <see cref="T:System.Attribute" />, сравниваемый с атрибутами в коллекции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если атрибут содержится в коллекции и имеет то же значение, что и атрибут в коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary vsli:raw="Determines whether the attributes in the specified array are the same as the attributes in the collection.">Определяет, совпадают ли атрибуты в указанном массиве атрибутов с атрибутами в коллекции.</summary>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; to compare with the attributes in this collection.">Массив атрибутов <see cref="T:System.CodeDom.MemberAttributes" />, сравниваемых с атрибутами в этой коллекции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все атрибуты, входящие в массив, содержатся в коллекции и их значения совпадают со значениями атрибутов в коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Возвращает объект <see cref="T:System.Collections.IEnumerator" /> для <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.IEnumerator" /> для <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary vsli:raw="Gets the attribute collection.">Получает коллекцию атрибутов.</summary>
      <returns vsli:raw="The attribute collection.">Коллекция атрибутов.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary vsli:raw="Gets the number of attributes.">Возвращает количество атрибутов.</summary>
      <returns vsli:raw="The number of attributes.">Количество атрибутов.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the attribute with the specified index number.">Возвращает атрибут с указанным номером индекса.</summary>
      <param name="index" vsli:raw="The zero-based index of &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">Отсчитываемый от нуля индекс элемента <see cref="T:System.ComponentModel.AttributeCollection" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified index number.">Объект <see cref="T:System.Attribute" /> с заданным индексом.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary vsli:raw="Gets the attribute with the specified type.">Возвращает атрибут указанного типа.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to get from the collection.">Тип <see cref="T:System.Type" /> атрибута <see cref="T:System.Attribute" />, извлекаемого из коллекции.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified type or, if the attribute does not exist, the default value for the attribute type.">Возвращает атрибут <see cref="T:System.Attribute" /> указанного типа, а если такого атрибута не существует, то значение по умолчанию для типа этого атрибута.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Возвращает количество элементов, содержащихся в коллекции.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Количество элементов, содержащихся в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread-safe).">Возвращает значение, указывающее на то, синхронизирован ли доступ к коллекции (потокобезопасный).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если доступ к коллекции является синхронизированным (потокобезопасным). В противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Объект, который может быть использован для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary vsli:raw="Enables attribute redirection. This class cannot be inherited.">Включает перенаправление атрибутов. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AttributeProviderAttribute" />, используя заданное имя типа.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">Имя задаваемого типа.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name and property name.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AttributeProviderAttribute" />, используя заданное имя типа и имя свойства.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">Имя задаваемого типа.</param>
      <param name="propertyName" vsli:raw="The name of the property for which attributes will be retrieved.">Имя свойства, для которого будут возвращены атрибуты.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.AttributeProviderAttribute" />, используя заданный тип.</summary>
      <param name="type" vsli:raw="The type to specify.">Задаваемый тип.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary vsli:raw="Gets the name of the property for which attributes will be retrieved.">Возвращает имя свойства, для которого будут возвращены атрибуты.</summary>
      <returns vsli:raw="The name of the property for which attributes will be retrieved.">Имя свойства, для которого будут возвращены атрибуты.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary vsli:raw="Gets the assembly qualified type name passed into the constructor.">Возвращает имя типа, переданное в конструктор, с указанием сборки.</summary>
      <returns vsli:raw="The assembly qualified name of the type specified in the constructor.">Имя типа с указанием имя сборки для типа, заданного в конструкторе.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary vsli:raw="Provides a base type converter for nonfloating-point numerical types.">Предоставляет преобразователь базовых типов для числовых типов без плавающей запятой.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Определяет, может ли данный преобразователь преобразовывать объект заданного типа источника в собственный тип преобразователя.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type from which you want to convert.">Тип <see cref="T:System.Type" />, представляющий конечный тип преобразования.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если данный преобразователь может выполнить операцию, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, показывающее, может ли данный преобразователь преобразовать объект с помощью контекста в конечный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">
        <see cref="T:System.Type" /> представляет нужный результат конвертирования.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если данный преобразователь может выполнить операцию, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">Преобразует указанный объект в тип, используемый преобразователем.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для представления числа.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <exception cref="T:System.Exception" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">Преобразует указанный объект в другой тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для представления числа.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Тип, в который требуется преобразовать объект.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary vsli:raw="Specifies whether a member is typically used for binding. This class cannot be inherited.">Определяет, используется ли обычно член для привязки данных. Этот класс не наследуется.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.BindableAttribute.No&quot; /&gt;. This field is read-only.">Задает значение по умолчанию для атрибута <see cref="T:System.ComponentModel.BindableAttribute" />, равное <see cref="F:System.ComponentModel.BindableAttribute.No" />. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not typically used for binding. This field is read-only.">Указывает, что свойство не предназначено для привязки данных. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is typically used for binding. This field is read-only.">Указывает, что это свойство обычно используется для привязки данных. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with a Boolean value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindableAttribute" />, используя значение типа Boolean.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы использовать свойство для связывания; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы использовать свойство для связывания; в противном случае — значение <see langword="false" />.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with one of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindableAttribute" /> с использованием одного из стандартных значений <see cref="T:System.ComponentModel.BindableSupport" />.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.BindableSupport" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.BindableSupport" />.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; objects are equal.">Определяет равенство двух объектов <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="obj" vsli:raw="The object to compare.">Объект для сравнения.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if it is not equal.">Значение <see langword="true" />, если заданный <see cref="T:System.ComponentModel.BindableAttribute" /> равен текущему атрибуту <see cref="T:System.ComponentModel.BindableAttribute" />; значение <see langword="false" />, если эти атрибуты не равны.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Служит хэш-функцией для класса <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.BindableAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">Определяет, является ли этот атрибут используемым по умолчанию.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если атрибут является значением по умолчанию для данного класса атрибутов; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating that a property is typically used for binding.">Возвращает значение, указывающее, что свойство обычно используется для привязки данных.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is typically used for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство обычно используется для привязки данных, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary vsli:raw="Gets a value indicating the direction or directions of this property's data binding.">Возвращает значение, показывающее направление или направления этого связывания данных со свойством.</summary>
      <returns vsli:raw="The direction of this property's data binding.">Направление привязки данных этого свойства.</returns>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary vsli:raw="Specifies values to indicate whether a property can be bound to a data element or another property.">Задает значения, указывающие, может ли свойство быть связано с элементом данных или другим свойством.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary vsli:raw="The property is set to the default.">Свойство установлено равным значению по умолчанию.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary vsli:raw="The property is not bindable at design time.">Это свойство не может быть связано во время разработки.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary vsli:raw="The property is bindable at design time.">Это свойство может быть связано во время разработки.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary vsli:raw="Specifies whether the template can be bound one way or two ways.">Определяет, можно ли привязать этот шаблон односторонним или двусторонним образом.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary vsli:raw="The template can only accept property values. Used with a generic &lt;see cref=&quot;T:System.Web.UI.ITemplate&quot; /&gt;.">Шаблон может только принимать значения свойств. Используется с общим шаблоном <see cref="T:System.Web.UI.ITemplate" />.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary vsli:raw="The template can accept and expose property values. Used with an &lt;see cref=&quot;T:System.Web.UI.IBindableTemplate&quot; /&gt;.">Шаблон может принимать и предоставлять значения свойств. Используется с шаблоном <see cref="T:System.Web.UI.IBindableTemplate" />.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary vsli:raw="Provides a generic collection that supports data binding.">Предоставляет универсальную коллекцию, которая поддерживает привязку данных.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Тип элементов в списке.</typeparam>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary vsli:raw="Occurs before an item is added to the list.">Происходит перед добавлением элемента список.</summary>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary vsli:raw="Occurs when the list or an item in the list changes.">Происходит при изменениях в списке или при изменении элемента списка.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class using default values.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindingList`1" /> со значениями по умолчанию.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class with the specified list.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BindingList`1" /> с указанным списком.</summary>
      <param name="list" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; of items to be contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">Список <see cref="T:System.Collections.Generic.IList`1" /> элементов, включаемых в список <see cref="T:System.ComponentModel.BindingList`1" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary vsli:raw="Adds a new item to the collection.">Добавляет новый элемент в коллекцию.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Forms.BindingSource.AllowNew&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A public parameterless constructor could not be found for the current item type.">Свойству <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> задано значение <see langword="false" />.  
  
-или- 
Для текущего типа элемента не удалось найти открытый конструктор без параметров.</exception>
      <returns vsli:raw="The item added to the list.">Элемент, который нужно добавить в список.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary vsli:raw="Adds a new item to the end of the collection.">Добавляет новый элемент в конец коллекции.</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The new item is not the same type as the objects contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">Тип нового элемента не совпадает с типом объектов, содержащихся в списке <see cref="T:System.ComponentModel.BindingList`1" />.</exception>
      <returns vsli:raw="The item that was added to the collection.">Элемент, добавленный в коллекцию.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the items if overridden in a derived class; otherwise, throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">При переопределении в производном классе сортирует элементы; в противном случае вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that specifies the property to sort on.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, определяющий свойство для сортировки.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">Метод не переопределяется в производном классе.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item.">Уничтожает ожидающий новый элемент.</summary>
      <param name="itemIndex" vsli:raw="The index of the of the new item to be added.">Индекс добавляемого нового элемента</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary vsli:raw="Removes all elements from the collection.">Удаляет все элементы из коллекции.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">Фиксирует незафиксированный новый элемент в коллекции.</summary>
      <param name="itemIndex" vsli:raw="The index of the new item to be added.">Индекс добавляемого нового элемента.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Searches for the index of the item that has the specified property descriptor with the specified value, if searching is implemented in a derived class; otherwise, a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Выполняет поиск индекса элемента, у которого заданный дескриптор свойств равен заданному значению, если поиск реализуется в производном классе; в противном случае — исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search for.">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, который требуется найти.</param>
      <param name="key" vsli:raw="The value of &lt;paramref name=&quot;prop&quot; /&gt; to match.">Значение параметр <paramref name="prop" /> для поиска соответствия.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; is not overridden in a derived class.">Метод <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> не переопределяется в производном классе.</exception>
      <returns vsli:raw="The zero-based index of the item that matches the property descriptor and contains the specified value.">Отсчитываемый от нуля индекс элемента, соответствующего дескриптору свойств и содержащему заданное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified item in the list at the specified index.">Вставляет заданный элемент в список по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index where the item is to be inserted.">Отсчитываемый от нуля индекс, по которому следует вставить элемент.</param>
      <param name="item" vsli:raw="The item to insert in the list.">Элемент, который требуется вставить в список.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.AddingNew&quot; /&gt; event.">Вызывает событие <see cref="E:System.ComponentModel.BindingList`1.AddingNew" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">Объект класса <see cref="T:System.ComponentModel.AddingNewEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event.">Вызывает событие <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.ListChangedEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Удаляет элемент по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="You are removing a newly added item and &lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowRemove&quot; /&gt; is set to &lt;see langword=&quot;false&quot; /&gt;.">Только что добавленный элемент удаляется и свойство <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> устанавливается равным <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary vsli:raw="Removes any sort applied with &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; if sorting is implemented in a derived class; otherwise, raises &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Удаляет любую сортировку, применяемую с помощью метода <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />, если сортировка реализована в производном классе; в противном случае вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">Метод не переопределяется в производном классе.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.Reset&quot; /&gt;.">Вызывает событие <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> типа <see cref="F:System.ComponentModel.ListChangedType.Reset" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt; for the item at the specified position.">Вызывает событие <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> типа <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> для элемента в заданной позиции.</summary>
      <param name="position" vsli:raw="A zero-based index of the item to be reset.">Отсчитываемый с нуля индекс сбрасываемого элемента.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Заменяет элемент по заданному индексу указанным элементом.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to replace.">Отсчитываемый с нуля индекс заменяемого элемента.</param>
      <param name="item" vsli:raw="The new value for the item at the specified index. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Новое значение для элемента с указанным индексом. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">Значение параметра <paramref name="index" /> меньше нуля.  
  
-или- 
 Значение <paramref name="index" /> больше значения <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">Описание этого члена см. в разделе <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add as a search criteria.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, добавляемый как условие поиска.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary vsli:raw="Adds a new item to the list. For more information, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">Добавляет новый элемент в список. Для получения дополнительной информации см. <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Этот метод не поддерживается.</exception>
      <returns vsli:raw="The item added to the list.">Элемент, который нужно добавить в список.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;. For a complete description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">Сортирует список, используя дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> и направление <see cref="T:System.ComponentModel.ListSortDirection" />. Полное описание этого члена см. в разделе, посвященном методу <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> для сортировки.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt;.">Описание этого члена см. в разделе <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> для поиска.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;prop&quot; /&gt; parameter to search for.">Значение параметра <paramref name="prop" />, используемое для поиска.</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Индекс строки с данным дескриптором <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">Описание этого члена см. в разделе <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, удаляемый из индексов, используемых для поиска.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt;.">Описание этого элемента см. в разделе <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />.</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary vsli:raw="Gets or sets a value indicating whether items in the list can be edited.">Получает или задает значение, показывающее, можно ли редактировать элементы в списке.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если элементы списка можно редактировать; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary vsli:raw="Gets or sets a value indicating whether you can add items to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">Получает или задает значение, показывающее, можно ли добавлять элементы в список с помощью метода <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">Значение <see langword="true" />, если можно добавить элементы в список с помощью метода <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; в противном случае — значение <see langword="false" />. Значение по умолчанию зависит от базового типа, содержащегося в списке.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary vsli:raw="Gets or sets a value indicating whether you can remove items from the collection.">Получает или задает значение, показывающее, можно ли удалять элементы из коллекции.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если можно удалить элементы из списка с помощью метода <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" />; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary vsli:raw="Gets a value indicating whether the list is sorted.">Возвращает значение, показывающее, сортируется ли список.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is sorted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если список сортируется; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary vsli:raw="Gets or sets a value indicating whether adding or removing items within the list raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events.">Получает или задает значение, показывающее, вызывает ли добавление или удаление элемента списка события <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if adding or removing items raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если добавление или удаление элемента списка вызывает события <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary vsli:raw="Gets the direction the list is sorted.">Возвращает направление сортировки списка.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.ComponentModel.ListSortDirection.Ascending&quot; /&gt;.">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />. Значение по умолчанию — <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary vsli:raw="Gets the property descriptor that is used for sorting the list if sorting is implemented in a derived class; otherwise, returns &lt;see langword=&quot;null&quot; /&gt;.">Возвращает дескриптор свойства, используемый для сортировки списка, если сортировка реализуется в производном классе; в противном случае возвращает <see langword="null" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; used for sorting the list.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, используемая для сортировки списка.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary vsli:raw="Gets a value indicating whether &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are enabled.">Возвращает значение, показывающее, включены ли события <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если события <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> поддерживаются, в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports searching.">Возвращает значение, показывающее, поддерживается ли этим списком поиск.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если список поддерживает поиск; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports sorting.">Возвращает значение, показывающее, поддерживается ли этим списком сортировка.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если список поддерживает сортировку; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary vsli:raw="Gets a value indicating whether items in the list can be edited.">Возвращает значение, показывающее, можно ли редактировать элементы в списке.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если элементы списка можно редактировать; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary vsli:raw="Gets a value indicating whether new items can be added to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">Возвращает значение, показывающее, можно ли добавить новые элементы в список с помощью метода <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">Значение <see langword="true" />, если можно добавить элементы в список с помощью метода <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; в противном случае — значение <see langword="false" />. Значение по умолчанию зависит от базового типа, содержащегося в списке.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary vsli:raw="Gets a value indicating whether items can be removed from the list.">Возвращает значение, показывающее, можно ли удалять элементы из списка.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если можно удалить элементы из списка с помощью метода <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" />; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.IsSorted&quot; /&gt;.">Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.IsSorted" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если был вызван метод <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />, а метод <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> не вызывался; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortDirection&quot; /&gt;.">Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.SortDirection" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortProperty&quot; /&gt;.">Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.SortProperty" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, используемый для сортировки.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsChangeNotification&quot; /&gt;.">Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если при изменениях в списке или при изменении элемента списка вызывается событие <see cref="E:System.ComponentModel.IBindingList.ListChanged" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt;.">Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если список поддерживает поиск с использованием метода <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt;.">Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если список поддерживает сортировку; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether item property value changes raise &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt;. This member cannot be overridden in a derived class.">Возвращает значение, показывающее, приводят ли изменения значения свойства элемента к появлению событий <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> типа <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" />. Этот метод не может быть переопределен в производном классе.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list type implements &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanged&quot; /&gt;, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> значение, если тип списка реализует <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> ; в противном случае — <see langword="false" /> . Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Boolean&quot; /&gt; objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Boolean" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BooleanConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.BooleanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Boolean object using the specified context.">Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в объект типа Boolean, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если этот объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a Boolean object.">Преобразует данный объект значения в объект Boolean.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для преобразования.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the Boolean data type.">Возвращает коллекцию стандартных значений для типа данных Boolean.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values.">Коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащая стандартный набор допустимых значений.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">Возвращает значение, показывающее, является ли список стандартных значений, возвращенных методом <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, исчерпывающим.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, так как коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенная методом <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, является исчерпывающим списком возможных значений. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">Получает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, так как для поиска общего набора значений, поддерживаемых объектом, можно вызвать метод <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from various other representations.">Предоставляет преобразователь типов для преобразования 8-разрядных целочисленных объектов без знака в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ByteConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary vsli:raw="Represents the method that handles a cancelable event.">Представляет метод обработки события, которое может быть отменено.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CancelEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.CancelEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary vsli:raw="Provides a type converter to convert Unicode character objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов символов Юникода в другие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CharConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CharConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Unicode character object using the specified context.">Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в символьный объект Юникод, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Объект <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a Unicode character object.">Преобразует данный объект в символьный объект Юникод.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Язык и региональные параметры, в которые будет выполнено преобразование <paramref name="value" />.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a Unicode character object using the arguments.">Преобразовывает объект с заданным значением в символьный объект Юникод, используя аргументы.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Язык и региональные параметры, в которые будет выполнено преобразование <paramref name="value" />.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary vsli:raw="Specifies how the collection is changed.">Определяет, как изменяется коллекция.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary vsli:raw="Specifies that an element was added to the collection.">Указывает, что в коллекцию был добавлен элемент.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary vsli:raw="Specifies that the entire collection has changed. This is caused by using methods that manipulate the entire collection, such as &lt;see cref=&quot;M:System.Collections.CollectionBase.Clear&quot; /&gt;.">Указывает, что была изменена вся коллекция. Такие изменения совершаются методами, работающими сразу со всей коллекцией, например, <see cref="M:System.Collections.CollectionBase.Clear" />.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary vsli:raw="Specifies that an element was removed from the collection.">Указывает, что из коллекции был удален элемент.</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event.">Предоставляет данные для события <see cref="E:System.Data.DataColumnCollection.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />.</summary>
      <param name="action" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values that specifies how the collection changed.">Одно из значений <see cref="T:System.ComponentModel.CollectionChangeAction" />, показывающее, каким образом была изменена коллекция.</param>
      <param name="element" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the instance of the collection where the change occurred.">Объект типа <see cref="T:System.Object" />, показывающий экземпляр коллекции, в котором произошло изменение.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary vsli:raw="Gets an action that specifies how the collection changed.">Возвращает действие, определяющее, каким образом была изменена коллекция.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.CollectionChangeAction" />.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary vsli:raw="Gets the instance of the collection with the change.">Возвращает экземпляр коллекции, в котором произошло изменение.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the instance of the collection with the change, or &lt;see langword=&quot;null&quot; /&gt; if you refresh the collection.">Объект типа <see cref="T:System.Object" />, представляющий экземпляр коллекции, в котором произошло изменение; <see langword="null" />, если коллекция была полностью обновлено.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event raised when adding elements to or removing elements from a collection.">Представляет метод, обрабатывающий событие <see cref="E:System.Data.DataColumnCollection.CollectionChanged" />, возникающее при добавлении или удалении элементов из коллекции.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary vsli:raw="Provides a type converter to convert collection objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов коллекций в другие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CollectionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Преобразовывает указанное значение объекта в указанный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="The culture to which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Язык и региональные параметры, к которым будет преобразован параметр <paramref name="value" />.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This parameter must inherit from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Преобразуемый объект <see cref="T:System.Object" />. Этот параметр должен наследоваться из <see cref="T:System.Collections.ICollection" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter using the specified context and attributes.">Возвращает коллекцию свойств для типа массива, заданного параметром value, используя заданные контекст и атрибуты.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">Объект <see cref="T:System.Object" />, задающий тип массива, для которого нужно получить свойства.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Массив типа <see cref="T:System.Attribute" />, который будет использоваться как фильтр.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или значение <see langword="null" />, если свойства отсутствуют. Этот метод всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Возвращает значение, показывающее, поддерживает ли свойства этот объект.</summary>
      <param name="context">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns>Значение <see langword="false" />, так как метод <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> не следует вызывать для поиска свойств данного объекта.  Этот метод никогда не возвращает значение <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the data source and data member properties for a component that supports complex data binding. This class cannot be inherited.">Задает источник данных и свойства элемента данных для компонента, поддерживающего сложную привязку данных. Этот класс не наследуется.</summary>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class.">Представляет значение по умолчанию для класса <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using no parameters.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> без параметров.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />, используя указанный источник данных.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Имя свойства, используемого в качестве источника данных.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source and data member.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />, используя указанный источник данных и элемент данных.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Имя свойства, используемого в качестве источника данных.</param>
      <param name="dataMember" vsli:raw="The name of the property to be used as the source for data.">Имя свойства, используемого в качестве источника данных.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">Определяет, равен ли указанный объект <see cref="T:System.Object" /> текущему экземпляру <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">Объект <see cref="T:System.Object" /> для сравнения с текущим экземпляром <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">Значение <see langword="true" />, если объект равен текущему экземпляру; в противном случае — значение <see langword="false" />, сообщающее о неравенстве.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary vsli:raw="Gets the name of the data member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Возвращает имя свойства элемента данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
      <returns vsli:raw="The name of the data member property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Имя свойства элемента данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Возвращает имя свойства источника данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
      <returns vsli:raw="The name of the data source property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Имя свойства источника данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary vsli:raw="Provides a type converter to convert components to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов между различными представлениями.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComponentConverter" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this component converter.">Тип <see cref="T:System.Type" />, представляющий тип для связи с преобразователем компонента.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of component specified by the value parameter.">Возвращает коллекцию свойств для типа компонента, заданного параметром значения.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of component to get the properties for.">Объект <see cref="T:System.Object" />, задающий тип компонента, для которого нужно получить свойства.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Массив типа <see cref="T:System.Attribute" />, который будет использоваться как фильтр.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, предоставляемыми для компонента, или <see langword="null" /> в случае отсутствия свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">Возвращает значение, показывающее, поддерживает ли свойства этот объект, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, так как для поиска свойств данного объекта следует вызывать метод <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />.  Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary vsli:raw="Provides the base class for a custom component editor.">Предоставляет базовый класс для редактора настраиваемых компонентов.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentEditor&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComponentEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified based upon a given context.">Редактирует компонент и возвращает значение, по которому можно определить, был ли изменен данный компонент на основе заданного контекста.</summary>
      <param name="context" vsli:raw="An optional context object that can be used to obtain further information about the edit.">Необязательный объект контекста, с помощью которого можно получить дополнительные сведения о редактировании.</param>
      <param name="component" vsli:raw="The component to be edited.">Редактируемый компонент.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если компонент был изменен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified.">Редактирует компонент и возвращает значение, по которому можно определить, был ли изменен данный компонент.</summary>
      <param name="component" vsli:raw="The component to be edited.">Редактируемый компонент.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если компонент был изменен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary vsli:raw="Provides simple functionality for enumerating resources for a component or object. The &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class is a &lt;see cref=&quot;T:System.Resources.ResourceManager&quot; /&gt;.">Обеспечивает простые функциональные возможности для перечисления ресурсов компонента или объекта. Класс <see cref="T:System.ComponentModel.ComponentResourceManager" /> является <see cref="T:System.Resources.ResourceManager" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class with default values.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ComponentResourceManager" /> со значениями по умолчанию.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; that looks up resources in satellite assemblies based on information from the specified &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Создает <see cref="T:System.ComponentModel.ComponentResourceManager" />, который ищет ресурсы в сопутствующих сборках, используя сведения из указанного типа <see cref="T:System.Type" />.</summary>
      <param name="t" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; from which the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; derives all information for finding resource files.">Тип <see cref="T:System.Type" />, из которого экземпляр класса <see cref="T:System.ComponentModel.ComponentResourceManager" /> получает все сведения, необходимые для поиска файлов ресурсов.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">Применяет значение ресурса к соответствующему свойству объекта.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">Объект <see cref="T:System.Object" />, содержащий применяемое значение свойства.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">Строка <see cref="T:System.String" />, содержащая имя объекта, который нужно найти в ресурсах.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="value" /> или <paramref name="objectName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">Применяет значение ресурса к соответствующему свойству объекта.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">Объект <see cref="T:System.Object" />, содержащий применяемое значение свойства.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">Строка <see cref="T:System.String" />, содержащая имя объекта, который нужно найти в ресурсах.</param>
      <param name="culture" vsli:raw="The culture for which to apply resources.">Язык и региональные параметры, к которым применяются ресурсы.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="value" /> или <paramref name="objectName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary vsli:raw="Encapsulates zero or more components.">Инкапсулирует ноль или более компонентов.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;. The component is unnamed.">Добавляет заданный объект <see cref="T:System.ComponentModel.Component" /> в <see cref="T:System.ComponentModel.Container" />. Компонент добавляется без имени.</summary>
      <param name="component" vsli:raw="The component to add.">Добавляемый компонент.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; and assigns it a name.">Добавляет указанный <see cref="T:System.ComponentModel.Component" /> в <see cref="T:System.ComponentModel.Container" /> и присваивает ему имя.</summary>
      <param name="component" vsli:raw="The component to add.">Добавляемый компонент.</param>
      <param name="name" vsli:raw="The unique, case-insensitive name to assign to the component.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt;, which leaves the component unnamed.">Назначаемое компоненту уникальное имя, в котором не учитывается регистр.  
  
-или- 
 <see langword="null" />, при котором компонент остается безымянным.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">Значение <paramref name="name" /> не является уникальным.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; for the given &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and assigns the given name to the site.">Создает узел <see cref="T:System.ComponentModel.ISite" /> для указанного компонента <see cref="T:System.ComponentModel.IComponent" /> и присваивает узлу заданное имя.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">Компонент <see cref="T:System.ComponentModel.IComponent" />, для которого создается узел.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">Имя, которое нужно присвоить параметру <paramref name="component" />, или <see langword="null" />, чтобы опустить назначение имени.</param>
      <returns vsli:raw="The newly created site.">Вновь созданный узел.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Освобождает все ресурсы, занятые модулем <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;, and optionally releases the managed resources.">Освобождает неуправляемые ресурсы, используемые журналом <see cref="T:System.ComponentModel.Container" />, и при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary vsli:raw="Releases unmanaged resources and performs other cleanup operations before the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; is reclaimed by garbage collection.">Освобождает неуправляемые ресурсы и выполняет другие операции очистки, перед тем как объект <see cref="T:System.ComponentModel.Container" /> будет удален при сборке мусора.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">Получает объект службы указанного типа, если он доступен.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">Тип <see cref="T:System.Type" /> извлекаемой службы.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; implementing the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">Объект <see cref="T:System.Object" />, реализующий запрошенную службу, или значение <see langword="null" />, если служба не может быть реализована.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Удаляет компонент из контейнера <see cref="T:System.ComponentModel.Container" />.</summary>
      <param name="component" vsli:raw="The component to remove.">Удаляемый компонент.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; without setting &lt;see cref=&quot;P:System.ComponentModel.IComponent.Site&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">Удаляет компонент из контейнера <see cref="T:System.ComponentModel.Container" />, не устанавливая для узла <see cref="P:System.ComponentModel.IComponent.Site" /> значение <see langword="null" />.</summary>
      <param name="component" vsli:raw="The component to remove.">Удаляемый компонент.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Determines whether the component name is unique for this container.">Определяет, является ли имя компонента уникальным для этого контейнера.</summary>
      <param name="component" vsli:raw="The named component.">Компонент с именем.</param>
      <param name="name" vsli:raw="The component name to validate.">Проверяемое имя компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">Значение <paramref name="name" /> не является уникальным.</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary vsli:raw="Gets all the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Получает все компоненты в контейнере <see cref="T:System.ComponentModel.Container" />.</summary>
      <returns vsli:raw="A collection that contains the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Коллекция компонентов, инкапсулированных в объект <see cref="T:System.ComponentModel.Container" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary vsli:raw="Provides a base class for the container filter service.">Предоставляет базовый класс для службы фильтра контейнера.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ContainerFilterService&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ContainerFilterService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary vsli:raw="Filters the component collection.">Выполняет фильтрацию коллекции компонентов.</summary>
      <param name="components" vsli:raw="The component collection to filter.">Фильтруемая коллекция компонентов.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ComponentCollection&quot; /&gt; that represents a modified collection.">Объект <see cref="T:System.ComponentModel.ComponentCollection" />, представляющий измененную коллекцию.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Globalization.CultureInfo" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CultureInfoConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CultureInfoConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; using the specified context.">Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в <see cref="T:System.Globalization.CultureInfo" />, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;.">Преобразует указанный объект-значение в <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для преобразования.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a culture that is not valid.">В параметре <paramref name="value" /> указаны неправильные язык и региональные параметры.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Преобразовывает указанное значение объекта в указанный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для преобразования.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary vsli:raw="Retrieves the name of the specified culture.">Извлекает имя заданного языка и региональных параметров.</summary>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to get the name for.">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры, для которых необходимо получить имя.</param>
      <returns vsli:raw="The name of the specified culture.">Имя заданного языка и региональных параметров.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object using the specified context.">Возвращает коллекцию стандартных значений для объекта <see cref="T:System.Globalization.CultureInfo" />, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащая стандартный набор допустимых значений, или <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list.">Возвращает значение, показывающее, является ли список стандартных значений, возвращенных из <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, исчерпывающим.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is not an exhaustive list of possible values (that is, other values are possible). This method never returns &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="false" />, так как коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенная методом <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, не является исчерпывающим списком возможных значений, (то есть возможны другие значения). Этот метод никогда не возвращает значение <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Возвращает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, поскольку для поиска набора значений, поддерживаемых объектом, необходимо вызвать метод <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary vsli:raw="Provides a simple default implementation of the &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; interface.">Предоставляет простую реализацию по умолчанию для интерфейса <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class using a parent custom type descriptor.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.CustomTypeDescriptor" />, используя дескриптор родительского настраиваемого типа.</summary>
      <param name="parent" vsli:raw="The parent custom type descriptor.">Дескриптор родительского настраиваемого типа.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for the type represented by this type descriptor.">Возвращает коллекцию настраиваемых атрибутов для типа, представленного этим дескриптором типа.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the type. The default is &lt;see cref=&quot;F:System.ComponentModel.AttributeCollection.Empty&quot; /&gt;.">Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, содержащая атрибуты для этого типа. Значение по умолчанию — <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the fully qualified name of the class represented by this type descriptor.">Возвращает полное имя класса, представленного этим дескриптором типа.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the fully qualified class name of the type this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <see cref="T:System.String" />, содержащее полное имя класса типа, описываемого этим дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of the class represented by this type descriptor.">Возвращает имя класса, представленное этим дескриптором типа.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the component instance this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">Строка <see cref="T:System.String" />, содержащая имя экземпляра компонента, описываемого этим дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for the type represented by this type descriptor.">Возвращает преобразователь типов для типа, представленного этим дескриптором типа.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the type represented by this type descriptor. The default is a newly created &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">Преобразователь <see cref="T:System.ComponentModel.TypeConverter" /> для типа, представленного этим дескриптором типа. Значением по умолчанию является только что созданный преобразователь <see cref="T:System.ComponentModel.TypeConverter" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the event descriptor for the default event of the object represented by this type descriptor.">Возвращает дескриптор события по умолчанию для объекта, представленного этим дескриптором типа.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the default event on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> события по умолчанию для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the property descriptor for the default property of the object represented by this type descriptor.">Возвращает дескриптор свойства по умолчанию для объекта, представленного этим дескриптором типа.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; for the default property on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> свойства по умолчанию для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.">Возвращает редактор для заданного типа, который должен быть связан с классом, представленным этим дескриптором типа.</summary>
      <param name="editorBaseType" vsli:raw="The base type of the editor to retrieve.">Базовый тип возвращаемого редактора.</param>
      <returns vsli:raw="An editor of the given type that is to be associated with the class represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Редактор для данного типа, который должен быть связан с классом, представленным этим дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns a collection of event descriptors for the object represented by this type descriptor.">Возвращает коллекцию дескрипторов событий по умолчанию для объекта, представленного этим дескриптором типа.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptors for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" />, содержащая дескрипторы событий для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of event descriptors for the object represented by this type descriptor.">Возвращает фильтрованную коллекцию дескрипторов событий по умолчанию для объекта, представленного этим дескриптором типа.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">Массив атрибутов, используемый в качестве фильтра. Это может быть <see langword="null" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" />, содержащая описания событий для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns a collection of property descriptors for the object represented by this type descriptor.">Возвращает коллекцию дескрипторов свойств для объекта, представленного этим дескриптором типа.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая описания свойств для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of property descriptors for the object represented by this type descriptor.">Возвращает фильтрованную коллекцию дескрипторов свойств для объекта, представленного этим дескриптором типа.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">Массив атрибутов, используемый в качестве фильтра. Это может быть <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая описания свойств для объекта, представленного этим дескриптором типа. Значение по умолчанию — <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">Возвращает объект, содержащий свойство, описываемое заданным дескриптором свойства.</summary>
      <param name="pd" vsli:raw="The property descriptor for which to retrieve the owning object.">Дескриптор свойства, для которого возвращается объект-владелец.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that owns the given property specified by the type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.Object" />, являющийся владельцем данного свойства, заданного дескриптором типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary vsli:raw="Identifies a type as an object suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object. This class cannot be inherited.">Определяет тип объекта, подходящий для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />. Этот класс не наследуется.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary vsli:raw="Indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Показывает, что этот класс подходит для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> во время разработки. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary vsli:raw="Represents the default value of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class, which indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Представляет значение по умолчанию класса <see cref="T:System.ComponentModel.DataObjectAttribute" />, показывающее, что класс подходит для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> во время разработки. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary vsli:raw="Indicates that the class is not suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Показывает, что этот класс не подходит для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> во время разработки. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class and indicates whether an object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectAttribute" /> и показывает, подходит ли объект для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
      <param name="isDataObject" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект подходит для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; fits the pattern of another object.">Определяет, соответствует ли этот экземпляр атрибута <see cref="T:System.ComponentModel.DataObjectAttribute" /> шаблону другого объекта.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt;.">Объект, сравниваемый с этим экземпляром атрибута <see cref="T:System.ComponentModel.DataObjectAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр совпадает с экземпляром, заданным параметром <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Возвращает значение, показывающее, является ли текущее значение атрибута его значением по умолчанию.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущим значением атрибута является значение по умолчанию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary vsli:raw="Gets a value indicating whether an object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time.">Возвращает значение, показывающее, следует ли считать объект подходящим для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> во время разработки.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект должен считаться подходящим для связывания с объектом <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary vsli:raw="Provides metadata for a property representing a data field. This class cannot be inherited.">Предоставляет метаданные для свойства, представляющего поле данных. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row.">Выполняет инициализацию нового экземпляра класса <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> и показывает, является ли поле первичным ключом для строки данных.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что это поле является первичным ключом строки данных; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, and whether the field is a database identity field.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> и показывает, является ли поле первичным ключом для строки данных и является ли это поле полем удостоверения базы данных.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что это поле является первичным ключом строки данных; в противном случае — значение <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что это поле является полем удостоверения данных, уникальным образом идентифицирующим строку данных; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether the field is a database identity field, and whether the field can be null.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> и показывает, является ли поле первичным ключом для строки данных, является ли оно полем удостоверения данных, и может ли оно принимать значение "null".</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что это поле является первичным ключом строки данных; в противном случае — значение <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что это поле является полем удостоверения данных, уникальным образом идентифицирующим строку данных; в противном случае — значение <see langword="false" />.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что это поле в хранилище данных может принимать значение "null"; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether it is a database identity field, and whether it can be null and sets the length of the field.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> и показывает, является ли поле первичным ключом для строки данных, является ли оно полем удостоверения данных, и может ли оно принимать значение "null", и задает длину поля.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что это поле является первичным ключом строки данных; в противном случае — значение <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что это поле является полем удостоверения данных, уникальным образом идентифицирующим строку данных; в противном случае — значение <see langword="false" />.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что это поле в хранилище данных может принимать значение "null"; в противном случае — значение <see langword="false" />.</param>
      <param name="length" vsli:raw="The length of the field in bytes.">Длина поля в байтах.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Возвращает значение, показывающее, равен ли данный экземпляр заданному объекту.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt;.">Объект, сравниваемый с этим экземпляром атрибута <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр совпадает с экземпляром, заданным параметром <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary vsli:raw="Gets a value indicating whether a property represents an identity field in the underlying data.">Возвращает значение, показывающее, представляет ли свойство поле удостоверения в базовых данных.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents an identity field in the underlying data; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство представляет поле удостоверения в базовых данных; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary vsli:raw="Gets a value indicating whether a property represents a field that can be null in the underlying data store.">Возвращает значение, показывающее, представляет ли свойство поле, которое может принимать значение "null" в базовом хранилище данных.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents a field that can be null in the underlying data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство представляет поле, которое может принимать значение "null" в базовом хранилище данных; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary vsli:raw="Gets the length of the property in bytes.">Возвращает длину свойства в байтах.</summary>
      <returns vsli:raw="The length of the property in bytes, or -1 if not set.">Длина свойства в байтах, или -1, если это значение не задано.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary vsli:raw="Gets a value indicating whether a property is in the primary key in the underlying data.">Возвращает значение, показывающее, входит ли свойство в первичный ключ базовых данных.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is in the primary key of the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство является первичным ключом хранилища данных; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary vsli:raw="Identifies a data operation method exposed by a type, what type of operation the method performs, and whether the method is the default data method. This class cannot be inherited.">Определяет метод работы с данными, предоставляемый типом, тип операций, выполняемых методом, и то, является ли этот метод методом работы с данным по умолчанию. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class and identifies the type of data operation the method performs.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> и определяет тип операций с данными, выполняемых методом.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">Одно из значений <see cref="T:System.ComponentModel.DataObjectMethodType" />, описывающих операцию с данными, выполняемую методом.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class, identifies the type of data operation the method performs, and identifies whether the method is the default data method that the data object exposes.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />, определяет тип операции с данными, выполняемой методом, и определяет является ли этот метод методом работы с данными по умолчанию, предоставляемым объектом данных.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">Одно из значений <see cref="T:System.ComponentModel.DataObjectMethodType" />, описывающих операцию с данными, выполняемую методом.</param>
      <param name="isDefault" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the method that the attribute is applied to is the default method of the data object for the specified &lt;paramref name=&quot;methodType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что метод, к которому применен атрибут, является методом объекта данных по умолчанию для заданного параметра <paramref name="methodType" />; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Возвращает значение, показывающее, равен ли данный экземпляр заданному объекту.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">Объект, сравниваемый с этим экземпляром атрибута <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр совпадает с экземпляром, заданным параметром <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary vsli:raw="Gets a value indicating whether this instance shares a common pattern with a specified attribute.">Возвращает значение, показывающее, использует ли этот экземпляр общую модель с заданным атрибутом.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">Объект, сравниваемый с этим экземпляром атрибута <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр совпадает с экземпляром, заданным параметром <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the method that the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied to is the default data method exposed by the data object for a specific method type.">Возвращает значение, показывающее, является ли метод, к которому применяется атрибут <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />, методом по умолчанию для работы с данными, предоставленным объектом данных для конкретного типа метода.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is the default method exposed by the object for a method type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если метод является методом по умолчанию, предоставленным объектом для типа метода; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; value indicating the type of data operation the method performs.">Возвращает значение <see cref="T:System.ComponentModel.DataObjectMethodType" />, показывающее тип операции с данными, выполняемой методом.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that identifies the type of data operation performed by the method to which the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied.">Одно из значений <see cref="T:System.ComponentModel.DataObjectMethodType" />, определяющих тип операции с данными, выполняемой методом, к которому применен атрибут <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary vsli:raw="Identifies the type of data operation performed by a method, as specified by the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; applied to the method.">Определяет тип операции с данными, выполняемой методом, в соответствии с атрибутом <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />, примененным к методу.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary vsli:raw="Indicates that a method is used for a data operation that deletes data.">Показывает, что метод используется для операции с данными, удаляющей данные.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary vsli:raw="Indicates that a method is used for a data operation that fills a &lt;see cref=&quot;T:System.Data.DataSet&quot; /&gt; object.">Показывает, что метод используется для операции с данными, заполняющей объект <see cref="T:System.Data.DataSet" />.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary vsli:raw="Indicates that a method is used for a data operation that inserts data.">Показывает, что метод используется для операции с данными, вставляющей данные.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary vsli:raw="Indicates that a method is used for a data operation that retrieves data.">Показывает, что метод используется для операции с данными, возвращающей данные.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary vsli:raw="Indicates that a method is used for a data operation that updates data.">Показывает, что метод используется для операции с данными, изменяющей данные.</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTime&quot; /&gt; objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.DateTime" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DateTimeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the specified context.">Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в <see cref="T:System.DateTime" />, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если этот объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Преобразует данный объект значения в объект <see cref="T:System.DateTime" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Необязательный класс <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the arguments.">Преобразует объект с заданным значением в <see cref="T:System.DateTime" />, используя заданные аргументы.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Необязательный класс <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; structures to and from various other representations.">Предоставляет преобразователь типов для преобразования структур <see cref="T:System.DateTimeOffset" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeOffsetConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DateTimeOffsetConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether an object of the specified source type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Возвращает значение, указывающее, можно преобразовать объект с заданным исходным типом в объект <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context" vsli:raw="The date format context.">Контекст формата даты.</param>
      <param name="sourceType" vsli:raw="The source type to check.">Проверяемый исходный тип.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданный тип можно преобразовать в объект <see cref="T:System.DateTimeOffset" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to an object of the specified type.">Возвращает значение, указывающее, можно преобразовать объект <see cref="T:System.DateTimeOffset" /> в объект заданного типа.</summary>
      <param name="context" vsli:raw="The date format context.">Контекст формата даты.</param>
      <param name="destinationType" vsli:raw="The destination type to check.">Проверяемый конечный тип.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект <see cref="T:System.DateTimeOffset" /> можно привести к заданному типу; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Преобразует указанный объект в <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context" vsli:raw="The date format context.">Контекст формата даты.</param>
      <param name="culture" vsli:raw="The date culture.">Язык и региональные параметры, определяющие формат даты.</param>
      <param name="value" vsli:raw="The object to be converted.">Преобразуемый объект.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; that represents the specified object.">Объект <see cref="T:System.DateTimeOffset" />, представляющий заданный объект.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to an object of the specified type.">Преобразует <see cref="T:System.DateTimeOffset" /> в объект заданного типа.</summary>
      <param name="context" vsli:raw="The date format context.">Контекст формата даты.</param>
      <param name="culture" vsli:raw="The date culture.">Язык и региональные параметры, определяющие формат даты.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">Преобразуемая структура <see cref="T:System.DateTimeOffset" />.</param>
      <param name="destinationType" vsli:raw="The type to convert to.">Целевой тип преобразования.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An object of the specified type that represents the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Объект заданного типа, представляющий объект <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Decimal&quot; /&gt; objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Decimal" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DecimalConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DecimalConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; using the arguments.">Преобразует объект с заданным значением в <see cref="T:System.Decimal" />, используя заданные аргументы.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Необязательный класс <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Значение параметра <paramref name="destinationType" /> — <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary vsli:raw="Specifies the default binding property for a component. This class cannot be inherited.">Задает свойство привязки по умолчанию для компонента. Этот класс не наследуется.</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class.">Представляет значение по умолчанию для класса <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using no parameters.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> без параметров.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using the specified property name.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> с помощью указанного имени свойства.</summary>
      <param name="name" vsli:raw="The name of the default binding property.">Имя свойства привязки по умолчанию.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">Определяет, равен ли указанный объект <see cref="T:System.Object" /> текущему экземпляру <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">Объект <see cref="T:System.Object" /> для сравнения с текущим экземпляром <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">Значение <see langword="true" />, если объект равен текущему экземпляру; в противном случае — значение <see langword="false" />, сообщающее о неравенстве.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">Возвращает имя свойства привязки по умолчанию для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
      <returns vsli:raw="The name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">Имя свойства привязки по умолчанию для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary vsli:raw="Specifies the default event for a component.">Задает событие по умолчанию для компонента.</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Задает значение по умолчанию для атрибута <see cref="T:System.ComponentModel.DefaultEventAttribute" />, равное <see langword="null" />. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultEventAttribute" />.</summary>
      <param name="name" vsli:raw="The name of the default event for the component this attribute is bound to.">Имя события по умолчанию для компонента, с которым связан этот атрибут.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;.">Возвращает значение, показывающее, равно ли значение данного объекта текущему атрибуту <see cref="T:System.ComponentModel.DefaultEventAttribute" />.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Объект, проверяемый на равенство.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значение данного объекта равно значению текущего; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary vsli:raw="Gets the name of the default event for the component this attribute is bound to.">Возвращает имя события по умолчанию для компонента, с которым связан этот атрибут.</summary>
      <returns vsli:raw="The name of the default event for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Имя события по умолчанию для компонента, с которым связан этот атрибут. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary vsli:raw="Specifies the default property for a component.">Задает свойство по умолчанию для компонента.</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Задает значение по умолчанию для атрибута <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />, равное <see langword="null" />. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />.</summary>
      <param name="name" vsli:raw="The name of the default property for the component this attribute is bound to.">Имя свойства по умолчанию для компонента, с которым связан этот атрибут.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;.">Возвращает значение, показывающее, равно ли значение данного объекта текущему атрибуту <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Объект, проверяемый на равенство.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значение данного объекта равно значению текущего; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default property for the component this attribute is bound to.">Возвращает имя свойства по умолчанию для компонента, с которым связан этот атрибут.</summary>
      <returns vsli:raw="The name of the default property for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Имя свойства по умолчанию для компонента, с которым связан этот атрибут. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner&quot; /&gt; event.">Предоставляет данные для события <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />.</summary>
      <param name="oldDesigner" vsli:raw="The document that is losing activation.">Документ, который перестает быть активным.</param>
      <param name="newDesigner" vsli:raw="The document that is gaining activation.">Документ, который становится активным.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary vsli:raw="Gets the document that is gaining activation.">Возвращает документ, который становится активным.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document gaining activation.">узел <see cref="T:System.ComponentModel.Design.IDesignerHost" />, представляющий документ, который становится активным.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary vsli:raw="Gets the document that is losing activation.">Возвращает документ, который перестает быть активным.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document losing activation.">узел <see cref="T:System.ComponentModel.Design.IDesignerHost" />, представляющий документ, который перестает быть активным.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged&quot; /&gt; event.">Представляет метод обработки события <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; that contains the event data.">Объект класса <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary vsli:raw="The exception that is thrown when an attempt to check out a file that is checked into a source code management program is canceled or fails.">Исключение, которое создается, если попытка попытка извлечь возвращенный в программу управления исходным кодом файл отменяется или вызывает ошибку.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class that specifies that the check out was canceled. This field is read-only.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" />, указывающий на отмену попытки извлечь файл. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with no associated message or error code.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" /> со связанным сообщением или кодом ошибки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class using the specified serialization data and context.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" />, используя указанные данные сериализации и контекст.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Метод <see cref="T:System.Runtime.Serialization.SerializationInfo" />, используемый для десериализации.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Объект назначения, используемый для десериализации.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" /> указанным сообщением.</summary>
      <param name="message" vsli:raw="A message describing the exception.">Сообщение, описывающее исключение.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified detailed description and the specified exception.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" /> с указанным подробным описанием и указанным исключением.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">Подробное описание ошибки.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">Ссылка на внутреннее исключение, которое является причиной этого исключения.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message and error code.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CheckoutException" /> с указанным сообщением и кодом ошибки.</summary>
      <param name="message" vsli:raw="A message describing the exception.">Сообщение, описывающее исключение.</param>
      <param name="errorCode" vsli:raw="The error code to pass.">Передаваемый код ошибки.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary vsli:raw="Represents a unique command identifier that consists of a numeric command ID and a GUID menu group identifier.">Предоставляет уникальный идентификатор команды, состоящий из числового идентификатора команды (ID) и глобального уникального идентификатора группы меню (GUID).</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; class using the specified menu group GUID and command ID number.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.CommandID" />, используя указанные GUID-идентификатор группы и числовой идентификатор команды.</summary>
      <param name="menuGroup" vsli:raw="The GUID of the group that this menu command belongs to.">GUID-идентификатор группы, к которой принадлежит данная команда меню.</param>
      <param name="commandID" vsli:raw="The numeric identifier of this menu command.">Числовой идентификатор этой команды меню.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; instances are equal.">Определяет, равны ли два экземпляра <see cref="T:System.ComponentModel.Design.CommandID" />.</summary>
      <param name="obj" vsli:raw="The object to compare.">Объект для сравнения.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is equivalent to this one; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданный объект равен данному; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary vsli:raw="Serves as a hash function for a particular type.">Выступает в качестве хэш-функции для определенного типа.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current object.">Возвращает строку (<see cref="T:System.String" />), которая представляет текущий объект.</summary>
      <returns vsli:raw="A string that contains the command ID information, both the GUID and integer identifier.">Строка, содержащая оба компонента идентификатора команды: GUID-идентификатор группы меню и целочисленный идентификатор команды.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary vsli:raw="Gets the GUID of the menu group that the menu command identified by this &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; belongs to.">Возвращает GUID-идентификатор группы, к которой принадлежит команда, соответствующая данному идентификатору <see cref="T:System.ComponentModel.Design.CommandID" />.</summary>
      <returns vsli:raw="The GUID of the command group for this command.">GUID-идентификатор группы команд, к которой принадлежит данная команда.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary vsli:raw="Gets the numeric command ID.">Возвращает числовой идентификатор команды.</summary>
      <returns vsli:raw="The command ID number.">Число-идентификатор команды.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event. This class cannot be inherited.">Предоставляет данные для события <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that was changed.">Измененный компонент.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that represents the member that was changed.">Идентификатор <see cref="T:System.ComponentModel.MemberDescriptor" />, представляющий измененный элемент.</param>
      <param name="oldValue" vsli:raw="The old value of the changed member.">Прежнее значение измененного элемента.</param>
      <param name="newValue" vsli:raw="The new value of the changed member.">Новое значение измененного элемента.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary vsli:raw="Gets the component that was modified.">Возвращает измененный компонент.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the component that was modified.">Объект <see cref="T:System.Object" />, представляющий измененный компонент.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary vsli:raw="Gets the member that has been changed.">Возвращает измененный элемент.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that indicates the member that has been changed.">Идентификатор <see cref="T:System.ComponentModel.MemberDescriptor" />, обозначающий измененный элемент.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the new value of the changed member.">Возвращает новое значение измененного элемента.</summary>
      <returns vsli:raw="The new value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">Новое значение измененного элемента. Это свойство может иметь значение <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the old value of the changed member.">Возвращает прежнее значение измененного элемента.</summary>
      <returns vsli:raw="The old value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">Прежнее значение измененного элемента. Это свойство может иметь значение <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event. This class cannot be inherited.">Предоставляет данные для события <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that is about to be changed.">Изменяемый компонент.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member of the component that is about to be changed.">Свойство <see cref="T:System.ComponentModel.MemberDescriptor" /> обозначает изменяемый элемент компонента.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary vsli:raw="Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.">Возвращает компонент, в который будут вноситься изменения, или компонент, являющийся родительским контейнером изменяемого элемента.</summary>
      <returns vsli:raw="The component that is about to have a member changed.">Компонент, в элемент которого будут внесены изменения.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary vsli:raw="Gets the member that is about to be changed.">Возвращает изменяемый элемент компонента.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member that is about to be changed, if known, or &lt;see langword=&quot;null&quot; /&gt; otherwise.">Идентификатор <see cref="T:System.ComponentModel.MemberDescriptor" />, обозначающий изменяемый элемент, если он известен, или <see langword="null" /> в противном случае.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; event that contains the event data.">Событие <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />, содержащее данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt; events.">Предоставляет данные для событий <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> и <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that is the source of the event.">Компонент, являющийся источником события.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary vsli:raw="Gets the component associated with the event.">Возвращает компонент, связанный с событием.</summary>
      <returns vsli:raw="The component associated with the event.">Компонент, связанный с событием.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt; events raised for component-level events.">Представляет метод, предназначенный для обработки событий <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> и <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />, вызываемых для событий уровня компонентов.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">Предоставляет данные для события <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />.</summary>
      <param name="component" vsli:raw="The component to be renamed.">Переименованный компонент.</param>
      <param name="oldName" vsli:raw="The old name of the component.">Старое имя компонента.</param>
      <param name="newName" vsli:raw="The new name of the component.">Новое имя компонента.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary vsli:raw="Gets the component that is being renamed.">Возвращает переименованный компонент.</summary>
      <returns vsli:raw="The component that is being renamed.">Переименованный компонент.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary vsli:raw="Gets the name of the component after the rename event.">Возвращает имя компонента после события переименования.</summary>
      <returns vsli:raw="The name of the component after the rename event.">Имя компонента после события переименования.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary vsli:raw="Gets the name of the component before the rename event.">Возвращает имя компонента перед событием переименования.</summary>
      <returns vsli:raw="The previous name of the component.">Предыдущее имя компонента.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary vsli:raw="Represents a collection of designers.">Представляет коллекцию конструкторов.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified set of designers.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerCollection" />, содержащий указанный набор конструкторов.</summary>
      <param name="designers" vsli:raw="A list that contains the collection of designers to add.">Список, содержащий добавляемую коллекцию конструкторов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified designers.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerCollection" />, содержащий указанные конструкторы.</summary>
      <param name="designers" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; objects to store.">Сохраняемый массив объектов <see cref="T:System.ComponentModel.Design.IDesignerHost" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">Возвращает новый перечислитель для данной коллекции.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">Интерфейс <see cref="T:System.Collections.IEnumerator" />, обеспечивающий перечисление коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Копирует элементы коллекции в <see cref="T:System.Array" /> начиная с определенного индекса в <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Одномерный массив <see cref="T:System.Array" />, который является конечным массивом для элементов, скопированных из коллекции. Массив <see cref="T:System.Array" /> должен иметь индексацию, начинающуюся с нуля.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">Возвращает новый перечислитель для данной коллекции.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">Интерфейс <see cref="T:System.Collections.IEnumerator" />, обеспечивающий перечисление коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary vsli:raw="Gets the number of designers in the collection.">Возвращает число конструкторов в коллекции.</summary>
      <returns vsli:raw="The number of designers in the collection.">Число конструкторов в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the designer at the specified index.">Возвращает конструктор по указанному индексу.</summary>
      <param name="index" vsli:raw="The index of the designer to return.">Индекс возвращаемого конструктора.</param>
      <returns vsli:raw="The designer at the specified index.">Конструктор по указанному индексу.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Возвращает количество элементов, содержащихся в коллекции.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Количество элементов, содержащихся в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Возвращает значение, показывающее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Объект, который может быть использован для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events.">Предоставляет данные для событий <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> и <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />.</summary>
      <param name="host" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">узел <see cref="T:System.ComponentModel.Design.IDesignerHost" /> документа.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary vsli:raw="Gets the host of the document.">Возвращает хост документа.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">узел <see cref="T:System.ComponentModel.Design.IDesignerHost" /> документа.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events that are raised when a document is created or disposed of.">Представляет метод, обрабатывающий события <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> и <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" />, вызываемые при создании или уничтожении документа.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary vsli:raw="Provides a base class for getting and setting option values for a designer.">Предоставляет базовый класс для возврата и установки значений параметров конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerOptionService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name and adds it to the given parent.">Создает новую коллекцию <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> с указанным именем и добавляет ее в заданный родительский объект.</summary>
      <param name="parent" vsli:raw="The parent designer option collection. All collections have a parent except the root object collection.">Родительская коллекция параметров конструктора. Все коллекции имеют родительские коллекции, за исключением коллекции корневых объектов.</param>
      <param name="name" vsli:raw="The name of this collection.">Имя данной коллекции.</param>
      <param name="value" vsli:raw="The object providing properties for this collection. Can be &lt;see langword=&quot;null&quot; /&gt; if the collection should not provide any properties.">Объект, предоставляющий свойства для данной коллекции. Может быть значением <see langword="null" />, если коллекция не должна содержать каких-либо свойств.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="parent" /> или <paramref name="name" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is an empty string.">Параметр <paramref name="name" /> равен пустой строке.</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name.">Новый <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> с заданным именем.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Populates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Заполняет коллекцию <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <param name="options" vsli:raw="The collection to populate.">Коллекция для заполнения.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary vsli:raw="Shows the options dialog box for the given object.">Отображает диалоговое окно параметров для заданного объекта.</summary>
      <param name="options" vsli:raw="The options collection containing the object to be invoked.">Коллекция свойств, содержащая вызываемый объект.</param>
      <param name="optionObject" vsli:raw="The actual options object.">Объект фактических параметров.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box is shown; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диалоговое окно отображается; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of an option defined in this package.">Возвращает значение параметра, определенного в данном пакете.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">Страница, к которой привязан данный параметр.</param>
      <param name="valueName" vsli:raw="The name of the option value.">Имя значения параметра.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="pageName" /> или <paramref name="valueName" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The value of the option named &lt;paramref name=&quot;valueName&quot; /&gt;.">Значение параметра с именем <paramref name="valueName" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of an option defined in this package.">Устанавливает значение параметра, определенного в данном пакете.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">Страница, к которой привязан данный параметр.</param>
      <param name="valueName" vsli:raw="The name of the option value.">Имя значения параметра.</param>
      <param name="value" vsli:raw="The value of the option.">Значение параметра.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="pageName" /> или <paramref name="valueName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary vsli:raw="Gets the options collection for this service.">Возвращает коллекцию свойств для этой службы.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; populated with available designer options.">Объект <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> заполняется доступными параметрами конструктора.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary vsli:raw="Contains a collection of designer options. This class cannot be inherited.">Содержит коллекцию параметров конструктора. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">Копирует целую коллекцию в совместимый одномерный массив <see cref="T:System.Array" />, начиная с указанного индекса целевого массива.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the collection. The &lt;paramref name=&quot;array&quot; /&gt; must have zero-based indexing.">Одномерный массив <see cref="T:System.Array" />, который является местом назначения для элементов, копируемых из коллекции. Массив <paramref name="array" /> должен иметь индексацию, начинающуюся с нуля.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">Возвращает перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора элементов коллекции.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">Перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора элементов коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in a range of this collection.">Возвращает индекс первого вхождения заданного значения в диапазоне этой коллекции.</summary>
      <param name="value" vsli:raw="The object to locate in the collection.">Объект, который требуется найти в коллекции.</param>
      <returns vsli:raw="The index of the first occurrence of value within the entire collection, if found; otherwise, the lower bound of the collection minus 1.">Индекс первого вхождения значения в целой коллекции, если оно обнаружено; в обратном случае — нижняя граница коллекции минус 1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary vsli:raw="Displays a dialog box user interface (UI) with which the user can configure the options in this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Отображает интерфейс пользователя диалогового окна, при помощи которого пользователь может настраивать свойства в этой коллекции <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box can be displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если можно отобразить диалоговое окно; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Добавляет элемент в коллекцию <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Объект <see cref="T:System.Object" />, добавляемый в список <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Позиция, на которую вставлен новый элемент.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Удаляет все элементы из коллекции.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Определяет, содержит ли коллекция указанное значение.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент <see cref="T:System.Object" /> найден в коллекции; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">Определяет индекс определенного элемента в коллекции.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">Вставляет элемент в коллекцию по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">Объект <see cref="T:System.Object" /> для вставки в коллекцию.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Удаляет первое вхождение конкретного объекта из коллекции.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">Объект <see cref="T:System.Object" />, который требуется удалить из коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the collection item at the specified index.">Удаляет из коллекции элемент с заданным индексом.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Отсчитываемый от нуля индекс удаляемого элемента.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary vsli:raw="Gets the number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">Возвращает количество дочерних коллекций параметров, которые содержатся в данной коллекции <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns vsli:raw="The number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">Количество дочерних коллекций параметров, которые содержатся в данной коллекции <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the child collection at the given index.">Возвращает дочернюю коллекцию по заданному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the child collection to get.">Индекс (начиная с нуля) возвращаемой дочерней коллекции.</param>
      <returns vsli:raw="The child collection at the specified index.">Дочерняя коллекция по заданному индексу.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary vsli:raw="Gets the child collection at the given name.">Возвращает дочернюю коллекцию с заданным именем.</summary>
      <param name="name" vsli:raw="The name of the child collection.">Имя тега дочерней коллекции.</param>
      <returns vsli:raw="The child collection with the name specified by the &lt;paramref name=&quot;name&quot; /&gt; parameter, or &lt;see langword=&quot;null&quot; /&gt; if the name is not found.">Дочерняя коллекция с именем, заданным параметром <paramref name="name" />, или значение <see langword="null" />, если имя не найдено.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary vsli:raw="Gets the name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Возвращает имя этого аспекта <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns vsli:raw="The name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Имя этого аспекта <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary vsli:raw="Gets the parent collection object.">Возвращает объект родительской коллекции.</summary>
      <returns vsli:raw="The parent collection object, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">Объект родительской коллекции или значение <see langword="null" />, если родительский объект отсутствует.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary vsli:raw="Gets the collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">Возвращает коллекцию свойств, предоставленных коллекцией <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, вместе со всеми ее дочерними объектами.</summary>
      <returns vsli:raw="The collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">Коллекция свойств, предоставленных коллекцией <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, вместе со всеми ее дочерними объектами.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized and, therefore, thread safe.">Возвращает значение, указывающее, является ли доступ к коллекции синхронизированным (потокобезопасным).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если доступ к коллекции является синхронизированным; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Объект, который может быть использован для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Возвращает значение, указывающее, имеет ли коллекция фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если коллекция имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Возвращает значение, указывающее, является ли коллекция доступной только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Возвращает или задает элемент по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Отсчитываемый от нуля индекс элемента, который требуется возвратить или задать.</param>
      <returns vsli:raw="The element at the specified index.">Элемент, расположенный по указанному индексу.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary vsli:raw="Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.">Предоставляет способ сгруппировать последовательность действий этапа разработки, что позволяет повысить производительность и дает возможность отменять действия большинства типов.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class with no description.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> без описания.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class using the specified transaction description.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> с помощью указанного описания транзакции.</summary>
      <param name="description" vsli:raw="A description for this transaction.">Описание транзакции.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary vsli:raw="Cancels the transaction and attempts to roll back the changes made by the events of the transaction.">Отменяет транзакцию и пытается отменить все действия, выполненные событиями транзакции.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary vsli:raw="Commits this transaction.">Фиксирует транзакцию.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; and optionally releases the managed resources.">Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.ComponentModel.Design.DesignerTransaction" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary vsli:raw="Releases the resources associated with this object. This override commits this transaction if it was not already committed.">Освобождает ресурсы, связанные с данным объектом. Этот метод фиксирует транзакцию, если она не была зафиксирована ранее.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Cancel&quot; /&gt; event.">Вызывает событие <see langword="Cancel" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary vsli:raw="Performs the actual work of committing a transaction.">Фактически фиксирует транзакцию.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;.">Освобождает все ресурсы, занятые модулем <see cref="T:System.ComponentModel.Design.DesignerTransaction" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary vsli:raw="Gets a value indicating whether the transaction was canceled.">Возвращает значение, определяющее, была ли отменена данная транзакция.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was canceled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если транзакция была отменена; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary vsli:raw="Gets a value indicating whether the transaction was committed.">Возвращает значение, определяющее, была ли зафиксирована данная транзакция.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was committed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если транзакция была зафиксирована; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary vsli:raw="Gets a description for the transaction.">Возвращает описание транзакции.</summary>
      <returns vsli:raw="A description for the transaction.">Описание транзакции.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events.">Предоставляет данные для событий <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> и <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class, using the specified value that indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />, используя заданное значение, указывающее, вызывал ли конструктор метод <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> для транзакции.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">Значение, определяющее, была ли зафиксирована данная транзакция.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">Значение, определяющее, была ли зафиксирована данная транзакция.</param>
      <param name="lastTransaction" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если это последняя транзакция, которая должна быть закрыта; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary vsli:raw="Gets a value indicating whether this is the last transaction to close.">Возвращает значение, указывающее, является ли данная транзакция последней, которая должна быть закрыта.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если это последняя транзакция, которая должна быть закрыта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary vsli:raw="Indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">Указывает, вызывал ли конструктор метод <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> для транзакции.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> если конструктор вызывал метод <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> для транзакции, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events of a designer.">Представляет метод, обрабатывающий события конструктора <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> и <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary vsli:raw="Represents a verb that can be invoked from a designer.">Предоставляет команду, которая может быть вызвана из конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">Текст команды меню, отображаемый для пользователя.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">Обработчик события, выполняющий действия команды.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">Текст команды меню, отображаемый для пользователя.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">Обработчик события, выполняющий действия команды.</param>
      <param name="startCommandID" vsli:raw="The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.">Начальный идентификатор команды для данной команды конструктора. По умолчанию архитектура конструктора задает диапазон идентификаторов, допустимых для команд конструктора. Пользователь может переопределить данный идентификатор и задать свой идентификатор команды.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary vsli:raw="Overrides &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt;.">Переопределяет <see cref="M:System.Object.ToString" />.</summary>
      <returns vsli:raw="The verb's text, or an empty string (&quot;&quot;) if the text field is empty.">Текст команды или пустая строка (""), если в текстовом поле отсутствует значение.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary vsli:raw="Gets or sets the description of the menu item for the verb.">Получает или задает описание команды меню для команды.</summary>
      <returns vsli:raw="A string describing the menu item.">Строка, описывающая команду меню.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary vsli:raw="Gets the text description for the verb command on the menu.">Возвращает текстовое описание команды меню.</summary>
      <returns vsli:raw="A description for the verb command.">Текстовое описание команды меню.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">Представляет коллекцию объектов <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class using the specified array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />, используя указанный массив объектов <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array that indicates the verbs to contain within the collection.">Массив <see cref="T:System.ComponentModel.Design.DesignerVerb" />, указывающий команды конструктора, которые должны содержаться в коллекции.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to the collection.">Добавляет указанный параметр <see cref="T:System.ComponentModel.Design.DesignerVerb" /> в коллекцию.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add to the collection.">Параметр <see cref="T:System.ComponentModel.Design.DesignerVerb" /> для добавления в коллекцию.</param>
      <returns vsli:raw="The index in the collection at which the verb was added.">Индекс коллекции, соответствующий добавленной команде конструктора.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Adds the specified set of designer verbs to the collection.">Добавляет заданный набор команд конструктора в коллекцию.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects to add to the collection.">Массив объектов <see cref="T:System.ComponentModel.Design.DesignerVerb" />, добавляемый в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary vsli:raw="Adds the specified collection of designer verbs to the collection.">Добавляет в коллекцию заданную коллекцию команд конструктора.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; to add to the collection.">Объект <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> для добавления в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets a value indicating whether the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; exists in the collection.">Возвращает значение, определяющее, включен ли в коллекцию указанный объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to search for in the collection.">Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> для поиска в коллекции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object exists in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанный объект присутствует в коллекции; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary vsli:raw="Copies the collection members to the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array beginning at the specified destination index.">Копирует элементы коллекции в заданный массив объектов <see cref="T:System.ComponentModel.Design.DesignerVerb" />, начиная с заданного индекса назначения.</summary>
      <param name="array" vsli:raw="The array to copy collection members to.">Массив, в который выполняется копирование элементов коллекции.</param>
      <param name="index" vsli:raw="The destination index to begin copying to.">Индекс в массиве назначения, начиная с которого нужно вставлять копируемые элементы коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">Получает индекс заданного ограничения <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; whose index to get in the collection.">Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />, индекс которого в коллекции будет возвращен.</param>
      <returns vsli:raw="The index of the specified object if it is found in the list; otherwise, -1.">Индекс заданного объекта, если он найден в списке, в противном случае значение -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">Вставляет заданный объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> по заданному индексу.</summary>
      <param name="index" vsli:raw="The index in the collection at which to insert the verb.">Индекс коллекции, по которому нужно вставить команду конструктора.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to insert in the collection.">Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />, вставляемый в коллекцию.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>Вызывает событие <see langword="Clear" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>Вызывает событие <see langword="Insert" />.</summary>
      <param name="index">Индекс вставки элемента.</param>
      <param name="value">Вставляемый объект.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>Вызывает событие <see langword="Remove" />.</summary>
      <param name="index">Индекс удаляемого элемента.</param>
      <param name="value">Удаляемый объект.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Вызывает событие <see langword="Set" />.</summary>
      <param name="index">Индекс установки значения элемента.</param>
      <param name="oldValue">Прежний объект.</param>
      <param name="newValue">Новый объект.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Validate&quot; /&gt; event.">Вызывает событие <see langword="Validate" />.</summary>
      <param name="value" vsli:raw="The object to validate.">Объект для проверки.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; from the collection.">Удаляет указанный объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> из коллекции.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove from the collection.">Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />, который требуется удалить из коллекции.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">Возвращает или задает объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> с заданным индексом.</summary>
      <param name="index" vsli:raw="The index at which to get or set the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">Индекс, по которому требуется получить или задать объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at each valid index in the collection.">Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> для каждого допустимого в коллекции индекса.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary vsli:raw="Represents a design-time license context that can support a license provider at design time.">Предоставляет лицензионное содержимое этапа разработки, позволяющее поддерживать работу поставщика лицензий во время разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="Gets a saved license key.">Возвращает сохраненный лицензионный ключ.</summary>
      <param name="type" vsli:raw="The type of the license key.">Тип лицензионного ключа.</param>
      <param name="resourceAssembly" vsli:raw="The assembly to get the key from.">Сборка, из которой нужно вернуть ключ.</param>
      <returns vsli:raw="The saved license key that matches the specified type.">Сохраненный лицензионный ключ, соответствующий заданному типу.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="Sets a saved license key.">Задает сохраненный лицензионный ключ.</summary>
      <param name="type" vsli:raw="The type of the license key.">Тип лицензионного ключа.</param>
      <param name="key" vsli:raw="The license key.">Лицензионный ключ.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary vsli:raw="Gets the license usage mode.">Возвращает режим использования лицензии.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; indicating the licensing mode for the context.">Свойство <see cref="T:System.ComponentModel.LicenseUsageMode" />, указывающее режим лицензирования для контекста.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary vsli:raw="Provides support for design-time license context serialization.">Предоставляет поддержку сериализации лицензионного содержимого во время разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary vsli:raw="Serializes the licenses within the specified design-time license context using the specified key and output stream.">Проводит сериализацию лицензии заданного лицензионного содержимого этапа разработки, используя при этом заданный ключевой пакет и поток вывода.</summary>
      <param name="o" vsli:raw="The stream to output to.">Поток для вывода.</param>
      <param name="cryptoKey" vsli:raw="The key to use for encryption.">Ключ, используемый для шифрования.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; indicating the license context.">Класс <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />, задающий лицензионное содержимое.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary vsli:raw="Defines identifiers that indicate information about the context in which a request for Help information originated.">Определяет идентификаторы, несущие данные о контексте, из которого был вызван запрос на предоставление справочных сведений.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary vsli:raw="A general context.">Общий контекст.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary vsli:raw="A selection.">Выделение.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary vsli:raw="A tool window selection.">Выделение окна средств.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary vsli:raw="A window.">Окно.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary vsli:raw="Specifies the context keyword for a class or member. This class cannot be inherited.">Указывает ключевое слово контекста для класса или элемента. Этот класс не наследуется.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;. This field is read-only.">Представляет значение по умолчанию для объекта <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
      <param name="keyword" vsli:raw="The Help keyword value.">Значение ключевого слова справки.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyword&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyword" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class from the given type.">Выполняет инициализацию нового экземпляра класса <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> на основе заданного типа.</summary>
      <param name="t" vsli:raw="The type from which the Help keyword will be taken.">Тип, из которого будет получено ключевое слово справки.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; instances are equal.">Определяет, равны ли два экземпляра <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />, с которым сравнивается текущий объект <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанный объект <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> равен текущему объекту <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines whether the Help keyword is &lt;see langword=&quot;null&quot; /&gt;.">Определяет, имеет ли ключевое слово справки значение <see langword="null" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the Help keyword is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если ключевое слово справки имеет значение <see langword="null" />, в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary vsli:raw="Gets the Help keyword supplied by this attribute.">Возвращает ключевое слово справки, указанное этим атрибутом.</summary>
      <returns vsli:raw="The Help keyword supplied by this attribute.">Ключевое слово справки, передаваемое этим атрибутом.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary vsli:raw="Defines identifiers that indicate the type of a Help keyword.">Определяет идентификаторы, показывающие тип ключевого слова справки.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary vsli:raw="A keyword that F1 was pressed to request help about.">Ключевое слово, запрос которого был вызван нажатием клавиши F1.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary vsli:raw="A filter keyword.">Ключевое слово фильтра.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary vsli:raw="A general keyword.">Общее ключевое слово.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary vsli:raw="Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; or &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Предоставляет интерфейс для добавления или удаления обработчиков событий, добавляющих, удаляющих или переименовывающих компоненты. Предоставляет методы для вызова событий <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> и <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary vsli:raw="Occurs when a component has been added.">Происходит после добавления компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary vsli:raw="Occurs when a component is in the process of being added.">Происходит перед самым добавлением компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary vsli:raw="Occurs when a component has been changed.">Происходит после изменения компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary vsli:raw="Occurs when a component is in the process of being changed.">Происходит в процессе изменения компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary vsli:raw="Occurs when a component has been removed.">Происходит после удаления компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary vsli:raw="Occurs when a component is in the process of being removed.">Происходит в процессе удаления компонента.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary vsli:raw="Occurs when a component is renamed.">Происходит после переименования компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Announces to the component change service that a particular component has changed.">Сообщает службе изменения компонентов об изменении определенного компонента.</summary>
      <param name="component" vsli:raw="The component that has changed.">Измененный компонент.</param>
      <param name="member" vsli:raw="The member that has changed. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">Измененный элемент. Значение <see langword="null" />, если изменение относится к нескольким элементам.</param>
      <param name="oldValue" vsli:raw="The old value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">Прежнее значение элемента. Это свойство имеет смысл только в том случае, если элемент не равен <see langword="null" />.</param>
      <param name="newValue" vsli:raw="The new value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">Новое значение элемента. Это свойство имеет смысл только в том случае, если элемент не равен <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Announces to the component change service that a particular component is changing.">Сообщает службе изменения компонентов об изменении определенного компонента перед внесением изменений.</summary>
      <param name="component" vsli:raw="The component that is about to change.">Компонент непосредственно перед изменением.</param>
      <param name="member" vsli:raw="The member that is changing. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">Изменяемый элемент. Значение <see langword="null" />, если изменение относится к нескольким элементам.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary vsli:raw="Enables enumeration of components at design time.">Включает перечисление компонентов во время разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary vsli:raw="Gets the list of available component types.">Возвращает список доступных типов компонентов.</summary>
      <param name="designerHost" vsli:raw="The designer host providing design-time services. Can be &lt;see langword=&quot;null&quot; /&gt;.">Хост конструктора, обеспечивающий службы времени разработки. Может иметь значение <see langword="null" />.</param>
      <param name="baseType" vsli:raw="The base type specifying the components to retrieve. Can be &lt;see langword=&quot;null&quot; /&gt;.">Базовый тип, указывающий компоненты для извлечения. Может иметь значение <see langword="null" />.</param>
      <returns vsli:raw="The list of available component types.">Список доступных типов компонентов.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary vsli:raw="Provides a set of recommended default values during component creation.">Предоставляет набор рекомендованных значений по умолчанию во время создания компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Restores an instance of a component to its default state.">Восстанавливает состояние по умолчанию для экземпляра компонента.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to reset the component's state.">Словарь значений свойства по умолчанию, содержащий пары имя/значение, при помощи которого компонент будет возвращен в исходное состояние.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Initializes a new component using a set of recommended values.">Инициализирует новый компонент с использованием набора рекомендованных значений.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to initialize the component's state.">Словарь значений свойства по умолчанию, содержащий пары имя/значение, при помощи которого будет инициализировано состояние компонента.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary vsli:raw="Provides the basic framework for building a custom designer.">Предоставляет базовую оболочку для построения настраиваемого конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary vsli:raw="Performs the default action for this designer.">Выполняет действие по умолчанию для конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes the designer with the specified component.">Инициализирует конструктор, используя заданный компонент.</summary>
      <param name="component" vsli:raw="The component to associate with this designer.">Компонент для связи с данным конструктором.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary vsli:raw="Gets the base component that this designer is designing.">Возвращает базовый компонент, создаваемый данным конструктором.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; indicating the base component that this designer is designing.">Класс <see cref="T:System.ComponentModel.IComponent" />, показывающий основной компонент, создаваемый данным конструктором.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary vsli:raw="Gets a collection of the design-time verbs supported by the designer.">Получает коллекцию команд времени разработки, поддерживаемых конструктором.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the verbs supported by the designer, or &lt;see langword=&quot;null&quot; /&gt; if the component has no verbs.">Объект <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />, содержащий поддерживаемые конструктором команды, либо значение <see langword="null" />, если в компоненте отсутствуют команды.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary vsli:raw="Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.">Предоставляет уведомления о событиях при добавлении и удалении базовых конструкторов, изменении выделенного компонента и изменении текущего базового конструктора.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary vsli:raw="Occurs when the current root designer changes.">Возникает при изменении текущего базового конструктора.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary vsli:raw="Occurs when a root designer is created.">Возникает при создании базового конструктора.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary vsli:raw="Occurs when a root designer for a document is disposed.">Возникает при уничтожении базового конструктора для документа.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary vsli:raw="Occurs when the current design-view selection changes.">Возникает при изменении текущего режима разработки.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary vsli:raw="Gets the root designer for the currently active document.">Возвращает базовый конструктор для документа, активного в текущий момент.</summary>
      <returns vsli:raw="The currently active document, or &lt;see langword=&quot;null&quot; /&gt; if there is no active document.">Документ, активный в текущий момент, или значение <see langword="null" />, если документ не активен.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary vsli:raw="Gets a collection of root designers for design documents that are currently active in the development environment.">Возвращает коллекцию базовых конструкторов для документов проекта, которые являются активными в текущий момент в среде разработки.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; containing the root designers that have been created and not yet disposed.">Класс <see cref="T:System.ComponentModel.Design.DesignerCollection" />, содержащий созданные и еще не удаленные базовые конструкторы.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary vsli:raw="Provides an interface that enables a designer to access and filter the dictionaries of a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.">Предоставляет интерфейс, позволяющий конструктору получать доступ и фильтровать словари класса <see cref="T:System.ComponentModel.TypeDescriptor" />, в которых хранятся дескрипторы свойств, атрибутов и событий, предоставляемые конструктором компонентов в среде режима разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">При переопределении в производном классе позволяет конструктору изменять или удалять элементы из набора атрибутов, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">Объекты <see cref="T:System.Attribute" /> класса компонента. Ключи в словаре атрибутов являются значениями <see cref="P:System.Attribute.TypeId" /> атрибутов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">При переопределении в производном классе позволяет конструктору изменять или удалять элементы из набора событий, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">Объекты <see cref="T:System.ComponentModel.EventDescriptor" />, представляющие события класса компонента. Ключи в словаре событий являются именами событий.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">При переопределении в производном классе позволяет конструктору изменять или удалять элементы из набора свойств, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">Объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />, представляющие свойства класса компонента. Ключи в словаре свойств являются именами свойств.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">При переопределении в производном классе позволяет конструктору добавлять элементы в набор атрибутов, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">Объекты <see cref="T:System.Attribute" /> класса компонента. Ключи в словаре атрибутов являются значениями <see cref="P:System.Attribute.TypeId" /> атрибутов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">При переопределении в производном классе позволяет конструктору добавлять элементы в набор событий, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">Объекты <see cref="T:System.ComponentModel.EventDescriptor" />, представляющие события класса компонента. Ключи в словаре событий являются именами событий.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">При переопределении в производном классе позволяет конструктору добавлять элементы в набор свойств, предоставляемых через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">Объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />, представляющие свойства класса компонента. Ключи в словаре свойств являются именами свойств.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary vsli:raw="Provides an interface for managing designer transactions and components.">Предоставляет интерфейс для управления транзакциями и компонентами конструктора.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary vsli:raw="Occurs when this designer is activated.">Возникает, когда конструктор активизирован.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary vsli:raw="Occurs when this designer is deactivated.">Возникает, когда данный конструктор отключен.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary vsli:raw="Occurs when this designer completes loading its document.">Возникает, когда конструктор завершил загрузку документа.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; event.">Добавляет обработчик событий для события <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; event.">Добавляет обработчик событий для события <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpened&quot; /&gt; event.">Добавляет обработчик событий для события <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpening&quot; /&gt; event.">Добавляет обработчик событий для события <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary vsli:raw="Activates the designer that this host is hosting.">Активизирует конструктор, размещенный на данном хосте.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary vsli:raw="Creates a component of the specified type and adds it to the design document.">Создает компонент указанного типа и добавляет его в документ проекта.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">Тип создаваемого компонента.</param>
      <returns vsli:raw="The newly created component.">Вновь созданный компонент.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary vsli:raw="Creates a component of the specified type and name, and adds it to the design document.">Создает компонент с заданным типом и именем и добавляет его в документ проекта.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">Тип создаваемого компонента.</param>
      <param name="name" vsli:raw="The name for the component.">Имя компонента.</param>
      <returns vsli:raw="The newly created component.">Вновь созданный компонент.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality.">Создает класс <see cref="T:System.ComponentModel.Design.DesignerTransaction" />, который может инкапсулировать последовательности событий для повышения производительности, а также для включения вспомогательных функциональных возможностей: отмены и возврата.</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you complete the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">Новый экземпляр класса <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. По завершении этапов транзакции необходимо вызвать для этого объекта метод <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality, using the specified transaction description.">Создает класс <see cref="T:System.ComponentModel.Design.DesignerTransaction" />, который может инкапсулировать последовательности событий для повышения производительности, а также для включения вспомогательных функциональных возможностей: отмены и возврата, с помощью заданного описания транзакции.</summary>
      <param name="description" vsli:raw="A title or description for the newly created transaction.">Заголовок или описание для вновь созданной транзакции.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you have completed the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">Новый объект <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. По завершении этапов транзакции необходимо вызвать для этого объекта метод <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary vsli:raw="Destroys the specified component and removes it from the designer container.">Уничтожает заданный компонент и удаляет его из контейнера конструктора.</summary>
      <param name="component" vsli:raw="The component to destroy.">Уничтожаемый компонент.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the designer instance that contains the specified component.">Получает экземпляр конструктора, содержащий указанный компонент.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to retrieve the designer for.">Класс <see cref="T:System.ComponentModel.IComponent" />, для которого загружается конструктор.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if there is no designer for the specified component.">Класс <see cref="T:System.ComponentModel.Design.IDesigner" /> или значение <see langword="null" />, если для указанного компонента не существует конструктора.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary vsli:raw="Gets an instance of the specified, fully qualified type name.">Получает экземпляр заданного полного имени типа.</summary>
      <param name="typeName" vsli:raw="The name of the type to load.">Имя загружаемого типа.</param>
      <returns vsli:raw="The type object for the specified type name, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be found.">Объект типа для заданного имени типа или значение <see langword="null" />, если тип не найден.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary vsli:raw="Gets the container for this designer host.">Получает контейнер для данного хоста конструктора.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; for this host.">Класс <see cref="T:System.ComponentModel.IContainer" /> для данного хоста.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently in a transaction.">Получает значение, показывающее, находится ли хост конструктора в текущий момент в процессе транзакции.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если транзакция выполняется; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently loading the document.">Получает значение, показывающее, загружается ли в текущий момент документ хостом конструктора.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer host is currently loading the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если документ загружается в текущий момент хостом конструктора; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary vsli:raw="Gets the instance of the base class used as the root component for the current design.">Получает экземпляр базового класса, используемого в качестве корневого компонента для текущего конструктора.</summary>
      <returns vsli:raw="The instance of the root component class.">Экземпляр класса корневого компонента.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary vsli:raw="Gets the fully qualified name of the class being designed.">Получает полное имя разрабатываемого класса.</summary>
      <returns vsli:raw="The fully qualified name of the base component class.">Полное имя класса базового компонента.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary vsli:raw="Gets the description of the current transaction.">Получает описание текущей транзакции.</summary>
      <returns vsli:raw="A description of the current transaction.">Описание текущей транзакции.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary vsli:raw="Specifies methods for the designer host to report on the state of transactions.">Определяет методы для хоста конструктора для отчета о состоянии транзакций.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is closing a transaction.">Получает значение, показывающее, находится ли хост конструктора в процессе закрытия транзакции.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is closing a transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если конструктор закрывает транзакцию; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary vsli:raw="Provides access to the designer options located on the Tools menu under the Options command in the Visual Studio development environment.">Предоставляет доступ к параметрам конструктора, расположенным в среде разработки Visual Studio в меню Сервис под пунктом Параметры.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of the specified Windows Forms Designer option.">Возвращает значение указанного параметра конструктора Windows Forms.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">Имя страницы, определяющей этот параметр.</param>
      <param name="valueName" vsli:raw="The name of the option property.">Имя свойства параметра.</param>
      <returns vsli:raw="The value of the specified option.">Значение заданного параметра.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of the specified Windows Forms Designer option.">Устанавливает значение указанного параметра конструктора Windows Forms.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">Имя страницы, определяющей этот параметр.</param>
      <param name="valueName" vsli:raw="The name of the option property.">Имя свойства параметра.</param>
      <param name="value" vsli:raw="The new value.">Новое значение.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary vsli:raw="Provides a basic, component site-specific, key-value pair dictionary through a service that a designer can use to store user-defined data.">Предоставляет базовый словарь пар "ключ-значение", свойственный компоненту, через службу, которая может использоваться конструктором для хранения пользовательских данных.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary vsli:raw="Gets the key corresponding to the specified value.">Получает ключ, соответствующий заданному значению.</summary>
      <param name="value" vsli:raw="The value to look up in the dictionary.">Значение для поиска в словаре.</param>
      <returns vsli:raw="The associated key, or &lt;see langword=&quot;null&quot; /&gt; if no key exists.">Соответствующий ключ или значение <see langword="null" />, если ключ не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary vsli:raw="Gets the value corresponding to the specified key.">Возвращает значение, соответствующее указанному ключу.</summary>
      <param name="key" vsli:raw="The key to look up the value for.">Ключ, для которого необходимо найти значение.</param>
      <returns vsli:raw="The associated value, or &lt;see langword=&quot;null&quot; /&gt; if no value exists.">Соответствующее значение или <see langword="null" />, если значение не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets the specified key-value pair.">Задает указанную пару "ключ-значение".</summary>
      <param name="key" vsli:raw="An object to use as the key to associate the value with.">Объект, используемый в качестве ключа, с которым необходимо сопоставить значение.</param>
      <param name="value" vsli:raw="The value to store.">Хранимое значение.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary vsli:raw="Provides a service for registering event handlers for component events.">Предоставляет службу регистрации обработчиков событий для событий в компонентах.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Creates a unique name for an event-handler method for the specified component and event.">Создает уникальное имя для метода обработчика событий заданного компонента и события.</summary>
      <param name="component" vsli:raw="The component instance the event is connected to.">Экземпляр компонента, с которым связано событие.</param>
      <param name="e" vsli:raw="The event to create a name for.">Событие, для которого должно быть создано имя.</param>
      <returns vsli:raw="The recommended name for the event-handler method for this event.">Рекомендованное имя метода обработчика событий для данного события.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Gets a collection of event-handler methods that have a method signature compatible with the specified event.">Возвращает коллекцию методов обработчика событий, обладающих сигнатурой метода, совместимой с заданным событием.</summary>
      <param name="e" vsli:raw="The event to get the compatible event-handler methods for.">Событие, для которого необходимо получить совместимые методы обработчика событий.</param>
      <returns vsli:raw="A collection of strings.">Коллекция строк.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the specified property descriptor represents, if it represents an event.">Возвращает дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> для события, которое представлено заданным дескриптором свойств, если он отражает событие.</summary>
      <param name="property" vsli:raw="The property that represents an event.">Свойство, представляющее событие.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the property represents, or &lt;see langword=&quot;null&quot; /&gt; if the property does not represent an event.">Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> для события, представляемого свойством, или значение <see langword="null" />, если свойство не представляет событие.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary vsli:raw="Converts a set of event descriptors to a set of property descriptors.">Преобразует набор дескрипторов событий в набор дескрипторов свойств.</summary>
      <param name="events" vsli:raw="The events to convert to properties.">События для преобразования в свойства.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that describe the event set.">Массив объектов <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающих набор событий.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Converts a single event descriptor to a property descriptor.">Преобразует один дескриптор событий в дескриптор свойств.</summary>
      <param name="e" vsli:raw="The event to convert.">Преобразуемое событие.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the event.">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающий событие.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary vsli:raw="Displays the user code for the designer.">Отображает код пользователя для конструктора.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если код отображается; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Displays the user code for the specified event.">Отображает код пользователя для заданного события.</summary>
      <param name="component" vsli:raw="The component that the event is connected to.">Компонент, с которым связано событие.</param>
      <param name="e" vsli:raw="The event to display.">Отображаемое событие.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если код отображается; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary vsli:raw="Displays the user code for the designer at the specified line.">Отображает код пользователя для конструктора в заданной строке.</summary>
      <param name="lineNumber" vsli:raw="The line number to place the caret on.">Номер строки для размещения курсора.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если код отображается; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary vsli:raw="Provides an interface that can list extender providers.">Предоставляет интерфейс, который может перечислять поставщиков расширений.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary vsli:raw="Gets the set of extender providers for the component.">Получает набор поставщиков расширений для компонента.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that lists the active extender providers. If there are no providers, an empty array is returned.">Массив типа <see cref="T:System.ComponentModel.IExtenderProvider" />, в котором перечислены активные поставщики расширений. Если поставщики отсутствуют, возвращается пустой массив.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary vsli:raw="Provides an interface for adding and removing extender providers at design time.">Предоставляет интерфейс для добавления и удаления поставщиков расширителей во время разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Adds the specified extender provider.">Добавляет указанный поставщик расширений.</summary>
      <param name="provider" vsli:raw="The extender provider to add.">Добавляемый поставщик расширений.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Removes the specified extender provider.">Удаляет указанный поставщик расширений.</summary>
      <param name="provider" vsli:raw="The extender provider to remove.">Удаляемый поставщик расширений.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary vsli:raw="Provides methods for showing Help topics and adding and removing Help keywords at design time.">Предоставляет методы для отображения разделов справки, а также для добавления и удаления зарезервированных слов справки во время разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary vsli:raw="Adds a context attribute to the document.">Добавляет в документ атрибут контекста.</summary>
      <param name="name" vsli:raw="The name of the attribute to add.">Имя добавляемого атрибута.</param>
      <param name="value" vsli:raw="The value of the attribute.">Значение атрибута.</param>
      <param name="keywordType" vsli:raw="The type of the keyword, from the enumeration &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordType&quot; /&gt;.">Тип зарезервированного слова из перечисления <see cref="T:System.ComponentModel.Design.HelpKeywordType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary vsli:raw="Removes all existing context attributes from the document.">Удаляет из документа все существующие атрибуты контекста.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary vsli:raw="Creates a local &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to manage subcontexts.">Создает локальный класс <see cref="T:System.ComponentModel.Design.IHelpService" /> для управления вложенными контекстами.</summary>
      <param name="contextType" vsli:raw="The priority type of the subcontext to add.">Приоритетный тип добавляемого вложенного контекста.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt;.">Вновь созданный <see cref="T:System.ComponentModel.Design.IHelpService" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary vsli:raw="Removes a previously added context attribute.">Удаляет ранее добавленный атрибут контекста.</summary>
      <param name="name" vsli:raw="The name of the attribute to remove.">Имя удаляемого атрибута.</param>
      <param name="value" vsli:raw="The value of the attribute to remove.">Значение удаляемого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary vsli:raw="Removes a context created with &lt;see cref=&quot;M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)&quot; /&gt;.">Удаляет контекст, созданный с помощью метода <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />.</summary>
      <param name="localContext" vsli:raw="The local context &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to remove.">Удаляемый локальный контекст <see cref="T:System.ComponentModel.Design.IHelpService" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified keyword.">Отображает раздел справки, соответствующий заданному зарезервированному слову.</summary>
      <param name="helpKeyword" vsli:raw="The keyword of the Help topic to display.">Зарезервированного слово для отображаемого раздела справки.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified URL.">Отображает раздел справки, соответствующий заданному URL-адресу.</summary>
      <param name="helpUrl" vsli:raw="The URL of the Help topic to display.">URL-адрес отображаемого раздела справки.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary vsli:raw="Provides methods for identifying the components of a component.">Предоставляет методы, указывающие компоненты компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary vsli:raw="Searches the specified component for fields that implement the &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; interface and adds each to the specified container, storing the inheritance level of each which can be retrieved using the &lt;see cref=&quot;M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)&quot; /&gt; method.">Выполняет поиск в заданном компоненте полей, которые реализуют интерфейс <see cref="T:System.ComponentModel.IComponent" />, а также добавляет каждое из них в заданный контейнер, сохраняя уровень наследования каждого поля, которое может быть извлечено с использованием метода <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" />.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to search. Searching begins with this component.">Объект <see cref="T:System.ComponentModel.IComponent" />, в котором будет выполнен поиск. Поиск начинается с данного компонента.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to add components to.">Интерфейс <see cref="T:System.ComponentModel.IContainer" />, в который будут добавлены компоненты.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the inheritance attribute for the specified component.">Возвращает атрибут наследования для заданного компонента.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for which to retrieve the inheritance attribute.">Интерфейс <see cref="T:System.ComponentModel.IComponent" />, для которого должен быть извлечен атрибут наследования.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; that describes the level of inheritance of the specified component.">Экземпляр класса <see cref="T:System.ComponentModel.InheritanceAttribute" />, который описывает уровень наследования заданного компонента.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary vsli:raw="Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.">Предоставляет методы для управления общими командами конструктора и командами меню, доступными в режиме конструктора, а также методы для отображения некоторых типов контекстных меню.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Adds the specified standard menu command to the menu.">Добавляет в меню указанную стандартную команду меню.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to add.">Добавляемый объект <see cref="T:System.ComponentModel.Design.MenuCommand" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; is already present on a menu.">Идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> указанной команды <see cref="T:System.ComponentModel.Design.MenuCommand" /> уже представлен в меню.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified designer verb to the set of global designer verbs.">Добавляет указанную команду конструктора в набор общих команд конструктора.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add.">Добавляемый объект <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Searches for the specified command ID and returns the menu command associated with it.">Осуществляет поиск указанного идентификатора команды и возвращает связанную с ним команду меню.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; to search for.">Объект <see cref="T:System.ComponentModel.Design.CommandID" />, который требуется найти.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; associated with the command ID, or &lt;see langword=&quot;null&quot; /&gt; if no command is found.">Команда <see cref="T:System.ComponentModel.Design.MenuCommand" />, связанная с идентификатором команды, или значение <see langword="null" />, если команда не найдена.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Invokes a menu or designer verb command matching the specified command ID.">Вызывает команду меню или команду конструктора, соответствующую указанному идентификатору команды.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the command to search for and execute.">Идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> команды, которую необходимо найти и выполнить.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the command was found and invoked successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если команда найдена и вызвана успешно; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Removes the specified standard menu command from the menu.">Удаляет из меню указанную стандартную команду меню.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to remove.">Объект <see cref="T:System.ComponentModel.Design.MenuCommand" /> для удаления.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified designer verb from the collection of global designer verbs.">Удаляет указанную команду конструктора из коллекции глобальных команд конструктора.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove.">Объект <see cref="T:System.ComponentModel.Design.DesignerVerb" /> для удаления.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary vsli:raw="Shows the specified shortcut menu at the specified location.">Отображает указанное контекстное меню в заданном месте.</summary>
      <param name="menuID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the shortcut menu to show.">Идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> отображаемого контекстного меню.</param>
      <param name="x" vsli:raw="The x-coordinate at which to display the menu, in screen coordinates.">Координата по оси X, в которой отображается меню (в экранных координатах).</param>
      <param name="y" vsli:raw="The y-coordinate at which to display the menu, in screen coordinates.">Координата по оси Y, в которой отображается меню (в экранных координатах).</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary vsli:raw="Gets a collection of the designer verbs that are currently available.">Возвращает коллекцию команд конструктора, доступных в настоящий момент.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the designer verbs that are currently available.">Коллекция <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />, содержащая доступные в текущий момент команды конструктора.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary vsli:raw="Provides an interface for obtaining references to objects within a project by name or type, obtaining the name of a specified object, and for locating the parent of a specified object within a designer project.">Предоставляет интерфейс для получения ссылок на объекты проекта по имени или типу, для получения имени заданного объекта, а также для поиска родительского объекта для заданного объекта в проекте конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary vsli:raw="Gets the component that contains the specified component.">Получает компонент, содержащий заданный компонент.</summary>
      <param name="reference" vsli:raw="The object to retrieve the parent component for.">Объект, для которого загружается родительский компонент.</param>
      <returns vsli:raw="The base &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that contains the specified object, or &lt;see langword=&quot;null&quot; /&gt; if no parent component exists.">Базовый интерфейс <see cref="T:System.ComponentModel.IComponent" />, содержащий заданный объект, или значение <see langword="null" />, если родительского компонента не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">Получает имя указанного компонента.</summary>
      <param name="reference" vsli:raw="The object to return the name of.">Объект, имя которого должно быть возвращено.</param>
      <returns vsli:raw="The name of the object referenced, or &lt;see langword=&quot;null&quot; /&gt; if the object reference is not valid.">Имя объекта, на который осуществляется ссылка, или значение <see langword="null" />, если ссылка на объект недопустима.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary vsli:raw="Gets a reference to the component whose name matches the specified name.">Получает ссылку на компонент, имя которого соответствует заданному имени.</summary>
      <param name="name" vsli:raw="The name of the component to return a reference to.">Имя компонента, на который возвращается ссылка.</param>
      <returns vsli:raw="An object the specified name refers to, or &lt;see langword=&quot;null&quot; /&gt; if no reference is found.">Объект, на который ссылается указанное имя, или значение <see langword="null" />, если ссылка не найдена.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary vsli:raw="Gets all available references to project components.">Получает все доступные ссылки на компоненты проекта.</summary>
      <returns vsli:raw="An array of all objects with references available to the &lt;see cref=&quot;T:System.ComponentModel.Design.IReferenceService&quot; /&gt;.">Массив всех объектов со ссылками, доступными в классе <see cref="T:System.ComponentModel.Design.IReferenceService" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary vsli:raw="Gets all available references to components of the specified type.">Получает все доступные ссылки на компоненты заданного типа.</summary>
      <param name="baseType" vsli:raw="The type of object to return references to instances of.">Тип объекта, на экземпляры которого возвращаются ссылки.</param>
      <returns vsli:raw="An array of all available objects of the specified type.">Массив всех доступных объектов заданного типа.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary vsli:raw="Provides an interface for designers to access resource readers and writers for specific &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; resource types.">Предоставляет конструкторам интерфейс для получения доступа к устройствам чтения и записи ресурсов для определенных типов ресурсов класса <see cref="T:System.Globalization.CultureInfo" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource reader for the specified culture and returns it.">Осуществляет поиск устройства чтения ресурсов для заданной культуры.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to retrieve a resource reader.">Класс <see cref="T:System.Globalization.CultureInfo" /> ресурса, для которого необходимо загрузить устройство чтения ресурсов.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceReader&quot; /&gt; interface that contains the resources for the culture, or &lt;see langword=&quot;null&quot; /&gt; if no resources for the culture exist.">Интерфейс <see cref="T:System.Resources.IResourceReader" />, содержащий ресурсы для культуры, или значение <see langword="null" />, если для нее не существует ресурсов.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource writer for the specified culture and returns it.">Осуществляет поиск устройства записи ресурсов для заданной культуры.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to create a resource writer.">Класс <see cref="T:System.Globalization.CultureInfo" /> ресурса, для которого необходимо создать устройство записи ресурсов.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceWriter&quot; /&gt; interface for the specified culture.">Интерфейс <see cref="T:System.Resources.IResourceWriter" /> для заданной культуры.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary vsli:raw="Provides support for root-level designer view technologies.">Предоставляет поддержку технологий просмотра конструктора корневого уровня.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary vsli:raw="Gets a view object for the specified view technology.">Получает объект просмотра для заданной технологии просмотра.</summary>
      <param name="technology" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; that indicates a particular view technology.">
        <see cref="T:System.ComponentModel.Design.ViewTechnology" /> показывает определенную технологию просмотра.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified view technology is not supported or does not exist.">Указанная технология просмотра не поддерживается или не существует.</exception>
      <returns vsli:raw="An object that represents the view for this designer.">Объект, отражающий представление для данного конструктора.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary vsli:raw="Gets the set of technologies that this designer can support for its display.">Возвращает или устанавливает набор технологий, которые данный конструктор может поддерживать для отображения.</summary>
      <returns vsli:raw="An array of supported &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; values.">Массив значений поддерживаемого типа <see cref="T:System.ComponentModel.Design.ViewTechnology" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary vsli:raw="Provides an interface for a designer to select components.">Предоставляет интерфейс выбора компонентов для конструктора.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary vsli:raw="Occurs when the current selection changes.">Возникает при изменении текущего выделения.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary vsli:raw="Occurs when the current selection is about to change.">Возникает перед изменением текущего выделения.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary vsli:raw="Gets a value indicating whether the specified component is currently selected.">Получает значение, показывающее, выделен ли указанный компонент в данный момент.</summary>
      <param name="component" vsli:raw="The component to test.">Проверяемый компонент.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is part of the user's current selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если компонент является частью текущего выбора пользователя; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary vsli:raw="Gets a collection of components that are currently selected.">Возвращает коллекцию компонентов, выделенную в настоящий момент.</summary>
      <returns vsli:raw="A collection that represents the current set of components that are selected.">Коллекция, представляющая текущий набор выделенных компонентов.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary vsli:raw="Selects the specified collection of components.">Выделяет заданную коллекцию компонентов.</summary>
      <param name="components" vsli:raw="The collection of components to select.">Коллекция выделяемых компонентов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary vsli:raw="Selects the components from within the specified collection of components that match the specified selection type.">Выделяет компоненты из заданной коллекции компонентов, которые соответствуют указанному типу выделения.</summary>
      <param name="components" vsli:raw="The collection of components to select.">Коллекция выделяемых компонентов.</param>
      <param name="selectionType" vsli:raw="A value from the &lt;see cref=&quot;T:System.ComponentModel.Design.SelectionTypes&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;.">Значение из перечисления <see cref="T:System.ComponentModel.Design.SelectionTypes" />. Значение по умолчанию — <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary vsli:raw="Gets the object that is currently the primary selected object.">Получает объект, являющийся на данный момент основным выделенным объектом.</summary>
      <returns vsli:raw="The object that is currently the primary selected object.">Объект, являющийся на данный момент основным выделенным объектом.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary vsli:raw="Gets the count of selected objects.">Получает число выделенных объектов.</summary>
      <returns vsli:raw="The number of selected objects.">Число выделенных объектов.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary vsli:raw="Provides a container for services.">Предоставляет контейнер для служб.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">Добавляет указанную службу в контейнер службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Тип службы для добавления.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">Объект обратного вызова, используемый для создания службы. Это позволяет объявлять службу как доступную, однако откладывает создание объекта до запроса службы.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to parent service containers.">Добавляет указанную службу в контейнер службы с возможностью повышения службы до родительских контейнеров службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Тип службы для добавления.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">Объект обратного вызова, используемый для создания службы. Это позволяет объявлять службу как доступную, однако откладывает создание объекта до запроса службы.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы распространить этот запрос на все родительские контейнеры служб. В противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">Добавляет указанную службу в контейнер службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Тип службы для добавления.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Экземпляр типа службы для добавления. Данный объект должен реализовывать или наследовать тип, определяемый параметром <paramref name="serviceType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to any parent service containers.">Добавляет указанную службу в контейнер службы с возможностью повышения службы до любого из родительских контейнеров службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Тип службы для добавления.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Экземпляр типа службы для добавления. Данный объект должен реализовывать или наследовать тип, определяемый параметром <paramref name="serviceType" />.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы распространить этот запрос на все родительские контейнеры служб. В противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">Удаляет указанный тип службы из контейнера службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Тип службы для удаления.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container, and optionally promotes the service to parent service containers.">Удаляет указанную службу из контейнера службы с возможностью повышения службы до родительских контейнеров службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Тип службы для удаления.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы распространить этот запрос на все родительские контейнеры служб. В противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary vsli:raw="Provides support for building a set of related custom designers.">Предоставляет поддержку для создания набора связанных пользовательских конструкторов.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary vsli:raw="Gets a collection of child designers.">Возвращает коллекцию дочерних конструкторов.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;, containing the collection of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; child objects of the current designer.">Коллекция <see cref="T:System.Collections.ICollection" />, содержащая коллекцию дочерних объектов интерфейса <see cref="T:System.ComponentModel.Design.IDesigner" /> текущего конструкторов.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary vsli:raw="Gets the parent designer.">Возвращает родительский конструктор.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; representing the parent designer, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">Интерфейс <see cref="T:System.ComponentModel.Design.IDesigner" />, представляющий родительский интерфейс, либо интерфейс <see langword="null" />, если родительский объект отсутствует.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary vsli:raw="Provides an interface to modify the set of member descriptors for a component in design mode.">Предоставляет интерфейс для изменения набора дескрипторов элементов для компонента в режиме разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the attributes that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Фильтрует атрибуты, предоставляемые компонентом через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter the attributes of.">Компонент, атрибуты которого необходимо отфильтровать.</param>
      <param name="attributes" vsli:raw="A dictionary of attributes that can be modified.">Словарь атрибутов, которые можно изменить.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered attributes is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">Значение <see langword="true" />, если набор отфильтрованных атрибутов должен быть помещен в кэш; значение <see langword="false" />, если служба фильтрации должна снова сделать запрос.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the events that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Фильтрует события, предоставляемые компонентом через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter events for.">Компонент, для которого необходимо отфильтровать события.</param>
      <param name="events" vsli:raw="A dictionary of events that can be modified.">Словарь событий, которые можно изменить.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered events is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">Значение <see langword="true" />, если набор отфильтрованных событий должен быть помещен в кэш; значение <see langword="false" />, если служба фильтрации должна снова сделать запрос.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the properties that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Фильтрует свойства, предоставляемые компонентом через класс <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter properties for.">Компонент, для которого необходимо отфильтровать свойства.</param>
      <param name="properties" vsli:raw="A dictionary of properties that can be modified.">Словарь свойств, которые можно изменить.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered properties is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">Значение <see langword="true" />, если набор отфильтрованных свойств должен быть кэширован; значение <see langword="false" />, если служба фильтрации должна снова делать запрос.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary vsli:raw="Discovers available types at design time.">Выявляет доступные типы времени разработки.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary vsli:raw="Retrieves the list of available types.">Извлекает список доступных типов.</summary>
      <param name="baseType" vsli:raw="The base type to match. Can be &lt;see langword=&quot;null&quot; /&gt;.">Базовый тип для выполнения сравнения. Может иметь значение <see langword="null" />.</param>
      <param name="excludeGlobalTypes" vsli:raw="Indicates whether types from all referenced assemblies should be checked.">Указывает, должны проверяться типы из всех базовых сборок.</param>
      <returns vsli:raw="A collection of types that match the criteria specified by &lt;paramref name=&quot;baseType&quot; /&gt; and &lt;paramref name=&quot;excludeGlobalTypes&quot; /&gt;.">Коллекция типов, которые соответствует критериям, определенным параметрами <paramref name="baseType" /> и <paramref name="excludeGlobalTypes" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary vsli:raw="Provides an interface to retrieve an assembly or type by name.">Предоставляет интерфейс для извлечения сборки или типа по имени.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the requested assembly.">Получает запрошенную сборку.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">Имя извлекаемой сборки.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">Экземпляр запрошенной сборки, либо значение <see langword="null" />, если сборку найти невозможно.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary vsli:raw="Gets the requested assembly.">Получает запрошенную сборку.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">Имя извлекаемой сборки.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">Значение <see langword="true" />, если этот метод должен создать исключение в случае, если сборка не может быть найдена; в противном случае — <see langword="false" />. Метод возвращает значение <see langword="null" />, если сборку найти невозможно.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">Экземпляр запрошенной сборки, либо значение <see langword="null" />, если сборку найти невозможно.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the path to the file from which the assembly was loaded.">Возвращает путь к файлу, из которого загружена сборка.</summary>
      <param name="name" vsli:raw="The name of the assembly.">Имя сборки.</param>
      <returns vsli:raw="The path to the file from which the assembly was loaded.">Путь к файлу, из которого загружена сборка.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary vsli:raw="Loads a type with the specified name.">Загружает тип с указанным именем.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Имя типа. Если имя типа не является полным именем, определяющим сборку, служба будет выполнять поиск внутреннего набора сборок, на которые существуют ссылки.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Экземпляр класса <see cref="T:System.Type" />, соответствующий указанному имени, или значение <see langword="null" />, если тип найти невозможно.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">Загружает тип с указанным именем.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Имя типа. Если имя типа не является полным именем, определяющим сборку, служба будет выполнять поиск внутреннего набора сборок, на которые существуют ссылки.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">Значение <see langword="true" />, если этот метод должен создать исключение в случае, если сборка не может быть найдена; в противном случае — <see langword="false" />. Метод возвращает значение <see langword="null" />, если сборку найти невозможно.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Экземпляр класса <see cref="T:System.Type" />, соответствующий указанному имени, или значение <see langword="null" />, если тип найти невозможно.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">Загружает тип с указанным именем.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Имя типа. Если имя типа не является полным именем, определяющим сборку, служба будет выполнять поиск внутреннего набора сборок, на которые существуют ссылки.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">Значение <see langword="true" />, если этот метод должен создать исключение в случае, если сборка не может быть найдена; в противном случае — <see langword="false" />. Метод возвращает значение <see langword="null" />, если сборку найти невозможно.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore case when searching for types; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы не учитывать регистр при поиске типов; в противном случае — значение <see langword="false" />.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Экземпляр класса <see cref="T:System.Type" />, соответствующий указанному имени, или значение <see langword="null" />, если тип найти невозможно.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Adds a reference to the specified assembly.">Добавляет ссылку на указанную сборку.</summary>
      <param name="name" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that indicates the assembly to reference.">Класс <see cref="T:System.Reflection.AssemblyName" />, определяющий сборку, на которую нужно установить ссылку.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary vsli:raw="Represents a Windows menu or toolbar command item.">Представляет меню Windows или команду панели инструментов.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary vsli:raw="Occurs when the menu command changes.">Возникает при изменении команды меню.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <param name="handler" vsli:raw="The event to raise when the user selects the menu item or toolbar button.">Событие, вызываемое при выборе пользователем команды меню или нажатии кнопки панели инструментов.</param>
      <param name="command" vsli:raw="The unique command ID that links this menu command to the environment's menu.">Уникальный идентификатор команды, связывающий данную команду меню с меню среды.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary vsli:raw="Invokes the command.">Вызывает команду.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary vsli:raw="Invokes the command with the given parameter.">Вызывает команду с заданным параметром.</summary>
      <param name="arg" vsli:raw="An optional argument for use by the command.">Дополнительный аргумент для команды.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.MenuCommand.CommandChanged&quot; /&gt; event.">Вызывает событие <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary vsli:raw="Returns a string representation of this menu command.">Возвращает строковое представление данной команды меню.</summary>
      <returns vsli:raw="A string containing the value of the &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.CommandID&quot; /&gt; property appended with the names of any flags that are set, separated by pipe bars (|). These flag properties include &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Checked&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Enabled&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Supported&quot; /&gt;, and &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Visible&quot; /&gt;.">Строка, содержащая значение свойства <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" />, дополненного именами всех установленных флагов, разделенными вертикальной чертой "|". Эти свойства флагов включают свойства <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> и <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is checked.">Получает или задает значение, указывающее, отмечена ли данная команда меню.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is checked; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если команда отмечена флажком; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with this menu command.">Получает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" />, связанный с данной командой меню.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with the menu command.">Идентификатор <see cref="T:System.ComponentModel.Design.CommandID" />, связанный с данной командой меню.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary vsli:raw="Gets a value indicating whether this menu item is available.">Получает значение, показывающее, доступна ли данная команда меню.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент включен; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary vsli:raw="Gets the OLE command status code for this menu item.">Получает код состояния команды OLE для данной команды меню.</summary>
      <returns vsli:raw="An integer containing a mixture of status flags that reflect the state of this menu item.">Целочисленное значение, содержащее сочетание флагов состояний, отражающих состояние данной команды меню.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary vsli:raw="Gets the public properties associated with the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">Возвращает открытые свойства, сопоставленные объекту <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing the public properties of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">Словарь <see cref="T:System.Collections.IDictionary" />, содержащий открытые свойства объекта <see cref="T:System.ComponentModel.Design.MenuCommand" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is supported.">Получает или задает значение, показывающее, поддерживается ли данная команда меню.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is supported, which is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если команда поддерживается (это значение установлено по умолчанию); в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is visible.">Возвращает или задает значение, указывающее, отображается ли данная команда меню.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is visible; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если команда отображается на экране; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary vsli:raw="Defines identifiers that indicate the type of a selection.">Определяет идентификаторы, показывающие тип выделения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary vsli:raw="Represents an add selection that adds the selected components to the current selection, maintaining the current set of selected components.">Представляет выбор для добавления, при котором выбранные компоненты добавляются в текущее выделение с сохранением текущего набора выбранных компонентов.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">Представляет обычное выделение. Служба выбора реагирует на нажатие клавиш CTRL and SHIFT для поддержки добавления или удаления компонентов выделения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary vsli:raw="Represents a selection that occurs when a user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">Представляет выделение, возникающее при щелчке компонента пользователем. Если вновь выделенный компонент уже выделен, это выделение не снимается, а компонент становится основным выделенным компонентом.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary vsli:raw="Represents a selection that occurs when the user presses on the mouse button while the mouse pointer is over a component. If the component under the pointer is already selected, it is promoted to become the primary selected component rather than being canceled.">Представляет выделение, возникающее при нажатии пользователем кнопки мыши, когда указатель мыши расположен на компоненте. Если этот компонент уже выделен, выделение не снимается, а компонент становится основным выделенным компонентом.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary vsli:raw="Represents a selection that occurs when the user releases the mouse button immediately after a component has been selected. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">Представляет выделение, возникающее при отпускании кнопки мыши сразу после того как компонент был выделен. Если вновь выделенный компонент уже выделен, это выделение не снимается, а компонент становится основным выделенным компонентом.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">Представляет обычное выделение. Служба выбора реагирует на нажатие клавиш CTRL and SHIFT для поддержки добавления или удаления компонентов выделения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary vsli:raw="Represents a primary selection that occurs when a user clicks on a component. If a component in the selection list is already selected, the component is promoted to be the primary selection.">Представляет основное выделение, возникающее при щелчке компонента пользователем. Если компонент в списке выбора ужа выбран, этот компонент становится основным выбранным компонентом.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary vsli:raw="Represents a remove selection that removes the selected components from the current selection, maintaining the current set of selected components.">Представляет выбор для удаления, при котором выбранные компоненты удаляются из текущего выделения с сохранением текущего набора выбранных компонентов.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary vsli:raw="Represents a selection that occurs when the content of a selection is replaced. The selection service replaces the current selection with the replacement.">Представляет выделение, возникающее при замещении содержимого выделения. Служба выбора заменяет текущее выделение на новое.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary vsli:raw="Represents a toggle selection that switches between the current selection and the provided selection. If a component is already selected and is passed into &lt;see cref=&quot;Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents&quot; /&gt; with a selection type of &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Toggle&quot; /&gt;, the component selection will be canceled.">Представляет выделение переключения, при котором выполняется переключение между текущим выделением и предоставленным выделением. Если компонент уже выбран и передается в объект <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> с типом выделения <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />, выбор компонента будет отменен.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary vsli:raw="Identifies the valid selection types as &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Replace&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseDown&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseUp&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Click&quot; /&gt;.">Определяет допустимые типы выделений как поле <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> или <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary vsli:raw="Provides the base class for serializing a set of components or serializable objects into a serialization store.">Предоставляет базовый класс для сериализации набора компонентов или сериализуемых объектов в хранилище сериализации.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Создает новый экземпляр <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <returns vsli:raw="A new created serialization store.">Новое хранилище сериализованных объектов.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary vsli:raw="Deserializes the given store to produce a collection of objects.">Выполняет десериализацию заданного хранилища для создания коллекции объектов.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">Объект <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, предназначенный для выполнения десериализации.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">Параметр <paramref name="store" /> не содержит данных в формате обработки контейнера сериализации.</exception>
      <returns vsli:raw="A collection of objects created according to the stored state.">Коллекция объектов, созданная в соответствии с состоянием хранения.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given store and populates the given &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with deserialized &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects.">Выполняет десериализацию заданного хранилища и заполняет заданное хранилище <see cref="T:System.ComponentModel.IContainer" /> десериализованными объектами <see cref="T:System.ComponentModel.IComponent" />.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">Объект <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, предназначенный для выполнения десериализации.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Класс <see cref="T:System.ComponentModel.IContainer" />, в который будут добавляться объекты <see cref="T:System.ComponentModel.IComponent" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="store" /> или <paramref name="container" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">Параметр <paramref name="store" /> не содержит данных в формате обработки контейнера сериализации.</exception>
      <returns vsli:raw="A collection of objects created according to the stored state.">Коллекция объектов, созданная в соответствии с состоянием хранения.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container.">Выполняет десериализацию заданного объекта <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> в заданный контейнер.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">Объект <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, предназначенный для выполнения десериализации.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Контейнер, в который добавляются объекты <see cref="T:System.ComponentModel.IComponent" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="store" /> или <paramref name="container" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">Параметр <paramref name="store" /> не содержит данных в формате обработки контейнера сериализации.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally validating recycled types.">Выполняет десериализацию заданного объекта <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> в заданный контейнер (при необходимости выполняется проверка очищенных типов).</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">Объект <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, предназначенный для выполнения десериализации.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Контейнер, в который добавляются объекты <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">Значение <see langword="true" /> гарантирует, что в процессе десериализации используется объект того же типа.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="store" /> или <paramref name="container" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">Параметр <paramref name="store" /> не содержит данных в формате обработки контейнера сериализации.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally applying default property values.">Выполняет десериализацию заданного объекта <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> в заданный контейнер (при необходимости применяются значения свойств по умолчанию).</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">Объект <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, предназначенный для выполнения десериализации.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Контейнер, в который добавляются объекты <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">Значение <see langword="true" /> гарантирует, что в процессе десериализации используется объект того же типа.</param>
      <param name="applyDefaults" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the default property values should be applied.">Значение <see langword="true" /> указывает, что используются значения свойств по умолчанию.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="store" /> или <paramref name="container" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">Параметр <paramref name="store" /> не содержит данных в формате обработки контейнера сериализации.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; from a stream.">Загружает хранилище <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> из потока.</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which the store will be loaded.">Поток <see cref="T:System.IO.Stream" />, из которого загружается хранилище.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; does not contain data saved by a previous call to &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)&quot; /&gt;.">Параметр <paramref name="stream" /> не содержит данных, сохраненных при предыдущем вызове в метод <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" />.</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; instance.">Новый экземпляр <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object to the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Выполняет сериализацию заданного объекта в заданное хранилище <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be written.">Класс <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, в который будет записано состояние параметра <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to serialize.">Объект для сериализации.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="store" /> или <paramref name="value" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">Хранилище <paramref name="store" /> закрыто, или <paramref name="store" /> не является поддерживаемым типом хранилища сериализации. Используйте хранилище, возвращаемое методом <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object, accounting for default property values.">Выполняет сериализацию заданного объекта, учитывая значения свойств по умолчанию.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be serialized.">Класс <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, в который будет выполнена сериализация состояния параметра <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to serialize.">Объект для сериализации.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="store" /> или <paramref name="value" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">Хранилище <paramref name="store" /> закрыто, или <paramref name="store" /> не является поддерживаемым типом хранилища сериализации. Используйте хранилище, возвращаемое методом <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object.">Сериализует заданный элемент в заданном объекте.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">Класс <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, в который будет выполнена сериализация состояния параметра <paramref name="member" />.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">Объект, к которому привязывается параметр <paramref name="member" />.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; specifying the member to serialize.">Объект <see cref="T:System.ComponentModel.MemberDescriptor" />, указывающий член для сериализации.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="store" /> или <paramref name="value" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">Хранилище <paramref name="store" /> закрыто, или <paramref name="store" /> не является поддерживаемым типом хранилища сериализации. Используйте хранилище, возвращаемое методом <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object, accounting for the default property value.">Выполняет сериализацию заданного элемента в заданный объект, учитывая значение свойства по умолчанию.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">Класс <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, в который будет выполнена сериализация состояния параметра <paramref name="member" />.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">Объект, к которому привязывается параметр <paramref name="member" />.</param>
      <param name="member" vsli:raw="The member to serialize.">Элемент для сериализации.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="store" /> или <paramref name="value" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">Хранилище <paramref name="store" /> закрыто, или <paramref name="store" /> не является поддерживаемым типом хранилища сериализации. Используйте хранилище, возвращаемое методом <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary vsli:raw="Provides a stack object that can be used by a serializer to make information available to nested serializers.">Содержит объект стека, который может использоваться сериализатором для обеспечения доступности данных вложенным сериализаторам.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary vsli:raw="Appends an object to the end of the stack, rather than pushing it onto the top of the stack.">Добавляет объект в конец стека, но не отправляет его на верх стека.</summary>
      <param name="context" vsli:raw="A context object to append to the stack.">Контекстный объект, добавленный в стек.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary vsli:raw="Removes the current object off of the stack, returning its value.">Удаляет текущий объект из стека, возвращая его значение.</summary>
      <returns vsli:raw="The object removed from the stack; &lt;see langword=&quot;null&quot; /&gt; if no objects are on the stack.">Удаленный из стека объект; значение <see langword="null" />, если в стеке нет объектов.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary vsli:raw="Pushes, or places, the specified object onto the stack.">Отправляет или помещает указанный объект в стек.</summary>
      <param name="context" vsli:raw="The context object to push onto the stack.">Контекстный объект, отправленный в стек.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary vsli:raw="Gets the current object on the stack.">Возвращает текущий объект в стеке.</summary>
      <returns vsli:raw="The current object on the stack, or &lt;see langword=&quot;null&quot; /&gt; if no objects were pushed.">Текущий объект в стеке или значение <see langword="null" />, если в стек не отправлено ни одного объекта.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary vsli:raw="Gets the object on the stack at the specified level.">Возвращает объект стека на указанном уровне.</summary>
      <param name="level" vsli:raw="The level of the object to retrieve on the stack. Level 0 is the top of the stack, level 1 is the next down, and so on. This level must be 0 or greater. If level is greater than the number of levels on the stack, it returns &lt;see langword=&quot;null&quot; /&gt;.">Уровень, с которого загружается объект стека. Уровень 0 является верхним в стеке, за ним идет уровень 1 и т. д. Этот уровень должен быть 0 или выше. Если уровень больше, чем количество уровней в стеке, возвращается значение <see langword="null" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;level&quot; /&gt; is less than 0.">Значение параметра<paramref name="level" /> меньше 0.</exception>
      <returns vsli:raw="The object on the stack at the specified level, or &lt;see langword=&quot;null&quot; /&gt; if no object exists at that level.">Объект в стеке на указанном уровне или значение <see langword="null" />, если на уровне нет объектов.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary vsli:raw="Gets the first object on the stack that inherits from or implements the specified type.">Возвращает первый объект стека, который наследует или использует заданный тип.</summary>
      <param name="type" vsli:raw="A type to retrieve from the context stack.">Тип, загружаемый из контекстного стека.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The first object on the stack that inherits from or implements the specified type, or &lt;see langword=&quot;null&quot; /&gt; if no object on the stack implements the type.">Первый объект стека, который наследует или использует заданный тип, либо значение <see langword="null" />, если тип не используется ни одним из объектов стека.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; attribute is placed on a serializer to indicate the class to use as a default provider of that type of serializer.">Атрибут <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> размещается в сериализатор для обозначения класса, используемого в качестве поставщика по умолчанию данного типа сериализатора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the named provider type.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> с именованным типом поставщика.</summary>
      <param name="providerTypeName" vsli:raw="The name of the serialization provider type.">Имя типа поставщика сериализации.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerTypeName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the given provider type.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> с заданным типом поставщика.</summary>
      <param name="providerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the serialization provider.">Класс <see cref="T:System.Type" /> поставщика сериализации.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary vsli:raw="Gets the type name of the serialization provider.">Возвращает имя типа поставщика сериализации.</summary>
      <returns vsli:raw="A string containing the name of the provider.">Строка, содержащая название поставщика.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary vsli:raw="Provides a basic designer loader interface that can be used to implement a custom designer loader.">Предоставляет основной интерфейс загрузчика конструктора, используемый для реализации пользовательского загрузчика конструктора.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary vsli:raw="Begins loading a designer.">Начинает загрузку конструктора.</summary>
      <param name="host" vsli:raw="The loader host through which this loader loads components.">узел загрузчика, через который происходит загрузка компонентов.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt;.">Освобождает все ресурсы, занятые модулем <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary vsli:raw="Writes cached changes to the location that the designer was loaded from.">Записывает изменения в кэше в то местоположение, из которого был загружен конструктор.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary vsli:raw="Gets a value indicating whether the loader is currently loading a document.">Возвращает значение, определяющее, загружается ли документ загрузчиком.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the loader is currently loading a document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если документ загружается загрузчиком; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary vsli:raw="Provides an interface that can extend a designer host to support loading from a serialized state.">Предоставляет интерфейс, позволяющий расширить узел конструктора для обеспечения загрузки из сериализованного состояния.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Ends the designer loading operation.">Прекращает операцию загрузки конструктора.</summary>
      <param name="baseClassName" vsli:raw="The fully qualified name of the base class of the document that this designer is designing.">Полное имя базового класса документа, создаваемого конструктором.</param>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is successfully loaded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если конструктор загружен успешно; в противном случае — <see langword="false" />.</param>
      <param name="errorCollection" vsli:raw="A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">Коллекция ошибок, возникших при загрузке. Если ошибок нет, передается либо пустая коллекция, либо значение <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary vsli:raw="Reloads the design document.">Перезагружает документ проекта.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary vsli:raw="Provides an interface that extends &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&quot; /&gt; to specify whether errors are tolerated while loading a design document.">Предоставляет интерфейс для расширения <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />, чтобы указать, допускаются ли ошибки в процессе загрузки документа проекта.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary vsli:raw="Gets or sets a value indicating whether it is possible to reload with errors.">Возвращает или задает значение, указывающее, возможна ли повторная загрузка с ошибками.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader can reload the design document when errors are detected; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если загрузчик конструктора может выполнить повторную загрузку документа проекта с обнаруженными ошибками; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary vsli:raw="Gets or sets a value indicating whether errors should be ignored when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload&quot; /&gt; is called.">Возвращает или задает значение, указывающее, следует ли игнорировать ошибки при вызове метода <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader will ignore errors when it reloads; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если загрузчик конструктора игнорирует ошибки при загрузке; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary vsli:raw="Provides an interface that can extend a designer loader to support asynchronous loading of external components.">Предоставляет интерфейс, позволяющий расширить загрузчик конструктора для обеспечения асинхронной загрузки внешних компонентов.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary vsli:raw="Registers an external component as part of the load process managed by this interface.">Регистрирует внешний компонент как часть процесса загрузки под управлением данного интерфейса.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Signals that a dependent load has finished.">Посылает сигнал о завершении зависимой загрузки.</summary>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the load of the designer is successful; &lt;see langword=&quot;false&quot; /&gt; if errors prevented the load from finishing.">Значение <see langword="true" />, если загрузка конструктора прошла успешно; значение <see langword="false" />, если возникли ошибки и загрузка не завершена.</param>
      <param name="errorCollection" vsli:raw="A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">Коллекция ошибок, возникших при загрузке. Если ошибок нет, передается либо пустая коллекция, либо значение <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary vsli:raw="Reloads the design document.">Перезагружает документ проекта.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reload request is accepted, or &lt;see langword=&quot;false&quot; /&gt; if the loader does not allow the reload.">Значение <see langword="true" />, если принят запрос о перезагрузке, либо значение <see langword="false" />, если перезагрузка запрещена.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary vsli:raw="Provides an interface that can manage design-time serialization.">Предоставляет интерфейс для управления сериализацией во время разработки.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)&quot; /&gt; cannot locate the specified name in the serialization manager's name table.">Возникает, если не удается найти заданное имя в таблице имен диспетчера сериализации с помощью метода <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary vsli:raw="Occurs when serialization is complete.">Возникает при завершении сериализации.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Adds the specified serialization provider to the serialization manager.">Добавляет диспетчеру сериализации заданный поставщик сериализации.</summary>
      <param name="provider" vsli:raw="The serialization provider to add.">Добавляемый поставщик сериализации.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary vsli:raw="Creates an instance of the specified type and adds it to a collection of named instances.">Создает экземпляр указанного типа, и добавляет его в сборник именованных экземпляров.</summary>
      <param name="type" vsli:raw="The data type to create.">Создаваемый тип данных.</param>
      <param name="arguments" vsli:raw="The arguments to pass to the constructor for this type.">Аргументы, передаваемые конструктору для данного типа.</param>
      <param name="name" vsli:raw="The name of the object. This name can be used to access the object later through &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the object is still created but cannot be accessed by name.">Имя объекта. Это имя используется для доступа к объекту через класс <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. Если передается значение <see langword="null" />, объект создается, но к нему нельзя получить доступ по имени.</param>
      <param name="addToContainer" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, this object is added to the design container. The object must implement &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for this to have any effect.">При значении <see langword="true" /> объект добавляется в контейнер проекта. Для этого объект должен реализовать класс <see cref="T:System.ComponentModel.IComponent" />.</param>
      <returns vsli:raw="The newly created object instance.">Только что созданный экземпляр объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary vsli:raw="Gets an instance of a created object of the specified name, or &lt;see langword=&quot;null&quot; /&gt; if that object does not exist.">Получает экземпляр созданного объекта с указанным именем либо значение <see langword="null" />, если объект не существует.</summary>
      <param name="name" vsli:raw="The name of the object to retrieve.">Имя получаемого объекта.</param>
      <returns vsli:raw="An instance of the object with the given name, or &lt;see langword=&quot;null&quot; /&gt; if no object by that name can be found.">Экземпляр объекта с заданным именем либо значение <see langword="null" />, если не удается найти объект с указанным именем.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified object, or &lt;see langword=&quot;null&quot; /&gt; if the object has no name.">Получает имя указанного объекта или значение <see langword="null" />, если у объекта нет имени.</summary>
      <param name="value" vsli:raw="The object to retrieve the name for.">Объект, для которого получается имя.</param>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object is unnamed.">Имя объекта или значение <see langword="null" />, если у объекта нет имени.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer of the requested type for the specified object type.">Получает сериализатор запрошенного типа для указанного типа объекта.</summary>
      <param name="objectType" vsli:raw="The type of the object to get the serializer for.">Тип объекта, для которого получается сериализатор.</param>
      <param name="serializerType" vsli:raw="The type of the serializer to retrieve.">Тип загружаемого сериализатора.</param>
      <returns vsli:raw="An instance of the requested serializer, or &lt;see langword=&quot;null&quot; /&gt; if no appropriate serializer can be located.">Экземпляр запрошенного типа или значение <see langword="null" />, если не удается найти соответствующий сериализатор.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary vsli:raw="Gets a type of the specified name.">Возвращает тип указанного имени.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the type to load.">Полное имя загружаемого типа.</param>
      <returns vsli:raw="An instance of the type, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be loaded.">Экземпляр типа или значение <see langword="null" />, если не удается загрузить тип.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Removes a custom serialization provider from the serialization manager.">Удаляет пользовательский поставщик сериализации из диспетчера сериализации.</summary>
      <param name="provider" vsli:raw="The provider to remove. This object must have been added using &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)&quot; /&gt;.">Удаляемый поставщик. Этот объект должен добавляться с помощью метода <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary vsli:raw="Reports an error in serialization.">Сообщает об ошибке в сериализации.</summary>
      <param name="errorInformation" vsli:raw="The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; is called to display the information to the user.">Ошибка. Этот объект данных может принадлежать к любому типу объектов. Если это исключение, пользователь получает сообщение об исключении. Если объект другого типа, то для представления информации пользователю вызывается метод <see cref="M:System.Object.ToString" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary vsli:raw="Sets the name of the specified existing object.">Задает имя заданного существующего объекта.</summary>
      <param name="instance" vsli:raw="The object instance to name.">Экземпляр объекта, которому необходимо задать имя.</param>
      <param name="name" vsli:raw="The name to give the instance.">Имя экземпляра.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary vsli:raw="Gets a stack-based, user-defined storage area that is useful for communication between serializers.">Получает стековую, определяемую пользователем область памяти, которая используется для взаимодействия сериализаторов.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; that stores data.">Класс <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />, где хранятся данные.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary vsli:raw="Indicates custom properties that can be serializable with available serializers.">Определяет настраиваемые свойства, которые могут быть сериализованы с помощью доступных сериализаторов.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties to be serialized.">Класс <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащий свойства, подлежащие сериализации.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary vsli:raw="Provides an interface that enables access to a serializer.">Предоставляет интерфейс, позволяющий получать доступ к сериализатору.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer using the specified attributes.">Получает сериализатор с помощью указанных атрибутов.</summary>
      <param name="manager" vsli:raw="The serialization manager requesting the serializer.">Диспетчер сериализации, запрашивающий сериализатор.</param>
      <param name="currentSerializer" vsli:raw="An instance of the current serializer of the specified type. This can be &lt;see langword=&quot;null&quot; /&gt; if no serializer of the specified type exists.">Экземпляр текущего сериализатора указанного типа. Может иметь значение <see langword="null" />, если сериализатор указанного типа не существует.</param>
      <param name="objectType" vsli:raw="The data type of the object to serialize.">Тип данных объекта сериализации.</param>
      <param name="serializerType" vsli:raw="The data type of the serializer to create.">Тип данных создаваемого сериализатора.</param>
      <returns vsli:raw="An instance of a serializer of the type requested, or &lt;see langword=&quot;null&quot; /&gt; if the request cannot be satisfied.">Экземпляр сериализатора запрошенного типа или значение <see langword="null" />, если не удалось выполнить запрос.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary vsli:raw="Provides an interface that can invoke serialization and deserialization.">Предоставляет интерфейс для вызова процессов сериализации и десериализации.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary vsli:raw="Deserializes the specified serialization data object and returns a collection of objects represented by that data.">Выполняет десериализацию указанного объекта данных сериализации и возвращает коллекцию объектов, представляемых этими данными.</summary>
      <param name="serializationData" vsli:raw="An object consisting of serialized data.">Объект, состоящий из сериализованных данных.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of objects rebuilt from the specified serialization data object.">Класс <see cref="T:System.Collections.ICollection" /> объектов, восстановленных из указанного объекта данных сериализации.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary vsli:raw="Serializes the specified collection of objects and stores them in a serialization data object.">Выполняет сериализацию указанной коллекции объектов и сохраняет их в объекте данных сериализации.</summary>
      <param name="objects" vsli:raw="A collection of objects to serialize.">Коллекция объектов, которые необходимо сериализовать.</param>
      <returns vsli:raw="An object that contains the serialized state of the specified collection of objects.">Объект, содержащий сериализованное состояние указанной коллекции объектов.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary vsli:raw="Provides a service that can generate unique names for objects.">Предоставляет службу для генерации уникальных имен объектов.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary vsli:raw="Creates a new name that is unique to all components in the specified container.">Создает новое имя, которое уникально для всех компонентов в указанном контейнере.</summary>
      <param name="container" vsli:raw="The container where the new object is added.">Контейнер, в который добавляется новый объект.</param>
      <param name="dataType" vsli:raw="The data type of the object that receives the name.">Тип данных объекта, которому возвращается имя.</param>
      <returns vsli:raw="A unique name for the data type.">Уникальное имя типа данных.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">Возвращает значение, определяющее, является ли указанное имя допустимым.</summary>
      <param name="name" vsli:raw="The name to validate.">Имя для проверки.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name is valid; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если имя является допустимым; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">Возвращает значение, определяющее, является ли указанное имя допустимым.</summary>
      <param name="name" vsli:raw="The name to validate.">Имя для проверки.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary vsli:raw="Provides the information necessary to create an instance of an object. This class cannot be inherited.">Предоставляет необходимые сведения для создания экземпляра объекта. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information and arguments.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, используя сведения и аргументы указанного элемента.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">Сведения элемента для дескриптора. Это может быть класс <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" />. Если это класс — <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" />, представляется элемент <see langword="static" />.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">Коллекция аргументов, передаваемый элементу. Параметр принимает значение <see langword="null" /> или является пустой коллекцией, если аргументы отсутствуют. Коллекция может также содержать другие экземпляры класса <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" /> и не представляет участника <see langword="static" />.  

-или- 
Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.PropertyInfo" /> и не является считываемым.  

-или- 
Параметр <paramref name="member" /> имеет тип <see cref="T:System.Reflection.MethodInfo" /> или <see cref="T:System.Reflection.ConstructorInfo" />, а число аргументов в <paramref name="arguments" /> не соответствует сигнатуре объекта <paramref name="member" />.

-или-

Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.ConstructorInfo" /> и представляет участника <see langword="static" />.  

-или- 
Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.FieldInfo" />, а число аргументов в <paramref name="arguments" /> не равно нулю.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, используя сведения указанного элемента, аргументы и значение, показывающее полноту описания экземпляра указанными сведениями.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">Сведения элемента для дескриптора. Это может быть класс <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" />. Если это класс — <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" />, представляется элемент <see langword="static" />.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">Коллекция аргументов, передаваемый элементу. Параметр принимает значение <see langword="null" /> или является пустой коллекцией, если аргументы отсутствуют. Коллекция может также содержать другие экземпляры класса <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <param name="isComplete" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified information completely describes the instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанные сведения полностью описывают экземпляр; в противном случае — <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> или <see cref="T:System.Reflection.PropertyInfo" /> и не представляет участника <see langword="static" /> 
 Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.PropertyInfo" /> и не является считываемым.  
  
 Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.MethodInfo" /> или <see cref="T:System.Reflection.ConstructorInfo" />, а число аргументов в <paramref name="arguments" /> не соответствует подписи параметра <paramref name="member" />.  
  
 Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.ConstructorInfo" /> и представляет участника <see langword="static" /> 
 Параметр <paramref name="member" /> является типом класса <see cref="T:System.Reflection.FieldInfo" />, а число аргументов в <paramref name="arguments" /> не равно нулю.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary vsli:raw="Invokes this instance descriptor and returns the object the descriptor describes.">Вызывает дескриптор экземпляра и возвращает объект, который он описывает.</summary>
      <returns vsli:raw="The object this instance descriptor describes.">Объект, который описывается дескриптором данного экземпляра.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary vsli:raw="Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.">Возвращает коллекцию аргументов, который можно использовать для восстановления экземпляра объекта, представляемого данным дескриптором экземпляра.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of arguments that can be used to create the object.">Коллекция аргументов <see cref="T:System.Collections.ICollection" />, используемый для создания объекта.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary vsli:raw="Gets a value indicating whether the contents of this &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; completely identify the instance.">Возвращает значение, показывающее полноту определения экземпляра содержимым класса <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance is completely described; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если описание экземпляра полное; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary vsli:raw="Gets the member information that describes the instance this descriptor is associated with.">Возвращает сведения элемента, описывающие экземпляр, с которым связан данный дескриптор.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the instance that this object is associated with.">Класс <see cref="T:System.Reflection.MemberInfo" />, описывающий экземпляр, с которым связан данный объект.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary vsli:raw="Represents a single relationship between an object and a member.">Представляет одиночную связь между объектом и элементом.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary vsli:raw="Represents the empty member relationship. This field is read-only.">Представляет связь пустого элемента. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="owner" vsli:raw="The object that owns &lt;paramref name=&quot;member&quot; /&gt;.">Объект, являющийся владельцем элемента <paramref name="member" />.</param>
      <param name="member" vsli:raw="The member which is to be related to &lt;paramref name=&quot;owner&quot; /&gt;.">Элемент, связанный с владельцем <paramref name="owner" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; or &lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="owner" /> или <paramref name="member" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance is equal to the specified object representing a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance.">Определяет, равны ли два экземпляра <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, с которым сравнивается текущий объект <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance and is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанный объект <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> равен текущему объекту <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equivalent.">Проверяет эквивалентность двух указанных структур <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the equality operator.">Структура <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, которая находится слева от оператора равенства.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the equality operator.">Структура <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, которая находится справа от оператора равенства.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Этот оператор возвращает значение <see langword="true" />, если две структуры <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different.">Проверяет различие двух указанных структур <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the inequality operator.">Структура <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, которая находится слева от оператора неравенства.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the inequality operator.">Структура <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, которая находится справа от оператора неравенства.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Этот оператор возвращает значение <see langword="true" />, если две структуры <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> различны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship.">Возвращает значение, указывающее, соответствует ли эта связь связи <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если эта связь соответствует связи <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary vsli:raw="Gets the related member.">Возвращает связанный элемент.</summary>
      <returns vsli:raw="The member that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">Элемент, передаваемый в метод <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary vsli:raw="Gets the owning object.">Возвращает владеющий объект.</summary>
      <returns vsli:raw="The owning object that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">Владеющий объект, передаваемый в метод <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary vsli:raw="Provides the base class for relating one member to another.">Предоставляет базовый класс для соотношения элементов друг с другом.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationshipService&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a relationship to the given source relationship.">Устанавливает связь для заданной исходной связи.</summary>
      <param name="source" vsli:raw="The source relationship.">Исходная связь.</param>
      <returns vsli:raw="A relationship to &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if no relationship exists.">Связь с <paramref name="source" />, или <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />, если связи не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Creates a relationship between the source object and target relationship.">Создает связь между исходным объектом и целевой связью.</summary>
      <param name="source" vsli:raw="The source relationship.">Исходная связь.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">Связь для источника.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The relationship is not supported by the service.">Связь не поддерживается службой.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a value indicating whether the given relationship is supported.">Возвращает значение, определяющее, поддерживается ли заданная связь.</summary>
      <param name="source" vsli:raw="The source relationship.">Исходная связь.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">Связь для источника.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a relationship between the given two objects is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если поддерживается связь между двумя заданными объектами; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">Устанавливает связь между источником и целевым объектом.</summary>
      <param name="source" vsli:raw="The source relationship. This is the left-hand side of a relationship assignment.">Исходная связь. Это левая сторона при назначении связи.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is empty, or the relationship is not supported by the service.">Значение параметра <paramref name="source" /> пустое, или связь не поддерживается службой.</exception>
      <returns vsli:raw="The current relationship associated with &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if there is no relationship.">Текущая связь соотносится со значением параметра <paramref name="source" /> или <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />, если связь отсутствует.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">Устанавливает связь между источником и целевым объектом.</summary>
      <param name="sourceOwner" vsli:raw="The owner of a source relationship.">Владелец исходной связи.</param>
      <param name="sourceMember" vsli:raw="The member of a source relationship.">Элемент исходной связи.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="sourceOwner" /> или <paramref name="sourceMember" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is empty, or the relationship is not supported by the service.">Значение параметра <paramref name="sourceOwner" /> или <paramref name="sourceMember" /> пустое, или связь не поддерживается службой.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure encapsulating the relationship between a source and target object, or &lt;see langword=&quot;null&quot; /&gt; if there is no relationship.">Структура <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />, инкапсулирующая связь между исходным и целевым объектом, или значение <see langword="null" />, если связь отсутствует.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event.">Предоставляет данные для события <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />.</summary>
      <param name="name" vsli:raw="The name to resolve.">Имя для сопоставления.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary vsli:raw="Gets the name of the object to resolve.">Возвращает имя сопоставляемого объекта.</summary>
      <returns vsli:raw="The name of the object to resolve.">Имя сопоставляемого объекта.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary vsli:raw="Gets or sets the object that matches the name.">Возвращает или задает объект, соответствующий имени.</summary>
      <returns vsli:raw="The object that the name is associated with.">Объект, с которым связано это имя.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event of a serialization manager.">Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> диспетчера сериализации.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary vsli:raw="Indicates the base serializer to use for a root designer object. This class cannot be inherited.">Определяет базовый сериализатор для объекта корневого конструктора. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> с помощью указанных атрибутов.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">Полное имя типа данных сериализатора.</param>
      <param name="baseSerializerTypeName" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.">Имя базового типа сериализатора. Класс может содержать несколько сериализаторов, если их базовые типы отличаются друг от друга.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если сериализатор поддерживает динамическую перезагрузку документа; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> с помощью указанных атрибутов.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">Полное имя типа данных сериализатора.</param>
      <param name="baseSerializerType" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.">Имя базового типа сериализатора. Класс может содержать несколько сериализаторов, если их базовые типы отличаются друг от друга.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если сериализатор поддерживает динамическую перезагрузку документа; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> с помощью указанных атрибутов.</summary>
      <param name="serializerType" vsli:raw="The data type of the serializer.">Тип данных сериализатора.</param>
      <param name="baseSerializerType" vsli:raw="The base type of the serializer. A class can include multiple serializers as they all have different base types.">Базовый тип сериализатора. Класс может содержать несколько сериализаторов, если их базовые типы отличаются друг от друга.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если сериализатор поддерживает динамическую перезагрузку документа; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary vsli:raw="Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.">Возвращает значение, обозначающее возможность поддержки корневым сериализатором перезагрузки документа проекта без предварительного удаления узла конструктора.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root serializer supports reloading; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если корневой сериализатор поддерживает перезагрузку; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the base type of the serializer.">Получает полное имя типа базового типа сериализатора.</summary>
      <returns vsli:raw="The name of the base type of the serializer.">Имя базового типа сериализатора.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the serializer.">Получает полное имя типа сериализатора.</summary>
      <returns vsli:raw="The name of the type of the serializer.">Имя типа сериализатора.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary vsli:raw="Gets a unique ID for this attribute type.">Получает уникальный идентификатор для атрибута данного типа.</summary>
      <returns vsli:raw="An object containing a unique ID for this attribute type.">Объект с уникальным идентификатором для атрибута данного типа.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary vsli:raw="Provides the base class for storing serialization data for the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt;.">Предоставляет базовый класс для хранения данных сериализации компонента <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary vsli:raw="Closes the serialization store.">Закрывает хранилище сериализации.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; and optionally releases the managed resources.">Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary vsli:raw="Saves the store to the given stream.">Сохраняет хранилище в заданный поток.</summary>
      <param name="stream" vsli:raw="The stream to which the store will be serialized.">Поток, для которого необходимо сериализовать хранилище.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Освобождает все ресурсы, занятые модулем <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary vsli:raw="Gets a collection of errors that occurred during serialization or deserialization.">Возвращает коллекцию ошибок, которые возникли в процессе сериализации или десериализации.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains errors that occurred during serialization or deserialization.">Коллекция <see cref="T:System.Collections.ICollection" />, содержащий ошибки, которые возникли в процессе сериализации или десериализации.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary vsli:raw="Provides a simple implementation of the &lt;see cref=&quot;T:System.ComponentModel.Design.IServiceContainer&quot; /&gt; interface. This class cannot be inherited.">Предоставляет простую реализацию интерфейса <see cref="T:System.ComponentModel.Design.IServiceContainer" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class using the specified parent service provider.">Выполняет инициализацию нового экземпляра класса <see cref="T:System.ComponentModel.Design.ServiceContainer" /> с использованием указанного родительского поставщика службы.</summary>
      <param name="parentProvider" vsli:raw="A parent service provider.">Родительский поставщик службы.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">Добавляет указанную службу в контейнер службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Тип службы для добавления.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">Объект обратного вызова, создающий службу. Это позволяет объявить службу как доступную, однако создание объекта откладывается до запроса службы.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="serviceType" /> или <paramref name="callback" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">В контейнере уже присутствует служба с типом <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">Добавляет указанную службу в контейнер службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Тип службы для добавления.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">Объект обратного вызова, создающий службу. Это позволяет объявить службу как доступную, однако создание объекта откладывается до запроса службы.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если эту службу следует добавить в любой родительский контейнер служб; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="serviceType" /> или <paramref name="callback" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">В контейнере уже присутствует служба с типом <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">Добавляет указанную службу в контейнер службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Тип службы для добавления.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Экземпляр добавляемой службы. Данный объект должен реализовывать или наследовать тип, определяемый параметром <paramref name="serviceType" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="serviceType" /> или <paramref name="serviceInstance" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">В контейнере уже присутствует служба с типом <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">Добавляет указанную службу в контейнер службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Тип службы для добавления.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Экземпляр типа службы для добавления. Данный объект должен реализовывать или наследовать тип, определяемый параметром <paramref name="serviceType" />.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если эту службу следует добавить в любой родительский контейнер служб; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="serviceType" /> или <paramref name="serviceInstance" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">В контейнере уже присутствует служба с типом <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary vsli:raw="Disposes this service container.">Удаляет данный контейнер служб.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Disposes this service container.">Удаляет данный контейнер служб.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; is in the process of being disposed of; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект <see cref="T:System.ComponentModel.Design.ServiceContainer" /> находится в процессе удаления; в обратном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service.">Возвращает запрашиваемую службу.</summary>
      <param name="serviceType" vsli:raw="The type of service to retrieve.">Тип возвращаемой службы.</param>
      <returns vsli:raw="An instance of the service if it could be found, or &lt;see langword=&quot;null&quot; /&gt; if it could not be found.">Экземпляр службы, если ее удалось найти, в обратном случае — значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">Удаляет указанный тип службы из контейнера службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Тип службы для удаления.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container.">Удаляет указанный тип службы из контейнера службы.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Тип службы для удаления.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be removed from any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если эту службу следует удалить из любого родительского контейнера служб; в противном случае — <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary vsli:raw="Gets the default services implemented directly by &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt;.">Возвращает службы по умолчанию, реализованные непосредственно классом <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
      <returns vsli:raw="The default services.">Службы по умолчанию.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary vsli:raw="Provides a callback mechanism that can create an instance of a service on demand.">Предоставляет механизм обратного вызова, с помощью которого выполняется создание экземпляра службы по запросу.</summary>
      <param name="container" vsli:raw="The service container that requested the creation of the service.">Контейнер служб, выдающий запрос на создание службы.</param>
      <param name="serviceType" vsli:raw="The type of service to create.">Тип создаваемой службы.</param>
      <returns vsli:raw="The service specified by &lt;paramref name=&quot;serviceType&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the service could not be created.">Служба, заданная параметром <paramref name="serviceType" />, либо значение <see langword="null" />, если не удалось выполнить создание службы.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary vsli:raw="Defines identifiers for the standard set of commands that are available to most applications.">Определяет идентификаторы для стандартного набора команд, доступных в большинстве приложений.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignBottom command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignBottom. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignHorizontalCenters command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignHorizontalCenters. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignLeft command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignLeft. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignRight command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignRight. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignToGrid command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignToGrid. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignTop command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignTop. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignVerticalCenters command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды AlignVerticalCenters. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeBottom command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ArrangeBottom. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeIcons command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ArrangeIcons. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeRight command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ArrangeRight. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringForward command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды BringForward. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringToFront command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды BringToFront. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterHorizontally command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды CenterHorizontally. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterVertically command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды CenterVertically. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Copy command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Copy. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Cut command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Cut. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Delete command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Delete. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Document Outline command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды "Структура документа". Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the F1Help command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды F1Help. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Group command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Group. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceConcatenate command. This field is read-only.">Возвращает идетификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды HorizSpaceConcatenate. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceDecrease command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды HorizSpaceDecrease. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceIncrease command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды HorizSpaceIncrease. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceMakeEqual command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды HorizSpaceMakeEqual. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LineupIcons command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды LineupIcons. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LockControls command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды LockControls. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelRedo command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды MultiLevelRedo. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelUndo command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды MultiLevelUndo. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Paste command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Paste. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Properties command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Properties. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the PropertiesWindow command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды PropertiesWindow. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Redo command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Redo. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Replace command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Replace. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SelectAll command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SelectAll. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendBackward command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SendBackward. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendToBack command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SendToBack. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowGrid command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ShowGrid. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowLargeIcons command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ShowLargeIcons. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControl command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SizeToControl. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlHeight command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SizeToControlHeight. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlWidth command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SizeToControlWidth. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToFit command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SizeToFit. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToGrid command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SizeToGrid. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SnapToGrid command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды SnapToGrid. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the TabOrder command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды TabOrder. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Undo command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Undo. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Ungroup command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды Ungroup. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary vsli:raw="Gets the first of a set of verbs. This field is read-only.">Получает первую команду из набора команд. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary vsli:raw="Gets the last of a set of verbs. This field is read-only.">Получает последнюю команду из набора команд. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceConcatenate command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды VertSpaceConcatenate. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceDecrease command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды VertSpaceDecrease. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceIncrease command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды VertSpaceIncrease. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceMakeEqual command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды VertSpaceMakeEqual. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewCode command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ViewCode. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewGrid command. This field is read-only.">Возвращает идентификатор <see cref="T:System.ComponentModel.Design.CommandID" /> для команды ViewGrid. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardCommands&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.StandardCommands" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary vsli:raw="Defines GUID identifiers that correspond to the standard set of tool windows that are available in the design environment.">Определяет идентификаторы GUID, относящиеся к стандартному набору окон инструментов, доступному в среде разработки.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary vsli:raw="Gets the GUID for the object browser. This field is read-only.">Получает GUID для обозревателя объектов. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary vsli:raw="Gets the GUID for the output window. This field is read-only.">Получает GUID для окна вывода. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary vsli:raw="Gets the GUID for the solution explorer. This field is read-only.">Получает GUID для обозревателя решений. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary vsli:raw="Gets the GUID for the Properties window. This field is read-only.">Получает GUID для окна свойств. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary vsli:raw="Gets the GUID for the related links frame. This field is read-only.">Получает GUID для фрейма дополнительных ссылок. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary vsli:raw="Gets the GUID for the server explorer. This field is read-only.">Получает GUID для обозревателя серверов. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary vsli:raw="Gets the GUID for the task list. This field is read-only.">Получает GUID для списка задач. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary vsli:raw="Gets the GUID for the Toolbox. This field is read-only.">Получает GUID для панели инструментов. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardToolWindows&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.StandardToolWindows" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary vsli:raw="Provides a type description provider for a specified type.">Поставщик описания типа для указанного типа.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.TypeDescriptionProviderService&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary vsli:raw="Gets a type description provider for the specified object.">Получает поставщик описания типа для указанного объекта.</summary>
      <param name="instance" vsli:raw="The object to get a type description provider for.">Объект, для которого необходимо получить поставщик описания типа.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;instance&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, соответствующий значению параметра <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary vsli:raw="Gets a type description provider for the specified type.">Получает поставщик описания типа для указанного типа.</summary>
      <param name="type" vsli:raw="The type to get a type description provider for.">Тип, для которого необходимо получить поставщик описания типа.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;type&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, соответствующий значению параметра <paramref name="type" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary vsli:raw="Defines identifiers for a set of technologies that designer hosts support.">Определяет идентификаторы для набора технологий, поддерживаемых хостами конструкторов.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary vsli:raw="Specifies the default view technology support.&#xA;        &#xA;The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as Visual Studio provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a &lt;see cref=&quot;T:System.Windows.Forms.Control&quot; /&gt; instance.">Задает поддержку используемой по умолчанию технологии представления.
        
Конструктор верхнего уровня может возвратить любой тип объекта, но этот объект должен быть совместим с адаптером для технологии узла. Среды размещения, такие как Visual Studio, предоставляют способ подключения новых адаптеров технологии представления. Объектом представления по умолчанию для конструктора Windows Forms является экземпляр <see cref="T:System.Windows.Forms.Control" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary vsli:raw="Represents a mode in which the view object is passed directly to the development environment.&#xA;        &#xA;The view object must implement any interfaces the development environment requires. The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through the Visual Studio VSI (Visual Studio Integration) program. The Visual Studio development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.">Представляет режим, при котором объект просмотра передается непосредственно в среду разработки.
        
Объект представления должен реализовывать любые интерфейсы, необходимые среде разработки. Среда разработки Visual Studio поддерживает объекты представления, представляющие собой элемент управления ActiveX, активный документ или объект, реализующий интерфейс IVsWindowPane, доступный по программе Visual Studio VSI (Visual Studio Integration). Среда разработки Visual Studio обеспечивает поддержку для этой технологии представления. Поддержка этой технологии представления необязательно доступна во всех средах разработки.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary vsli:raw="Represents a mode in which a Windows Forms control object provides the display for the root designer. The designer host fills the development environment document window with the Windows Forms control.">Представляет режим отображения базового конструктора с помощью объекта элемента управления Windows Forms. Узел конструктора заполняет окно документа среды разработки элементом управления Windows Forms.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary vsli:raw="&lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; marks a component's visibility. If &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Yes&quot; /&gt; is present, a visual designer can show this component on a designer.">Атрибут <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> помечает видимость компонента. Если установлено поле <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" />, этот компонент может быть отображен в визуальном конструкторе.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary vsli:raw="The default visibility which is &lt;see langword=&quot;Yes&quot; /&gt;.">По умолчанию значение видимости — <see langword="Yes" />.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary vsli:raw="Marks a component as not visible in a visual designer.">Помечает компонент как невидимый в визуальном конструкторе.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary vsli:raw="Marks a component as visible in a visual designer.">Помечает компонент как видимый в визуальном конструкторе.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; set to the default value of &lt;see langword=&quot;false&quot; /&gt;.">Создает новый атрибут <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> со значением по умолчанию <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; with the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property set to the given value in &lt;paramref name=&quot;visible&quot; /&gt;.">Создает новый атрибут <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> со свойством <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" />, равным заданному значению параметра <paramref name="visible" />.</summary>
      <param name="visible" vsli:raw="The value that the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property will be set against.">Значение, устанавливаемое для свойства <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" />.</param>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</summary>
      <param name="obj" vsli:raw="An Object to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Объект для сравнения с этим экземпляром или пустая ссылка (<see langword="Nothing" /> в Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если значение параметра <paramref name="obj" /> равно типу и значению данного экземпляра; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value.">Возвращает значение, показывающее, равен ли этот экземпляр значению <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр равен значению <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary vsli:raw="Gets or sets whether the component should be shown at design time.">Возвращает или устанавливает значение, определяющее, должен ли компонент отображаться во время разработки.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this component should be shown at design time, or &lt;see langword=&quot;false&quot; /&gt; if it shouldn't.">Значение <see langword="true" />, если компонент должен отображаться во время разработки, или значение <see langword="false" />, если не должен.</returns>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary vsli:raw="Provides a type converter to convert double-precision, floating point number objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов, являющихся числами с плавающей запятой с удвоенной точностью, в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DoubleConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.DoubleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Enum&quot; /&gt; objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Enum" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EnumConverter&quot; /&gt; class for the given type.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EnumConverter" /> для данного типа.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of enumeration to associate with this enumeration converter.">Тип <see cref="T:System.Type" />, представляющий тип перечисления, связываемый с этим преобразователем перечисления.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to an enumeration object using the specified context.">Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в объект перечисления, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to an enumeration object.">Преобразует заданный объект значения в объект перечисления.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Необязательный класс <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Преобразовывает указанное значение объекта в указанный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Необязательный класс <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the enumeration.">Параметр <paramref name="value" /> не является допустимым значением перечисления.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">Получает коллекцию стандартных значений для того типа данных, для которого предназначен данный проверяющий элемент управления.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Класс <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащий стандартный набор допустимых значений или значение <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list using the specified context.">Возвращает значение, показывающее, является ли список стандартных значений, возвращаемых методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />, исчерпывающим списком в заданном контексте.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">Имеет значение <see langword="true" />, если объект класса <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенный методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />, является исчерпывающим списком возможных значений, значение <see langword="false" />, если возможны другие значения.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Возвращает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, поскольку для поиска набора значений, поддерживаемых объектом, необходимо вызвать метод <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Gets a value indicating whether the given object value is valid for this type.">Возвращает значение, показывающее, допустимо ли данное значение объекта для этого типа.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test.">Объект <see cref="T:System.Object" /> для проверки.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанное значение является допустимым для данного объекта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; that can be used to sort the values of the enumeration.">Возвращает интерфейс сравнения <see cref="T:System.Collections.IComparer" />, который может использоваться для выполнения сортировки значений перечисления.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; for sorting the enumeration values.">Объект <see cref="T:System.Collections.IComparer" /> для сортировки значений перечисления.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary vsli:raw="Specifies the type of the enumerator this converter is associated with.">Определяет тип перечислителя, с которым связан этот преобразователь.</summary>
      <returns vsli:raw="The type of the enumerator this converter is associated with.">Определяет тип перечислителя, с которым связан этот преобразователь.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">Получает или задает коллекцию <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, определяющую возможные значения для перечисления.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">Коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, определяющая возможные значения для перечисления.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary vsli:raw="Provides information about an event.">Предоставляет сведения о событии.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EventDescriptor" />, используя имя и атрибуты заданного объекта <see cref="T:System.ComponentModel.MemberDescriptor" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the event and its attributes.">Объект <see cref="T:System.ComponentModel.MemberDescriptor" />, содержащий имя события и его атрибуты.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EventDescriptor" />, используя имя в заданном дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" /> и атрибуты как в дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" />, так и в массиве <see cref="T:System.Attribute" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">Объект <see cref="T:System.ComponentModel.MemberDescriptor" />, который содержит имя члена и его атрибуты.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes you want to add to this event description.">Массив <see cref="T:System.Attribute" /> с атрибутами, которые нужно добавить в описание этого события.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the specified name and attribute array.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EventDescriptor" />, используя указанные имя и массив атрибутов.</summary>
      <param name="name" vsli:raw="The name of the event.">Имя события.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the event attributes.">Массив типа <see cref="T:System.Attribute" />, который содержит атрибуты события.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, binds the event to the component.">При переопределении в производном классе связывает событие с компонентом.</summary>
      <param name="component" vsli:raw="A component that provides events to the delegate.">Компонент, который передает события делегату.</param>
      <param name="value" vsli:raw="A delegate that represents the method that handles the event.">Делегат, который представляет метод для обработки события.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.">При переопределении в производном классе разрывает связь делегата с компонентом и, таким образом, в дальнейшем делегат не будет получать события от компонента.</summary>
      <param name="component" vsli:raw="The component that the delegate is bound to.">Компонент, с которым связан делегат.</param>
      <param name="value" vsli:raw="The delegate to unbind from the component.">Делегат, связь которого с компонентом разрывается.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of component this event is bound to.">При переопределении в производном классе возвращает тип компонента, с которым связано это событие.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component the event is bound to.">Тип <see cref="T:System.Type" />, представляющий тип компонента, с которым связано событие.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary vsli:raw="When overridden in a derived class, gets the type of delegate for the event.">При переопределении в производном классе возвращает тип делегата для события.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of delegate for the event.">
        <see cref="T:System.Type" />, где представляется тип делегата для события.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.">При переопределении в производном классе возвращает значение, показывающее, является ли делегат события многоадресным.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event delegate is multicast; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если делегат является многоадресным; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">Представляет коллекцию объектов <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection to use, rather than creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Задает использование пустой коллекции вместо создания новой коллекции, не содержащей элементов. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя заданный массив объектов <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">Массив типа <see cref="T:System.ComponentModel.EventDescriptor" />, предоставляющий события для данной коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects. The collection is optionally read-only.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя заданный массив объектов <see cref="T:System.ComponentModel.EventDescriptor" />. При необходимости для коллекции может быть установлен режим только для чтения.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">Массив типа <see cref="T:System.ComponentModel.EventDescriptor" />, предоставляющий события для данной коллекции.</param>
      <param name="readOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify a read-only collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы задать коллекцию только для чтения; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the end of the collection.">Добавляет объект <see cref="T:System.ComponentModel.EventDescriptor" /> в конец коллекции.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to add to the collection.">Объект <see cref="T:System.ComponentModel.EventDescriptor" />, добавляемый в коллекцию.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
      <returns vsli:raw="The position of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">Позиция объекта <see cref="T:System.ComponentModel.EventDescriptor" /> в коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary vsli:raw="Removes all objects from the collection.">Удаляет все объекты из коллекции.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Возвращает значение, показывающее, содержит ли коллекция данный дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> .</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">Объект <see cref="T:System.ComponentModel.EventDescriptor" />, который требуется найти в коллекции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the &lt;paramref name=&quot;value&quot; /&gt; parameter given; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если коллекция содержит указанный параметр <paramref name="value" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Gets the description of the event with the specified name in the collection.">Возвращает описание события с указанным именем в коллекции.</summary>
      <param name="name" vsli:raw="The name of the event to get from the collection.">Имя события, извлекаемого из коллекции.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если требуется игнорировать событие; в противном случае — значение <see langword="false" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> с указанным именем или значение <see langword="null" />, если событие не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Возвращает перечислитель для данной коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</summary>
      <returns vsli:raw="An enumerator that implements &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Перечислитель, реализующий <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Возвращает индекс данного дескриптора <see cref="T:System.ComponentModel.EventDescriptor" /> .</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">Объект <see cref="T:System.ComponentModel.EventDescriptor" />, который требуется найти в коллекции.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">Индекс данного дескриптора <see cref="T:System.ComponentModel.EventDescriptor" /> в коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Inserts an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the collection at a specified index.">Вставляет объект <see cref="T:System.ComponentModel.EventDescriptor" /> в коллекцию, используя указанный индекс.</summary>
      <param name="index" vsli:raw="The index within the collection in which to insert the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Индекс в коллекции, используемый для вставки параметра <paramref name="value" />.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to insert into the collection.">Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" />, вставляемый в коллекцию.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя указанный объект <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Средство сравнения, которое нужно использовать для сортировки объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в данной коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />. Сначала выполняется сортировка в указанном порядке, затем используется порядок сортировки по умолчанию, обычно являющийся алфавитным,.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Массив строк, описывающий порядок сортировки для объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в этой коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; from the collection.">Удаляет указанный объект <see cref="T:System.ComponentModel.EventDescriptor" /> из коллекции.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove from the collection.">Объект <see cref="T:System.ComponentModel.EventDescriptor" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; at the specified index from the collection.">Удаляет объект <see cref="T:System.ComponentModel.EventDescriptor" /> по указанному индексу из коллекции.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove.">Индекс удаляемого объекта <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the default sort for this collection, which is usually alphabetical.">Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя установленный для этой коллекции по умолчанию порядок сортировки, обычно являющийся алфавитным.</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Новый объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя указанный объект <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Объект <see cref="T:System.Collections.IComparer" />, используемый для сортировки объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в этой коллекции.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Новый объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order.">Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя заданный порядок сортировки.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">Массив строк, описывающий порядок сортировки объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в коллекции.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Новый объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order and an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Выполняет сортировку элементов этой коллекции <see cref="T:System.ComponentModel.EventDescriptorCollection" />, используя заданный порядок сортировки и средство сравнения <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">Массив строк, описывающий порядок сортировки объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в коллекции.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Объект <see cref="T:System.Collections.IComparer" />, используемый для сортировки объектов <see cref="T:System.ComponentModel.EventDescriptor" /> в этой коллекции.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Новый объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Копирует элементы коллекции в <see cref="T:System.Array" /> начиная с определенного индекса в <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Одномерный массив <see cref="T:System.Array" />, который является конечным массивом для элементов, скопированных из коллекции. Массив <see cref="T:System.Array" /> должен иметь индексацию, начинающуюся с нуля.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">Добавляет элемент в коллекцию.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the collection.">Параметр <see cref="T:System.Object" /> для добавления в коллекцию.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
      <returns vsli:raw="The position into which the new element was inserted.">Позиция, на которую вставлен новый элемент.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all the items from the collection.">Удаляет из коллекции все элементы.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Определяет, содержит ли коллекция указанное значение.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент <see cref="T:System.Object" /> найден в коллекции; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">Определяет индекс определенного элемента в коллекции.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the collection at the specified index.">Вставляет в коллекцию элемент по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">Объект <see cref="T:System.Object" /> для вставки в коллекцию.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Удаляет первое вхождение конкретного объекта из коллекции.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">Объект <see cref="T:System.Object" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Удаляет элемент по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of event descriptors in the collection.">Возвращает число дескрипторов событий в коллекции.</summary>
      <returns vsli:raw="The number of event descriptors in the collection.">Число дескрипторов событий в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the event with the specified index number.">Получает или задает событие с указанным номером индекса.</summary>
      <param name="index" vsli:raw="The zero-based index number of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">Индекс (отсчитываемый от нуля) возвращаемого или задаваемого дескриптора <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)&quot; /&gt;.">Индекс <paramref name="index" /> не является допустимым для свойства <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified index number.">Объект <see cref="T:System.ComponentModel.EventDescriptor" /> с заданным индексом.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the event with the specified name.">Получает или задает событие с заданным именем.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">Имя возвращаемого или устанавливаемого дескриптора <see cref="T:System.ComponentModel.EventDescriptor" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> с указанным именем или значение <see langword="null" />, если событие не существует.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Возвращает количество элементов, содержащихся в коллекции.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Количество элементов, содержащихся в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized.">Возвращает значение, показывающее, синхронизирован ли доступ к коллекции.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если доступ к коллекции синхронизирован. В противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Объект, который может быть использован для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Возвращает значение, указывающее, имеет ли коллекция фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если коллекция имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Возвращает значение, указывающее, является ли коллекция доступной только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Возвращает или задает элемент по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Отсчитываемый от нуля индекс элемента, который требуется возвратить или задать.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">Значение параметра<paramref name="index" /> меньше 0.  
  
-или- 
 Значение параметра <paramref name="index" /> больше или равно значению свойства <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
      <returns vsli:raw="The element at the specified index.">Элемент, расположенный по указанному индексу.</returns>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary vsli:raw="Provides a type converter to convert expandable objects to and from various other representations.">Предоставляет преобразователь типа для преобразования расширяемых объектов в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExpandableObjectConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ExpandableObjectConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of object specified by the value parameter.">Возвращает коллекцию свойств для типа объекта, заданного параметром значения.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of object to get the properties for.">Объект <see cref="T:System.Object" />, задающий тип объекта, для которого нужно получить свойства.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Массив типа <see cref="T:System.Attribute" />, который будет использоваться как фильтр.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, предоставляемыми для компонента, или <see langword="null" /> в случае отсутствия свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">Возвращает значение, показывающее, поддерживает ли свойства этот объект, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, так как для поиска свойств данного объекта следует вызывать метод <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />.  Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary vsli:raw="Specifies a property that is offered by an extender provider. This class cannot be inherited.">Определяет свойство, предлагаемое поставщиком расширений. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExtenderProvidedPropertyAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Объект <see cref="T:System.Object" /> для сравнения с этим экземпляром или пустая ссылка (<see langword="Nothing" /> в Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если значение параметра <paramref name="obj" /> равно типу и значению данного экземпляра; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary vsli:raw="Provides an indication whether the value of this instance is the default value for the derived class.">Предоставляет признак, показывающий, является ли значение этого экземпляра значением по умолчанию для производного класса.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр является атрибутом по умолчанию для класса; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary vsli:raw="Gets the property that is being provided.">Возвращает предоставляемое свойство.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; encapsulating the property that is being provided.">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, инкапсулирующий предоставляемое свойство.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary vsli:raw="Gets the extender provider that is providing the property.">Возвращает поставщика расширений, предоставляющего свойство.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that is providing the property.">Поставщик <see cref="T:System.ComponentModel.IExtenderProvider" />, предоставляющий свойство.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary vsli:raw="Gets the type of object that can receive the property.">Возвращает тип объекта, который может получить данное свойство.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; describing the type of object that can receive the property.">Тип <see cref="T:System.Type" />, описывающий тип объекта, который может получить данное свойство.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Guid&quot; /&gt; objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Guid" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.GuidConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.GuidConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a GUID object using the context.">Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в объект GUID, используя контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a GUID object.">Преобразует данный объект в объект GUID.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Необязательный класс <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">Преобразует указанный объект в другой тип.</summary>
      <param name="context" vsli:raw="A formatter context.">Контекст модуля форматирования.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Язык и региональные параметры, в которые будет выполнено преобразование <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Тип, в который требуется преобразовать объект.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="The converted object.">Преобразованный объект.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary vsli:raw="Provides data for events that can be handled completely in an event handler.">Предоставляет данные для событий, которые могут быть полностью обработаны в обработчике событий.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with a default &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property value of &lt;see langword=&quot;false&quot; /&gt;.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.HandledEventArgs" />, используя значение по умолчанию свойства <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />, <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with the specified default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.HandledEventArgs" />, используя указанное значение по умолчанию для свойства <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</summary>
      <param name="defaultHandledValue" vsli:raw="The default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">Значение по умолчанию для свойства<see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.">Получает или задает значение, показывающее, полностью ли обработчик событий обработал событие или система должна продолжить собственную обработку.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been completely handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если событие было обработано полностью; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary vsli:raw="Represents a method that can handle events which may or may not require further processing after the event handler has returned.">Представляет метод, который может обрабатывать события, которые могут требовать или не требовать дальнейшей обработки после возвращения из обработчика событий.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.HandledEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary vsli:raw="Provides the features required to support both complex and simple scenarios when binding to a data source.">Обеспечивает возможности, необходимые для поддержки как сложных, так и простых скриптов при связывании с источником данных.</summary>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary vsli:raw="Occurs when the list changes or an item in the list changes.">Происходит при изменении в списке или в элементе списка.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the indexes used for searching.">Добавляет дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> к индексам, используемым для поиска.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the indexes used for searching.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, добавляемый к индексам, используемым для поиска.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary vsli:raw="Adds a new item to the list.">Добавляет новый элемент в список.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowNew&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> имеет значение <see langword="false" />.</exception>
      <returns vsli:raw="The item added to the list.">Элемент, который нужно добавить в список.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;.">Сортирует список, используя дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> и направление <see cref="T:System.ComponentModel.ListSortDirection" />.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> для сортировки.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> имеет значение <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Returns the index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Возвращает индекс строки с данным дескриптором <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> для поиска.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;property&quot; /&gt; parameter to search for.">Значение параметра <paramref name="property" />, используемое для поиска.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> имеет значение <see langword="false" />.</exception>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Индекс строки с данным дескриптором <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the indexes used for searching.">Удаляет дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> из индексов, используемых для поиска.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, удаляемый из индексов, используемых для поиска.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary vsli:raw="Removes any sort applied using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">Удаляет любую сортировку, выполненную с использованием метода <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> имеет значение <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary vsli:raw="Gets whether you can update items in the list.">Возвращает значение, показывающее, можно ли обновить элементы в списке.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can update the items in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если можно обновить элементы в списке; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary vsli:raw="Gets whether you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">Возвращает значение, показывающее, можно ли добавить элементы в список, используя метод <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если можно добавить элементы в список с помощью метода <see cref="M:System.ComponentModel.IBindingList.AddNew" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary vsli:raw="Gets whether you can remove items from the list, using &lt;see cref=&quot;M:System.Collections.IList.Remove(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.Collections.IList.RemoveAt(System.Int32)&quot; /&gt;.">Возвращает значение, показывающее, можно ли удалить элементы из списка с помощью метода <see cref="M:System.Collections.IList.Remove(System.Object)" /> или <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если можно удалить элементы из списка; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary vsli:raw="Gets whether the items in the list are sorted.">Возвращает значение, показывающее, отсортированы ли элементы списка.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> имеет значение <see langword="false" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если был вызван метод <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />, а метод <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> не вызывался; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary vsli:raw="Gets the direction of the sort.">Возвращает направление сортировки.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> имеет значение <see langword="false" />.</exception>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">Возвращает дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, используемый для сортировки.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> имеет значение <see langword="false" />.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, используемый для сортировки.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary vsli:raw="Gets whether a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or an item in the list changes.">Возвращает значение, показывающее, происходит ли событие <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> при изменениях в списке или при изменении элемента списка.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если при изменениях в списке или при изменении элемента списка вызывается событие <see cref="E:System.ComponentModel.IBindingList.ListChanged" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary vsli:raw="Gets whether the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method.">Возвращает значение, показывающее, поддерживает ли список поиск с использованием метода <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если список поддерживает поиск с использованием метода <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary vsli:raw="Gets whether the list supports sorting.">Возвращает значение, показывающее, поддерживает ли список сортировку.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если список поддерживает сортировку; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary vsli:raw="Extends the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; interface by providing advanced sorting and filtering capabilities.">Расширяет интерфейс <see cref="T:System.ComponentModel.IBindingList" />, предоставляя дополнительные возможности сортировки и фильтрации.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary vsli:raw="Sorts the data source based on the given &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">Сортирует источник данных, используя заданную коллекцию <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
      <param name="sorts" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; containing the sorts to apply to the data source.">Коллекция <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, содержащая условия сортировки, применяемые к источнику данных.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary vsli:raw="Removes the current filter applied to the data source.">Возвращает текущий фильтр, примененный к источнику данных.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary vsli:raw="Gets or sets the filter to be used to exclude items from the collection of items returned by the data source.">Возвращает или задает фильтр, используемый для исключения элементов из коллекции элементов, возвращенных источником данных.</summary>
      <returns vsli:raw="The string used to filter items out in the item collection returned by the data source.">Строка, используемая для фильтрации элементов из коллекции элементов, возвращенной источником данных.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary vsli:raw="Gets the collection of sort descriptions currently applied to the data source.">Возвращает коллекцию описаний сортировки, применяемых в данный момент к источнику данных.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; currently applied to the data source.">Коллекция <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, применяемая в данный момент к источнику данных.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary vsli:raw="Gets a value indicating whether the data source supports advanced sorting.">Возвращает значение, показывающее, поддерживает ли источник данных дополнительные возможности сортировки.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports advanced sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если источник данных поддерживает дополнительные возможности сортировки; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary vsli:raw="Gets a value indicating whether the data source supports filtering.">Возвращает значение, указывающее, поддерживает ли источник данных фильтрацию.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports filtering; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если источник данных поддерживает фильтрацию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary vsli:raw="Adds transactional capability when adding a new item to a collection.">Добавляет поддержку транзакций при добавлении нового элемента в коллекцию.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item from the collection.">Удаляет незафиксированный новый элемент из коллекции.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">Индекс элемента, который был ранее добавлен в коллекцию.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">Фиксирует незафиксированный новый элемент в коллекции.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">Индекс элемента, который был ранее добавлен в коллекцию.</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary vsli:raw="Provides a top-level mapping layer between a COM object and a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Предоставляет уровень сопоставления верхнего уровня между COM-объектом и объектом <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary vsli:raw="Gets the attributes for the specified component.">Получает атрибуты для заданного компонента.</summary>
      <param name="component" vsli:raw="The component to get attributes for.">Компонент, для которого необходимо получить атрибуты.</param>
      <returns vsli:raw="A collection of attributes for &lt;paramref name=&quot;component&quot; /&gt;.">Коллекция атрибутов для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary vsli:raw="Gets the class name for the specified component.">Получает имя класса для указанного компонента.</summary>
      <param name="component" vsli:raw="The component to get the class name for.">Компонент, для которого необходимо получить имя класса.</param>
      <returns vsli:raw="The name of the class that corresponds with &lt;paramref name=&quot;component&quot; /&gt;.">Имя класса, соответствующего компоненту <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary vsli:raw="Gets the type converter for the specified component.">Получает преобразователь типов для заданного компонента.</summary>
      <param name="component" vsli:raw="The component to get the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for.">Компонент, для которого необходимо получить преобразователь <see cref="T:System.ComponentModel.TypeConverter" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for &lt;paramref name=&quot;component&quot; /&gt;.">Объект макета <see cref="T:System.ComponentModel.TypeConverter" /> декоративного элемента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Gets the default event for the specified component.">Получает событие по умолчанию для заданного компонента.</summary>
      <param name="component" vsli:raw="The component to get the default event for.">Компонент, для которого необходимо получить событие по умолчанию.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default event.">Объект <see cref="T:System.ComponentModel.EventDescriptor" />, представляющий событие по умолчанию для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Gets the default property for the specified component.">Получает свойство по умолчанию для указанного компонента.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Компонент, для которого требуется получить свойство по умолчанию.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default property.">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, представляющий свойство по умолчанию для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets the editor for the specified component.">Получает редактор для заданного компонента.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Компонент, для которого нужно получить редактор.</param>
      <param name="baseEditorType" vsli:raw="The base type of the editor for &lt;paramref name=&quot;component&quot; /&gt;.">Базовый тип редактора для компонента <paramref name="component" />.</param>
      <returns vsli:raw="The editor for &lt;paramref name=&quot;component&quot; /&gt;.">Редактор для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary vsli:raw="Gets the events for the specified component.">Получает события для заданного компонента.</summary>
      <param name="component" vsli:raw="The component to get events for.">Компонент, для которого необходимо получить события.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Коллекция дескрипторов событий для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the events with the specified attributes for the specified component.">Получает события с указанными атрибутами для заданного компонента.</summary>
      <param name="component" vsli:raw="The component to get events for.">Компонент, для которого необходимо получить события.</param>
      <param name="attributes" vsli:raw="The attributes used to filter events.">Атрибуты, используемые для фильтрации событий.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Коллекция дескрипторов событий для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">Получает имя указанного компонента.</summary>
      <param name="component" vsli:raw="The component to get the name of.">Компонент, имя которого необходимо получить.</param>
      <returns vsli:raw="The name of &lt;paramref name=&quot;component&quot; /&gt;.">Имя компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the properties with the specified attributes for the specified component.">Получает свойства с указанными атрибутами для заданного компонента.</summary>
      <param name="component" vsli:raw="The component to get events for.">Компонент, для которого необходимо получить события.</param>
      <param name="attributes" vsli:raw="The attributes used to filter properties.">Атрибуты, используемые для фильтрации свойств.</param>
      <returns vsli:raw="A collection of property descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Коллекция дескрипторов свойств для компонента <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified dispatch identifier.">Получает значение свойства с заданным идентификатором диспетчеризации.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">Объект, которому принадлежит это свойство.</param>
      <param name="dispid" vsli:raw="The dispatch identifier.">Идентификатор диспетчеризации.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">Значение типа <see cref="T:System.Boolean" />, передаваемое по ссылке и показывающее, было ли возвращено свойство.</param>
      <returns vsli:raw="The value of the property that has the specified dispatch identifier.">Значение свойства с заданным идентификатором диспетчеризации.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified name.">Получает значение свойства с заданным именем.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">Объект, которому принадлежит это свойство.</param>
      <param name="propertyName" vsli:raw="The name of the property.">Имя свойства.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">Значение типа <see cref="T:System.Boolean" />, передаваемое по ссылке и показывающее, было ли возвращено свойство.</param>
      <returns vsli:raw="The value of the property that has the specified name.">Значение свойства с заданным именем.</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary vsli:raw="Provides an interface that supplies dynamic custom type information for an object.">Предоставляет интерфейс, с помощью которого предоставляются динамические сведения о пользовательских типах объектов.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for this instance of a component.">Возвращает коллекцию настраиваемых атрибутов для этого экземпляра компонента.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for this object.">
        <see cref="T:System.ComponentModel.AttributeCollection" />, содержащий атрибуты для этого объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the class name of this instance of a component.">Возвращает имя класса для этого экземпляра компонента.</summary>
      <returns vsli:raw="The class name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the class does not have a name.">Имя класса объекта или <see langword="null" />, если класс не имеет имени.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of this instance of a component.">Возвращает имя этого экземпляра компонента.</summary>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object does not have a name.">Имя объекта или <see langword="null" />, если объект не имеет имени.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for this instance of a component.">Возвращает преобразователь типов для этого экземпляра компонента.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is the converter for this object, or &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for this object.">Объект <see cref="T:System.ComponentModel.TypeConverter" />, который является преобразователем для данного объекта, или значение <see langword="null" /> в случае отсутствия <see cref="T:System.ComponentModel.TypeConverter" /> для данного объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the default event for this instance of a component.">Возвращает событие по умолчанию для этого экземпляра компонента.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents the default event for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have events.">Значение <see cref="T:System.ComponentModel.EventDescriptor" /> , представляющее событие по умолчанию для этого объекта, или <see langword="null" /> , если этот объект не имеет событий.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the default property for this instance of a component.">Возвращает свойство по умолчанию для этого экземпляра компонента.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the default property for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have properties.">Значение <see cref="T:System.ComponentModel.PropertyDescriptor" />, представляющее свойство по умолчанию для данного объекта, или <see langword="null" />, если этот объект не имеет свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type for this instance of a component.">Возвращает редактор заданного типа для этого экземпляра компонента.</summary>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the editor for this object.">Объект <see cref="T:System.Type" />, который представляет редактор для этого объекта.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type that is the editor for this object, or &lt;see langword=&quot;null&quot; /&gt; if the editor cannot be found.">Объект <see cref="T:System.Object" /> заданного типа, являющийся редактором для этого объекта, или <see langword="null" />, если редактор не найден.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns the events for this instance of a component.">Возвращает события для этого экземпляра компонента.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the events for this component instance.">Объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />, представляющий события для этого экземпляра компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns the events for this instance of a component using the specified attribute array as a filter.">Возвращает события для этого экземпляра компонента, используя заданный массив атрибутов в качестве фильтра.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Массив типа <see cref="T:System.Attribute" />, используемый в качестве фильтра.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the filtered events for this component instance.">Объект <see cref="T:System.ComponentModel.EventDescriptorCollection" />, представляющий отфильтрованные события для этого экземпляра компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns the properties for this instance of a component.">Возвращает свойства для этого экземпляра компонента.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties for this component instance.">Объект <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, представляющий свойства для этого экземпляра компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns the properties for this instance of a component using the attribute array as a filter.">Возвращает свойства для этого экземпляра компонента, используя массив атрибутов в качестве фильтра.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Массив типа <see cref="T:System.Attribute" />, используемый в качестве фильтра.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the filtered properties for this component instance.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, представляющая отфильтрованные свойства для этого экземпляра компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">Возвращает объект, содержащий свойство, описываемое заданным дескриптором свойства.</summary>
      <param name="pd" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the property whose owner is to be found.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, представляющий свойство, владельца которого требуется найти.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the owner of the specified property.">Объект <see cref="T:System.Object" />, представляющий владельца заданного свойства.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary vsli:raw="Provides the functionality to offer custom error information that a user interface can bind to.">Обеспечивает функциональные возможности предоставления сведений об настраиваемых ошибках, которые могут быть связаны с пользовательским интерфейсом.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary vsli:raw="Gets an error message indicating what is wrong with this object.">Возвращает сообщение об ошибке, показывающее причину отказа в данном объекте.</summary>
      <returns vsli:raw="An error message indicating what is wrong with this object. The default is an empty string (&quot;&quot;).">Сообщение об ошибке, показывающее причину отказа в данном объекте. Значение по умолчанию — пустая строка ("").</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary vsli:raw="Gets the error message for the property with the given name.">Возвращает сообщение об ошибке для свойства с заданным именем.</summary>
      <param name="columnName" vsli:raw="The name of the property whose error message to get.">Имя свойства, для которого возвращается сообщение об ошибке.</param>
      <returns vsli:raw="The error message for the property. The default is an empty string (&quot;&quot;).">Сообщение об ошибке для свойства. Значение по умолчанию — пустая строка ("").</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary vsli:raw="Defines the interface for extending properties to other components in a container.">Определяет интерфейс для расширения свойств других компонентов в контейнере.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary vsli:raw="Specifies whether this object can provide its extender properties to the specified object.">Определяет, может ли этот объект предоставить имеющиеся у него свойства средств расширения указанному объекту.</summary>
      <param name="extendee" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to receive the extender properties.">Объект <see cref="T:System.Object" />, получающий свойства средства расширения.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can provide extender properties to the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот объект может предоставлять свойства средства расширения указанному объекту. В противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary vsli:raw="Provides an interface to facilitate the retrieval of the builder's name and to display the builder.">Обеспечивает интерфейс для упрощения возвращения имени сборщика и отображения сборщика.</summary>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary vsli:raw="Shows the builder.">Показывает сборщик.</summary>
      <param name="language" vsli:raw="The language service that is calling the builder.">Служба языка, вызывающая сборщика.</param>
      <param name="value" vsli:raw="The expression being edited.">Редактируемое выражение.</param>
      <param name="newValue" vsli:raw="The new value.">Новое значение.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value should be replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt; (if the user cancels, for example).">Значение <see langword="true" />, если значение должно быть заменено параметром <paramref name="newValue" />; в противном случае — значение <see langword="false" /> (например при отмене пользователем).</returns>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary vsli:raw="Gets a localized name.">Возвращает локализованное имя.</summary>
      <returns vsli:raw="A localized name.">Локализованное имя.</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary vsli:raw="Provides functionality to an object to return a list that can be bound to a data source.">Предоставляет объекту функциональные возможности, позволяющие возвратить список, который может быть связан с источником данных.</summary>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from an object that does not implement an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; itself.">Возвращает объект <see cref="T:System.Collections.IList" />, который может быть связан с источником данных из объекта, самостоятельно не реализующего интерфейс <see cref="T:System.Collections.IList" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from the object.">Объект <see cref="T:System.Collections.IList" />, который можно привязать к источнику данных из объекта.</returns>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary vsli:raw="Gets a value indicating whether the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects.">Возвращает значение, указывающее, является ли коллекция коллекцией объектов <see cref="T:System.Collections.IList" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если коллекция является коллекцией объектов <see cref="T:System.Collections.IList" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary vsli:raw="Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.">Обеспечивает функциональные возможности для вложенных контейнеров, логически содержащих ноль или более компонентов и принадлежащих родительскому компоненту.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for the nested container.">Возвращает компонент-владелец для вложенного контейнера.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns the nested container.">Компонент <see cref="T:System.ComponentModel.IComponent" />, являющийся владельцем вложенного контейнера.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary vsli:raw="Provides the ability to retrieve the full nested name of a component.">Предоставляет возможность получить полное иерархическое имя компонента.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary vsli:raw="Gets the full name of the component in this site.">Возвращает полное имя компонента в этом узле.</summary>
      <returns vsli:raw="The full name of the component in this site.">Полное имя компонента в этом узле.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary vsli:raw="Indicates whether the component associated with this attribute has been inherited from a base class. This class cannot be inherited.">Указывает, является ли компонент, связанный с этим атрибутом, унаследованным от базового класса. Этот класс не наследуется.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary vsli:raw="Specifies that the default value for &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; is &lt;see cref=&quot;F:System.ComponentModel.InheritanceAttribute.NotInherited&quot; /&gt;. This field is read-only.">Указывает, что значением по умолчанию для атрибута <see cref="T:System.ComponentModel.InheritanceAttribute" /> является <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary vsli:raw="Specifies that the component is inherited. This field is read-only.">Указывает, что компонент является унаследованным. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary vsli:raw="Specifies that the component is inherited and is read-only. This field is read-only.">Определяет, что компонент является унаследованным и доступен только для чтения. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary vsli:raw="Specifies that the component is not inherited. This field is read-only.">Определяет, что компонент не является унаследованным. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InheritanceAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class with the specified inheritance level.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InheritanceAttribute" />, используя указанный уровень наследования.</summary>
      <param name="inheritanceLevel" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; that indicates the level of inheritance to set this attribute to.">Объект <see cref="T:System.ComponentModel.InheritanceLevel" />, показывающий уровень наследования, который устанавливается для этого атрибута.</param>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary vsli:raw="Override to test for equality.">Нужно переопределить для проверки равенства.</summary>
      <param name="value" vsli:raw="The object to test.">Объект для тестирования.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is the same; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> если объекты совпадают; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">Возвращает хэш-код для данного объекта.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.InheritanceAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Возвращает значение, показывающее, является ли текущее значение атрибута его значением по умолчанию.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущим значением атрибута является значение по умолчанию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary vsli:raw="Converts this attribute to a string.">Преобразует этот атрибут в строку.</summary>
      <returns vsli:raw="A string that represents this &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">Строка, представляющая эту структуру <see cref="T:System.ComponentModel.InheritanceAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary vsli:raw="Gets or sets the current inheritance level stored in this attribute.">Получает или задает текущий уровень наследования, хранящийся в этом атрибуте.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; stored in this attribute.">Уровень <see cref="T:System.ComponentModel.InheritanceLevel" />, хранящийся в этом атрибуте.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary vsli:raw="Defines identifiers for types of inheritance levels.">Определяет идентификаторы для типов уровней наследования.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary vsli:raw="The object is inherited.">Объект является унаследованным.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary vsli:raw="The object is inherited, but has read-only access.">Объект является унаследованным, но доступен только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary vsli:raw="The object is not inherited.">Объект не является унаследованным.</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary vsli:raw="Specifies the installer for a type that installs components.">Задает установщик для типа, устанавливающего компоненты.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class with the name of the component's installer type.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InstallerTypeAttribute" />, используя имя типа установщика компонентов.</summary>
      <param name="typeName" vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">Имя объекта <see cref="T:System.Type" />, представляющего установщик для компонента, с которым связан этот атрибут. Этот класс должен реализовывать интерфейс <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class, when given a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for a component.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> для заданного типа <see cref="T:System.Type" />, представляющего установщик компонента.</summary>
      <param name="installerType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">Объект <see cref="T:System.Type" />, представляющий установщик для компонента, с которым связан этот атрибут. Этот класс должен реализовывать интерфейс <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">Возвращает значение, показывающее, равно ли значение данного объекта текущему атрибуту <see cref="T:System.ComponentModel.InstallerTypeAttribute" />.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Объект, проверяемый на равенство.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значение данного объекта равно значению текущего; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">Возвращает хэш-код для данного объекта.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.InstallerTypeAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary vsli:raw="Gets the type of installer associated with this attribute.">Возвращает тип установщика, связанного с этим атрибутом.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of installer associated with this attribute, or &lt;see langword=&quot;null&quot; /&gt; if an installer does not exist.">Объект <see cref="T:System.Type" />, представляющий тип установщика, связанного с этим атрибутом, или значение <see langword="null" />, если установщик не существует.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary vsli:raw="Creates an instance of a particular type of property from a drop-down box within the &lt;see cref=&quot;T:System.Windows.Forms.PropertyGrid&quot; /&gt;.">Создает экземпляр конкретного типа свойства и раскрывающегося поля в таблице свойств <see cref="T:System.Windows.Forms.PropertyGrid" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstanceCreationEditor&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.InstanceCreationEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="When overridden in a derived class, returns an instance of the specified type.">Если экземпляр службы переопределен в производном классе, возвращает экземпляр заданного типа.</summary>
      <param name="context" vsli:raw="The context information.">Сведения о контексте.</param>
      <param name="instanceType" vsli:raw="The specified type.">Заданный тип.</param>
      <returns vsli:raw="An instance of the specified type or &lt;see langword=&quot;null&quot; /&gt;.">Экземпляр заданного типа или <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary vsli:raw="Gets the specified text.">Возвращает заданный текст.</summary>
      <returns vsli:raw="The specified text.">Указанный текст.</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit signed integer objects to and from other representations.">Предоставляет преобразователь типа для преобразования 16-разрядных целочисленных объектов со знаком в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int16Converter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Int16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit signed integer objects to and from other representations.">Предоставляет преобразователь типов для преобразования 32-разрядных целочисленных объектов со знаком в другие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int32Converter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Int32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit signed integer objects to and from various other representations.">Предоставляет преобразователь типов для преобразования 64-разрядных целочисленных объектов со знаком в другие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int64Converter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Int64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary vsli:raw="Indicates whether a class converts property change events to &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">Показывает, преобразует ли класс события изменения свойства в события <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">Возвращает значение, показывающее, вызывает ли объект <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> события <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events when one of its property values changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> вызывает события <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> при изменении одного из значений его свойств; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary vsli:raw="Allows coordination of initialization for a component and its dependent properties.">Позволяет выполнить инициализацию компонента и его зависимых свойств.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary vsli:raw="Occurs when initialization of the component is completed.">Возникает при завершении инициализации компонента.</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary vsli:raw="Gets a value indicating whether the component is initialized.">Возвращает значение, показывающее, инициализирован ли компонент.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the component has completed initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> указывает, что компонент завершил инициализацию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary vsli:raw="Provides contextual information about a component, such as its container and property descriptor.">Предоставляет контекстную информацию о компоненте, например, его контейнер и дескриптор свойства.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">Вызывает событие <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Вызывает событие <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be changed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект может быть изменен; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary vsli:raw="Gets the container representing this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; request.">Возвращает контейнер, представляющий это запрос <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with the set of objects for this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no container or if the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; does not use outside objects.">Контейнер <see cref="T:System.ComponentModel.IContainer" /> с набором объектов для этого дескриптора <see cref="T:System.ComponentModel.TypeDescriptor" />; в противном случае — значение <see langword="null" />, если контейнер отсутствует или если дескриптор <see cref="T:System.ComponentModel.TypeDescriptor" /> не использует внешних объектов.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary vsli:raw="Gets the object that is connected with this type descriptor request.">Возвращает объект, связанный с этим запросом дескриптора типа.</summary>
      <returns vsli:raw="The object that invokes the method on the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no object responsible for the call.">Объект, вызывающий метод для дескриптора <see cref="T:System.ComponentModel.TypeDescriptor" />; в противном случае — значение <see langword="null" />, если ответственный за вызов объект отсутствует.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is associated with the given context item.">Возвращает <see cref="T:System.ComponentModel.PropertyDescriptor" />, связанный с заданным элементом контекста.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the given context item; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; responsible for the call.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающий данный элемент контекста; в противном случае — значение <see langword="null" />, если отсутствует дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, ответственный за вызов.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary vsli:raw="Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.">Предоставляет функциональные возможности, необходимые для обнаружения схемы списка возможных связываний, в которой свойства доступные для связывания, отличаются от открытых свойств объекта связывания.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">Возвращает <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, представляющий свойства каждого элемента, используемого для привязки данных.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to find in the collection as bindable. This can be &lt;see langword=&quot;null&quot; /&gt;.">Массив объектов <see cref="T:System.ComponentModel.PropertyDescriptor" />, которые ищутся в коллекции как пригодные для привязки. Это может быть <see langword="null" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, представляющий свойства каждого элемента, используемого для привязки данных.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the name of the list.">Возвращает имя списка.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects, for which the list name is returned. This can be &lt;see langword=&quot;null&quot; /&gt;.">Массив объектов <see cref="T:System.ComponentModel.PropertyDescriptor" />, для которых возвращается имя списка. Это может быть <see langword="null" />.</param>
      <returns vsli:raw="The name of the list.">Имя списка.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for all licenses. A license is granted to a specific instance of a component.">Предоставляет абстрактный (<see langword="abstract" />) базовый класс для всех лицензий. Лицензия предоставляется конкретному экземпляру компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary vsli:raw="When overridden in a derived class, disposes of the resources used by the license.">При переопределении в производном классе уничтожает используемые лицензией ресурсы.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary vsli:raw="When overridden in a derived class, gets the license key granted to this component.">При переопределении в производном классе возвращает ключ лицензии, предоставленной для этого компонента.</summary>
      <returns vsli:raw="A license key granted to this component.">Ключ лицензии, предоставленной для этого компонента.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary vsli:raw="Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.">Определяет, когда можно использовать лицензированный объект, и предоставляет способ получения дополнительных служб, необходимых для поддержки лицензий, выполняемых в границах своего домена.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.">При переопределении в производном классе возвращает из заданной сборки ресурсов сохраненный ключ лицензии для заданного типа.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component.">Объект <see cref="T:System.Type" />, представляющий тип компонента.</param>
      <param name="resourceAssembly" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; with the license key.">Объект <see cref="T:System.Reflection.Assembly" /> с ключом лицензии.</param>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type. This method returns &lt;see langword=&quot;null&quot; /&gt; unless you override it.">Свойство <see cref="P:System.ComponentModel.License.LicenseKey" /> для указанного типа. Этот метод, если он не переопределен, возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service, if it is available.">Возвращает запрашиваемую службу, если она доступна.</summary>
      <param name="type" vsli:raw="The type of service to retrieve.">Тип возвращаемой службы.</param>
      <returns vsli:raw="An instance of the service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be found.">Экземпляр службы или значение <see langword="null" />, если службу не удается обнаружить.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="When overridden in a derived class, sets a license key for the specified type.">При переопределении в производном классе задает ключ лицензии для указанного типа.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component associated with the license key.">Объект <see cref="T:System.Type" />, представляющий компонент, связанный с ключом лицензии.</param>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to save for the type of component.">Свойство <see cref="P:System.ComponentModel.License.LicenseKey" /> для сохранения типа компонента.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary vsli:raw="When overridden in a derived class, gets a value that specifies when you can use a license.">При переопределении в производном классе возвращает значение, определяющее, когда можно использовать лицензию.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values that specifies when you can use a license. The default is &lt;see cref=&quot;F:System.ComponentModel.LicenseUsageMode.Runtime&quot; /&gt;.">Одно из значений объекта <see cref="T:System.ComponentModel.LicenseUsageMode" />, определяющее, когда можно использовать лицензию. Значение по умолчанию — <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary vsli:raw="Represents the exception thrown when a component cannot be granted a license.">Представляет исключение, возникающее, когда компоненту не может быть предоставлена лицензия.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class with the given &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseException" /> с заданными объектами <see cref="T:System.Runtime.Serialization.SerializationInfo" /> и <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Метод <see cref="T:System.Runtime.Serialization.SerializationInfo" />, используемый для десериализации.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Объект назначения, используемый для десериализации.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type of component that was denied a license.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseException" /> для типа компонента, которому было отказано в лицензии.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Объект <see cref="T:System.Type" />, представляющий тип компонента, которому не была предоставлена лицензия.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseException" /> для типа и экземпляра компонента, которому было отказано в лицензии.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Объект <see cref="T:System.Type" />, представляющий тип компонента, которому не была предоставлена лицензия.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Экземпляр компонента, которому не была предоставлена лицензия.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseException" /> для типа и экземпляра компонента, которому было отказано в лицензии, вместе с выводимым сообщением.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Объект <see cref="T:System.Type" />, представляющий тип компонента, которому не была предоставлена лицензия.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Экземпляр компонента, которому не была предоставлена лицензия.</param>
      <param name="message" vsli:raw="The exception message to display.">Отображаемое сообщение исключения.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display and the original exception thrown.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseException" /> для типа и экземпляра компонента, которому было отказано в лицензии, вместе с отображаемым сообщением и исходным вызываемым исключением.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Объект <see cref="T:System.Type" />, представляющий тип компонента, которому не была предоставлена лицензия.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Экземпляр компонента, которому не была предоставлена лицензия.</param>
      <param name="message" vsli:raw="The exception message to display.">Отображаемое сообщение исключения.</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the original exception.">Объект <see cref="T:System.Exception" />, представляющий исходное исключение.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> сведениями об исключении.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Метод <see cref="T:System.Runtime.Serialization.SerializationInfo" />, используемый для десериализации.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Объект назначения, используемый для десериализации.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary vsli:raw="Gets the type of the component that was not granted a license.">Возвращает тип компонента, которому не была предоставлена лицензия.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Объект <see cref="T:System.Type" />, представляющий тип компонента, которому не была предоставлена лицензия.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary vsli:raw="Provides properties and methods to add a license to a component and to manage a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. This class cannot be inherited.">Предоставляет свойства и методы для добавления лицензии в компонент и для управления поставщиком <see cref="T:System.ComponentModel.LicenseProvider" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary vsli:raw="Creates an instance of the specified type, given a context in which you can use the licensed instance.">Создает экземпляр указанного типа, задавая контекст, в котором можно использовать лицензированный экземпляр.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Объект <see cref="T:System.Type" />, представляющий создаваемый тип.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">Объект <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, когда можно использовать лицензированный экземпляр.</param>
      <returns vsli:raw="An instance of the specified type.">Экземпляр указанного типа.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary vsli:raw="Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.">Создает экземпляр указанного типа с заданными аргументами, задавая контекст, в котором можно использовать лицензированный экземпляр.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Объект <see cref="T:System.Type" />, представляющий создаваемый тип.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">Объект <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, когда можно использовать лицензированный экземпляр.</param>
      <param name="args" vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the arguments for the type.">Массив типа <see cref="T:System.Object" />, представляющий аргументы для типа.</param>
      <returns vsli:raw="An instance of the specified type with the given array of arguments.">Экземпляр указанного типа с заданным массивом аргументов.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary vsli:raw="Returns whether the given type has a valid license.">Возвращает значение, показывающее, обладает ли данный тип действительной лицензией.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to find a valid license for.">Объект <see cref="T:System.Type" /> для поиска действительной лицензии.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given type is licensed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если данный тип является лицензированным; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified type.">Определяет, может ли быть предоставлена действительная лицензия для указанного типа.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего <see cref="T:System.ComponentModel.License" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid license can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если действительная лицензия может быть предоставлена; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Определяет, может ли быть предоставлена действительная лицензия для указанного экземпляра типа. Этот метод создает действительный объект <see cref="T:System.ComponentModel.License" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего лицензию.</param>
      <param name="instance" vsli:raw="An object of the specified type or a type derived from the specified type.">Объект указанного типа или типа, производного от указанного типа.</param>
      <param name="license" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; that is a valid license, or &lt;see langword=&quot;null&quot; /&gt; if a valid license cannot be granted.">Объект <see cref="T:System.ComponentModel.License" />, являющийся действительной лицензией или значением <see langword="null" />, если действительная лицензия не может быть предоставлена.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если может быть предоставлена действительная лицензия <see cref="T:System.ComponentModel.License" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary vsli:raw="Prevents changes being made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">Не допускает внесения изменений в текущий контекст <see cref="T:System.ComponentModel.LicenseContext" /> данного объекта.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to lock.">Объект, текущий контекст которого нужно заблокировать.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The context is already locked.">Контекст уже заблокирован.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary vsli:raw="Allows changes to be made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">Позволяет вносить изменения в текущий контекст <see cref="T:System.ComponentModel.LicenseContext" /> данного объекта.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to unlock.">Объект, текущий контекст которого нужно разблокировать.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;contextUser&quot; /&gt; represents a different user than the one specified in a previous call to &lt;see cref=&quot;M:System.ComponentModel.LicenseManager.LockContext(System.Object)&quot; /&gt;.">Параметр <paramref name="contextUser" /> представляет пользователя, отличающегося от заданного в предыдущем вызове метода <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary vsli:raw="Determines whether a license can be granted for the specified type.">Определяет, может ли быть предоставлена лицензия для указанного типа.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего лицензию.</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">Лицензия <see cref="T:System.ComponentModel.License" /> не может быть предоставлена.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary vsli:raw="Determines whether a license can be granted for the instance of the specified type.">Определяет, может ли быть предоставлена лицензия для экземпляра указанного типа.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего лицензию.</param>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type or a type derived from the specified type.">Объект <see cref="T:System.Object" /> указанного типа или типа, производного от указанного типа.</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="The type is licensed, but a &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">Тип лицензирован, но лицензия <see cref="T:System.ComponentModel.License" /> не может быть предоставлена.</exception>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Допустимый класс <see cref="T:System.ComponentModel.License" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary vsli:raw="Gets or sets the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt;, which specifies when you can use the licensed object.">Возвращает или задает текущий контекст <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, когда можно использовать лицензированный объект.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property is currently locked and cannot be changed.">Свойство <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> в данный момент блокировано и не может быть изменено.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed object.">Объект <see cref="T:System.ComponentModel.LicenseContext" />, который указывает, когда можно использовать лицензированный объект.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; which specifies when you can use the licensed object for the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt;.">Возвращает объект <see cref="T:System.ComponentModel.LicenseUsageMode" />, определяющий, когда можно использовать лицензированный объект для контекста <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values, as specified in the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property.">Одно из значений <see cref="T:System.ComponentModel.LicenseUsageMode" />, как указано в свойстве <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for implementing a license provider.">Предоставляет абстрактный (<see langword="abstract" />) базовый класс для реализации поставщика лицензий.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.">При переопределении в производном классе возвращает лицензию для экземпляра или типа компонента, когда задан контекст, а также приводит ли отказ в лицензии к исключению.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">Объект <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, где можно использовать лицензированный объект.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the license.">Объект <see cref="T:System.Type" />, который представляет компонент, запрашивающий лицензию.</param>
      <param name="instance" vsli:raw="An object that is requesting the license.">Запрашивающий лицензию объект.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when the component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если исключение <see cref="T:System.ComponentModel.LicenseException" /> должно быть вызвано в случае, когда компоненту не может быть предоставлена лицензия; в противном случае — значение <see langword="false" />.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Допустимый класс <see cref="T:System.ComponentModel.License" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary vsli:raw="Specifies the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; to use with a class. This class cannot be inherited.">Задает объект <see cref="T:System.ComponentModel.LicenseProvider" />, используемый вместе с классом. Этот класс не наследуется.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary vsli:raw="Specifies the default value, which is no provider. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Определяет значение по умолчанию, не являющееся поставщиком. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class without a license provider.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> без поставщика лицензий.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> с указанным типом.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the license provider class.">Полное имя класса поставщика лицензий.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type of license provider.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicenseProviderAttribute" />, используя указанный тип поставщика лицензий.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider class.">Тип <see cref="T:System.Type" />, представляющий тип класса поставщика лицензий.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">Указывает, равен ли этот экземпляр заданному объекту.</summary>
      <param name="value" vsli:raw="Another object to compare to.">Другой объект, подлежащий сравнению.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значение параметра <paramref name="value" /> равно данному экземпляру; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.LicenseProviderAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary vsli:raw="Gets the license provider that must be used with the associated class.">Возвращает поставщик лицензий, который должен использоваться вместе со связанным классом.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.Type" />, представляющий тип поставщика лицензий. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary vsli:raw="Indicates a unique ID for this attribute type.">Указывает уникальный идентификатор для атрибута данного типа.</summary>
      <returns vsli:raw="A unique ID for this attribute type.">Уникальный идентификатор для атрибута данного типа.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary vsli:raw="Specifies when the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be used.">Указывает, когда может использоваться объект <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary vsli:raw="Used during design time by a visual designer or the compiler.">Используется визуальным конструктором или компилятором во время разработки.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary vsli:raw="Used during runtime.">Используется во время выполнения.</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary vsli:raw="Provides an implementation of a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.">Обеспечивает реализацию поставщика <see cref="T:System.ComponentModel.LicenseProvider" />. Этот поставщик работает таким же образом, как и стандартный модуль лицензирования Microsoft .NET Framework.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicFileLicenseProvider&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LicFileLicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary vsli:raw="Returns a key for the specified type.">Возвращает ключ для указанного типа.</summary>
      <param name="type" vsli:raw="The object type to return the key.">Тип объекта для возвращения ключа.</param>
      <returns vsli:raw="A confirmation that the &lt;paramref name=&quot;type&quot; /&gt; parameter is licensed.">Подтверждение лицензирования для параметра <paramref name="type" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Returns a license for the instance of the component, if one is available.">Возвращает лицензию для экземпляра компонента, если она доступна.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">Объект <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, где можно использовать лицензированный объект.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Объект <see cref="T:System.Type" />, представляющий компонент, запрашивающий лицензию <see cref="T:System.ComponentModel.License" />.</param>
      <param name="instance" vsli:raw="An object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Объект, запрашивающий лицензию <see cref="T:System.ComponentModel.License" />.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when a component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если исключение <see cref="T:System.ComponentModel.LicenseException" /> должно вызываться, когда компоненту не может быть предоставлена лицензия; в противном случае — значение <see langword="false" />.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;. If this method cannot find a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; or a valid &lt;paramref name=&quot;context&quot; /&gt; parameter, it returns &lt;see langword=&quot;null&quot; /&gt;.">Допустимый класс <see cref="T:System.ComponentModel.License" />. Если этот метод не может найти действительную лицензию <see cref="T:System.ComponentModel.License" /> или действительный параметр <paramref name="context" />, возвращается значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary vsli:raw="Determines whether the key that the &lt;see cref=&quot;M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)&quot; /&gt; method retrieves is valid for the specified type.">Определяет, является ли для указанного типа действительным ключ, возвращаемый методом <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" />.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to check.">Проверяемый элемент <see cref="P:System.ComponentModel.License.LicenseKey" />.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Объект <see cref="T:System.Type" />, представляющий компонент, запрашивающий лицензию <see cref="T:System.ComponentModel.License" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is a valid &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если ключ является действительным ключом лицензии <see cref="P:System.ComponentModel.License.LicenseKey" /> для заданного типа; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary vsli:raw="Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.">Указывает, что список может использоваться в качестве источника данных. Визуальный конструктор должен использовать этот атрибут, чтобы определить, отображается ли конкретный список в сборщике привязки данных. Этот класс не наследуется.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Представляет значение по умолчанию для объекта <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary vsli:raw="Specifies that the list is not bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Определяет, что список не поддерживает возможности привязки. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary vsli:raw="Specifies that the list is bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Определяет, что список не поддерживает возможности привязки. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using a value to indicate whether the list is bindable.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListBindableAttribute" />, используя значение, показывающее, поддерживает ли этот список возможности привязки.</summary>
      <param name="listBindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если список поддерживает возможности привязки; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; to indicate whether the list is bindable.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListBindableAttribute" />, используя объект <see cref="T:System.ComponentModel.BindableSupport" />, показывающий, поддерживает ли список возможности привязки.</summary>
      <param name="flags" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; that indicates whether the list is bindable.">Объект <see cref="T:System.ComponentModel.BindableSupport" />, показывающий, поддерживает ли список возможности привязки.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Возвращает значение, показывающее, равен ли переданный объект этому атрибуту <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
      <param name="obj" vsli:raw="The object to test equality with.">Объект для проверки на равенство.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если переданный объект равен этому объекту <see cref="T:System.ComponentModel.ListBindableAttribute" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.ListBindableAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns whether &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value.">Возвращает значение, показывающее, установлено ли для свойства <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> значение по умолчанию.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> установлено равным значению по умолчанию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary vsli:raw="Gets whether the list is bindable.">Возвращает значение, показывающее, поддерживает ли список возможности привязки.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если список поддерживает возможности привязки; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event.">Предоставляет данные для события <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListChangedEventArgs" />, используя заданный тип изменения и затрагиваемый дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Значение <see cref="T:System.ComponentModel.ListChangedType" />, показывающее тип изменения.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, removed, or changed.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, который был добавлен, удален или изменен.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the index of the affected item.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListChangedEventArgs" />, используя заданный тип изменения и индекс изменяемого элемента.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Значение <see cref="T:System.ComponentModel.ListChangedType" />, показывающее тип изменения.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added, changed, or removed.">Индекс элемента, который был добавлен, изменен или удален.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change, the index of the affected item, and a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the affected item.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListChangedEventArgs" />, используя заданный тип изменения, индекс изменяемого элемента и дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающий изменяемый элемент.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Значение <see cref="T:System.ComponentModel.ListChangedType" />, показывающее тип изменения.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added or changed.">Индекс элемента, который был добавлен или изменен.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the item.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающий элемент.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the old and new index of the item that was moved.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListChangedEventArgs" />, используя заданный тип изменения, а также старый и новый индексы перемещенного элемента.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Значение <see cref="T:System.ComponentModel.ListChangedType" />, показывающее тип изменения.</param>
      <param name="newIndex" vsli:raw="The new index of the item that was moved.">Новый индекс перемещенного элемента.</param>
      <param name="oldIndex" vsli:raw="The old index of the item that was moved.">Старый индекс перемещенного элемента.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary vsli:raw="Gets the type of change.">Получение типа изменения.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Значение <see cref="T:System.ComponentModel.ListChangedType" />, показывающее тип изменения.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary vsli:raw="Gets the index of the item affected by the change.">Возвращает индекс элемента, затрагиваемого изменением.</summary>
      <returns vsli:raw="The index of the affected by the change.">Индекс элемента, затрагиваемого изменением.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary vsli:raw="Gets the old index of an item that has been moved.">Возвращает старый индекс перемещенного элемента.</summary>
      <returns vsli:raw="The old index of the moved item.">Старый индекс перемещенного элемента.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, changed, or deleted.">Возвращает дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, который был добавлен, изменен или удален.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected by the change.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, затрагиваемый изменением.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event of the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; class.">Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> класса <see cref="T:System.ComponentModel.IBindingList" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">Объект <see cref="T:System.ComponentModel.ListChangedEventArgs" />, содержащий данные события.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary vsli:raw="Specifies how the list changed.">Задает способ изменения списка.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary vsli:raw="An item added to the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was added.">Элемент, добавляемый в список. Свойство <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> содержит индекс элемента, который был добавлен.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary vsli:raw="An item changed in the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was changed.">Элемент, измененный в списке. Свойство <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> содержит индекс элемента, который был изменен.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary vsli:raw="An item deleted from the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was deleted.">Элемент, удаленный из списка. Свойство <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> содержит индекс элемента, который был удален.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary vsli:raw="An item moved within the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.OldIndex&quot; /&gt; contains the previous index for the item, whereas &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the new index for the item.">Элемент, перемещенный внутри списка. Свойство <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> содержит предыдущий индекс элемента, а свойство <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> содержит новый индекс элемента.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was added, which changed the schema.">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> был добавлен, что привело к изменению схемы.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was changed, which changed the schema.">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> был изменен, что привело к изменению схемы.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was deleted, which changed the schema.">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> был удален, что привело к изменению схемы.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary vsli:raw="Much of the list has changed. Any listening controls should refresh all their data from the list.">В список внесены существенные изменения. Все отслеживающие элементы управления обновляют все свои данные из списка.</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary vsli:raw="Provides a description of the sort operation applied to a data source.">Предоставляет описание операции сортировки, применяемой к источнику данных.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; class with the specified property description and direction.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListSortDescription" />, используя заданно описание свойства и направление.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the property by which the data source is sorted.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, описывающий свойство, по которому сортируется источник данных.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDescription" />.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary vsli:raw="Gets or sets the abstract description of a class property associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Получает или задает абстрактное описание свойства класса, связанное с этим описанием <see cref="T:System.ComponentModel.ListSortDescription" /></summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Рабочая область метаданных <see cref="T:System.ComponentModel.PropertyDescriptor" />, связанная с этим соединением <see cref="T:System.ComponentModel.ListSortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary vsli:raw="Gets or sets the direction of the sort operation associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Возвращает или задает направление операции сортировки, связанное с этим описанием <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Одно из значений перечисления <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">Представляет коллекцию объектов <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class with the specified array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">Инициализирует новый экземпляр коллекции <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> с помощью указанного массива объектов <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="sorts" vsli:raw="The array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects to be contained in the collection.">Массив объектов <see cref="T:System.ComponentModel.ListSortDescription" /> ,которые будет содержать коллекция.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary vsli:raw="Determines if the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; contains a specific value.">Определяет, содержит ли <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> указанное значение.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент <see cref="T:System.Object" /> найден в коллекции; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to the specified array, starting at the specified destination array index.">Копирует содержимое коллекции в заданный массив, начиная с указанного индекса конечного массива.</summary>
      <param name="array" vsli:raw="The destination array for the items copied from the collection.">Конечный массив для копирования элементов коллекции.</param>
      <param name="index" vsli:raw="The index of the destination array at which copying begins.">Индекс конечного массива назначения, начиная с которого выполняется копирование.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary vsli:raw="Returns the index of the specified item in the collection.">Возвращает индекс заданного элемента в коллекции.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Объект <see cref="T:System.Object" /> для поиска в коллекции.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Возвращает перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора коллекции.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">Добавляет элемент в коллекцию.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">Элемент, добавляемый в коллекцию.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Во всех случаях.</exception>
      <returns vsli:raw="The position into which the new element was inserted.">Позиция, на которую вставлен новый элемент.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Удаляет все элементы из коллекции.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Во всех случаях.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">Вставляет элемент в коллекцию по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">Отсчитываемый с нуля индекс объекта <see cref="T:System.ComponentModel.ListSortDescription" /> в коллекции, который необходимо задать или получить.</param>
      <param name="value" vsli:raw="The item to insert into the collection.">Элемент, вставляемый в коллекцию.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Во всех случаях.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of an item from the collection.">Удаляет первое вхождение элемента из коллекции.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">Элемент, который нужно удалить из коллекции.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Во всех случаях.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes an item from the collection at a specified index.">Удаляет элемент из коллекции по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to remove from the collection.">Отсчитываемый с нуля индекс объекта <see cref="T:System.ComponentModel.ListSortDescription" />, удаляемого из коллекции.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Во всех случаях.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary vsli:raw="Gets the number of items in the collection.">Возвращает количество элементов в коллекции.</summary>
      <returns vsli:raw="The number of items in the collection.">Количество элементов в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Получает или задает указанный объект <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">Отсчитываемый с нуля индекс объекта <see cref="T:System.ComponentModel.ListSortDescription" /> в коллекции, который необходимо возвратить или установить.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An item is set in the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;, which is read-only.">Элемент устанавливается в коллекции <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, доступной только для чтения.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">Объект <see cref="T:System.ComponentModel.ListSortDescription" /> с заданным индексом.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is thread safe.">Возвращает значение, показывающее, является ли доступ к коллекции потокобезопасным.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">Значение <see langword="true" /> во всех случаях.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the current instance that can be used to synchronize access to the collection.">Получает текущий экземпляр, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns vsli:raw="The current instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">Текущий экземпляр коллекции <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Возвращает значение, указывающее, имеет ли коллекция фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">Значение <see langword="true" /> во всех случаях.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Возвращает значение, указывающее, является ли коллекция доступной только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">Значение <see langword="true" /> во всех случаях.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Возвращает указанный объект <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get in the collection.">Отсчитываемый с нуля индекс объекта <see cref="T:System.ComponentModel.ListSortDescription" />, возвращаемого из коллекции.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">Объект <see cref="T:System.ComponentModel.ListSortDescription" /> с заданным индексом.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary vsli:raw="Specifies the direction of a sort operation.">Задает направление операции сортировки.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary vsli:raw="Sorts in ascending order.">Сортировка по возрастанию.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary vsli:raw="Sorts in descending order.">Выполняет сортировку в порядке убывания.</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the properties that support lookup-based binding. This class cannot be inherited.">Определяет свойства, поддерживающие привязку на основе поиска. Этот класс не наследуется.</summary>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">Представляет значение по умолчанию для класса <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class using no parameters.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> без параметров.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Имя свойства, используемого в качестве источника данных.</param>
      <param name="displayMember" vsli:raw="The name of the property to be used for the display name.">Имя свойства, используемого для отображаемого имени.</param>
      <param name="valueMember" vsli:raw="The name of the property to be used as the source for values.">Имя свойства, используемого в качестве источника значений.</param>
      <param name="lookupMember" vsli:raw="The name of the property to be used for lookups.">Имя свойства, используемого для поиска.</param>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">Определяет, равен ли указанный объект <see cref="T:System.Object" /> текущему экземпляру <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">Объект <see cref="T:System.Object" /> для сравнения с текущим экземпляром <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">Значение <see langword="true" />, если объект равен текущему экземпляру; в противном случае — значение <see langword="false" />, сообщающее о неравенстве.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Возвращает имя свойства источника данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns vsli:raw="The data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Свойство источника данных для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary vsli:raw="Gets the name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Возвращает свойство элемента отображения для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns vsli:raw="The name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Имя свойства элемента отображения для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary vsli:raw="Gets the name of the lookup member for the component to which this attribute is bound.">Возвращает имя элемента поиска для компонента, к которому привязан этот атрибут.</summary>
      <returns vsli:raw="The name of the lookup member for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Имя свойства элемента поиска для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary vsli:raw="Gets the name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Возвращает имя свойства элемента значения для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns vsli:raw="The name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Имя свойства элемента значения для компонента, к которому привязан атрибут <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary vsli:raw="Implements &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and provides the base implementation for remotable components that are marshaled by value (a copy of the serialized object is passed).">Реализует интерфейс <see cref="T:System.ComponentModel.IComponent" /> и предоставляет базовую реализацию для удаленных компонентов, которые маршалируются по значению (передается копия сериализованного объекта).</summary>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary vsli:raw="Adds an event handler to listen to the &lt;see cref=&quot;E:System.ComponentModel.MarshalByValueComponent.Disposed&quot; /&gt; event on the component.">Добавляет обработчик события для ожидания события <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> в компоненте.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt;.">Освобождает все ресурсы, занятые модулем <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; and optionally releases the managed resources.">Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.ComponentModel.MarshalByValueComponent" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary vsli:raw="Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.">Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как он будет уничтожен во время сборки мусора.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary vsli:raw="Gets the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">Возвращает средство реализации объекта <see cref="T:System.IServiceProvider" />.</summary>
      <param name="service" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of service you want.">Объект <see cref="T:System.Type" />, представляющий нужный тип службы.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">Объект <see cref="T:System.Object" />, который представляет средство реализации объекта <see cref="T:System.IServiceProvider" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any. This method should not be overridden.">Возвращает объект <see cref="T:System.String" />, содержащий имя <see cref="T:System.ComponentModel.Component" />, если оно есть. Этот метод не следует переопределять.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any.  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; is unnamed.">Строка <see cref="T:System.String" />, содержащая имя компонента <see cref="T:System.ComponentModel.Component" />, если у компонента есть имя.  
  
 Значение <see langword="null" />, если у компонента <see cref="T:System.ComponentModel.Component" /> нет имени.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary vsli:raw="Gets the container for the component.">Возвращает контейнер для компонента.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; interface that represents the component's container, or &lt;see langword=&quot;null&quot; /&gt; if the component does not have a site.">Объект, реализующий интерфейс <see cref="T:System.ComponentModel.IContainer" />, который представляет контейнер компонента, или значение <see langword="null" />, если у компонента отсутствует узел.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary vsli:raw="Gets a value indicating whether the component is currently in design mode.">Возвращает значение, показывающее, находится ли компонент в настоящий момент в режиме разработки.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is in design mode; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если компонент находится в режиме разработки; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary vsli:raw="Gets the list of event handlers that are attached to this component.">Возвращает список обработчиков событий, которые прикреплены к этому компоненту.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventHandlerList&quot; /&gt; that provides the delegates for this component.">Экземпляр класса <see cref="T:System.ComponentModel.EventHandlerList" />, предоставляющий делегаты для этого компонента.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary vsli:raw="Gets or sets the site of the component.">Возвращает или задает сайт компонента.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface that represents the site of the component.">Объект, реализующий интерфейс <see cref="T:System.ComponentModel.ISite" />, который представляет узел компонента.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary vsli:raw="Represents a mask-parsing service that can be used by any number of controls that support masking, such as the &lt;see cref=&quot;T:System.Windows.Forms.MaskedTextBox&quot; /&gt; control.">Представляет службу разбора маски, которая может использоваться любым количеством элементов управления, поддерживающих маски, например элементом управления <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and ASCII restriction value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску и значение ограничения ASCII.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">Значение <see langword="true" />, чтобы ограничить ввод ASCII-совместимыми знаками; в противном случае — значение <see langword="false" />, чтобы разрешить использовать полный набор Юникод.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, password character, and prompt usage value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску, знак пароля и значение использования приглашения.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Знак <see cref="T:System.Char" />, отображаемый при вводе знаков в строке пароля.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, разрешающее использовать знак приглашения в качестве ввода, в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and culture.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя указанные маску и значения языка и региональных параметров.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый для задания зависимых от региона символов разделения.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, and ASCII restriction value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску, язык и региональные параметры, а также значение ограничения ASCII.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый для задания зависимых от региона символов разделения.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">Значение <see langword="true" />, чтобы ограничить ввод ASCII-совместимыми знаками; в противном случае — значение <see langword="false" />, чтобы разрешить использовать полный набор Юникод.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску, язык и региональные параметры, значение использования приглашения, символ приглашения, знак пароля и значение ограничения ASCII.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый для задания зависимых от региона символов разделения.</param>
      <param name="allowPromptAsInput" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value that specifies whether the prompt character should be allowed as a valid input character.">Значение <see cref="T:System.Boolean" />, определяющее, следует ли разрешать использование символа приглашения в качестве символа ввода значения.</param>
      <param name="promptChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed as a placeholder for user input.">Знак <see cref="T:System.Char" />, который будет отображаться в качестве местозаполнителя для пользовательского ввода.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Знак <see cref="T:System.Char" />, отображаемый при вводе знаков в строке пароля.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">Значение <see langword="true" />, чтобы ограничить ввод ASCII-совместимыми знаками; в противном случае — значение <see langword="false" />, чтобы разрешить использовать полный набор Юникод.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The mask parameter is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The mask contains one or more non-printable characters.">Параметр маски имеет значение <see langword="null" /> или равен <see cref="F:System.String.Empty" />.  
  
-или- 
Маска содержит один или несколько непечатаемых символов.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, password character, and prompt usage value.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MaskedTextProvider" />, используя заданную маску, язык и региональные параметры, знак пароля и значение использования приглашения.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Строка <see cref="T:System.String" />, представляющая маску ввода.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый для задания зависимых от региона символов разделения.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Знак <see cref="T:System.Char" />, отображаемый при вводе знаков в строке пароля.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, разрешающее использовать знак приглашения в качестве ввода, в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string.">Добавляет указанный введенный знак в конец форматируемой строки.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">Значение <see cref="T:System.Char" />, добавляемое в форматируемую строку.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если введенный знак был успешно добавлен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information.">Добавляет заданный введенный знак в конец форматируемой строки, а затем выводит позицию и описательные сведения.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">Значение <see cref="T:System.Char" />, добавляемое в форматируемую строку.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">Отсчитываемая от нуля позиция форматируемой строки, в которую была предпринята попытка добавить знак. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если введенный знак был успешно добавлен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string.">Добавляет в конец форматируемой строки знаки заданной входной строки.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">Строка <see cref="T:System.String" />, содержащая значения знаков, добавляемых в форматируемую строку.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">Значение <see langword="true" />, если все знаки входной строки были успешно добавлены; в противном случае — значение <see langword="false" />, показывающее, что никакие знаки не были добавлены.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information.">Добавляет знаки заданной входной строки в конец форматируемой строки, а затем выводит позицию и описательные сведения.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">Строка <see cref="T:System.String" />, содержащая значения знаков, добавляемых в форматируемую строку.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">Отсчитываемая от нуля позиция форматируемой строки, в которую была предпринята попытка добавить знак. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">Значение <see langword="true" />, если все знаки входной строки были успешно добавлены; в противном случае — значение <see langword="false" />, показывающее, что никакие знаки не были добавлены.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters.">Удаляет все введенные редактируемые знаки из форматируемой строки, заменяя их знаками приглашения.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information.">Удаляет все введенные редактируемые знаки из форматируемой строки, заменяя их знаками приглашения, а затем выводя описательные сведения.</summary>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary vsli:raw="Creates a copy of the current &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt;.">Создает копию текущего поставщика <see cref="T:System.ComponentModel.MaskedTextProvider" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; object this method creates, cast as an object.">Поставщик <see cref="T:System.ComponentModel.MaskedTextProvider" />, созданный данным методом, приводится к форме объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position after the specified position using the specified search direction.">Возвращает позицию первой назначенной редактируемой позиции после заданной позиции, используя заданное направление поиска.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Отсчитываемая от нуля позиция в форматируемой строке для начала поиска.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной назначенной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position between the specified positions using the specified search direction.">Возвращает позицию первой назначенной редактируемой позиции между заданными позициями, используя заданное направление поиска.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается поиск.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Отсчитываемая от нуля позиция в форматируемой строке, в которой будет заканчиваться поиск.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной назначенной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position after the specified position using the specified search direction.">Возвращает позицию первой редактируемой позиции после заданной позиции, используя заданное направление поиска.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Отсчитываемая от нуля позиция в форматируемой строке для начала поиска.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position between the specified positions using the specified search direction.">Возвращает позицию первой редактируемой позиции между заданными позициями, используя заданное направление поиска.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается поиск.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Отсчитываемая от нуля позиция в форматируемой строке, в которой будет заканчиваться поиск.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position after the specified position using the specified search direction.">Возвращает позицию первой нередактируемой позиции после заданной позиции, используя заданное направление поиска.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Отсчитываемая от нуля позиция в форматируемой строке для начала поиска.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первого встреченного литерала, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position between the specified positions using the specified search direction.">Возвращает позицию первой нередактируемой позиции между заданными позициями, используя заданное направление поиска.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается поиск.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Отсчитываемая от нуля позиция в форматируемой строке, в которой будет заканчиваться поиск.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первого встреченного литерала, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position after the specified position using the specified search direction.">Возвращает позицию первой неназначенной редактируемой позиции после заданной позиции, используя заданное направление поиска.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Отсчитываемая от нуля позиция в форматируемой строке для начала поиска.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной неназначенной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position between the specified positions using the specified search direction.">Возвращает позицию первой неназначенной редактируемой позиции между заданными позициями, используя заданное направление поиска.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается поиск.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Отсчитываемая от нуля позиция в форматируемой строке, в которой будет заканчиваться поиск.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Значение типа <see cref="T:System.Boolean" />, показывающее направление поиска: <see langword="true" /> для поиска в направлении вперед или <see langword="false" /> для поиска в направлении назад.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">При успешном выполнении — значение <see cref="T:System.Int32" />, представляющее отсчитываемую от нуля позицию первой встреченной неназначенной редактируемой позиции, в противном случае — значение <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; denotes success or failure.">Определяет, указывает ли объект <see cref="T:System.ComponentModel.MaskedTextResultHint" /> на удачное или неудачное выполнение.</summary>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value typically obtained as an output parameter from a previous operation.">Значение <see cref="T:System.ComponentModel.MaskedTextResultHint" />, обычно получаемое как выходной параметр предыдущей операции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value represents a success; otherwise, &lt;see langword=&quot;false&quot; /&gt; if it represents failure.">Значение <see langword="true" />, если заданное значение <see cref="T:System.ComponentModel.MaskedTextResultHint" /> представляет успешное завершение; в противном случае — значение <see langword="false" />, если значение объекта сообщает о неудачном выполнении.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string.">Вставляет заданный знак в заданную позицию форматируемой строки.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">Вставляемый объект <see cref="T:System.Char" />.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">Отсчитываемая от нуля позиция для вставки знака в форматируемую строку.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если вставка прошла успешно; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation.">Вставляет заданный знак в заданную позицию форматируемой строки, возвращая последнюю позицию вставки и статус операции.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">Вставляемый объект <see cref="T:System.Char" />.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">Отсчитываемая от нуля позиция для вставки знака в форматируемую строку.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">При успешном выполнении метода — последняя позиция, в которой был вставлен знак; в противном случае — первая позиция, вставка в которую закончилась неудачей. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции вставки. Выходной параметр.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если вставка прошла успешно; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string.">Вставляет заданную строку в заданную позицию форматируемой строки.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">Вставляемый объект <see cref="T:System.String" />.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">Отсчитываемая от нуля позиция для вставки входной строки в форматируемую строку.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если вставка прошла успешно; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation.">Вставляет заданную строку в заданную позицию форматируемой строки, возвращая последнюю позицию вставки и статус операции.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">Вставляемый объект <see cref="T:System.String" />.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">Отсчитываемая от нуля позиция для вставки входной строки в форматируемую строку.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">При успешном выполнении метода — последняя позиция, в которой был вставлен знак; в противном случае — первая позиция, вставка в которую закончилась неудачей. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции вставки. Выходной параметр.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если вставка прошла успешно; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is available for assignment.">Определяет, доступна ли заданная позиция для назначения.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">Отсчитываемая от нуля проверяемая позиция в маске.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable and has not been assigned to yet; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданная позиция форматируемой строки является редактируемой и ей еще не было назначено значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is editable.">Определяет, является заданная позиция редактируемой.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">Отсчитываемая от нуля проверяемая позиция в маске.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданная позиция форматируемой строки является редактируемой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid input character.">Определяет, является ли заданный знак допустимым для ввода знаком.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Проверяемое значение <see cref="T:System.Char" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid input value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданный знак содержит допустимое для ввода значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid mask character.">Определяет, является ли заданный знак допустимым знаком маски.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Проверяемое значение <see cref="T:System.Char" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid mask value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданный знак содержит допустимое значение маски; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid password character.">Определяет, является ли заданный знак допустимым знаком пароля.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Проверяемое значение <see cref="T:System.Char" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid password value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданный знак содержит допустимое значение пароля; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary vsli:raw="Removes the last assigned character from the formatted string.">Удаляет последний назначенный знак из форматируемой строки.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если знак успешно удален, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information.">Удаляет последний назначенный знак из форматируемой строки, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the character was actually removed. An output parameter.">Отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически удален знак. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если знак успешно удален, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the assigned character at the specified position from the formatted string.">Удаляет назначенный знак в заданной позиции форматируемой строки.</summary>
      <param name="position" vsli:raw="The zero-based position of the assigned character to remove.">Отсчитываемая от нуля позиция удаляемого назначенного знака.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если знак успешно удален, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string.">Удаляет назначенные знаки между заданными позициями форматируемой строки.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">Отсчитываемый от нуля индекс первого удаляемого назначенного знака.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">Отсчитываемый от нуля индекс последнего удаляемого назначенного знака.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если знак успешно удален, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information.">Удаляет назначенные знаки между заданными позициями форматируемой строки, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">Отсчитываемый от нуля индекс первого удаляемого назначенного знака.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">Отсчитываемый от нуля индекс последнего удаляемого назначенного знака.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter.">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой были удалены знаки; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если знак успешно удален, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value.">Заменяет один знак в заданной позиции или после нее на заданный знак.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Значение <see cref="T:System.Char" />, заменяющее существующее значение.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Отсчитываемая от нуля позиция, с которой начинается поиск первого редактируемого знака для замены.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если знак успешно заменен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information.">Заменяет один знак, начиная между заданными начальной и конечной позициями, на заданный знак, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Значение <see cref="T:System.Char" />, заменяющее существующее значение.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается замена.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">Отсчитываемая от нуля позиция в форматируемой строке, которой заканчивается замена.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически заменен последний знак; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции замены. Выходной параметр.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если знак успешно заменен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information.">Заменяет один знак, начиная с заданной позиции, на заданный знак, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Значение <see cref="T:System.Char" />, заменяющее существующее значение.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Отсчитываемая от нуля позиция, с которой начинается поиск первого редактируемого знака для замены.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически заменен последний знак; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции замены. Выходной параметр.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если знак успешно заменен, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string.">Заменяет диапазон редактируемых знаков, начиная с заданной позиции в заданной строке.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Значение <see cref="T:System.String" />, используемое для замены существующих редактируемых знаков.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Отсчитываемая от нуля позиция, с которой начинается поиск первого редактируемого знака для замены.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> при успешной замене всех знаков; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information.">Заменяет диапазон редактируемых знаков между заданными начальной и конечной позициями на заданную строку, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Значение <see cref="T:System.String" />, используемое для замены существующих редактируемых знаков.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается замена.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">Отсчитываемая от нуля позиция в форматируемой строке, которой заканчивается замена.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически заменен последний знак; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции замены. Выходной параметр.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> при успешной замене всех знаков; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information.">Заменяет диапазон редактируемых знаков, начиная с заданной позиции, на заданную строку, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Значение <see cref="T:System.String" />, используемое для замены существующих редактируемых знаков.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Отсчитываемая от нуля позиция, с которой начинается поиск первого редактируемого знака для замены.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически заменен последний знак; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции замены. Выходной параметр.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> при успешной замене всех знаков; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary vsli:raw="Sets the formatted string to the specified input string.">Определяет форматируемую строку для заданной входной строки.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">Значение <see cref="T:System.String" />, используемое для задания форматируемой строки.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> при успешной установке всех знаков; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information.">Устанавливает форматируемую строку равной заданной входной строке, а затем выводит позицию удаления и описательные сведения.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">Значение <see cref="T:System.String" />, используемое для задания форматируемой строки.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter.">При удачном удалении отсчитываемая от нуля позиция в форматируемой строке, в которой был фактически установлен последний знак; в противном случае — первая позиция, в которой выполнение операции закончилось неудачей. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the set operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции установки. Выходной параметр.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="input" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> при успешной установке всех знаков; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary vsli:raw="Returns the formatted string in a displayable form.">Возвращает форматируемую строку в отображаемом виде.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes prompts and mask literals.">Форматируемая строка <see cref="T:System.String" />, содержащая приглашения и литералы маски.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary vsli:raw="Returns the formatted string that includes all the assigned character values.">Возвращает форматируемую строку, содержащую назначенные значения знаков.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values.">Форматируемая строка <see cref="T:System.String" />, содержащая все назначенные значения знаков.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including password characters.">Возвращает форматируемую строку, при необходимости содержащую знаки пароля.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">Значение <see langword="true" />, чтобы вернуть фактические редактируемые знаки; в противном случае — значение <see langword="false" />, показывающее, что должно учитываться свойство <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes literals, prompts, and optionally password characters.">Форматируемая строка <see cref="T:System.String" />, содержащая литералы, приглашения и, при необходимости, знаки пароля.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including prompt and literal characters.">Возвращает форматируемую строку, при необходимости включая знаки приглашения и литералы.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы включить знаки приглашения в возвращаемую строку; в противном случае — значение <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы включить литералы в возвращаемую строку; в противном случае — значение <see langword="false" />.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values and optionally includes literals and prompts.">Форматируемая строка <see cref="T:System.String" />, содержащая все назначенные значения знаков и, при необходимости, литералы и приглашения.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt, literal, and password characters.">Возвращает подстроку форматируемой строки, при необходимости включая знаки приглашения, литералы и знаки пароля.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">Значение <see langword="true" />, чтобы вернуть фактические редактируемые знаки; в противном случае — значение <see langword="false" />, показывающее, что должно учитываться свойство <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы включить знаки приглашения в возвращаемую строку; в противном случае — значение <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы возвратить литералы в возвращенной строке; в противном случае — значение <see langword="false" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается вывод.</param>
      <param name="length" vsli:raw="The number of characters to return.">Число возвращаемых символов.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">В случае успеха подстрока форматируемой строки <see cref="T:System.String" />, содержащая все назначенные значения знаков и, при необходимости, литералы, знаки приглашения и знаки пароля; в противном случае — строка <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt and literal characters.">Возвращает подстроку форматируемой строки, при необходимости включая знаки приглашения и литералы.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы включить знаки приглашения в возвращаемую строку; в противном случае — значение <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы включить литералы в возвращаемую строку; в противном случае — значение <see langword="false" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается вывод.</param>
      <param name="length" vsli:raw="The number of characters to return.">Число возвращаемых символов.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals and prompts; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">В случае успеха подстрока форматируемой строки <see cref="T:System.String" />, содержащая все назначенные значения знаков и, при необходимости, литералы и приглашения; в противном случае — строка <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including password characters.">Возвращает подстроку форматируемой строки, при необходимости содержащую знаки пароля.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">Значение <see langword="true" />, чтобы вернуть фактические редактируемые знаки; в противном случае — значение <see langword="false" />, показывающее, что должно учитываться свойство <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается вывод.</param>
      <param name="length" vsli:raw="The number of characters to return.">Число возвращаемых символов.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes literals, prompts, and optionally password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">В случае успеха подстрока форматируемой строки <see cref="T:System.String" />, содержащая литералы, приглашения и, при необходимости, знаки пароля; в противном случае — строка <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string.">Возвращает подстроку форматируемой строки.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Отсчитываемая от нуля позиция в форматируемой строке, с которой начинается вывод.</param>
      <param name="length" vsli:raw="The number of characters to return.">Число возвращаемых символов.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">В случае успеха подстрока форматируемой строки <see cref="T:System.String" />, содержащая все назначенные значения знаков; в противном случае — строка <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified character could be set successfully at the specified position.">Проверяет, может ли заданный знак быть успешно установлен в заданной позиции.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Проверяемое значение <see cref="T:System.Char" />.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">Позиция в маске, для повторной проверки введенного знака.</param>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции. Выходной параметр.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character is valid for the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданный параметр допустим для заданной позиции, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary vsli:raw="Tests whether the specified character would be escaped at the specified position.">Проверяет, будет ли заданный знак экранироваться в заданной позиции.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Проверяемое значение <see cref="T:System.Char" />.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">Позиция в маске, для повторной проверки введенного знака.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character would be escaped at the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданный знак в заданной позиции будет экранирован, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary vsli:raw="Tests whether the specified string could be set successfully.">Проверяет, может ли заданная строка быть успешно установлена.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">Проверяемое значение <see cref="T:System.String" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданная строка представляет допустимый ввод, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified string could be set successfully, and then outputs position and descriptive information.">Проверяет, может ли заданная строка быть успешно установлена, а затем возвращает позицию и описательные сведения.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">Проверяемое значение <see cref="T:System.String" />.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter.">В случае успеха — отсчитываемая от нуля позиция последнего фактически проверенного знака; в противном случае — первая позиция, в которой проверка закончилась неудачей. Выходной параметр.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the test operation. An output parameter.">Объект <see cref="T:System.ComponentModel.MaskedTextResultHint" />, кратко описывающий результат операции проверки. Выходной параметр.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданная строка представляет допустимый ввод, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary vsli:raw="Gets a value indicating whether the prompt character should be treated as a valid input character or not.">Возвращает значение, показывающее, следует ли рассматривать символ приглашения как допустимый знак ввода или нет.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the user can enter &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt; into the control; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если пользователь может ввести любой символ <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> в элемент управления; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary vsli:raw="Gets a value indicating whether the mask accepts characters outside of the ASCII character set.">Возвращает значение, показывающее, принимает ли маска знаки, не входящие в набор знаков ASCII.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if only ASCII is accepted; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; can accept any arbitrary Unicode character. The default is &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если допустимы только знаки ASCII; значение <see langword="false" />, если поставщик <see cref="T:System.ComponentModel.MaskedTextProvider" /> может принимать любой знак Юникода. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions that have already been successfully assigned an input value.">Возвращает количество позиций редактируемых знаков, которым было успешно назначено введенное значение.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions in the input mask that have already been assigned a character value in the formatted string.">Значение <see cref="T:System.Int32" /> содержит количество редактируемых позиций знаков в маске ввода, которым значение в форматированной строке уже назначено.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions in the input mask that have not yet been assigned an input value.">Возвращает количество редактируемых позиций знаков в маске ввода, которым еще не назначено вводимое значение.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions that not yet been assigned a character value.">Значение <see cref="T:System.Int32" />, содержащее количество позиций редактируемых знаков, которым еще не было назначено символьное значение.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary vsli:raw="Gets the culture that determines the value of the localizable separators and placeholders in the input mask.">Возвращает язык и региональные параметры, определяющие значения локализуемых разделителей в маске ввода.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; containing the culture information associated with the input mask.">Объект <see cref="T:System.Globalization.CultureInfo" />, содержащий сведения о языке и региональных параметрах, связанных с маской ввода.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary vsli:raw="Gets the default password character used obscure user input.">Возвращает знак пароля по умолчанию, используемый, чтобы сделать невидимым ввод пользователя.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that represents the default password character.">Знак <see cref="T:System.Char" />, представляющий знак пароля по умолчанию.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary vsli:raw="Gets the number of editable positions in the formatted string.">Возвращает количество редактируемых позиций в форматируемой строке.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable positions in the formatted string.">Значение <see cref="T:System.Int32" />, содержащее количество редактируемых позиций в форматируемой строке.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary vsli:raw="Gets a newly created enumerator for the editable positions in the formatted string.">Возвращает вновь созданный перечислитель для редактируемых позиций в форматируемой строке.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that supports enumeration over the editable positions in the formatted string.">Перечислитель <see cref="T:System.Collections.IEnumerator" />, поддерживающий перечисление редактируемых позиций в форматируемой строке.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary vsli:raw="Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.">Получает или задает значение, показывающее, должны ли в форматируемую строку включаться литералы.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if literals are included; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если включаются литералы; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary vsli:raw="Gets or sets a value indicating whether &lt;see cref=&quot;P:System.Windows.Forms.MaskedTextBox.PromptChar&quot; /&gt; is used to represent the absence of user input when displaying the formatted string.">Получает или задает значение, показывающее, используется ли знак <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> для представления отсутствия пользовательского ввода при отображении форматируемой строки.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character is used to represent the positions where no user input was provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если знак приглашения используется для представления позиций, в которых отсутствует пользовательский ввод; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary vsli:raw="Gets the upper bound of the range of invalid indexes.">Возвращает верхнюю границу диапазона неправильных индексов.</summary>
      <returns vsli:raw="A value representing the largest invalid index, as determined by the provider implementation. For example, if the lowest valid index is 0, this property will return -1.">Значение, представляющее максимальный неправильный индекс, определяемый реализацией поставщика. Например, если минимальный допустимый индекс равен 0, это свойство возвращает -1.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary vsli:raw="Gets or sets a value that determines whether password protection should be applied to the formatted string.">Получает или задает значение, определяющее, должна ли к форматируемой строке применяться защита паролем.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input string is to be treated as a password string; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если входная строка должна рассматриваться как строка пароля, в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified position in the formatted string.">Возвращает элемент в заданной позиции форматируемой строки.</summary>
      <param name="index" vsli:raw="A zero-based index of the element to retrieve.">Отсчитываемый от нуля индекс извлекаемого элемента.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero or greater than or equal to the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.Length&quot; /&gt; of the mask.">Параметр <paramref name="index" /> меньше нуля либо больше или равен значению свойства <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> маски.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; at the specified position in the formatted string.">Знак <see cref="T:System.Char" /> в заданной позиции форматируемой строки.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary vsli:raw="Gets the index in the mask of the rightmost input character that has been assigned to the mask.">Возвращает индекс в маске для крайнего правого введенного знака, назначенного маске.</summary>
      <returns vsli:raw="If at least one input character has been assigned to the mask, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the index of rightmost assigned position; otherwise, if no position has been assigned, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Если хотя бы одни введенный знак назначен маске — значение <see cref="T:System.Int32" />, содержащее индекс в маске для крайней правой назначенной позиции знака; в противном случае, если позиция не назначена — свойство <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary vsli:raw="Gets the length of the mask, absent any mask modifier characters.">Возвращает длину маски, кроме знаков-модификаторов маски.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of positions in the mask, excluding characters that modify mask input.">Значение <see cref="T:System.Int32" />, содержащее количество позиций в маске за исключением знаков, изменяющих ввод для маски.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary vsli:raw="Gets the input mask.">Возвращаем маску ввода.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the full mask.">Строка <see cref="T:System.String" />, содержащая полную маску.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary vsli:raw="Gets a value indicating whether all required inputs have been entered into the formatted string.">Возвращает значение, показывающее, были ли введены в форматируемую строку все необходимые знаки.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required input has been entered into the mask; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в маске ведены все необходимые знаки; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary vsli:raw="Gets a value indicating whether all required and optional inputs have been entered into the formatted string.">Возвращает значение, показывающее, были ли введены в форматируемую строку все обязательные и необязательные знаки.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required and optional inputs have been entered; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если были введены все обязательные необходимые и необязательные знаки; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary vsli:raw="Gets or sets the character to be substituted for the actual input characters.">Получает или задает знак, используемый для подстановки фактически введенных знаков.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The password character specified when setting this property is the same as the current prompt character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt;. The two are required to be different.">Знак пароля, заданный при определении этого свойства, совпадает с текущим знаком приглашения, <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />. Эти два знака должны отличаться.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">Знак, заданный при определении этого свойства, не является допустимым знаком пароля, определенным методом <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value used as the password character.">Значение <see cref="T:System.Char" />, используемое в качестве знака пароля.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary vsli:raw="Gets or sets the character used to represent the absence of user input for all available edit positions.">Получает или задает знак, используемый для представления отсутствия пользовательского ввода для всех доступных позиций редактирования.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The prompt character specified when setting this property is the same as the current password character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt;. The two are required to be different.">Знак приглашения, заданный при определении этого свойства, совпадает с текущим знаком пароля, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />. Эти два знака должны отличаться.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">Знак, заданный при определении этого свойства, не является допустимым знаком пароля, определенным методом <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
      <returns vsli:raw="The character used to prompt the user for input. The default is an underscore (_).">Знак, предлагающий пользователю ввести данные. По умолчанию это знак подчеркивания (_).</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary vsli:raw="Gets or sets a value that determines how an input character that matches the prompt character should be handled.">Возвращает или задает значение, определяющее способ обработки введенного символа, совпадающего с символом приглашения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the prompt character is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если ввод знака приглашения вызывает сброс текущей редактируемой позиции в маске; в противном случае — значение <see langword="false" />, чтобы показать, что знак приглашения должен обрабатываться как обычный введенный знак. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary vsli:raw="Gets or sets a value that determines how a space input character should be handled.">Возвращает или задает значение, определяющее способ обработки введенного знака пробела.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the space input character causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that it is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если введенный знак пробела вызывает сброс текущей редактируемой позиции в маске, в противном случае — значение <see langword="false" />, показывающее, что этот знак должен обрабатываться как обычный введенный знак. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary vsli:raw="Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.">Получает или задает значение, показывающее можно ли использовать для переопределения позиций литералов те же самые буквенные значения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow literals to be added back; otherwise, &lt;see langword=&quot;false&quot; /&gt; to not allow the user to overwrite literal characters. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, чтобы позволить добавлять литералы; в противном случае — значение <see langword="false" />, не позволяющее пользователю переопределять литералы. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary vsli:raw="Specifies values that succinctly describe the results of a masked text parsing operation.">Определяет значения, которые кратко описывают результаты операции разбора текста с маской.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not alphanumeric. .">Не удалось выполнить операцию. Обнаружен введенный знак, не являющийся алфавитно-цифровым. .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not a member of the ASCII character set.">Не удалось выполнить операцию. Обнаружен введенный знак, не являющийся элементом набора знаков ASCII.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary vsli:raw="Success. The operation succeeded because a literal, prompt or space character was an escaped character. For more information about escaped characters, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)&quot; /&gt; method.">Выполнено. Операция завершилась успешно, так как экранированным знаком является знак литерала, приглашения или пробела. Дополнительные сведения об экранированных знаках см. в описании метода <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a digit.">Не удалось выполнить операцию. Обнаружен введенный знак, не являющийся цифрой.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary vsli:raw="Operation did not succeed. The program encountered an input character that was not valid. For more information about characters that are not valid, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)&quot; /&gt; method.">Не удалось выполнить операцию. Программа обнаружила недопустимый введенный символ. Дополнительные сведения о знаках ,не являющихся допустимыми, см. в описании метода <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a letter.">Не удалось выполнить операцию. Обнаружен введенный знак, не являющийся буквой.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed; therefore, no side effect was produced.">Выполнено. Основная операция не была выполнена, так как она не понадобилась, поэтому побочные эффекты отсутствуют.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary vsli:raw="Operation did not succeed. The current position in the formatted string is a literal character.">Не удалось выполнить операцию. Текущая позиция в форматируемой строке является литералом.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary vsli:raw="Operation did not succeed. The specified position is not in the range of the target string; typically it is either less than zero or greater then the length of the target string.">Не удалось выполнить операцию. Заданная позиция находится вне диапазона конечной строки. Обычно это происходит, если это значение меньше нуля или больше длины конечной строки.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary vsli:raw="Operation did not succeed. The prompt character is not valid at input, perhaps because the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">Не удалось выполнить операцию. Знак приглашения нельзя использовать для ввода, возможно, потому что свойство <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> равно <see langword="false" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed, but the method produced a side effect. For example, the &lt;see cref=&quot;Overload:System.ComponentModel.MaskedTextProvider.RemoveAt&quot; /&gt; method can delete an unassigned edit position, which causes left-shifting of subsequent characters in the formatted string.">Выполнено. Основная операция не была выполнена, так как она не понадобилась, но метод вызвал побочные эффекты. Например, метод <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> может удалить неназначенную редактируемую позицию, что приведет к сдвигу последующих знаков форматируемой строки влево.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a signed digit.">Не удалось выполнить операцию. Обнаружен введенный знак, не являющийся цифрой со знаком.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary vsli:raw="Success. The primary operation succeeded.">Успех. Основная операция успешно завершена.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary vsli:raw="Operation did not succeed. There were not enough edit positions available to fulfill the request.">Не удалось выполнить операцию. Недостаточно редактируемых позиций для выполнения запроса.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary vsli:raw="Unknown. The result of the operation could not be determined.">Нет данных. Результат операции не удалось определить.</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary vsli:raw="Represents a class member, such as a property or event. This is an abstract base class.">Представляет член класса, например свойство или событие. Этот класс является абстрактным базовым классом.</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MemberDescriptor" /> указанным значением <see cref="T:System.ComponentModel.MemberDescriptor" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the member and its attributes.">Объект <see cref="T:System.ComponentModel.MemberDescriptor" />, который содержит имя члена и его атрибуты.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the old &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MemberDescriptor" />, используя имя в заданном дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" /> и атрибуты как в старом дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" />, так и в массиве <see cref="T:System.Attribute" /> .</summary>
      <param name="oldMemberDescriptor" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">Объект <see cref="T:System.ComponentModel.MemberDescriptor" />, который содержит имя члена и его атрибуты.</param>
      <param name="newAttributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects with the attributes you want to add to the member.">Массив объектов <see cref="T:System.Attribute" /> с атрибутами, которые нужно добавить для члена.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MemberDescriptor" /> с указанным именем члена.</summary>
      <param name="name" vsli:raw="The name of the member.">Имя элемента.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">Имя представляет собой пустую строку ("") или <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member and an array of attributes.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MemberDescriptor" />, используя указанное имя члена и массив атрибутов.</summary>
      <param name="name" vsli:raw="The name of the member.">Имя элемента.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the member attributes.">Массив типа <see cref="T:System.Attribute" />, который содержит атрибуты члена.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">Имя представляет собой пустую строку ("") или <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary vsli:raw="Creates a collection of attributes using the array of attributes passed to the constructor.">Создает коллекцию атрибутов, используя массив атрибутов, переданный в конструктор.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that contains the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt; attributes.">Новый объект <see cref="T:System.ComponentModel.AttributeCollection" />, содержащий атрибуты <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /></returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this instance to the given object to see if they are equivalent.">Сравнивает этот экземпляр с заданным объектом, проверяя, являются ли они эквивалентными.</summary>
      <param name="obj" vsli:raw="The object to compare to the current instance.">Объект, сравниваемый с текущим экземпляром.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объекты эквивалентны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="When overridden in a derived class, adds the attributes of the inheriting class to the specified list of attributes in the parent class.">При переопределении в производном классе добавляет атрибуты наследуемого класса к указанному списку атрибутов в родительском классе.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">Интерфейс <see cref="T:System.Collections.IList" />, содержащий список атрибутов в родительском классе. Первоначально он пуст.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary vsli:raw="Finds the given method through reflection, searching only for public methods.">Находит данный метод, используя отражение, выполняя поиск только для открытых методов.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">Компонент, содержащий метод.</param>
      <param name="name" vsli:raw="The name of the method to find.">Имя искомого метода.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">Массив параметров для метода, используемый для выбора между перегруженными методами.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">Тип, возвращаемый для метода.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод, или <see langword="null" />, если метод не найден.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Finds the given method through reflection, with an option to search only public methods.">Находит данный метод, используя отражение, с возможностью поиска только открытых методов.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">Компонент, содержащий метод.</param>
      <param name="name" vsli:raw="The name of the method to find.">Имя искомого метода.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">Массив параметров для метода, используемый для выбора между перегруженными методами.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">Тип, возвращаемый для метода.</param>
      <param name="publicOnly" vsli:raw="Whether to restrict search to public methods.">Указывает, ограничен ли поиск только открытыми методами.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод, или <see langword="null" />, если метод не найден.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.MemberDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="Retrieves the object that should be used during invocation of members.">Возвращает объект, который должен использоваться при вызове членов.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">Тип <see cref="T:System.Type" /> адресата вызова.</param>
      <param name="instance" vsli:raw="The potential invocation target.">Возможный адресат вызова.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="type" /> или <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The object to be used during member invocations.">Объект, используемый при вызове членов.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary vsli:raw="Gets the component on which to invoke a method.">Возвращает компонент, для которого вызывается метод.</summary>
      <param name="componentClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of component this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; is bound to. For example, if this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; describes a property, this parameter should be the class that the property is declared on.">Объект <see cref="T:System.Type" />, представляющий тип компонента, с которым связан этот дескриптор <see cref="T:System.ComponentModel.MemberDescriptor" />. Например, если этот дескриптор <see cref="T:System.ComponentModel.MemberDescriptor" /> описывает свойство, данный параметр должен быть классом, для которого объявлено это свойство.</param>
      <param name="component" vsli:raw="An instance of the object to call.">Экземпляр вызываемого объекта.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentClass&quot; /&gt; or &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="componentClass" /> или <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An instance of the component to invoke. This method returns a visual designer when the property is attached to a visual designer.">Экземпляр вызываемого компонента. Этот метод возвращает визуальный конструктор, если свойство связано с визуальным конструктором.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary vsli:raw="Gets a component site for the given component.">Возвращает узел компонента для заданного компонента.</summary>
      <param name="component" vsli:raw="The component for which you want to find a site.">Компонент, узел для которого нужно найти.</param>
      <returns vsli:raw="The site of the component, or &lt;see langword=&quot;null&quot; /&gt; if a site does not exist.">узел компонента или значение <see langword="null" />, если узел не существует.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary vsli:raw="Gets or sets an array of attributes.">Возвращает или задает массив атрибутов.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the attributes of this member.">Массив типа <see cref="T:System.Attribute" />, который содержит атрибуты этого члена.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary vsli:raw="Gets the collection of attributes for this member.">Возвращает коллекцию атрибутов для этого члена.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that provides the attributes for this member, or an empty collection if there are no attributes in the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt;.">Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, содержащая атрибуты этого члена, или пустая коллекция, если атрибуты в массиве <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> отсутствуют.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary vsli:raw="Gets the name of the category to which the member belongs, as specified in the &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;.">Возвращает имя категории, к которой принадлежит член, как это указано в объекте <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns vsli:raw="The name of the category to which the member belongs. If there is no &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;, the category name is set to the default category, &lt;see langword=&quot;Misc&quot; /&gt;.">Имя категории, к которой принадлежит член. Если атрибут <see cref="T:System.ComponentModel.CategoryAttribute" /> отсутствует, имя категории устанавливается в соответствии с категорией по умолчанию, <see langword="Misc" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary vsli:raw="Gets the description of the member, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;.">Возвращает описание члена, как указано атрибутом <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns vsli:raw="The description of the member. If there is no &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;, the property value is set to the default, which is an empty string (&quot;&quot;).">Описание члена. Если атрибут <see cref="T:System.ComponentModel.DescriptionAttribute" /> отсутствует, для свойства устанавливается значение по умолчанию, равное пустой строке ("").</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary vsli:raw="Gets whether this member should be set only at design time, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;.">Возвращает значение, показывающее, должен ли этот член устанавливаться только во время разработки, как указано атрибутом <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this member should be set only at design time; &lt;see langword=&quot;false&quot; /&gt; if the member can be set during run time.">Значение <see langword="true" />, если член должен устанавливаться только во время разработки; значение <see langword="false" />, если возможна установка члена во время выполнения.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary vsli:raw="Gets the name that can be displayed in a window, such as a Properties window.">Возвращает имя, которое может быть отражено в окне, например в окне "Свойства".</summary>
      <returns vsli:raw="The name to display for the member.">Имя, отображаемое для члена.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary vsli:raw="Gets a value indicating whether the member is browsable, as specified in the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;.">Возвращает значение, указывающее, является ли член отображаемым в обозревателе, как определено в атрибуте <see cref="T:System.ComponentModel.BrowsableAttribute" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is browsable; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If there is no &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;, the property value is set to the default, which is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если член является отображаемым; в противном случае — значение <see langword="false" />. Если объект <see cref="T:System.ComponentModel.BrowsableAttribute" /> отсутствует, устанавливается значение свойства по умолчанию, равное <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary vsli:raw="Gets the name of the member.">Возвращает имя члена.</summary>
      <returns vsli:raw="The name of the member.">Имя элемента.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary vsli:raw="Gets the hash code for the name of the member, as specified in &lt;see cref=&quot;M:System.String.GetHashCode&quot; /&gt;.">Возвращает хэш-код для имени члена, как определено в методе <see cref="M:System.String.GetHashCode" />.</summary>
      <returns vsli:raw="The hash code for the name of the member.">Хэш-код для имени члена.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary vsli:raw="Provides a type converter to convert multiline strings to a simple string.">Предоставляет преобразователь типов для преобразования многострочных строк в простую строку.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MultilineStringConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.MultilineStringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Преобразует заданный объект значения в указанный тип с использованием указанного контекста и сведений о культуре.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используются текущие настройки языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Тип <see cref="T:System.Type" />, в который преобразуется значение параметра.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the &lt;paramref name=&quot;value&quot; /&gt; parameter, using the specified context and attributes.">Возвращает коллекцию свойств для типа массива, заданного параметром <paramref name="value" />, используя заданные контекст и атрибуты.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Объект класса <see cref="T:System.Object" />, задающий тип массива, для которого нужно получить свойства.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Массив типа <see cref="T:System.Attribute" />, используемый в качестве фильтра.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или значение <see langword="null" />, если свойства отсутствуют.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Возвращает значение, показывающее, поддерживает ли данный объект свойства, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.ComponentModel.MultilineStringConverter.GetProperties&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если для поиска свойств этого объекта следует вызвать метод <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" />, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary vsli:raw="Provides the base implementation for the &lt;see cref=&quot;T:System.ComponentModel.INestedContainer&quot; /&gt; interface, which enables containers to have an owning component.">Предоставляет базовую реализацию интерфейса <see cref="T:System.ComponentModel.INestedContainer" />, позволяющую использовать компонент-владелец для контейнеров.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NestedContainer&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.NestedContainer" />.</summary>
      <param name="owner" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">Интерфейс <see cref="T:System.ComponentModel.IComponent" />, являющийся владельцем этого вложенного контейнера.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site for the component within the container.">Создает внутри контейнера узел для компонента.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">Компонент <see cref="T:System.ComponentModel.IComponent" />, для которого создается узел.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">Имя, которое нужно присвоить параметру <paramref name="component" />, или <see langword="null" />, чтобы опустить назначение имени.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt;.">Вновь созданный <see cref="T:System.ComponentModel.ISite" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the resources used by the nested container.">Освобождает ресурсы, используемые вложенным контейнером.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">Получает объект службы указанного типа, если он доступен.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">Тип <see cref="T:System.Type" /> извлекаемой службы.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that implements the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">Объект <see cref="T:System.Object" />, реализующий запрошенную службу, или значение <see langword="null" />, если служба не может быть разрешена.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for this nested container.">Возвращает компонент-владелец для этого вложенного контейнера.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">Интерфейс <see cref="T:System.ComponentModel.IComponent" />, являющийся владельцем этого вложенного контейнера.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary vsli:raw="Gets the name of the owning component.">Возвращает имя компонента-владельца.</summary>
      <returns vsli:raw="The name of the owning component.">Имя компонента-владельца.</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary vsli:raw="Provides automatic conversion between a nullable type and its underlying primitive type.">Обеспечивает автоматическое преобразование между типом, допускающим значение null, и его базовым типом-примитивом.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NullableConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.NullableConverter" />.</summary>
      <param name="type" vsli:raw="The specified nullable type.">Заданный обнуляемый тип.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a nullable type.">Элемент <paramref name="type" /> не является обнуляемым типом.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">Возвращает значение, указывающее, может ли этот преобразователь выполнить преобразование объекта заданного типа в тип этого преобразователя, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Объект <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Возвращает значение, показывающее, может ли этот преобразователь преобразовать объект в заданный тип с помощью указанного контекста.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Класс <see cref="T:System.Type" />, представляющий тип, в который нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Преобразует заданный объект в тип данного преобразователя с использованием указанного контекста и сведений о культуре.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый в качестве текущей культуры.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Преобразует заданный объект значения в указанный тип с использованием указанного контекста и сведений о культуре.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый в качестве текущей культуры.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Тип <see cref="T:System.Type" />, в который преобразуется значение параметра.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">Создает экземпляр типа, с которым связан этот <see cref="T:System.ComponentModel.TypeConverter" />, используя заданный контекст с учетом набора значений свойств для объекта.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">
        <see cref="T:System.Collections.IDictionary" /> новых значений свойств.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" />, представляющий данный <see cref="T:System.Collections.IDictionary" />, или <see langword="null" />, если объект не может быть создан. Этот метод всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">Возвращает значение, указывающее, требуется ли для изменения значения в этом объекте вызов <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />, чтобы создать новое значение с помощью указанного контекста.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если для изменения свойства в этом объекте требуется вызов <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />, чтобы создать новое значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">Возвращает коллекцию свойств для типа массива, заданного параметром value, используя заданные контекст и атрибуты.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Объект класса <see cref="T:System.Object" />, задающий тип массива, для которого нужно получить свойства.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Массив типа <see cref="T:System.Attribute" />, используемый в качестве фильтра.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или значение <see langword="null" />, если свойства отсутствуют.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Возвращает значение, показывающее, поддерживает ли данный объект свойства, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если для поиска свойств этого объекта следует вызвать метод <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">Возвращает коллекцию стандартных значений для типа данных, для которого предназначен этот преобразователь типов при предоставлении с контекстом формата.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата, который можно использовать для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Этот параметр или свойства этого параметра могут быть <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Класс <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащий стандартный набор допустимых значений или значение <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;Overload:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">Используя заданный контекст, возвращает значение, показывающее, является ли исчерпывающим списком возможных значений коллекция стандартных значений, возвращаемая методом <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">Имеет значение <see langword="true" />, если объект класса <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенный методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />, является исчерпывающим списком возможных значений, значение <see langword="false" />, если возможны другие значения.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">Получает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка, используя заданную контекстную информацию.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если метод <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> должен быть вызван для поиска общего набора значений, поддерживаемых объектом, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">Возвращает значение, показывающее, допустим ли для этого типа и указанного контекста данный объект значения.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">Объект <see cref="T:System.Object" /> для проверки на допустимость.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанное значение является допустимым для данного объекта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary vsli:raw="Gets the nullable type.">Возвращает обнуляемый тип.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the nullable type.">Тип <see cref="T:System.Type" />, представляющий обнуляемый тип.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary vsli:raw="Gets the underlying type.">Возвращает базовый тип.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the underlying type.">Тип <see cref="T:System.Type" />, представляющий базовый тип.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary vsli:raw="Gets the underlying type converter.">Возвращает преобразователь базового типа.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that represents the underlying type converter.">Преобразователь <see cref="T:System.ComponentModel.TypeConverter" />, представляющий преобразователь базового типа.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary vsli:raw="Indicates that an object's text representation is obscured by characters such as asterisks. This class cannot be inherited.">Указывает, что текстовое представление объекта скрыто символами, например звездочками. Этот класс не наследуется.</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Определяет значение по умолчанию для атрибута <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary vsli:raw="Specifies that a text property is not used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">Определяет, что текстовое свойство не используется в качестве пароля. Это статическое (<see langword="static" />, а в Visual Basic <see langword="Shared" />) поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary vsli:raw="Specifies that a text property is used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">Определяет, что текстовое свойство используется в качестве пароля. Это статическое (<see langword="static" />, а в Visual Basic <see langword="Shared" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class, optionally showing password text.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />, при необходимости показывая текст пароля.</summary>
      <param name="password" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что свойство должно показываться как текст пароля; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; instances are equal.">Определяет, равны ли два экземпляра <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />, с которым сравнивается текущий объект <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанный объект <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> равен текущему объекту <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns an indication whether the value of this instance is the default value.">Возвращает признак, показывающий, является ли этот экземпляр значением по умолчанию.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр является атрибутом по умолчанию для класса; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary vsli:raw="Gets a value indicating if the property for which the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is defined should be shown as password text.">Возвращает значение, показывающее, должно ли свойство, для которого определен атрибут <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />, показываться как текст пароля.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство должно показываться как текст пароля; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary vsli:raw="Provides an abstraction of a property on a class.">Предоставляет краткое описание свойства в классе.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyDescriptor" />, используя имя и атрибуты заданного объекта <see cref="T:System.ComponentModel.MemberDescriptor" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the property and its attributes.">Дескриптор <see cref="T:System.ComponentModel.MemberDescriptor" />, содержащий имя свойства и его атрибуты.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyDescriptor" />, используя имя в заданном дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" /> и атрибуты как в дескрипторе <see cref="T:System.ComponentModel.MemberDescriptor" />, так и в массиве <see cref="T:System.Attribute" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; containing the name of the member and its attributes.">Класс <see cref="T:System.ComponentModel.MemberDescriptor" />, содержащий имя члена и его атрибуты.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array containing the attributes you want to associate with the property.">Массив <see cref="T:System.Attribute" />, содержащий атрибуты, которые нужно связать со свойством.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the specified name and attributes.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyDescriptor" />, используя заданные имя и атрибуты.</summary>
      <param name="name" vsli:raw="The name of the property.">Имя свойства.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the property attributes.">Массив типа <see cref="T:System.Attribute" />, содержащий атрибуты свойства.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">Позволяет уведомить другие объекты об изменении этого свойства.</summary>
      <param name="component" vsli:raw="The component to add the handler for.">Компонент, для которого нужно добавить обработчик.</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">Делегат, добавляемый в качестве прослушивателя.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="component" /> или <paramref name="handler" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, returns whether resetting an object changes its value.">При переопределении в производном классе возвращает значение, показывающее, изменяется ли значение объекта при его сбросе.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">Компонент для проверки на возможность сброса.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes its value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если сброс компонента изменяет его значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary vsli:raw="Creates an instance of the specified type.">Создает экземпляр заданного типа.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Объект <see cref="T:System.Type" />, представляющий создаваемый тип.</param>
      <returns vsli:raw="A new instance of the type.">Новый экземпляр типа.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this to another object to see if they are equivalent.">Сравнивает данный объект с другим, проверяя их эквивалентность.</summary>
      <param name="obj" vsli:raw="The object to compare to this &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Объект, который требуется сравнить с данным объектом <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значения эквивалентны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="Adds the attributes of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the specified list of attributes in the parent class.">Добавляет атрибуты дескриптора <see cref="T:System.ComponentModel.PropertyDescriptor" /> в заданный список атрибутов родительского класса.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">Интерфейс <see cref="T:System.Collections.IList" />, содержащий список атрибутов в родительском классе. Первоначально он пуст.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt;.">По умолчанию возвращается значение <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <returns vsli:raw="A collection of property descriptor.">Коллекция дескриптора свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; using a specified array of attributes as a filter.">Возвращает <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, используя заданный массив атрибутов как фильтр.</summary>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, соответствующими заданным атрибутам.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object.">Возвращает <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> для данного объекта.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">Компонент, для которого требуется получить свойства.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами данного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object using a specified array of attributes as a filter.">Возвращает коллекцию <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> для данного объекта, используя заданный массив атрибутов как фильтр.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">Компонент, для которого требуется получить свойства.</param>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, соответствующими заданным атрибутам для заданного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Gets an editor of the specified type.">Возвращает редактор заданного типа.</summary>
      <param name="editorBaseType" vsli:raw="The base type of editor, which is used to differentiate between multiple editors that a property supports.">Базовый тип редактора, применяемый, чтобы различать многочисленные редакторы, которые поддерживает свойство.</param>
      <returns vsli:raw="An instance of the requested editor type, or &lt;see langword=&quot;null&quot; /&gt; if an editor cannot be found.">Экземпляр запрошенного типа редактора или <see langword="null" />, если редактор не найден.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">Возвращает хэш-код для этого объекта.</summary>
      <returns vsli:raw="The hash code for this object.">Хэш-код для этого объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="This method returns the object that should be used during invocation of members.">Этот метод возвращает объект, которой должен использоваться при вызове членов.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">Тип <see cref="T:System.Type" /> адресата вызова.</param>
      <param name="instance" vsli:raw="The potential invocation target.">Возможный адресат вызова.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; that should be used during invocation of members.">Объект <see cref="T:System.Object" />, который должен использоваться при вызове членов.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary vsli:raw="Returns a type using its name.">Возвращает тип, используя его имя.</summary>
      <param name="typeName" vsli:raw="The assembly-qualified name of the type to retrieve.">Имя возвращаемого типа с указанием сборки.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that matches the given type name, or &lt;see langword=&quot;null&quot; /&gt; if a match cannot be found.">Тип <see cref="T:System.Type" />, совпадающий с данным именем типа, или <see langword="null" />, если совпадение не найдено.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, gets the current value of the property on a component.">В случае переопределения в производном классе, возвращает текущее значение свойства компонента.</summary>
      <param name="component" vsli:raw="The component with the property for which to retrieve the value.">Компонент с свойством, для которого нужно получить значение.</param>
      <returns vsli:raw="The value of a property for a given component.">Значение свойства для данного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary vsli:raw="Retrieves the current set of &lt;c&gt;ValueChanged&lt;/c&gt; event handlers for a specific component.">Возвращает текущий набор обработчиков событий <c>ValueChanged</c> для конкретного компонента.</summary>
      <param name="component" vsli:raw="The component for which to retrieve event handlers.">Компонент, для которого возвращаются обработчики событий.</param>
      <returns vsli:raw="A combined multicast event handler, or &lt;see langword=&quot;null&quot; /&gt; if no event handlers are currently assigned to &lt;paramref name=&quot;component&quot; /&gt;.">Объединенный многоадресный обработчик событий, или значение <see langword="null" />, если для компонента <paramref name="component" /> в данный момент не назначено ни одного обработчика событий.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary vsli:raw="Raises the &lt;c&gt;ValueChanged&lt;/c&gt; event that you implemented.">Вызывает реализованное вами событие <c>ValueChanged</c>.</summary>
      <param name="component" vsli:raw="The object that raises the event.">Объект, вызывающий событие.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">Позволяет уведомить другие объекты об изменении этого свойства.</summary>
      <param name="component" vsli:raw="The component to remove the handler for.">Компонент, для которого нужно удалить обработчик.</param>
      <param name="handler" vsli:raw="The delegate to remove as a listener.">Делегат, удаляемый как прослушиватель.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="component" /> или <paramref name="handler" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, resets the value for this property of the component to the default value.">В случае переопределения в производном классе, сбрасывает значение для этого свойства компонента в значение по умолчанию.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be reset to the default value.">Компонент со значением свойства, которое нужно сбросить в значение по умолчанию.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary vsli:raw="When overridden in a derived class, sets the value of the component to a different value.">При переопределении в производном классе устанавливает другое значение для компонента.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be set.">Компонент со значением свойства, которое нужно установить.</param>
      <param name="value" vsli:raw="The new value.">Новое значение.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.">При переопределении в производном классе определяет значение, показывающее, нужно ли сохранить данное значение свойства.</summary>
      <param name="component" vsli:raw="The component with the property to be examined for persistence.">Компонент со свойством, возможность сохранения которого нужно проверить.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be persisted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство следует сохранить; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the component this property is bound to.">При переопределении в производном классе возвращает тип компонента, с которым связано это свойство.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component this property is bound to. When the &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt; methods are invoked, the object specified might be an instance of this type.">Объект <see cref="T:System.Type" /> представляющий тип компонента, с которым связано это свойство. При вызове методов <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> или <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> заданный объект может быть экземпляром этого типа.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary vsli:raw="Gets the type converter for this property.">Возвращает преобразователь типов для этого свойства.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is used to convert the &lt;see cref=&quot;T:System.Type&quot; /&gt; of this property.">Преобразователь <see cref="T:System.ComponentModel.TypeConverter" />, используемый для преобразования типа <see cref="T:System.Type" /> этого свойства.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary vsli:raw="Gets a value indicating whether this property should be localized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt;.">Возвращает значение, показывающее, должно ли быть локализовано это свойство (в соответствии с атрибутом <see cref="T:System.ComponentModel.LocalizableAttribute" />).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is marked with the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если член помечен атрибутом <see cref="T:System.ComponentModel.LocalizableAttribute" />, равным <see langword="true" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether this property is read-only.">При переопределении в производном классе возвращает значение, показывающее, доступно ли свойство только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство доступно только для чтения. В противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the property.">При переопределении в производном классе возвращает тип свойства.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">Тип <see cref="T:System.Type" />, представляющий тип свойства.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary vsli:raw="Gets a value indicating whether this property should be serialized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibilityAttribute&quot; /&gt;.">Возвращает значение, показывающее, должно ли это свойство быть сериализируемым (в соответствии с атрибутом <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />).</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration values that specifies whether this property should be serialized.">Одно из значений перечисления <see cref="T:System.ComponentModel.DesignerSerializationVisibility" />, определяющее, должно ли это свойство быть сериализируемым.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary vsli:raw="Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.">Возвращает значение, показывающее, могут ли уведомления об изменении значения инициироваться не из дескриптора свойств.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if value change notifications may originate from outside the property descriptor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если уведомления об изменении значений могут инициироваться вне дескриптора свойств; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Представляет коллекцию объектов <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use instead of creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Задает пустую коллекцию, которую можно использовать вместо создания ново коллекции без элементов. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">Массив типа <see cref="T:System.ComponentModel.PropertyDescriptor" />, предоставляющий свойства для данной коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class, which is optionally read-only.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, который может быть экземпляром только для чтения.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">Массив типа <see cref="T:System.ComponentModel.PropertyDescriptor" />, предоставляющий свойства для данной коллекции.</param>
      <param name="readOnly" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, specifies that the collection cannot be modified.">Значение <see langword="true" /> определяет, что эта коллекция не может быть изменена.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection.">Добавляет указанный параметр <see cref="T:System.ComponentModel.PropertyDescriptor" /> в коллекцию.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">Параметр <see cref="T:System.ComponentModel.PropertyDescriptor" /> для добавления в коллекцию.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
      <returns vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added to the collection.">Индекс объекта <see cref="T:System.ComponentModel.PropertyDescriptor" />, который был добавлен к коллекции.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary vsli:raw="Removes all &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects from the collection.">Удаляет все объекты <see cref="T:System.ComponentModel.PropertyDescriptor" /> из коллекции.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Возвращает значение, показывающее, содержит ли коллекция данный дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> .</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to find in the collection.">Параметр <see cref="T:System.ComponentModel.PropertyDescriptor" /> для поиска в коллекции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если коллекция содержит данный дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to an array, starting at the specified index number.">Копирует всю коллекцию в массив, начиная с заданного индекса.</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to copy elements of the collection to.">Массив объектов <see cref="T:System.ComponentModel.PropertyDescriptor" />, в которые нужно занести элементы коллекции.</param>
      <param name="index" vsli:raw="The index of the &lt;paramref name=&quot;array&quot; /&gt; parameter at which copying begins.">Индекс в параметре <paramref name="array" />, с которого начинается копирование.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, using a Boolean to indicate whether to ignore case.">Возвращает объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным именем, используя логическое значение, чтобы показать, игнорируется ли регистр знаков.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return from the collection.">Имя объекта <see cref="T:System.ComponentModel.PropertyDescriptor" />, которое нужно возвратить из коллекции.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the property name; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если регистр в имени свойства не нужно учитывать, в противном случае — значение <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным именем или <see langword="null" />, если свойство не существует.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">Возвращает перечислитель для этого класса.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Перечислитель типа <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Возвращает индекс данного дескриптора <see cref="T:System.ComponentModel.PropertyDescriptor" /> .</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return the index of.">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, для которого возвращается индекс.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Индекс заданного объекта <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection at the specified index number.">Добавляет в коллекцию дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> в позицию с заданным индексом.</summary>
      <param name="index" vsli:raw="The index at which to add the &lt;paramref name=&quot;value&quot; /&gt; parameter to the collection.">Индекс в коллекции, в позицию которого нужно добавить параметр <paramref name="value" /> .</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">Параметр <see cref="T:System.ComponentModel.PropertyDescriptor" /> для добавления в коллекцию.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Сортирует члены данной коллекции, используя заданный интерфейс <see cref="T:System.Collections.IComparer" /> .</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Средство сравнения, которое нужно использовать для сортировки объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в данной коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Сортирует членов коллекции. Сначала выполняется сортировка в указанном порядке, затем используется порядок сортировки по умолчанию, обычно являющийся алфавитным,.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Массив строк, описывающий порядок сортировки для объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в этой коллекции.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the collection.">Удаляет указанный объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> из коллекции.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index from the collection.">Удаляет объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> по указанному индексу из коллекции.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">Индекс дескриптора <see cref="T:System.ComponentModel.PropertyDescriptor" />, который нужно удалить из коллекции.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.">Сортирует члены данной коллекции, используя порядок сортировки, установленный по умолчанию для этой коллекции, являющийся обычно порядком сортировки по алфавиту.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Новая коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая отсортированные объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Сортирует члены данной коллекции, используя заданный интерфейс <see cref="T:System.Collections.IComparer" /> .</summary>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Средство сравнения, которое нужно использовать для сортировки объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в данной коллекции.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Новая коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая отсортированные объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Сортирует членов коллекции. Сначала выполняется сортировка в указанном порядке, затем используется порядок сортировки по умолчанию, обычно являющийся алфавитным,.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Массив строк, описывающий порядок сортировки для объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в этой коллекции.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Новая коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая отсортированные объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Сортирует членов коллекции. Вслед за выполнением сортировки в указанном порядке производится сортировка с использованием средства <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Массив строк, описывающий порядок сортировки для объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в этой коллекции.</param>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Средство сравнения, которое нужно использовать для сортировки объектов <see cref="T:System.ComponentModel.PropertyDescriptor" /> в данной коллекции.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Новая коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая отсортированные объекты <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Добавляет элемент с указанными ключом и значением в объект <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">Объект <see cref="T:System.Object" /> используется в качестве ключа добавляемого элемента.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">Объект <see cref="T:System.Object" /> используется в качестве значения добавляемого элемента.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Удаляет из коллекции <see cref="T:System.Collections.IDictionary" /> все элементы.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">Определяет, содержится ли элемент с указанным ключом в <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Ключ, который требуется найти в <see cref="T:System.Collections.IDictionary" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в <see cref="T:System.Collections.IDictionary" /> содержится элемент с данным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">Возвращает перечислитель для этого класса.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Перечислитель типа <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Удаляет элемент с указанным ключом из <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Ключ удаляемого элемента.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Возвращает объект <see cref="T:System.Collections.IEnumerator" /> для <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.IEnumerator" /> для <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Добавляет элемент в коллекцию <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">Элемент, добавляемый в коллекцию.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Позиция, на которую вставлен новый элемент.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Удаляет все элементы из коллекции.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Определяет, содержит ли коллекция указанное значение.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">Элемент, помещаемый в эту коллекцию.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент найден в коллекции; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specified item in the collection.">Определяет индекс указанного элемента коллекции.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">Элемент, помещаемый в эту коллекцию.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list, otherwise -1.">Индекс параметра <paramref name="value" />, если он найден в списке; в противном случае -1.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">Вставляет элемент в коллекцию по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value" vsli:raw="The item to insert into the collection.">Элемент, вставляемый в коллекцию.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specified value from the collection.">Удаляет первое вхождение указанного значения из коллекции.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">Элемент, который нужно удалить из коллекции.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Удаляет элемент по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of property descriptors in the collection.">Возвращает количество дескрипторов свойств в коллекции.</summary>
      <returns vsli:raw="The number of property descriptors in the collection.">Количество дескрипторов свойств в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index number.">Получает или задает дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным индексом.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get or set.">Индекс (с нуля) возвращаемого или задаваемого <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)&quot; /&gt;.">Параметр <paramref name="index" /> является недопустимым индексом <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" /> .</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified index number.">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным индексом.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name.">Возвращает или задает объект <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным именем.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get from the collection.">Имя дескриптора <see cref="T:System.ComponentModel.PropertyDescriptor" />, который нужно получить из коллекции.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> с заданным именем или <see langword="null" />, если свойство не существует.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Возвращает количество элементов, содержащихся в коллекции.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Количество элементов, содержащихся в коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">Возвращает значение, указывающее, является ли доступ к коллекции синхронизированным (потокобезопасным).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если доступ к коллекции является синхронизированным (потокобезопасным); в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Объект, который может быть использован для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">Получает значение, указывающее, имеет ли список <see cref="T:System.Collections.IDictionary" /> фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если <see cref="T:System.Collections.IDictionary" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">Получает значение, указывающее, является ли объект <see cref="T:System.Collections.IDictionary" /> доступным только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.IDictionary" /> доступен только для чтения, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">Ключ элемента, который требуется получить или задать.</param>
      <returns vsli:raw="The element with the specified key.">Элемент с указанным ключом.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Возвращает интерфейс <see cref="T:System.Collections.ICollection" />, содержащий ключи <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.ICollection" />, содержащий ключи из <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Возвращает интерфейс <see cref="T:System.Collections.ICollection" />, содержащий значения из <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Коллекция <see cref="T:System.Collections.ICollection" />, содержащая значения из словаря <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Возвращает значение, указывающее, имеет ли коллекция фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если коллекция имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Возвращает значение, указывающее, является ли коллекция доступной только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets an item from the collection at a specified index.">Возвращает или задает элемент, расположенный в коллекции по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to get or set.">Отсчитываемый от нуля индекс получаемого или задаваемого элемента.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Коллекция только для чтения.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">
        <paramref name="value" /> не является объектом типа <see cref="T:System.ComponentModel.PropertyDescriptor" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">Значение параметра<paramref name="index" /> меньше 0.  
  
-или- 
 Значение параметра <paramref name="index" /> больше или равно значению свойства <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
      <returns vsli:raw="The element at the specified index.">Элемент, расположенный по указанному индексу.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary vsli:raw="Identifies the property tab or tabs to display for the specified class or classes.">Определяет вкладку свойств или вкладки, которые нужно отобразить для заданного класса или классов.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />, используя заданное имя класса вкладок.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">Полное имя сборки для типа создаваемой вкладки. Пример применения этого формата см. в разделе <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name and tab scope.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />, используя заданные имя класса вкладок и область видимости вкладки.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">Полное имя сборки для типа создаваемой вкладки. Пример применения этого формата см. в разделе <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Значение типа <see cref="T:System.ComponentModel.PropertyTabScope" /> , указывающее область этой вкладки. Если область имеет значение <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> , она отображается только для компонентов с соответствующим <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . Если областью видимости является <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, то вкладка видима для всех компонентов документа.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">Свойству <paramref name="tabScope" /> задано значение, отличное от <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> или <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />, используя указанный тип вкладки.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">Тип создаваемой вкладки.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab and tab scope.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />, используя заданные тип и область видимости вкладки.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">Тип создаваемой вкладки.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Значение типа <see cref="T:System.ComponentModel.PropertyTabScope" /> , указывающее область этой вкладки. Если область имеет значение <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> , она отображается только для компонентов с соответствующим <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . Если областью видимости является <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, то вкладка видима для всех компонентов документа.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">Свойству <paramref name="tabScope" /> задано значение, отличное от <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> или <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified attribute.">Возвращает значение, показывающее, равен ли данный экземпляр заданному атрибуту.</summary>
      <param name="other" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Атрибут <see cref="T:System.ComponentModel.PropertyTabAttribute" />, сравниваемый с данным экземпляром, или <see langword="null" />.</param>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter cannot be found.">Невозможно найти типы, заданные свойством <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> параметра <paramref name="other" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если экземпляры <see cref="T:System.ComponentModel.PropertyTabAttribute" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Возвращает значение, показывающее, равен ли данный экземпляр заданному объекту.</summary>
      <param name="other" vsli:raw="An object to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Объект, сравниваемый с этим экземпляром, или <see langword="null" />.</param>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter could not be found.">Не удалось найти типы, заданные свойством <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> параметра <paramref name="other" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; refers to the same &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если параметр <paramref name="other" /> ссылается на тот же экземпляр <see cref="T:System.ComponentModel.PropertyTabAttribute" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary vsli:raw="Gets the hash code for this object.">Получает хэш-код для этого объекта.</summary>
      <returns vsli:raw="The hash code for the object the attribute belongs to.">Хэш-код для объекта, которому принадлежит данный атрибут.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">Инициализирует данный атрибут, используя заданные имена классов вкладок и массив областей видимости вкладок.</summary>
      <param name="tabClassNames" vsli:raw="An array of fully qualified type names of the types to create for tabs on the Properties window.">Массив полных имен типов, создаваемых для вкладок в окне "Свойства".</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Область каждой вкладки. Если область имеет значение <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> , она отображается только для компонентов с соответствующим <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . Если областью видимости является <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, то вкладка видима для всех компонентов документа.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Одно или несколько значений в параметре <paramref name="tabScopes" /> не равно <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> или <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  
  
-или- 
Длины массивов <paramref name="tabClassNames" /> и <paramref name="tabScopes" /> не совпадают.  
  
-или- 
 Параметр <paramref name="tabClassNames" /> или <paramref name="tabScopes" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">Инициализирует данный атрибут, используя заданные имена классов вкладок и массив областей видимости вкладок.</summary>
      <param name="tabClasses" vsli:raw="The types of tabs to create.">Типы создаваемых вкладок.</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Область каждой вкладки. Если область имеет значение <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> , она отображается только для компонентов с соответствующим <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . Если областью видимости является <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, то вкладка видима для всех компонентов документа.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Одно или несколько значений в параметре <paramref name="tabScopes" /> не равно <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> или <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  
  
-или- 
Длины массивов <paramref name="tabClassNames" /> и <paramref name="tabScopes" /> не совпадают.  
  
-или- 
 Параметр <paramref name="tabClassNames" /> или <paramref name="tabScopes" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary vsli:raw="Gets the types of tabs that this attribute uses.">Возвращает типы вкладок, используемые данным атрибутом.</summary>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property could not be found.">Не удалось найти типы, заданные свойством <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" />.</exception>
      <returns vsli:raw="An array of types indicating the types of tabs that this attribute uses.">Массив типов, показывающий типы вкладок, используемые данным атрибутом.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary vsli:raw="Gets the names of the tab classes that this attribute uses.">Возвращает имена классов вкладок, используемые данным атрибутом.</summary>
      <returns vsli:raw="The names of the tab classes that this attribute uses.">Имена классов вкладок, используемые данным атрибутом.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary vsli:raw="Gets an array of tab scopes of each tab of this &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;.">Возвращает массив областей видимости для каждой вкладки из класса <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; objects that indicate the scopes of the tabs.">Массив объектов <see cref="T:System.ComponentModel.PropertyTabScope" />, который показывает области видимости вкладок.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary vsli:raw="Defines identifiers that indicate the persistence scope of a tab in the Properties window.">Определяет идентификаторы, которые указывают неизменяемую область видимости вкладки в окне "Свойства".</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary vsli:raw="This tab is specific to the current component. This tab is added to the Properties window for the current component only and is removed when the component is no longer selected.">Эта вкладка зависит от текущего компонента. Эта вкладка добавляется в окно "Свойства" только для текущего компонента и удаляется, когда компонент перестает быть выделенным.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary vsli:raw="This tab is specific to the current document. This tab is added to the Properties window and is removed when the currently selected document changes.">Эта вкладка зависит от текущего документа. Эта вкладка добавляется в окно "Свойства" и удаляется, когда выделенный в данный момент документ изменяется.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary vsli:raw="This tab is added to the Properties window and can only be removed explicitly by a parent component.">Эта вкладка добавляется в окно "Свойства" и может быть только явно удалена родительским компонентом.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary vsli:raw="This tab is added to the Properties window and cannot be removed.">Эта вкладка добавляется в окно "Свойства" и не может быть удалена.</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary vsli:raw="Specifies the name of the property that an implementer of &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; offers to other components. This class cannot be inherited.">Определяет имя свойства, которое средство реализации <see cref="T:System.ComponentModel.IExtenderProvider" /> предоставляет другим компонентам. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and the type of its receiver.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />, используя данное имя свойства и тип его получателя.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">Имя свойства, распространяющегося на объект заданного типа.</param>
      <param name="receiverTypeName" vsli:raw="The name of the data type this property can extend.">Имя типа данных, на который может распространяться это свойство.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and its &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />, используя имя свойства и его тип <see cref="T:System.Type" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">Имя свойства, распространяющегося на объект заданного типа.</param>
      <param name="receiverType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the data type of the object that can receive the property.">Тип <see cref="T:System.Type" /> данных объекта, который может получить данное свойство.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">Возвращает значение, показывающее, равно ли значение данного объекта текущему атрибуту <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Объект, проверяемый на равенство.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значение данного объекта равно значению текущего; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary vsli:raw="Gets the name of a property that this class provides.">Возвращает имя свойства, предоставляемого данным классом.</summary>
      <returns vsli:raw="The name of a property that this class provides.">Имя свойства, предоставляемого данным классом.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary vsli:raw="Gets the name of the data type this property can extend.">Возвращает имя типа данных, на который может распространяться это свойство.</summary>
      <returns vsli:raw="The name of the data type this property can extend.">Имя типа данных, на который может распространяться это свойство.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">Возвращает уникальный идентификатор для этого атрибута.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that is a unique identifier for the attribute.">Объект <see cref="T:System.Object" />, являющийся уникальным идентификатором атрибута.</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary vsli:raw="Specifies that the property can be used as an application setting.">Указывает, что это свойство может быть использовано в качестве параметра приложения.</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.RecommendedAsConfigurableAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Задает значение по умолчанию для атрибута <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />, равное <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary vsli:raw="Specifies that a property cannot be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Определяет, что свойство не может быть использовано в качестве параметра приложения. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary vsli:raw="Specifies that a property can be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Определяет, что свойство может использоваться в качестве параметра приложения. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />.</summary>
      <param name="recommendedAsConfigurable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство, с которым связан этот атрибут, может быть использовано в качестве параметра приложения; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">Указывает, равен ли этот экземпляр заданному объекту.</summary>
      <param name="obj" vsli:raw="Another object to compare to.">Другой объект, подлежащий сравнению.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значение параметра <paramref name="obj" /> равно данному экземпляру; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Indicates whether the value of this instance is the default value for the class.">Показывает, является ли значение этого экземпляра значением по умолчанию для класса.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр является атрибутом по умолчанию для класса; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary vsli:raw="Gets a value indicating whether the property this attribute is bound to can be used as an application setting.">Возвращает значение, показывающее, может ли свойство, с которым связан этот атрибут, быть использовано в качестве параметра приложения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство, с которым связан этот атрибут, может быть использовано в качестве параметра приложения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary vsli:raw="Provides a type converter to convert object references to and from other representations.">Предоставляет преобразователь типа для преобразования ссылок объектов в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ReferenceConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ReferenceConverter" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this reference converter.">Тип <see cref="T:System.Type" />, представляющий тип для связи с этим преобразователем ссылок.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a reference object using the specified context.">Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в объект ссылки, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если этот объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the reference type.">Приводит заданный объект к ссылочному типу.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Объект <see cref="T:System.Globalization.CultureInfo" />, задающий язык и региональные параметры, используемые для представления шрифта.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the reference type using the specified context and arguments.">Преобразует указанное значение объекта с помощью указанного контекста и аргументов в ссылочный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Объект <see cref="T:System.Globalization.CultureInfo" />, задающий язык и региональные параметры, используемые для представления шрифта.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Тип, в который требуется преобразовать объект.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="The converted object.">Преобразованный объект.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the reference data type.">Возвращает коллекцию стандартных значений для ссылочного типа данных.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Класс <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащий стандартный набор допустимых значений или значение <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exclusive list.">Возвращает значение, показывающее, является ли список стандартных значений, возвращенных из <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, исчерпывающим.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, так как коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенная методом <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, является исчерпывающим списком возможных значений. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">Получает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, так как для поиска общего набора значений, поддерживаемых объектом, можно вызвать метод <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value indicating whether a particular value can be added to the standard values collection.">Возвращает значение, показывающее, может ли конкретное значение быть добавлено в коллекцию стандартных значений.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides an additional context.">Контекст <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, содержащий дополнительную контекстную информацию.</param>
      <param name="value" vsli:raw="The value to check.">Проверяемое значение.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is allowed and can be added to the standard values collection; &lt;see langword=&quot;false&quot; /&gt; if the value cannot be added to the standard values collection.">Значение <see langword="true" />, если значение допустимо и может быть добавлено в коллекцию стандартных значений, значение <see langword="false" />, если значение не может быть добавлено в коллекцию стандартных значений.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event.">Предоставляет данные для события <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the component that has changed.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.RefreshEventArgs" />, используя измененный компонент.</summary>
      <param name="componentChanged" vsli:raw="The component that changed.">Измененный компонент.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the type of component that has changed.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.RefreshEventArgs" />, используя измененный тип компонента.</summary>
      <param name="typeChanged" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">Измененный тип <see cref="T:System.Type" />.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary vsli:raw="Gets the component that changed its properties, events, or extenders.">Возвращает компонент, у которого изменились свойства, события или средства расширения.</summary>
      <returns vsli:raw="The component that changed its properties, events, or extenders, or &lt;see langword=&quot;null&quot; /&gt; if all components of the same type have changed.">Компонент, у которого изменились свойства, события или средства расширения, или <see langword="null" />, если изменения произошли во всех компонентах данного типа.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">Возвращает тип <see cref="T:System.Type" />, у которого изменились свойства или события.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">Тип <see cref="T:System.Type" />, у которого изменились свойства или события.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event raised when a &lt;see cref=&quot;T:System.Type&quot; /&gt; or component is changed during design time.">Представляет метод, обрабатывающий событие <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" />, возникающее при изменении типа <see cref="T:System.Type" /> или компонента во время разработки.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; that contains the component or &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">Класс <see cref="T:System.ComponentModel.RefreshEventArgs" />, содержащий измененный компонент или тип <see cref="T:System.Type" />.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary vsli:raw="Specifies whether the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed.">Указывает, следует ли при установке сборки вызывать установщик пользовательских действий Visual Studio или программу Installutil.exe (средство установки).</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary vsli:raw="Specifies the default visibility, which is &lt;see cref=&quot;F:System.ComponentModel.RunInstallerAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Определяет видимость по умолчанию, которая равна <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />. Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should not be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Указывает, что при установке сборки не следует вызывать установщик пользовательских действий Visual Studio или программу Installutil.exe (средство установки). Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Указывает, что при установке сборки следует вызвать установщик пользовательских действий Visual Studio или программу Installutil.exe (средство установки). Это статическое (<see langword="static" />) поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <param name="runInstaller" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если во время установки сборки следует вызвать установщик, в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the value of the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Определяет, эквивалентно ли значение заданного атрибута <see cref="T:System.ComponentModel.RunInstallerAttribute" /> текущему атрибуту <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <param name="obj" vsli:raw="The object to compare.">Объект для сравнения.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанный объект <see cref="T:System.ComponentModel.RunInstallerAttribute" /> равен текущему объекту <see cref="T:System.ComponentModel.RunInstallerAttribute" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary vsli:raw="Generates a hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Создает хэш-код для текущего атрибута <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Хэш-код для текущего объекта <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">Определяет, является ли этот атрибут используемым по умолчанию.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если атрибут является значением по умолчанию для данного класса атрибутов; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary vsli:raw="Gets a value indicating whether an installer should be invoked during installation of an assembly.">Возвращает значение, показывающее, следует ли вызывать установщик во время установки сборки.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если во время установки сборки следует вызвать установщик, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from a string.">Предоставляет преобразователь типов для преобразования восьмиразрядных целочисленных объектов без знака в строку и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SByteConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.SByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary vsli:raw="Specifies when a component property can be bound to an application setting.">Определяет, когда свойство компонента может быть связано с параметром приложения.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not appropriate to bind settings to.">Определяет, что это свойство не следует использовать для привязки данных.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is appropriate to bind settings to.">Определяет, что это свойство можно использовать для привязки данных.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SettingsBindableAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.SettingsBindableAttribute" />.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that a property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, определяющее, что свойство подходит для привязки к нему параметров; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Объект <see cref="T:System.Object" /> для сравнения с этим экземпляром или пустая ссылка (<see langword="Nothing" /> в Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если значение параметра <paramref name="obj" /> равно типу и значению данного экземпляра; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating whether a property is appropriate to bind settings to.">Возвращает значение, показывающее, можно ли привязать к свойству параметры.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство подходит для привязки к нему параметров; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary vsli:raw="Provides a type converter to convert single-precision, floating point number objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов, являющихся числами с плавающей запятой с одинарной точностью, в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SingleConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.SingleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary vsli:raw="Provides a type converter to convert string objects to and from other representations.">Предоставляет преобразователь типов для преобразования строковых объектов в другие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.StringConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.StringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.">Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в строку, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">Преобразует указанный объект значения в объект <see cref="T:System.String" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use.">Используемый <see cref="T:System.Globalization.CultureInfo" />.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">Не удалось выполнить преобразование.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary vsli:raw="Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.">Предоставляет методы проверки соответствия имени компьютера и пути конкретному синтаксису. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary vsli:raw="Checks the syntax of the machine name to confirm that it does not contain &quot;\&quot;.">Проверяет синтаксис имени компьютера, подтверждая отсутствие символа "\".</summary>
      <param name="value" vsli:raw="A string containing the machine name to check.">Строка, содержащая проверяемое имя компьютера.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper machine name format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если параметр <paramref name="value" /> соответствует правильному имени компьютера; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see whether it starts with &quot;\\&quot;.">Проверяет синтаксис пути, подтверждая, что путь начинается с "\\".</summary>
      <param name="value" vsli:raw="A string containing the path to check.">Строка, содержащая проверяемый путь.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если параметр <paramref name="value" /> соответствует правильному формату пути; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see if it starts with &quot;\&quot; or drive letter &quot;C:&quot;.">Проверяет синтаксис пути, определяя, начинается ли он с символа "\" или буквы диска "C:".</summary>
      <param name="value" vsli:raw="A string containing the path to check.">Строка, содержащая проверяемый путь.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если параметр <paramref name="value" /> соответствует правильному формату пути; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; objects to and from other representations.">Предоставляет преобразователь типа для преобразования объектов <see cref="T:System.TimeSpan" /> в другие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TimeSpanConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TimeSpanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; using the specified context.">Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование объекта заданного исходного типа в <see cref="T:System.TimeSpan" />, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Тип <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">Преобразует данный объект в объект <see cref="T:System.TimeSpan" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Необязательный класс <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">Значение <paramref name="value" /> не является допустимым значением для конечного типа.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">Преобразует указанный объект в другой тип.</summary>
      <param name="context" vsli:raw="A formatter context.">Контекст модуля форматирования.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Язык и региональные параметры, в которые будет выполнено преобразование <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Тип, в который требуется преобразовать объект.</param>
      <returns vsli:raw="The converted object.">Преобразованный объект.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary vsli:raw="Represents an attribute of a toolbox item.">Представляет атрибут элемента панели инструментов.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to the default, &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;. This field is read-only.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> и устанавливает для типа значение по умолчанию <see cref="T:System.Drawing.Design.ToolboxItem" />. Это поле доступно только для чтения.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to &lt;see langword=&quot;null&quot; /&gt;. This field is read-only.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> и устанавливает тип в <see langword="null" />. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and specifies whether to use default initialization values.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> и указывает, следует ли использовать заданные по умолчанию значения для инициализации.</summary>
      <param name="defaultType" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to create a toolbox item attribute for a default type; &lt;see langword=&quot;false&quot; /&gt; to associate no default toolbox item support for this attribute.">Значение <see langword="true" />, чтобы создать атрибут панели инструментов для типа по умолчанию, значение <see langword="false" />, чтобы не связывать с этим атрибутом поддержку элементов панели инструментов, установленных по умолчанию.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified name of the type.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemAttribute" />, используя заданное имя типа.</summary>
      <param name="toolboxItemTypeName" vsli:raw="The names of the type of the toolbox item and of the assembly that contains the type.">Имена типа элемента панели управления и сборки, содержащей данный тип.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified type of the toolbox item.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemAttribute" />, используя заданный тип элемента панели инструментов.</summary>
      <param name="toolboxItemType" vsli:raw="The type of the toolbox item.">Тип элемента панели инструментов.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Объект <see cref="T:System.Object" /> для сравнения с этим экземпляром или пустая ссылка (<see langword="Nothing" /> в Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если значение параметра <paramref name="obj" /> равно типу и значению данного экземпляра; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Возвращает значение, показывающее, является ли текущее значение атрибута его значением по умолчанию.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущим значением атрибута является значение по умолчанию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary vsli:raw="Gets or sets the type of the toolbox item.">Получает или задает тип элемента панели инструментов.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The type cannot be found.">Тип найти не удалось.</exception>
      <returns vsli:raw="The type of the toolbox item.">Тип элемента панели инструментов.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary vsli:raw="Gets or sets the name of the type of the current &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;.">Получает или задает имя типа текущего элемента <see cref="T:System.Drawing.Design.ToolboxItem" /> .</summary>
      <returns vsli:raw="The fully qualified type name of the current toolbox item.">Полное имя типа текущего элемента панели инструментов.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary vsli:raw="Specifies the filter string and filter type to use for a toolbox item.">Задает строку фильтра и тип фильтра для использования в качестве элемента панели инструментов.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />, используя заданную строку фильтра.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">Строка фильтра для элемента панели инструментов.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string and type.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />, используя заданные строку фильтра и тип фильтра.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">Строка фильтра для элемента панели инструментов.</param>
      <param name="filterType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; indicating the type of the filter.">Объект <see cref="T:System.ComponentModel.ToolboxItemFilterType" />, указывающий тип фильтра.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Объект <see cref="T:System.Object" /> для сравнения с этим экземпляром или пустая ссылка (<see langword="Nothing" /> в Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если значение параметра <paramref name="obj" /> равно типу и значению данного экземпляра; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary vsli:raw="Indicates whether the specified object has a matching filter string.">Показывает, содержит ли заданный объект соответствующую строку фильтра.</summary>
      <param name="obj" vsli:raw="The object to test for a matching filter string.">Объект, в котором проверяется соответствующая строка фильтра.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object has a matching filter string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если заданный объект содержит соответствующую строку фильтра; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary vsli:raw="Returns a string that represents the current object.">Возвращает строку, представляющую текущий объект.</summary>
      <returns vsli:raw="A string that represents the current object.">Строка, представляющая текущий объект.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary vsli:raw="Gets the filter string for the toolbox item.">Возвращает строку фильтра для элемента панели инструментов.</summary>
      <returns vsli:raw="The filter string for the toolbox item.">Строка фильтра для элемента панели инструментов.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary vsli:raw="Gets the type of the filter.">Возвращает тип фильтра.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; that indicates the type of the filter.">Объект <see cref="T:System.ComponentModel.ToolboxItemFilterType" />, указывающий тип фильтра.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary vsli:raw="Gets the type ID for the attribute.">Возвращает идентификатор типа для этого атрибута.</summary>
      <returns vsli:raw="The type ID for this attribute. All &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; objects with the same filter string return the same type ID.">Идентификатор типа для этого атрибута. Для всех объектом <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> с одинаковыми строками фильтра возвращаются одинаковые идентификаторы типа</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary vsli:raw="Defines identifiers used to indicate the type of filter that a &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; uses.">Определяет идентификаторы, используемые для указания типа фильтра, используемого атрибутом <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary vsli:raw="Indicates that a toolbox item filter string is allowed, but not required.">Показывает, что использование строки фильтра элемента панели инструментов разрешено, но не является обязательным.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary vsli:raw="Indicates that custom processing is required to determine whether to use a toolbox item filter string. It is typically specified on a root designer class to indicate that the designer wishes to accept or reject a toolbox item through code. The designer must implement the &lt;see cref=&quot;M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)&quot; /&gt; method of the &lt;see cref=&quot;T:System.Drawing.Design.IToolboxUser&quot; /&gt; interface.">Показывает необходимость дополнительных действий, чтобы определить, использовать ли строку фильтра элемента панели инструментов. Обычно он задается в классе конструктора верхнего уровня, чтобы показать, что конструктор хочет принять или отклонить элемент панели элементов с помощью кода. Этот конструктор должен реализовывать метод <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> интерфейса <see cref="T:System.Drawing.Design.IToolboxUser" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary vsli:raw="Indicates that a toolbox item filter string is not allowed. If a designer and a component class both have a filter string and the value of one is &lt;c&gt;ToolboxItemFilterType.Prevent&lt;/c&gt;, the toolbox item will not be available.">Показывает, что использование строки фильтра элемента панели инструментов не разрешено. Если как конструктор, так и класс компонента имеют строку фильтра и ее значение равно <c>ToolboxItemFilterType.Prevent</c>, элемент панели элементов будет недоступен.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary vsli:raw="Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.  For a toolbox item with a filter type of &lt;c&gt;Require&lt;/c&gt; to be enabled, the designer and the component class must have a matching filter string. Additionally, neither the designer or component class can have a filter type of &lt;c&gt;Prevent&lt;/c&gt; for the toolbox item to be enabled.">Показывает необходимость строки фильтра элемента панели инструментов, чтобы элемент панели инструментов был доступен.  Для элемента панели элементов с типом фильтра <c>Require</c>, который требуется включить, конструктор и класс компонента должны иметь соответствующую строку фильтра. Кроме того, ни конструктор, ни класс компонента не могут иметь тип фильтра <c>Prevent</c> для элемента панели элементов, который требуется включить.</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary vsli:raw="Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.">Предоставляет унифицированный способ преобразования типов значений в другие типы, а также позволяет осуществить доступ к стандартным значениям и вложенным свойствам.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">Возвращает значение, указывающее, может ли этот преобразователь выполнить преобразование объекта заданного типа в тип этого преобразователя, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Объект <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">Возвращает значение, указывающее, может ли этот преобразователь преобразовать объект заданного типа к типу этого преобразователя.</summary>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Объект <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Возвращает значение, показывающее, может ли этот преобразователь преобразовать объект в заданный тип с помощью указанного контекста.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Класс <see cref="T:System.Type" />, представляющий тип, в который нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">Возвращает значение, указывающее, может ли этот преобразователь выполнить преобразование данного объекта к заданному типу.</summary>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Класс <see cref="T:System.Type" />, представляющий тип, в который нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Преобразует заданный объект в тип данного преобразователя с использованием указанного контекста и сведений о культуре.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый в качестве текущей культуры.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary vsli:raw="Converts the given value to the type of this converter.">Приводит заданное значение к типу этого преобразователя.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture and the specified context.">Преобразует заданную строку к типу этого преобразователя, используя нейтральные язык и региональные параметры вместе с заданным контекстом.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.String" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Объект <see cref="T:System.Object" />, представляющий преобразованный текст.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture.">Преобразует заданную строку к типу этого преобразователя, используя нейтральные язык и региональные параметры.</summary>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.String" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Объект <see cref="T:System.Object" />, представляющий преобразованный текст.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context and culture information.">Преобразует заданный текст в объект, используя заданный контекст и сведения о языке и региональных параметрах.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используются текущие настройки языка и региональных параметров.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.String" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Объект <see cref="T:System.Object" />, представляющий преобразованный текст.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context.">Преобразует заданный текст в объект, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.String" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Объект <see cref="T:System.Object" />, представляющий преобразованный текст.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary vsli:raw="Converts the specified text to an object.">Преобразует заданный текст в объект.</summary>
      <param name="text" vsli:raw="The text representation of the object to convert.">Текстовое представление преобразуемого объекта.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The string cannot be converted into the appropriate object.">Данная строка не может быть преобразована в соответствующий объект.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Объект <see cref="T:System.Object" />, представляющий преобразованный текст.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Преобразует заданный объект значения в указанный тип с использованием указанного контекста и сведений о культуре.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используются текущие настройки языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <see cref="T:System.Type" />, к которому преобразуется параметр <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the arguments.">Преобразует данное значение в указанный тип, используя заданные аргументы.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <see cref="T:System.Type" />, к которому преобразуется параметр <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation, using the specified context.">Преобразует указанное значение в строковое представление для нейтральных языка и региональных параметров.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">Объект <see cref="T:System.String" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation.">Преобразует указанное значение в строковое представление для нейтральных языка и региональных параметров.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">Объект <see cref="T:System.String" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the specified context and culture information.">Преобразует данное значение в заданный тип, используя заданный контекст и сведения о языке и региональных параметрах.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используются текущие настройки языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the given context.">Преобразует данное значение в строку, используя данный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary vsli:raw="Converts the specified value to a string representation.">Преобразует указанное значение в строковое представление.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary vsli:raw="Re-creates an &lt;see cref=&quot;T:System.Object&quot; /&gt; given a set of property values for the object.">Повторно создает объект <see cref="T:System.Object" />, задающий набор значений свойств для объекта.</summary>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that represents a dictionary of new property values.">Интерфейс <see cref="T:System.Collections.IDictionary" />, представляющий словарь новых значений свойства.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" />, представляющий данный <see cref="T:System.Collections.IDictionary" />, или <see langword="null" />, если объект не может быть создан. Этот метод всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">Создает экземпляр типа, с которым связан этот <see cref="T:System.ComponentModel.TypeConverter" />, используя заданный контекст с учетом набора значений свойств для объекта.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">
        <see cref="T:System.Collections.IDictionary" /> новых значений свойств.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" />, представляющий данный <see cref="T:System.Collections.IDictionary" />, или <see langword="null" />, если объект не может быть создан. Этот метод всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">Возвращает исключение, возникающее в случае, если невозможно выполнить преобразование.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">Объект <see cref="T:System.Object" /> для преобразования или <see langword="null" />, если объект отсутствует.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">Автоматически вызывается этим методом.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">Объект <see cref="T:System.Exception" />, представляющий исключение, возникающее, если преобразование не может быть выполнено.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">Возвращает исключение, возникающее в случае, если невозможно выполнить преобразование.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">Объект <see cref="T:System.Object" /> для преобразования или <see langword="null" />, если объект отсутствует.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type the conversion was trying to convert to.">Объект <see cref="T:System.Type" />, представляющий тип, в который осуществлялось преобразование.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">Автоматически вызывается этим методом.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">Объект <see cref="T:System.Exception" />, представляющий исключение, возникающее, если преобразование не может быть выполнено.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to the &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; method to create a new value.">Возвращает значение, показывающее, требуется ли при изменении значения этого объекта вызывать метод <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />, чтобы создать новое значение.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если для изменения свойства в этом объекте требуется вызов <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />, чтобы создать новое значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">Возвращает значение, указывающее, требуется ли для изменения значения в этом объекте вызов <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />, чтобы создать новое значение с помощью указанного контекста.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если для изменения свойства в этом объекте требуется вызов <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />, чтобы создать новое значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context.">Возвращает коллекцию свойств для типа массива, заданного параметром, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Объект класса <see cref="T:System.Object" />, задающий тип массива, для которого нужно получить свойства.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или значение <see langword="null" />, если свойства отсутствуют.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">Возвращает коллекцию свойств для типа массива, заданного параметром value, используя заданные контекст и атрибуты.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Объект класса <see cref="T:System.Object" />, задающий тип массива, для которого нужно получить свойства.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Массив типа <see cref="T:System.Attribute" />, используемый в качестве фильтра.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или значение <see langword="null" />, если свойства отсутствуют.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter.">Возвращает коллекцию свойств для типа массива, заданного параметром значения.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Объект класса <see cref="T:System.Object" />, задающий тип массива, для которого нужно получить свойства.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, доступными для этого типа данных, или значение <see langword="null" />, если свойства отсутствуют.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary vsli:raw="Returns whether this object supports properties.">Возвращает значение, показывающее, поддерживаются ли свойства этим объектом.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если для поиска свойств этого объекта следует вызвать метод <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Возвращает значение, показывающее, поддерживает ли данный объект свойства, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если для поиска свойств этого объекта следует вызвать метод <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary vsli:raw="Returns a collection of standard values from the default context for the data type this type converter is designed for.">Возвращает коллекцию стандартных значений из контекста по умолчанию для типа данных, для которого предназначен этот преобразователь типов.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащая стандартный набор допустимых значений, или <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">Возвращает коллекцию стандартных значений для типа данных, для которого предназначен этот преобразователь типов при предоставлении с контекстом формата.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата, который можно использовать для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Этот параметр или свойства этого параметра могут быть <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Класс <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащий стандартный набор допустимых значений или значение <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list.">Возвращает значение, показывающее, является ли исчерпывающим списком коллекция стандартных значений, возвращаемая методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">Имеет значение <see langword="true" />, если объект класса <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенный методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />, является исчерпывающим списком возможных значений, значение <see langword="false" />, если возможны другие значения.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">Используя заданный контекст, возвращает значение, показывающее, является ли исчерпывающим списком возможных значений коллекция стандартных значений, возвращаемая методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">Имеет значение <see langword="true" />, если объект класса <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенный методом <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />, является исчерпывающим списком возможных значений, значение <see langword="false" />, если возможны другие значения.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list.">Возвращает значение, показывающее, поддерживает ли объект стандартный набор значений, которые можно выбрать из списка.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если метод <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> должен быть вызван для поиска общего набора значений, поддерживаемых объектом, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">Получает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка, используя заданную контекстную информацию.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если метод <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> должен быть вызван для поиска общего набора значений, поддерживаемых объектом, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">Возвращает значение, показывающее, допустим ли для этого типа и указанного контекста данный объект значения.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">Объект <see cref="T:System.Object" /> для проверки на допустимость.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанное значение является допустимым для данного объекта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type.">Возвращает значение, показывающее, допустим ли для этого типа данный объект значения.</summary>
      <param name="value" vsli:raw="The object to test for validity.">Объект, допустимость которого требуется проверить.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанное значение является допустимым для данного объекта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary vsli:raw="Sorts a collection of properties.">Сортирует коллекцию свойств.</summary>
      <param name="props" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that has the properties to sort.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая свойства для сортировки.</param>
      <param name="names" vsli:raw="An array of names in the order you want the properties to appear in the collection.">Массив имен в том порядке, в котором нужно представить свойства в коллекции.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted properties.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая отсортированные свойства.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary vsli:raw="Represents an &lt;see langword=&quot;abstract&quot; /&gt; class that provides properties for objects that do not have properties.">Представляет класс <see langword="abstract" />, предоставляющий свойства для объектов, у которых нет свойств.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">Тип <see cref="T:System.Type" />, представляющий тип компонента, с которым связывается дескриптор этого свойства.</param>
      <param name="name" vsli:raw="The name of the property.">Имя свойства.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">Тип <see cref="T:System.Type" />, представляющий тип данных для этого свойства.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">Тип <see cref="T:System.Type" />, представляющий тип компонента, с которым связывается дескриптор этого свойства.</param>
      <param name="name" vsli:raw="The name of the property.">Имя свойства.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">Тип <see cref="T:System.Type" />, представляющий тип данных для этого свойства.</param>
      <param name="attributes" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes to associate with the property.">Массив <see cref="T:System.Attribute" />, содержащий атрибуты, связываемые со свойством.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="Returns whether resetting the component changes the value of the component.">Возвращает значение, показывающее, изменяет ли сброс компонента значение компонента.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">Компонент для проверки на возможность сброса.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes the value of the component; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если сброс компонента изменяет значение компонента; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="Resets the value for this property of the component.">Сбрасывает данное значение этого свойства компонента.</summary>
      <param name="component" vsli:raw="The component with the property value to be reset.">Компонент со значением свойства, которое нужно сбросить.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Returns whether the value of this property can persist.">Возвращает значение, показывающее, может ли значение этого свойства быть сохранено.</summary>
      <param name="component" vsli:raw="The component with the property that is to be examined for persistence.">Компонент со свойством, для которого нужно проверить сохраняемость.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the property can persist; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значение свойства может быть сохранено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary vsli:raw="Gets the type of component to which this property description binds.">Возвращает тип компонента, к которому привязывается дескриптор этого свойства.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property binds.">Тип <see cref="T:System.Type" />, представляющий тип компонента, с которым связывается это свойство.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this property is read-only.">Возвращает значение, показывающее, является ли это свойство доступным только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; &lt;see langword=&quot;false&quot; /&gt; if the property is read/write.">Значение <see langword="true" />, если это свойство доступно только для чтения; значение <see langword="false" />, если это свойство доступно и для чтения, и для записи.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary vsli:raw="Gets the type of the property.">Возвращает тип свойства.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">Тип <see cref="T:System.Type" />, представляющий тип свойства.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary vsli:raw="Represents a collection of values.">Представляет коллекцию значений.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />.</summary>
      <param name="values" vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that represents the objects to put into the collection.">Объект <see cref="T:System.Collections.ICollection" />, представляющий объекты, которые должны войти в коллекцию.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of this collection to an array.">Копирует содержимое коллекции в массив.</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Array&quot; /&gt; that represents the array to copy to.">Объект <see cref="T:System.Array" />, представляющий массив, в который будет производиться копирование.</param>
      <param name="index" vsli:raw="The index to start from.">Начальный индекс.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this collection.">Возвращает перечислитель для этой коллекции.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Перечислитель типа <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary vsli:raw="Gets the number of objects in the collection.">Получает количество объектов в коллекции.</summary>
      <returns vsli:raw="The number of objects in the collection.">Количество объектов в коллекции .</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the object at the specified index number.">Возвращает объект с заданным индексом.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.Object&quot; /&gt; to get from the collection.">Индекс объекта (отсчитываемый с нуля) <see cref="T:System.Object" />, возвращаемого из коллекции.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; with the specified index.">Объект <see cref="T:System.Object" /> с заданным индексом.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.IsSynchronized&quot; /&gt;.">Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">Значение <see langword="false" /> во всех случаях.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.SyncRoot&quot; /&gt;.">Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;null&quot; /&gt; in all cases.">Значение <see langword="null" /> во всех случаях.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary vsli:raw="Provides supplemental metadata to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Предоставляет дополнительные метаданные для <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class using a parent type description provider.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, используя поставщика описания родительского типа.</summary>
      <param name="parent" vsli:raw="The parent type description provider.">Поставщик описания родительского типа.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">Создает объект, которым можно заменить другой тип данных.</summary>
      <param name="provider" vsli:raw="An optional service provider.">Необязательный поставщик услуги.</param>
      <param name="objectType" vsli:raw="The type of object to create. This parameter is never &lt;see langword=&quot;null&quot; /&gt;.">Тип объекта для создания. Значением этого параметра никогда не может быть <see langword="null" />.</param>
      <param name="argTypes" vsli:raw="An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be &lt;see langword=&quot;null&quot; /&gt; or of zero length.">Необязательный массив типов, представляющих типы параметров, передаваемые конструктору объекта. Этот массив может быть представлять собой значение <see langword="null" /> или его длина может быть нулевой.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor.">Необязательный массив значений параметров для передачи в конструктор объекта.</param>
      <returns vsli:raw="The substitute &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Объект <see cref="T:System.Object" /> для подстановки</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary vsli:raw="Gets a per-object cache, accessed as an &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of key/value pairs.">Возвращает кэш на пообъектной основе, доступный как пары "ключ-значение" <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="instance" vsli:raw="The object for which to get the cache.">Объект, для которого возвращается кэш.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; if the provided object supports caching; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.IDictionary" />, если предоставленный объект поддерживает кэширование; в противном случае — значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets an extended custom type descriptor for the given object.">Возвращает расширенный настраиваемый дескриптор типа для данного объекта.</summary>
      <param name="instance" vsli:raw="The object for which to get the extended type descriptor.">Объект, для которого возвращается расширенный дескриптор типа.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide extended metadata for the object.">Интерфейс <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, который может предоставить расширенные метаданные для этого объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary vsli:raw="Gets the extender providers for the specified object.">Получает поставщики расширителей для заданного объекта.</summary>
      <param name="instance" vsli:raw="The object to get extender providers for.">Объект, для которого необходимо получить поставщики расширителей.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An array of extender providers for &lt;paramref name=&quot;instance&quot; /&gt;.">Массив поставщиков расширителей для параметра <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">Возвращает имя заданного компонента или <see langword="null" />, если у компонента нет имени.</summary>
      <param name="component" vsli:raw="The specified component.">Заданный компонент.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The name of the specified component.">Имя заданного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object.">Выполняет обычное отражение для данного объекта.</summary>
      <param name="instance" vsli:raw="An instance of the type (should not be &lt;see langword=&quot;null&quot; /&gt;).">Экземпляр типа (не должен быть значением <see langword="null" />).</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;instance&quot; /&gt;.">Тип отражения для этого объекта <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary vsli:raw="Performs normal reflection against a type.">Выполняет обычное отражение для типа.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">Тип объекта, для которого возвращается интерфейс <see cref="T:System.Reflection.IReflect" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">Тип отражения для этого объекта <paramref name="objectType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object with the given type.">Выполняет обычное отражение для заданного объекта с заданным типом.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">Тип объекта, для которого возвращается интерфейс <see cref="T:System.Reflection.IReflect" />.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt;.">Экземпляр типа. Может иметь значение <see langword="null" />.</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">Тип отражения для этого объекта <paramref name="objectType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary vsli:raw="Converts a reflection type into a runtime type.">Преобразует тип отражения в тип среды выполнения.</summary>
      <param name="reflectionType" vsli:raw="The type to convert to its runtime equivalent.">Тип, который нужно преобразовать в соответствующий эквивалент среды выполнения.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reflectionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reflectionType" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the runtime equivalent of &lt;paramref name=&quot;reflectionType&quot; /&gt;.">Тип <see cref="T:System.Type" />, представляющий эквивалент среды выполнения для типа <paramref name="reflectionType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given object.">Возвращает настраиваемый дескриптор типа для заданного объекта.</summary>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Экземпляр типа. Может быть значением <see langword="null" />, если в дескриптор <see cref="T:System.ComponentModel.TypeDescriptor" /> не передан никакой экземпляр.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Дескриптор <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, который может предоставить метаданные для этого типа.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary vsli:raw="Gets a custom type descriptor for the given type.">Возвращает настраиваемый дескриптор типа для заданного типа.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">Тип объекта, для которого возвращается дескриптор типа.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Дескриптор <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, который может предоставить метаданные для этого типа.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given type and object.">Возвращает настраиваемый дескриптор типа для заданного типа и объекта.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">Тип объекта, для которого возвращается дескриптор типа.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Экземпляр типа. Может быть значением <see langword="null" />, если в дескриптор <see cref="T:System.ComponentModel.TypeDescriptor" /> не передан никакой экземпляр.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Дескриптор <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, который может предоставить метаданные для этого типа.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.">Получает значение, указывающее, совместим ли заданный тип с описанием типа и его цепочкой поставщиков описаний типов.</summary>
      <param name="type" vsli:raw="The type to test for compatibility.">Тип для проверки на совместимость.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;type&quot; /&gt; is compatible with the type description and its chain of type description providers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если тип <paramref name="type" /> совместим с описанием типа и его цепочкой поставщиков описаний типов; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary vsli:raw="Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.">Предоставляет сведения о характеристиках компонента, таких как его атрибуты, свойства и события. Этот класс не наследуется.</summary>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary vsli:raw="Occurs when the cache for a component is cleared.">Возникает при очистке кэша для компонента.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component instance.">Добавляет атрибуты уровня класса в экземпляр целевого компонента.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Экземпляр целевого компонента.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">Массив объектов <see cref="T:System.Attribute" />, добавляемых в класс компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Значением одного или обоих параметров является <see langword="null" />.</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">Только что созданный поставщик <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, использовавшийся для добавления заданных атрибутов.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component type.">Добавляет атрибуты уровня класса к типу целевого компонента.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">Массив объектов <see cref="T:System.Attribute" />, добавляемых в класс компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Значением одного или обоих параметров является <see langword="null" />.</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">Только что созданный поставщик <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, использовавшийся для добавления заданных атрибутов.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary vsli:raw="Adds an editor table for the given editor base type.">Добавляет таблицу редактора для данного базового типа редактора.</summary>
      <param name="editorBaseType" vsli:raw="The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.">Базовый тип редактора для добавления таблицы редактора. Если таблица уже существует для этого типа, этот метод не выполняет никаких действий.</param>
      <param name="table" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Hashtable&quot; /&gt; to add.">Добавляемый объект <see cref="T:System.Collections.Hashtable" />.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">Добавляет поставщик описания типа для одного экземпляра компонента.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Добавляемый объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Экземпляр целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">По меньшей мере один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">Добавляет поставщика описания типа для класса компонента.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Добавляемый объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">По меньшей мере один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">Добавляет поставщик описания типа для одного экземпляра компонента.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Добавляемый объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Экземпляр целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">По меньшей мере один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">Добавляет поставщика описания типа для класса компонента.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Добавляемый объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">По меньшей мере один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary vsli:raw="Creates a primary-secondary association between two objects.">Создает связь "основной — дополнительный" между двумя объектами.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Основной <see cref="T:System.Object" />.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Дополнительный <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">По меньшей мере один параметр имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is equal to &lt;paramref name=&quot;secondary&quot; /&gt;.">
        <paramref name="primary" /> равно <paramref name="secondary" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary vsli:raw="Creates an instance of the designer associated with the specified component and of the specified type of designer.">Создает экземпляр конструктора, связанный с указанным компонентом указанного типа конструктора.</summary>
      <param name="component" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that specifies the component to associate with the designer.">Интерфейс <see cref="T:System.ComponentModel.IComponent" />, указывающий компонент, который нужно связать с конструктором.</param>
      <param name="designerBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of designer to create.">Объект <see cref="T:System.Type" />, представляющий тип создаваемого конструктора.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; that is an instance of the designer for the component, or &lt;see langword=&quot;null&quot; /&gt; if no designer can be found.">Объект <see cref="T:System.ComponentModel.Design.IDesigner" />, являющийся экземпляром конструктора для компонента, или <see langword="null" />, если конструктор не удается найти.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Создает новый дескриптор события, идентичный существующему дескриптору события, при передаче существующего <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
      <param name="componentType" vsli:raw="The type of the component for which to create the new event.">Тип компонента, для которого создается новое событие.</param>
      <param name="oldEventDescriptor" vsli:raw="The existing event information.">Сведения о существующем событии.</param>
      <param name="attributes" vsli:raw="The new attributes.">Новые атрибуты.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that has merged the specified metadata attributes with the existing metadata attributes.">Новый объект <see cref="T:System.ComponentModel.EventDescriptor" />, который объединил указанные атрибуты метаданных с существующими атрибутами метаданных.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.">Создает новый дескриптор события, идентичный существующему, путем динамического создания сведений о дескрипторе на основе указанного события для типа.</summary>
      <param name="componentType" vsli:raw="The type of the component the event lives on.">Тип компонента, содержащего событие.</param>
      <param name="name" vsli:raw="The name of the event.">Имя события.</param>
      <param name="type" vsli:raw="The type of the delegate that handles the event.">Тип делегата, который обрабатывает событие.</param>
      <param name="attributes" vsli:raw="The attributes for this event.">Атрибуты для этого события.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that is bound to a type.">Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" />, который привязан к типу.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">Создает объект, которым можно заменить другой тип данных.</summary>
      <param name="provider" vsli:raw="The service provider that provides a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; service. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Поставщик служб, предоставляющий службу <see cref="T:System.ComponentModel.TypeDescriptionProvider" />. Этот параметр может иметь значение <see langword="null" />.</param>
      <param name="objectType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of object to create.">Тип <see cref="T:System.Type" /> создаваемого объекта.</param>
      <param name="argTypes" vsli:raw="An optional array of parameter types to be passed to the object's constructor. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an array of zero length.">Необязательный массив типов параметров для передачи в конструктор объекта. Этот параметр может иметь значение <see langword="null" /> или быть массивом нулевой длины.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor. If not &lt;see langword=&quot;null&quot; /&gt;, the number of elements must be the same as &lt;paramref name=&quot;argTypes&quot; /&gt;.">Необязательный массив значений параметров для передачи в конструктор объекта. Если не <see langword="null" />, число элементов должно быть таким же, как <paramref name="argTypes" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or &lt;paramref name=&quot;args&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; when &lt;paramref name=&quot;argTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="objectType" /> имеет значение <see langword="null" />, или параметр <paramref name="args" /> имеет значение <see langword="null" />, если значением параметра <paramref name="argTypes" /> не является <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;argTypes&quot; /&gt; and &lt;paramref name=&quot;args&quot; /&gt; have different number of elements.">Параметры <paramref name="argTypes" /> и <paramref name="args" /> содержат различное количество элементов.</exception>
      <returns vsli:raw="An instance of the substitute data type if an associated &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Экземпляр подставляемого типа данных, если найден связанный поставщик <see cref="T:System.ComponentModel.TypeDescriptionProvider" />; в противном случае — значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new property descriptor from an existing property descriptor, using the specified existing &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and attribute array.">Создает новый дескриптор свойства из существующего свойства компонента, используя заданный существующий дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> и массив атрибутов.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">
        <see cref="T:System.Type" /> компонента, членом которого является свойство.</param>
      <param name="oldPropertyDescriptor" vsli:raw="The existing property descriptor.">Существующий дескриптор свойства.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">Новые атрибуты этого свойства.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that has the specified metadata attributes merged with the existing metadata attributes.">Новый дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" />, объединивший заданные атрибуты метаданных с существующими атрибутами метаданных.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.">Создает и динамически связывает дескриптор свойства с типом, используя указанное имя свойства, тип и массив атрибутов.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">
        <see cref="T:System.Type" /> компонента, членом которого является свойство.</param>
      <param name="name" vsli:raw="The name of the property.">Имя свойства.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the property.">Тип <see cref="T:System.Type" /> свойства.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">Новые атрибуты этого свойства.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is bound to the specified type and that has the specified metadata attributes merged with the existing metadata attributes.">Объект <see cref="T:System.ComponentModel.PropertyDescriptor" />, связанный с указанным типом и имеющий заданные атрибуты метаданных, объединенные с существующими атрибутами метаданных.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary vsli:raw="Returns an instance of the type associated with the specified primary object.">Возвращает экземпляр типа, связанный с заданным основным объектом.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <param name="primary" vsli:raw="The primary object of the association.">Основной объект связи.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">По меньшей мере один параметр имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An instance of the secondary type that has been associated with the primary object if an association exists; otherwise, &lt;paramref name=&quot;primary&quot; /&gt; if no specified association exists.">Экземпляр подчиненного типа, связанный с основным объектом, если связь существует; в противном случае — параметр <paramref name="primary" />, если заданная связь отсутствует.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary vsli:raw="Returns the collection of attributes for the specified component.">Возвращает коллекцию атрибутов для указанного компонента.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">Компонент, для которого требуется получить атрибуты.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the component. If &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, содержащая атрибуты для этого компонента. Если параметр <paramref name="component" /> имеет значение <see langword="null" />, этот метод возвращает пустую коллекцию.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.">Возвращает коллекцию атрибутов для указанного компонента и логическое значение, указывающее, что был создан настраиваемый дескриптор типа.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">Компонент, для которого требуется получить атрибуты.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a baseline set of attributes from the custom type descriptor if &lt;paramref name=&quot;component&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы использовать базовый набор атрибутов из настраиваемого дескриптора типа, если <paramref name="component" /> имеет тип <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />; в противном случае — значение <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, содержащая атрибуты для данного компонента. Если компонент — <see langword="null" />, этот метод возвращает пустую коллекцию.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary vsli:raw="Returns a collection of attributes for the specified type of component.">Возвращает коллекцию атрибутов для указанного типа компонента.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the type of the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Коллекция <see cref="T:System.ComponentModel.AttributeCollection" />, содержащая атрибуты для данного типа компонента. Если компонент — <see langword="null" />, этот метод возвращает пустую коллекцию.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary vsli:raw="Returns the name of the class for the specified component using the default type descriptor.">Возвращает имя класса для указанного компонента, используя дескриптор типа по умолчанию.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Объект <see cref="T:System.Object" />, для которого требуется получить имя класса.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">Объект <see cref="T:System.String" />, содержащий имя класса для заданного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the class for the specified component using a custom type descriptor.">Возвращает имя класса для указанного компонента, используя дескриптор пользовательского типа.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Объект <see cref="T:System.Object" />, для которого требуется получить имя класса.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">Объект <see cref="T:System.String" />, содержащий имя класса для заданного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary vsli:raw="Returns the name of the class for the specified type.">Возвращает имя класса для указанного типа.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component type.">Объект <see cref="T:System.String" />, содержащий имя класса для заданного типа.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary vsli:raw="Returns the name of the specified component using the default type descriptor.">Возвращает имя указанного компонента, используя дескриптор типа по умолчанию.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Объект <see cref="T:System.Object" />, для которого требуется получить имя класса.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">Строка <see cref="T:System.String" />, содержащая имя заданного компонента, или <see langword="null" />, если имя компонента отсутствует.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the specified component using a custom type descriptor.">Возвращает имя указанного компонента, используя дескриптор пользовательского типа.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Объект <see cref="T:System.Object" />, для которого требуется получить имя класса.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="The name of the class for the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">Имя класса для заданного компонента или <see langword="null" />, если имя компонента отсутствует.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary vsli:raw="Returns a type converter for the type of the specified component.">Возвращает преобразователь типов для типа указанного компонента.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">Компонент для получения преобразователя.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">Преобразователь <see cref="T:System.ComponentModel.TypeConverter" /> для заданного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a type converter for the type of the specified component with a custom type descriptor.">Возвращает преобразователь типов для типа указанного компонента с настраиваемым дескриптором типа.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">Компонент для получения преобразователя.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">Преобразователь <see cref="T:System.ComponentModel.TypeConverter" /> для заданного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary vsli:raw="Returns a type converter for the specified type.">Возвращает преобразователь типов для указанного типа.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">
        <see cref="T:System.ComponentModel.TypeConverter" /> для заданного типа.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Returns the default event for the specified component.">Возвращает событие по умолчанию для указанного компонента.</summary>
      <param name="component" vsli:raw="The component to get the event for.">Компонент, для которого нужно получить событие.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> с событием по умолчанию или <see langword="null" /> при отсутствии событий.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default event for a component with a custom type descriptor.">Возвращает событие по умолчанию для компонента с настраиваемым дескриптором типа.</summary>
      <param name="component" vsli:raw="The component to get the event for.">Компонент, для которого нужно получить событие.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> с событием по умолчанию или <see langword="null" /> при отсутствии событий.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary vsli:raw="Returns the default event for the specified type of component.">Возвращает событие по умолчанию для указанного типа компонента.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Дескриптор <see cref="T:System.ComponentModel.EventDescriptor" /> с событием по умолчанию или <see langword="null" /> при отсутствии событий.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Returns the default property for the specified component.">Возвращает свойство по умолчанию для указанного компонента.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Компонент, для которого требуется получить свойство по умолчанию.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> со свойством по умолчанию или <see langword="null" /> при отсутствии свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default property for the specified component with a custom type descriptor.">Возвращает свойство по умолчанию для указанного компонента с настраиваемым дескриптором типа.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Компонент, для которого требуется получить свойство по умолчанию.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> со свойством по умолчанию или <see langword="null" /> при отсутствии свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary vsli:raw="Returns the default property for the specified type of component.">Возвращает свойство по умолчанию для указанного типа компонента.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the class to get the property for.">Тип <see cref="T:System.Type" />, представляющий класс, для которого нужно получить свойство.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Дескриптор <see cref="T:System.ComponentModel.PropertyDescriptor" /> со свойством по умолчанию или <see langword="null" /> при отсутствии свойств.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets an editor with the specified base type for the specified component.">Получает редактор с заданным базовым типом для указанного компонента.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Компонент, для которого нужно получить редактор.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">Тип <see cref="T:System.Type" />, представляющий базовый тип искомого редактора.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="component" /> или <paramref name="editorBaseType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Экземпляр редактора, который может быть приведен к заданному типу редактора, или <see langword="null" />, если не удается найти редактор запрошенного типа.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary vsli:raw="Returns an editor with the specified base type and with a custom type descriptor for the specified component.">Возвращает редактор с заданным базовым типом и настраиваемым дескриптором типа для указанного компонента.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Компонент, для которого нужно получить редактор.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">Тип <see cref="T:System.Type" />, представляющий базовый тип искомого редактора.</param>
      <param name="noCustomTypeDesc" vsli:raw="A flag indicating whether custom type description information should be considered.">Флаг, указывающий, следует ли учитывать сведения настраиваемого описания типа.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="component" /> или <paramref name="editorBaseType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Экземпляр редактора, который может быть приведен к заданному типу редактора, или <see langword="null" />, если не удается найти редактор запрошенного типа.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary vsli:raw="Returns an editor with the specified base type for the specified type.">Получает редактор с заданным базовым типом для указанного компонента.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you are trying to find.">Тип <see cref="T:System.Type" />, представляющий базовый тип искомого редактора.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="type" /> или <paramref name="editorBaseType" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="An instance of the editor object that can be cast to the given base type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Экземпляр объекта редактора, который может быть приведен к заданному базовому типу, или <see langword="null" />, если не удается найти редактор запрошенного типа.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary vsli:raw="Returns the collection of events for the specified component.">Возвращает коллекцию событий для указанного компонента.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Компонент, для которого извлекаются события.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" /> с событиями для данного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter.">Возвращает коллекцию событий для указанного компонента, используя заданный массив атрибутов в качестве фильтра.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Компонент, для которого извлекаются события.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">Массив типа <see cref="T:System.Attribute" />, который можно использовать в качестве фильтра.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" />, содержащая события, соответствующие заданным атрибутам для этого компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">Возвращает коллекцию событий для указанного компонента, используя заданный массив атрибутов в качестве фильтра и используя пользовательский дескриптор типа.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Компонент, для которого извлекаются события.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" />, содержащая события, соответствующие заданным атрибутам для этого компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component with a custom type descriptor.">Возвращает коллекцию событий для указанного компонента с дескриптором пользовательского типа.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Компонент, для которого извлекаются события.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" /> с событиями для данного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary vsli:raw="Returns the collection of events for a specified type of component.">Возвращает коллекцию событий для указанного типа компонента.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" /> с событиями для данного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified type of component using a specified array of attributes as a filter.">Возвращает коллекцию событий для указанного типа компонента, используя заданный массив атрибутов в качестве фильтра.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">Массив типа <see cref="T:System.Attribute" />, который можно использовать в качестве фильтра.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Коллекция <see cref="T:System.ComponentModel.EventDescriptorCollection" />, содержащая события, соответствующие заданным атрибутам для этого компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary vsli:raw="Returns the fully qualified name of the component.">Возвращает полное имя компонента.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to find the name for.">Компонент <see cref="T:System.ComponentModel.Component" />, имя которого нужно найти.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="The fully qualified name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">Полное имя заданного компонента, или <see langword="null" />, если у компонента нет имени.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary vsli:raw="Returns the collection of properties for a specified component.">Возвращает коллекцию свойств для указанного компонента.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Компонент, для которого требуется получить свойства.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами данного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter.">Возвращает коллекцию свойств для указанного компонента, используя заданный массив атрибутов в качестве фильтра.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Компонент, для которого требуется получить свойства.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, соответствующими заданным атрибутам для заданного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">Возвращает коллекцию свойств для указанного компонента, используя заданный массив атрибутов в качестве фильтра и пользовательский дескриптор типа.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Компонент, для которого требуется получить свойства.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для учета настраиваемых сведений описания типа; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the events that match the specified attributes for the specified component.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> с событиями, совпадающими с указанными атрибутами для заданного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using the default type descriptor.">Возвращает коллекцию свойств для указанного компонента, используя дескриптор типа по умолчанию.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Компонент, для которого требуется получить свойства.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, чтобы настраиваемые сведения описания типа не учитывались; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">Параметр <paramref name="component" /> является межпроцессным удаленным объектом.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified component.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами заданного компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary vsli:raw="Returns the collection of properties for a specified type of component.">Возвращает коллекцию свойств для указанного типа компонента.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component to get properties for.">Тип <see cref="T:System.Type" />, представляющий компонент, свойства для которого нужно получить.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified type of component.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, содержащая свойства для заданного типа компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.">Возвращает коллекцию свойств для указанного типа компонента, используя заданный массив атрибутов в качестве фильтра.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Массив типа <see cref="T:System.Attribute" />, используемый как фильтр.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for this type of component.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> со свойствами, соответствующими заданным атрибутам для данного типа компонента.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary vsli:raw="Returns the type description provider for the specified component.">Возвращает поставщик описания типа для указанного компонента.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Экземпляр целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified component.">Поставщик <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, связанный с заданным компонентом.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary vsli:raw="Returns the type description provider for the specified type.">Возвращает поставщик описания типа для указанного типа.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified type.">Поставщик <see cref="T:System.ComponentModel.TypeDescriptionProvider" />, связанный с указанным типом.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given an object.">Возвращает тип <see cref="T:System.Type" />, который может использоваться для выполнения отражения, используя объект.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Экземпляр целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; for the specified object.">Тип <see cref="T:System.Type" /> для заданного объекта.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given a class type.">Возвращает тип <see cref="T:System.Type" />, который может использоваться для выполнения отражения, используя тип класса.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; of the specified class.">Тип <see cref="T:System.Type" /> заданного класса.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary vsli:raw="Clears the properties and events for the specified component from the cache.">Удаляет свойства и события для указанного компонента из кэша.</summary>
      <param name="component" vsli:raw="A component for which the properties or events have changed.">Компонент, для которого были изменены свойства или события.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary vsli:raw="Clears the properties and events for the specified assembly from the cache.">Удаляет свойства и события для указанной сборки из кэша.</summary>
      <param name="assembly" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that represents the assembly to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this assembly will be refreshed.">Объект <see cref="T:System.Reflection.Assembly" />, представляющий обновляемую сборку. Каждый тип <see cref="T:System.Type" /> в этой сборке будет обновлен.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary vsli:raw="Clears the properties and events for the specified module from the cache.">Удаляет свойства и события для указанного модуля из кэша.</summary>
      <param name="module" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the module to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this module will be refreshed.">Объект <see cref="T:System.Reflection.Module" />, представляющий обновляемый модуль. Каждый тип <see cref="T:System.Type" /> в этом модуле будет обновлен.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary vsli:raw="Clears the properties and events for the specified type of component from the cache.">Удаляет свойства и события для указанного типа компонента из кэша.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary vsli:raw="Removes an association between two objects.">Удаляет ассоциацию между двумя объектами.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Основной <see cref="T:System.Object" />.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Дополнительный <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">По меньшей мере один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary vsli:raw="Removes all associations for a primary object.">Удаляет все ассоциации для основного объекта.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt; in an association.">Главный объект <see cref="T:System.Object" /> в связи.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="primary" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">Удаляет ранее добавленный поставщик описания типа, связанный с указанным объектом.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> для удаления.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Экземпляр целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">По меньшей мере один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">Удаляет ранее добавленный поставщик описания типа, связанный с указанным типом.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> для удаления.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">По меньшей мере один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">Удаляет ранее добавленный поставщик описания типа, связанный с указанным объектом.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> для удаления.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Экземпляр целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">По меньшей мере один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">Удаляет ранее добавленный поставщик описания типа, связанный с указанным типом.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Объект <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> для удаления.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Тип <see cref="T:System.Type" /> целевого компонента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">По меньшей мере один параметр имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary vsli:raw="Sorts descriptors using the name of the descriptor.">Сортирует дескрипторы по их именам.</summary>
      <param name="infos" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that contains the descriptors to sort.">Список <see cref="T:System.Collections.IList" />, содержащий сортируемые дескрипторы.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;infos&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="infos" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary vsli:raw="Gets or sets the provider for the Component Object Model (COM) type information for the target component.">Получает или задает поставщик сведений о типе COM для целевого компонента.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComNativeDescriptorHandler&quot; /&gt; instance representing the COM type information provider.">Экземпляр <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" />, представляющий поставщик сведений о типе COM.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary vsli:raw="Gets the type of the Component Object Model (COM) object represented by the target component.">Получает тип COM-объекта, представленный целевым компонентом.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the COM object represented by this component, or &lt;see langword=&quot;null&quot; /&gt; for non-COM objects.">Тип <see cref="T:System.Type" /> COM-объекта, представленного этим компонентом, или <see langword="null" /> для объектов, не являющихся COM-объектами.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary vsli:raw="Gets a type that represents a type description provider for all interface types.">Получает тип, представляющий поставщика описаний типов для всех типов интерфейса.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a custom type description provider for all interface types.">Объект <see cref="T:System.Type" />, представляющий настраиваемый поставщик описания типа для всех типов интерфейсов.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary vsli:raw="Provides a type converter that can be used to populate a list box with available types.">Предоставляет преобразователь типов, который может использоваться для заполнения списка доступными типами.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeListConverter&quot; /&gt; class using the type array as the available types.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.TypeListConverter" />, используя в качестве доступных типов массив типов.</summary>
      <param name="types" vsli:raw="The array of type &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as the available types.">Массив типов <see cref="T:System.Type" />, используемый в качестве доступных типов.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object using the given context.">Возвращает значение, показывающее, может ли этот преобразователь выполнить преобразование заданного типа в <see cref="T:System.Type" /> исходного объекта, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object.">Тип <see cref="T:System.Type" /> исходного объекта.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Объект <see cref="T:System.Type" />, представляющий тип, в который необходимо выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the native type of the converter.">Преобразует указанный объект в собственный тип преобразователя.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Объект <see cref="T:System.Globalization.CultureInfo" />, задающий язык и региональные параметры, используемые для представления шрифта.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Преобразовывает указанное значение объекта в указанный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Необязательный класс <see cref="T:System.Globalization.CultureInfo" />. Если не предоставляются, предполагается использование текущего языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Тип <see cref="T:System.Type" />, к которому следует привести значение.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Объект <see cref="T:System.Object" />, представляющий преобразованное значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">Получает коллекцию стандартных значений для того типа данных, для которого предназначен данный проверяющий элемент управления.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Класс <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, содержащий стандартный набор допустимых значений или значение <see langword="null" />, если этот тип данных не поддерживает стандартный набор значений.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">Возвращает значение, показывающее, является ли список стандартных значений, возвращенных методом <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, исчерпывающим.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, так как коллекция <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />, возвращенная методом <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />, является исчерпывающим списком возможных значений. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Возвращает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, поскольку для поиска набора значений, поддерживаемых объектом, необходимо вызвать метод <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />. Этот метод никогда не возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit unsigned integer objects to and from other representations.">Предоставляет преобразователь типов для преобразования 16-разрядных целочисленных объектов без знака в другие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt16Converter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.UInt16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit unsigned integer objects to and from various other representations.">Предоставляет преобразователь типов для преобразования 32-разрядных целочисленных объектов без знака в другие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt32Converter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.UInt32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit unsigned integer objects to and from other representations.">Предоставляет преобразователь типов для преобразования 64-разрядных целочисленных объектов без знака в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt64Converter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.UInt64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Version&quot; /&gt; objects to and from various other representations.">Предоставляет преобразователь типов для преобразования объектов <see cref="T:System.Version" /> в прочие представления и обратно.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.VersionConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.VersionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Возвращает значение, показывающее, может ли этот преобразователь преобразовать объект заданного исходного типа в <see cref="T:System.Version" />.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Объект, предоставляющий контекстную информацию.</param>
      <param name="sourceType" vsli:raw="The type of the object to be converted.">Тип преобразуемого объекта.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can convert sourceType to a &lt;see cref=&quot;T:System.Version&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот преобразователь может преобразовать sourceType в <see cref="T:System.Version" />; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Объект, предоставляющий контекстную информацию.</param>
      <param name="destinationType" vsli:raw="The target type for the conversion.">Тип целевого объекта для преобразования.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can convert an object to the given destination type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если преобразователь может преобразовать объект в заданный конечный тип; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Преобразует указанный объект в <see cref="T:System.Version" />.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Объект, предоставляющий контекстную информацию.</param>
      <param name="culture" vsli:raw="The culture to use for the conversion.">Язык и региональные параметры, используемые для преобразования.</param>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Значение, которое необходимо преобразовать в тип <see cref="T:System.Version" />.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Version&quot; /&gt; string.">Параметр <paramref name="value" /> не является допустимой строкой <see cref="T:System.Version" />.</exception>
      <returns vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; converted to a &lt;see cref=&quot;T:System.Version&quot; /&gt; value.">Значение <paramref name="value" />, преобразованное в <see cref="T:System.Version" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified value to the specified destination type using the specified context and arguments.">Преобразует указанное значение в конечный тип с использованием заданного контекста и аргументов.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="The culture that supplies formatting information for the conversion.">Язык и региональные параметры, которые предоставляют сведения о форматировании для преобразования.</param>
      <param name="value" vsli:raw="The value to be converted.">Преобразуемое значение.</param>
      <param name="destinationType" vsli:raw="The type to convert the value parameter to.">Тип, в который преобразуется параметр значения.</param>
      <returns vsli:raw="An object that represents the converted value.">Объект, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the given value object is valid for this type and for the specified context.">Возвращает значение, показывающее, допустимо ли данное значение для этого типа и для заданного контекста.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="The object to test for validity.">Объект, допустимость которого требуется проверить.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанное значение является допустимым для данного объекта; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary vsli:raw="Specifies an exception that is handled as a warning instead of an error.">Задает исключение, которое будет обрабатываться как предупреждение, а не как ошибка.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class using the specified serialization data and context.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" />, используя указанные данные сериализации и контекст.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Метод <see cref="T:System.Runtime.Serialization.SerializationInfo" />, используемый для десериализации.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Объект назначения, используемый для десериализации.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message and no Help file.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" />, используя указанное сообщение, но без файла справки.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Сообщение, которое будет отображаться для конечного пользователя.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified detailed description and the specified exception.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" /> с указанным подробным описанием и указанным исключением.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">Подробное описание ошибки.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">Ссылка на внутреннее исключение, которое является причиной этого исключения.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" />, используя заданное сообщение и доступ к указанному файлу справки.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Сообщение, которое будет отображаться для конечного пользователя.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">Файл справки, отображаемый, если пользователь запросит справку.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file and topic.">Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.WarningException" />, используя заданное сообщение и доступ к указанным файлу и разделу справки.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Сообщение, которое будет отображаться для конечного пользователя.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">Файл справки, отображаемый, если пользователь запросит справку.</param>
      <param name="helpTopic" vsli:raw="The Help topic to display if the user requests help.">Раздел справки, отображаемый, если пользователь запросит справку.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with the parameter name and additional exception information.">Устанавливает для объекта <see cref="T:System.Runtime.Serialization.SerializationInfo" /> имя параметра и дополнительные сведения об исключении.</summary>
      <param name="info" vsli:raw="Stores the data that was being used to serialize or deserialize the object that the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.CodeDomSerializer&quot; /&gt; was serializing or deserializing.">Хранит данные, использовавшиеся при сериализации (десериализации) объекта с помощью класса <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />.</param>
      <param name="context" vsli:raw="Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.">Описывает источник и место назначения потока, создающего исключение, а также служит для сохранения этого контекста и дополнительного контекста, определяемого вызывающим в процессе сериализации.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary vsli:raw="Gets the Help topic associated with the warning.">Возвращает раздел справки, связанный с данным предупреждением.</summary>
      <returns vsli:raw="The Help topic associated with the warning.">Раздел справки, связанный с данным предупреждением.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary vsli:raw="Gets the Help file associated with the warning.">Возвращает файл справки, связанный с данным предупреждением.</summary>
      <returns vsli:raw="The Help file associated with the warning.">Файл справки, связанный с данным предупреждением.</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary vsli:raw="Converts colors from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Преобразует цвета одного типа данных в другой. Доступ к данному классу осуществляется с помощью объекта <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.ColorConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Drawing.ColorConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Определяет, может ли данный преобразователь преобразовывать объект заданного типа источника в собственный тип преобразователя.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата. Этот объект можно использовать для получения дополнительных сведений о среде, из которой вызывается данный преобразователь.</param>
      <param name="sourceType" vsli:raw="The type from which you want to convert.">Тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если этот объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, показывающее, может ли данный преобразователь преобразовать объект с помощью контекста в конечный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">
        <see cref="T:System.Type" /> представляет нужный результат конвертирования.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если данный преобразователь может выполнить операцию, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">Преобразует указанный объект в тип, используемый преобразователем.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, предоставляющий контекст формата. Этот объект можно использовать для получения дополнительных сведений о среде, из которой вызывается данный преобразователь.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для представления цвета.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">Объект <see cref="T:System.Object" />, представляющий конвертируемое значение.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">Преобразует указанный объект в другой тип.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">Контекст модуля форматирования. Используйте этот объект для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Всегда проверяйте, не равно ли данное значение значению <see langword="null" />. Свойства объекта контекста могут также возвращать значение <see langword="null" />.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">Объект <see cref="T:System.Globalization.CultureInfo" />, определяющий язык и региональные параметры для представления цвета.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Тип, в который требуется преобразовать объект.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationtype" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">Объект <see cref="T:System.Object" />, представляющий конвертируемое значение.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Извлекает коллекцию, содержащую набор стандартных значений типов данных, для которых предназначен данный проверяющий элемент управления. Если тип данных не поддерживает стандартный набор значений, будет возвращено значение <see langword="null" />,.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">Контекст модуля форматирования. Используйте этот объект для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Всегда проверяйте, не равно ли данное значение значению <see langword="null" />. Свойства объекта контекста могут также возвращать значение <see langword="null" />.</param>
      <returns vsli:raw="A collection containing &lt;see langword=&quot;null&quot; /&gt; or a standard set of valid values. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Коллекция, содержащая значение <see langword="null" /> или стандартный набор допустимых значений. Реализация по умолчанию всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports a standard set of values that can be chosen from a list.">Определяет, поддерживает ли объект стандартный набор значений, которые можно выбрать в списке.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.Drawing.ColorConverter.GetStandardValues&quot; /&gt; must be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если метод <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> должен быть вызван для поиска набора значений, поддерживаемых объектом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object from one data type to another.">Преобразует объект <see cref="T:System.Drawing.Point" /> из одного типа данных в другой.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.PointConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Drawing.PointConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Определяет, может ли данный преобразователь преобразовывать объект заданного типа источника в собственный тип преобразователя.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Контекст модуля форматирования. Данный объект может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если этот объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">Объект <see cref="T:System.Type" />, представляющий тип, в который происходит преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если преобразователь может выполнить преобразование, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object.">Преобразовывает указанный объект в объект <see cref="T:System.Drawing.Point" />.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Контекст модуля форматирования. Данный объект может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Объект, содержащий конкретные сведения о языке и региональных параметрах, например языке, календаре и культурном контексте определенной культуры. Он основан на стандарте RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="The converted object.">Преобразованный объект.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Преобразует указанный объект в заданный тип.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Контекст модуля форматирования. Данный объект может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Объект, содержащий конкретные сведения о языке и региональных параметрах, например языке, календаре и культурном контексте определенной культуры. Он основан на стандарте RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Тип, в который требуется преобразовать объект.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="The converted object.">Преобразованный объект.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object.">Создает экземпляр этого типа, задавая набор значений свойств для объекта.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Дескриптор типа, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt;.">Словарь новых значений свойств. Словарь содержит ряд пар "имя-значение", по одной для каждого свойства, возвращенного из метода <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Вновь созданный объект или <see langword="null" />, если объект не был создан. Реализация по умолчанию возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">Определяет, требуется ли вызов <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> для создания нового значения при изменении значения объекта.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если метод <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> необходимо вызвать при изменении одного или нескольких свойств данного объекта. В противном случае возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">Извлекает набор свойств для данного типа. По умолчанию тип не возвращает свойства.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Дескриптор типа, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Значение объекта, для которого извлекаются свойства.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Массив объектов <see cref="T:System.Attribute" />, описывающих свойства.</param>
      <returns vsli:raw="The set of properties that are exposed for this data type. If no properties are exposed, this method might return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Набор свойств, представленных для этого типа данных. Если для этого типа свойств не представлено, метод может вернуть <see langword="null" />. Реализация по умолчанию всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Определяет, поддерживает ли объект свойства. По умолчанию используется значение <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Имеет значение <see langword="true" />, если для поиска свойств этого объекта следует вызвать метод <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary vsli:raw="Converts rectangles from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Преобразует прямоугольники из одного типа данных в другой. Доступ к данному классу осуществляется с помощью объекта <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.RectangleConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Drawing.RectangleConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Определяет, может ли данный преобразователь преобразовывать объект заданного типа источника в собственный тип преобразователя.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Контекст модуля форматирования. Данный объект может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Этот метод возвращает <see langword="true" />, если данный объект может выполнить преобразование; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context. This can be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object can also return &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста могут также возвращать значение <see langword="null" />.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">Объект <see cref="T:System.Type" />, представляющий тип, в который происходит преобразование.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Данный метод возвращает значение <see langword="true" />, если объект может выполнить преобразование; в противном случае возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.Drawing.Rectangle&quot; /&gt; object.">Преобразует данный объект в объект <see cref="T:System.Drawing.Rectangle" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Объект <see cref="T:System.Globalization.CultureInfo" />, содержащий сведения о культурной среде, например язык, календарь и культурные соглашения, связанные с конкретным языком и региональными параметрами. Он основан на стандарте RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="The converted object.">Преобразованный объект.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Преобразует указанный объект в заданный тип.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Объект <see cref="T:System.Globalization.CultureInfo" />, содержащий сведения о культурной среде, например язык, календарь и культурные соглашения, связанные с конкретным языком и региональными параметрами. Он основан на стандарте RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Тип, в который требуется преобразовать объект.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="The converted object.">Преобразованный объект.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.">Создает экземпляр этого типа, задавая набор значений свойств для объекта. Это полезно для объектов, которые доступны только для чтения, но для которых нужно обеспечить возможность изменения свойств.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">Словарь новых значений свойств. Словарь содержит ряд пар "имя-значение", по одной на каждое свойство, возвращенное вызовом метода <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Вновь созданный объект или <see langword="null" />, если объект не был создан. Реализация по умолчанию возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">Определяет, требуется ли вызов <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> для создания нового значения при изменении значения объекта.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Дескриптор типа, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Данный метод возвращает значение <see langword="true" />, если метод <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> необходимо вызвать при изменении одного или нескольких свойств данного объекта. В противном случае возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">Извлекает набор свойств для данного типа. По умолчанию тип не возвращает свойства.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Значение объекта, для которого извлекаются свойства.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Массив объектов <see cref="T:System.Attribute" />, описывающих свойства.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Набор свойств, который должен быть представлен для этого типа данных. Если представление свойств не требуется, может возвращаться значение <see langword="null" />. Реализация по умолчанию всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Определяет, поддерживает ли объект свойства. По умолчанию используется значение <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Данный метод возвращает значение <see langword="true" />, если для поиска свойств объекта следует вызывать метод <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />; в противном случае возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; class is used to convert from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; object.">Класс <see cref="T:System.Drawing.SizeConverter" /> используется для преобразования одного типа данных в другой. Доступ к данному классу осуществляется с помощью объекта <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; object.">Инициализирует новый объект <see cref="T:System.Drawing.SizeConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether this converter can convert an object in the specified source type to the native type of the converter.">Определяет, может ли этот преобразователь преобразовывать объект заданного исходного типа в собственный тип преобразователя.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion.">Данный метод возвращает значение <see langword="true" />, если объект может выполнить преобразование.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Возвращает значение, указывающее, может ли данный преобразователь преобразовать объект с помощью контекста в заданный конечный тип.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This can be &lt;see langword=&quot;null&quot; /&gt;, so always check. Also, properties on the context object can return &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Это может быть значение <see langword="null" />, поэтому следует всегда выполнять проверку. Свойства объекта контекста могут также возвращать значение <see langword="null" />.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Класс <see cref="T:System.Type" />, представляющий тип, в который нужно выполнить преобразование.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Данный метод возвращает значение <see langword="true" />, если объект может выполнить преобразование; в противном случае возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the converter's native type.">Преобразует указанный объект в собственный тип преобразователя.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Объект <see cref="T:System.Globalization.CultureInfo" />, содержащий конкретные сведения о языке и региональных параметрах, например языке, календаре и культурном контексте определенной культуры. Он основан на стандарте RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="The converted object.">Преобразованный объект.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Преобразует указанный объект в заданный тип.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, который может использоваться для получения дополнительных сведений о среде, из которой вызывается этот преобразователь. Параметр может принимать значение <see langword="null" />, поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Объект <see cref="T:System.Globalization.CultureInfo" />, содержащий конкретные сведения о языке и региональных параметрах, например языке, календаре и культурном контексте определенной культуры. Он основан на стандарте RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Тип, в который требуется преобразовать объект.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="The converted object.">Преобразованный объект.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an object of this type by using a specified set of property values for the object. This is useful for creating non-changeable objects that have changeable properties.">Создает объект данного типа, используя указанный набор значений свойств для объекта. Это облегчает создание неизменяемых объектов с изменяемыми свойствами.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">Словарь новых значений свойств. Словарь содержит ряд пар имя-значение, по одной для каждого свойства, возвращенного из метода <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Вновь созданный объект или <see langword="null" />, если объект не был создан. Реализация по умолчанию возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether changing a value on this object should require a call to the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method to create a new value.">Определяет, необходимо ли при изменении значения данного объекта вызывать метод <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />, чтобы создать новое значение.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; object should be called when a change is made to one or more properties of this object.">Значение <see langword="true" />, если объект <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> должен вызываться при внесении изменений в одно или несколько свойств данного объекта.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not have any properties to return.">Извлекает набор свойств для данного типа. По умолчанию тип не обладает свойствами, которые необходимо возвращать.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Значение объекта, для которого извлекаются свойства.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Массив объектов <see cref="T:System.Attribute" />, описывающих свойства.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Набор свойств, который должен быть представлен для этого типа данных. Если представление свойств не требуется, может возвращаться значение <see langword="null" />. Реализация по умолчанию всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Определяет, поддерживаются ли свойства этим объектом. По умолчанию используется значение <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Объект <see cref="T:System.ComponentModel.TypeDescriptor" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method should be called to find the properties of this object.">Значение <see langword="true" />, если метод <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> должен вызываться для поиска свойств данного объекта.</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary vsli:raw="Converts &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; objects from one type to another.">Преобразует объекты <see cref="T:System.Drawing.SizeF" /> из одного типа в другой.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Drawing.SizeFConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the converter can convert from the type specified to the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type, using the specified context.">Возвращает значение, показывающее, может ли преобразователь преобразовывать из заданного типа в тип <see cref="T:System.Drawing.SizeF" /> с помощью заданного контекста.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; the represents the type you wish to convert from.">Объект <see cref="T:System.Type" />, представляющий тип, из которого необходимо выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the conversion can be performed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, показывающее, что преобразование может быть выполнено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; can convert a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; to the specified type.">Возвращает значение, указывающее, может ли преобразователь <see cref="T:System.Drawing.SizeFConverter" /> выполнить преобразование <see cref="T:System.Drawing.SizeF" /> в заданный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Объект <see cref="T:System.Type" />, представляющий тип, из которого нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если преобразователь может выполнить преобразование; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Преобразует заданный объект в тип данного преобразователя с использованием указанного контекста и сведений о культуре.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый в качестве текущей культуры.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Преобразует заданный объект значения в указанный тип с использованием указанного контекста и сведений о культуре.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If null is passed, the current culture is assumed.">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение null, используются текущие настройки языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Тип <see cref="T:System.Type" />, в который преобразуется значение параметра.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; with the specified property values using the specified context.">Создает экземпляр <see cref="T:System.Drawing.SizeF" /> с заданными значениями свойств, используя заданный контекст.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing property names and values.">Объект <see cref="T:System.Collections.IDictionary" />, содержащий имена и значения свойств.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the new &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created.">Объект <see cref="T:System.Object" />, представляющий новый объект <see cref="T:System.Drawing.SizeF" /> или <see langword="null" />, если объект не может быть создан.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a value indicating whether changing a value on this object requires a call to the &lt;see cref=&quot;Overload:System.Drawing.SizeFConverter.CreateInstance&quot; /&gt; method to create a new value.">Возвращает значение, указывающее, требует ли изменение значения этого объекта вызова метода <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" />, чтобы создать новое значение.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. This may be &lt;see langword=&quot;null&quot; /&gt;.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата. Это может быть значение <see langword="null" />.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">Всегда возвращает значение <see langword="true" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves a set of properties for the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type using the specified context and attributes.">Получает набор свойств для типа <see cref="T:System.Drawing.SizeF" />, используя заданный контекст и атрибуты.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to return properties for.">Объект <see cref="T:System.Object" />, свойства которого возвращаются.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Массив объектов <see cref="T:System.Attribute" />, описывающих свойства.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties.">Коллекция <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, которая содержит свойства.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type supports properties.">Возвращает значение, указывающее, поддерживает ли тип <see cref="T:System.Drawing.SizeF" /> свойства.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, с помощью которого может быть предоставлен дополнительный контекст.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">Всегда возвращает значение <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class represents the type converter for extended protection policy used by the server to validate incoming client connections.">Класс <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> представляет преобразователь типов для расширенной политики защиты, используемой сервером для проверки входящих соединений от клиентов.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" />.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">Возвращает значение, указывающее, может ли этот преобразователь выполнить преобразование данного объекта к заданному типу.</summary>
      <param name="context" vsli:raw="The object to convert.">Преобразуемый объект.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Класс <see cref="T:System.Type" />, представляющий тип, в который нужно выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если данный преобразователь может выполнить преобразование; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Convert the object to the specified type.">Преобразуйте объект в указанный тип.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используются текущие настройки языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This should be a &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot; /&gt; object.">Преобразуемый объект <see cref="T:System.Object" />. Должно быть объектом <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Тип <see cref="T:System.Type" />, в который преобразуется значение параметра.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">Не удалось выполнить преобразование.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt; parameter.">Объект <see cref="T:System.Object" />, представляющий преобразуемый параметр <paramref name="value" />.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Предоставляет данные для события <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary vsli:raw="Gets the date/time when the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">Получает дату и время возникновения события <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns vsli:raw="The time the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">Время возникновения события <see cref="E:System.Timers.Timer.Elapsed" />.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Представляет метод, обрабатывающий событие <see cref="E:System.Timers.Timer.Elapsed" /> объекта <see cref="T:System.Timers.Timer" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Источник события.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.Timers.ElapsedEventArgs&quot; /&gt; object that contains the event data.">Объект <see cref="T:System.Timers.ElapsedEventArgs" />, содержащий данные о событии.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary vsli:raw="Generates an event after a set interval, with an option to generate recurring events.">Создает событие после заданного интервала с возможностью создания повторяющихся событий.</summary>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary vsli:raw="Occurs when the interval elapses.">Происходит по истечении интервала времени.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets all the properties to their initial values.">Инициализирует новый экземпляр класса <see cref="T:System.Timers.Timer" /> и задает всем свойствам начальные значения.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets the &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property to the specified number of milliseconds.">Инициализирует новый экземпляр класса <see cref="T:System.Timers.Timer" /> и задает свойству <see cref="P:System.Timers.Timer.Interval" /> указанное значение в миллисекундах.</summary>
      <param name="interval" vsli:raw="The time, in milliseconds, between events. The value must be greater than zero and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Время между событиями в миллисекундах. Значение должно быть больше нуля и меньше или равно <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The value of the &lt;paramref name=&quot;interval&quot; /&gt; parameter is less than or equal to zero, or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Значение параметра <paramref name="interval" /> меньше или равно нулю, или больше <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary vsli:raw="Begins the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">Начинает во время выполнения инициализацию класса <see cref="T:System.Timers.Timer" />, используемого в форме или другим компонентом.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary vsli:raw="Releases the resources used by the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Освобождает ресурсы, используемые объектом <see cref="T:System.Timers.Timer" />.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Освобождает все ресурсы, используемые текущим объектом <see cref="T:System.Timers.Timer" />.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary vsli:raw="Ends the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">Заканчивает во время выполнения инициализацию класса <see cref="T:System.Timers.Timer" />, используемого в форме или другим компонентом.</summary>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary vsli:raw="Starts raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;.">Начинает вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />, задавая для свойства <see cref="P:System.Timers.Timer.Enabled" /> значение <see langword="true" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; is created with an interval equal to or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; + 1, or set to an interval less than zero.">
        <see cref="T:System.Timers.Timer" /> создается с интервалом не меньше <see cref="F:System.Int32.MaxValue" />+1, либо задается интервал меньше нуля.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary vsli:raw="Stops raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">Прекращает вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />, задавая для свойства <see cref="P:System.Timers.Timer.Enabled" /> значение <see langword="false" />.</summary>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary vsli:raw="Gets or sets a Boolean indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once (&lt;see langword=&quot;false&quot; /&gt;) or repeatedly (&lt;see langword=&quot;true&quot; /&gt;).">Возвращает или задает логическое значение, определяющее, должен ли объект <see cref="T:System.Timers.Timer" /> вызывать событие <see cref="E:System.Timers.Timer.Elapsed" /> один раз (<see langword="false" />) или неоднократно (<see langword="true" />).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event each time the interval elapses; &lt;see langword=&quot;false&quot; /&gt; if it should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once, after the first time the interval elapses. The default is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если объект <see cref="T:System.Timers.Timer" /> должен вызывать событие <see cref="E:System.Timers.Timer.Elapsed" /> каждый раз по истечении интервала времени; <see langword="false" />, если событие <see cref="E:System.Timers.Timer.Elapsed" /> следует вызвать только один раз, когда пройдет указанное время. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Возвращает или задает значение, определяющее, должен ли объект <see cref="T:System.Timers.Timer" /> вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This property cannot be set because the timer has been disposed.">Данное свойство задать нельзя, так как таймер удален.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property was set to a value greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; before the timer was enabled.">Перед включением таймера свойству <see cref="P:System.Timers.Timer.Interval" /> задано значение больше <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект <see cref="T:System.Timers.Timer" /> должен вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary vsli:raw="Gets or sets the interval, expressed in milliseconds, at which to raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Возвращает или задает интервал в миллисекундах, по истечении которого возникает событие <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The interval is less than or equal to zero.&#xA;&#xA; -or-&#xA;&#xA; The interval is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)">Интервал меньше или равен нулю.  
  
-или- 
Интервал больше, чем <see cref="F:System.Int32.MaxValue" />, а таймер в настоящий момент включен. (Если таймер в данный момент выключен, исключение не генерируется до его включения.)</exception>
      <returns vsli:raw="The time, in milliseconds, between &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; events. The value must be greater than zero, and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;. The default is 100 milliseconds.">Время между событиями <see cref="E:System.Timers.Timer.Elapsed" /> в миллисекундах. Значение должно быть больше нуля и меньше или равно <see cref="F:System.Int32.MaxValue" />. Значение по умолчанию — 100 миллисекунд.</returns>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary vsli:raw="Gets or sets the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; to its container in design mode.">Возвращает или задает сайт, который привязывает <see cref="T:System.Timers.Timer" /> к его контейнеру в режиме конструктора.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface representing the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; object to its container.">Интерфейс <see cref="T:System.ComponentModel.ISite" />, представляющий сайт, который привязывает объект <see cref="T:System.Timers.Timer" /> к его контейнеру.</returns>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary vsli:raw="Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.">Получает или задает объект, используемый для маршалирования вызовов обработчика событий, осуществленных после истечения интервала времени.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ISynchronizeInvoke&quot; /&gt; representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, представляющий объект, используемый для маршалинга вызовов обработчика событий, осуществленных после истечения интервала времени. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary vsli:raw="Sets the description that visual designers can display when referencing an event, extender, or property.">Задает описание, которое могут отображать визуальные конструкторы при обращении к событию, средству расширения или свойству.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.TimersDescriptionAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Timers.TimersDescriptionAttribute" />.</summary>
      <param name="description" vsli:raw="The description to use.">Описание, которое следует использовать.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary vsli:raw="Gets the description that visual designers can display when referencing an event, extender, or property.">Возвращает описание, которое могут отображать визуальные конструкторы при обращении к событию, средству расширения или свойству.</summary>
      <returns vsli:raw="The description for the event, extender, or property.">Описание для события, средства расширения или свойства.</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; type to a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type, and vice versa.">Преобразует значение типа <see cref="T:System.String" /> к типу <see cref="T:System.Uri" /> и наоборот.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.UriTypeConverter&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.UriTypeConverter" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">Возвращает значение, указывающее, может ли этот преобразователь преобразовать объект заданного типа к типу этого преобразователя.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert from.">Тип <see cref="T:System.Type" />, представляющий тип, от которого требуется выполнить преобразование.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;sourceType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="sourceType" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is a &lt;see cref=&quot;T:System.String&quot; /&gt; type or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type can be assigned from &lt;paramref name=&quot;sourceType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если <paramref name="sourceType" /> является типом <see cref="T:System.String" /> либо или к типу <see cref="T:System.Uri" /> может быть преобразовано значение типа <paramref name="sourceType" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Возвращает значение, показывающее, может ли этот преобразователь преобразовать объект в заданный тип с помощью указанного контекста.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert to.">Тип <see cref="T:System.Type" />, представляющий тип, к которому требуется выполнить преобразование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Uri&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если <paramref name="destinationType" /> является типом <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, <see cref="T:System.String" /> или <see cref="T:System.Uri" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Преобразует заданный объект в тип данного преобразователя с использованием указанного контекста и сведений о культуре.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Объект <see cref="T:System.Globalization.CultureInfo" />, используемый в качестве текущей культуры.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a given value object to the specified type, using the specified context and culture information.">Преобразует заданное значение объектного типа к заданному типу, используя заданные сведения о контексте и языке и региональных параметрах.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Объект <see cref="T:System.Globalization.CultureInfo" />. Если передано значение <see langword="null" />, используются текущие настройки языка и региональных параметров.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Преобразуемый объект <see cref="T:System.Object" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <see cref="T:System.Type" />, к которому преобразуется параметр <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="destinationType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Преобразование не может быть выполнено.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" />, представляющий преобразованное значение.</returns>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created from it.">Возвращает значение, указывающее, является ли заданное значение объектного типа объектом <see cref="T:System.Uri" /> либо можно ли создать на основе этого значения объект <see cref="T:System.Uri" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Объект <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, предоставляющий контекст формата.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">Объект <see cref="T:System.Object" /> для проверки на допустимость.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.String&quot; /&gt; from which a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если <paramref name="value" /> является значением типа <see cref="T:System.Uri" /> или значением типа <see cref="T:System.String" />, которое может быть преобразовано к типу <see cref="T:System.Uri" />; в противном случае — <see langword="false" />.</returns>
    </member>
  </members>
</doc>
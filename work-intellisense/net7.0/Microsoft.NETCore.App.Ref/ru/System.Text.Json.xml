<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct handles comments.">Определяет, как структура <see cref="T:System.Text.Json.Utf8JsonReader" /> обрабатывает комментарии.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary vsli:raw="Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.">Разрешает комментарии внутри входных данных JSON и обрабатывает их как допустимые токены. При чтении вызывающий объект может обратиться к значениям комментариев.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary vsli:raw="Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; is thrown. This is the default value.">Запрещает комментарии внутри входных данных JSON. При обнаружении комментарии обрабатываются как недопустимая JSON, и возникает исключение <see cref="T:System.Text.Json.JsonException" />. Это значение по умолчанию.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary vsli:raw="Allows comments within the JSON input and ignores them. The &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; behaves as if no comments are present.">Разрешает комментарии внутри входных данных JSON и игнорирует их. <see cref="T:System.Text.Json.Utf8JsonReader" /> работает так, будто комментарии отсутствуют.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary vsli:raw="Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.">Предоставляет механизм для проверки структурного содержимого значения JSON без автоматического создания экземпляров для значений данных.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonDocument&quot;&gt;&lt;/xref&gt; instance.">Освобождает ресурсы, используемые этим экземпляром <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Анализирует последовательность в виде текста в кодировке UTF-8, представляющего отдельное байтовое значение JSON в JsonDocument.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Анализируемый текст JSON.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Параметры для управления поведением модуля чтения во время анализа.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> содержит неподдерживаемые параметры.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Представление JsonDocument данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Анализирует <see cref="T:System.IO.Stream" /> в виде данных в кодировке UTF-8, представляющих отдельное значение JSON в JsonDocument. Поток считывается до завершения.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Анализируемые данные JSON.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Параметры для управления поведением модуля чтения во время анализа.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> содержит неподдерживаемые параметры.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Представление JsonDocument данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Анализирует память в виде текста в кодировке UTF-8, представляющего отдельное байтовое значение JSON в JsonDocument.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Анализируемый текст JSON.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Параметры для управления поведением модуля чтения во время анализа.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> содержит неподдерживаемые параметры.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Представление JsonDocument данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON value into a JsonDocument.">Анализирует текст, представляющий отдельное символьное значение JSON в JsonDocument.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Анализируемый текст JSON.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Параметры для управления поведением модуля чтения во время анализа.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> содержит неподдерживаемые параметры.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Представление JsonDocument данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON string value into a JsonDocument.">Анализирует текст, представляющий отдельное строковое значение JSON в JsonDocument.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Анализируемый текст JSON.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Параметры для управления поведением модуля чтения во время анализа.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> содержит неподдерживаемые параметры.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Представление JsonDocument данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Анализирует <see cref="T:System.IO.Stream" /> в виде данных в кодировке UTF-8, представляющих отдельное значение JSON в JsonDocument. Поток считывается до завершения.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Анализируемые данные JSON.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Параметры для управления поведением модуля чтения во время анализа.</param>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests.">Токен для отслеживания запросов отмены.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> не представляет допустимое отдельное значение JSON.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> содержит неподдерживаемые параметры.</exception>
      <returns vsli:raw="A task to produce a JsonDocument representation of the JSON value.">Задача по созданию представления JsonDocument данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary vsli:raw="Parses one JSON value (including objects or arrays) from the provided reader.">Анализирует одно значение JSON (включая объекты или массивы) из указанного модуля чтения.</summary>
      <param name="reader" vsli:raw="The reader to read.">Модуль чтения, используемый для чтения.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> содержит неподдерживаемые параметры.

-или-

Текущий маркер <paramref name="reader" /> не запускается или не представляет значение.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">Не удалось считать значение из модуля чтения.</exception>
      <returns vsli:raw="A JsonDocument representing the value (and nested values) read from the reader.">JsonDocument, представляющий значение (и вложенные значения), считанное из модуля чтения.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary vsli:raw="Attempts to parse one JSON value (including objects or arrays) from the provided reader.">Пытается проанализировать одно значение JSON (включая объекты или массивы) из указанного модуля чтения.</summary>
      <param name="reader" vsli:raw="The reader to read.">Модуль чтения, используемый для чтения.</param>
      <param name="document" vsli:raw="When the method returns, contains the parsed document.">Когда этот метод возвращает данные, содержит анализируемый документ.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> содержит неподдерживаемые параметры.

-или-

Текущий маркер <paramref name="reader" /> не запускается или не представляет значение.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">Не удалось считать значение из модуля чтения.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a value was read and parsed into a JsonDocument; &lt;see langword=&quot;false&quot; /&gt; if the reader ran out of data while parsing. All other situations result in an exception being thrown.">Значение <see langword="true" />, если значение было считано и проанализировано в JsonDocument; значение <see langword="false" />, если модулю чтения не хватило данных во время анализа. Во всех других ситуациях возникает исключение.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the document to the provided writer as a JSON value.">Записывает документ в предоставленный модуль записи в виде значения JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the document.">Модуль записи, в который необходимо записать документ.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="writer" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this &lt;see cref=&quot;P:System.Text.Json.JsonDocument.RootElement&quot; /&gt; would result in invalid JSON.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого <see cref="P:System.Text.Json.JsonDocument.RootElement" /> приведет к недопустимому JSON.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary vsli:raw="Gets the root element of this JSON document.">Возвращает корневой элемент этого документа JSON.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the document.">Объект, <see cref="T:System.Text.Json.JsonElement" /> представляющий значение документа.</returns>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when parsing JSON to create a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Предоставляет пользователю возможность определить пользовательское поведение при анализе JSON для создания <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Возвращает или задает значение, которое указывает, разрешена ли (и игнорируется) лишняя запятая в конце списка значений JSON в объекте или массиве внутри считываемых полезных данных JSON.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. Default is &lt;see langword=&quot;false&quot; /&gt;">
        <see langword="true" /> значение, если в конце списка значений JSON в объекте или массиве разрешена лишняя запятая; в противном случае — <see langword="false" /> . Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; handles comments when reading through the JSON data.">Возвращает или задает значение, определяющее способ, с помощью которого <see cref="T:System.Text.Json.JsonDocument" /> обрабатывает комментарии при чтении данных JSON.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">Перечисление обработки комментариев имеет значение, которое не поддерживается (или находится за пределами диапазона перечисления <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">Одно из значений перечисления, указывающее, как обрабатываются комментарии.</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.">Возвращает или задает максимальную глубину, разрешенную при анализе данных JSON, при этом значение по умолчанию (то есть 0) указывает максимальную глубину 64.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">Максимальной глубине присвоено отрицательное значение.</exception>
      <returns vsli:raw="The maximum depth allowed when parsing JSON data.">Максимальная глубина, допустимая при анализе данных JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary vsli:raw="Represents a specific JSON value within a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Представляет определенное значение JSON в <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary vsli:raw="Gets a JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Возвращает JsonElement, который можно безопасно хранить по истечении времени существования исходного <see cref="T:System.Text.Json.JsonDocument" />.</summary>
      <returns vsli:raw="A JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">JsonElement, который можно безопасно хранить по истечении времени существования исходного <see cref="T:System.Text.Json.JsonDocument" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary vsli:raw="Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.">Возвращает перечислитель для перечисления значений в массиве JSON, представленном этим JsonElement.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="An enumerator to enumerate the values in the JSON array represented by this JsonElement.">Перечислитель для перечисления значений в массиве JSON, представленном этим JsonElement.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary vsli:raw="Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Возвращает перечислитель для перечисления свойств в объекте JSON, представленном этим JsonElement.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="An enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Перечислитель для перечисления свойств в объекте JSON, представленном этим JsonElement.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary vsli:raw="Gets the number of values contained within the current array value.">Возвращает количество значений, содержащихся в текущем значении массива.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The number of values contained within the current array value.">Количество значений, содержащихся в текущем значении массива.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Возвращает значение элемента в виде <see cref="T:System.Boolean" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.True&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.False&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является ни <see cref="F:System.Text.Json.JsonValueKind.True" />, ни <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Значение элемента в виде <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Возвращает текущий номер JSON в виде <see cref="T:System.Byte" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Текущий номер JSON в виде <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary vsli:raw="Gets the value of the element as a byte array.">Возвращает значение элемента в виде массива байтов.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text and hence cannot be decoded to bytes.">Значение не закодировано в тексте Base64 и поэтому не может быть декодировано в байты.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The value decoded as a byte array.">Значение, декодированное как массив байтов.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Возвращает значение элемента в виде <see cref="T:System.DateTime" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Это значение не может быть прочитано как <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Значение элемента в виде <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Возвращает значение элемента в виде <see cref="T:System.DateTimeOffset" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Это значение не может быть прочитано как <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Значение элемента в виде <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Возвращает текущий номер JSON в виде <see cref="T:System.Decimal" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Текущий номер JSON в виде <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Возвращает текущий номер JSON в виде <see cref="T:System.Double" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Текущий номер JSON в виде <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Возвращает значение элемента в виде <see cref="T:System.Guid" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.Guid" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Значение элемента в виде <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Возвращает текущий номер JSON в виде <see cref="T:System.Int16" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Текущий номер JSON в виде <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Возвращает текущий номер JSON в виде <see cref="T:System.Int32" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.Int32" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Текущий номер JSON в виде <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Возвращает текущий номер JSON в виде <see cref="T:System.Int64" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.Int64" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Текущий номер JSON в виде <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;utf8PropertyName&quot; /&gt;.">Возвращает <see cref="T:System.Text.Json.JsonElement" />, представляющий значение требуемого свойства, определяемого по <paramref name="utf8PropertyName" />.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return.">Представление в кодировке UTF-8 (без метки порядка байтов) для имени возвращаемого свойства.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Свойство с запрошенным именем не найдено.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">
        <see cref="T:System.Text.Json.JsonElement" />, представляющий значение запрошенного свойства.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Возвращает <see cref="T:System.Text.Json.JsonElement" />, представляющий значение требуемого свойства, определяемого по <paramref name="propertyName" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">Имя свойства, значение которого требуется возвратить.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Свойство с запрошенным именем не найдено.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">
        <see cref="T:System.Text.Json.JsonElement" />, представляющий значение запрошенного свойства.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Возвращает <see cref="T:System.Text.Json.JsonElement" />, представляющий значение требуемого свойства, определяемого по <paramref name="propertyName" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">Имя свойства, значение которого требуется возвратить.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Свойство с запрошенным именем не найдено.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">
        <see cref="T:System.Text.Json.JsonElement" />, представляющий значение запрошенного свойства.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary vsli:raw="Gets a string that represents the original input data backing this value.">Возвращает строку, представляющую исходные входные данные, на которых основано это значение.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The original input data backing this value.">Исходные входные данные, на которых основано это значение.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Возвращает текущий номер JSON в виде <see cref="T:System.SByte" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.SByte" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Текущий номер JSON в виде <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Возвращает текущий номер JSON в виде <see cref="T:System.Single" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.Single" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Текущий номер JSON в виде <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Возвращает значение элемента в виде <see cref="T:System.String" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является ни <see cref="F:System.Text.Json.JsonValueKind.String" />, ни <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Значение элемента в виде <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Возвращает текущий номер JSON в виде <see cref="T:System.UInt16" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.UInt16" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Текущий номер JSON в виде <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Возвращает текущий номер JSON в виде <see cref="T:System.UInt32" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.UInt32" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Текущий номер JSON в виде <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Возвращает текущий номер JSON в виде <see cref="T:System.UInt64" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Значение невозможно представить в виде <see cref="T:System.UInt64" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Текущий номер JSON в виде <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary vsli:raw="Gets a string representation for the current value appropriate to the value type.">Возвращает строковое представление для текущего значения в соответствии с типом значения.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="A string representation for the current value appropriate to the value type.">Строковое представление для текущего значения в соответствии с типом значения.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Пытается представить текущий номер JSON в виде <see cref="T:System.Byte" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">После возврата из этого метода содержит байтовый эквивалент текущего числа JSON, если преобразование выполнено успешно.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Byte" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.">Пытается представить текущую строку JSON в виде массива байтов, предполагая, что она в кодировке Base64.</summary>
      <param name="value" vsli:raw="If the method succeeds, contains the decoded binary representation of the Base64 text.">Если метод выполнен, содержит декодированное двоичное представление текста в кодировке Base64.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если все значение токена закодировано как допустимый текст в Base64 и может быть успешно декодировано в байты; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Пытается представить текущую строку JSON в виде <see cref="T:System.DateTime" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Когда этот метод возвращает данные, содержит значение даты и времени, эквивалентное текущей строке JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если строку можно представить в виде <see cref="T:System.DateTime" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Пытается представить текущую строку JSON в виде <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Когда этот метод возвращает данные, содержит дату и время, эквивалентные текущей строке JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если строку можно представить в виде <see cref="T:System.DateTimeOffset" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Пытается представить текущий номер JSON в виде <see cref="T:System.Decimal" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит десятичный эквивалент текущего номера JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Decimal" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Пытается представить текущий номер JSON в виде <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит значение с плавающей запятой двойной точности, эквивалентное текущему номеру JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Double" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Пытается представить текущую строку JSON в виде <see cref="T:System.Guid" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Когда этот метод возвращает данные, содержит GUID, эквивалентный текущей строке JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если строку можно представить в виде <see cref="T:System.Guid" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Пытается представить текущий номер JSON в виде <see cref="T:System.Int16" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">После возврата из этого метода содержит 16-разрядный целочисленный эквивалент текущего числа JSON, если преобразование выполнено успешно.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Int16" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Пытается представить текущий номер JSON в виде <see cref="T:System.Int32" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит 32-разрядное целочисленное значение, эквивалентное текущему номеру JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Int32" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Пытается представить текущий номер JSON в виде <see cref="T:System.Int64" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит 64-разрядное целочисленное значение, эквивалентное текущему номеру JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Int64" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;utf8PropertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Ищет свойство с именем <paramref name="utf8PropertyName" /> в текущем объекте, возвращая значение, которое указывает, существует ли такое свойство. Если свойство существует, метод назначает его значение аргументу <paramref name="value" />.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.">Представление в кодировке UTF-8 (без метки порядка байтов) для имени возвращаемого свойства.</param>
      <param name="value" vsli:raw="Receives the value of the located property.">Получает значение найденного свойства.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство найдено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Ищет свойство с именем <paramref name="propertyName" /> в текущем объекте, возвращая значение, которое указывает, существует ли такое свойство. Если свойство существует, метод назначает его значение аргументу <paramref name="value" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">Имя искомого свойства.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Когда этот метод возвращает данные, содержит значение указанного свойства.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство найдено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Ищет свойство с именем <paramref name="propertyName" /> в текущем объекте, возвращая значение, которое указывает, существует ли такое свойство. Если свойство существует, его значение назначается аргументу <paramref name="value" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">Имя искомого свойства.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Когда этот метод возвращает данные, содержит значение указанного свойства.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если свойство найдено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Пытается представить текущий номер JSON в виде <see cref="T:System.SByte" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">После возврата из этого метода содержит байтовый эквивалент со знаком текущего числа JSON, если преобразование выполнено успешно.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.SByte" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Пытается представить текущий номер JSON в виде <see cref="T:System.Single" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит значение с плавающей запятой одиночной точности, эквивалентное текущему номеру JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.Single" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Пытается представить текущий номер JSON в виде <see cref="T:System.UInt16" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">После возврата из этого метода содержит беззнаковый 16-разрядный целочисленный эквивалент текущего числа JSON, если преобразование выполнено успешно.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.UInt16" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Пытается представить текущий номер JSON в виде <see cref="T:System.UInt32" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит 32-разрядное целочисленное значение без знака, эквивалентное текущему номеру JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.UInt32" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Пытается представить текущий номер JSON в виде <see cref="T:System.UInt64" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит 64-разрядное целочисленное значение без знака, эквивалентное текущему номеру JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если номер можно представить в виде <see cref="T:System.UInt64" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the text represented by a UTF8-encoded byte span to the string value of this element.">Сравнивает текст, представленный байтовым диапазоном в кодировке UTF-8, со строковым значением этого элемента.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Текст в кодировке UTF-8, с которым производится сравнение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element has the same UTF-8 encoding as&#xA;              &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если строковое значение этого элемента имеет ту же кодировку UTF-8, что и <paramref name="utf8Text" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares a specified read-only character span to the string value of this element.">Сравнивает указанный диапазон символов только для чтения со строковым значением этого элемента.</summary>
      <param name="text" vsli:raw="The text to compare against.">Текст, с которым выполняется сравнение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если строковое значение этого элемента совпадает с <paramref name="text" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary vsli:raw="Compares a specified string to the string value of this element.">Сравнивает указанную строку со строковым значением этого элемента.</summary>
      <param name="text" vsli:raw="The text to compare against.">Текст, с которым выполняется сравнение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если строковое значение этого элемента совпадает с <paramref name="text" />, иначе — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the element to the specified writer as a JSON value.">Записывает элемент в указанный модуль записи в виде значения JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the element.">Средство записи, в которое необходимо записать элемент.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="writer" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this value is &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Undefined&quot; /&gt;.">Значение <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого параметра — <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary vsli:raw="Gets the value at the specified index if the current value is an &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Возвращает значение по указанному индексу, когда текущее значение — <see cref="F:System.Text.Json.JsonValueKind.Array" />.</summary>
      <param name="index" vsli:raw="The item index.">Индекс элемента.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого значения не является <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not in the range [0, &lt;see cref=&quot;M:System.Text.Json.JsonElement.GetArrayLength&quot; /&gt;()).">
        <paramref name="index" /> не входит в диапазон [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The value at the specified index.">Значение по указанному индексу.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary vsli:raw="Gets the type of the current JSON value.">Возвращает тип текущего значения JSON.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
      <returns vsli:raw="The type of the current JSON value.">Тип текущего значения JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary vsli:raw="Represents an enumerator for the contents of a JSON array.">Представляет перечислитель для содержимого массива JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ArrayEnumerator&quot;&gt;&lt;/xref&gt; instance.">Освобождает ресурсы, используемые этим экземпляром <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Перечислитель, который можно использовать для перечисления элементов массива.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Перемещает перечислитель к следующему элементу коллекции.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Перечислитель массива элементов <see cref="T:System.Text.Json.JsonElement" />, который может использоваться для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary vsli:raw="Represents an enumerator for the properties of a JSON object.">Представляет перечислитель для свойств объекта JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ObjectEnumerator&quot;&gt;&lt;/xref&gt; instance.">Освобождает ресурсы, используемые этим экземпляром <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates the properties of an object.">Возвращает перечислитель, который перебирает свойства объекта.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the object.">Перечислитель, который можно использовать для перебора элементов объекта.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Перемещает перечислитель к следующему элементу коллекции.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Перечислитель объектов <see cref="T:System.Text.Json.JsonProperty" />, который может использоваться для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary vsli:raw="Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.">Предоставляет методы для преобразования текста в кодировке UTF-8 или UTF-16 в форму, подходящую для JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a UTF-8 text value as a JSON string.">Кодирует текстовое значение UTF-8 в виде строки JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded text to convert to JSON encoded text.">Текст в кодировке UTF-8 для преобразования в текст в кодировке JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Кодировщик, используемый при экранировании строки. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;utf8Value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains invalid UTF-8 bytes.">
        <paramref name="utf8Value" /> — слишком большое значение.

-или-

<paramref name="utf8Value" /> содержит недопустимые байты UTF-8.</exception>
      <returns vsli:raw="The encoded JSON text.">Текст в кодировке JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a specified text value as a JSON string.">Кодирует указанное текстовое значение в строку JSON.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">Значение для преобразования в текст в кодировке JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Кодировщик, используемый при экранировании строки. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> — слишком большое значение.

-или-

<paramref name="value" /> содержит недопустимые символы UTF-16.</exception>
      <returns vsli:raw="The encoded JSON text.">Текст в кодировке JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes the string text value as a JSON string.">Кодирует строковое текстовое значение в виде строки JSON.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">Значение для преобразования в текст в кодировке JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Кодировщик, используемый при экранировании строки. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> — слишком большое значение.

-или-

<paramref name="value" /> содержит недопустимые символы UTF-16.</exception>
      <returns vsli:raw="The encoded JSON text.">Текст в кодировке JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance and a specified object, which must also be a &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance, have the same value.">Определяет, равны ли значения этого экземпляра и указанного объекта, который также должен быть экземпляром <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <param name="obj" vsli:raw="The object to compare to this instance.">Объект, сравниваемый с этим экземпляром.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance have the same value.">Определяет, равны ли значения этого экземпляра и указанного экземпляра <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <param name="other" vsli:raw="The object to compare to this instance.">Объект, сравниваемый с этим экземпляром.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значения данного экземпляра и <paramref name="other" /> совпадают; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt;.">Возвращает хэш-код для модуля чтения данных <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <returns vsli:raw="The hash code for this instance.">Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary vsli:raw="Converts the value of this instance to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Преобразует значение данного экземпляра в <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The underlying UTF-16 encoded string.">Базовая строка в кодировке UTF-16.</returns>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary vsli:raw="Gets the UTF-8 encoded representation of the pre-encoded JSON text.">Возвращает представление предварительно закодированного текста JSON в кодировке UTF-8.</summary>
      <returns vsli:raw="The UTF-8 encoded representation of the pre-encoded JSON text.">Представление предварительно закодированного текста JSON в кодировке UTF-8.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary vsli:raw="Defines a custom exception object that is thrown when invalid JSON text is encountered, the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.">Определяет пользовательский объект исключения, порождаемого при обнаружении недопустимого текста JSON, при превышении определенной максимальной глубины или несовместимости текста JSON с типом свойства объекта.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.JsonException" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Creates a new exception object with serialized data.">Создает новый объект исключения с сериализованными данными.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Данные сериализованного объекта о вызываемом исключении.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Объект, содержащий контекстные сведения об источнике или назначении.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class with a specified error message.">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.JsonException" /> с указанным сообщением об ошибке.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Контекстно-зависимое сообщение об ошибке.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class, with a specified error message and a reference to the inner exception that is the cause of this exception.">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.JsonException" /> с указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее это исключение.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Контекстно-зависимое сообщение об ошибке.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">Исключение, которое вызвало текущее исключение.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary vsli:raw="Creates a new exception object to relay error information to the user.">Создает объект исключения для передачи сведений об ошибке пользователю.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Контекстно-зависимое сообщение об ошибке.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">Путь, по которому был обнаружен недопустимый JSON.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">Номер строки (начиная с 0), где обнаружен недопустимый JSON при десериализации.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count within the current line (starting at 0) where the invalid JSON was encountered.">Число байтов (начиная с 0) в текущей строке, где обнаружен недопустимый JSON.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary vsli:raw="Creates a new exception object to relay error information to the user that includes a specified inner exception.">Создает объект исключения для передачи сведений об ошибке пользователю, включающий указанное внутреннее исключение.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Контекстно-зависимое сообщение об ошибке.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">Путь, по которому был обнаружен недопустимый JSON.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">Номер строки (начиная с 0), где обнаружен недопустимый JSON при десериализации.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count (starting at 0) within the current line where the invalid JSON was encountered.">Число байтов (начиная с 0) в текущей строке, где обнаружен недопустимый JSON.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">Исключение, которое вызвало текущее исключение.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> сведениями об исключении.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Данные сериализованного объекта о вызываемом исключении.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Объект, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary vsli:raw="Gets the zero-based number of bytes read within the current line before the exception.">Возвращает число байтов, считанных в пределах текущей строки (начиная с 0) перед исключением.</summary>
      <returns vsli:raw="The zero-based number of bytes read within the current line before the exception.">Отсчитываемое от нуля число байтов, считанных в текущей строке до исключения.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary vsli:raw="Gets the zero-based number of lines read before the exception.">Возвращает число считанных строк (начиная с 0) перед исключением.</summary>
      <returns vsli:raw="The zero-based number of lines read before the exception.">Начинающееся с нуля число строк, считанных до исключения.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary vsli:raw="Gets a message that describes the current exception.">Возвращает сообщение, описывающее текущее исключение.</summary>
      <returns vsli:raw="The error message that describes the current exception.">Сообщение об ошибке, описывающее текущее исключение.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary vsli:raw="Gets The path within the JSON where the exception was encountered.">Возвращает путь в JSON, где было обнаружено исключение.</summary>
      <returns vsli:raw="The path within the JSON where the exception was encountered.">Путь в JSON, где было обнаружено исключение.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary vsli:raw="Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.">Определяет политику именования, используемую для преобразования строкового имени в другой формат, например Camel.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Инициализирует новый экземпляр <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary vsli:raw="When overridden in a derived class, converts the specified name according to the policy.">Если переопределено в производном классе, преобразует указанное имя согласно политике.</summary>
      <param name="name" vsli:raw="The name to convert.">Имя для преобразования.</param>
      <returns vsli:raw="The converted name.">Преобразованное имя.</returns>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary vsli:raw="Gets the naming policy for camel-casing.">Возвращает политику именования для Camel.</summary>
      <returns vsli:raw="The naming policy for camel-casing.">Политика именования для Camel.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary vsli:raw="Represents a single property for a JSON object.">Представляет одно свойство объекта JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the specified UTF-8 encoded text to the name of this property.">Сравнивает указанный текст в кодировке UTF-8 с именем этого свойства.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Текст в кодировке UTF-8, с которым производится сравнение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">
        <see cref="T:System.Type" /> этого значения не является <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property has the same UTF-8 encoding as &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если имя этого свойства имеет ту же кодировку UTF-8, что и <paramref name="utf8Text" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the specified text as a character span to the name of this property.">Сравнивает указанный текст как диапазон символов с именем этого свойства.</summary>
      <param name="text" vsli:raw="The text to compare against.">Текст, с которым выполняется сравнение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">
        <see cref="T:System.Type" /> этого значения не является <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если имя этого свойства совпадает с <paramref name="text" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary vsli:raw="Compares the specified string to the name of this property.">Сравнивает указанную строку с именем этого свойства.</summary>
      <param name="text" vsli:raw="The text to compare against.">Текст, с которым выполняется сравнение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">
        <see cref="T:System.Type" /> этого значения не является <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если имя этого свойства совпадает с <paramref name="text" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary vsli:raw="Provides a string representation of the property for debugging purposes.">Предоставляет строковое представление свойства для целей отладки.</summary>
      <returns vsli:raw="A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.">Строка, содержащая неинтерпретированное значение свойства, начинающаяся с объявляющей открывающей кавычки и заканчивающаяся последним символом, который является частью значения.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the property to the provided writer as a named JSON object property.">Записывает свойство в предоставленный модуль записи как свойство именованного объекта JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the property.">Модуль записи, в который необходимо записать свойство.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Text.Json.JsonProperty.Name&quot; /&gt; is too large to be a JSON object property.">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> слишком велико, чтобы быть свойством объекта JSON.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this JSON property's &lt;see cref=&quot;P:System.Text.Json.JsonProperty.Value&quot; /&gt; would result in invalid JSON.">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> этого свойства JSON <see cref="P:System.Text.Json.JsonProperty.Value" /> приведет к недопустимому JSON.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Родительский объект <see cref="T:System.Text.Json.JsonDocument" /> был удален.</exception>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary vsli:raw="Gets the name of this property.">Получает имя данного свойства.</summary>
      <returns vsli:raw="The name of this property.">Имя данного свойства.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary vsli:raw="Gets the value of this property.">Возвращает значение свойства.</summary>
      <returns vsli:raw="The value of this property.">Значение этого свойства.</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when reading JSON.">Предоставляет пользователю возможность определить пользовательское поведение при чтении JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Возвращает или задает значение, которое определяет, разрешена ли (и игнорируется) лишняя запятая в конце списка значений JSON в объекте или массиве внутри считываемых полезных данных JSON.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> значение, если разрешается лишняя запятая; в противном случае — <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; handles comments when reading through the JSON data.">Возвращает или задает значение, определяющее способ, с помощью которого <see cref="T:System.Text.Json.Utf8JsonReader" /> обрабатывает комментарии при чтении данных JSON.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is being set to a value that is not a member of the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enumeration.">Свойству присвоено значение, которое не является членом перечисления <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">Одно из значений перечисления, указывающее, как обрабатываются комментарии.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.">Возвращает или задает максимальную глубину, разрешенную при чтении JSON, при этом значение по умолчанию (то есть 0) указывает максимальную глубину 64.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The maximum depth is being set to a negative value.">Для максимальной глубины задается отрицательное значение.</exception>
      <returns vsli:raw="The maximum depth allowed when reading JSON.">Максимальная глубина, разрешенная при чтении JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary vsli:raw="Defines an opaque type that holds and saves all the relevant state information, which must be provided to the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; to continue reading after processing incomplete data.">Определяет непрозрачный тип, содержащий и сохраняющий все соответствующие сведения о состоянии, которые необходимо предоставить <see cref="T:System.Text.Json.Utf8JsonReader" /> для продолжения чтения после обработки неполных данных.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonReaderState&quot; /&gt; instance.">Формирует новый экземпляр <see cref="T:System.Text.Json.JsonReaderState" />.</summary>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.">Определяет пользовательское поведение <see cref="T:System.Text.Json.Utf8JsonReader" />, которое отличается от RFC по JSON (например, способом обработки комментариев или максимально допустимой глубиной при чтении). По умолчанию <see cref="T:System.Text.Json.Utf8JsonReader" /> строго следует RFC по JSON (то есть комментарии в JSON являются недопустимыми) и осуществляет чтение до максимальной глубины 64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The maximum depth is set to a non-positive value (&amp;lt; 0).">Для максимальной глубины задано значение, не являющееся положительным (&lt; 0).</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary vsli:raw="Gets the custom behavior to use when reading JSON data using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct that may deviate from strict adherence to the JSON specification, which is the default behavior.">Возвращает пользовательское поведение, применяемое при чтении данных JSON с помощью структуры <see cref="T:System.Text.Json.Utf8JsonReader" />, которое может отклоняться от спецификации JSON, отражающей поведение по умолчанию.</summary>
      <returns vsli:raw="The custom behavior to use when reading JSON data.">Пользовательское поведение, используемое при чтении данных JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary vsli:raw="Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.">Предоставляет функциональные возможности сериализации объектов или типов значений в JSON и десериализации JSON в объекты или типы значений.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.">Выполняет синтаксический анализ текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр указанного типа.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Анализируемый текст JSON.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Тип объекта для преобразования и возврата.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Параметры для управления поведением во время анализа.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">Недопустимый JSON.

-или-

<typeparamref name="returnType" /> несовместим с JSON.

-или-

Остались данные в диапазоне больше одного значения JSON.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <paramref name="returnType" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Представление <paramref name="returnType" /> данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of a specified type.">Выполняет синтаксический анализ текста, представляющего одно значение JSON, в экземпляр указанного типа.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Анализируемый текст JSON.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Тип объекта для преобразования и возврата.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Параметры для управления поведением во время анализа.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="json" /> или <paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">Недопустимый JSON.
          
-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

Остались данные в строке больше одного значения JSON.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <paramref name="returnType" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Представление <paramref name="returnType" /> данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.">Считывает одно значение JSON (включая объекты или массивы) из предоставленного модуля чтения и преобразует его в экземпляр указанного типа.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">Модуль чтения, из которого читается JSON.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Тип объекта для преобразования и возврата.</param>
      <param name="options" vsli:raw="Options to control the serializer behavior during reading.">Параметры для управления поведением сериализатора во время чтения.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">Недопустимый JSON.
          
-или-

<typeparamref name="returnType" /> несовместим с JSON.

-или-

Не удалось считать значение из модуля чтения.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is using unsupported options.">
        <paramref name="reader" /> использует неподдерживаемые параметры.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <paramref name="returnType" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Представление <paramref name="returnType" /> данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.">Выполняет синтаксический анализ текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Анализируемый текст JSON.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Параметры для управления поведением во время анализа.</param>
      <typeparam name="TValue" vsli:raw="The target type of the UTF-8 encoded text.">Целевой тип текста в кодировке UTF-8.</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">Недопустимый JSON.

-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

Остались данные в диапазоне больше одного значения JSON.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <typeparamref name="TValue" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.">Выполняет синтаксический анализ текста, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Анализируемый текст JSON.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Параметры для управления поведением во время анализа.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Целевой тип значения JSON.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">Недопустимый JSON.

-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

Остались данные в строке больше одного значения JSON.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <typeparamref name="TValue" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.">Считывает одно значение JSON (включая объекты или массивы) из предоставленного модуля чтения в экземпляр типа, заданного параметром универсального типа.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">Модуль чтения, из которого читается JSON.</param>
      <param name="options" vsli:raw="Options to control serializer behavior during reading.">Параметры для управления поведением сериализатора во время чтения.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Целевой тип значения JSON.</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">Недопустимый JSON.

-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

Не удалось считать значение из модуля чтения.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; uses unsupported options.">
        <paramref name="reader" /> использует неподдерживаемые параметры.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <typeparamref name="TValue" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.">Асинхронное чтение текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр указанного типа. Поток считывается до завершения.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Анализируемые данные JSON.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Тип объекта для преобразования и возврата.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Параметры для управления поведением во время чтения.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token that may be used to cancel the read operation.">Токен отмены, который может использоваться для отмены операции чтения.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="utf8Json" /> или <paramref name="returnType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">Недопустимый JSON.

-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

В потоке остались данные.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <paramref name="returnType" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Представление <paramref name="returnType" /> данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion.">Асинхронное чтение текста в кодировке UTF-8, представляющего одно значение JSON, в экземпляр типа, заданного параметром универсального типа. Поток считывается до завершения.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Анализируемые данные JSON.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Параметры для управления поведением во время чтения.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the read operation.">Токен, который можно использовать для отмены операции чтения.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Целевой тип значения JSON.</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">Недопустимый JSON.

-или-

<typeparamref name="TValue" /> несовместим с JSON.

-или-

В потоке остались данные.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <typeparamref name="TValue" /> или его сериализуемых членов отсутствуют.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt;is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> имеет значение <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Представление <typeparamref name="TValue" /> данного значения JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a specified type into a JSON string.">Преобразует значение указанного типа в строку JSON.</summary>
      <param name="value" vsli:raw="The value to convert.">Преобразуемое значение.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Тип <paramref name="value" /> для преобразования.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Параметры для управления поведением преобразования.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">Параметр <paramref name="inputType" /> несовместим с параметром <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <paramref name="inputType" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="The JSON string representation of the value.">Строковое представление JSON значения.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of the specified type to the provided writer.">Записывает представление JSON указанного типа в предоставленный модуль записи.</summary>
      <param name="writer" vsli:raw="The JSON writer to write to.">Модуль записи JSON, в который производится запись.</param>
      <param name="value" vsli:raw="The value to convert and write.">Значение для преобразования и записи.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Тип <paramref name="value" /> для преобразования.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Параметры управления поведением сериализации.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;">Параметр <paramref name="inputType" /> несовместим с параметром <paramref name="value" /></exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; or &lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="writer" /> или <paramref name="inputType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <paramref name="inputType" /> или его сериализуемых членов отсутствуют.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string.">Преобразует значение типа, заданного параметром универсального типа, в строку JSON.</summary>
      <param name="value" vsli:raw="The value to convert.">Преобразуемое значение.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Параметры управления поведением сериализации.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Тип сериализуемого значения.</typeparam>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <typeparamref name="TValue" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A JSON string representation of the value.">Строковое представление JSON значения.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of a type specified by a generic type parameter to the provided writer.">Записывает представление JSON типа, указанного параметром универсального типа, в предоставленный модуль записи.</summary>
      <param name="writer" vsli:raw="A JSON writer to write to.">Модуль записи JSON, в который производится запись.</param>
      <param name="value" vsli:raw="The value to convert and write.">Значение для преобразования и записи.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Параметры управления поведением сериализации.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Тип сериализуемого значения.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <typeparamref name="TValue" /> или его сериализуемых членов отсутствуют.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.">Асинхронно преобразует значение указанного типа в текст JSON в кодировке UTF-8 и записывает его в указанный поток.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">Поток UTF-8, в который требуется выполнить запись.</param>
      <param name="value" vsli:raw="The value to convert.">Преобразуемое значение.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Тип <paramref name="value" /> для преобразования.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Параметры управления поведением сериализации.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Токен, который можно использовать для отмены операции записи.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">Параметр <paramref name="inputType" /> несовместим с параметром <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="utf8Json" /> или <paramref name="inputType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <paramref name="inputType" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Задача, представляющая асинхронную операцию записи.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.">Асинхронно преобразует значение типа, заданного параметром универсального типа, в текст JSON в кодировке UTF-8 и записывает его в поток.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">Поток UTF-8, в который требуется выполнить запись.</param>
      <param name="value" vsli:raw="The value to convert.">Преобразуемое значение.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Параметры управления поведением сериализации.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Токен, который можно использовать для отмены операции записи.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Тип сериализуемого значения.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <typeparamref name="TValue" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Задача, представляющая асинхронную операцию записи.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.">Преобразует значение указанного типа в строку JSON, закодированную как байты UTF-8.</summary>
      <param name="value" vsli:raw="The value to convert.">Преобразуемое значение.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Тип <paramref name="value" /> для преобразования.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Параметры для управления поведением преобразования.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">Параметр <paramref name="inputType" /> несовместим с параметром <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputType" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <paramref name="inputType" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Строковое представление JSON значения, закодированное как байты UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.">Преобразует значение типа, указанного параметром универсального типа, в строку JSON, закодированную как байты UTF-8.</summary>
      <param name="value" vsli:raw="The value to convert.">Преобразуемое значение.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Параметры для управления поведением преобразования.</param>
      <typeparam name="TValue" vsli:raw="The type of the value.">Тип значения.</typeparam>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <typeparamref name="TValue" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Строковое представление JSON значения, закодированное как байты UTF-8.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerDefaults">
      <summary vsli:raw="Specifies scenario-based default serialization options that can be used to construct a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance.">Указывает, какие параметры по умолчанию используются <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.General">
      <summary vsli:raw="&lt;para&gt;General-purpose option values. These are the same settings that are applied if a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt; member isn't specified.&lt;/para&gt;&lt;para&gt;For information about the default property values that are applied, see JsonSerializerOptions properties.&lt;/para&gt;">Указывает, что следует использовать значения общего назначения. Это те же параметры, которые применяются, если <see cref="T:System.Text.Json.JsonSerializerDefaults" /> не указывается.</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.Web">
      <summary vsli:raw="&lt;para&gt;Option values appropriate to Web-based scenarios.&lt;/para&gt;&lt;para&gt;This member implies that:&lt;/para&gt;&lt;para&gt;- Property names are treated as case-insensitive.&lt;/para&gt;&lt;para&gt;- &quot;camelCase&quot; name formatting should be employed.&lt;/para&gt;&lt;para&gt;- Quoted numbers (JSON strings for number properties) are allowed.&lt;/para&gt;">Указывает, что значения должны использоваться более подходящим для веб-сценариев образом.</summary>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary vsli:raw="Provides options to be used with &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt;.">Предоставляет параметры для использования с <see cref="T:System.Text.Json.JsonSerializer" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance with a predefined set of options determined by the specified &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt;.">Конструирует новый экземпляр <see cref="T:System.Text.Json.JsonSerializerOptions" /> с предопределенным набором параметров, определяемых указанным <see cref="T:System.Text.Json.JsonSerializerDefaults" />.</summary>
      <param name="defaults" vsli:raw="The &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt; to reason about.">
        <see cref="T:System.Text.Json.JsonSerializerDefaults" /> для анализа.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Copies the options from a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance to a new instance.">Копирует параметры из экземпляра <see cref="T:System.Text.Json.JsonSerializerOptions" /> в новый экземпляр.</summary>
      <param name="options" vsli:raw="The options instance to copy options from.">Настраиваемый экземпляр параметров, из которого копируются свойства.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary vsli:raw="Returns the converter for the specified type.">Возвращает преобразователь для указанного типа.</summary>
      <param name="typeToConvert" vsli:raw="The type to return a converter for.">Тип, для которого возвращается преобразователь.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The configured &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;typeToConvert&quot; /&gt; returned an invalid converter.">Объект <see cref="System.Text.Json.Serialization.JsonConverter" />, настроенный для <paramref name="typeToConvert" />, вернул недопустимый преобразователь.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;typeToConvert&quot; /&gt; or its serializable members.">Совместимые объекты <see cref="System.Text.Json.Serialization.JsonConverter" /> для <paramref name="typeToConvert" /> или его сериализуемых членов отсутствуют.</exception>
      <returns vsli:raw="The first converter that supports the given type.">Первый преобразователь, который поддерживает заданный тип, или значение <see langword="null" />, если преобразовать отсутствует.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary vsli:raw="Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.">Возвращает или задает значение, которое указывает, разрешена ли (и игнорируется) лишняя запятая в конце списка значений JSON в объекте или массиве внутри десериализуемых полезных данных JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Это свойство было задано после сериализации или десериализации.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" /> значение, если в конце списка значений JSON в объекте или массиве допускается лишняя запятая (и игнорируется); <see langword="false" /> в противном случае — значение.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary vsli:raw="Gets the list of user-defined converters that were registered.">Возвращает список зарегистрированных пользовательских преобразователей.</summary>
      <returns vsli:raw="The list of custom converters.">Список пользовательских преобразователей.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary vsli:raw="Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.">Возвращает или задает размер буфера по умолчанию (в байтах), используемый при создании временных буферов.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer size is less than 1.">Размер буфера меньше 1.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Это свойство было задано после сериализации или десериализации.</exception>
      <returns vsli:raw="The default buffer size in bytes.">Размер буфера по умолчанию в байтах.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition">
      <summary vsli:raw="Gets or sets a value that determines when properties with default values are ignored during serialization or deserialization.&#xA; The default value is &lt;see cref=&quot;F:System.Text.Json.Serialization.JsonIgnoreCondition.Never&quot; /&gt;.">Указывает условие, определяющее, будут ли свойства со значениями по умолчанию игнорироваться во время сериализации или десериализации.
Значение по умолчанию — <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="This property is set to &lt;see cref=&quot;F:System.Text.Json.Serialization.JsonIgnoreCondition.Always&quot; /&gt;.">Этому свойству задано значение <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues&quot; /&gt; has been set to &lt;see langword=&quot;true&quot; /&gt;. These properties cannot be used together.">Это свойство задается после сериализации или десериализации.

-или-

Для <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> было задано значение <see langword="true" />. Эти свойства не могут использоваться совместно.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary vsli:raw="Gets or sets the policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format, such as camel-casing.">Возвращает или задает политику, используемую для преобразования имени ключа <see cref="T:System.Collections.IDictionary" /> в другой формат, например Camel.</summary>
      <returns vsli:raw="The policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format.">Политика, используемая для преобразования <see cref="T:System.Collections.IDictionary" /> имени ключа в другой формат.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Возвращает или устанавливает кодировщик, используемый при экранировании строк. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</summary>
      <returns vsli:raw="The JavaScript character encoding.">Кодировка символов JavaScript.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary vsli:raw="Gets or sets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; values are ignored during serialization and deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Возвращает или задает значение, определяющее, пропускаются ли значения <see langword="null" /> во время сериализации и десериализации. Значение по умолчанию — <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition&quot; /&gt; has been set to a non-default value. These properties cannot be used together.">Это свойство было задано после сериализации или десериализации.

-или-

Для <see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" /> задано значение, отличное от значения по умолчанию. Эти свойства не могут использоваться совместно.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if null values are ignored during serialization and deserialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> значение, чтобы игнорировать значения NULL во время сериализации и десериализации; в противном случае см. раздел langword = "false"/ &gt; .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyFields">
      <summary vsli:raw="Gets or sets a value that indicates whether read-only fields are ignored during serialization. A field is read-only if it is marked with the &lt;see langword=&quot;readonly&quot; /&gt; keyword. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Позволяет определить, пропускаются ли во время сериализации поля, доступные только для чтения. Свойство будет доступно только для чтения, если оно не помечено ключевым словом <see langword="readonly" />. Значение по умолчанию — <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">Это свойство задается после сериализации или десериализации.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only fields are ignored during serialization; &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" /> Если поля, доступные только для чтения, должны игнорироваться во время сериализации; <see langword="false" /> в противном случае — значение.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary vsli:raw="Gets a value that indicates whether read-only properties are ignored during serialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Возвращает значение, определяющее, пропускаются ли во время сериализации свойства, доступные только для чтения. Значение по умолчанию — <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Это свойство было задано после сериализации или десериализации.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only properties are ignored during serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> значение, чтобы игнорировать свойства, доступные только для чтения, во время сериализации; в противном случае — <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IncludeFields">
      <summary vsli:raw="Gets or sets a value that indicates whether fields are handled during serialization and deserialization.&#xA;            The default value is &lt;see langword=&quot;false&quot; /&gt;.">Позволяет определить, обрабатываются ли поля при сериализации и десериализации.
Значение по умолчанию — <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">Это свойство задается после сериализации или десериализации.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.">Возвращает или задает максимальную глубину, разрешенную при сериализации или десериализации JSON, при этом значение по умолчанию 0 указывает максимальную глубину 64.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Это свойство было задано после сериализации или десериализации.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">Максимальной глубине присвоено отрицательное значение.</exception>
      <returns vsli:raw="The maximum depth allowed when serializing or deserializing JSON.">Максимальная глубина, допустимая при сериализации или десериализации JSON.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.NumberHandling">
      <summary vsli:raw="Gets or sets an object that specifies how number types should be handled when serializing or deserializing.">Указывает, как числовые типы должны обрабатываться при сериализации или десериализации.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">Это свойство задается после сериализации или десериализации.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary vsli:raw="Gets or sets a value that indicates whether a property's name uses a case-insensitive comparison during deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Возвращает или задает значение, которое определяет, использует ли имя свойства сравнение без учета регистра во время десериализации. Значение по умолчанию — <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if property names are compared case-insensitively; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> для сравнения имен свойств с использованием сравнения без учета регистра; в противном случае — <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary vsli:raw="Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Возвращает или задает значение, указывающее политику, используемую для преобразования имени свойства объекта в другой формат, например "верблюжий" стиль, или <see langword="null" />, чтобы оставить имена свойств без изменений.</summary>
      <returns vsli:raw="A property naming policy, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Политика именования свойств или <see langword="null" /> оставление имен свойств без изменений.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary vsli:raw="Gets or sets a value that defines how comments are handled during deserialization.">Возвращает или задает значение, определяющее, как комментарии обрабатываются во время десериализации.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Это свойство было задано после сериализации или десериализации.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">Перечисление обработки комментариев имеет значение, которое не поддерживается (или находится за пределами диапазона перечисления <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
      <returns vsli:raw="A value that indicates whether comments are allowed, disallowed, or skipped.">Значение, указывающее, разрешены ли комментарии, запрещены или пропущены.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler">
      <summary vsli:raw="Gets or sets an object that specifies how object references are handled when reading and writing JSON.">Позволяет определить, как обрабатываются ссылки на объекты при чтении и записи данных в формате JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary vsli:raw="Gets or sets a value that indicates whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.">Возвращает или задает значение, которое определяет, должен ли JSON использовать автоматическое форматирование. По умолчанию JSON сериализуется без лишних пробелов.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Это свойство было задано после сериализации или десериализации.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if JSON is pretty printed on serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> значение, если JSON довольно хорошо печатается при сериализации; в противном случае — <see langword="false" /> . Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary vsli:raw="Defines the various JSON tokens that make up a JSON text.">Определяет различные токены JSON, составляющие текст JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary vsli:raw="The token type is a comment string.">Тип токена — строка комментария.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary vsli:raw="The token type is the end of a JSON array.">Тип токена — конец массива JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary vsli:raw="The token type is the end of a JSON object.">Тип токена — конец объекта JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary vsli:raw="The token type is the JSON literal false.">Тип токена — литерал false JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;). This is the default token type if no data has been read by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Отсутствие значения (не аналогично <see cref="F:System.Text.Json.JsonTokenType.Null" />).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary vsli:raw="The token type is the JSON literal null.">Тип токена — литерал null JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary vsli:raw="The token type is a JSON number.">Тип токена — это число JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary vsli:raw="The token type is a JSON property name.">Тип токена — это имя свойства JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary vsli:raw="The token type is the start of a JSON array.">Тип токена — начало массива JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary vsli:raw="The token type is the start of a JSON object.">Тип токена — начало объекта JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary vsli:raw="The token type is a JSON string.">Тип токена — строка JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary vsli:raw="The token type is the JSON literal true.">Тип токена — литерал true JSON.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary vsli:raw="Specifies the data type of a JSON value.">Задает тип данных значения JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary vsli:raw="A JSON array.">Массив JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary vsli:raw="The JSON value false.">Значение false у JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary vsli:raw="The JSON value null.">Значение NULL у JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary vsli:raw="A JSON number.">Число JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary vsli:raw="A JSON object.">Объект JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary vsli:raw="A JSON string.">Строка JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary vsli:raw="The JSON value true.">Значение true у JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;).">Отсутствие значения (не аналогично <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary vsli:raw="Allows the user to define custom behavior when writing JSON using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;.">Разрешает пользователю определить пользовательское поведение при чтении JSON с помощью <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Возвращает или устанавливает кодировщик, используемый при экранировании строк. Укажите значение <see langword="null" /> для использования кодировщика по умолчанию.</summary>
      <returns vsli:raw="The JavaScript character encoder used to override the escaping behavior.">Кодировщик символов JavaScript, используемый для переопределения поведения экранирования.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.">Возвращает или задает значение, указывающее, следует ли <see cref="T:System.Text.Json.Utf8JsonWriter" /> форматировать выходные данные JSON, включая добавление отступов для вложенных токенов JSON, добавление новых строк и добавление пробела между именами и значениями свойств.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON output is formatted; &lt;see langword=&quot;false&quot; /&gt; if the JSON is written without any extra white space. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> для форматирования выходных данных JSON; <see langword="false" /> для записи без лишних пробелов. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should skip structural validation and allow the user to write invalid JSON.">Возвращает или задает значение, указывающее, следует ли <see cref="T:System.Text.Json.Utf8JsonWriter" /> пропустить структурную проверку и разрешить пользователю записать недопустимую JSON.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if structural validation is skipped and invalid JSON is allowed; &lt;see langword=&quot;false&quot; /&gt; if an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown on any attempt to write invalid JSON.">
        <see langword="true" /> значение, чтобы пропустить структурную проверку и разрешить недопустимый код JSON; <see langword="false" /> значение, если <see cref="T:System.InvalidOperationException" /> при любой попытке записи НЕДОПУСТИМого JSON выдается исключение.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary vsli:raw="Provides the base class for serialization attributes.">Предоставляет базовый класс для сериализации атрибутов.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonAttribute&quot; /&gt;.">Создает новый экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConstructorAttribute">
      <summary vsli:raw="When placed on a constructor, indicates that the constructor should be used to create instances of the type on deserialization.">При размещении в конструкторе указывает, что для создания экземпляров типа при десериализации следует использовать конструктор.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConstructorAttribute&quot; /&gt;.">Инициализирует новый экземпляр <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary vsli:raw="Converts an object or value to or from JSON.">Преобразует объект или значение в формат JSON или из него.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary vsli:raw="When overridden in a derived class, determines whether the converter instance can convert the specified object type.">Если переопределено в производном классе, определяет, может ли экземпляр преобразователя преобразовать указанный тип объекта.</summary>
      <param name="typeToConvert" vsli:raw="The type of the object to check whether it can be converted by this converter instance.">Тип объекта, для которого необходимо проверить, можно ли его преобразовать этим экземпляром преобразователя.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance can convert the specified object type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр может преобразовать заданный тип объекта. В противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary vsli:raw="Converts an object or value to or from JSON.">Преобразует объект или значение в формат JSON или из него.</summary>
      <typeparam name="T" vsli:raw="The type of object or value handled by the converter.">Тип объекта или значения, обрабатываемого преобразователем.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter`1&quot; /&gt; instance.">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted.">Определяет, можно ли выполнить преобразование в указанный тип.</summary>
      <param name="typeToConvert" vsli:raw="The type to compare against.">Тип, с которым выполняется сравнение.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если тип может быть преобразован; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads and converts the JSON to type &lt;typeparamref name=&quot;T&quot; /&gt;.">Считывает и преобразует JSON в тип <typeparamref name="T" />.</summary>
      <param name="reader" vsli:raw="The reader.">Средство чтения.</param>
      <param name="typeToConvert" vsli:raw="The type to convert.">Тип, преобразование которого выполняется.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Объект, указывающий используемые параметры сериализации.</param>
      <returns vsli:raw="The converted value.">Преобразованное значение.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes a specified value as JSON.">Записывает указанное значение в формате JSON.</summary>
      <param name="writer" vsli:raw="The writer to write to.">Модуль записи, в который производится запись.</param>
      <param name="value" vsli:raw="The value to convert to JSON.">Значение для преобразования в JSON.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Объект, указывающий используемые параметры сериализации.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull">
      <summary vsli:raw="Gets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; should be passed to the converter on serialization, and whether &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt; should be passed on deserialization.">Указывает, следует ли передавать <see langword="null" /> в преобразователь при сериализации и следует ли передавать <see cref="F:System.Text.Json.JsonTokenType.Null" /> при десериализации.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary vsli:raw="When placed on a property or type, specifies the converter type to use.">При размещении в свойстве или типе указывает используемый тип преобразователя.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;.">Инициализирует новый экземпляр <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt; with the specified converter type.">Инициализирует новый экземпляр <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> с указанным типом преобразователя.</summary>
      <param name="converterType" vsli:raw="The type of the converter.">Тип преобразователя.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary vsli:raw="When overridden in a derived class and &lt;see cref=&quot;P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, allows the derived class to create a &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter&quot; /&gt; in order to pass additional state.">Если переопределяется в производном классе и <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" />имеет значение <see langword="null" />, позволяет производному классу создать объект <see cref="T:System.Text.Json.Serialization.JsonConverter" /> для передачи дополнительного состояния.</summary>
      <param name="typeToConvert" vsli:raw="The type of the converter.">Тип преобразователя.</param>
      <returns vsli:raw="The custom converter.">Пользовательский преобразователь.</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">Возвращает тип <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> или <see langword="null" />, если атрибут был создан без типа.</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">Тип <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> или, <see langword="null" /> если он был создан без типа.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary vsli:raw="Supports converting several types by using a factory pattern.">Поддерживает преобразование нескольких типов с помощью шаблона фабрики.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary vsli:raw="When overridden in a derived class, initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterFactory&quot; /&gt; class.">Если переопределен в производном классе, инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for a specified type.">Создает преобразователь для указанного типа.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">Тип, обрабатываемый преобразователем.</param>
      <param name="options" vsli:raw="The serialization options to use.">Используемые параметры сериализации.</param>
      <returns vsli:raw="A converter for which &lt;typeparamref name=&quot;T&quot; /&gt; is compatible with &lt;paramref name=&quot;typeToConvert&quot; /&gt;.">Преобразователь, для которого <typeparamref name="T" /> совместим с <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary vsli:raw="When placed on a property of type &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.">При указании для свойства типа <see cref="T:System.Collections.Generic.IDictionary`2" /> все свойства, не имеющие соответствующего элемента, добавляются в этот словарь во время десериализации и записываются во время сериализации.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonExtensionDataAttribute&quot; /&gt; class.">Создает новый экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary vsli:raw="Prevents a property from being serialized or deserialized.">Предотвращает сериализацию или десериализацию свойства.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt;.">Инициализирует новый экземпляр <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition">
      <summary vsli:raw="Gets or sets the condition that must be met before a property will be ignored.">Позволяет указать условие, которое должно быть выполнено, прежде чем свойство будет пропущено.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreCondition">
      <summary vsli:raw="Controls how the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt; ignores properties on serialization and deserialization.">Управляет тем, как <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> игнорирует свойства при сериализации и десериализации.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always">
      <summary vsli:raw="Property is always ignored.">Свойство всегда будет игнорироваться.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never">
      <summary vsli:raw="Property is always serialized and deserialized, regardless of &lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues&quot; /&gt; configuration.">Свойство всегда будет сериализовано и десериализовано независимо от конфигурации <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault">
      <summary vsli:raw="Property is ignored only if it equals the default value for its type.">Свойство будет игнорироваться только в том случае, если оно имеет значение <see langword="null" />.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull">
      <summary vsli:raw="Property is ignored if its value is &lt;see langword=&quot;null&quot; /&gt;. This is applied only to reference-type properties and fields.">Если значение равно <see langword="null" />, то во время сериализации свойство игнорируется. Применяется только к свойствам и полям ссылочного типа.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIncludeAttribute">
      <summary vsli:raw="Indicates that the member should be included for serialization and deserialization.">Указывает, что для сериализации и десериализации следует добавить элемент.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The attribute is applied to a non-public property.">Атрибут применяется к закрытому свойству.</exception>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIncludeAttribute&quot; /&gt;.">Инициализирует новый экземпляр <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandling">
      <summary vsli:raw="Determines how &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; handles numbers when serializing and deserializing.">Определяет, как <see cref="T:System.Text.Json.JsonSerializer" /> обрабатывает числа при сериализации и десериализации.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals">
      <summary vsli:raw="The &quot;NaN&quot;, &quot;Infinity&quot;, and &quot;-Infinity&quot; &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; tokens can be read as floating-point constants, and the &lt;see cref=&quot;T:System.Single&quot; /&gt; and &lt;see cref=&quot;T:System.Double&quot; /&gt; values for these constants will be written as their corresponding JSON string representations.">Токены <see cref="F:System.Text.Json.JsonTokenType.String" /> NaN, Infinity и -Infinity могут быть считаны как константы с плавающей запятой, а значения <see cref="T:System.Single" /> и <see cref="T:System.Double" /> для этих констант будут записаны как соответствующие строковые представления JSON.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString">
      <summary vsli:raw="Numbers can be read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; tokens. Does not prevent numbers from being read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt; token.">Числа можно считывать из токенов <see cref="F:System.Text.Json.JsonTokenType.String" />. Не запрещает считывание чисел из токена <see cref="F:System.Text.Json.JsonTokenType.Number" />.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.Strict">
      <summary vsli:raw="Numbers will only be read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt; tokens and will only be written as JSON numbers (without quotes).">Числа будут считываться только из токенов <see cref="F:System.Text.Json.JsonTokenType.Number" /> и будут записываться только как числа JSON (без кавычек).</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString">
      <summary vsli:raw="Numbers will be written as JSON strings (with quotes), not as JSON numbers.">Числа будут записываться как строки JSON (с кавычками), а не как числа JSON.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute">
      <summary vsli:raw="When placed on a type, property, or field, indicates what &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonNumberHandling&quot; /&gt; settings should be used when serializing or deserializing numbers.">При размещении в типе, свойстве или поле позволяет указать, какие параметры <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> должны использоваться при сериализации или десериализации чисел.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonNumberHandlingAttribute&quot; /&gt;.">Инициализирует новый экземпляр <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute" />.</summary>
      <param name="handling" vsli:raw="A bitwise combination of the enumeration values that specify how number types should be handled when serializing or deserializing.">Побитовое сочетание значений перечисления, определяющее как следует обрабатывать числовые типы при сериализации или десериализации.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonNumberHandlingAttribute.Handling">
      <summary vsli:raw="Indicates what settings should be used when serializing or deserializing numbers.">Позволяет определить, какие параметры должны использоваться при сериализации или десериализации чисел.</summary>
      <returns vsli:raw="An object that determines the number serialization and deserialization settings.">Объект, определяющий параметры сериализации и десериализации чисел.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary vsli:raw="Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Указывает имя свойства, которое содержится в JSON при сериализации и десериализации. Это переопределяет политику именования, заданную параметром <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonPropertyNameAttribute&quot; /&gt; with the specified property name.">Инициализирует новый экземпляр <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> с заданным именем свойства.</summary>
      <param name="name" vsli:raw="The name of the property.">Имя свойства.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the name of the property.">Возвращает имя свойства.</summary>
      <returns vsli:raw="The name of the property.">Имя свойства.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary vsli:raw="Converts enumeration values to and from strings.">Производит преобразования между значениями перечисления и строками.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with the default naming policy that allows integer values.">Инициализирует экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> политикой именования по умолчанию, допускающей целые числа.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.">Инициализирует экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> с указанной политикой именования и значением, указывающим, разрешены ли неопределенные значения перечисления.</summary>
      <param name="namingPolicy" vsli:raw="The optional naming policy for writing enum values.">Необязательная политика именования для записи значений перечисления.</param>
      <param name="allowIntegerValues" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow undefined enum values; otherwise, &lt;see langword=&quot;false&quot; /&gt;. When &lt;see langword=&quot;true&quot; /&gt;, if an enum value isn't defined, it will output as a number rather than a string.">Значение <see langword="true" />, чтобы разрешить неопределенные значения перечисления; в противном случае — <see langword="false" />. Если задано <see langword="true" /> и значение перечисления не определено, оно выводится как число, а не как строка.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted to an enum.">Определяет, можно ли преобразовать указанный тип в перечисление.</summary>
      <param name="typeToConvert" vsli:raw="The type to be checked.">Проверяемый тип.</param>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the type can be converted; otherwise, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt;.">Значение <see langword="true" />, если тип может быть преобразован; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for the specified type.">Создает преобразователь для указанного типа.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">Тип, обрабатываемый преобразователем.</param>
      <param name="options" vsli:raw="The serialization options to use.">Используемые параметры сериализации.</param>
      <returns vsli:raw="A converter for which &lt;code data-dev-comment-type=&quot;typeparamref&quot;&gt;T&lt;/code&gt; is compatible with &lt;code data-dev-comment-type=&quot;paramref&quot;&gt;typeToConvert&lt;/code&gt;.">Преобразователь, для которого <typeparamref name="T" /> совместим с <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.">Этот класс определяет, как <see cref="T:System.Text.Json.JsonSerializer" /> обрабатывает ссылки при сериализации и десериализации.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceHandler&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Serialization.ReferenceHandler" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; used for each serialization call.">Возвращает <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />, используемый для каждого вызова сериализации.</summary>
      <returns vsli:raw="The resolver to use for serialization and deserialization.">Сопоставитель, используемый для сериализации и десериализации.</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.ReferenceHandler.Preserve">
      <summary vsli:raw="Gets an object that indicates whether metadata properties are honored when JSON objects and arrays are deserialized into reference types, and written when reference types are serialized. This is necessary to create round-trippable JSON from objects that contain cycles or duplicate references.">Свойства метаданных будут учитываться при десериализации объектов JSON и массивов в ссылочные типы и записываться при сериализации ссылочных типов. Это необходимо для создания обходных данных JSON из объектов, содержащих циклы или дублирующиеся ссылки.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler`1">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.">Этот класс определяет, как <see cref="T:System.Text.Json.JsonSerializer" /> обрабатывает ссылки при сериализации и десериализации.</summary>
      <typeparam name="T" vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; to create on each serialization or deserialization call.">Тип создаваемого объекта <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> при каждом вызове сериализации или десериализации.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceHandler`1&quot; /&gt; generic class that can create a &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; instance of the specified type.">Инициализирует новый экземпляр универсального класса <see cref="T:System.Text.Json.Serialization.ReferenceHandler`1" />, который может создать экземпляр <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> указанного объекта <typeparam name="T" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; of type &lt;typeparamref name=&quot;T&quot; /&gt; used for each serialization call.">Создает новый экземпляр <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> типа <typeparamref name="T" />, используемый для каждого вызова сериализации.</summary>
      <returns vsli:raw="The new resolver to use for serialization and deserialization.">Новый сопоставитель, используемый для сериализации и десериализации.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceResolver">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.&#xA; Defines the core behavior of preserving references on serialization and deserialization.">Этот класс определяет, как <see cref="T:System.Text.Json.JsonSerializer" /> обрабатывает ссылки при сериализации и десериализации.
Определяет основное поведение для сохранения ссылок при сериализации и десериализации.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)">
      <summary vsli:raw="Adds an entry to the bag of references using the specified id and value.&#xA; This method gets called when an $id metadata property from a JSON object is read.">Добавляет запись в набор ссылок с указанными идентификатором и значением.
Этот метод вызывается при чтении свойства метаданных $id из объекта JSON.</summary>
      <param name="referenceId" vsli:raw="The identifier of the JSON object or array.">Идентификатор объекта JSON или массива.</param>
      <param name="value" vsli:raw="The value of the CLR reference type object that results from parsing the JSON object.">Значение объекта CLR ссылочного типа, полученного в результате синтаксического анализа объекта JSON.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)">
      <summary vsli:raw="Gets the reference identifier of the specified value if exists; otherwise a new id is assigned.&#xA; This method gets called before a CLR object is written so we can decide whether to write $id and enumerate the rest of its properties or $ref and step into the next object.">Получает идентификатор ссылки для указанного значения, если она уже существует, или назначает новый идентификатор в противном случае.
Этот метод вызывается перед записью объекта CLR, что позволяет определить, следует ли записать идентификатор $id и перечислить все остальные свойства или записать ссылку $ref и перейти к следующему объекту.</summary>
      <param name="value" vsli:raw="The value of the CLR reference type object to get an id for.">Это значение объекта CLR ссылочного типа, для которого нужно получить идентификатор.</param>
      <param name="alreadyExists" vsli:raw="When this method returns, &lt;see langword=&quot;true&quot; /&gt; if a reference to value already exists; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Этот метод возвращает <see langword="true" />, если ссылка на значение уже существует, или <see langword="false" /> в противном случае.</param>
      <returns vsli:raw="The reference id for the specified object.">Идентификатор ссылки для указанного объекта.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)">
      <summary vsli:raw="Returns the CLR reference type object related to the specified reference id.&#xA; This method gets called when $ref metadata property is read.">Возвращает объект CLR ссылочного типа, который связан с указанным идентификатором ссылки. Этот метод вызывается при чтении свойства метаданных $ref.</summary>
      <param name="referenceId" vsli:raw="The reference id related to the returned object.">Идентификатор ссылки, связанной с возвращаемым объектом.</param>
      <returns vsli:raw="The reference type object related to the specified reference id.">Ссылочный тип объекта, связанный с указанным идентификатором ссылки.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary vsli:raw="Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.">Предоставляет высокопроизводительный API для однонаправленного доступа только для чтения к тексту JSON в кодировке UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.">Инициализирует новый экземпляр структуры <see cref="T:System.Text.Json.Utf8JsonReader" />, который обрабатывает последовательность текста в кодировке UTF-8, доступную только для чтения, и указывает, содержат ли входные данные весь текст для обработки.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Предназначенный для обработки текст JSON в кодировке UTF-8.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">Значение <see langword="true" /> указывает, что входная последовательность содержит все данные для обработки; значение <see langword="false" /> указывает, что входной диапазон содержит частичные данные и ожидаются дополнительные данные.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Объект, содержащий состояние модуля чтения. Если это первый вызов конструктора, передайте состояние по умолчанию. В противном случае передайте значение свойства <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> из предыдущего экземпляра <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text using the specified options.">Инициализирует новый экземпляр структуры <see cref="T:System.Text.Json.Utf8JsonReader" />, который обрабатывает последовательность текста в кодировке UTF-8, доступную только для чтения, с использованием указанных параметров.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Предназначенный для обработки текст JSON в кодировке UTF-8.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Определяет пользовательское поведение <see cref="T:System.Text.Json.Utf8JsonReader" />, которое отличается от RFC по JSON (например, способом обработки комментариев или максимально допустимой глубиной при чтении). По умолчанию <see cref="T:System.Text.Json.Utf8JsonReader" /> строго следует RFC по JSON, то есть комментарии в JSON являются недопустимыми, а максимальная глубина составляет 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.">Инициализирует новый экземпляр структуры <see cref="T:System.Text.Json.Utf8JsonReader" />, который обрабатывает доступный только для чтения диапазон текста в кодировке UTF-8 и указывает, содержат ли входные данные весь текст для обработки.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Предназначенный для обработки текст JSON в кодировке UTF-8.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">Значение <see langword="true" /> указывает, что входная последовательность содержит все данные для обработки; значение <see langword="false" /> указывает, что входной диапазон содержит частичные данные и ожидаются дополнительные данные.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Объект, содержащий состояние модуля чтения. Если это первый вызов конструктора, передайте состояние по умолчанию. В противном случае передайте значение свойства <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> из предыдущего экземпляра <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text using the specified options.">Инициализирует новый экземпляр структуры <see cref="T:System.Text.Json.Utf8JsonReader" />, который обрабатывает диапазон текста в кодировке UTF-8, доступный только для чтения, с использованием указанных параметров.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Предназначенный для обработки текст JSON в кодировке UTF-8.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Определяет пользовательское поведение <see cref="T:System.Text.Json.Utf8JsonReader" />, которое отличается от RFC по JSON (например, способом обработки комментариев или максимально допустимой глубиной при чтении). По умолчанию <see cref="T:System.Text.Json.Utf8JsonReader" /> строго следует RFC по JSON, то есть комментарии в JSON являются недопустимыми, а максимальная глубина составляет 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary vsli:raw="Reads the next JSON token value from the source as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Считывает следующее значение токена JSON из источника в виде <see cref="T:System.Boolean" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a Boolean value (that is, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;).">Значение токена JSON не является логическим (то есть <see cref="F:System.Text.Json.JsonTokenType.True" /> или <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;.">Значение <see langword="true" />, если <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> имеет значение <see cref="F:System.Text.Json.JsonTokenType.True" />; значение <see langword="false" />, если <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> имеет значение <see cref="F:System.Text.Json.JsonTokenType.False" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Анализирует текущее значение токена JSON из источника в виде <see cref="T:System.Byte" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">Неверный числовой формат значения токена JSON (например, он содержит дробное значение или записывается в экспоненциальном представлении).
          
-или-

Значение токена JSON представляет число, которое меньше <see cref="F:System.Byte.MinValue" /> или больше <see cref="F:System.Byte.MaxValue" />.</exception>
      <returns vsli:raw="The value of the UTF-8 encoded token.">Значение токена в кодировке UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary vsli:raw="Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.">Анализирует текущее значение токена JSON из источника и декодирует строку JSON в кодировке Base64 в виде массива байтов.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Тип токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text, so it can't be decoded to bytes.&#xA;&#xA;-or-&#xA;&#xA;The value contains invalid or more than two padding characters.&#xA;&#xA;-or-&#xA;&#xA;The value is incomplete. That is, the JSON string length is not a multiple of 4.">Значение не закодировано в тексте Base64 и поэтому не может быть декодировано в байты.

-или-

Значение содержит недопустимый символ или более двух символов заполнения.

-или-

Значение является неполным. То есть длина строки JSON не кратна 4.</exception>
      <returns vsli:raw="The byte array that represents the current JSON token value.">Массив байтов, представляющий текущее значение токена JSON.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary vsli:raw="Parses the current JSON token value from the source as a comment and transcodes it as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Анализирует текущее значение токена JSON из источника как комментарий, перекодируя его как <see cref="T:System.String" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a comment.">Токен JSON не является комментарием.</exception>
      <returns vsli:raw="The comment that represents the current JSON token value.">Комментарий, представляющий текущее значение токена JSON.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.DateTime" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&#xA;        &#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">Значение токена JSON не может быть прочитано как <see cref="T:System.DateTime" />.
        
-или- 
Все значения токенов в кодировке UTF-8 невозможно проанализировать до значения <see cref="T:System.DateTime" />.

-или-

Значение токена JSON имеет неподдерживаемый формат.</exception>
      <returns vsli:raw="The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.">Значение даты и времени, если все значение токена в кодировке UTF-8 можно успешно проанализировать.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.DateTimeOffset" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.&#xA;&#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">Значение токена JSON не может быть прочитано как <see cref="T:System.DateTimeOffset" />.

-или- 
Все значения токенов в кодировке UTF-8 невозможно проанализировать до значения <see cref="T:System.DateTimeOffset" />.

-или-

Значение токена JSON имеет неподдерживаемый формат.</exception>
      <returns vsli:raw="The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.">Смещение даты и времени, если все значения токена в кодировке UTF-8 могут быть успешно проанализированы.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Decimal" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Значение токена JSON представляет число, которое меньше <see cref="F:System.Decimal.MinValue" /> или больше <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Double" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">Значение токена JSON представляет число, которое меньше <see cref="F:System.Double.MinValue" /> или больше <see cref="F:System.Double.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Guid" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is in an unsupported format for a Guid.&#xA;        &#xA;-or-&#xA;&#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">Значение токена JSON имеет неподдерживаемый формат для GUID.
        
-или-

Все значения токенов в кодировке UTF-8 невозможно проанализировать до значения <see cref="T:System.Guid" />.</exception>
      <returns vsli:raw="The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.">Значение GUID, если все значение токена в кодировке UTF-8 можно успешно проанализировать.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Анализирует текущее значение токена JSON из источника в виде <see cref="T:System.Int16" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">Неверный числовой формат значения токена JSON (например, он содержит дробное значение или записывается в экспоненциальном представлении).
          
-или-

Значение токена JSON представляет число, которое меньше <see cref="F:System.Int16.MinValue" /> или больше <see cref="F:System.Int16.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Int32" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Значение токена JSON имеет неправильный числовой формат. Например, оно содержит десятичную часть или записано в экспоненциальном представлении.
            
-или-

Значение токена JSON представляет число, которое меньше <see cref="F:System.Int32.MinValue" /> или больше <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Int64" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Значение токена JSON имеет неправильный числовой формат. Например, оно содержит десятичную часть или записано в экспоненциальном представлении.
            
-или-

Значение токена JSON представляет число, которое меньше <see cref="F:System.Int64.MinValue" /> или больше <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary vsli:raw="Parses the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Анализирует текущее значение токена JSON из источника в виде <see cref="T:System.SByte" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">Неверный числовой формат значения токена JSON (например, он содержит дробное значение или записывается в экспоненциальном представлении).
          
-или-

Значение токена JSON представляет число, которое меньше <see cref="F:System.SByte.MinValue" /> или больше <see cref="F:System.SByte.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.Single" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">Значение токена JSON представляет число, которое меньше <see cref="F:System.Single.MinValue" /> или больше <see cref="F:System.Single.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary vsli:raw="Reads the next JSON token value from the source unescaped and transcodes it as a string.">Считывает следующее значение токена JSON из источника неэкранированным и перекодированным в строку.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a string (that is, not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;, or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.">Значение токена JSON не является строкой (то есть <see cref="F:System.Text.Json.JsonTokenType.String" />, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> или <see cref="F:System.Text.Json.JsonTokenType.Null" />).

-или-

Строка JSON содержит недопустимые байты UTF-8 либо недопустимые суррогаты UTF-16.</exception>
      <returns vsli:raw="The token value parsed to a string, or &lt;see langword=&quot;null&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;.">Значение токена, преобразуемое в строку, или <see langword="null" />, если <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> имеет значение <see cref="F:System.Text.Json.JsonTokenType.Null" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Анализирует текущее значение токена JSON из источника в виде <see cref="T:System.UInt16" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">Неверный числовой формат значения токена JSON (например, он содержит дробное значение или записывается в экспоненциальном представлении).
          
-или-

Значение токена JSON представляет число, которое меньше <see cref="F:System.UInt16.MinValue" /> или больше <see cref="F:System.UInt16.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.UInt32" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">Значение токена JSON имеет неправильный числовой формат. Например, оно содержит десятичную часть или записано в экспоненциальном представлении.

-или-

Значение токена JSON представляет число, которое меньше <see cref="F:System.UInt32.MinValue" /> или больше <see cref="F:System.UInt32.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Считывает следующее значение токена JSON из источника и преобразует его в <see cref="T:System.UInt64" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">Значение токена JSON имеет неправильный числовой формат. Например, оно содержит десятичную часть или записано в экспоненциальном представлении.
            
-или-

Значение токена JSON представляет число, которое меньше <see cref="F:System.UInt64.MinValue" /> или больше <see cref="F:System.UInt64.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Значение токена в кодировке UTF-8, преобразуемое в <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary vsli:raw="Reads the next JSON token from the input source.">Считывает следующий токен JSON из источника входных данных.</summary>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token according to the JSON RFC is encountered.&#xA;        &#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Обнаружен токен JSON, не являющийся допустимым согласно RFC по JSON.
        
-или-

Текущая глубина превышает рекурсивный предел, заданный максимальной глубиной.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the token was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если токен был считан успешно, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary vsli:raw="Skips the children of the current JSON token.">Пропускает дочерний узел текущего токена JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader was given partial data with more data to follow (that is, &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.IsFinalBlock&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).">Модулю чтения были переданы частичные данные с последующими дополнительными данными (то есть <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> — это <see langword="false" />).</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;&#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">При пропуске обнаружен токен JSON, не являющийся допустимым согласно RFC по JSON.

-или-

Текущая глубина превышает рекурсивный предел, заданный максимальной глубиной.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Byte" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Byte" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника, декодирует строку JSON в кодировке Base64 в виде массива байтов и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decoded binary representation of the Base64 text.">При возврате из метода содержит декодированное двоичное представление текста в кодировке Base64.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Токен JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если все значение токена закодировано как допустимый текст в Base64 и может быть успешно декодировано в байты; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.DateTime" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.DateTime" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.DateTimeOffset" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.DateTimeOffset" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Decimal" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Decimal" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Double&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Double" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Double" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Guid&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Guid" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Guid" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Int16" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Int16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Int32" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Int32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Int64" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Int64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.SByte" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.SByte" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Single&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.Single" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Single&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.Single" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.UInt16" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.UInt16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.UInt32" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.UInt32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается выполнить синтаксический анализ текущего значения токена JSON из источника как <see cref="T:System.UInt64" /> и возвращает значение, указывающее, завершилась ли операция.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Когда этот метод возвращает данные, содержит преобразуемое значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">Значение токена JSON не является <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если все значение токена в кодировке UTF-8 можно успешно преобразовать в значение <see cref="T:System.UInt64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary vsli:raw="Tries to skip the children of the current JSON token.">Пытается пропустить дочерние узлы текущего токена JSON.</summary>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;          &#xA;-or -&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">При пропуске обнаружен токен JSON, не являющийся допустимым согласно RFC по JSON.
          
-или-

Текущая глубина превышает рекурсивный предел, заданный максимальной глубиной.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there was enough data for the children to be skipped successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> при наличии достаточного количества данных для успешного пропуска дочерних элементов; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Сравнивает текст в кодировке UTF-8 в диапазоне байтов только для чтения с неэкранированным значением токена JSON в источнике и возвращает значение, указывающее, совпадают ли они.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Текст в кодировке UTF-8, с которым производится сравнение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Токен JSON не является строкой JSON (т. е. не <see cref="F:System.Text.Json.JsonTokenType.String" /> или <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значение токена JSON в источнике совпадает с текстом поиска в кодировке UTF-8, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Сравнивает текст в диапазоне символов только для чтения с неэкранированным значением токена JSON в источнике и возвращает значение, указывающее, совпадают ли они.</summary>
      <param name="text" vsli:raw="The text to compare against.">Текст, с которым выполняется сравнение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Токен JSON не является строкой JSON (т. е. не <see cref="F:System.Text.Json.JsonTokenType.String" /> или <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значение токена JSON в источнике совпадает с текстом поиска, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary vsli:raw="Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Сравнивает текст строки с неэкранированным значением токена JSON в источнике и возвращает значение, указывающее, совпадают ли они.</summary>
      <param name="text" vsli:raw="The text to compare against.">Текст, с которым выполняется сравнение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Токен JSON не является строкой JSON (т. е. не <see cref="F:System.Text.Json.JsonTokenType.String" /> или <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значение токена JSON в источнике совпадает с текстом поиска, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary vsli:raw="Gets the total number of bytes consumed so far by this instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Возвращает общее число байтов, уже использованных этим экземпляром <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
      <returns vsli:raw="The total number of bytes consumed so far.">Общее количество байтов, использованных на данный момент.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Возвращает глубину текущего токена.</summary>
      <returns vsli:raw="The depth of the current token.">Глубина текущего маркера.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; state to pass to a &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; constructor with more data.">Возвращает текущее состояние <see cref="T:System.Text.Json.Utf8JsonReader" /> для передачи в конструктор <see cref="T:System.Text.Json.Utf8JsonReader" /> с дополнительными данными.</summary>
      <returns vsli:raw="The current reader state.">Текущее состояние модуля чтения.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary vsli:raw="Gets a value that indicates which &lt;c&gt;Value&lt;/c&gt; property to use to get the token value.">Возвращает значение, указывающее, какое свойство <c>Value</c> нужно использовать для получения значения токена.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSequence&quot; /&gt; should be used to get the token value; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSpan&quot; /&gt; should be used instead.">
        <see langword="true" /> значение, если <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> следует использовать для получения значения токена;, <see langword="false" /> Если <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> вместо этого следует использовать.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary vsli:raw="Gets a value that indicates whether all the JSON data was provided or there is more data to come.">Возвращает режим данного экземпляра <see cref="T:System.Text.Json.Utf8JsonReader" />, который указывает, были ли предоставлены все данные JSON или еще поступят дополнительные данные.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader was constructed with the input span or sequence containing the entire JSON data to process; &lt;see langword=&quot;false&quot; /&gt; if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.">
        <see langword="true" /> значение, если модуль чтения был создан с входным диапазоном или последовательностью, содержащими все данные JSON для обработки; <see langword="false" /> Если модуль чтения был создан с входным диапазоном или последовательностью, которая может содержать часть данных JSON с дополнительными данными.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">Возвращает текущий <see cref="T:System.SequencePosition" /> в рамках предоставленных входных данных ReadOnlySequence&lt;byte&gt; в кодировке UTF-8 или значение по умолчанию <see cref="T:System.SequencePosition" />, если структура <see cref="T:System.Text.Json.Utf8JsonReader" /> была создана с использованием ReadOnlySpan&lt;byte&gt;.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">Текущий <see cref="T:System.SequencePosition" /> в указанном реадонлисекуенце байте в кодировке UTF- &lt; 8 &gt; или по умолчанию, <see cref="T:System.SequencePosition" /> Если <see cref="T:System.Text.Json.Utf8JsonReader" /> структура была создана с реадонлиспан &lt; байтом &gt; .</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary vsli:raw="Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.">Возвращает индекс, с которого начинается последний обработанный токен JSON (в заданном входном тексте UTF-8), пропуская все пробелы.</summary>
      <returns vsli:raw="The starting index of the last processed JSON token within the given UTF-8 encoded input text.">Начальный индекс последнего обработанного маркера JSON в заданном входном тексте в кодировке UTF-8.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary vsli:raw="Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.">Возвращает тип последнего обработанного токена JSON в тексте JSON с кодировкой UTF-8.</summary>
      <returns vsli:raw="The type of the last processed JSON token.">Тип последнего обработанного маркера JSON.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySequence&amp;lt;byte&amp;gt; slice of the input payload, only if the token is contained within multiple segments.">Получает необработанное значение последнего обработанного токена в виде среза полезных входных данных ReadOnlySequence&lt;байт&gt;, только если токен содержится в нескольких сегментах.</summary>
      <returns vsli:raw="A byte read-only sequence.">Однобайтовая последовательность только для чтения.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySpan&amp;lt;byte&amp;gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&amp;lt;byte&amp;gt;.">Получает необработанное значение последнего обработанного токена в виде среза полезных входных данных ReadOnlySpan&lt;байт&gt;, если токен помещается в один сегмент или если модуль чтения был создан с использованием полезных данных JSON, содержащихся в ReadOnlySpan&lt;байт&gt;.</summary>
      <returns vsli:raw="A read-only span of bytes.">Массив байтов с доступом только для чтения.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary vsli:raw="Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.">Предоставляет высокопроизводительный API для однонаправленной некэшированной записи текста JSON в кодировке UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; to write the output to and customization options.">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Utf8JsonWriter" />, используя указанный <see cref="T:System.Buffers.IBufferWriter`1" /> для записи в него выходных данных и параметров настройки.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">Назначение для записи текста JSON.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Определяет настраиваемое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />. По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified stream to write the output to and customization options.">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Utf8JsonWriter" />, используя указанный поток для записи в него выходных данных и параметров настройки.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">Назначение для записи текста JSON.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Определяет настраиваемое поведение объекта <see cref="T:System.Text.Json.Utf8JsonWriter" />. По умолчанию он записывает JSON в свернутом состоянии (то есть без дополнительных пробелов) и проверяет, являются ли записываемые данные JSON структурно допустимыми в соответствии с RFC по JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary vsli:raw="Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary vsli:raw="Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Асинхронно фиксирует весь оставшийся текст JSON, который еще не был записан, и освобождает все ресурсы, используемые текущим экземпляром.</summary>
      <returns vsli:raw="A task representing the asynchronous dispose operation.">Задача, представляющая асинхронную операцию удаления.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary vsli:raw="Commits the JSON text written so far, which makes it visible to the output destination.">Фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Этот экземпляр удален.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously commits the JSON text written so far, which makes it visible to the output destination.">Асинхронно фиксирует текст JSON, записанный на данный момент, что делает его доступным для места назначения вывода.</summary>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests. The default value is &lt;see cref=&quot;P:System.Threading.CancellationToken.None&quot; /&gt;.">Токен для отслеживания запросов отмены. Значение по умолчанию — <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Этот экземпляр удален.</exception>
      <returns vsli:raw="A task representing the asynchronous flush operation.">Задача, представляющая асинхронную операцию освобождения.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused.">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Этот экземпляр удален.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.Buffers.IBufferWriter`1" />.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">Назначение для записи текста JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Этот экземпляр удален.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">Восстанавливает внутреннее состояние этого экземпляра, чтобы его можно было использовать повторно с новым экземпляром <see cref="T:System.IO.Stream" />.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">Назначение для записи текста JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">Этот экземпляр удален.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded name of the property to write.">Имя записываемого свойства в кодировке UTF-8.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Двоичные данные для записи в виде текста в кодировке Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Двоичные данные для записи в виде текста в кодировке Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Двоичные данные для записи в виде текста в кодировке Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и необработанные байты (в виде строки JSON в кодировке Base64) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON-encoded name of the property to write.">Имя записываемого свойства в кодировке JSON.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Двоичные данные для записи в виде текста в кодировке Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.">Записывает необработанные байты (в виде строки JSON в кодировке Base64) в качестве элемента массива JSON.</summary>
      <param name="bytes" vsli:raw="The binary data to be written as a Base64 encoded JSON string element of a JSON array.">Двоичные данные, которые нужно записать в виде строкового элемента JSON массива JSON в кодировке Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Записывает имя свойства, указанное в качестве доступного только для чтения диапазона байтов, и <see cref="T:System.Boolean" /> значение (в виде литерала JSON true или false) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Значение, записываемое в виде литерала JSON true или false в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Записывает имя свойства, указанное в виде диапазона символов только для чтения, и <see cref="T:System.Boolean" /> значение (в виде литерала JSON true или false) как часть пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Значение, записываемое в виде литерала JSON true или false в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Записывает имя свойства, указанное как строка, и <see cref="T:System.Boolean" /> значение (в виде литерала JSON true или false) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Значение, записываемое в виде литерала JSON true или false в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Boolean" /> (в виде литерала JSON true или false) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Значение, записываемое в виде литерала JSON true или false в составе пары "имя-значение".</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as an element of a JSON array.">Записывает <see cref="T:System.Boolean" /> значение (в виде литерала JSON true или false) в качестве элемента массива JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as an element of a JSON array.">Значение, записываемое в виде литерала JSON true или false в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value as a JSON comment.">Записывает текстовое значение UTF-8 в виде комментария JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Значение в кодировке UTF-8, записываемое в качестве комментария JSON в <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">Указанное значение слишком велико.
        
-или-

<paramref name="utf8Value" /> содержит разделитель комментария (т <c>*/</c> . е.).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value as a JSON comment.">Записывает текстовое значение UTF-16 в виде комментария JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Значение в кодировке UTF-16, записываемое в виде перекодированного комментария JSON в кодировке UTF-8 в <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">Указанное значение слишком велико.
        
-или-

<paramref name="value" /> содержит разделитель комментария (т <c>*/</c> . е.).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary vsli:raw="Writes a string text value as a JSON comment.">Записывает строковое текстовое значение в виде комментария JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Значение в кодировке UTF-16, записываемое в виде перекодированного комментария JSON в кодировке UTF-8 в <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">Указанное значение слишком велико.
        
-или-

<paramref name="value" /> содержит разделитель комментария (т <c>*/</c> . е.).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary vsli:raw="Writes the end of a JSON array.">Записывает конец массива JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary vsli:raw="Writes the end of a JSON object.">Записывает конец объекта JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.">Записывает имя свойства, указанное в качестве доступного только для чтения диапазона байтов, и литерал JSON null как часть пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.">Записывает имя свойства, указанное как диапазон символов только для чтения, и литерал JSON null как часть пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary vsli:raw="Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.">Записывает имя свойства, указанное как строка, и литерал JSON null как часть пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и литерал JSON null в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary vsli:raw="Writes the JSON literal null as an element of a JSON array.">Записывает литерал JSON null как элемент массива JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон байтов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Decimal" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Double" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Int64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Single" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt32" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.UInt64" /> (в виде числа JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Decimal" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Double" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Int32" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Int64" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Single" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и значение <see cref="T:System.UInt32" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и значение <see cref="T:System.UInt64" /> (в виде номера JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Записывает значение <see cref="T:System.Decimal" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Записывает значение <see cref="T:System.Double" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Записывает значение <see cref="T:System.Int32" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Записывает значение <see cref="T:System.Int64" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Записывает значение <see cref="T:System.Single" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Записывает значение <see cref="T:System.UInt32" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Записывает значение <see cref="T:System.UInt64" /> (в виде числа JSON) как элемент массива JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Записывает имя свойства в кодировке UTF-8 (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Записывает имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Записывает имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства (в виде строки JSON) в качестве первой части пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary vsli:raw="Writes the beginning of a JSON array.">Записывает начало массива JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and this write operation would produce invalid JSON.">Глубина JSON превышает максимальную глубину, равную 1000.

-или-

Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.">Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON array to be written.">Имя свойства массива JSON, который нужно записать, в кодировке UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Глубина JSON превышает максимальную глубину, равную 1000.

-или-
       
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.">Записывает начало массива JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Глубина JSON превышает максимальную глубину, равную 1000.

-или-
       
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a string as the key.">Записывает начало массива JSON с именем свойства, указанным как строка, в качестве ключа.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Глубина JSON превышает максимальную глубину, равную 1000.

-или-
       
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON array with a pre-encoded property name as the key.">Записывает начало массива JSON с заранее закодированным именем свойства в качестве ключа.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;    &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">Глубина JSON превысила максимальную глубину, равную 1000.
    
-или-

Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary vsli:raw="Writes the beginning of a JSON object.">Записывает начало объекта JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and the operation would result in writing invalid JSON.">Глубина JSON превышает максимальную глубину, равную 1000.

-или-

Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.">Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон байтов, в качестве ключа.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Глубина JSON превышает максимальную глубину, равную 1000. 

-или-
       
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only character span as the key.">Записывает начало объекта JSON с именем свойства, указанным как доступный только для чтения диапазон символов, в качестве ключа.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Глубина JSON превышает максимальную глубину, равную 1000. 

-или-
       
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a string as the key.">Записывает начало объекта JSON с именем свойства, указанным как строка, в качестве ключа.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">Глубина JSON превышает максимальную глубину, равную 1000. 

-или-
       
Проверка включена, и эта операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON object with a pre-encoded property name as the key.">Записывает начало объекта JSON с заранее закодированным именем свойства в качестве ключа.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;          &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">Глубина JSON превысила максимальную глубину, равную 1000.
          
-или-

Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства UTF-8 и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства UTF-8 и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства UTF-8 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства UTF-8 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary vsli:raw="Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства UTF-8 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства в кодировке UTF-8 и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">Проверка включена, и этот метод приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как доступный только для чтения диапазон символов, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства UTF-16 и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства UTF-16 и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary vsli:raw="Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства UTF-16 и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и текстовое значение UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и текстовое значение UTF-16 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary vsli:raw="Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства, указываемое как строка, и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">Имя или значение указанного свойства слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает имя свойства и заранее закодированное значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Имя указанного свойства слишком длинное.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и текстовое значение в UTF-8 (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary vsli:raw="Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает заранее закодированное имя свойства и строковое текстовое значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Записывает заранее закодированные имя свойства и значение (в виде строки JSON) в составе пары "имя-значение" объекта JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке JSON.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Значение в кодировке JSON, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары "имя-значение".</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Записывает значение <see cref="T:System.DateTime" /> (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Записывает значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Записывает значение <see cref="T:System.Guid" /> (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">Проверка включена, и операция приведет к записи недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.">Записывает текстовое значение UTF-8 (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string element of a JSON array.">Значение, которое нужно записать в виде строкового элемента JSON массива JSON, в кодировке UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.">Записывает текстовое значение UTF-16 (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary vsli:raw="Writes a string text value (as a JSON string) as an element of a JSON array.">Записывает строковое текстовое значение (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">Указанное значение слишком велико.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.">Записывает заранее закодированное значение (в виде строки JSON) в качестве элемента массива JSON.</summary>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">Проверка включена, и операция записи приведет к получению недопустимого JSON.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary vsli:raw="Gets the total number of bytes committed to the output by the current instance so far.">Возвращает общее число байтов, зафиксированных в выходных данных к настоящему времени текущим экземпляром.</summary>
      <returns vsli:raw="The total number of bytes committed to the output by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far.">Общее число байтов, зафиксированных на выход на данный <see cref="T:System.Text.Json.Utf8JsonWriter" /> момент.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary vsli:raw="Gets the number of bytes written by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far that have not yet been flushed to the output and committed.">Возвращает число байтов, записанных к настоящему времени объектом <see cref="T:System.Text.Json.Utf8JsonWriter" /> и еще не зафиксированных в выходных данных.</summary>
      <returns vsli:raw="The number of bytes written so far by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; that have not yet been flushed to the output and committed.">Число байтов, записанных на данный момент, <see cref="T:System.Text.Json.Utf8JsonWriter" /> которые еще не были сброшены в выходные данные и зафиксированы.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Возвращает глубину текущего токена.</summary>
      <returns vsli:raw="The depth of the current token.">Глубина текущего маркера.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary vsli:raw="Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.">Возвращает пользовательский режим записи JSON с использованием этого экземпляра, который определяет, необходимо ли форматировать выходные данные при записи, следует ли пропускать структурную проверку JSON и какие символы экранировановать.</summary>
      <returns vsli:raw="The custom behavior of this instance of the writer for formatting, validating, and escaping.">Пользовательское поведение данного экземпляра модуля записи для форматирования, проверки и экранирования.</returns>
    </member>
  </members>
</doc>
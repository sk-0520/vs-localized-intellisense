<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.DispatchProxy</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.DispatchProxy">
      <summary>Предоставляет механизм для создания экземпляров прокси-объектов и обработки их диспетчеризации методов.</summary>
    </member>
    <member name="M:System.Reflection.DispatchProxy.#ctor" />
    <member name="M:System.Reflection.DispatchProxy.Create``2">
      <summary>Создает экземпляр объекта, который является производным от класса <typeparamref name="TProxy" /> и реализует интерфейс <typeparamref name="T" />.</summary>
      <typeparam name="T">Интерфейс, который должен быть реализован прокси-сервером.</typeparam>
      <typeparam name="TProxy">Базовый класс, используемый для прокси-класса.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> является классом или <typeparamref name="TProxy" /> запечатан или не имеет конструктор без параметров.</exception>
      <returns>Экземпляр объекта, реализующий <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
      <summary>Каждый раз, когда вызывается любой метод созданного типа прокси, этот метод вызывается для передачи управления.</summary>
      <param name="targetMethod">Метод, вызванный вызывающим объектом.</param>
      <param name="args">Аргументы, которые вызывающий объект передал методу.</param>
      <returns>Объект должен вернуться к вызывающему объекту или <see langword="null" /> для методов void.</returns>
    </member>
  </members>
</doc>